<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="0.0000%" y="741" width="0.2299%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.23%)</title><rect x="0.2299%" y="741" width="0.2299%" height="15" fill="rgb(217,0,24)"/><text x="0.4799%" y="751.50"></text></g><g><title>__GI___libc_free (1 samples, 0.23%)</title><rect x="0.4598%" y="741" width="0.2299%" height="15" fill="rgb(221,193,54)"/><text x="0.7098%" y="751.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="0.6897%" y="741" width="0.2299%" height="15" fill="rgb(248,212,6)"/><text x="0.9397%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="0.9195%" y="741" width="0.2299%" height="15" fill="rgb(208,68,35)"/><text x="1.1695%" y="751.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (1 samples, 0.23%)</title><rect x="1.1494%" y="741" width="0.2299%" height="15" fill="rgb(232,128,0)"/><text x="1.3994%" y="751.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.23%)</title><rect x="1.3793%" y="741" width="0.2299%" height="15" fill="rgb(207,160,47)"/><text x="1.6293%" y="751.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.46%)</title><rect x="1.6092%" y="741" width="0.4598%" height="15" fill="rgb(228,23,34)"/><text x="1.8592%" y="751.50"></text></g><g><title>[anon] (10 samples, 2.30%)</title><rect x="0.0000%" y="757" width="2.2989%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="767.50">[..</text></g><g><title>sql_parser::tokenizer::PeekableChars::next (1 samples, 0.23%)</title><rect x="2.0690%" y="741" width="0.2299%" height="15" fill="rgb(220,122,19)"/><text x="2.3190%" y="751.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.23%)</title><rect x="2.2989%" y="533" width="0.2299%" height="15" fill="rgb(250,228,42)"/><text x="2.5489%" y="543.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (2 samples, 0.46%)</title><rect x="2.2989%" y="709" width="0.4598%" height="15" fill="rgb(240,193,28)"/><text x="2.5489%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (2 samples, 0.46%)</title><rect x="2.2989%" y="693" width="0.4598%" height="15" fill="rgb(216,20,37)"/><text x="2.5489%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (2 samples, 0.46%)</title><rect x="2.2989%" y="677" width="0.4598%" height="15" fill="rgb(206,188,39)"/><text x="2.5489%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (2 samples, 0.46%)</title><rect x="2.2989%" y="661" width="0.4598%" height="15" fill="rgb(217,207,13)"/><text x="2.5489%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.46%)</title><rect x="2.2989%" y="645" width="0.4598%" height="15" fill="rgb(231,73,38)"/><text x="2.5489%" y="655.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.46%)</title><rect x="2.2989%" y="629" width="0.4598%" height="15" fill="rgb(225,20,46)"/><text x="2.5489%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.46%)</title><rect x="2.2989%" y="613" width="0.4598%" height="15" fill="rgb(210,31,41)"/><text x="2.5489%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.46%)</title><rect x="2.2989%" y="597" width="0.4598%" height="15" fill="rgb(221,200,47)"/><text x="2.5489%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (2 samples, 0.46%)</title><rect x="2.2989%" y="581" width="0.4598%" height="15" fill="rgb(226,26,5)"/><text x="2.5489%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2 samples, 0.46%)</title><rect x="2.2989%" y="565" width="0.4598%" height="15" fill="rgb(249,33,26)"/><text x="2.5489%" y="575.50"></text></g><g><title>__libc_recv (2 samples, 0.46%)</title><rect x="2.2989%" y="549" width="0.4598%" height="15" fill="rgb(235,183,28)"/><text x="2.5489%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="2.5287%" y="533" width="0.2299%" height="15" fill="rgb(221,5,38)"/><text x="2.7787%" y="543.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="2.5287%" y="517" width="0.2299%" height="15" fill="rgb(247,18,42)"/><text x="2.7787%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 0.23%)</title><rect x="2.5287%" y="501" width="0.2299%" height="15" fill="rgb(241,131,45)"/><text x="2.7787%" y="511.50"></text></g><g><title>__sys_recvfrom (1 samples, 0.23%)</title><rect x="2.5287%" y="485" width="0.2299%" height="15" fill="rgb(249,31,29)"/><text x="2.7787%" y="495.50"></text></g><g><title>inet_recvmsg (1 samples, 0.23%)</title><rect x="2.5287%" y="469" width="0.2299%" height="15" fill="rgb(225,111,53)"/><text x="2.7787%" y="479.50"></text></g><g><title>tcp_recvmsg (1 samples, 0.23%)</title><rect x="2.5287%" y="453" width="0.2299%" height="15" fill="rgb(238,160,17)"/><text x="2.7787%" y="463.50"></text></g><g><title>sk_wait_data (1 samples, 0.23%)</title><rect x="2.5287%" y="437" width="0.2299%" height="15" fill="rgb(214,148,48)"/><text x="2.7787%" y="447.50"></text></g><g><title>wait_woken (1 samples, 0.23%)</title><rect x="2.5287%" y="421" width="0.2299%" height="15" fill="rgb(232,36,49)"/><text x="2.7787%" y="431.50"></text></g><g><title>schedule_timeout (1 samples, 0.23%)</title><rect x="2.5287%" y="405" width="0.2299%" height="15" fill="rgb(209,103,24)"/><text x="2.7787%" y="415.50"></text></g><g><title>schedule (1 samples, 0.23%)</title><rect x="2.5287%" y="389" width="0.2299%" height="15" fill="rgb(229,88,8)"/><text x="2.7787%" y="399.50"></text></g><g><title>__schedule (1 samples, 0.23%)</title><rect x="2.5287%" y="373" width="0.2299%" height="15" fill="rgb(213,181,19)"/><text x="2.7787%" y="383.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.23%)</title><rect x="2.5287%" y="357" width="0.2299%" height="15" fill="rgb(254,191,54)"/><text x="2.7787%" y="367.50"></text></g><g><title>newidle_balance (1 samples, 0.23%)</title><rect x="2.5287%" y="341" width="0.2299%" height="15" fill="rgb(241,83,37)"/><text x="2.7787%" y="351.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="2.7586%" y="645" width="0.2299%" height="15" fill="rgb(233,36,39)"/><text x="3.0086%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="2.7586%" y="629" width="0.2299%" height="15" fill="rgb(226,3,54)"/><text x="3.0086%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="2.7586%" y="613" width="0.2299%" height="15" fill="rgb(245,192,40)"/><text x="3.0086%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.23%)</title><rect x="2.7586%" y="597" width="0.2299%" height="15" fill="rgb(238,167,29)"/><text x="3.0086%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="2.7586%" y="581" width="0.2299%" height="15" fill="rgb(232,182,51)"/><text x="3.0086%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="2.7586%" y="565" width="0.2299%" height="15" fill="rgb(231,60,39)"/><text x="3.0086%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="2.7586%" y="549" width="0.2299%" height="15" fill="rgb(208,69,12)"/><text x="3.0086%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="2.7586%" y="533" width="0.2299%" height="15" fill="rgb(235,93,37)"/><text x="3.0086%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="2.7586%" y="517" width="0.2299%" height="15" fill="rgb(213,116,39)"/><text x="3.0086%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.23%)</title><rect x="2.7586%" y="501" width="0.2299%" height="15" fill="rgb(222,207,29)"/><text x="3.0086%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="2.7586%" y="485" width="0.2299%" height="15" fill="rgb(206,96,30)"/><text x="3.0086%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="2.7586%" y="469" width="0.2299%" height="15" fill="rgb(218,138,4)"/><text x="3.0086%" y="479.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="2.7586%" y="453" width="0.2299%" height="15" fill="rgb(250,191,14)"/><text x="3.0086%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="2.7586%" y="437" width="0.2299%" height="15" fill="rgb(239,60,40)"/><text x="3.0086%" y="447.50"></text></g><g><title>__GI___mprotect (1 samples, 0.23%)</title><rect x="2.9885%" y="597" width="0.2299%" height="15" fill="rgb(206,27,48)"/><text x="3.2385%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="2.9885%" y="581" width="0.2299%" height="15" fill="rgb(225,35,8)"/><text x="3.2385%" y="591.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.23%)</title><rect x="2.9885%" y="565" width="0.2299%" height="15" fill="rgb(250,213,24)"/><text x="3.2385%" y="575.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.23%)</title><rect x="3.2184%" y="533" width="0.2299%" height="15" fill="rgb(247,123,22)"/><text x="3.4684%" y="543.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.23%)</title><rect x="3.2184%" y="517" width="0.2299%" height="15" fill="rgb(231,138,38)"/><text x="3.4684%" y="527.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.23%)</title><rect x="3.2184%" y="501" width="0.2299%" height="15" fill="rgb(231,145,46)"/><text x="3.4684%" y="511.50"></text></g><g><title>prep_new_page (1 samples, 0.23%)</title><rect x="3.2184%" y="485" width="0.2299%" height="15" fill="rgb(251,118,11)"/><text x="3.4684%" y="495.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.23%)</title><rect x="3.2184%" y="469" width="0.2299%" height="15" fill="rgb(217,147,25)"/><text x="3.4684%" y="479.50"></text></g><g><title>clear_page_erms (1 samples, 0.23%)</title><rect x="3.2184%" y="453" width="0.2299%" height="15" fill="rgb(247,81,37)"/><text x="3.4684%" y="463.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (4 samples, 0.92%)</title><rect x="2.7586%" y="709" width="0.9195%" height="15" fill="rgb(209,12,38)"/><text x="3.0086%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (4 samples, 0.92%)</title><rect x="2.7586%" y="693" width="0.9195%" height="15" fill="rgb(227,1,9)"/><text x="3.0086%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.92%)</title><rect x="2.7586%" y="677" width="0.9195%" height="15" fill="rgb(248,47,43)"/><text x="3.0086%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.92%)</title><rect x="2.7586%" y="661" width="0.9195%" height="15" fill="rgb(221,10,30)"/><text x="3.0086%" y="671.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.69%)</title><rect x="2.9885%" y="645" width="0.6897%" height="15" fill="rgb(210,229,1)"/><text x="3.2385%" y="655.50"></text></g><g><title>_int_malloc (3 samples, 0.69%)</title><rect x="2.9885%" y="629" width="0.6897%" height="15" fill="rgb(222,148,37)"/><text x="3.2385%" y="639.50"></text></g><g><title>sysmalloc (3 samples, 0.69%)</title><rect x="2.9885%" y="613" width="0.6897%" height="15" fill="rgb(234,67,33)"/><text x="3.2385%" y="623.50"></text></g><g><title>page_fault (2 samples, 0.46%)</title><rect x="3.2184%" y="597" width="0.4598%" height="15" fill="rgb(247,98,35)"/><text x="3.4684%" y="607.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.46%)</title><rect x="3.2184%" y="581" width="0.4598%" height="15" fill="rgb(247,138,52)"/><text x="3.4684%" y="591.50"></text></g><g><title>handle_mm_fault (2 samples, 0.46%)</title><rect x="3.2184%" y="565" width="0.4598%" height="15" fill="rgb(213,79,30)"/><text x="3.4684%" y="575.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.46%)</title><rect x="3.2184%" y="549" width="0.4598%" height="15" fill="rgb(246,177,23)"/><text x="3.4684%" y="559.50"></text></g><g><title>mem_cgroup_commit_charge (1 samples, 0.23%)</title><rect x="3.4483%" y="533" width="0.2299%" height="15" fill="rgb(230,62,27)"/><text x="3.6983%" y="543.50"></text></g><g><title>mem_cgroup_charge_statistics (1 samples, 0.23%)</title><rect x="3.4483%" y="517" width="0.2299%" height="15" fill="rgb(216,154,8)"/><text x="3.6983%" y="527.50"></text></g><g><title>__count_memcg_events.part.0 (1 samples, 0.23%)</title><rect x="3.4483%" y="501" width="0.2299%" height="15" fill="rgb(244,35,45)"/><text x="3.6983%" y="511.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="3.6782%" y="693" width="0.2299%" height="15" fill="rgb(251,115,12)"/><text x="3.9282%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="3.6782%" y="677" width="0.2299%" height="15" fill="rgb(240,54,50)"/><text x="3.9282%" y="687.50"></text></g><g><title>mysql::conn::query_result::QueryResult&lt;T&gt;::handle_next (1 samples, 0.23%)</title><rect x="3.6782%" y="661" width="0.2299%" height="15" fill="rgb(233,84,52)"/><text x="3.9282%" y="671.50"></text></g><g><title>&lt;mysql::conn::ConnMut as core::ops::deref::Deref&gt;::deref (1 samples, 0.23%)</title><rect x="3.6782%" y="645" width="0.2299%" height="15" fill="rgb(207,117,47)"/><text x="3.9282%" y="655.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_gid_into_caches (1 samples, 0.23%)</title><rect x="3.9080%" y="693" width="0.2299%" height="15" fill="rgb(249,43,39)"/><text x="4.1580%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.23%)</title><rect x="3.9080%" y="677" width="0.2299%" height="15" fill="rgb(209,38,44)"/><text x="4.1580%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.23%)</title><rect x="3.9080%" y="661" width="0.2299%" height="15" fill="rgb(236,212,23)"/><text x="4.1580%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.23%)</title><rect x="3.9080%" y="645" width="0.2299%" height="15" fill="rgb(242,79,21)"/><text x="4.1580%" y="655.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="3.9080%" y="629" width="0.2299%" height="15" fill="rgb(211,96,35)"/><text x="4.1580%" y="639.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="3.9080%" y="613" width="0.2299%" height="15" fill="rgb(253,215,40)"/><text x="4.1580%" y="623.50"></text></g><g><title>sysmalloc (1 samples, 0.23%)</title><rect x="3.9080%" y="597" width="0.2299%" height="15" fill="rgb(211,81,21)"/><text x="4.1580%" y="607.50"></text></g><g><title>__GI___mprotect (1 samples, 0.23%)</title><rect x="3.9080%" y="581" width="0.2299%" height="15" fill="rgb(208,190,38)"/><text x="4.1580%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="3.9080%" y="565" width="0.2299%" height="15" fill="rgb(235,213,38)"/><text x="4.1580%" y="575.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="3.9080%" y="549" width="0.2299%" height="15" fill="rgb(237,122,38)"/><text x="4.1580%" y="559.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.23%)</title><rect x="3.9080%" y="533" width="0.2299%" height="15" fill="rgb(244,218,35)"/><text x="4.1580%" y="543.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.23%)</title><rect x="3.9080%" y="517" width="0.2299%" height="15" fill="rgb(240,68,47)"/><text x="4.1580%" y="527.50"></text></g><g><title>mprotect_fixup (1 samples, 0.23%)</title><rect x="3.9080%" y="501" width="0.2299%" height="15" fill="rgb(210,16,53)"/><text x="4.1580%" y="511.50"></text></g><g><title>perf_event_mmap (1 samples, 0.23%)</title><rect x="3.9080%" y="485" width="0.2299%" height="15" fill="rgb(235,124,12)"/><text x="4.1580%" y="495.50"></text></g><g><title>__kfree_skb (1 samples, 0.23%)</title><rect x="4.5977%" y="437" width="0.2299%" height="15" fill="rgb(224,169,11)"/><text x="4.8477%" y="447.50"></text></g><g><title>skb_release_head_state (1 samples, 0.23%)</title><rect x="4.5977%" y="421" width="0.2299%" height="15" fill="rgb(250,166,2)"/><text x="4.8477%" y="431.50"></text></g><g><title>dst_release (1 samples, 0.23%)</title><rect x="4.5977%" y="405" width="0.2299%" height="15" fill="rgb(242,216,29)"/><text x="4.8477%" y="415.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.23%)</title><rect x="5.0575%" y="421" width="0.2299%" height="15" fill="rgb(230,116,27)"/><text x="5.3075%" y="431.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.23%)</title><rect x="5.2874%" y="357" width="0.2299%" height="15" fill="rgb(228,99,48)"/><text x="5.5374%" y="367.50"></text></g><g><title>dequeue_entity (1 samples, 0.23%)</title><rect x="5.2874%" y="341" width="0.2299%" height="15" fill="rgb(253,11,6)"/><text x="5.5374%" y="351.50"></text></g><g><title>update_load_avg (1 samples, 0.23%)</title><rect x="5.2874%" y="325" width="0.2299%" height="15" fill="rgb(247,143,39)"/><text x="5.5374%" y="335.50"></text></g><g><title>psi_task_change (1 samples, 0.23%)</title><rect x="5.5172%" y="357" width="0.2299%" height="15" fill="rgb(236,97,10)"/><text x="5.7672%" y="367.50"></text></g><g><title>psi_group_change (1 samples, 0.23%)</title><rect x="5.5172%" y="341" width="0.2299%" height="15" fill="rgb(233,208,19)"/><text x="5.7672%" y="351.50"></text></g><g><title>sk_wait_data (5 samples, 1.15%)</title><rect x="4.8276%" y="437" width="1.1494%" height="15" fill="rgb(216,164,2)"/><text x="5.0776%" y="447.50"></text></g><g><title>wait_woken (3 samples, 0.69%)</title><rect x="5.2874%" y="421" width="0.6897%" height="15" fill="rgb(220,129,5)"/><text x="5.5374%" y="431.50"></text></g><g><title>schedule_timeout (3 samples, 0.69%)</title><rect x="5.2874%" y="405" width="0.6897%" height="15" fill="rgb(242,17,10)"/><text x="5.5374%" y="415.50"></text></g><g><title>schedule (3 samples, 0.69%)</title><rect x="5.2874%" y="389" width="0.6897%" height="15" fill="rgb(242,107,0)"/><text x="5.5374%" y="399.50"></text></g><g><title>__schedule (3 samples, 0.69%)</title><rect x="5.2874%" y="373" width="0.6897%" height="15" fill="rgb(251,28,31)"/><text x="5.5374%" y="383.50"></text></g><g><title>update_rq_clock (1 samples, 0.23%)</title><rect x="5.7471%" y="357" width="0.2299%" height="15" fill="rgb(233,223,10)"/><text x="5.9971%" y="367.50"></text></g><g><title>do_syscall_64 (7 samples, 1.61%)</title><rect x="4.5977%" y="517" width="1.6092%" height="15" fill="rgb(215,21,27)"/><text x="4.8477%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (7 samples, 1.61%)</title><rect x="4.5977%" y="501" width="1.6092%" height="15" fill="rgb(232,23,21)"/><text x="4.8477%" y="511.50"></text></g><g><title>__sys_recvfrom (7 samples, 1.61%)</title><rect x="4.5977%" y="485" width="1.6092%" height="15" fill="rgb(244,5,23)"/><text x="4.8477%" y="495.50"></text></g><g><title>inet_recvmsg (7 samples, 1.61%)</title><rect x="4.5977%" y="469" width="1.6092%" height="15" fill="rgb(226,81,46)"/><text x="4.8477%" y="479.50"></text></g><g><title>tcp_recvmsg (7 samples, 1.61%)</title><rect x="4.5977%" y="453" width="1.6092%" height="15" fill="rgb(247,70,30)"/><text x="4.8477%" y="463.50"></text></g><g><title>skb_copy_datagram_iter (1 samples, 0.23%)</title><rect x="5.9770%" y="437" width="0.2299%" height="15" fill="rgb(212,68,19)"/><text x="6.2270%" y="447.50"></text></g><g><title>__skb_datagram_iter (1 samples, 0.23%)</title><rect x="5.9770%" y="421" width="0.2299%" height="15" fill="rgb(240,187,13)"/><text x="6.2270%" y="431.50"></text></g><g><title>simple_copy_to_iter (1 samples, 0.23%)</title><rect x="5.9770%" y="405" width="0.2299%" height="15" fill="rgb(223,113,26)"/><text x="6.2270%" y="415.50"></text></g><g><title>__check_object_size (1 samples, 0.23%)</title><rect x="5.9770%" y="389" width="0.2299%" height="15" fill="rgb(206,192,2)"/><text x="6.2270%" y="399.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 2.07%)</title><rect x="4.3678%" y="629" width="2.0690%" height="15" fill="rgb(241,108,4)"/><text x="4.6178%" y="639.50">&lt;..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (9 samples, 2.07%)</title><rect x="4.3678%" y="613" width="2.0690%" height="15" fill="rgb(247,173,49)"/><text x="4.6178%" y="623.50">&lt;..</text></g><g><title>std::sys_common::net::TcpStream::read (9 samples, 2.07%)</title><rect x="4.3678%" y="597" width="2.0690%" height="15" fill="rgb(224,114,35)"/><text x="4.6178%" y="607.50">s..</text></g><g><title>std::sys::unix::net::Socket::read (9 samples, 2.07%)</title><rect x="4.3678%" y="581" width="2.0690%" height="15" fill="rgb(245,159,27)"/><text x="4.6178%" y="591.50">s..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (9 samples, 2.07%)</title><rect x="4.3678%" y="565" width="2.0690%" height="15" fill="rgb(245,172,44)"/><text x="4.6178%" y="575.50">s..</text></g><g><title>__libc_recv (9 samples, 2.07%)</title><rect x="4.3678%" y="549" width="2.0690%" height="15" fill="rgb(236,23,11)"/><text x="4.6178%" y="559.50">_..</text></g><g><title>entry_SYSCALL_64 (9 samples, 2.07%)</title><rect x="4.3678%" y="533" width="2.0690%" height="15" fill="rgb(205,117,38)"/><text x="4.6178%" y="543.50">e..</text></g><g><title>prepare_exit_to_usermode (1 samples, 0.23%)</title><rect x="6.2069%" y="517" width="0.2299%" height="15" fill="rgb(237,72,25)"/><text x="6.4569%" y="527.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (13 samples, 2.99%)</title><rect x="3.6782%" y="709" width="2.9885%" height="15" fill="rgb(244,70,9)"/><text x="3.9282%" y="719.50">dec..</text></g><g><title>mysql::conn::Conn::_query (11 samples, 2.53%)</title><rect x="4.1379%" y="693" width="2.5287%" height="15" fill="rgb(217,125,39)"/><text x="4.3879%" y="703.50">my..</text></g><g><title>mysql::conn::Conn::handle_result_set (11 samples, 2.53%)</title><rect x="4.1379%" y="677" width="2.5287%" height="15" fill="rgb(235,36,10)"/><text x="4.3879%" y="687.50">my..</text></g><g><title>mysql::conn::Conn::read_packet (11 samples, 2.53%)</title><rect x="4.1379%" y="661" width="2.5287%" height="15" fill="rgb(251,123,47)"/><text x="4.3879%" y="671.50">my..</text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 2.53%)</title><rect x="4.1379%" y="645" width="2.5287%" height="15" fill="rgb(221,13,13)"/><text x="4.3879%" y="655.50">&lt;m..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.23%)</title><rect x="6.4368%" y="629" width="0.2299%" height="15" fill="rgb(238,131,9)"/><text x="6.6868%" y="639.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.23%)</title><rect x="6.4368%" y="613" width="0.2299%" height="15" fill="rgb(211,50,8)"/><text x="6.6868%" y="623.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.23%)</title><rect x="6.4368%" y="597" width="0.2299%" height="15" fill="rgb(245,182,24)"/><text x="6.6868%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="6.4368%" y="581" width="0.2299%" height="15" fill="rgb(242,14,37)"/><text x="6.6868%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="6.4368%" y="565" width="0.2299%" height="15" fill="rgb(246,228,12)"/><text x="6.6868%" y="575.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (20 samples, 4.60%)</title><rect x="2.2989%" y="725" width="4.5977%" height="15" fill="rgb(213,55,15)"/><text x="2.5489%" y="735.50">decor..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::expr_to_value_expr (1 samples, 0.23%)</title><rect x="6.6667%" y="709" width="0.2299%" height="15" fill="rgb(209,9,3)"/><text x="6.9167%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.6667%" y="693" width="0.2299%" height="15" fill="rgb(230,59,30)"/><text x="6.9167%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.6667%" y="677" width="0.2299%" height="15" fill="rgb(209,121,21)"/><text x="6.9167%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.6667%" y="661" width="0.2299%" height="15" fill="rgb(220,109,13)"/><text x="6.9167%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.23%)</title><rect x="6.6667%" y="645" width="0.2299%" height="15" fill="rgb(232,18,1)"/><text x="6.9167%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="6.6667%" y="629" width="0.2299%" height="15" fill="rgb(215,41,42)"/><text x="6.9167%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="6.6667%" y="613" width="0.2299%" height="15" fill="rgb(224,123,36)"/><text x="6.9167%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="6.6667%" y="597" width="0.2299%" height="15" fill="rgb(240,125,3)"/><text x="6.9167%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="6.6667%" y="581" width="0.2299%" height="15" fill="rgb(205,98,50)"/><text x="6.9167%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="6.6667%" y="565" width="0.2299%" height="15" fill="rgb(205,185,37)"/><text x="6.9167%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.23%)</title><rect x="6.6667%" y="549" width="0.2299%" height="15" fill="rgb(238,207,15)"/><text x="6.9167%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="6.6667%" y="533" width="0.2299%" height="15" fill="rgb(213,199,42)"/><text x="6.9167%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="6.6667%" y="517" width="0.2299%" height="15" fill="rgb(235,201,11)"/><text x="6.9167%" y="527.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="6.6667%" y="501" width="0.2299%" height="15" fill="rgb(207,46,11)"/><text x="6.9167%" y="511.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="6.6667%" y="485" width="0.2299%" height="15" fill="rgb(241,35,35)"/><text x="6.9167%" y="495.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (21 samples, 4.83%)</title><rect x="2.2989%" y="741" width="4.8276%" height="15" fill="rgb(243,32,47)"/><text x="2.5489%" y="751.50">&lt;decor..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (1 samples, 0.23%)</title><rect x="6.8966%" y="725" width="0.2299%" height="15" fill="rgb(247,202,23)"/><text x="7.1466%" y="735.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="709" width="0.2299%" height="15" fill="rgb(219,102,11)"/><text x="7.1466%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="693" width="0.2299%" height="15" fill="rgb(243,110,44)"/><text x="7.1466%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="677" width="0.2299%" height="15" fill="rgb(222,74,54)"/><text x="7.1466%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="661" width="0.2299%" height="15" fill="rgb(216,99,12)"/><text x="7.1466%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="645" width="0.2299%" height="15" fill="rgb(226,22,26)"/><text x="7.1466%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="629" width="0.2299%" height="15" fill="rgb(217,163,10)"/><text x="7.1466%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="613" width="0.2299%" height="15" fill="rgb(213,25,53)"/><text x="7.1466%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="6.8966%" y="597" width="0.2299%" height="15" fill="rgb(252,105,26)"/><text x="7.1466%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.23%)</title><rect x="6.8966%" y="581" width="0.2299%" height="15" fill="rgb(220,39,43)"/><text x="7.1466%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="6.8966%" y="565" width="0.2299%" height="15" fill="rgb(229,68,48)"/><text x="7.1466%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="6.8966%" y="549" width="0.2299%" height="15" fill="rgb(252,8,32)"/><text x="7.1466%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="6.8966%" y="533" width="0.2299%" height="15" fill="rgb(223,20,43)"/><text x="7.1466%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="6.8966%" y="517" width="0.2299%" height="15" fill="rgb(229,81,49)"/><text x="7.1466%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="6.8966%" y="501" width="0.2299%" height="15" fill="rgb(236,28,36)"/><text x="7.1466%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.23%)</title><rect x="6.8966%" y="485" width="0.2299%" height="15" fill="rgb(249,185,26)"/><text x="7.1466%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="6.8966%" y="469" width="0.2299%" height="15" fill="rgb(249,174,33)"/><text x="7.1466%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="6.8966%" y="453" width="0.2299%" height="15" fill="rgb(233,201,37)"/><text x="7.1466%" y="463.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="6.8966%" y="437" width="0.2299%" height="15" fill="rgb(221,78,26)"/><text x="7.1466%" y="447.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="6.8966%" y="421" width="0.2299%" height="15" fill="rgb(250,127,30)"/><text x="7.1466%" y="431.50"></text></g><g><title>sysmalloc (1 samples, 0.23%)</title><rect x="6.8966%" y="405" width="0.2299%" height="15" fill="rgb(230,49,44)"/><text x="7.1466%" y="415.50"></text></g><g><title>__GI___mprotect (1 samples, 0.23%)</title><rect x="6.8966%" y="389" width="0.2299%" height="15" fill="rgb(229,67,23)"/><text x="7.1466%" y="399.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="6.8966%" y="373" width="0.2299%" height="15" fill="rgb(249,83,47)"/><text x="7.1466%" y="383.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="6.8966%" y="357" width="0.2299%" height="15" fill="rgb(215,43,3)"/><text x="7.1466%" y="367.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.23%)</title><rect x="6.8966%" y="341" width="0.2299%" height="15" fill="rgb(238,154,13)"/><text x="7.1466%" y="351.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.23%)</title><rect x="6.8966%" y="325" width="0.2299%" height="15" fill="rgb(219,56,2)"/><text x="7.1466%" y="335.50"></text></g><g><title>mprotect_fixup (1 samples, 0.23%)</title><rect x="6.8966%" y="309" width="0.2299%" height="15" fill="rgb(233,0,4)"/><text x="7.1466%" y="319.50"></text></g><g><title>perf_event_mmap (1 samples, 0.23%)</title><rect x="6.8966%" y="293" width="0.2299%" height="15" fill="rgb(235,30,7)"/><text x="7.1466%" y="303.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.23%)</title><rect x="6.8966%" y="277" width="0.2299%" height="15" fill="rgb(250,79,13)"/><text x="7.1466%" y="287.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.23%)</title><rect x="6.8966%" y="261" width="0.2299%" height="15" fill="rgb(211,146,34)"/><text x="7.1466%" y="271.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.23%)</title><rect x="6.8966%" y="245" width="0.2299%" height="15" fill="rgb(228,22,38)"/><text x="7.1466%" y="255.50"></text></g><g><title>perf_output_copy (1 samples, 0.23%)</title><rect x="6.8966%" y="229" width="0.2299%" height="15" fill="rgb(235,168,5)"/><text x="7.1466%" y="239.50"></text></g><g><title>memcpy_erms (1 samples, 0.23%)</title><rect x="6.8966%" y="213" width="0.2299%" height="15" fill="rgb(221,155,16)"/><text x="7.1466%" y="223.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.23%)</title><rect x="7.1264%" y="741" width="0.2299%" height="15" fill="rgb(215,215,53)"/><text x="7.3764%" y="751.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.23%)</title><rect x="7.3563%" y="581" width="0.2299%" height="15" fill="rgb(223,4,10)"/><text x="7.6063%" y="591.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.23%)</title><rect x="7.3563%" y="565" width="0.2299%" height="15" fill="rgb(234,103,6)"/><text x="7.6063%" y="575.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="7.3563%" y="549" width="0.2299%" height="15" fill="rgb(227,97,0)"/><text x="7.6063%" y="559.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="7.3563%" y="533" width="0.2299%" height="15" fill="rgb(234,150,53)"/><text x="7.6063%" y="543.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="7.3563%" y="517" width="0.2299%" height="15" fill="rgb(228,201,54)"/><text x="7.6063%" y="527.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="7.3563%" y="501" width="0.2299%" height="15" fill="rgb(222,22,37)"/><text x="7.6063%" y="511.50"></text></g><g><title>__libc_start_main (2 samples, 0.46%)</title><rect x="7.3563%" y="741" width="0.4598%" height="15" fill="rgb(237,53,32)"/><text x="7.6063%" y="751.50"></text></g><g><title>main (2 samples, 0.46%)</title><rect x="7.3563%" y="725" width="0.4598%" height="15" fill="rgb(233,25,53)"/><text x="7.6063%" y="735.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 0.46%)</title><rect x="7.3563%" y="709" width="0.4598%" height="15" fill="rgb(210,40,34)"/><text x="7.6063%" y="719.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.46%)</title><rect x="7.3563%" y="693" width="0.4598%" height="15" fill="rgb(241,220,44)"/><text x="7.6063%" y="703.50"></text></g><g><title>std::panicking::try (2 samples, 0.46%)</title><rect x="7.3563%" y="677" width="0.4598%" height="15" fill="rgb(235,28,35)"/><text x="7.6063%" y="687.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.46%)</title><rect x="7.3563%" y="661" width="0.4598%" height="15" fill="rgb(210,56,17)"/><text x="7.6063%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 0.46%)</title><rect x="7.3563%" y="645" width="0.4598%" height="15" fill="rgb(224,130,29)"/><text x="7.6063%" y="655.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (2 samples, 0.46%)</title><rect x="7.3563%" y="629" width="0.4598%" height="15" fill="rgb(235,212,8)"/><text x="7.6063%" y="639.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.46%)</title><rect x="7.3563%" y="613" width="0.4598%" height="15" fill="rgb(223,33,50)"/><text x="7.6063%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::main (2 samples, 0.46%)</title><rect x="7.3563%" y="597" width="0.4598%" height="15" fill="rgb(219,149,13)"/><text x="7.6063%" y="607.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (1 samples, 0.23%)</title><rect x="7.5862%" y="581" width="0.2299%" height="15" fill="rgb(250,156,29)"/><text x="7.8362%" y="591.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.23%)</title><rect x="7.5862%" y="565" width="0.2299%" height="15" fill="rgb(216,193,19)"/><text x="7.8362%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.23%)</title><rect x="7.5862%" y="549" width="0.2299%" height="15" fill="rgb(216,135,14)"/><text x="7.8362%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="7.5862%" y="533" width="0.2299%" height="15" fill="rgb(241,47,5)"/><text x="7.8362%" y="543.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (1 samples, 0.23%)</title><rect x="7.5862%" y="517" width="0.2299%" height="15" fill="rgb(233,42,35)"/><text x="7.8362%" y="527.50"></text></g><g><title>core::num::flt2dec::to_shortest_str (1 samples, 0.23%)</title><rect x="7.5862%" y="501" width="0.2299%" height="15" fill="rgb(231,13,6)"/><text x="7.8362%" y="511.50"></text></g><g><title>_int_free (2 samples, 0.46%)</title><rect x="7.8161%" y="741" width="0.4598%" height="15" fill="rgb(207,181,40)"/><text x="8.0661%" y="751.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="8.2759%" y="741" width="0.2299%" height="15" fill="rgb(254,173,49)"/><text x="8.5259%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="8.5057%" y="741" width="0.2299%" height="15" fill="rgb(221,1,38)"/><text x="8.7557%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="8.7356%" y="741" width="0.2299%" height="15" fill="rgb(206,124,46)"/><text x="8.9856%" y="751.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="8.7356%" y="725" width="0.2299%" height="15" fill="rgb(249,21,11)"/><text x="8.9856%" y="735.50"></text></g><g><title>decor_mem::Shim::create_schema (1 samples, 0.23%)</title><rect x="8.9655%" y="741" width="0.2299%" height="15" fill="rgb(222,201,40)"/><text x="9.2155%" y="751.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (1 samples, 0.23%)</title><rect x="8.9655%" y="725" width="0.2299%" height="15" fill="rgb(235,61,29)"/><text x="9.2155%" y="735.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 0.23%)</title><rect x="8.9655%" y="709" width="0.2299%" height="15" fill="rgb(219,207,3)"/><text x="9.2155%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.23%)</title><rect x="8.9655%" y="693" width="0.2299%" height="15" fill="rgb(222,56,46)"/><text x="9.2155%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.23%)</title><rect x="8.9655%" y="677" width="0.2299%" height="15" fill="rgb(239,76,54)"/><text x="9.2155%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.23%)</title><rect x="8.9655%" y="661" width="0.2299%" height="15" fill="rgb(231,124,27)"/><text x="9.2155%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="8.9655%" y="645" width="0.2299%" height="15" fill="rgb(249,195,6)"/><text x="9.2155%" y="655.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.23%)</title><rect x="8.9655%" y="629" width="0.2299%" height="15" fill="rgb(237,174,47)"/><text x="9.2155%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.23%)</title><rect x="8.9655%" y="613" width="0.2299%" height="15" fill="rgb(206,201,31)"/><text x="9.2155%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.23%)</title><rect x="8.9655%" y="597" width="0.2299%" height="15" fill="rgb(231,57,52)"/><text x="9.2155%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.23%)</title><rect x="8.9655%" y="581" width="0.2299%" height="15" fill="rgb(248,177,22)"/><text x="9.2155%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.23%)</title><rect x="8.9655%" y="565" width="0.2299%" height="15" fill="rgb(215,211,37)"/><text x="9.2155%" y="575.50"></text></g><g><title>__libc_recv (1 samples, 0.23%)</title><rect x="8.9655%" y="549" width="0.2299%" height="15" fill="rgb(241,128,51)"/><text x="9.2155%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="8.9655%" y="533" width="0.2299%" height="15" fill="rgb(227,165,31)"/><text x="9.2155%" y="543.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="8.9655%" y="517" width="0.2299%" height="15" fill="rgb(228,167,24)"/><text x="9.2155%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 0.23%)</title><rect x="8.9655%" y="501" width="0.2299%" height="15" fill="rgb(228,143,12)"/><text x="9.2155%" y="511.50"></text></g><g><title>__sys_recvfrom (1 samples, 0.23%)</title><rect x="8.9655%" y="485" width="0.2299%" height="15" fill="rgb(249,149,8)"/><text x="9.2155%" y="495.50"></text></g><g><title>inet_recvmsg (1 samples, 0.23%)</title><rect x="8.9655%" y="469" width="0.2299%" height="15" fill="rgb(243,35,44)"/><text x="9.2155%" y="479.50"></text></g><g><title>tcp_recvmsg (1 samples, 0.23%)</title><rect x="8.9655%" y="453" width="0.2299%" height="15" fill="rgb(246,89,9)"/><text x="9.2155%" y="463.50"></text></g><g><title>tcp_rcv_space_adjust (1 samples, 0.23%)</title><rect x="8.9655%" y="437" width="0.2299%" height="15" fill="rgb(233,213,13)"/><text x="9.2155%" y="447.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (1 samples, 0.23%)</title><rect x="9.1954%" y="709" width="0.2299%" height="15" fill="rgb(233,141,41)"/><text x="9.4454%" y="719.50"></text></g><g><title>decor_mem::Shim::create_schema (1 samples, 0.23%)</title><rect x="9.1954%" y="693" width="0.2299%" height="15" fill="rgb(239,167,4)"/><text x="9.4454%" y="703.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (1 samples, 0.23%)</title><rect x="9.1954%" y="677" width="0.2299%" height="15" fill="rgb(209,217,16)"/><text x="9.4454%" y="687.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="9.4253%" y="661" width="0.2299%" height="15" fill="rgb(219,88,35)"/><text x="9.6753%" y="671.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="9.4253%" y="645" width="0.2299%" height="15" fill="rgb(220,193,23)"/><text x="9.6753%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="9.6552%" y="661" width="0.2299%" height="15" fill="rgb(230,90,52)"/><text x="9.9052%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="9.8851%" y="645" width="0.2299%" height="15" fill="rgb(252,106,19)"/><text x="10.1351%" y="655.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.23%)</title><rect x="9.8851%" y="629" width="0.2299%" height="15" fill="rgb(206,74,20)"/><text x="10.1351%" y="639.50"></text></g><g><title>_int_realloc (1 samples, 0.23%)</title><rect x="9.8851%" y="613" width="0.2299%" height="15" fill="rgb(230,138,44)"/><text x="10.1351%" y="623.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="9.8851%" y="597" width="0.2299%" height="15" fill="rgb(235,182,43)"/><text x="10.1351%" y="607.50"></text></g><g><title>malloc_consolidate (1 samples, 0.23%)</title><rect x="9.8851%" y="581" width="0.2299%" height="15" fill="rgb(242,16,51)"/><text x="10.1351%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.23%)</title><rect x="10.8046%" y="613" width="0.2299%" height="15" fill="rgb(248,9,4)"/><text x="11.0546%" y="623.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (9 samples, 2.07%)</title><rect x="9.1954%" y="741" width="2.0690%" height="15" fill="rgb(210,31,22)"/><text x="9.4454%" y="751.50">d..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (9 samples, 2.07%)</title><rect x="9.1954%" y="725" width="2.0690%" height="15" fill="rgb(239,54,39)"/><text x="9.4454%" y="735.50">m..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (8 samples, 1.84%)</title><rect x="9.4253%" y="709" width="1.8391%" height="15" fill="rgb(230,99,41)"/><text x="9.6753%" y="719.50">&lt;..</text></g><g><title>decor_mem::stats::get_qtype (8 samples, 1.84%)</title><rect x="9.4253%" y="693" width="1.8391%" height="15" fill="rgb(253,106,12)"/><text x="9.6753%" y="703.50">d..</text></g><g><title>sql_parser::parser::parse_statements (8 samples, 1.84%)</title><rect x="9.4253%" y="677" width="1.8391%" height="15" fill="rgb(213,46,41)"/><text x="9.6753%" y="687.50">s..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (6 samples, 1.38%)</title><rect x="9.8851%" y="661" width="1.3793%" height="15" fill="rgb(215,133,35)"/><text x="10.1351%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (5 samples, 1.15%)</title><rect x="10.1149%" y="645" width="1.1494%" height="15" fill="rgb(213,28,5)"/><text x="10.3649%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (4 samples, 0.92%)</title><rect x="10.3448%" y="629" width="0.9195%" height="15" fill="rgb(215,77,49)"/><text x="10.5948%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="11.0345%" y="613" width="0.2299%" height="15" fill="rgb(248,100,22)"/><text x="11.2845%" y="623.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="11.0345%" y="597" width="0.2299%" height="15" fill="rgb(208,67,9)"/><text x="11.2845%" y="607.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.23%)</title><rect x="11.0345%" y="581" width="0.2299%" height="15" fill="rgb(219,133,21)"/><text x="11.2845%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::expr_to_value_expr (2 samples, 0.46%)</title><rect x="11.2644%" y="725" width="0.4598%" height="15" fill="rgb(246,46,29)"/><text x="11.5144%" y="735.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::expr_to_value_expr (2 samples, 0.46%)</title><rect x="11.2644%" y="709" width="0.4598%" height="15" fill="rgb(246,185,52)"/><text x="11.5144%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (2 samples, 0.46%)</title><rect x="11.2644%" y="693" width="0.4598%" height="15" fill="rgb(252,136,11)"/><text x="11.5144%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.23%)</title><rect x="11.4943%" y="677" width="0.2299%" height="15" fill="rgb(219,138,53)"/><text x="11.7443%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="11.4943%" y="661" width="0.2299%" height="15" fill="rgb(211,51,23)"/><text x="11.7443%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="11.4943%" y="645" width="0.2299%" height="15" fill="rgb(247,221,28)"/><text x="11.7443%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.23%)</title><rect x="11.4943%" y="629" width="0.2299%" height="15" fill="rgb(251,222,45)"/><text x="11.7443%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="11.4943%" y="613" width="0.2299%" height="15" fill="rgb(217,162,53)"/><text x="11.7443%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="11.4943%" y="597" width="0.2299%" height="15" fill="rgb(229,93,14)"/><text x="11.7443%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="11.4943%" y="581" width="0.2299%" height="15" fill="rgb(209,67,49)"/><text x="11.7443%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="11.4943%" y="565" width="0.2299%" height="15" fill="rgb(213,87,29)"/><text x="11.7443%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="11.4943%" y="549" width="0.2299%" height="15" fill="rgb(205,151,52)"/><text x="11.7443%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.23%)</title><rect x="11.4943%" y="533" width="0.2299%" height="15" fill="rgb(253,215,39)"/><text x="11.7443%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="11.4943%" y="517" width="0.2299%" height="15" fill="rgb(221,220,41)"/><text x="11.7443%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="11.4943%" y="501" width="0.2299%" height="15" fill="rgb(218,133,21)"/><text x="11.7443%" y="511.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="11.4943%" y="485" width="0.2299%" height="15" fill="rgb(221,193,43)"/><text x="11.7443%" y="495.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="11.4943%" y="469" width="0.2299%" height="15" fill="rgb(240,128,52)"/><text x="11.7443%" y="479.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (3 samples, 0.69%)</title><rect x="11.2644%" y="741" width="0.6897%" height="15" fill="rgb(253,114,12)"/><text x="11.5144%" y="751.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::selection_to_datatable_selection (1 samples, 0.23%)</title><rect x="11.7241%" y="725" width="0.2299%" height="15" fill="rgb(215,223,47)"/><text x="11.9741%" y="735.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::fastpath_expr_to_gid_expr (1 samples, 0.23%)</title><rect x="11.7241%" y="709" width="0.2299%" height="15" fill="rgb(248,225,23)"/><text x="11.9741%" y="719.50"></text></g><g><title>decor_mem::helpers::expr_is_ucol (1 samples, 0.23%)</title><rect x="11.7241%" y="693" width="0.2299%" height="15" fill="rgb(250,108,0)"/><text x="11.9741%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="11.7241%" y="677" width="0.2299%" height="15" fill="rgb(228,208,7)"/><text x="11.9741%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::fmt::Display&gt;::fmt (1 samples, 0.23%)</title><rect x="11.7241%" y="661" width="0.2299%" height="15" fill="rgb(244,45,10)"/><text x="11.9741%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="11.7241%" y="645" width="0.2299%" height="15" fill="rgb(207,125,25)"/><text x="11.9741%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="11.7241%" y="629" width="0.2299%" height="15" fill="rgb(210,195,18)"/><text x="11.9741%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (1 samples, 0.23%)</title><rect x="11.7241%" y="613" width="0.2299%" height="15" fill="rgb(249,80,12)"/><text x="11.9741%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="11.7241%" y="597" width="0.2299%" height="15" fill="rgb(221,65,9)"/><text x="11.9741%" y="607.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.23%)</title><rect x="11.7241%" y="581" width="0.2299%" height="15" fill="rgb(235,49,36)"/><text x="11.9741%" y="591.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.23%)</title><rect x="11.7241%" y="565" width="0.2299%" height="15" fill="rgb(225,32,20)"/><text x="11.9741%" y="575.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.23%)</title><rect x="11.7241%" y="549" width="0.2299%" height="15" fill="rgb(215,141,46)"/><text x="11.9741%" y="559.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.23%)</title><rect x="11.9540%" y="725" width="0.2299%" height="15" fill="rgb(250,160,47)"/><text x="12.2040%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="11.9540%" y="709" width="0.2299%" height="15" fill="rgb(216,222,40)"/><text x="12.2040%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="11.9540%" y="693" width="0.2299%" height="15" fill="rgb(234,217,39)"/><text x="12.2040%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="11.9540%" y="677" width="0.2299%" height="15" fill="rgb(207,178,40)"/><text x="12.2040%" y="687.50"></text></g><g><title>dlopen (1 samples, 0.23%)</title><rect x="11.9540%" y="661" width="0.2299%" height="15" fill="rgb(221,136,13)"/><text x="12.2040%" y="671.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.23%)</title><rect x="11.9540%" y="645" width="0.2299%" height="15" fill="rgb(249,199,10)"/><text x="12.2040%" y="655.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.23%)</title><rect x="11.9540%" y="629" width="0.2299%" height="15" fill="rgb(249,222,13)"/><text x="12.2040%" y="639.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.23%)</title><rect x="11.9540%" y="613" width="0.2299%" height="15" fill="rgb(244,185,38)"/><text x="12.2040%" y="623.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.23%)</title><rect x="11.9540%" y="597" width="0.2299%" height="15" fill="rgb(236,202,9)"/><text x="12.2040%" y="607.50"></text></g><g><title>_dl_open (1 samples, 0.23%)</title><rect x="11.9540%" y="581" width="0.2299%" height="15" fill="rgb(250,229,37)"/><text x="12.2040%" y="591.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.23%)</title><rect x="11.9540%" y="565" width="0.2299%" height="15" fill="rgb(206,174,23)"/><text x="12.2040%" y="575.50"></text></g><g><title>dl_open_worker (1 samples, 0.23%)</title><rect x="11.9540%" y="549" width="0.2299%" height="15" fill="rgb(211,33,43)"/><text x="12.2040%" y="559.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.23%)</title><rect x="11.9540%" y="533" width="0.2299%" height="15" fill="rgb(245,58,50)"/><text x="12.2040%" y="543.50"></text></g><g><title>__perf_event_task_sched_out (1 samples, 0.23%)</title><rect x="12.4138%" y="357" width="0.2299%" height="15" fill="rgb(244,68,36)"/><text x="12.6638%" y="367.50"></text></g><g><title>ctx_sched_out (1 samples, 0.23%)</title><rect x="12.4138%" y="341" width="0.2299%" height="15" fill="rgb(232,229,15)"/><text x="12.6638%" y="351.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (3 samples, 0.69%)</title><rect x="12.1839%" y="677" width="0.6897%" height="15" fill="rgb(254,30,23)"/><text x="12.4339%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (3 samples, 0.69%)</title><rect x="12.1839%" y="661" width="0.6897%" height="15" fill="rgb(235,160,14)"/><text x="12.4339%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.69%)</title><rect x="12.1839%" y="645" width="0.6897%" height="15" fill="rgb(212,155,44)"/><text x="12.4339%" y="655.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.69%)</title><rect x="12.1839%" y="629" width="0.6897%" height="15" fill="rgb(226,2,50)"/><text x="12.4339%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.69%)</title><rect x="12.1839%" y="613" width="0.6897%" height="15" fill="rgb(234,177,6)"/><text x="12.4339%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (3 samples, 0.69%)</title><rect x="12.1839%" y="597" width="0.6897%" height="15" fill="rgb(217,24,9)"/><text x="12.4339%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (3 samples, 0.69%)</title><rect x="12.1839%" y="581" width="0.6897%" height="15" fill="rgb(220,13,46)"/><text x="12.4339%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (3 samples, 0.69%)</title><rect x="12.1839%" y="565" width="0.6897%" height="15" fill="rgb(239,221,27)"/><text x="12.4339%" y="575.50"></text></g><g><title>__libc_recv (3 samples, 0.69%)</title><rect x="12.1839%" y="549" width="0.6897%" height="15" fill="rgb(222,198,25)"/><text x="12.4339%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.69%)</title><rect x="12.1839%" y="533" width="0.6897%" height="15" fill="rgb(211,99,13)"/><text x="12.4339%" y="543.50"></text></g><g><title>do_syscall_64 (2 samples, 0.46%)</title><rect x="12.4138%" y="517" width="0.4598%" height="15" fill="rgb(232,111,31)"/><text x="12.6638%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (2 samples, 0.46%)</title><rect x="12.4138%" y="501" width="0.4598%" height="15" fill="rgb(245,82,37)"/><text x="12.6638%" y="511.50"></text></g><g><title>__sys_recvfrom (2 samples, 0.46%)</title><rect x="12.4138%" y="485" width="0.4598%" height="15" fill="rgb(227,149,46)"/><text x="12.6638%" y="495.50"></text></g><g><title>inet_recvmsg (2 samples, 0.46%)</title><rect x="12.4138%" y="469" width="0.4598%" height="15" fill="rgb(218,36,50)"/><text x="12.6638%" y="479.50"></text></g><g><title>tcp_recvmsg (2 samples, 0.46%)</title><rect x="12.4138%" y="453" width="0.4598%" height="15" fill="rgb(226,80,48)"/><text x="12.6638%" y="463.50"></text></g><g><title>sk_wait_data (2 samples, 0.46%)</title><rect x="12.4138%" y="437" width="0.4598%" height="15" fill="rgb(238,224,15)"/><text x="12.6638%" y="447.50"></text></g><g><title>wait_woken (2 samples, 0.46%)</title><rect x="12.4138%" y="421" width="0.4598%" height="15" fill="rgb(241,136,10)"/><text x="12.6638%" y="431.50"></text></g><g><title>schedule_timeout (2 samples, 0.46%)</title><rect x="12.4138%" y="405" width="0.4598%" height="15" fill="rgb(208,32,45)"/><text x="12.6638%" y="415.50"></text></g><g><title>schedule (2 samples, 0.46%)</title><rect x="12.4138%" y="389" width="0.4598%" height="15" fill="rgb(207,135,9)"/><text x="12.6638%" y="399.50"></text></g><g><title>__schedule (2 samples, 0.46%)</title><rect x="12.4138%" y="373" width="0.4598%" height="15" fill="rgb(206,86,44)"/><text x="12.6638%" y="383.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.23%)</title><rect x="12.6437%" y="357" width="0.2299%" height="15" fill="rgb(245,177,15)"/><text x="12.8937%" y="367.50"></text></g><g><title>dequeue_entity (1 samples, 0.23%)</title><rect x="12.6437%" y="341" width="0.2299%" height="15" fill="rgb(206,64,50)"/><text x="12.8937%" y="351.50"></text></g><g><title>update_curr (1 samples, 0.23%)</title><rect x="12.6437%" y="325" width="0.2299%" height="15" fill="rgb(234,36,40)"/><text x="12.8937%" y="335.50"></text></g><g><title>__cgroup_account_cputime (1 samples, 0.23%)</title><rect x="12.6437%" y="309" width="0.2299%" height="15" fill="rgb(213,64,8)"/><text x="12.8937%" y="319.50"></text></g><g><title>cgroup_rstat_updated (1 samples, 0.23%)</title><rect x="12.6437%" y="293" width="0.2299%" height="15" fill="rgb(210,75,36)"/><text x="12.8937%" y="303.50"></text></g><g><title>lobsters_microbenchmarks::main (6 samples, 1.38%)</title><rect x="11.9540%" y="741" width="1.3793%" height="15" fill="rgb(229,88,21)"/><text x="12.2040%" y="751.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (5 samples, 1.15%)</title><rect x="12.1839%" y="725" width="1.1494%" height="15" fill="rgb(252,204,47)"/><text x="12.4339%" y="735.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (5 samples, 1.15%)</title><rect x="12.1839%" y="709" width="1.1494%" height="15" fill="rgb(208,77,27)"/><text x="12.4339%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (5 samples, 1.15%)</title><rect x="12.1839%" y="693" width="1.1494%" height="15" fill="rgb(221,76,26)"/><text x="12.4339%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (2 samples, 0.46%)</title><rect x="12.8736%" y="677" width="0.4598%" height="15" fill="rgb(225,139,18)"/><text x="13.1236%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.46%)</title><rect x="12.8736%" y="661" width="0.4598%" height="15" fill="rgb(230,137,11)"/><text x="13.1236%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.46%)</title><rect x="12.8736%" y="645" width="0.4598%" height="15" fill="rgb(212,28,1)"/><text x="13.1236%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (2 samples, 0.46%)</title><rect x="12.8736%" y="629" width="0.4598%" height="15" fill="rgb(248,164,17)"/><text x="13.1236%" y="639.50"></text></g><g><title>__libc_send (2 samples, 0.46%)</title><rect x="12.8736%" y="613" width="0.4598%" height="15" fill="rgb(222,171,42)"/><text x="13.1236%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="12.8736%" y="597" width="0.4598%" height="15" fill="rgb(243,84,45)"/><text x="13.1236%" y="607.50"></text></g><g><title>do_syscall_64 (2 samples, 0.46%)</title><rect x="12.8736%" y="581" width="0.4598%" height="15" fill="rgb(252,49,23)"/><text x="13.1236%" y="591.50"></text></g><g><title>__x64_sys_sendto (2 samples, 0.46%)</title><rect x="12.8736%" y="565" width="0.4598%" height="15" fill="rgb(215,19,7)"/><text x="13.1236%" y="575.50"></text></g><g><title>__sys_sendto (2 samples, 0.46%)</title><rect x="12.8736%" y="549" width="0.4598%" height="15" fill="rgb(238,81,41)"/><text x="13.1236%" y="559.50"></text></g><g><title>sock_sendmsg (2 samples, 0.46%)</title><rect x="12.8736%" y="533" width="0.4598%" height="15" fill="rgb(210,199,37)"/><text x="13.1236%" y="543.50"></text></g><g><title>tcp_sendmsg (2 samples, 0.46%)</title><rect x="12.8736%" y="517" width="0.4598%" height="15" fill="rgb(244,192,49)"/><text x="13.1236%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (2 samples, 0.46%)</title><rect x="12.8736%" y="501" width="0.4598%" height="15" fill="rgb(226,211,11)"/><text x="13.1236%" y="511.50"></text></g><g><title>__tcp_push_pending_frames (2 samples, 0.46%)</title><rect x="12.8736%" y="485" width="0.4598%" height="15" fill="rgb(236,162,54)"/><text x="13.1236%" y="495.50"></text></g><g><title>tcp_write_xmit (2 samples, 0.46%)</title><rect x="12.8736%" y="469" width="0.4598%" height="15" fill="rgb(220,229,9)"/><text x="13.1236%" y="479.50"></text></g><g><title>__tcp_transmit_skb (2 samples, 0.46%)</title><rect x="12.8736%" y="453" width="0.4598%" height="15" fill="rgb(250,87,22)"/><text x="13.1236%" y="463.50"></text></g><g><title>__ip_queue_xmit (1 samples, 0.23%)</title><rect x="13.1034%" y="437" width="0.2299%" height="15" fill="rgb(239,43,17)"/><text x="13.3534%" y="447.50"></text></g><g><title>ip_output (1 samples, 0.23%)</title><rect x="13.1034%" y="421" width="0.2299%" height="15" fill="rgb(231,177,25)"/><text x="13.3534%" y="431.50"></text></g><g><title>ip_finish_output2 (1 samples, 0.23%)</title><rect x="13.1034%" y="405" width="0.2299%" height="15" fill="rgb(219,179,1)"/><text x="13.3534%" y="415.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.23%)</title><rect x="13.1034%" y="389" width="0.2299%" height="15" fill="rgb(238,219,53)"/><text x="13.3534%" y="399.50"></text></g><g><title>do_softirq (1 samples, 0.23%)</title><rect x="13.1034%" y="373" width="0.2299%" height="15" fill="rgb(232,167,36)"/><text x="13.3534%" y="383.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.23%)</title><rect x="13.1034%" y="357" width="0.2299%" height="15" fill="rgb(244,19,51)"/><text x="13.3534%" y="367.50"></text></g><g><title>__do_softirq (1 samples, 0.23%)</title><rect x="13.1034%" y="341" width="0.2299%" height="15" fill="rgb(224,6,22)"/><text x="13.3534%" y="351.50"></text></g><g><title>net_rx_action (1 samples, 0.23%)</title><rect x="13.1034%" y="325" width="0.2299%" height="15" fill="rgb(224,145,5)"/><text x="13.3534%" y="335.50"></text></g><g><title>process_backlog (1 samples, 0.23%)</title><rect x="13.1034%" y="309" width="0.2299%" height="15" fill="rgb(234,130,49)"/><text x="13.3534%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (1 samples, 0.23%)</title><rect x="13.1034%" y="293" width="0.2299%" height="15" fill="rgb(254,6,2)"/><text x="13.3534%" y="303.50"></text></g><g><title>ip_rcv (1 samples, 0.23%)</title><rect x="13.1034%" y="277" width="0.2299%" height="15" fill="rgb(208,96,46)"/><text x="13.3534%" y="287.50"></text></g><g><title>ip_local_deliver (1 samples, 0.23%)</title><rect x="13.1034%" y="261" width="0.2299%" height="15" fill="rgb(239,3,39)"/><text x="13.3534%" y="271.50"></text></g><g><title>ip_local_deliver_finish (1 samples, 0.23%)</title><rect x="13.1034%" y="245" width="0.2299%" height="15" fill="rgb(233,210,1)"/><text x="13.3534%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (1 samples, 0.23%)</title><rect x="13.1034%" y="229" width="0.2299%" height="15" fill="rgb(244,137,37)"/><text x="13.3534%" y="239.50"></text></g><g><title>raw_local_deliver (1 samples, 0.23%)</title><rect x="13.1034%" y="213" width="0.2299%" height="15" fill="rgb(240,136,2)"/><text x="13.3534%" y="223.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (1 samples, 0.23%)</title><rect x="13.3333%" y="693" width="0.2299%" height="15" fill="rgb(239,18,37)"/><text x="13.5833%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="13.3333%" y="677" width="0.2299%" height="15" fill="rgb(218,185,22)"/><text x="13.5833%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::CreateTableStatement as core::fmt::Display&gt;::fmt (1 samples, 0.23%)</title><rect x="13.3333%" y="661" width="0.2299%" height="15" fill="rgb(225,218,4)"/><text x="13.5833%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::CreateTableStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="13.3333%" y="645" width="0.2299%" height="15" fill="rgb(230,182,32)"/><text x="13.5833%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="13.3333%" y="629" width="0.2299%" height="15" fill="rgb(242,56,43)"/><text x="13.5833%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnOption as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="13.3333%" y="613" width="0.2299%" height="15" fill="rgb(233,99,24)"/><text x="13.5833%" y="623.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="13.5632%" y="661" width="0.2299%" height="15" fill="rgb(234,209,42)"/><text x="13.8132%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="13.5632%" y="645" width="0.2299%" height="15" fill="rgb(227,7,12)"/><text x="13.8132%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="13.5632%" y="629" width="0.2299%" height="15" fill="rgb(245,203,43)"/><text x="13.8132%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.23%)</title><rect x="13.5632%" y="613" width="0.2299%" height="15" fill="rgb(238,205,33)"/><text x="13.8132%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="13.5632%" y="597" width="0.2299%" height="15" fill="rgb(231,56,7)"/><text x="13.8132%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.23%)</title><rect x="13.5632%" y="581" width="0.2299%" height="15" fill="rgb(244,186,29)"/><text x="13.8132%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.23%)</title><rect x="13.5632%" y="565" width="0.2299%" height="15" fill="rgb(234,111,31)"/><text x="13.8132%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.23%)</title><rect x="13.5632%" y="549" width="0.2299%" height="15" fill="rgb(241,149,10)"/><text x="13.8132%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.23%)</title><rect x="13.5632%" y="533" width="0.2299%" height="15" fill="rgb(249,206,44)"/><text x="13.8132%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.23%)</title><rect x="13.5632%" y="517" width="0.2299%" height="15" fill="rgb(251,153,30)"/><text x="13.8132%" y="527.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (3 samples, 0.69%)</title><rect x="13.3333%" y="725" width="0.6897%" height="15" fill="rgb(239,152,38)"/><text x="13.5833%" y="735.50"></text></g><g><title>decor_mem::Shim::create_schema (3 samples, 0.69%)</title><rect x="13.3333%" y="709" width="0.6897%" height="15" fill="rgb(249,139,47)"/><text x="13.5833%" y="719.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (2 samples, 0.46%)</title><rect x="13.5632%" y="693" width="0.4598%" height="15" fill="rgb(244,64,35)"/><text x="13.8132%" y="703.50"></text></g><g><title>sql_parser::parser::parse_statements (2 samples, 0.46%)</title><rect x="13.5632%" y="677" width="0.4598%" height="15" fill="rgb(216,46,15)"/><text x="13.8132%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (1 samples, 0.23%)</title><rect x="13.7931%" y="661" width="0.2299%" height="15" fill="rgb(250,74,19)"/><text x="14.0431%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (1 samples, 0.23%)</title><rect x="13.7931%" y="645" width="0.2299%" height="15" fill="rgb(249,42,33)"/><text x="14.0431%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (1 samples, 0.23%)</title><rect x="13.7931%" y="629" width="0.2299%" height="15" fill="rgb(242,149,17)"/><text x="14.0431%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="13.7931%" y="613" width="0.2299%" height="15" fill="rgb(244,29,21)"/><text x="14.0431%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.69%)</title><rect x="14.2529%" y="693" width="0.6897%" height="15" fill="rgb(220,130,37)"/><text x="14.5029%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.69%)</title><rect x="14.2529%" y="677" width="0.6897%" height="15" fill="rgb(211,67,2)"/><text x="14.5029%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="14.7126%" y="661" width="0.2299%" height="15" fill="rgb(235,68,52)"/><text x="14.9626%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="14.7126%" y="645" width="0.2299%" height="15" fill="rgb(246,142,3)"/><text x="14.9626%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.23%)</title><rect x="14.7126%" y="629" width="0.2299%" height="15" fill="rgb(241,25,7)"/><text x="14.9626%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="14.7126%" y="613" width="0.2299%" height="15" fill="rgb(242,119,39)"/><text x="14.9626%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="14.7126%" y="597" width="0.2299%" height="15" fill="rgb(241,98,45)"/><text x="14.9626%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="14.7126%" y="581" width="0.2299%" height="15" fill="rgb(254,28,30)"/><text x="14.9626%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="14.7126%" y="565" width="0.2299%" height="15" fill="rgb(241,142,54)"/><text x="14.9626%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="14.7126%" y="549" width="0.2299%" height="15" fill="rgb(222,85,15)"/><text x="14.9626%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.23%)</title><rect x="14.7126%" y="533" width="0.2299%" height="15" fill="rgb(210,85,47)"/><text x="14.9626%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="14.7126%" y="517" width="0.2299%" height="15" fill="rgb(224,206,25)"/><text x="14.9626%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="14.7126%" y="501" width="0.2299%" height="15" fill="rgb(243,201,19)"/><text x="14.9626%" y="511.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="14.7126%" y="485" width="0.2299%" height="15" fill="rgb(236,59,4)"/><text x="14.9626%" y="495.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="14.7126%" y="469" width="0.2299%" height="15" fill="rgb(254,179,45)"/><text x="14.9626%" y="479.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.23%)</title><rect x="14.9425%" y="661" width="0.2299%" height="15" fill="rgb(226,14,10)"/><text x="15.1925%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.23%)</title><rect x="14.9425%" y="645" width="0.2299%" height="15" fill="rgb(244,27,41)"/><text x="15.1925%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.23%)</title><rect x="14.9425%" y="629" width="0.2299%" height="15" fill="rgb(235,35,32)"/><text x="15.1925%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="14.9425%" y="613" width="0.2299%" height="15" fill="rgb(218,68,31)"/><text x="15.1925%" y="623.50"></text></g><g><title>enqueue_task (2 samples, 0.46%)</title><rect x="15.6322%" y="69" width="0.4598%" height="15" fill="rgb(207,120,37)"/><text x="15.8822%" y="79.50"></text></g><g><title>psi_task_change (2 samples, 0.46%)</title><rect x="15.6322%" y="53" width="0.4598%" height="15" fill="rgb(227,98,0)"/><text x="15.8822%" y="63.50"></text></g><g><title>psi_group_change (2 samples, 0.46%)</title><rect x="15.6322%" y="37" width="0.4598%" height="15" fill="rgb(207,7,3)"/><text x="15.8822%" y="47.50"></text></g><g><title>__x64_sys_sendto (5 samples, 1.15%)</title><rect x="15.1724%" y="549" width="1.1494%" height="15" fill="rgb(206,98,19)"/><text x="15.4224%" y="559.50"></text></g><g><title>__sys_sendto (5 samples, 1.15%)</title><rect x="15.1724%" y="533" width="1.1494%" height="15" fill="rgb(217,5,26)"/><text x="15.4224%" y="543.50"></text></g><g><title>sock_sendmsg (5 samples, 1.15%)</title><rect x="15.1724%" y="517" width="1.1494%" height="15" fill="rgb(235,190,38)"/><text x="15.4224%" y="527.50"></text></g><g><title>tcp_sendmsg (5 samples, 1.15%)</title><rect x="15.1724%" y="501" width="1.1494%" height="15" fill="rgb(247,86,24)"/><text x="15.4224%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (5 samples, 1.15%)</title><rect x="15.1724%" y="485" width="1.1494%" height="15" fill="rgb(205,101,16)"/><text x="15.4224%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (5 samples, 1.15%)</title><rect x="15.1724%" y="469" width="1.1494%" height="15" fill="rgb(246,168,33)"/><text x="15.4224%" y="479.50"></text></g><g><title>tcp_write_xmit (5 samples, 1.15%)</title><rect x="15.1724%" y="453" width="1.1494%" height="15" fill="rgb(231,114,1)"/><text x="15.4224%" y="463.50"></text></g><g><title>__tcp_transmit_skb (5 samples, 1.15%)</title><rect x="15.1724%" y="437" width="1.1494%" height="15" fill="rgb(207,184,53)"/><text x="15.4224%" y="447.50"></text></g><g><title>__ip_queue_xmit (5 samples, 1.15%)</title><rect x="15.1724%" y="421" width="1.1494%" height="15" fill="rgb(224,95,51)"/><text x="15.4224%" y="431.50"></text></g><g><title>ip_output (5 samples, 1.15%)</title><rect x="15.1724%" y="405" width="1.1494%" height="15" fill="rgb(212,188,45)"/><text x="15.4224%" y="415.50"></text></g><g><title>ip_finish_output2 (5 samples, 1.15%)</title><rect x="15.1724%" y="389" width="1.1494%" height="15" fill="rgb(223,154,38)"/><text x="15.4224%" y="399.50"></text></g><g><title>__local_bh_enable_ip (5 samples, 1.15%)</title><rect x="15.1724%" y="373" width="1.1494%" height="15" fill="rgb(251,22,52)"/><text x="15.4224%" y="383.50"></text></g><g><title>do_softirq (5 samples, 1.15%)</title><rect x="15.1724%" y="357" width="1.1494%" height="15" fill="rgb(229,209,22)"/><text x="15.4224%" y="367.50"></text></g><g><title>do_softirq_own_stack (5 samples, 1.15%)</title><rect x="15.1724%" y="341" width="1.1494%" height="15" fill="rgb(234,138,34)"/><text x="15.4224%" y="351.50"></text></g><g><title>__do_softirq (5 samples, 1.15%)</title><rect x="15.1724%" y="325" width="1.1494%" height="15" fill="rgb(212,95,11)"/><text x="15.4224%" y="335.50"></text></g><g><title>net_rx_action (5 samples, 1.15%)</title><rect x="15.1724%" y="309" width="1.1494%" height="15" fill="rgb(240,179,47)"/><text x="15.4224%" y="319.50"></text></g><g><title>process_backlog (5 samples, 1.15%)</title><rect x="15.1724%" y="293" width="1.1494%" height="15" fill="rgb(240,163,11)"/><text x="15.4224%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (4 samples, 0.92%)</title><rect x="15.4023%" y="277" width="0.9195%" height="15" fill="rgb(236,37,12)"/><text x="15.6523%" y="287.50"></text></g><g><title>ip_rcv (4 samples, 0.92%)</title><rect x="15.4023%" y="261" width="0.9195%" height="15" fill="rgb(232,164,16)"/><text x="15.6523%" y="271.50"></text></g><g><title>ip_local_deliver (4 samples, 0.92%)</title><rect x="15.4023%" y="245" width="0.9195%" height="15" fill="rgb(244,205,15)"/><text x="15.6523%" y="255.50"></text></g><g><title>ip_local_deliver_finish (4 samples, 0.92%)</title><rect x="15.4023%" y="229" width="0.9195%" height="15" fill="rgb(223,117,47)"/><text x="15.6523%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (4 samples, 0.92%)</title><rect x="15.4023%" y="213" width="0.9195%" height="15" fill="rgb(244,107,35)"/><text x="15.6523%" y="223.50"></text></g><g><title>tcp_v4_rcv (4 samples, 0.92%)</title><rect x="15.4023%" y="197" width="0.9195%" height="15" fill="rgb(205,140,8)"/><text x="15.6523%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (4 samples, 0.92%)</title><rect x="15.4023%" y="181" width="0.9195%" height="15" fill="rgb(228,84,46)"/><text x="15.6523%" y="191.50"></text></g><g><title>tcp_rcv_established (4 samples, 0.92%)</title><rect x="15.4023%" y="165" width="0.9195%" height="15" fill="rgb(254,188,9)"/><text x="15.6523%" y="175.50"></text></g><g><title>sock_def_readable (4 samples, 0.92%)</title><rect x="15.4023%" y="149" width="0.9195%" height="15" fill="rgb(206,112,54)"/><text x="15.6523%" y="159.50"></text></g><g><title>__wake_up_common_lock (4 samples, 0.92%)</title><rect x="15.4023%" y="133" width="0.9195%" height="15" fill="rgb(216,84,49)"/><text x="15.6523%" y="143.50"></text></g><g><title>__wake_up_common (4 samples, 0.92%)</title><rect x="15.4023%" y="117" width="0.9195%" height="15" fill="rgb(214,194,35)"/><text x="15.6523%" y="127.50"></text></g><g><title>pollwake (4 samples, 0.92%)</title><rect x="15.4023%" y="101" width="0.9195%" height="15" fill="rgb(249,28,3)"/><text x="15.6523%" y="111.50"></text></g><g><title>try_to_wake_up (4 samples, 0.92%)</title><rect x="15.4023%" y="85" width="0.9195%" height="15" fill="rgb(222,56,52)"/><text x="15.6523%" y="95.50"></text></g><g><title>select_task_rq_fair (1 samples, 0.23%)</title><rect x="16.0920%" y="69" width="0.2299%" height="15" fill="rgb(245,217,50)"/><text x="16.3420%" y="79.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (7 samples, 1.61%)</title><rect x="14.9425%" y="693" width="1.6092%" height="15" fill="rgb(213,201,24)"/><text x="15.1925%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (7 samples, 1.61%)</title><rect x="14.9425%" y="677" width="1.6092%" height="15" fill="rgb(248,116,28)"/><text x="15.1925%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (6 samples, 1.38%)</title><rect x="15.1724%" y="661" width="1.3793%" height="15" fill="rgb(219,72,43)"/><text x="15.4224%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (6 samples, 1.38%)</title><rect x="15.1724%" y="645" width="1.3793%" height="15" fill="rgb(209,138,14)"/><text x="15.4224%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (6 samples, 1.38%)</title><rect x="15.1724%" y="629" width="1.3793%" height="15" fill="rgb(222,18,33)"/><text x="15.4224%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (6 samples, 1.38%)</title><rect x="15.1724%" y="613" width="1.3793%" height="15" fill="rgb(213,199,7)"/><text x="15.4224%" y="623.50"></text></g><g><title>__libc_send (6 samples, 1.38%)</title><rect x="15.1724%" y="597" width="1.3793%" height="15" fill="rgb(250,110,10)"/><text x="15.4224%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 1.38%)</title><rect x="15.1724%" y="581" width="1.3793%" height="15" fill="rgb(248,123,6)"/><text x="15.4224%" y="591.50"></text></g><g><title>do_syscall_64 (6 samples, 1.38%)</title><rect x="15.1724%" y="565" width="1.3793%" height="15" fill="rgb(206,91,31)"/><text x="15.4224%" y="575.50"></text></g><g><title>syscall_slow_exit_work (1 samples, 0.23%)</title><rect x="16.3218%" y="549" width="0.2299%" height="15" fill="rgb(211,154,13)"/><text x="16.5718%" y="559.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="16.5517%" y="693" width="0.2299%" height="15" fill="rgb(225,148,7)"/><text x="16.8017%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="16.5517%" y="677" width="0.2299%" height="15" fill="rgb(220,160,43)"/><text x="16.8017%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="16.7816%" y="693" width="0.2299%" height="15" fill="rgb(213,52,39)"/><text x="17.0316%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="16.7816%" y="677" width="0.2299%" height="15" fill="rgb(243,137,7)"/><text x="17.0316%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="16.7816%" y="661" width="0.2299%" height="15" fill="rgb(230,79,13)"/><text x="17.0316%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.23%)</title><rect x="17.0115%" y="677" width="0.2299%" height="15" fill="rgb(247,105,23)"/><text x="17.2615%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="17.0115%" y="661" width="0.2299%" height="15" fill="rgb(223,179,41)"/><text x="17.2615%" y="671.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (1 samples, 0.23%)</title><rect x="17.0115%" y="645" width="0.2299%" height="15" fill="rgb(218,9,34)"/><text x="17.2615%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="17.0115%" y="629" width="0.2299%" height="15" fill="rgb(222,106,8)"/><text x="17.2615%" y="639.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.23%)</title><rect x="17.0115%" y="613" width="0.2299%" height="15" fill="rgb(211,220,0)"/><text x="17.2615%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="17.2414%" y="661" width="0.2299%" height="15" fill="rgb(229,52,16)"/><text x="17.4914%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (1 samples, 0.23%)</title><rect x="17.2414%" y="645" width="0.2299%" height="15" fill="rgb(212,155,18)"/><text x="17.4914%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.46%)</title><rect x="17.4713%" y="661" width="0.4598%" height="15" fill="rgb(242,21,14)"/><text x="17.7213%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.46%)</title><rect x="17.4713%" y="645" width="0.4598%" height="15" fill="rgb(222,19,48)"/><text x="17.7213%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.46%)</title><rect x="17.4713%" y="629" width="0.4598%" height="15" fill="rgb(232,45,27)"/><text x="17.7213%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.46%)</title><rect x="17.4713%" y="613" width="0.4598%" height="15" fill="rgb(249,103,42)"/><text x="17.7213%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (1 samples, 0.23%)</title><rect x="17.7011%" y="597" width="0.2299%" height="15" fill="rgb(246,81,33)"/><text x="17.9511%" y="607.50"></text></g><g><title>core::fmt::write (6 samples, 1.38%)</title><rect x="17.0115%" y="693" width="1.3793%" height="15" fill="rgb(252,33,42)"/><text x="17.2615%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (5 samples, 1.15%)</title><rect x="17.2414%" y="677" width="1.1494%" height="15" fill="rgb(209,212,41)"/><text x="17.4914%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::UpdateStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.46%)</title><rect x="17.9310%" y="661" width="0.4598%" height="15" fill="rgb(207,154,6)"/><text x="18.1810%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.46%)</title><rect x="17.9310%" y="645" width="0.4598%" height="15" fill="rgb(223,64,47)"/><text x="18.1810%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.46%)</title><rect x="17.9310%" y="629" width="0.4598%" height="15" fill="rgb(211,161,38)"/><text x="18.1810%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.46%)</title><rect x="17.9310%" y="613" width="0.4598%" height="15" fill="rgb(219,138,40)"/><text x="18.1810%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.46%)</title><rect x="17.9310%" y="597" width="0.4598%" height="15" fill="rgb(241,228,46)"/><text x="18.1810%" y="607.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.46%)</title><rect x="17.9310%" y="581" width="0.4598%" height="15" fill="rgb(223,209,38)"/><text x="18.1810%" y="591.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="18.1609%" y="565" width="0.2299%" height="15" fill="rgb(236,164,45)"/><text x="18.4109%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="18.3908%" y="661" width="0.2299%" height="15" fill="rgb(231,15,5)"/><text x="18.6408%" y="671.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="18.3908%" y="645" width="0.2299%" height="15" fill="rgb(252,35,15)"/><text x="18.6408%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.46%)</title><rect x="18.3908%" y="693" width="0.4598%" height="15" fill="rgb(248,181,18)"/><text x="18.6408%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.46%)</title><rect x="18.3908%" y="677" width="0.4598%" height="15" fill="rgb(233,39,42)"/><text x="18.6408%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="18.6207%" y="661" width="0.2299%" height="15" fill="rgb(238,110,33)"/><text x="18.8707%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="18.6207%" y="645" width="0.2299%" height="15" fill="rgb(233,195,10)"/><text x="18.8707%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="18.6207%" y="629" width="0.2299%" height="15" fill="rgb(254,105,3)"/><text x="18.8707%" y="639.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.23%)</title><rect x="18.8506%" y="677" width="0.2299%" height="15" fill="rgb(221,225,9)"/><text x="19.1006%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.23%)</title><rect x="18.8506%" y="661" width="0.2299%" height="15" fill="rgb(224,227,45)"/><text x="19.1006%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="18.8506%" y="645" width="0.2299%" height="15" fill="rgb(229,198,43)"/><text x="19.1006%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="18.8506%" y="629" width="0.2299%" height="15" fill="rgb(206,209,35)"/><text x="19.1006%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="18.8506%" y="613" width="0.2299%" height="15" fill="rgb(245,195,53)"/><text x="19.1006%" y="623.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.23%)</title><rect x="18.8506%" y="597" width="0.2299%" height="15" fill="rgb(240,92,26)"/><text x="19.1006%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.23%)</title><rect x="18.8506%" y="581" width="0.2299%" height="15" fill="rgb(207,40,23)"/><text x="19.1006%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.23%)</title><rect x="18.8506%" y="565" width="0.2299%" height="15" fill="rgb(223,111,35)"/><text x="19.1006%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.23%)</title><rect x="18.8506%" y="549" width="0.2299%" height="15" fill="rgb(229,147,28)"/><text x="19.1006%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.23%)</title><rect x="18.8506%" y="533" width="0.2299%" height="15" fill="rgb(211,29,28)"/><text x="19.1006%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.23%)</title><rect x="18.8506%" y="517" width="0.2299%" height="15" fill="rgb(228,72,33)"/><text x="19.1006%" y="527.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_gid_into_caches (1 samples, 0.23%)</title><rect x="19.0805%" y="677" width="0.2299%" height="15" fill="rgb(205,214,31)"/><text x="19.3305%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.23%)</title><rect x="19.0805%" y="661" width="0.2299%" height="15" fill="rgb(224,111,15)"/><text x="19.3305%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.23%)</title><rect x="19.0805%" y="645" width="0.2299%" height="15" fill="rgb(253,21,26)"/><text x="19.3305%" y="655.50"></text></g><g><title>__netif_receive_skb_core (1 samples, 0.23%)</title><rect x="20.0000%" y="261" width="0.2299%" height="15" fill="rgb(245,139,43)"/><text x="20.2500%" y="271.50"></text></g><g><title>__kfree_skb (1 samples, 0.23%)</title><rect x="20.6897%" y="133" width="0.2299%" height="15" fill="rgb(252,170,7)"/><text x="20.9397%" y="143.50"></text></g><g><title>kfree (1 samples, 0.23%)</title><rect x="20.6897%" y="117" width="0.2299%" height="15" fill="rgb(231,118,14)"/><text x="20.9397%" y="127.50"></text></g><g><title>__ip_queue_xmit (7 samples, 1.61%)</title><rect x="19.5402%" y="421" width="1.6092%" height="15" fill="rgb(238,83,0)"/><text x="19.7902%" y="431.50"></text></g><g><title>ip_output (6 samples, 1.38%)</title><rect x="19.7701%" y="405" width="1.3793%" height="15" fill="rgb(221,39,39)"/><text x="20.0201%" y="415.50"></text></g><g><title>ip_finish_output2 (6 samples, 1.38%)</title><rect x="19.7701%" y="389" width="1.3793%" height="15" fill="rgb(222,119,46)"/><text x="20.0201%" y="399.50"></text></g><g><title>__local_bh_enable_ip (5 samples, 1.15%)</title><rect x="20.0000%" y="373" width="1.1494%" height="15" fill="rgb(222,165,49)"/><text x="20.2500%" y="383.50"></text></g><g><title>do_softirq (5 samples, 1.15%)</title><rect x="20.0000%" y="357" width="1.1494%" height="15" fill="rgb(219,113,52)"/><text x="20.2500%" y="367.50"></text></g><g><title>do_softirq_own_stack (5 samples, 1.15%)</title><rect x="20.0000%" y="341" width="1.1494%" height="15" fill="rgb(214,7,15)"/><text x="20.2500%" y="351.50"></text></g><g><title>__do_softirq (5 samples, 1.15%)</title><rect x="20.0000%" y="325" width="1.1494%" height="15" fill="rgb(235,32,4)"/><text x="20.2500%" y="335.50"></text></g><g><title>net_rx_action (5 samples, 1.15%)</title><rect x="20.0000%" y="309" width="1.1494%" height="15" fill="rgb(238,90,54)"/><text x="20.2500%" y="319.50"></text></g><g><title>process_backlog (5 samples, 1.15%)</title><rect x="20.0000%" y="293" width="1.1494%" height="15" fill="rgb(213,208,19)"/><text x="20.2500%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (5 samples, 1.15%)</title><rect x="20.0000%" y="277" width="1.1494%" height="15" fill="rgb(233,156,4)"/><text x="20.2500%" y="287.50"></text></g><g><title>ip_rcv (4 samples, 0.92%)</title><rect x="20.2299%" y="261" width="0.9195%" height="15" fill="rgb(207,194,5)"/><text x="20.4799%" y="271.50"></text></g><g><title>ip_local_deliver (4 samples, 0.92%)</title><rect x="20.2299%" y="245" width="0.9195%" height="15" fill="rgb(206,111,30)"/><text x="20.4799%" y="255.50"></text></g><g><title>ip_local_deliver_finish (4 samples, 0.92%)</title><rect x="20.2299%" y="229" width="0.9195%" height="15" fill="rgb(243,70,54)"/><text x="20.4799%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (4 samples, 0.92%)</title><rect x="20.2299%" y="213" width="0.9195%" height="15" fill="rgb(242,28,8)"/><text x="20.4799%" y="223.50"></text></g><g><title>tcp_v4_rcv (4 samples, 0.92%)</title><rect x="20.2299%" y="197" width="0.9195%" height="15" fill="rgb(219,106,18)"/><text x="20.4799%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (4 samples, 0.92%)</title><rect x="20.2299%" y="181" width="0.9195%" height="15" fill="rgb(244,222,10)"/><text x="20.4799%" y="191.50"></text></g><g><title>tcp_rcv_established (4 samples, 0.92%)</title><rect x="20.2299%" y="165" width="0.9195%" height="15" fill="rgb(236,179,52)"/><text x="20.4799%" y="175.50"></text></g><g><title>tcp_ack (3 samples, 0.69%)</title><rect x="20.4598%" y="149" width="0.6897%" height="15" fill="rgb(213,23,39)"/><text x="20.7098%" y="159.50"></text></g><g><title>tcp_update_pacing_rate (1 samples, 0.23%)</title><rect x="20.9195%" y="133" width="0.2299%" height="15" fill="rgb(238,48,10)"/><text x="21.1695%" y="143.50"></text></g><g><title>__tcp_transmit_skb (8 samples, 1.84%)</title><rect x="19.5402%" y="437" width="1.8391%" height="15" fill="rgb(251,196,23)"/><text x="19.7902%" y="447.50">_..</text></g><g><title>skb_clone (1 samples, 0.23%)</title><rect x="21.1494%" y="421" width="0.2299%" height="15" fill="rgb(250,152,24)"/><text x="21.3994%" y="431.50"></text></g><g><title>__copy_skb_header (1 samples, 0.23%)</title><rect x="21.1494%" y="405" width="0.2299%" height="15" fill="rgb(209,150,17)"/><text x="21.3994%" y="415.50"></text></g><g><title>__tcp_push_pending_frames (9 samples, 2.07%)</title><rect x="19.5402%" y="469" width="2.0690%" height="15" fill="rgb(234,202,34)"/><text x="19.7902%" y="479.50">_..</text></g><g><title>tcp_write_xmit (9 samples, 2.07%)</title><rect x="19.5402%" y="453" width="2.0690%" height="15" fill="rgb(253,148,53)"/><text x="19.7902%" y="463.50">t..</text></g><g><title>ktime_get (1 samples, 0.23%)</title><rect x="21.3793%" y="437" width="0.2299%" height="15" fill="rgb(218,129,16)"/><text x="21.6293%" y="447.50"></text></g><g><title>sk_page_frag_refill (1 samples, 0.23%)</title><rect x="21.6092%" y="469" width="0.2299%" height="15" fill="rgb(216,85,19)"/><text x="21.8592%" y="479.50"></text></g><g><title>skb_page_frag_refill (1 samples, 0.23%)</title><rect x="21.6092%" y="453" width="0.2299%" height="15" fill="rgb(235,228,7)"/><text x="21.8592%" y="463.50"></text></g><g><title>__check_object_size (1 samples, 0.23%)</title><rect x="21.8391%" y="453" width="0.2299%" height="15" fill="rgb(245,175,0)"/><text x="22.0891%" y="463.50"></text></g><g><title>check_stack_object (1 samples, 0.23%)</title><rect x="21.8391%" y="437" width="0.2299%" height="15" fill="rgb(208,168,36)"/><text x="22.0891%" y="447.50"></text></g><g><title>do_syscall_64 (12 samples, 2.76%)</title><rect x="19.5402%" y="565" width="2.7586%" height="15" fill="rgb(246,171,24)"/><text x="19.7902%" y="575.50">do..</text></g><g><title>__x64_sys_sendto (12 samples, 2.76%)</title><rect x="19.5402%" y="549" width="2.7586%" height="15" fill="rgb(215,142,24)"/><text x="19.7902%" y="559.50">__..</text></g><g><title>__sys_sendto (12 samples, 2.76%)</title><rect x="19.5402%" y="533" width="2.7586%" height="15" fill="rgb(250,187,7)"/><text x="19.7902%" y="543.50">__..</text></g><g><title>sock_sendmsg (12 samples, 2.76%)</title><rect x="19.5402%" y="517" width="2.7586%" height="15" fill="rgb(228,66,33)"/><text x="19.7902%" y="527.50">so..</text></g><g><title>tcp_sendmsg (12 samples, 2.76%)</title><rect x="19.5402%" y="501" width="2.7586%" height="15" fill="rgb(234,215,21)"/><text x="19.7902%" y="511.50">tc..</text></g><g><title>tcp_sendmsg_locked (12 samples, 2.76%)</title><rect x="19.5402%" y="485" width="2.7586%" height="15" fill="rgb(222,191,20)"/><text x="19.7902%" y="495.50">tc..</text></g><g><title>skb_do_copy_data_nocache (2 samples, 0.46%)</title><rect x="21.8391%" y="469" width="0.4598%" height="15" fill="rgb(245,79,54)"/><text x="22.0891%" y="479.50"></text></g><g><title>_copy_from_iter_full (1 samples, 0.23%)</title><rect x="22.0690%" y="453" width="0.2299%" height="15" fill="rgb(240,10,37)"/><text x="22.3190%" y="463.50"></text></g><g><title>iov_iter_advance (1 samples, 0.23%)</title><rect x="22.0690%" y="437" width="0.2299%" height="15" fill="rgb(214,192,32)"/><text x="22.3190%" y="447.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (17 samples, 3.91%)</title><rect x="18.8506%" y="693" width="3.9080%" height="15" fill="rgb(209,36,54)"/><text x="19.1006%" y="703.50">deco..</text></g><g><title>mysql::conn::Conn::_query (15 samples, 3.45%)</title><rect x="19.3103%" y="677" width="3.4483%" height="15" fill="rgb(220,10,11)"/><text x="19.5603%" y="687.50">mys..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (15 samples, 3.45%)</title><rect x="19.3103%" y="661" width="3.4483%" height="15" fill="rgb(221,106,17)"/><text x="19.5603%" y="671.50">mys..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (14 samples, 3.22%)</title><rect x="19.5402%" y="645" width="3.2184%" height="15" fill="rgb(251,142,44)"/><text x="19.7902%" y="655.50">std..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (14 samples, 3.22%)</title><rect x="19.5402%" y="629" width="3.2184%" height="15" fill="rgb(238,13,15)"/><text x="19.7902%" y="639.50">&lt;st..</text></g><g><title>std::sys_common::net::TcpStream::write (14 samples, 3.22%)</title><rect x="19.5402%" y="613" width="3.2184%" height="15" fill="rgb(208,107,27)"/><text x="19.7902%" y="623.50">std..</text></g><g><title>__libc_send (14 samples, 3.22%)</title><rect x="19.5402%" y="597" width="3.2184%" height="15" fill="rgb(205,136,37)"/><text x="19.7902%" y="607.50">__l..</text></g><g><title>entry_SYSCALL_64 (14 samples, 3.22%)</title><rect x="19.5402%" y="581" width="3.2184%" height="15" fill="rgb(250,205,27)"/><text x="19.7902%" y="591.50">ent..</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.46%)</title><rect x="22.2989%" y="565" width="0.4598%" height="15" fill="rgb(210,80,43)"/><text x="22.5489%" y="575.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="22.9885%" y="661" width="0.2299%" height="15" fill="rgb(247,160,36)"/><text x="23.2385%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.46%)</title><rect x="23.2184%" y="629" width="0.4598%" height="15" fill="rgb(234,13,49)"/><text x="23.4684%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2 samples, 0.46%)</title><rect x="23.2184%" y="613" width="0.4598%" height="15" fill="rgb(234,122,0)"/><text x="23.4684%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.46%)</title><rect x="23.2184%" y="597" width="0.4598%" height="15" fill="rgb(207,146,38)"/><text x="23.4684%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.46%)</title><rect x="23.2184%" y="581" width="0.4598%" height="15" fill="rgb(207,177,25)"/><text x="23.4684%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (1 samples, 0.23%)</title><rect x="23.4483%" y="565" width="0.2299%" height="15" fill="rgb(211,178,42)"/><text x="23.6983%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.23%)</title><rect x="23.4483%" y="549" width="0.2299%" height="15" fill="rgb(230,69,54)"/><text x="23.6983%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (3 samples, 0.69%)</title><rect x="23.2184%" y="645" width="0.6897%" height="15" fill="rgb(214,135,41)"/><text x="23.4684%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (1 samples, 0.23%)</title><rect x="23.6782%" y="629" width="0.2299%" height="15" fill="rgb(237,67,25)"/><text x="23.9282%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="23.6782%" y="613" width="0.2299%" height="15" fill="rgb(222,189,50)"/><text x="23.9282%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="23.6782%" y="597" width="0.2299%" height="15" fill="rgb(245,148,34)"/><text x="23.9282%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="23.9080%" y="629" width="0.2299%" height="15" fill="rgb(222,29,6)"/><text x="24.1580%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="23.9080%" y="613" width="0.2299%" height="15" fill="rgb(221,189,43)"/><text x="24.1580%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="23.9080%" y="597" width="0.2299%" height="15" fill="rgb(207,36,27)"/><text x="24.1580%" y="607.50"></text></g><g><title>core::fmt::write (5 samples, 1.15%)</title><rect x="23.2184%" y="661" width="1.1494%" height="15" fill="rgb(217,90,24)"/><text x="23.4684%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (2 samples, 0.46%)</title><rect x="23.9080%" y="645" width="0.4598%" height="15" fill="rgb(224,66,35)"/><text x="24.1580%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="24.1379%" y="629" width="0.2299%" height="15" fill="rgb(221,13,50)"/><text x="24.3879%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (1 samples, 0.23%)</title><rect x="24.1379%" y="613" width="0.2299%" height="15" fill="rgb(236,68,49)"/><text x="24.3879%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="24.1379%" y="597" width="0.2299%" height="15" fill="rgb(229,146,28)"/><text x="24.3879%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="24.1379%" y="581" width="0.2299%" height="15" fill="rgb(225,31,38)"/><text x="24.3879%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.23%)</title><rect x="24.1379%" y="565" width="0.2299%" height="15" fill="rgb(250,208,3)"/><text x="24.3879%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.23%)</title><rect x="24.3678%" y="661" width="0.2299%" height="15" fill="rgb(246,54,23)"/><text x="24.6178%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.23%)</title><rect x="24.3678%" y="645" width="0.2299%" height="15" fill="rgb(243,76,11)"/><text x="24.6178%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.23%)</title><rect x="24.3678%" y="629" width="0.2299%" height="15" fill="rgb(245,21,50)"/><text x="24.6178%" y="639.50"></text></g><g><title>decor_mem::views::Views::insert (9 samples, 2.07%)</title><rect x="22.7586%" y="693" width="2.0690%" height="15" fill="rgb(228,9,43)"/><text x="23.0086%" y="703.50">d..</text></g><g><title>decor_mem::views::View::insert_into_index (8 samples, 1.84%)</title><rect x="22.9885%" y="677" width="1.8391%" height="15" fill="rgb(208,100,47)"/><text x="23.2385%" y="687.50">d..</text></g><g><title>hashbrown::map::make_hash (1 samples, 0.23%)</title><rect x="24.5977%" y="661" width="0.2299%" height="15" fill="rgb(232,26,8)"/><text x="24.8477%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.23%)</title><rect x="24.5977%" y="645" width="0.2299%" height="15" fill="rgb(216,166,38)"/><text x="24.8477%" y="655.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.23%)</title><rect x="25.0575%" y="645" width="0.2299%" height="15" fill="rgb(251,202,51)"/><text x="25.3075%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="25.2874%" y="645" width="0.2299%" height="15" fill="rgb(254,216,34)"/><text x="25.5374%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.23%)</title><rect x="25.2874%" y="629" width="0.2299%" height="15" fill="rgb(251,32,27)"/><text x="25.5374%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="25.2874%" y="613" width="0.2299%" height="15" fill="rgb(208,127,28)"/><text x="25.5374%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (1 samples, 0.23%)</title><rect x="25.2874%" y="597" width="0.2299%" height="15" fill="rgb(224,137,22)"/><text x="25.5374%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="25.2874%" y="581" width="0.2299%" height="15" fill="rgb(254,70,32)"/><text x="25.5374%" y="591.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="25.2874%" y="565" width="0.2299%" height="15" fill="rgb(229,75,37)"/><text x="25.5374%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="25.2874%" y="549" width="0.2299%" height="15" fill="rgb(252,64,23)"/><text x="25.5374%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="25.7471%" y="581" width="0.2299%" height="15" fill="rgb(232,162,48)"/><text x="25.9971%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="25.7471%" y="565" width="0.2299%" height="15" fill="rgb(246,160,12)"/><text x="25.9971%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.23%)</title><rect x="25.7471%" y="549" width="0.2299%" height="15" fill="rgb(247,166,0)"/><text x="25.9971%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.23%)</title><rect x="25.7471%" y="533" width="0.2299%" height="15" fill="rgb(249,219,21)"/><text x="25.9971%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.23%)</title><rect x="25.7471%" y="517" width="0.2299%" height="15" fill="rgb(205,209,3)"/><text x="25.9971%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.23%)</title><rect x="25.7471%" y="501" width="0.2299%" height="15" fill="rgb(243,44,1)"/><text x="25.9971%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.23%)</title><rect x="25.7471%" y="485" width="0.2299%" height="15" fill="rgb(206,159,16)"/><text x="25.9971%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.23%)</title><rect x="25.7471%" y="469" width="0.2299%" height="15" fill="rgb(244,77,30)"/><text x="25.9971%" y="479.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (53 samples, 12.18%)</title><rect x="14.0230%" y="709" width="12.1839%" height="15" fill="rgb(218,69,12)"/><text x="14.2730%" y="719.50">decor_mem::query_t..</text></g><g><title>decor_mem::views::Views::update (6 samples, 1.38%)</title><rect x="24.8276%" y="693" width="1.3793%" height="15" fill="rgb(212,87,7)"/><text x="25.0776%" y="703.50"></text></g><g><title>decor_mem::select::get_value_for_rows (5 samples, 1.15%)</title><rect x="25.0575%" y="677" width="1.1494%" height="15" fill="rgb(245,114,25)"/><text x="25.3075%" y="687.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (5 samples, 1.15%)</title><rect x="25.0575%" y="661" width="1.1494%" height="15" fill="rgb(210,61,42)"/><text x="25.3075%" y="671.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (3 samples, 0.69%)</title><rect x="25.5172%" y="645" width="0.6897%" height="15" fill="rgb(211,52,33)"/><text x="25.7672%" y="655.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.46%)</title><rect x="25.7471%" y="629" width="0.4598%" height="15" fill="rgb(234,58,33)"/><text x="25.9971%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.46%)</title><rect x="25.7471%" y="613" width="0.4598%" height="15" fill="rgb(220,115,36)"/><text x="25.9971%" y="623.50"></text></g><g><title>core::fmt::write (2 samples, 0.46%)</title><rect x="25.7471%" y="597" width="0.4598%" height="15" fill="rgb(243,153,54)"/><text x="25.9971%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (1 samples, 0.23%)</title><rect x="25.9770%" y="581" width="0.2299%" height="15" fill="rgb(251,47,18)"/><text x="26.2270%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.23%)</title><rect x="25.9770%" y="565" width="0.2299%" height="15" fill="rgb(242,102,42)"/><text x="26.2270%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (1 samples, 0.23%)</title><rect x="25.9770%" y="549" width="0.2299%" height="15" fill="rgb(234,31,38)"/><text x="26.2270%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="25.9770%" y="533" width="0.2299%" height="15" fill="rgb(221,117,51)"/><text x="26.2270%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.23%)</title><rect x="25.9770%" y="517" width="0.2299%" height="15" fill="rgb(212,20,18)"/><text x="26.2270%" y="527.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (1 samples, 0.23%)</title><rect x="25.9770%" y="501" width="0.2299%" height="15" fill="rgb(245,133,36)"/><text x="26.2270%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.23%)</title><rect x="25.9770%" y="485" width="0.2299%" height="15" fill="rgb(212,6,19)"/><text x="26.2270%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="26.2069%" y="693" width="0.2299%" height="15" fill="rgb(218,1,36)"/><text x="26.4569%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.23%)</title><rect x="26.2069%" y="677" width="0.2299%" height="15" fill="rgb(246,84,54)"/><text x="26.4569%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (1 samples, 0.23%)</title><rect x="26.6667%" y="645" width="0.2299%" height="15" fill="rgb(242,110,6)"/><text x="26.9167%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.23%)</title><rect x="26.6667%" y="629" width="0.2299%" height="15" fill="rgb(214,47,5)"/><text x="26.9167%" y="639.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1 samples, 0.23%)</title><rect x="26.6667%" y="613" width="0.2299%" height="15" fill="rgb(218,159,25)"/><text x="26.9167%" y="623.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_string (2 samples, 0.46%)</title><rect x="26.8966%" y="645" width="0.4598%" height="15" fill="rgb(215,211,28)"/><text x="27.1466%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.23%)</title><rect x="27.1264%" y="629" width="0.2299%" height="15" fill="rgb(238,59,32)"/><text x="27.3764%" y="639.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.23%)</title><rect x="27.1264%" y="613" width="0.2299%" height="15" fill="rgb(226,82,3)"/><text x="27.3764%" y="623.50"></text></g><g><title>_int_realloc (1 samples, 0.23%)</title><rect x="27.1264%" y="597" width="0.2299%" height="15" fill="rgb(240,164,32)"/><text x="27.3764%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="27.1264%" y="581" width="0.2299%" height="15" fill="rgb(232,46,7)"/><text x="27.3764%" y="591.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (62 samples, 14.25%)</title><rect x="13.3333%" y="741" width="14.2529%" height="15" fill="rgb(229,129,53)"/><text x="13.5833%" y="751.50">msql_srv::MysqlInterme..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (59 samples, 13.56%)</title><rect x="14.0230%" y="725" width="13.5632%" height="15" fill="rgb(234,188,29)"/><text x="14.2730%" y="735.50">&lt;decor_mem::Shim as ..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (6 samples, 1.38%)</title><rect x="26.2069%" y="709" width="1.3793%" height="15" fill="rgb(246,141,4)"/><text x="26.4569%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (5 samples, 1.15%)</title><rect x="26.4368%" y="693" width="1.1494%" height="15" fill="rgb(229,23,39)"/><text x="26.6868%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (5 samples, 1.15%)</title><rect x="26.4368%" y="677" width="1.1494%" height="15" fill="rgb(206,12,3)"/><text x="26.6868%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (5 samples, 1.15%)</title><rect x="26.4368%" y="661" width="1.1494%" height="15" fill="rgb(252,226,20)"/><text x="26.6868%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (1 samples, 0.23%)</title><rect x="27.3563%" y="645" width="0.2299%" height="15" fill="rgb(216,123,35)"/><text x="27.6063%" y="655.50"></text></g><g><title>sql_parser::tokenizer::PeekableChars::next (1 samples, 0.23%)</title><rect x="27.3563%" y="629" width="0.2299%" height="15" fill="rgb(212,68,40)"/><text x="27.6063%" y="639.50"></text></g><g><title>mysql_common::packets::OkPacket::into_owned (1 samples, 0.23%)</title><rect x="27.5862%" y="741" width="0.2299%" height="15" fill="rgb(254,125,32)"/><text x="27.8362%" y="751.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.23%)</title><rect x="27.8161%" y="741" width="0.2299%" height="15" fill="rgb(253,97,22)"/><text x="28.0661%" y="751.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.23%)</title><rect x="27.8161%" y="725" width="0.2299%" height="15" fill="rgb(241,101,14)"/><text x="28.0661%" y="735.50"></text></g><g><title>regex::compile::Compiler::compile_finish (1 samples, 0.23%)</title><rect x="27.8161%" y="709" width="0.2299%" height="15" fill="rgb(238,103,29)"/><text x="28.0661%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.23%)</title><rect x="27.8161%" y="693" width="0.2299%" height="15" fill="rgb(233,195,47)"/><text x="28.0661%" y="703.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="27.8161%" y="677" width="0.2299%" height="15" fill="rgb(246,218,30)"/><text x="28.0661%" y="687.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="27.8161%" y="661" width="0.2299%" height="15" fill="rgb(219,145,47)"/><text x="28.0661%" y="671.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="27.8161%" y="645" width="0.2299%" height="15" fill="rgb(243,12,26)"/><text x="28.0661%" y="655.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="27.8161%" y="629" width="0.2299%" height="15" fill="rgb(214,87,16)"/><text x="28.0661%" y="639.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.23%)</title><rect x="27.8161%" y="613" width="0.2299%" height="15" fill="rgb(208,99,42)"/><text x="28.0661%" y="623.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.23%)</title><rect x="27.8161%" y="597" width="0.2299%" height="15" fill="rgb(253,99,2)"/><text x="28.0661%" y="607.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.23%)</title><rect x="27.8161%" y="581" width="0.2299%" height="15" fill="rgb(220,168,23)"/><text x="28.0661%" y="591.50"></text></g><g><title>prep_new_page (1 samples, 0.23%)</title><rect x="27.8161%" y="565" width="0.2299%" height="15" fill="rgb(242,38,24)"/><text x="28.0661%" y="575.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (33 samples, 7.59%)</title><rect x="28.0460%" y="741" width="7.5862%" height="15" fill="rgb(225,182,9)"/><text x="28.2960%" y="751.50">sql_parser..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (33 samples, 7.59%)</title><rect x="28.0460%" y="725" width="7.5862%" height="15" fill="rgb(243,178,37)"/><text x="28.2960%" y="735.50">sql_parser..</text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (33 samples, 7.59%)</title><rect x="28.0460%" y="709" width="7.5862%" height="15" fill="rgb(232,139,19)"/><text x="28.2960%" y="719.50">sql_parser..</text></g><g><title>sql_parser::parser::Parser::check_descent (33 samples, 7.59%)</title><rect x="28.0460%" y="693" width="7.5862%" height="15" fill="rgb(225,201,24)"/><text x="28.2960%" y="703.50">sql_parser..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (33 samples, 7.59%)</title><rect x="28.0460%" y="677" width="7.5862%" height="15" fill="rgb(221,47,46)"/><text x="28.2960%" y="687.50">sql_parser..</text></g><g><title>sql_parser::parser::Parser::parse_data_type (32 samples, 7.36%)</title><rect x="28.2759%" y="661" width="7.3563%" height="15" fill="rgb(249,23,13)"/><text x="28.5259%" y="671.50">sql_parser..</text></g><g><title>sql_parser::parser::Parser::expected (31 samples, 7.13%)</title><rect x="28.5057%" y="645" width="7.1264%" height="15" fill="rgb(219,9,5)"/><text x="28.7557%" y="655.50">sql_parser..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (31 samples, 7.13%)</title><rect x="28.5057%" y="629" width="7.1264%" height="15" fill="rgb(254,171,16)"/><text x="28.7557%" y="639.50">&lt;alloc::st..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 7.13%)</title><rect x="28.5057%" y="613" width="7.1264%" height="15" fill="rgb(230,171,20)"/><text x="28.7557%" y="623.50">&lt;alloc::ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (31 samples, 7.13%)</title><rect x="28.5057%" y="597" width="7.1264%" height="15" fill="rgb(210,71,41)"/><text x="28.7557%" y="607.50">alloc::sli..</text></g><g><title>alloc::slice::hack::to_vec (31 samples, 7.13%)</title><rect x="28.5057%" y="581" width="7.1264%" height="15" fill="rgb(206,173,20)"/><text x="28.7557%" y="591.50">alloc::sli..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (31 samples, 7.13%)</title><rect x="28.5057%" y="565" width="7.1264%" height="15" fill="rgb(233,88,34)"/><text x="28.7557%" y="575.50">alloc::vec..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (31 samples, 7.13%)</title><rect x="28.5057%" y="549" width="7.1264%" height="15" fill="rgb(223,209,46)"/><text x="28.7557%" y="559.50">&lt;alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (31 samples, 7.13%)</title><rect x="28.5057%" y="533" width="7.1264%" height="15" fill="rgb(250,43,18)"/><text x="28.7557%" y="543.50">alloc::vec..</text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 7.13%)</title><rect x="28.5057%" y="517" width="7.1264%" height="15" fill="rgb(208,13,10)"/><text x="28.7557%" y="527.50">core::intr..</text></g><g><title>__memmove_avx_unaligned_erms (31 samples, 7.13%)</title><rect x="28.5057%" y="501" width="7.1264%" height="15" fill="rgb(212,200,36)"/><text x="28.7557%" y="511.50">__memmove_..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.46%)</title><rect x="35.6322%" y="645" width="0.4598%" height="15" fill="rgb(225,90,30)"/><text x="35.8822%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.46%)</title><rect x="35.6322%" y="629" width="0.4598%" height="15" fill="rgb(236,182,39)"/><text x="35.8822%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.46%)</title><rect x="35.6322%" y="613" width="0.4598%" height="15" fill="rgb(212,144,35)"/><text x="35.8822%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.46%)</title><rect x="35.6322%" y="597" width="0.4598%" height="15" fill="rgb(228,63,44)"/><text x="35.8822%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.46%)</title><rect x="35.6322%" y="581" width="0.4598%" height="15" fill="rgb(228,109,6)"/><text x="35.8822%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.46%)</title><rect x="35.6322%" y="565" width="0.4598%" height="15" fill="rgb(238,117,24)"/><text x="35.8822%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.46%)</title><rect x="35.6322%" y="549" width="0.4598%" height="15" fill="rgb(242,26,26)"/><text x="35.8822%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.46%)</title><rect x="35.6322%" y="533" width="0.4598%" height="15" fill="rgb(221,92,48)"/><text x="35.8822%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.46%)</title><rect x="35.6322%" y="517" width="0.4598%" height="15" fill="rgb(209,209,32)"/><text x="35.8822%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.46%)</title><rect x="35.6322%" y="501" width="0.4598%" height="15" fill="rgb(221,70,22)"/><text x="35.8822%" y="511.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.46%)</title><rect x="35.6322%" y="485" width="0.4598%" height="15" fill="rgb(248,145,5)"/><text x="35.8822%" y="495.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.46%)</title><rect x="35.6322%" y="469" width="0.4598%" height="15" fill="rgb(226,116,26)"/><text x="35.8822%" y="479.50"></text></g><g><title>_int_malloc (2 samples, 0.46%)</title><rect x="35.6322%" y="453" width="0.4598%" height="15" fill="rgb(244,5,17)"/><text x="35.8822%" y="463.50"></text></g><g><title>sysmalloc (1 samples, 0.23%)</title><rect x="35.8621%" y="437" width="0.2299%" height="15" fill="rgb(252,159,33)"/><text x="36.1121%" y="447.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="35.8621%" y="421" width="0.2299%" height="15" fill="rgb(206,71,0)"/><text x="36.1121%" y="431.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="35.8621%" y="405" width="0.2299%" height="15" fill="rgb(233,118,54)"/><text x="36.1121%" y="415.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="35.8621%" y="389" width="0.2299%" height="15" fill="rgb(234,83,48)"/><text x="36.1121%" y="399.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="35.8621%" y="373" width="0.2299%" height="15" fill="rgb(228,3,54)"/><text x="36.1121%" y="383.50"></text></g><g><title>__lru_cache_add (1 samples, 0.23%)</title><rect x="35.8621%" y="357" width="0.2299%" height="15" fill="rgb(226,155,13)"/><text x="36.1121%" y="367.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.23%)</title><rect x="35.8621%" y="341" width="0.2299%" height="15" fill="rgb(241,28,37)"/><text x="36.1121%" y="351.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.23%)</title><rect x="35.8621%" y="325" width="0.2299%" height="15" fill="rgb(233,93,10)"/><text x="36.1121%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="36.0920%" y="597" width="0.2299%" height="15" fill="rgb(225,113,19)"/><text x="36.3420%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="36.0920%" y="581" width="0.2299%" height="15" fill="rgb(241,2,18)"/><text x="36.3420%" y="591.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.23%)</title><rect x="36.0920%" y="565" width="0.2299%" height="15" fill="rgb(228,207,21)"/><text x="36.3420%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.23%)</title><rect x="36.0920%" y="549" width="0.2299%" height="15" fill="rgb(213,211,35)"/><text x="36.3420%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.23%)</title><rect x="36.0920%" y="533" width="0.2299%" height="15" fill="rgb(209,83,10)"/><text x="36.3420%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.23%)</title><rect x="36.0920%" y="517" width="0.2299%" height="15" fill="rgb(209,164,1)"/><text x="36.3420%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.23%)</title><rect x="36.0920%" y="501" width="0.2299%" height="15" fill="rgb(213,184,43)"/><text x="36.3420%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.23%)</title><rect x="36.0920%" y="485" width="0.2299%" height="15" fill="rgb(231,61,34)"/><text x="36.3420%" y="495.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (4 samples, 0.92%)</title><rect x="35.6322%" y="741" width="0.9195%" height="15" fill="rgb(235,75,3)"/><text x="35.8822%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (4 samples, 0.92%)</title><rect x="35.6322%" y="725" width="0.9195%" height="15" fill="rgb(220,106,47)"/><text x="35.8822%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (4 samples, 0.92%)</title><rect x="35.6322%" y="709" width="0.9195%" height="15" fill="rgb(210,196,33)"/><text x="35.8822%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (4 samples, 0.92%)</title><rect x="35.6322%" y="693" width="0.9195%" height="15" fill="rgb(229,154,42)"/><text x="35.8822%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (4 samples, 0.92%)</title><rect x="35.6322%" y="677" width="0.9195%" height="15" fill="rgb(228,114,26)"/><text x="35.8822%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (4 samples, 0.92%)</title><rect x="35.6322%" y="661" width="0.9195%" height="15" fill="rgb(208,144,1)"/><text x="35.8822%" y="671.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.46%)</title><rect x="36.0920%" y="645" width="0.4598%" height="15" fill="rgb(239,112,37)"/><text x="36.3420%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.46%)</title><rect x="36.0920%" y="629" width="0.4598%" height="15" fill="rgb(210,96,50)"/><text x="36.3420%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.46%)</title><rect x="36.0920%" y="613" width="0.4598%" height="15" fill="rgb(222,178,2)"/><text x="36.3420%" y="623.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::fmt::Display&gt;::fmt (1 samples, 0.23%)</title><rect x="36.3218%" y="597" width="0.2299%" height="15" fill="rgb(226,74,18)"/><text x="36.5718%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.23%)</title><rect x="36.3218%" y="581" width="0.2299%" height="15" fill="rgb(225,67,54)"/><text x="36.5718%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="36.3218%" y="565" width="0.2299%" height="15" fill="rgb(251,92,32)"/><text x="36.5718%" y="575.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (1 samples, 0.23%)</title><rect x="36.5517%" y="709" width="0.2299%" height="15" fill="rgb(228,149,22)"/><text x="36.8017%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (1 samples, 0.23%)</title><rect x="36.5517%" y="693" width="0.2299%" height="15" fill="rgb(243,54,13)"/><text x="36.8017%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (1 samples, 0.23%)</title><rect x="36.5517%" y="677" width="0.2299%" height="15" fill="rgb(243,180,28)"/><text x="36.8017%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_value (1 samples, 0.23%)</title><rect x="36.5517%" y="661" width="0.2299%" height="15" fill="rgb(208,167,24)"/><text x="36.8017%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="36.5517%" y="645" width="0.2299%" height="15" fill="rgb(245,73,45)"/><text x="36.8017%" y="655.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="36.7816%" y="693" width="0.2299%" height="15" fill="rgb(237,203,48)"/><text x="37.0316%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="36.7816%" y="677" width="0.2299%" height="15" fill="rgb(211,197,16)"/><text x="37.0316%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.23%)</title><rect x="36.7816%" y="661" width="0.2299%" height="15" fill="rgb(243,99,51)"/><text x="37.0316%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.23%)</title><rect x="36.7816%" y="645" width="0.2299%" height="15" fill="rgb(215,123,29)"/><text x="37.0316%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.23%)</title><rect x="36.7816%" y="629" width="0.2299%" height="15" fill="rgb(239,186,37)"/><text x="37.0316%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="36.7816%" y="613" width="0.2299%" height="15" fill="rgb(252,136,39)"/><text x="37.0316%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="36.7816%" y="597" width="0.2299%" height="15" fill="rgb(223,213,32)"/><text x="37.0316%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="36.7816%" y="581" width="0.2299%" height="15" fill="rgb(233,115,5)"/><text x="37.0316%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="36.7816%" y="565" width="0.2299%" height="15" fill="rgb(207,226,44)"/><text x="37.0316%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.23%)</title><rect x="36.7816%" y="549" width="0.2299%" height="15" fill="rgb(208,126,0)"/><text x="37.0316%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="36.7816%" y="533" width="0.2299%" height="15" fill="rgb(244,66,21)"/><text x="37.0316%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="36.7816%" y="517" width="0.2299%" height="15" fill="rgb(222,97,12)"/><text x="37.0316%" y="527.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="36.7816%" y="501" width="0.2299%" height="15" fill="rgb(219,213,19)"/><text x="37.0316%" y="511.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="36.7816%" y="485" width="0.2299%" height="15" fill="rgb(252,169,30)"/><text x="37.0316%" y="495.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (3 samples, 0.69%)</title><rect x="36.5517%" y="741" width="0.6897%" height="15" fill="rgb(206,32,51)"/><text x="36.8017%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.69%)</title><rect x="36.5517%" y="725" width="0.6897%" height="15" fill="rgb(250,172,42)"/><text x="36.8017%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (2 samples, 0.46%)</title><rect x="36.7816%" y="709" width="0.4598%" height="15" fill="rgb(209,34,43)"/><text x="37.0316%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (1 samples, 0.23%)</title><rect x="37.0115%" y="693" width="0.2299%" height="15" fill="rgb(223,11,35)"/><text x="37.2615%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::expected (1 samples, 0.23%)</title><rect x="37.0115%" y="677" width="0.2299%" height="15" fill="rgb(251,219,26)"/><text x="37.2615%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.46%)</title><rect x="37.2414%" y="677" width="0.4598%" height="15" fill="rgb(231,119,3)"/><text x="37.4914%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.69%)</title><rect x="37.2414%" y="709" width="0.6897%" height="15" fill="rgb(216,97,11)"/><text x="37.4914%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (3 samples, 0.69%)</title><rect x="37.2414%" y="693" width="0.6897%" height="15" fill="rgb(223,59,9)"/><text x="37.4914%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (1 samples, 0.23%)</title><rect x="37.7011%" y="677" width="0.2299%" height="15" fill="rgb(233,93,31)"/><text x="37.9511%" y="687.50"></text></g><g><title>sql_parser::parser::parse_statements (4 samples, 0.92%)</title><rect x="37.2414%" y="741" width="0.9195%" height="15" fill="rgb(239,81,33)"/><text x="37.4914%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (4 samples, 0.92%)</title><rect x="37.2414%" y="725" width="0.9195%" height="15" fill="rgb(213,120,34)"/><text x="37.4914%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_columns (1 samples, 0.23%)</title><rect x="37.9310%" y="709" width="0.2299%" height="15" fill="rgb(243,49,53)"/><text x="38.1810%" y="719.50"></text></g><g><title>lookup_fast.constprop.0 (1 samples, 0.23%)</title><rect x="38.1609%" y="389" width="0.2299%" height="15" fill="rgb(247,216,33)"/><text x="38.4109%" y="399.50"></text></g><g><title>kernfs_dop_revalidate (1 samples, 0.23%)</title><rect x="38.1609%" y="373" width="0.2299%" height="15" fill="rgb(226,26,14)"/><text x="38.4109%" y="383.50"></text></g><g><title>[unknown] (159 samples, 36.55%)</title><rect x="2.2989%" y="757" width="36.5517%" height="15" fill="rgb(215,49,53)"/><text x="2.5489%" y="767.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (3 samples, 0.69%)</title><rect x="38.1609%" y="741" width="0.6897%" height="15" fill="rgb(245,162,40)"/><text x="38.4109%" y="751.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.69%)</title><rect x="38.1609%" y="725" width="0.6897%" height="15" fill="rgb(229,68,17)"/><text x="38.4109%" y="735.50"></text></g><g><title>std::panicking::try (3 samples, 0.69%)</title><rect x="38.1609%" y="709" width="0.6897%" height="15" fill="rgb(213,182,10)"/><text x="38.4109%" y="719.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.69%)</title><rect x="38.1609%" y="693" width="0.6897%" height="15" fill="rgb(245,125,30)"/><text x="38.4109%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.69%)</title><rect x="38.1609%" y="677" width="0.6897%" height="15" fill="rgb(232,202,2)"/><text x="38.4109%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.69%)</title><rect x="38.1609%" y="661" width="0.6897%" height="15" fill="rgb(237,140,51)"/><text x="38.4109%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.69%)</title><rect x="38.1609%" y="645" width="0.6897%" height="15" fill="rgb(236,157,25)"/><text x="38.4109%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (3 samples, 0.69%)</title><rect x="38.1609%" y="629" width="0.6897%" height="15" fill="rgb(219,209,0)"/><text x="38.4109%" y="639.50"></text></g><g><title>hwloc::Topology::new (3 samples, 0.69%)</title><rect x="38.1609%" y="613" width="0.6897%" height="15" fill="rgb(240,116,54)"/><text x="38.4109%" y="623.50"></text></g><g><title>hwloc_topology_load (3 samples, 0.69%)</title><rect x="38.1609%" y="597" width="0.6897%" height="15" fill="rgb(216,10,36)"/><text x="38.4109%" y="607.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.69%)</title><rect x="38.1609%" y="581" width="0.6897%" height="15" fill="rgb(222,72,44)"/><text x="38.4109%" y="591.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.69%)</title><rect x="38.1609%" y="565" width="0.6897%" height="15" fill="rgb(232,159,9)"/><text x="38.4109%" y="575.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.69%)</title><rect x="38.1609%" y="549" width="0.6897%" height="15" fill="rgb(210,39,32)"/><text x="38.4109%" y="559.50"></text></g><g><title>__GI___openat (3 samples, 0.69%)</title><rect x="38.1609%" y="533" width="0.6897%" height="15" fill="rgb(216,194,45)"/><text x="38.4109%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.69%)</title><rect x="38.1609%" y="517" width="0.6897%" height="15" fill="rgb(218,18,35)"/><text x="38.4109%" y="527.50"></text></g><g><title>do_syscall_64 (3 samples, 0.69%)</title><rect x="38.1609%" y="501" width="0.6897%" height="15" fill="rgb(207,83,51)"/><text x="38.4109%" y="511.50"></text></g><g><title>__x64_sys_openat (3 samples, 0.69%)</title><rect x="38.1609%" y="485" width="0.6897%" height="15" fill="rgb(225,63,43)"/><text x="38.4109%" y="495.50"></text></g><g><title>do_sys_openat2 (3 samples, 0.69%)</title><rect x="38.1609%" y="469" width="0.6897%" height="15" fill="rgb(207,57,36)"/><text x="38.4109%" y="479.50"></text></g><g><title>do_filp_open (3 samples, 0.69%)</title><rect x="38.1609%" y="453" width="0.6897%" height="15" fill="rgb(216,99,33)"/><text x="38.4109%" y="463.50"></text></g><g><title>path_openat (3 samples, 0.69%)</title><rect x="38.1609%" y="437" width="0.6897%" height="15" fill="rgb(225,42,16)"/><text x="38.4109%" y="447.50"></text></g><g><title>link_path_walk (3 samples, 0.69%)</title><rect x="38.1609%" y="421" width="0.6897%" height="15" fill="rgb(220,201,45)"/><text x="38.4109%" y="431.50"></text></g><g><title>walk_component (3 samples, 0.69%)</title><rect x="38.1609%" y="405" width="0.6897%" height="15" fill="rgb(225,33,4)"/><text x="38.4109%" y="415.50"></text></g><g><title>step_into (2 samples, 0.46%)</title><rect x="38.3908%" y="389" width="0.4598%" height="15" fill="rgb(224,33,50)"/><text x="38.6408%" y="399.50"></text></g><g><title>touch_atime (1 samples, 0.23%)</title><rect x="38.6207%" y="373" width="0.2299%" height="15" fill="rgb(246,198,51)"/><text x="38.8707%" y="383.50"></text></g><g><title>atime_needs_update (1 samples, 0.23%)</title><rect x="38.6207%" y="357" width="0.2299%" height="15" fill="rgb(205,22,4)"/><text x="38.8707%" y="367.50"></text></g><g><title>current_time (1 samples, 0.23%)</title><rect x="38.6207%" y="341" width="0.2299%" height="15" fill="rgb(206,3,8)"/><text x="38.8707%" y="351.50"></text></g><g><title>ktime_get_coarse_real_ts64 (1 samples, 0.23%)</title><rect x="38.6207%" y="325" width="0.2299%" height="15" fill="rgb(251,23,15)"/><text x="38.8707%" y="335.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="38.8506%" y="725" width="0.2299%" height="15" fill="rgb(252,88,28)"/><text x="39.1006%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="38.8506%" y="709" width="0.2299%" height="15" fill="rgb(212,127,14)"/><text x="39.1006%" y="719.50"></text></g><g><title>[vmlinux] (1 samples, 0.23%)</title><rect x="38.8506%" y="693" width="0.2299%" height="15" fill="rgb(247,145,37)"/><text x="39.1006%" y="703.50"></text></g><g><title>do_exit (1 samples, 0.23%)</title><rect x="38.8506%" y="677" width="0.2299%" height="15" fill="rgb(209,117,53)"/><text x="39.1006%" y="687.50"></text></g><g><title>mm_release (1 samples, 0.23%)</title><rect x="38.8506%" y="661" width="0.2299%" height="15" fill="rgb(212,90,42)"/><text x="39.1006%" y="671.50"></text></g><g><title>do_futex (1 samples, 0.23%)</title><rect x="38.8506%" y="645" width="0.2299%" height="15" fill="rgb(218,164,37)"/><text x="39.1006%" y="655.50"></text></g><g><title>futex_wake (1 samples, 0.23%)</title><rect x="38.8506%" y="629" width="0.2299%" height="15" fill="rgb(246,65,34)"/><text x="39.1006%" y="639.50"></text></g><g><title>get_futex_key (1 samples, 0.23%)</title><rect x="38.8506%" y="613" width="0.2299%" height="15" fill="rgb(231,100,33)"/><text x="39.1006%" y="623.50"></text></g><g><title>internal_get_user_pages_fast (1 samples, 0.23%)</title><rect x="38.8506%" y="597" width="0.2299%" height="15" fill="rgb(228,126,14)"/><text x="39.1006%" y="607.50"></text></g><g><title>gup_pgd_range (1 samples, 0.23%)</title><rect x="38.8506%" y="581" width="0.2299%" height="15" fill="rgb(215,173,21)"/><text x="39.1006%" y="591.50"></text></g><g><title>__rust_alloc (1 samples, 0.23%)</title><rect x="39.0805%" y="597" width="0.2299%" height="15" fill="rgb(210,6,40)"/><text x="39.3305%" y="607.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (2 samples, 0.46%)</title><rect x="39.0805%" y="613" width="0.4598%" height="15" fill="rgb(212,48,18)"/><text x="39.3305%" y="623.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.23%)</title><rect x="39.3103%" y="597" width="0.2299%" height="15" fill="rgb(230,214,11)"/><text x="39.5603%" y="607.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.23%)</title><rect x="39.3103%" y="581" width="0.2299%" height="15" fill="rgb(254,105,39)"/><text x="39.5603%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.23%)</title><rect x="39.3103%" y="565" width="0.2299%" height="15" fill="rgb(245,158,5)"/><text x="39.5603%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 0.23%)</title><rect x="39.3103%" y="549" width="0.2299%" height="15" fill="rgb(249,208,11)"/><text x="39.5603%" y="559.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.23%)</title><rect x="39.3103%" y="533" width="0.2299%" height="15" fill="rgb(210,39,28)"/><text x="39.5603%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="39.5402%" y="613" width="0.2299%" height="15" fill="rgb(211,56,53)"/><text x="39.7902%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="39.5402%" y="597" width="0.2299%" height="15" fill="rgb(226,201,30)"/><text x="39.7902%" y="607.50"></text></g><g><title>decor_mem::stats::print_stats (1 samples, 0.23%)</title><rect x="39.5402%" y="581" width="0.2299%" height="15" fill="rgb(239,101,34)"/><text x="39.7902%" y="591.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.23%)</title><rect x="39.5402%" y="565" width="0.2299%" height="15" fill="rgb(226,209,5)"/><text x="39.7902%" y="575.50"></text></g><g><title>std::sys::unix::fs::File::write (1 samples, 0.23%)</title><rect x="39.5402%" y="549" width="0.2299%" height="15" fill="rgb(250,105,47)"/><text x="39.7902%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.23%)</title><rect x="39.5402%" y="533" width="0.2299%" height="15" fill="rgb(230,72,3)"/><text x="39.7902%" y="543.50"></text></g><g><title>__libc_write (1 samples, 0.23%)</title><rect x="39.5402%" y="517" width="0.2299%" height="15" fill="rgb(232,218,39)"/><text x="39.7902%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="39.5402%" y="501" width="0.2299%" height="15" fill="rgb(248,166,6)"/><text x="39.7902%" y="511.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="39.5402%" y="485" width="0.2299%" height="15" fill="rgb(247,89,20)"/><text x="39.7902%" y="495.50"></text></g><g><title>ksys_write (1 samples, 0.23%)</title><rect x="39.5402%" y="469" width="0.2299%" height="15" fill="rgb(248,130,54)"/><text x="39.7902%" y="479.50"></text></g><g><title>vfs_write (1 samples, 0.23%)</title><rect x="39.5402%" y="453" width="0.2299%" height="15" fill="rgb(234,196,4)"/><text x="39.7902%" y="463.50"></text></g><g><title>new_sync_write (1 samples, 0.23%)</title><rect x="39.5402%" y="437" width="0.2299%" height="15" fill="rgb(250,143,31)"/><text x="39.7902%" y="447.50"></text></g><g><title>[[ext4]] (1 samples, 0.23%)</title><rect x="39.5402%" y="421" width="0.2299%" height="15" fill="rgb(211,110,34)"/><text x="39.7902%" y="431.50"></text></g><g><title>file_update_time (1 samples, 0.23%)</title><rect x="39.5402%" y="405" width="0.2299%" height="15" fill="rgb(215,124,48)"/><text x="39.7902%" y="415.50"></text></g><g><title>current_time (1 samples, 0.23%)</title><rect x="39.5402%" y="389" width="0.2299%" height="15" fill="rgb(216,46,13)"/><text x="39.7902%" y="399.50"></text></g><g><title>ktime_get_coarse_real_ts64 (1 samples, 0.23%)</title><rect x="39.5402%" y="373" width="0.2299%" height="15" fill="rgb(205,184,25)"/><text x="39.7902%" y="383.50"></text></g><g><title>kfree (1 samples, 0.23%)</title><rect x="39.7701%" y="85" width="0.2299%" height="15" fill="rgb(228,1,10)"/><text x="40.0201%" y="95.50"></text></g><g><title>slab_free_freelist_hook (1 samples, 0.23%)</title><rect x="39.7701%" y="69" width="0.2299%" height="15" fill="rgb(213,116,27)"/><text x="40.0201%" y="79.50"></text></g><g><title>__kfree_skb (2 samples, 0.46%)</title><rect x="39.7701%" y="101" width="0.4598%" height="15" fill="rgb(241,95,50)"/><text x="40.0201%" y="111.50"></text></g><g><title>skb_release_data (1 samples, 0.23%)</title><rect x="40.0000%" y="85" width="0.2299%" height="15" fill="rgb(238,48,32)"/><text x="40.2500%" y="95.50"></text></g><g><title>__tcp_transmit_skb (3 samples, 0.69%)</title><rect x="39.7701%" y="405" width="0.6897%" height="15" fill="rgb(235,113,49)"/><text x="40.0201%" y="415.50"></text></g><g><title>__ip_queue_xmit (3 samples, 0.69%)</title><rect x="39.7701%" y="389" width="0.6897%" height="15" fill="rgb(205,127,43)"/><text x="40.0201%" y="399.50"></text></g><g><title>ip_output (3 samples, 0.69%)</title><rect x="39.7701%" y="373" width="0.6897%" height="15" fill="rgb(250,162,2)"/><text x="40.0201%" y="383.50"></text></g><g><title>ip_finish_output2 (3 samples, 0.69%)</title><rect x="39.7701%" y="357" width="0.6897%" height="15" fill="rgb(220,13,41)"/><text x="40.0201%" y="367.50"></text></g><g><title>__local_bh_enable_ip (3 samples, 0.69%)</title><rect x="39.7701%" y="341" width="0.6897%" height="15" fill="rgb(249,221,25)"/><text x="40.0201%" y="351.50"></text></g><g><title>do_softirq (3 samples, 0.69%)</title><rect x="39.7701%" y="325" width="0.6897%" height="15" fill="rgb(215,208,19)"/><text x="40.0201%" y="335.50"></text></g><g><title>do_softirq_own_stack (3 samples, 0.69%)</title><rect x="39.7701%" y="309" width="0.6897%" height="15" fill="rgb(236,175,2)"/><text x="40.0201%" y="319.50"></text></g><g><title>__do_softirq (3 samples, 0.69%)</title><rect x="39.7701%" y="293" width="0.6897%" height="15" fill="rgb(241,52,2)"/><text x="40.0201%" y="303.50"></text></g><g><title>net_rx_action (3 samples, 0.69%)</title><rect x="39.7701%" y="277" width="0.6897%" height="15" fill="rgb(248,140,14)"/><text x="40.0201%" y="287.50"></text></g><g><title>process_backlog (3 samples, 0.69%)</title><rect x="39.7701%" y="261" width="0.6897%" height="15" fill="rgb(253,22,42)"/><text x="40.0201%" y="271.50"></text></g><g><title>__netif_receive_skb_one_core (3 samples, 0.69%)</title><rect x="39.7701%" y="245" width="0.6897%" height="15" fill="rgb(234,61,47)"/><text x="40.0201%" y="255.50"></text></g><g><title>ip_rcv (3 samples, 0.69%)</title><rect x="39.7701%" y="229" width="0.6897%" height="15" fill="rgb(208,226,15)"/><text x="40.0201%" y="239.50"></text></g><g><title>ip_local_deliver (3 samples, 0.69%)</title><rect x="39.7701%" y="213" width="0.6897%" height="15" fill="rgb(217,221,4)"/><text x="40.0201%" y="223.50"></text></g><g><title>ip_local_deliver_finish (3 samples, 0.69%)</title><rect x="39.7701%" y="197" width="0.6897%" height="15" fill="rgb(212,174,34)"/><text x="40.0201%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (3 samples, 0.69%)</title><rect x="39.7701%" y="181" width="0.6897%" height="15" fill="rgb(253,83,4)"/><text x="40.0201%" y="191.50"></text></g><g><title>tcp_v4_rcv (3 samples, 0.69%)</title><rect x="39.7701%" y="165" width="0.6897%" height="15" fill="rgb(250,195,49)"/><text x="40.0201%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (3 samples, 0.69%)</title><rect x="39.7701%" y="149" width="0.6897%" height="15" fill="rgb(241,192,25)"/><text x="40.0201%" y="159.50"></text></g><g><title>tcp_rcv_established (3 samples, 0.69%)</title><rect x="39.7701%" y="133" width="0.6897%" height="15" fill="rgb(208,124,10)"/><text x="40.0201%" y="143.50"></text></g><g><title>tcp_ack (3 samples, 0.69%)</title><rect x="39.7701%" y="117" width="0.6897%" height="15" fill="rgb(222,33,0)"/><text x="40.0201%" y="127.50"></text></g><g><title>tcp_ack_update_rtt (1 samples, 0.23%)</title><rect x="40.2299%" y="101" width="0.2299%" height="15" fill="rgb(234,209,28)"/><text x="40.4799%" y="111.50"></text></g><g><title>psi_task_change (1 samples, 0.23%)</title><rect x="40.4598%" y="325" width="0.2299%" height="15" fill="rgb(224,11,23)"/><text x="40.7098%" y="335.50"></text></g><g><title>psi_group_change (1 samples, 0.23%)</title><rect x="40.4598%" y="309" width="0.2299%" height="15" fill="rgb(232,99,1)"/><text x="40.7098%" y="319.50"></text></g><g><title>record_times (1 samples, 0.23%)</title><rect x="40.4598%" y="293" width="0.2299%" height="15" fill="rgb(237,95,45)"/><text x="40.7098%" y="303.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.23%)</title><rect x="40.4598%" y="277" width="0.2299%" height="15" fill="rgb(208,109,11)"/><text x="40.7098%" y="287.50"></text></g><g><title>sched_clock (1 samples, 0.23%)</title><rect x="40.4598%" y="261" width="0.2299%" height="15" fill="rgb(216,190,48)"/><text x="40.7098%" y="271.50"></text></g><g><title>native_sched_clock (1 samples, 0.23%)</title><rect x="40.4598%" y="245" width="0.2299%" height="15" fill="rgb(251,171,36)"/><text x="40.7098%" y="255.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (5 samples, 1.15%)</title><rect x="39.7701%" y="613" width="1.1494%" height="15" fill="rgb(230,62,22)"/><text x="40.0201%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 1.15%)</title><rect x="39.7701%" y="597" width="1.1494%" height="15" fill="rgb(225,114,35)"/><text x="40.0201%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 1.15%)</title><rect x="39.7701%" y="581" width="1.1494%" height="15" fill="rgb(215,118,42)"/><text x="40.0201%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (5 samples, 1.15%)</title><rect x="39.7701%" y="565" width="1.1494%" height="15" fill="rgb(243,119,21)"/><text x="40.0201%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (5 samples, 1.15%)</title><rect x="39.7701%" y="549" width="1.1494%" height="15" fill="rgb(252,177,53)"/><text x="40.0201%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (5 samples, 1.15%)</title><rect x="39.7701%" y="533" width="1.1494%" height="15" fill="rgb(237,209,29)"/><text x="40.0201%" y="543.50"></text></g><g><title>__libc_recv (5 samples, 1.15%)</title><rect x="39.7701%" y="517" width="1.1494%" height="15" fill="rgb(212,65,23)"/><text x="40.0201%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 1.15%)</title><rect x="39.7701%" y="501" width="1.1494%" height="15" fill="rgb(230,222,46)"/><text x="40.0201%" y="511.50"></text></g><g><title>do_syscall_64 (5 samples, 1.15%)</title><rect x="39.7701%" y="485" width="1.1494%" height="15" fill="rgb(215,135,32)"/><text x="40.0201%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (5 samples, 1.15%)</title><rect x="39.7701%" y="469" width="1.1494%" height="15" fill="rgb(246,101,22)"/><text x="40.0201%" y="479.50"></text></g><g><title>__sys_recvfrom (5 samples, 1.15%)</title><rect x="39.7701%" y="453" width="1.1494%" height="15" fill="rgb(206,107,13)"/><text x="40.0201%" y="463.50"></text></g><g><title>inet_recvmsg (5 samples, 1.15%)</title><rect x="39.7701%" y="437" width="1.1494%" height="15" fill="rgb(250,100,44)"/><text x="40.0201%" y="447.50"></text></g><g><title>tcp_recvmsg (5 samples, 1.15%)</title><rect x="39.7701%" y="421" width="1.1494%" height="15" fill="rgb(231,147,38)"/><text x="40.0201%" y="431.50"></text></g><g><title>sk_wait_data (2 samples, 0.46%)</title><rect x="40.4598%" y="405" width="0.4598%" height="15" fill="rgb(229,8,40)"/><text x="40.7098%" y="415.50"></text></g><g><title>wait_woken (2 samples, 0.46%)</title><rect x="40.4598%" y="389" width="0.4598%" height="15" fill="rgb(221,135,30)"/><text x="40.7098%" y="399.50"></text></g><g><title>schedule_timeout (2 samples, 0.46%)</title><rect x="40.4598%" y="373" width="0.4598%" height="15" fill="rgb(249,193,18)"/><text x="40.7098%" y="383.50"></text></g><g><title>schedule (2 samples, 0.46%)</title><rect x="40.4598%" y="357" width="0.4598%" height="15" fill="rgb(209,133,39)"/><text x="40.7098%" y="367.50"></text></g><g><title>__schedule (2 samples, 0.46%)</title><rect x="40.4598%" y="341" width="0.4598%" height="15" fill="rgb(232,100,14)"/><text x="40.7098%" y="351.50"></text></g><g><title>update_rq_clock (1 samples, 0.23%)</title><rect x="40.6897%" y="325" width="0.2299%" height="15" fill="rgb(224,185,1)"/><text x="40.9397%" y="335.50"></text></g><g><title>sk_filter_trim_cap (1 samples, 0.23%)</title><rect x="41.6092%" y="149" width="0.2299%" height="15" fill="rgb(223,139,8)"/><text x="41.8592%" y="159.50"></text></g><g><title>__cgroup_bpf_run_filter_skb (1 samples, 0.23%)</title><rect x="41.6092%" y="133" width="0.2299%" height="15" fill="rgb(232,213,38)"/><text x="41.8592%" y="143.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.23%)</title><rect x="41.6092%" y="117" width="0.2299%" height="15" fill="rgb(207,94,22)"/><text x="41.8592%" y="127.50"></text></g><g><title>preempt_count_add (1 samples, 0.23%)</title><rect x="41.8391%" y="53" width="0.2299%" height="15" fill="rgb(219,183,54)"/><text x="42.0891%" y="63.50"></text></g><g><title>__netif_receive_skb_one_core (3 samples, 0.69%)</title><rect x="41.6092%" y="245" width="0.6897%" height="15" fill="rgb(216,185,54)"/><text x="41.8592%" y="255.50"></text></g><g><title>ip_rcv (3 samples, 0.69%)</title><rect x="41.6092%" y="229" width="0.6897%" height="15" fill="rgb(254,217,39)"/><text x="41.8592%" y="239.50"></text></g><g><title>ip_local_deliver (3 samples, 0.69%)</title><rect x="41.6092%" y="213" width="0.6897%" height="15" fill="rgb(240,178,23)"/><text x="41.8592%" y="223.50"></text></g><g><title>ip_local_deliver_finish (3 samples, 0.69%)</title><rect x="41.6092%" y="197" width="0.6897%" height="15" fill="rgb(218,11,47)"/><text x="41.8592%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (3 samples, 0.69%)</title><rect x="41.6092%" y="181" width="0.6897%" height="15" fill="rgb(218,51,51)"/><text x="41.8592%" y="191.50"></text></g><g><title>tcp_v4_rcv (3 samples, 0.69%)</title><rect x="41.6092%" y="165" width="0.6897%" height="15" fill="rgb(238,126,27)"/><text x="41.8592%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (2 samples, 0.46%)</title><rect x="41.8391%" y="149" width="0.4598%" height="15" fill="rgb(249,202,22)"/><text x="42.0891%" y="159.50"></text></g><g><title>tcp_rcv_established (2 samples, 0.46%)</title><rect x="41.8391%" y="133" width="0.4598%" height="15" fill="rgb(254,195,49)"/><text x="42.0891%" y="143.50"></text></g><g><title>sock_def_readable (2 samples, 0.46%)</title><rect x="41.8391%" y="117" width="0.4598%" height="15" fill="rgb(208,123,14)"/><text x="42.0891%" y="127.50"></text></g><g><title>__wake_up_common_lock (2 samples, 0.46%)</title><rect x="41.8391%" y="101" width="0.4598%" height="15" fill="rgb(224,200,8)"/><text x="42.0891%" y="111.50"></text></g><g><title>__wake_up_common (2 samples, 0.46%)</title><rect x="41.8391%" y="85" width="0.4598%" height="15" fill="rgb(217,61,36)"/><text x="42.0891%" y="95.50"></text></g><g><title>try_to_wake_up (2 samples, 0.46%)</title><rect x="41.8391%" y="69" width="0.4598%" height="15" fill="rgb(206,35,45)"/><text x="42.0891%" y="79.50"></text></g><g><title>ttwu_do_wakeup (1 samples, 0.23%)</title><rect x="42.0690%" y="53" width="0.2299%" height="15" fill="rgb(217,65,33)"/><text x="42.3190%" y="63.50"></text></g><g><title>check_preempt_curr (1 samples, 0.23%)</title><rect x="42.0690%" y="37" width="0.2299%" height="15" fill="rgb(222,158,48)"/><text x="42.3190%" y="47.50"></text></g><g><title>__tcp_push_pending_frames (5 samples, 1.15%)</title><rect x="41.3793%" y="437" width="1.1494%" height="15" fill="rgb(254,2,54)"/><text x="41.6293%" y="447.50"></text></g><g><title>tcp_write_xmit (5 samples, 1.15%)</title><rect x="41.3793%" y="421" width="1.1494%" height="15" fill="rgb(250,143,38)"/><text x="41.6293%" y="431.50"></text></g><g><title>__tcp_transmit_skb (5 samples, 1.15%)</title><rect x="41.3793%" y="405" width="1.1494%" height="15" fill="rgb(248,25,0)"/><text x="41.6293%" y="415.50"></text></g><g><title>__ip_queue_xmit (5 samples, 1.15%)</title><rect x="41.3793%" y="389" width="1.1494%" height="15" fill="rgb(206,152,27)"/><text x="41.6293%" y="399.50"></text></g><g><title>ip_output (4 samples, 0.92%)</title><rect x="41.6092%" y="373" width="0.9195%" height="15" fill="rgb(240,77,30)"/><text x="41.8592%" y="383.50"></text></g><g><title>ip_finish_output2 (4 samples, 0.92%)</title><rect x="41.6092%" y="357" width="0.9195%" height="15" fill="rgb(231,5,3)"/><text x="41.8592%" y="367.50"></text></g><g><title>__local_bh_enable_ip (4 samples, 0.92%)</title><rect x="41.6092%" y="341" width="0.9195%" height="15" fill="rgb(207,226,32)"/><text x="41.8592%" y="351.50"></text></g><g><title>do_softirq (4 samples, 0.92%)</title><rect x="41.6092%" y="325" width="0.9195%" height="15" fill="rgb(222,207,47)"/><text x="41.8592%" y="335.50"></text></g><g><title>do_softirq_own_stack (4 samples, 0.92%)</title><rect x="41.6092%" y="309" width="0.9195%" height="15" fill="rgb(229,115,45)"/><text x="41.8592%" y="319.50"></text></g><g><title>__do_softirq (4 samples, 0.92%)</title><rect x="41.6092%" y="293" width="0.9195%" height="15" fill="rgb(224,191,6)"/><text x="41.8592%" y="303.50"></text></g><g><title>net_rx_action (4 samples, 0.92%)</title><rect x="41.6092%" y="277" width="0.9195%" height="15" fill="rgb(230,227,24)"/><text x="41.8592%" y="287.50"></text></g><g><title>process_backlog (4 samples, 0.92%)</title><rect x="41.6092%" y="261" width="0.9195%" height="15" fill="rgb(228,80,19)"/><text x="41.8592%" y="271.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.23%)</title><rect x="42.2989%" y="245" width="0.2299%" height="15" fill="rgb(247,229,0)"/><text x="42.5489%" y="255.50"></text></g><g><title>__GI___clone (17 samples, 3.91%)</title><rect x="38.8506%" y="757" width="3.9080%" height="15" fill="rgb(237,194,15)"/><text x="39.1006%" y="767.50">__GI..</text></g><g><title>start_thread (17 samples, 3.91%)</title><rect x="38.8506%" y="741" width="3.9080%" height="15" fill="rgb(219,203,20)"/><text x="39.1006%" y="751.50">star..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (16 samples, 3.68%)</title><rect x="39.0805%" y="725" width="3.6782%" height="15" fill="rgb(234,128,8)"/><text x="39.3305%" y="735.50">std:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (16 samples, 3.68%)</title><rect x="39.0805%" y="709" width="3.6782%" height="15" fill="rgb(248,202,8)"/><text x="39.3305%" y="719.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (16 samples, 3.68%)</title><rect x="39.0805%" y="693" width="3.6782%" height="15" fill="rgb(206,104,37)"/><text x="39.3305%" y="703.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (16 samples, 3.68%)</title><rect x="39.0805%" y="677" width="3.6782%" height="15" fill="rgb(223,8,27)"/><text x="39.3305%" y="687.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16 samples, 3.68%)</title><rect x="39.0805%" y="661" width="3.6782%" height="15" fill="rgb(216,217,28)"/><text x="39.3305%" y="671.50">std:..</text></g><g><title>decor_mem::Shim::run_on_tcp (16 samples, 3.68%)</title><rect x="39.0805%" y="645" width="3.6782%" height="15" fill="rgb(249,199,1)"/><text x="39.3305%" y="655.50">deco..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (16 samples, 3.68%)</title><rect x="39.0805%" y="629" width="3.6782%" height="15" fill="rgb(240,85,17)"/><text x="39.3305%" y="639.50">msql..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (8 samples, 1.84%)</title><rect x="40.9195%" y="613" width="1.8391%" height="15" fill="rgb(206,108,45)"/><text x="41.1695%" y="623.50">s..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (8 samples, 1.84%)</title><rect x="40.9195%" y="597" width="1.8391%" height="15" fill="rgb(245,210,41)"/><text x="41.1695%" y="607.50">&lt;..</text></g><g><title>std::sys_common::net::TcpStream::write (8 samples, 1.84%)</title><rect x="40.9195%" y="581" width="1.8391%" height="15" fill="rgb(206,13,37)"/><text x="41.1695%" y="591.50">s..</text></g><g><title>__libc_send (8 samples, 1.84%)</title><rect x="40.9195%" y="565" width="1.8391%" height="15" fill="rgb(250,61,18)"/><text x="41.1695%" y="575.50">_..</text></g><g><title>entry_SYSCALL_64 (8 samples, 1.84%)</title><rect x="40.9195%" y="549" width="1.8391%" height="15" fill="rgb(235,172,48)"/><text x="41.1695%" y="559.50">e..</text></g><g><title>do_syscall_64 (8 samples, 1.84%)</title><rect x="40.9195%" y="533" width="1.8391%" height="15" fill="rgb(249,201,17)"/><text x="41.1695%" y="543.50">d..</text></g><g><title>__x64_sys_sendto (8 samples, 1.84%)</title><rect x="40.9195%" y="517" width="1.8391%" height="15" fill="rgb(219,208,6)"/><text x="41.1695%" y="527.50">_..</text></g><g><title>__sys_sendto (8 samples, 1.84%)</title><rect x="40.9195%" y="501" width="1.8391%" height="15" fill="rgb(248,31,23)"/><text x="41.1695%" y="511.50">_..</text></g><g><title>sock_sendmsg (7 samples, 1.61%)</title><rect x="41.1494%" y="485" width="1.6092%" height="15" fill="rgb(245,15,42)"/><text x="41.3994%" y="495.50"></text></g><g><title>tcp_sendmsg (7 samples, 1.61%)</title><rect x="41.1494%" y="469" width="1.6092%" height="15" fill="rgb(222,217,39)"/><text x="41.3994%" y="479.50"></text></g><g><title>tcp_sendmsg_locked (7 samples, 1.61%)</title><rect x="41.1494%" y="453" width="1.6092%" height="15" fill="rgb(210,219,27)"/><text x="41.3994%" y="463.50"></text></g><g><title>tcp_send_mss (1 samples, 0.23%)</title><rect x="42.5287%" y="437" width="0.2299%" height="15" fill="rgb(252,166,36)"/><text x="42.7787%" y="447.50"></text></g><g><title>tcp_current_mss (1 samples, 0.23%)</title><rect x="42.5287%" y="421" width="0.2299%" height="15" fill="rgb(245,132,34)"/><text x="42.7787%" y="431.50"></text></g><g><title>__GI_exit (1 samples, 0.23%)</title><rect x="42.7586%" y="725" width="0.2299%" height="15" fill="rgb(236,54,3)"/><text x="43.0086%" y="735.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.23%)</title><rect x="42.7586%" y="709" width="0.2299%" height="15" fill="rgb(241,173,43)"/><text x="43.0086%" y="719.50"></text></g><g><title>_IO_cleanup (1 samples, 0.23%)</title><rect x="42.7586%" y="693" width="0.2299%" height="15" fill="rgb(215,190,9)"/><text x="43.0086%" y="703.50"></text></g><g><title>_IO_flush_all_lockp (1 samples, 0.23%)</title><rect x="42.7586%" y="677" width="0.2299%" height="15" fill="rgb(242,101,16)"/><text x="43.0086%" y="687.50"></text></g><g><title>__pthread_cleanup_pop_restore (1 samples, 0.23%)</title><rect x="42.7586%" y="661" width="0.2299%" height="15" fill="rgb(223,190,21)"/><text x="43.0086%" y="671.50"></text></g><g><title>hwloc::Topology::new (236 samples, 54.25%)</title><rect x="42.9885%" y="581" width="54.2529%" height="15" fill="rgb(215,228,25)"/><text x="43.2385%" y="591.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (236 samples, 54.25%)</title><rect x="42.9885%" y="565" width="54.2529%" height="15" fill="rgb(225,36,22)"/><text x="43.2385%" y="575.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (236 samples, 54.25%)</title><rect x="42.9885%" y="549" width="54.2529%" height="15" fill="rgb(251,106,46)"/><text x="43.2385%" y="559.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (236 samples, 54.25%)</title><rect x="42.9885%" y="533" width="54.2529%" height="15" fill="rgb(208,90,1)"/><text x="43.2385%" y="543.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (236 samples, 54.25%)</title><rect x="42.9885%" y="517" width="54.2529%" height="15" fill="rgb(243,10,4)"/><text x="43.2385%" y="527.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (235 samples, 54.02%)</title><rect x="43.2184%" y="501" width="54.0230%" height="15" fill="rgb(212,137,27)"/><text x="43.4684%" y="511.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (235 samples, 54.02%)</title><rect x="43.2184%" y="485" width="54.0230%" height="15" fill="rgb(231,220,49)"/><text x="43.4684%" y="495.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (235 samples, 54.02%)</title><rect x="43.2184%" y="469" width="54.0230%" height="15" fill="rgb(237,96,20)"/><text x="43.4684%" y="479.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (235 samples, 54.02%)</title><rect x="43.2184%" y="453" width="54.0230%" height="15" fill="rgb(239,229,30)"/><text x="43.4684%" y="463.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 54.02%)</title><rect x="43.2184%" y="437" width="54.0230%" height="15" fill="rgb(219,65,33)"/><text x="43.4684%" y="447.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (235 samples, 54.02%)</title><rect x="43.2184%" y="421" width="54.0230%" height="15" fill="rgb(243,134,7)"/><text x="43.4684%" y="431.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 54.02%)</title><rect x="43.2184%" y="405" width="54.0230%" height="15" fill="rgb(216,177,54)"/><text x="43.4684%" y="415.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (235 samples, 54.02%)</title><rect x="43.2184%" y="389" width="54.0230%" height="15" fill="rgb(211,160,20)"/><text x="43.4684%" y="399.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (235 samples, 54.02%)</title><rect x="43.2184%" y="373" width="54.0230%" height="15" fill="rgb(239,85,39)"/><text x="43.4684%" y="383.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (234 samples, 53.79%)</title><rect x="43.4483%" y="357" width="53.7931%" height="15" fill="rgb(232,125,22)"/><text x="43.6983%" y="367.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (234 samples, 53.79%)</title><rect x="43.4483%" y="341" width="53.7931%" height="15" fill="rgb(244,57,34)"/><text x="43.6983%" y="351.50">preempt_schedule_common</text></g><g><title>__schedule (234 samples, 53.79%)</title><rect x="43.4483%" y="325" width="53.7931%" height="15" fill="rgb(214,203,32)"/><text x="43.6983%" y="335.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 53.79%)</title><rect x="43.4483%" y="309" width="53.7931%" height="15" fill="rgb(207,58,43)"/><text x="43.6983%" y="319.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (233 samples, 53.56%)</title><rect x="43.6782%" y="293" width="53.5632%" height="15" fill="rgb(215,193,15)"/><text x="43.9282%" y="303.50">__perf_event_task_sched_in</text></g><g><title>__intel_pmu_enable_all.constprop.0 (233 samples, 53.56%)</title><rect x="43.6782%" y="277" width="53.5632%" height="15" fill="rgb(232,15,44)"/><text x="43.9282%" y="287.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (233 samples, 53.56%)</title><rect x="43.6782%" y="261" width="53.5632%" height="15" fill="rgb(212,3,48)"/><text x="43.9282%" y="271.50">native_write_msr</text></g><g><title>__libc_start_main (238 samples, 54.71%)</title><rect x="42.7586%" y="741" width="54.7126%" height="15" fill="rgb(218,128,7)"/><text x="43.0086%" y="751.50">__libc_start_main</text></g><g><title>main (237 samples, 54.48%)</title><rect x="42.9885%" y="725" width="54.4828%" height="15" fill="rgb(226,216,39)"/><text x="43.2385%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (237 samples, 54.48%)</title><rect x="42.9885%" y="709" width="54.4828%" height="15" fill="rgb(243,47,51)"/><text x="43.2385%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (237 samples, 54.48%)</title><rect x="42.9885%" y="693" width="54.4828%" height="15" fill="rgb(241,183,40)"/><text x="43.2385%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (237 samples, 54.48%)</title><rect x="42.9885%" y="677" width="54.4828%" height="15" fill="rgb(231,217,32)"/><text x="43.2385%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (237 samples, 54.48%)</title><rect x="42.9885%" y="661" width="54.4828%" height="15" fill="rgb(229,61,38)"/><text x="43.2385%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (237 samples, 54.48%)</title><rect x="42.9885%" y="645" width="54.4828%" height="15" fill="rgb(225,210,5)"/><text x="43.2385%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (237 samples, 54.48%)</title><rect x="42.9885%" y="629" width="54.4828%" height="15" fill="rgb(231,79,45)"/><text x="43.2385%" y="639.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (237 samples, 54.48%)</title><rect x="42.9885%" y="613" width="54.4828%" height="15" fill="rgb(224,100,7)"/><text x="43.2385%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters_microbenchmarks::main (237 samples, 54.48%)</title><rect x="42.9885%" y="597" width="54.4828%" height="15" fill="rgb(241,198,18)"/><text x="43.2385%" y="607.50">lobsters_microbenchmarks::main</text></g><g><title>std::net::tcp::TcpListener::bind (1 samples, 0.23%)</title><rect x="97.2414%" y="581" width="0.2299%" height="15" fill="rgb(252,97,53)"/><text x="97.4914%" y="591.50"></text></g><g><title>std::sys_common::net::TcpListener::bind (1 samples, 0.23%)</title><rect x="97.2414%" y="565" width="0.2299%" height="15" fill="rgb(220,88,7)"/><text x="97.4914%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::new (1 samples, 0.23%)</title><rect x="97.2414%" y="549" width="0.2299%" height="15" fill="rgb(213,176,14)"/><text x="97.4914%" y="559.50"></text></g><g><title>__GI___socket (1 samples, 0.23%)</title><rect x="97.2414%" y="533" width="0.2299%" height="15" fill="rgb(246,73,7)"/><text x="97.4914%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="97.2414%" y="517" width="0.2299%" height="15" fill="rgb(245,64,36)"/><text x="97.4914%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="97.2414%" y="501" width="0.2299%" height="15" fill="rgb(245,80,10)"/><text x="97.4914%" y="511.50"></text></g><g><title>__x64_sys_socket (1 samples, 0.23%)</title><rect x="97.2414%" y="485" width="0.2299%" height="15" fill="rgb(232,107,50)"/><text x="97.4914%" y="495.50"></text></g><g><title>__sys_socket (1 samples, 0.23%)</title><rect x="97.2414%" y="469" width="0.2299%" height="15" fill="rgb(253,3,0)"/><text x="97.4914%" y="479.50"></text></g><g><title>__sock_create (1 samples, 0.23%)</title><rect x="97.2414%" y="453" width="0.2299%" height="15" fill="rgb(212,99,53)"/><text x="97.4914%" y="463.50"></text></g><g><title>_start (239 samples, 54.94%)</title><rect x="42.7586%" y="757" width="54.9425%" height="15" fill="rgb(249,111,54)"/><text x="43.0086%" y="767.50">_start</text></g><g><title>_dl_start (1 samples, 0.23%)</title><rect x="97.4713%" y="741" width="0.2299%" height="15" fill="rgb(249,55,30)"/><text x="97.7213%" y="751.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.23%)</title><rect x="97.4713%" y="725" width="0.2299%" height="15" fill="rgb(237,47,42)"/><text x="97.7213%" y="735.50"></text></g><g><title>dl_main (1 samples, 0.23%)</title><rect x="97.4713%" y="709" width="0.2299%" height="15" fill="rgb(211,20,18)"/><text x="97.7213%" y="719.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.23%)</title><rect x="97.4713%" y="693" width="0.2299%" height="15" fill="rgb(231,203,46)"/><text x="97.7213%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.23%)</title><rect x="97.4713%" y="677" width="0.2299%" height="15" fill="rgb(237,142,3)"/><text x="97.7213%" y="687.50"></text></g><g><title>openaux (1 samples, 0.23%)</title><rect x="97.4713%" y="661" width="0.2299%" height="15" fill="rgb(241,107,1)"/><text x="97.7213%" y="671.50"></text></g><g><title>_dl_map_object (1 samples, 0.23%)</title><rect x="97.4713%" y="645" width="0.2299%" height="15" fill="rgb(229,83,13)"/><text x="97.7213%" y="655.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.23%)</title><rect x="97.4713%" y="629" width="0.2299%" height="15" fill="rgb(241,91,40)"/><text x="97.7213%" y="639.50"></text></g><g><title>_dl_new_object (1 samples, 0.23%)</title><rect x="97.4713%" y="613" width="0.2299%" height="15" fill="rgb(225,3,45)"/><text x="97.7213%" y="623.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="97.4713%" y="597" width="0.2299%" height="15" fill="rgb(244,223,14)"/><text x="97.7213%" y="607.50"></text></g><g><title>do_page_fault (1 samples, 0.23%)</title><rect x="97.4713%" y="581" width="0.2299%" height="15" fill="rgb(224,124,37)"/><text x="97.7213%" y="591.50"></text></g><g><title>[vmlinux] (1 samples, 0.23%)</title><rect x="97.7011%" y="725" width="0.2299%" height="15" fill="rgb(251,171,30)"/><text x="97.9511%" y="735.50"></text></g><g><title>do_group_exit (1 samples, 0.23%)</title><rect x="97.7011%" y="709" width="0.2299%" height="15" fill="rgb(236,46,54)"/><text x="97.9511%" y="719.50"></text></g><g><title>do_exit (1 samples, 0.23%)</title><rect x="97.7011%" y="693" width="0.2299%" height="15" fill="rgb(245,213,5)"/><text x="97.9511%" y="703.50"></text></g><g><title>mmput (1 samples, 0.23%)</title><rect x="97.7011%" y="677" width="0.2299%" height="15" fill="rgb(230,144,27)"/><text x="97.9511%" y="687.50"></text></g><g><title>exit_mmap (1 samples, 0.23%)</title><rect x="97.7011%" y="661" width="0.2299%" height="15" fill="rgb(220,86,6)"/><text x="97.9511%" y="671.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.23%)</title><rect x="97.7011%" y="645" width="0.2299%" height="15" fill="rgb(240,20,13)"/><text x="97.9511%" y="655.50"></text></g><g><title>release_pages (1 samples, 0.23%)</title><rect x="97.7011%" y="629" width="0.2299%" height="15" fill="rgb(217,89,34)"/><text x="97.9511%" y="639.50"></text></g><g><title>free_unref_page_list (1 samples, 0.23%)</title><rect x="97.7011%" y="613" width="0.2299%" height="15" fill="rgb(229,13,5)"/><text x="97.9511%" y="623.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.23%)</title><rect x="97.7011%" y="597" width="0.2299%" height="15" fill="rgb(244,67,35)"/><text x="97.9511%" y="607.50"></text></g><g><title>__free_one_page (1 samples, 0.23%)</title><rect x="97.7011%" y="581" width="0.2299%" height="15" fill="rgb(221,40,2)"/><text x="97.9511%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="97.7011%" y="757" width="0.4598%" height="15" fill="rgb(237,157,21)"/><text x="97.9511%" y="767.50"></text></g><g><title>do_syscall_64 (2 samples, 0.46%)</title><rect x="97.7011%" y="741" width="0.4598%" height="15" fill="rgb(222,94,11)"/><text x="97.9511%" y="751.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.23%)</title><rect x="97.9310%" y="725" width="0.2299%" height="15" fill="rgb(249,113,6)"/><text x="98.1810%" y="735.50"></text></g><g><title>do_execve (1 samples, 0.23%)</title><rect x="97.9310%" y="709" width="0.2299%" height="15" fill="rgb(238,137,36)"/><text x="98.1810%" y="719.50"></text></g><g><title>__do_execve_file (1 samples, 0.23%)</title><rect x="97.9310%" y="693" width="0.2299%" height="15" fill="rgb(210,102,26)"/><text x="98.1810%" y="703.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.23%)</title><rect x="97.9310%" y="677" width="0.2299%" height="15" fill="rgb(218,30,30)"/><text x="98.1810%" y="687.50"></text></g><g><title>load_elf_binary (1 samples, 0.23%)</title><rect x="97.9310%" y="661" width="0.2299%" height="15" fill="rgb(214,67,26)"/><text x="98.1810%" y="671.50"></text></g><g><title>__clear_user (1 samples, 0.23%)</title><rect x="97.9310%" y="645" width="0.2299%" height="15" fill="rgb(251,9,53)"/><text x="98.1810%" y="655.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="97.9310%" y="629" width="0.2299%" height="15" fill="rgb(228,204,25)"/><text x="98.1810%" y="639.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="97.9310%" y="613" width="0.2299%" height="15" fill="rgb(207,153,8)"/><text x="98.1810%" y="623.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="97.9310%" y="597" width="0.2299%" height="15" fill="rgb(242,9,16)"/><text x="98.1810%" y="607.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="97.9310%" y="581" width="0.2299%" height="15" fill="rgb(217,211,10)"/><text x="98.1810%" y="591.50"></text></g><g><title>__pud_alloc (1 samples, 0.23%)</title><rect x="97.9310%" y="565" width="0.2299%" height="15" fill="rgb(219,228,52)"/><text x="98.1810%" y="575.50"></text></g><g><title>get_zeroed_page (1 samples, 0.23%)</title><rect x="97.9310%" y="549" width="0.2299%" height="15" fill="rgb(231,92,29)"/><text x="98.1810%" y="559.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.23%)</title><rect x="97.9310%" y="533" width="0.2299%" height="15" fill="rgb(232,8,23)"/><text x="98.1810%" y="543.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.23%)</title><rect x="97.9310%" y="517" width="0.2299%" height="15" fill="rgb(216,211,34)"/><text x="98.1810%" y="527.50"></text></g><g><title>prep_new_page (1 samples, 0.23%)</title><rect x="97.9310%" y="501" width="0.2299%" height="15" fill="rgb(236,151,0)"/><text x="98.1810%" y="511.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.23%)</title><rect x="97.9310%" y="485" width="0.2299%" height="15" fill="rgb(209,168,3)"/><text x="98.1810%" y="495.50"></text></g><g><title>clear_page_erms (1 samples, 0.23%)</title><rect x="97.9310%" y="469" width="0.2299%" height="15" fill="rgb(208,129,28)"/><text x="98.1810%" y="479.50"></text></g><g><title>lobsters-microb (429 samples, 98.62%)</title><rect x="0.0000%" y="773" width="98.6207%" height="15" fill="rgb(229,78,22)"/><text x="0.2500%" y="783.50">lobsters-microb</text></g><g><title>page_fault (2 samples, 0.46%)</title><rect x="98.1609%" y="757" width="0.4598%" height="15" fill="rgb(228,187,13)"/><text x="98.4109%" y="767.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="98.3908%" y="741" width="0.2299%" height="15" fill="rgb(240,119,24)"/><text x="98.6408%" y="751.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="98.3908%" y="725" width="0.2299%" height="15" fill="rgb(209,194,42)"/><text x="98.6408%" y="735.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="98.3908%" y="709" width="0.2299%" height="15" fill="rgb(247,200,46)"/><text x="98.6408%" y="719.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.23%)</title><rect x="98.3908%" y="693" width="0.2299%" height="15" fill="rgb(218,76,16)"/><text x="98.6408%" y="703.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.23%)</title><rect x="98.3908%" y="677" width="0.2299%" height="15" fill="rgb(225,21,48)"/><text x="98.6408%" y="687.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.23%)</title><rect x="98.3908%" y="661" width="0.2299%" height="15" fill="rgb(239,223,50)"/><text x="98.6408%" y="671.50"></text></g><g><title>prep_new_page (1 samples, 0.23%)</title><rect x="98.3908%" y="645" width="0.2299%" height="15" fill="rgb(244,45,21)"/><text x="98.6408%" y="655.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.23%)</title><rect x="98.3908%" y="629" width="0.2299%" height="15" fill="rgb(232,33,43)"/><text x="98.6408%" y="639.50"></text></g><g><title>clear_page_erms (1 samples, 0.23%)</title><rect x="98.3908%" y="613" width="0.2299%" height="15" fill="rgb(209,8,3)"/><text x="98.6408%" y="623.50"></text></g><g><title>all (435 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(214,25,53)"/><text x="0.2500%" y="799.50"></text></g><g><title>perf (6 samples, 1.38%)</title><rect x="98.6207%" y="773" width="1.3793%" height="15" fill="rgb(254,186,54)"/><text x="98.8707%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 1.38%)</title><rect x="98.6207%" y="757" width="1.3793%" height="15" fill="rgb(208,174,49)"/><text x="98.8707%" y="767.50"></text></g><g><title>do_syscall_64 (6 samples, 1.38%)</title><rect x="98.6207%" y="741" width="1.3793%" height="15" fill="rgb(233,191,51)"/><text x="98.8707%" y="751.50"></text></g><g><title>__x64_sys_execve (6 samples, 1.38%)</title><rect x="98.6207%" y="725" width="1.3793%" height="15" fill="rgb(222,134,10)"/><text x="98.8707%" y="735.50"></text></g><g><title>do_execve (6 samples, 1.38%)</title><rect x="98.6207%" y="709" width="1.3793%" height="15" fill="rgb(230,226,20)"/><text x="98.8707%" y="719.50"></text></g><g><title>__do_execve_file (6 samples, 1.38%)</title><rect x="98.6207%" y="693" width="1.3793%" height="15" fill="rgb(251,111,25)"/><text x="98.8707%" y="703.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 1.38%)</title><rect x="98.6207%" y="677" width="1.3793%" height="15" fill="rgb(224,40,46)"/><text x="98.8707%" y="687.50"></text></g><g><title>load_elf_binary (6 samples, 1.38%)</title><rect x="98.6207%" y="661" width="1.3793%" height="15" fill="rgb(236,108,47)"/><text x="98.8707%" y="671.50"></text></g><g><title>setup_new_exec (6 samples, 1.38%)</title><rect x="98.6207%" y="645" width="1.3793%" height="15" fill="rgb(234,93,0)"/><text x="98.8707%" y="655.50"></text></g><g><title>perf_event_exec (6 samples, 1.38%)</title><rect x="98.6207%" y="629" width="1.3793%" height="15" fill="rgb(224,213,32)"/><text x="98.8707%" y="639.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 1.15%)</title><rect x="98.8506%" y="613" width="1.1494%" height="15" fill="rgb(251,11,48)"/><text x="99.1006%" y="623.50"></text></g><g><title>native_write_msr (5 samples, 1.15%)</title><rect x="98.8506%" y="597" width="1.1494%" height="15" fill="rgb(236,173,5)"/><text x="99.1006%" y="607.50"></text></g></svg></svg>