<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180"><g><title>__GI___libc_malloc (5 samples, 0.36%)</title><rect x="0.0000%" y="629" width="0.3582%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="0.5014%" y="629" width="0.1433%" height="15" fill="rgb(217,0,24)"/><text x="0.7514%" y="639.50"></text></g><g><title>[[heap]] (12 samples, 0.86%)</title><rect x="0.0000%" y="645" width="0.8596%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="655.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="1.0029%" y="629" width="0.1433%" height="15" fill="rgb(248,212,6)"/><text x="1.2529%" y="639.50"></text></g><g><title>_int_free (11 samples, 0.79%)</title><rect x="1.1461%" y="629" width="0.7880%" height="15" fill="rgb(208,68,35)"/><text x="1.3961%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.21%)</title><rect x="1.9341%" y="629" width="0.2149%" height="15" fill="rgb(232,128,0)"/><text x="2.1841%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (2 samples, 0.14%)</title><rect x="2.1490%" y="629" width="0.1433%" height="15" fill="rgb(207,160,47)"/><text x="2.3990%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.14%)</title><rect x="2.2923%" y="629" width="0.1433%" height="15" fill="rgb(228,23,34)"/><text x="2.5423%" y="639.50"></text></g><g><title>mysql::conn::Conn::next_text (7 samples, 0.50%)</title><rect x="2.4355%" y="629" width="0.5014%" height="15" fill="rgb(218,30,26)"/><text x="2.6855%" y="639.50"></text></g><g><title>[[stack]] (32 samples, 2.29%)</title><rect x="0.8596%" y="645" width="2.2923%" height="15" fill="rgb(220,122,19)"/><text x="1.1096%" y="655.50">[..</text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (3 samples, 0.21%)</title><rect x="2.9370%" y="629" width="0.2149%" height="15" fill="rgb(250,228,42)"/><text x="3.1870%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="3.1519%" y="629" width="0.2149%" height="15" fill="rgb(240,193,28)"/><text x="3.4019%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 1.72%)</title><rect x="3.3668%" y="629" width="1.7192%" height="15" fill="rgb(216,20,37)"/><text x="3.6168%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.57%)</title><rect x="4.5129%" y="613" width="0.5731%" height="15" fill="rgb(206,188,39)"/><text x="4.7629%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.57%)</title><rect x="4.5129%" y="597" width="0.5731%" height="15" fill="rgb(217,207,13)"/><text x="4.7629%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.57%)</title><rect x="4.5129%" y="581" width="0.5731%" height="15" fill="rgb(231,73,38)"/><text x="4.7629%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.57%)</title><rect x="4.5129%" y="565" width="0.5731%" height="15" fill="rgb(225,20,46)"/><text x="4.7629%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.57%)</title><rect x="4.5129%" y="549" width="0.5731%" height="15" fill="rgb(210,31,41)"/><text x="4.7629%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.57%)</title><rect x="4.5129%" y="533" width="0.5731%" height="15" fill="rgb(221,200,47)"/><text x="4.7629%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.57%)</title><rect x="4.5129%" y="517" width="0.5731%" height="15" fill="rgb(226,26,5)"/><text x="4.7629%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.57%)</title><rect x="4.5129%" y="501" width="0.5731%" height="15" fill="rgb(249,33,26)"/><text x="4.7629%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.57%)</title><rect x="4.5129%" y="485" width="0.5731%" height="15" fill="rgb(235,183,28)"/><text x="4.7629%" y="495.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.57%)</title><rect x="4.5129%" y="469" width="0.5731%" height="15" fill="rgb(221,5,38)"/><text x="4.7629%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.72%)</title><rect x="5.0860%" y="629" width="0.7163%" height="15" fill="rgb(247,18,42)"/><text x="5.3360%" y="639.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (4 samples, 0.29%)</title><rect x="5.8023%" y="629" width="0.2865%" height="15" fill="rgb(241,131,45)"/><text x="6.0523%" y="639.50"></text></g><g><title>__GI___libc_free (4 samples, 0.29%)</title><rect x="6.0888%" y="629" width="0.2865%" height="15" fill="rgb(249,31,29)"/><text x="6.3388%" y="639.50"></text></g><g><title>__GI___libc_malloc (15 samples, 1.07%)</title><rect x="6.3754%" y="629" width="1.0745%" height="15" fill="rgb(225,111,53)"/><text x="6.6254%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.14%)</title><rect x="7.5215%" y="629" width="0.1433%" height="15" fill="rgb(238,160,17)"/><text x="7.7715%" y="639.50"></text></g><g><title>_int_free (4 samples, 0.29%)</title><rect x="7.6648%" y="629" width="0.2865%" height="15" fill="rgb(214,148,48)"/><text x="7.9148%" y="639.50"></text></g><g><title>_int_malloc (6 samples, 0.43%)</title><rect x="7.9513%" y="629" width="0.4298%" height="15" fill="rgb(232,36,49)"/><text x="8.2013%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.14%)</title><rect x="8.3811%" y="629" width="0.1433%" height="15" fill="rgb(209,103,24)"/><text x="8.6311%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.14%)</title><rect x="8.5244%" y="629" width="0.1433%" height="15" fill="rgb(229,88,8)"/><text x="8.7744%" y="639.50"></text></g><g><title>[anon] (83 samples, 5.95%)</title><rect x="3.1519%" y="645" width="5.9456%" height="15" fill="rgb(213,181,19)"/><text x="3.4019%" y="655.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.29%)</title><rect x="8.8109%" y="629" width="0.2865%" height="15" fill="rgb(254,191,54)"/><text x="9.0609%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.14%)</title><rect x="9.0974%" y="629" width="0.1433%" height="15" fill="rgb(241,83,37)"/><text x="9.3474%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.21%)</title><rect x="9.2407%" y="629" width="0.2149%" height="15" fill="rgb(233,36,39)"/><text x="9.4907%" y="639.50"></text></g><g><title>[lobsters-microbenchmarks] (8 samples, 0.57%)</title><rect x="9.0974%" y="645" width="0.5731%" height="15" fill="rgb(226,3,54)"/><text x="9.3474%" y="655.50"></text></g><g><title>mysql_common::value::read_text_value (3 samples, 0.21%)</title><rect x="9.4556%" y="629" width="0.2149%" height="15" fill="rgb(245,192,40)"/><text x="9.7056%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.14%)</title><rect x="9.6705%" y="629" width="0.1433%" height="15" fill="rgb(238,167,29)"/><text x="9.9205%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.14%)</title><rect x="9.8138%" y="629" width="0.1433%" height="15" fill="rgb(232,182,51)"/><text x="10.0638%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="9.9570%" y="629" width="0.1433%" height="15" fill="rgb(231,60,39)"/><text x="10.2070%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.21%)</title><rect x="10.1003%" y="629" width="0.2149%" height="15" fill="rgb(208,69,12)"/><text x="10.3503%" y="639.50"></text></g><g><title>page_fault (2 samples, 0.14%)</title><rect x="10.3868%" y="293" width="0.1433%" height="15" fill="rgb(235,93,37)"/><text x="10.6368%" y="303.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.14%)</title><rect x="10.3868%" y="277" width="0.1433%" height="15" fill="rgb(213,116,39)"/><text x="10.6368%" y="287.50"></text></g><g><title>handle_mm_fault (2 samples, 0.14%)</title><rect x="10.3868%" y="261" width="0.1433%" height="15" fill="rgb(222,207,29)"/><text x="10.6368%" y="271.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.14%)</title><rect x="10.3868%" y="245" width="0.1433%" height="15" fill="rgb(206,96,30)"/><text x="10.6368%" y="255.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.14%)</title><rect x="10.3868%" y="229" width="0.1433%" height="15" fill="rgb(218,138,4)"/><text x="10.6368%" y="239.50"></text></g><g><title>__alloc_pages_nodemask (2 samples, 0.14%)</title><rect x="10.3868%" y="213" width="0.1433%" height="15" fill="rgb(250,191,14)"/><text x="10.6368%" y="223.50"></text></g><g><title>get_page_from_freelist (2 samples, 0.14%)</title><rect x="10.3868%" y="197" width="0.1433%" height="15" fill="rgb(239,60,40)"/><text x="10.6368%" y="207.50"></text></g><g><title>prep_new_page (2 samples, 0.14%)</title><rect x="10.3868%" y="181" width="0.1433%" height="15" fill="rgb(206,27,48)"/><text x="10.6368%" y="191.50"></text></g><g><title>kernel_init_free_pages (2 samples, 0.14%)</title><rect x="10.3868%" y="165" width="0.1433%" height="15" fill="rgb(225,35,8)"/><text x="10.6368%" y="175.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (4 samples, 0.29%)</title><rect x="10.3152%" y="533" width="0.2865%" height="15" fill="rgb(250,213,24)"/><text x="10.5652%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.29%)</title><rect x="10.3152%" y="517" width="0.2865%" height="15" fill="rgb(247,123,22)"/><text x="10.5652%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.29%)</title><rect x="10.3152%" y="501" width="0.2865%" height="15" fill="rgb(231,138,38)"/><text x="10.5652%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.29%)</title><rect x="10.3152%" y="485" width="0.2865%" height="15" fill="rgb(231,145,46)"/><text x="10.5652%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.29%)</title><rect x="10.3152%" y="469" width="0.2865%" height="15" fill="rgb(251,118,11)"/><text x="10.5652%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.29%)</title><rect x="10.3152%" y="453" width="0.2865%" height="15" fill="rgb(217,147,25)"/><text x="10.5652%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (4 samples, 0.29%)</title><rect x="10.3152%" y="437" width="0.2865%" height="15" fill="rgb(247,81,37)"/><text x="10.5652%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.29%)</title><rect x="10.3152%" y="421" width="0.2865%" height="15" fill="rgb(209,12,38)"/><text x="10.5652%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.29%)</title><rect x="10.3152%" y="405" width="0.2865%" height="15" fill="rgb(227,1,9)"/><text x="10.5652%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.29%)</title><rect x="10.3152%" y="389" width="0.2865%" height="15" fill="rgb(248,47,43)"/><text x="10.5652%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.29%)</title><rect x="10.3152%" y="373" width="0.2865%" height="15" fill="rgb(221,10,30)"/><text x="10.5652%" y="383.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.29%)</title><rect x="10.3152%" y="357" width="0.2865%" height="15" fill="rgb(210,229,1)"/><text x="10.5652%" y="367.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.29%)</title><rect x="10.3152%" y="341" width="0.2865%" height="15" fill="rgb(222,148,37)"/><text x="10.5652%" y="351.50"></text></g><g><title>_int_malloc (4 samples, 0.29%)</title><rect x="10.3152%" y="325" width="0.2865%" height="15" fill="rgb(234,67,33)"/><text x="10.5652%" y="335.50"></text></g><g><title>sysmalloc (3 samples, 0.21%)</title><rect x="10.3868%" y="309" width="0.2149%" height="15" fill="rgb(247,98,35)"/><text x="10.6368%" y="319.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (6 samples, 0.43%)</title><rect x="10.3152%" y="597" width="0.4298%" height="15" fill="rgb(247,138,52)"/><text x="10.5652%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (6 samples, 0.43%)</title><rect x="10.3152%" y="581" width="0.4298%" height="15" fill="rgb(213,79,30)"/><text x="10.5652%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.43%)</title><rect x="10.3152%" y="565" width="0.4298%" height="15" fill="rgb(246,177,23)"/><text x="10.5652%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.43%)</title><rect x="10.3152%" y="549" width="0.4298%" height="15" fill="rgb(230,62,27)"/><text x="10.5652%" y="559.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="10.6017%" y="533" width="0.1433%" height="15" fill="rgb(216,154,8)"/><text x="10.8517%" y="543.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="10.6017%" y="517" width="0.1433%" height="15" fill="rgb(244,35,45)"/><text x="10.8517%" y="527.50"></text></g><g><title>sysmalloc (2 samples, 0.14%)</title><rect x="10.6017%" y="501" width="0.1433%" height="15" fill="rgb(251,115,12)"/><text x="10.8517%" y="511.50"></text></g><g><title>sk_wait_data (4 samples, 0.29%)</title><rect x="10.8166%" y="325" width="0.2865%" height="15" fill="rgb(240,54,50)"/><text x="11.0666%" y="335.50"></text></g><g><title>wait_woken (4 samples, 0.29%)</title><rect x="10.8166%" y="309" width="0.2865%" height="15" fill="rgb(233,84,52)"/><text x="11.0666%" y="319.50"></text></g><g><title>schedule_timeout (4 samples, 0.29%)</title><rect x="10.8166%" y="293" width="0.2865%" height="15" fill="rgb(207,117,47)"/><text x="11.0666%" y="303.50"></text></g><g><title>schedule (4 samples, 0.29%)</title><rect x="10.8166%" y="277" width="0.2865%" height="15" fill="rgb(249,43,39)"/><text x="11.0666%" y="287.50"></text></g><g><title>__schedule (4 samples, 0.29%)</title><rect x="10.8166%" y="261" width="0.2865%" height="15" fill="rgb(209,38,44)"/><text x="11.0666%" y="271.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (6 samples, 0.43%)</title><rect x="10.7450%" y="597" width="0.4298%" height="15" fill="rgb(236,212,23)"/><text x="10.9950%" y="607.50"></text></g><g><title>mysql::conn::Conn::_query (6 samples, 0.43%)</title><rect x="10.7450%" y="581" width="0.4298%" height="15" fill="rgb(242,79,21)"/><text x="10.9950%" y="591.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (6 samples, 0.43%)</title><rect x="10.7450%" y="565" width="0.4298%" height="15" fill="rgb(211,96,35)"/><text x="10.9950%" y="575.50"></text></g><g><title>mysql::conn::Conn::read_packet (6 samples, 0.43%)</title><rect x="10.7450%" y="549" width="0.4298%" height="15" fill="rgb(253,215,40)"/><text x="10.9950%" y="559.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.43%)</title><rect x="10.7450%" y="533" width="0.4298%" height="15" fill="rgb(211,81,21)"/><text x="10.9950%" y="543.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.43%)</title><rect x="10.7450%" y="517" width="0.4298%" height="15" fill="rgb(208,190,38)"/><text x="10.9950%" y="527.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (6 samples, 0.43%)</title><rect x="10.7450%" y="501" width="0.4298%" height="15" fill="rgb(235,213,38)"/><text x="10.9950%" y="511.50"></text></g><g><title>std::sys_common::net::TcpStream::read (6 samples, 0.43%)</title><rect x="10.7450%" y="485" width="0.4298%" height="15" fill="rgb(237,122,38)"/><text x="10.9950%" y="495.50"></text></g><g><title>std::sys::unix::net::Socket::read (6 samples, 0.43%)</title><rect x="10.7450%" y="469" width="0.4298%" height="15" fill="rgb(244,218,35)"/><text x="10.9950%" y="479.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (6 samples, 0.43%)</title><rect x="10.7450%" y="453" width="0.4298%" height="15" fill="rgb(240,68,47)"/><text x="10.9950%" y="463.50"></text></g><g><title>__libc_recv (6 samples, 0.43%)</title><rect x="10.7450%" y="437" width="0.4298%" height="15" fill="rgb(210,16,53)"/><text x="10.9950%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.43%)</title><rect x="10.7450%" y="421" width="0.4298%" height="15" fill="rgb(235,124,12)"/><text x="10.9950%" y="431.50"></text></g><g><title>do_syscall_64 (6 samples, 0.43%)</title><rect x="10.7450%" y="405" width="0.4298%" height="15" fill="rgb(224,169,11)"/><text x="10.9950%" y="415.50"></text></g><g><title>__x64_sys_recvfrom (6 samples, 0.43%)</title><rect x="10.7450%" y="389" width="0.4298%" height="15" fill="rgb(250,166,2)"/><text x="10.9950%" y="399.50"></text></g><g><title>__sys_recvfrom (6 samples, 0.43%)</title><rect x="10.7450%" y="373" width="0.4298%" height="15" fill="rgb(242,216,29)"/><text x="10.9950%" y="383.50"></text></g><g><title>inet_recvmsg (6 samples, 0.43%)</title><rect x="10.7450%" y="357" width="0.4298%" height="15" fill="rgb(230,116,27)"/><text x="10.9950%" y="367.50"></text></g><g><title>tcp_recvmsg (6 samples, 0.43%)</title><rect x="10.7450%" y="341" width="0.4298%" height="15" fill="rgb(228,99,48)"/><text x="10.9950%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.36%)</title><rect x="15.6877%" y="453" width="0.3582%" height="15" fill="rgb(253,11,6)"/><text x="15.9377%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="16.0458%" y="437" width="0.1433%" height="15" fill="rgb(247,143,39)"/><text x="16.2958%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.50%)</title><rect x="16.1891%" y="421" width="0.5014%" height="15" fill="rgb(236,97,10)"/><text x="16.4391%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.50%)</title><rect x="16.1891%" y="405" width="0.5014%" height="15" fill="rgb(233,208,19)"/><text x="16.4391%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (7 samples, 0.50%)</title><rect x="16.1891%" y="389" width="0.5014%" height="15" fill="rgb(216,164,2)"/><text x="16.4391%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.50%)</title><rect x="16.1891%" y="373" width="0.5014%" height="15" fill="rgb(220,129,5)"/><text x="16.4391%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.29%)</title><rect x="16.4040%" y="357" width="0.2865%" height="15" fill="rgb(242,17,10)"/><text x="16.6540%" y="367.50"></text></g><g><title>__GI___libc_malloc (122 samples, 8.74%)</title><rect x="16.6905%" y="309" width="8.7393%" height="15" fill="rgb(242,107,0)"/><text x="16.9405%" y="319.50">__GI___libc_..</text></g><g><title>_int_malloc (85 samples, 6.09%)</title><rect x="19.3410%" y="293" width="6.0888%" height="15" fill="rgb(251,28,31)"/><text x="19.5910%" y="303.50">_int_mal..</text></g><g><title>__rdl_alloc (5 samples, 0.36%)</title><rect x="25.4298%" y="309" width="0.3582%" height="15" fill="rgb(233,223,10)"/><text x="25.6798%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.36%)</title><rect x="25.4298%" y="293" width="0.3582%" height="15" fill="rgb(215,21,27)"/><text x="25.6798%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (206 samples, 14.76%)</title><rect x="11.6046%" y="501" width="14.7564%" height="15" fill="rgb(232,23,21)"/><text x="11.8546%" y="511.50">&lt;core::iter::adapters::..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (153 samples, 10.96%)</title><rect x="15.4011%" y="485" width="10.9599%" height="15" fill="rgb(244,5,23)"/><text x="15.6511%" y="495.50">&lt;alloc::string::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (149 samples, 10.67%)</title><rect x="15.6877%" y="469" width="10.6734%" height="15" fill="rgb(226,81,46)"/><text x="15.9377%" y="479.50">&lt;alloc::vec::Vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (144 samples, 10.32%)</title><rect x="16.0458%" y="453" width="10.3152%" height="15" fill="rgb(247,70,30)"/><text x="16.2958%" y="463.50">alloc::slice::&lt;..</text></g><g><title>alloc::slice::hack::to_vec (142 samples, 10.17%)</title><rect x="16.1891%" y="437" width="10.1719%" height="15" fill="rgb(212,68,19)"/><text x="16.4391%" y="447.50">alloc::slice::h..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (135 samples, 9.67%)</title><rect x="16.6905%" y="421" width="9.6705%" height="15" fill="rgb(240,187,13)"/><text x="16.9405%" y="431.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (135 samples, 9.67%)</title><rect x="16.6905%" y="405" width="9.6705%" height="15" fill="rgb(223,113,26)"/><text x="16.9405%" y="415.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (135 samples, 9.67%)</title><rect x="16.6905%" y="389" width="9.6705%" height="15" fill="rgb(206,192,2)"/><text x="16.9405%" y="399.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (135 samples, 9.67%)</title><rect x="16.6905%" y="373" width="9.6705%" height="15" fill="rgb(241,108,4)"/><text x="16.9405%" y="383.50">alloc::raw_vec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (135 samples, 9.67%)</title><rect x="16.6905%" y="357" width="9.6705%" height="15" fill="rgb(247,173,49)"/><text x="16.9405%" y="367.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (135 samples, 9.67%)</title><rect x="16.6905%" y="341" width="9.6705%" height="15" fill="rgb(224,114,35)"/><text x="16.9405%" y="351.50">alloc::alloc::..</text></g><g><title>alloc::alloc::alloc (135 samples, 9.67%)</title><rect x="16.6905%" y="325" width="9.6705%" height="15" fill="rgb(245,159,27)"/><text x="16.9405%" y="335.50">alloc::alloc::..</text></g><g><title>__rust_alloc (8 samples, 0.57%)</title><rect x="25.7880%" y="309" width="0.5731%" height="15" fill="rgb(245,172,44)"/><text x="26.0380%" y="319.50"></text></g><g><title>__GI___libc_malloc (16 samples, 1.15%)</title><rect x="26.3610%" y="501" width="1.1461%" height="15" fill="rgb(236,23,11)"/><text x="26.6110%" y="511.50"></text></g><g><title>_int_malloc (12 samples, 0.86%)</title><rect x="26.6476%" y="485" width="0.8596%" height="15" fill="rgb(205,117,38)"/><text x="26.8976%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (228 samples, 16.33%)</title><rect x="11.2464%" y="517" width="16.3324%" height="15" fill="rgb(237,72,25)"/><text x="11.4964%" y="527.50">&lt;alloc::vec::Vec&lt;T&gt; as co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (231 samples, 16.55%)</title><rect x="11.2464%" y="533" width="16.5473%" height="15" fill="rgb(244,70,9)"/><text x="11.4964%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as cor..</text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (3 samples, 0.21%)</title><rect x="27.5788%" y="517" width="0.2149%" height="15" fill="rgb(217,125,39)"/><text x="27.8288%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="27.6504%" y="501" width="0.1433%" height="15" fill="rgb(235,36,10)"/><text x="27.9004%" y="511.50"></text></g><g><title>__GI___libc_malloc (33 samples, 2.36%)</title><rect x="29.5129%" y="325" width="2.3639%" height="15" fill="rgb(251,123,47)"/><text x="29.7629%" y="335.50">__..</text></g><g><title>_int_malloc (20 samples, 1.43%)</title><rect x="30.4441%" y="309" width="1.4327%" height="15" fill="rgb(221,13,13)"/><text x="30.6941%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (41 samples, 2.94%)</title><rect x="29.1547%" y="501" width="2.9370%" height="15" fill="rgb(238,131,9)"/><text x="29.4047%" y="511.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (39 samples, 2.79%)</title><rect x="29.2980%" y="485" width="2.7937%" height="15" fill="rgb(211,50,8)"/><text x="29.5480%" y="495.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (38 samples, 2.72%)</title><rect x="29.3696%" y="469" width="2.7221%" height="15" fill="rgb(245,182,24)"/><text x="29.6196%" y="479.50">al..</text></g><g><title>alloc::slice::hack::to_vec (37 samples, 2.65%)</title><rect x="29.4413%" y="453" width="2.6504%" height="15" fill="rgb(242,14,37)"/><text x="29.6913%" y="463.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36 samples, 2.58%)</title><rect x="29.5129%" y="437" width="2.5788%" height="15" fill="rgb(246,228,12)"/><text x="29.7629%" y="447.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (36 samples, 2.58%)</title><rect x="29.5129%" y="421" width="2.5788%" height="15" fill="rgb(213,55,15)"/><text x="29.7629%" y="431.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 2.58%)</title><rect x="29.5129%" y="405" width="2.5788%" height="15" fill="rgb(209,9,3)"/><text x="29.7629%" y="415.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 2.58%)</title><rect x="29.5129%" y="389" width="2.5788%" height="15" fill="rgb(230,59,30)"/><text x="29.7629%" y="399.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (36 samples, 2.58%)</title><rect x="29.5129%" y="373" width="2.5788%" height="15" fill="rgb(209,121,21)"/><text x="29.7629%" y="383.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 2.58%)</title><rect x="29.5129%" y="357" width="2.5788%" height="15" fill="rgb(220,109,13)"/><text x="29.7629%" y="367.50">al..</text></g><g><title>alloc::alloc::alloc (36 samples, 2.58%)</title><rect x="29.5129%" y="341" width="2.5788%" height="15" fill="rgb(232,18,1)"/><text x="29.7629%" y="351.50">al..</text></g><g><title>__rust_alloc (2 samples, 0.14%)</title><rect x="31.9484%" y="325" width="0.1433%" height="15" fill="rgb(215,41,42)"/><text x="32.1984%" y="335.50"></text></g><g><title>__GI___libc_malloc (28 samples, 2.01%)</title><rect x="32.2350%" y="485" width="2.0057%" height="15" fill="rgb(224,123,36)"/><text x="32.4850%" y="495.50">_..</text></g><g><title>_int_malloc (17 samples, 1.22%)</title><rect x="33.0229%" y="469" width="1.2178%" height="15" fill="rgb(240,125,3)"/><text x="33.2729%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.36%)</title><rect x="34.2407%" y="485" width="0.3582%" height="15" fill="rgb(205,98,50)"/><text x="34.4907%" y="495.50"></text></g><g><title>&lt;decor_mem::views::View as core::clone::Clone&gt;::clone (328 samples, 23.50%)</title><rect x="11.2464%" y="549" width="23.4957%" height="15" fill="rgb(205,185,37)"/><text x="11.4964%" y="559.50">&lt;decor_mem::views::View as core::clon..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (97 samples, 6.95%)</title><rect x="27.7937%" y="533" width="6.9484%" height="15" fill="rgb(238,207,15)"/><text x="28.0437%" y="543.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (97 samples, 6.95%)</title><rect x="27.7937%" y="517" width="6.9484%" height="15" fill="rgb(213,199,42)"/><text x="28.0437%" y="527.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (37 samples, 2.65%)</title><rect x="32.0917%" y="501" width="2.6504%" height="15" fill="rgb(235,201,11)"/><text x="32.3417%" y="511.50">&lt;h..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (342 samples, 24.50%)</title><rect x="10.3152%" y="613" width="24.4986%" height="15" fill="rgb(207,46,11)"/><text x="10.5652%" y="623.50">decor_mem::query_transformer::QueryTran..</text></g><g><title>decor_mem::select::get_query_results (329 samples, 23.57%)</title><rect x="11.2464%" y="597" width="23.5673%" height="15" fill="rgb(241,35,35)"/><text x="11.4964%" y="607.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (329 samples, 23.57%)</title><rect x="11.2464%" y="581" width="23.5673%" height="15" fill="rgb(243,32,47)"/><text x="11.4964%" y="591.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (329 samples, 23.57%)</title><rect x="11.2464%" y="565" width="23.5673%" height="15" fill="rgb(247,202,23)"/><text x="11.4964%" y="575.50">decor_mem::select::tablewithjoins_to_..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (344 samples, 24.64%)</title><rect x="10.3152%" y="629" width="24.6418%" height="15" fill="rgb(219,102,11)"/><text x="10.5652%" y="639.50">&lt;decor_mem::Shim as msql_srv::MysqlShim..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (2 samples, 0.14%)</title><rect x="34.8138%" y="613" width="0.1433%" height="15" fill="rgb(243,110,44)"/><text x="35.0638%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="34.8138%" y="597" width="0.1433%" height="15" fill="rgb(222,74,54)"/><text x="35.0638%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="34.8138%" y="581" width="0.1433%" height="15" fill="rgb(216,99,12)"/><text x="35.0638%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="34.8138%" y="565" width="0.1433%" height="15" fill="rgb(226,22,26)"/><text x="35.0638%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="34.8138%" y="549" width="0.1433%" height="15" fill="rgb(217,163,10)"/><text x="35.0638%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="34.8138%" y="533" width="0.1433%" height="15" fill="rgb(213,25,53)"/><text x="35.0638%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.36%)</title><rect x="34.9570%" y="629" width="0.3582%" height="15" fill="rgb(252,105,26)"/><text x="35.2070%" y="639.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.14%)</title><rect x="35.3152%" y="629" width="0.1433%" height="15" fill="rgb(220,39,43)"/><text x="35.5652%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.43%)</title><rect x="35.4585%" y="629" width="0.4298%" height="15" fill="rgb(229,68,48)"/><text x="35.7085%" y="639.50"></text></g><g><title>__GI___libc_free (2 samples, 0.14%)</title><rect x="35.9599%" y="629" width="0.1433%" height="15" fill="rgb(252,8,32)"/><text x="36.2099%" y="639.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="36.1032%" y="629" width="0.2149%" height="15" fill="rgb(223,20,43)"/><text x="36.3532%" y="639.50"></text></g><g><title>__libc_start_main (3 samples, 0.21%)</title><rect x="36.3181%" y="629" width="0.2149%" height="15" fill="rgb(229,81,49)"/><text x="36.5681%" y="639.50"></text></g><g><title>main (3 samples, 0.21%)</title><rect x="36.3181%" y="613" width="0.2149%" height="15" fill="rgb(236,28,36)"/><text x="36.5681%" y="623.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.21%)</title><rect x="36.3181%" y="597" width="0.2149%" height="15" fill="rgb(249,185,26)"/><text x="36.5681%" y="607.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.21%)</title><rect x="36.3181%" y="581" width="0.2149%" height="15" fill="rgb(249,174,33)"/><text x="36.5681%" y="591.50"></text></g><g><title>std::panicking::try (3 samples, 0.21%)</title><rect x="36.3181%" y="565" width="0.2149%" height="15" fill="rgb(233,201,37)"/><text x="36.5681%" y="575.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.21%)</title><rect x="36.3181%" y="549" width="0.2149%" height="15" fill="rgb(221,78,26)"/><text x="36.5681%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.21%)</title><rect x="36.3181%" y="533" width="0.2149%" height="15" fill="rgb(250,127,30)"/><text x="36.5681%" y="543.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.21%)</title><rect x="36.3181%" y="517" width="0.2149%" height="15" fill="rgb(230,49,44)"/><text x="36.5681%" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.21%)</title><rect x="36.3181%" y="501" width="0.2149%" height="15" fill="rgb(229,67,23)"/><text x="36.5681%" y="511.50"></text></g><g><title>lobsters_microbenchmarks::main (3 samples, 0.21%)</title><rect x="36.3181%" y="485" width="0.2149%" height="15" fill="rgb(249,83,47)"/><text x="36.5681%" y="495.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.14%)</title><rect x="36.3897%" y="469" width="0.1433%" height="15" fill="rgb(215,43,3)"/><text x="36.6397%" y="479.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.14%)</title><rect x="36.3897%" y="453" width="0.1433%" height="15" fill="rgb(238,154,13)"/><text x="36.6397%" y="463.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.14%)</title><rect x="36.3897%" y="437" width="0.1433%" height="15" fill="rgb(219,56,2)"/><text x="36.6397%" y="447.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.14%)</title><rect x="36.3897%" y="421" width="0.1433%" height="15" fill="rgb(233,0,4)"/><text x="36.6397%" y="431.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.14%)</title><rect x="36.3897%" y="405" width="0.1433%" height="15" fill="rgb(235,30,7)"/><text x="36.6397%" y="415.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.14%)</title><rect x="36.3897%" y="389" width="0.1433%" height="15" fill="rgb(250,79,13)"/><text x="36.6397%" y="399.50"></text></g><g><title>_int_free (24 samples, 1.72%)</title><rect x="36.5330%" y="629" width="1.7192%" height="15" fill="rgb(211,146,34)"/><text x="36.7830%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="38.6819%" y="533" width="0.1433%" height="15" fill="rgb(228,22,38)"/><text x="38.9319%" y="543.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.14%)</title><rect x="38.6819%" y="517" width="0.1433%" height="15" fill="rgb(235,168,5)"/><text x="38.9319%" y="527.50"></text></g><g><title>_int_realloc (2 samples, 0.14%)</title><rect x="38.6819%" y="501" width="0.1433%" height="15" fill="rgb(221,155,16)"/><text x="38.9319%" y="511.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="38.6819%" y="485" width="0.1433%" height="15" fill="rgb(215,215,53)"/><text x="38.9319%" y="495.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (5 samples, 0.36%)</title><rect x="38.6819%" y="629" width="0.3582%" height="15" fill="rgb(223,4,10)"/><text x="38.9319%" y="639.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (5 samples, 0.36%)</title><rect x="38.6819%" y="613" width="0.3582%" height="15" fill="rgb(234,103,6)"/><text x="38.9319%" y="623.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (5 samples, 0.36%)</title><rect x="38.6819%" y="597" width="0.3582%" height="15" fill="rgb(227,97,0)"/><text x="38.9319%" y="607.50"></text></g><g><title>decor_mem::stats::get_qtype (5 samples, 0.36%)</title><rect x="38.6819%" y="581" width="0.3582%" height="15" fill="rgb(234,150,53)"/><text x="38.9319%" y="591.50"></text></g><g><title>sql_parser::parser::parse_statements (5 samples, 0.36%)</title><rect x="38.6819%" y="565" width="0.3582%" height="15" fill="rgb(228,201,54)"/><text x="38.9319%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (5 samples, 0.36%)</title><rect x="38.6819%" y="549" width="0.3582%" height="15" fill="rgb(222,22,37)"/><text x="38.9319%" y="559.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (3 samples, 0.21%)</title><rect x="38.8252%" y="533" width="0.2149%" height="15" fill="rgb(237,53,32)"/><text x="39.0752%" y="543.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (2 samples, 0.14%)</title><rect x="39.1117%" y="565" width="0.1433%" height="15" fill="rgb(233,25,53)"/><text x="39.3617%" y="575.50"></text></g><g><title>mysql::conn::Conn::read_packet (2 samples, 0.14%)</title><rect x="39.1117%" y="549" width="0.1433%" height="15" fill="rgb(210,40,34)"/><text x="39.3617%" y="559.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.14%)</title><rect x="39.1117%" y="533" width="0.1433%" height="15" fill="rgb(241,220,44)"/><text x="39.3617%" y="543.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="39.1117%" y="517" width="0.1433%" height="15" fill="rgb(235,28,35)"/><text x="39.3617%" y="527.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="39.1117%" y="501" width="0.1433%" height="15" fill="rgb(210,56,17)"/><text x="39.3617%" y="511.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.14%)</title><rect x="39.1117%" y="485" width="0.1433%" height="15" fill="rgb(224,130,29)"/><text x="39.3617%" y="495.50"></text></g><g><title>std::sys::unix::net::Socket::read (2 samples, 0.14%)</title><rect x="39.1117%" y="469" width="0.1433%" height="15" fill="rgb(235,212,8)"/><text x="39.3617%" y="479.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2 samples, 0.14%)</title><rect x="39.1117%" y="453" width="0.1433%" height="15" fill="rgb(223,33,50)"/><text x="39.3617%" y="463.50"></text></g><g><title>__libc_recv (2 samples, 0.14%)</title><rect x="39.1117%" y="437" width="0.1433%" height="15" fill="rgb(219,149,13)"/><text x="39.3617%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.14%)</title><rect x="39.1117%" y="421" width="0.1433%" height="15" fill="rgb(250,156,29)"/><text x="39.3617%" y="431.50"></text></g><g><title>do_syscall_64 (2 samples, 0.14%)</title><rect x="39.1117%" y="405" width="0.1433%" height="15" fill="rgb(216,193,19)"/><text x="39.3617%" y="415.50"></text></g><g><title>__x64_sys_recvfrom (2 samples, 0.14%)</title><rect x="39.1117%" y="389" width="0.1433%" height="15" fill="rgb(216,135,14)"/><text x="39.3617%" y="399.50"></text></g><g><title>__sys_recvfrom (2 samples, 0.14%)</title><rect x="39.1117%" y="373" width="0.1433%" height="15" fill="rgb(241,47,5)"/><text x="39.3617%" y="383.50"></text></g><g><title>inet_recvmsg (2 samples, 0.14%)</title><rect x="39.1117%" y="357" width="0.1433%" height="15" fill="rgb(233,42,35)"/><text x="39.3617%" y="367.50"></text></g><g><title>tcp_recvmsg (2 samples, 0.14%)</title><rect x="39.1117%" y="341" width="0.1433%" height="15" fill="rgb(231,13,6)"/><text x="39.3617%" y="351.50"></text></g><g><title>skb_copy_datagram_iter (2 samples, 0.14%)</title><rect x="39.1117%" y="325" width="0.1433%" height="15" fill="rgb(207,181,40)"/><text x="39.3617%" y="335.50"></text></g><g><title>__skb_datagram_iter (2 samples, 0.14%)</title><rect x="39.1117%" y="309" width="0.1433%" height="15" fill="rgb(254,173,49)"/><text x="39.3617%" y="319.50"></text></g><g><title>_copy_to_iter (2 samples, 0.14%)</title><rect x="39.1117%" y="293" width="0.1433%" height="15" fill="rgb(221,1,38)"/><text x="39.3617%" y="303.50"></text></g><g><title>copy_user_enhanced_fast_string (2 samples, 0.14%)</title><rect x="39.1117%" y="277" width="0.1433%" height="15" fill="rgb(206,124,46)"/><text x="39.3617%" y="287.50"></text></g><g><title>page_fault (2 samples, 0.14%)</title><rect x="39.1117%" y="261" width="0.1433%" height="15" fill="rgb(249,21,11)"/><text x="39.3617%" y="271.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.14%)</title><rect x="39.1117%" y="245" width="0.1433%" height="15" fill="rgb(222,201,40)"/><text x="39.3617%" y="255.50"></text></g><g><title>handle_mm_fault (2 samples, 0.14%)</title><rect x="39.1117%" y="229" width="0.1433%" height="15" fill="rgb(235,61,29)"/><text x="39.3617%" y="239.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.14%)</title><rect x="39.1117%" y="213" width="0.1433%" height="15" fill="rgb(219,207,3)"/><text x="39.3617%" y="223.50"></text></g><g><title>ip_local_deliver (4 samples, 0.29%)</title><rect x="39.3266%" y="149" width="0.2865%" height="15" fill="rgb(222,56,46)"/><text x="39.5766%" y="159.50"></text></g><g><title>ip_local_deliver_finish (4 samples, 0.29%)</title><rect x="39.3266%" y="133" width="0.2865%" height="15" fill="rgb(239,76,54)"/><text x="39.5766%" y="143.50"></text></g><g><title>ip_protocol_deliver_rcu (4 samples, 0.29%)</title><rect x="39.3266%" y="117" width="0.2865%" height="15" fill="rgb(231,124,27)"/><text x="39.5766%" y="127.50"></text></g><g><title>tcp_v4_rcv (4 samples, 0.29%)</title><rect x="39.3266%" y="101" width="0.2865%" height="15" fill="rgb(249,195,6)"/><text x="39.5766%" y="111.50"></text></g><g><title>tcp_v4_do_rcv (4 samples, 0.29%)</title><rect x="39.3266%" y="85" width="0.2865%" height="15" fill="rgb(237,174,47)"/><text x="39.5766%" y="95.50"></text></g><g><title>tcp_rcv_established (4 samples, 0.29%)</title><rect x="39.3266%" y="69" width="0.2865%" height="15" fill="rgb(206,201,31)"/><text x="39.5766%" y="79.50"></text></g><g><title>tcp_ack (3 samples, 0.21%)</title><rect x="39.3983%" y="53" width="0.2149%" height="15" fill="rgb(231,57,52)"/><text x="39.6483%" y="63.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (8 samples, 0.57%)</title><rect x="39.1117%" y="597" width="0.5731%" height="15" fill="rgb(248,177,22)"/><text x="39.3617%" y="607.50"></text></g><g><title>mysql::conn::Conn::_query (8 samples, 0.57%)</title><rect x="39.1117%" y="581" width="0.5731%" height="15" fill="rgb(215,211,37)"/><text x="39.3617%" y="591.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (6 samples, 0.43%)</title><rect x="39.2550%" y="565" width="0.4298%" height="15" fill="rgb(241,128,51)"/><text x="39.5050%" y="575.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (5 samples, 0.36%)</title><rect x="39.3266%" y="549" width="0.3582%" height="15" fill="rgb(227,165,31)"/><text x="39.5766%" y="559.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (5 samples, 0.36%)</title><rect x="39.3266%" y="533" width="0.3582%" height="15" fill="rgb(228,167,24)"/><text x="39.5766%" y="543.50"></text></g><g><title>std::sys_common::net::TcpStream::write (5 samples, 0.36%)</title><rect x="39.3266%" y="517" width="0.3582%" height="15" fill="rgb(228,143,12)"/><text x="39.5766%" y="527.50"></text></g><g><title>__libc_send (5 samples, 0.36%)</title><rect x="39.3266%" y="501" width="0.3582%" height="15" fill="rgb(249,149,8)"/><text x="39.5766%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.36%)</title><rect x="39.3266%" y="485" width="0.3582%" height="15" fill="rgb(243,35,44)"/><text x="39.5766%" y="495.50"></text></g><g><title>do_syscall_64 (5 samples, 0.36%)</title><rect x="39.3266%" y="469" width="0.3582%" height="15" fill="rgb(246,89,9)"/><text x="39.5766%" y="479.50"></text></g><g><title>__x64_sys_sendto (5 samples, 0.36%)</title><rect x="39.3266%" y="453" width="0.3582%" height="15" fill="rgb(233,213,13)"/><text x="39.5766%" y="463.50"></text></g><g><title>__sys_sendto (5 samples, 0.36%)</title><rect x="39.3266%" y="437" width="0.3582%" height="15" fill="rgb(233,141,41)"/><text x="39.5766%" y="447.50"></text></g><g><title>sock_sendmsg (5 samples, 0.36%)</title><rect x="39.3266%" y="421" width="0.3582%" height="15" fill="rgb(239,167,4)"/><text x="39.5766%" y="431.50"></text></g><g><title>tcp_sendmsg (5 samples, 0.36%)</title><rect x="39.3266%" y="405" width="0.3582%" height="15" fill="rgb(209,217,16)"/><text x="39.5766%" y="415.50"></text></g><g><title>tcp_sendmsg_locked (5 samples, 0.36%)</title><rect x="39.3266%" y="389" width="0.3582%" height="15" fill="rgb(219,88,35)"/><text x="39.5766%" y="399.50"></text></g><g><title>__tcp_push_pending_frames (5 samples, 0.36%)</title><rect x="39.3266%" y="373" width="0.3582%" height="15" fill="rgb(220,193,23)"/><text x="39.5766%" y="383.50"></text></g><g><title>tcp_write_xmit (5 samples, 0.36%)</title><rect x="39.3266%" y="357" width="0.3582%" height="15" fill="rgb(230,90,52)"/><text x="39.5766%" y="367.50"></text></g><g><title>__tcp_transmit_skb (5 samples, 0.36%)</title><rect x="39.3266%" y="341" width="0.3582%" height="15" fill="rgb(252,106,19)"/><text x="39.5766%" y="351.50"></text></g><g><title>__ip_queue_xmit (5 samples, 0.36%)</title><rect x="39.3266%" y="325" width="0.3582%" height="15" fill="rgb(206,74,20)"/><text x="39.5766%" y="335.50"></text></g><g><title>ip_output (5 samples, 0.36%)</title><rect x="39.3266%" y="309" width="0.3582%" height="15" fill="rgb(230,138,44)"/><text x="39.5766%" y="319.50"></text></g><g><title>ip_finish_output2 (5 samples, 0.36%)</title><rect x="39.3266%" y="293" width="0.3582%" height="15" fill="rgb(235,182,43)"/><text x="39.5766%" y="303.50"></text></g><g><title>__local_bh_enable_ip (5 samples, 0.36%)</title><rect x="39.3266%" y="277" width="0.3582%" height="15" fill="rgb(242,16,51)"/><text x="39.5766%" y="287.50"></text></g><g><title>do_softirq (5 samples, 0.36%)</title><rect x="39.3266%" y="261" width="0.3582%" height="15" fill="rgb(248,9,4)"/><text x="39.5766%" y="271.50"></text></g><g><title>do_softirq_own_stack (5 samples, 0.36%)</title><rect x="39.3266%" y="245" width="0.3582%" height="15" fill="rgb(210,31,22)"/><text x="39.5766%" y="255.50"></text></g><g><title>__do_softirq (5 samples, 0.36%)</title><rect x="39.3266%" y="229" width="0.3582%" height="15" fill="rgb(239,54,39)"/><text x="39.5766%" y="239.50"></text></g><g><title>net_rx_action (5 samples, 0.36%)</title><rect x="39.3266%" y="213" width="0.3582%" height="15" fill="rgb(230,99,41)"/><text x="39.5766%" y="223.50"></text></g><g><title>process_backlog (5 samples, 0.36%)</title><rect x="39.3266%" y="197" width="0.3582%" height="15" fill="rgb(253,106,12)"/><text x="39.5766%" y="207.50"></text></g><g><title>__netif_receive_skb_one_core (5 samples, 0.36%)</title><rect x="39.3266%" y="181" width="0.3582%" height="15" fill="rgb(213,46,41)"/><text x="39.5766%" y="191.50"></text></g><g><title>ip_rcv (5 samples, 0.36%)</title><rect x="39.3266%" y="165" width="0.3582%" height="15" fill="rgb(215,133,35)"/><text x="39.5766%" y="175.50"></text></g><g><title>_int_free (10 samples, 0.72%)</title><rect x="39.6848%" y="549" width="0.7163%" height="15" fill="rgb(213,28,5)"/><text x="39.9348%" y="559.50"></text></g><g><title>__GI___libc_malloc (16 samples, 1.15%)</title><rect x="41.3324%" y="517" width="1.1461%" height="15" fill="rgb(215,77,49)"/><text x="41.5824%" y="527.50"></text></g><g><title>__rdl_alloc (2 samples, 0.14%)</title><rect x="42.4785%" y="517" width="0.1433%" height="15" fill="rgb(248,100,22)"/><text x="42.7285%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.14%)</title><rect x="42.4785%" y="501" width="0.1433%" height="15" fill="rgb(208,67,9)"/><text x="42.7285%" y="511.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (23 samples, 1.65%)</title><rect x="41.0458%" y="533" width="1.6476%" height="15" fill="rgb(219,133,21)"/><text x="41.2958%" y="543.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="44.1977%" y="453" width="0.1433%" height="15" fill="rgb(246,46,29)"/><text x="44.4477%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.43%)</title><rect x="43.9828%" y="469" width="0.4298%" height="15" fill="rgb(246,185,52)"/><text x="44.2328%" y="479.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="44.9857%" y="453" width="0.2149%" height="15" fill="rgb(252,136,11)"/><text x="45.2357%" y="463.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 2.94%)</title><rect x="42.6934%" y="533" width="2.9370%" height="15" fill="rgb(219,138,53)"/><text x="42.9434%" y="543.50">&lt;m..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (33 samples, 2.36%)</title><rect x="43.2665%" y="517" width="2.3639%" height="15" fill="rgb(211,51,23)"/><text x="43.5165%" y="527.50">my..</text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (29 samples, 2.08%)</title><rect x="43.5530%" y="501" width="2.0774%" height="15" fill="rgb(247,221,28)"/><text x="43.8030%" y="511.50">m..</text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (26 samples, 1.86%)</title><rect x="43.7679%" y="485" width="1.8625%" height="15" fill="rgb(251,222,45)"/><text x="44.0179%" y="495.50">m..</text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (17 samples, 1.22%)</title><rect x="44.4126%" y="469" width="1.2178%" height="15" fill="rgb(217,162,53)"/><text x="44.6626%" y="479.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (4 samples, 0.29%)</title><rect x="45.3438%" y="453" width="0.2865%" height="15" fill="rgb(229,93,14)"/><text x="45.5938%" y="463.50"></text></g><g><title>__GI___libc_free (4 samples, 0.29%)</title><rect x="45.6304%" y="533" width="0.2865%" height="15" fill="rgb(209,67,49)"/><text x="45.8804%" y="543.50"></text></g><g><title>_int_free (13 samples, 0.93%)</title><rect x="45.9885%" y="533" width="0.9312%" height="15" fill="rgb(213,87,29)"/><text x="46.2385%" y="543.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="46.9914%" y="437" width="0.2149%" height="15" fill="rgb(205,151,52)"/><text x="47.2414%" y="447.50"></text></g><g><title>mysql::conn::Conn::read_packet (96 samples, 6.88%)</title><rect x="40.4011%" y="549" width="6.8768%" height="15" fill="rgb(253,215,39)"/><text x="40.6511%" y="559.50">mysql::co..</text></g><g><title>std::io::error::Error::_new (4 samples, 0.29%)</title><rect x="46.9914%" y="533" width="0.2865%" height="15" fill="rgb(221,220,41)"/><text x="47.2414%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.29%)</title><rect x="46.9914%" y="517" width="0.2865%" height="15" fill="rgb(218,133,21)"/><text x="47.2414%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.29%)</title><rect x="46.9914%" y="501" width="0.2865%" height="15" fill="rgb(221,193,43)"/><text x="47.2414%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.29%)</title><rect x="46.9914%" y="485" width="0.2865%" height="15" fill="rgb(240,128,52)"/><text x="47.2414%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.29%)</title><rect x="46.9914%" y="469" width="0.2865%" height="15" fill="rgb(253,114,12)"/><text x="47.2414%" y="479.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.29%)</title><rect x="46.9914%" y="453" width="0.2865%" height="15" fill="rgb(215,223,47)"/><text x="47.2414%" y="463.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.36%)</title><rect x="48.4957%" y="517" width="0.3582%" height="15" fill="rgb(248,225,23)"/><text x="48.7457%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 1.22%)</title><rect x="47.9226%" y="533" width="1.2178%" height="15" fill="rgb(250,108,0)"/><text x="48.1726%" y="543.50"></text></g><g><title>__rust_alloc (3 samples, 0.21%)</title><rect x="48.9255%" y="517" width="0.2149%" height="15" fill="rgb(228,208,7)"/><text x="49.1755%" y="527.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="49.3553%" y="517" width="0.2149%" height="15" fill="rgb(244,45,10)"/><text x="49.6053%" y="527.50"></text></g><g><title>lobsters_microbenchmarks::main (153 samples, 10.96%)</title><rect x="39.0401%" y="629" width="10.9599%" height="15" fill="rgb(207,125,25)"/><text x="39.2901%" y="639.50">lobsters_microbe..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (152 samples, 10.89%)</title><rect x="39.1117%" y="613" width="10.8883%" height="15" fill="rgb(210,195,18)"/><text x="39.3617%" y="623.50">lobsters_microbe..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 10.32%)</title><rect x="39.6848%" y="597" width="10.3152%" height="15" fill="rgb(249,80,12)"/><text x="39.9348%" y="607.50">&lt;mysql::conn::q..</text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (144 samples, 10.32%)</title><rect x="39.6848%" y="581" width="10.3152%" height="15" fill="rgb(221,65,9)"/><text x="39.9348%" y="591.50">&lt;mysql::conn::q..</text></g><g><title>mysql::conn::Conn::next_text (144 samples, 10.32%)</title><rect x="39.6848%" y="565" width="10.3152%" height="15" fill="rgb(235,49,36)"/><text x="39.9348%" y="575.50">mysql::conn::Co..</text></g><g><title>mysql_common::value::read_text_values (38 samples, 2.72%)</title><rect x="47.2779%" y="549" width="2.7221%" height="15" fill="rgb(225,32,20)"/><text x="47.5279%" y="559.50">my..</text></g><g><title>mysql_common::value::read_text_value (12 samples, 0.86%)</title><rect x="49.1404%" y="533" width="0.8596%" height="15" fill="rgb(215,141,46)"/><text x="49.3904%" y="543.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (3 samples, 0.21%)</title><rect x="49.7851%" y="517" width="0.2149%" height="15" fill="rgb(250,160,47)"/><text x="50.0351%" y="527.50"></text></g><g><title>main (22 samples, 1.58%)</title><rect x="50.0000%" y="629" width="1.5759%" height="15" fill="rgb(216,222,40)"/><text x="50.2500%" y="639.50"></text></g><g><title>std::rt::lang_start_internal (22 samples, 1.58%)</title><rect x="50.0000%" y="613" width="1.5759%" height="15" fill="rgb(234,217,39)"/><text x="50.2500%" y="623.50"></text></g><g><title>std::panic::catch_unwind (22 samples, 1.58%)</title><rect x="50.0000%" y="597" width="1.5759%" height="15" fill="rgb(207,178,40)"/><text x="50.2500%" y="607.50"></text></g><g><title>std::panicking::try (22 samples, 1.58%)</title><rect x="50.0000%" y="581" width="1.5759%" height="15" fill="rgb(221,136,13)"/><text x="50.2500%" y="591.50"></text></g><g><title>std::panicking::try::do_call (22 samples, 1.58%)</title><rect x="50.0000%" y="565" width="1.5759%" height="15" fill="rgb(249,199,10)"/><text x="50.2500%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (22 samples, 1.58%)</title><rect x="50.0000%" y="549" width="1.5759%" height="15" fill="rgb(249,222,13)"/><text x="50.2500%" y="559.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (22 samples, 1.58%)</title><rect x="50.0000%" y="533" width="1.5759%" height="15" fill="rgb(244,185,38)"/><text x="50.2500%" y="543.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 1.58%)</title><rect x="50.0000%" y="517" width="1.5759%" height="15" fill="rgb(236,202,9)"/><text x="50.2500%" y="527.50"></text></g><g><title>lobsters_microbenchmarks::main (22 samples, 1.58%)</title><rect x="50.0000%" y="501" width="1.5759%" height="15" fill="rgb(250,229,37)"/><text x="50.2500%" y="511.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (22 samples, 1.58%)</title><rect x="50.0000%" y="485" width="1.5759%" height="15" fill="rgb(206,174,23)"/><text x="50.2500%" y="495.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.58%)</title><rect x="50.0000%" y="469" width="1.5759%" height="15" fill="rgb(211,33,43)"/><text x="50.2500%" y="479.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (4 samples, 0.29%)</title><rect x="51.5759%" y="613" width="0.2865%" height="15" fill="rgb(245,58,50)"/><text x="51.8259%" y="623.50"></text></g><g><title>decor_mem::Shim::create_schema (4 samples, 0.29%)</title><rect x="51.5759%" y="597" width="0.2865%" height="15" fill="rgb(244,68,36)"/><text x="51.8259%" y="607.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (4 samples, 0.29%)</title><rect x="51.5759%" y="581" width="0.2865%" height="15" fill="rgb(232,229,15)"/><text x="51.8259%" y="591.50"></text></g><g><title>sql_parser::parser::parse_statements (4 samples, 0.29%)</title><rect x="51.5759%" y="565" width="0.2865%" height="15" fill="rgb(254,30,23)"/><text x="51.8259%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (3 samples, 0.21%)</title><rect x="51.6476%" y="549" width="0.2149%" height="15" fill="rgb(235,160,14)"/><text x="51.8976%" y="559.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (2 samples, 0.14%)</title><rect x="51.7192%" y="533" width="0.1433%" height="15" fill="rgb(212,155,44)"/><text x="51.9692%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="51.8625%" y="581" width="0.1433%" height="15" fill="rgb(226,2,50)"/><text x="52.1125%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="51.8625%" y="565" width="0.1433%" height="15" fill="rgb(234,177,6)"/><text x="52.1125%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="51.8625%" y="549" width="0.1433%" height="15" fill="rgb(217,24,9)"/><text x="52.1125%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="51.8625%" y="533" width="0.1433%" height="15" fill="rgb(220,13,46)"/><text x="52.1125%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="51.8625%" y="517" width="0.1433%" height="15" fill="rgb(239,221,27)"/><text x="52.1125%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.14%)</title><rect x="51.8625%" y="501" width="0.1433%" height="15" fill="rgb(222,198,25)"/><text x="52.1125%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.14%)</title><rect x="51.8625%" y="485" width="0.1433%" height="15" fill="rgb(211,99,13)"/><text x="52.1125%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="51.8625%" y="469" width="0.1433%" height="15" fill="rgb(232,111,31)"/><text x="52.1125%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="51.8625%" y="453" width="0.1433%" height="15" fill="rgb(245,82,37)"/><text x="52.1125%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="51.8625%" y="437" width="0.1433%" height="15" fill="rgb(227,149,46)"/><text x="52.1125%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.14%)</title><rect x="51.8625%" y="421" width="0.1433%" height="15" fill="rgb(218,36,50)"/><text x="52.1125%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.14%)</title><rect x="51.8625%" y="405" width="0.1433%" height="15" fill="rgb(226,80,48)"/><text x="52.1125%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="51.8625%" y="389" width="0.1433%" height="15" fill="rgb(238,224,15)"/><text x="52.1125%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="51.8625%" y="373" width="0.1433%" height="15" fill="rgb(241,136,10)"/><text x="52.1125%" y="383.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="51.8625%" y="357" width="0.1433%" height="15" fill="rgb(208,32,45)"/><text x="52.1125%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="52.0057%" y="581" width="0.1433%" height="15" fill="rgb(207,135,9)"/><text x="52.2557%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="52.0057%" y="565" width="0.1433%" height="15" fill="rgb(206,86,44)"/><text x="52.2557%" y="575.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="52.0057%" y="549" width="0.1433%" height="15" fill="rgb(245,177,15)"/><text x="52.2557%" y="559.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="52.0057%" y="533" width="0.1433%" height="15" fill="rgb(206,64,50)"/><text x="52.2557%" y="543.50"></text></g><g><title>sysmalloc (2 samples, 0.14%)</title><rect x="52.0057%" y="517" width="0.1433%" height="15" fill="rgb(234,36,40)"/><text x="52.2557%" y="527.50"></text></g><g><title>sock_def_readable (2 samples, 0.14%)</title><rect x="52.7221%" y="37" width="0.1433%" height="15" fill="rgb(213,64,8)"/><text x="52.9721%" y="47.50"></text></g><g><title>__ip_queue_xmit (5 samples, 0.36%)</title><rect x="52.5788%" y="309" width="0.3582%" height="15" fill="rgb(210,75,36)"/><text x="52.8288%" y="319.50"></text></g><g><title>ip_output (5 samples, 0.36%)</title><rect x="52.5788%" y="293" width="0.3582%" height="15" fill="rgb(229,88,21)"/><text x="52.8288%" y="303.50"></text></g><g><title>ip_finish_output2 (5 samples, 0.36%)</title><rect x="52.5788%" y="277" width="0.3582%" height="15" fill="rgb(252,204,47)"/><text x="52.8288%" y="287.50"></text></g><g><title>__local_bh_enable_ip (4 samples, 0.29%)</title><rect x="52.6504%" y="261" width="0.2865%" height="15" fill="rgb(208,77,27)"/><text x="52.9004%" y="271.50"></text></g><g><title>do_softirq (4 samples, 0.29%)</title><rect x="52.6504%" y="245" width="0.2865%" height="15" fill="rgb(221,76,26)"/><text x="52.9004%" y="255.50"></text></g><g><title>do_softirq_own_stack (4 samples, 0.29%)</title><rect x="52.6504%" y="229" width="0.2865%" height="15" fill="rgb(225,139,18)"/><text x="52.9004%" y="239.50"></text></g><g><title>__do_softirq (4 samples, 0.29%)</title><rect x="52.6504%" y="213" width="0.2865%" height="15" fill="rgb(230,137,11)"/><text x="52.9004%" y="223.50"></text></g><g><title>net_rx_action (4 samples, 0.29%)</title><rect x="52.6504%" y="197" width="0.2865%" height="15" fill="rgb(212,28,1)"/><text x="52.9004%" y="207.50"></text></g><g><title>process_backlog (4 samples, 0.29%)</title><rect x="52.6504%" y="181" width="0.2865%" height="15" fill="rgb(248,164,17)"/><text x="52.9004%" y="191.50"></text></g><g><title>__netif_receive_skb_one_core (4 samples, 0.29%)</title><rect x="52.6504%" y="165" width="0.2865%" height="15" fill="rgb(222,171,42)"/><text x="52.9004%" y="175.50"></text></g><g><title>ip_rcv (4 samples, 0.29%)</title><rect x="52.6504%" y="149" width="0.2865%" height="15" fill="rgb(243,84,45)"/><text x="52.9004%" y="159.50"></text></g><g><title>ip_local_deliver (4 samples, 0.29%)</title><rect x="52.6504%" y="133" width="0.2865%" height="15" fill="rgb(252,49,23)"/><text x="52.9004%" y="143.50"></text></g><g><title>ip_local_deliver_finish (4 samples, 0.29%)</title><rect x="52.6504%" y="117" width="0.2865%" height="15" fill="rgb(215,19,7)"/><text x="52.9004%" y="127.50"></text></g><g><title>ip_protocol_deliver_rcu (4 samples, 0.29%)</title><rect x="52.6504%" y="101" width="0.2865%" height="15" fill="rgb(238,81,41)"/><text x="52.9004%" y="111.50"></text></g><g><title>tcp_v4_rcv (4 samples, 0.29%)</title><rect x="52.6504%" y="85" width="0.2865%" height="15" fill="rgb(210,199,37)"/><text x="52.9004%" y="95.50"></text></g><g><title>tcp_v4_do_rcv (3 samples, 0.21%)</title><rect x="52.7221%" y="69" width="0.2149%" height="15" fill="rgb(244,192,49)"/><text x="52.9721%" y="79.50"></text></g><g><title>tcp_rcv_established (3 samples, 0.21%)</title><rect x="52.7221%" y="53" width="0.2149%" height="15" fill="rgb(226,211,11)"/><text x="52.9721%" y="63.50"></text></g><g><title>__tcp_transmit_skb (6 samples, 0.43%)</title><rect x="52.5788%" y="325" width="0.4298%" height="15" fill="rgb(236,162,54)"/><text x="52.8288%" y="335.50"></text></g><g><title>__tcp_push_pending_frames (7 samples, 0.50%)</title><rect x="52.5788%" y="357" width="0.5014%" height="15" fill="rgb(220,229,9)"/><text x="52.8288%" y="367.50"></text></g><g><title>tcp_write_xmit (7 samples, 0.50%)</title><rect x="52.5788%" y="341" width="0.5014%" height="15" fill="rgb(250,87,22)"/><text x="52.8288%" y="351.50"></text></g><g><title>sock_sendmsg (9 samples, 0.64%)</title><rect x="52.5072%" y="405" width="0.6447%" height="15" fill="rgb(239,43,17)"/><text x="52.7572%" y="415.50"></text></g><g><title>tcp_sendmsg (9 samples, 0.64%)</title><rect x="52.5072%" y="389" width="0.6447%" height="15" fill="rgb(231,177,25)"/><text x="52.7572%" y="399.50"></text></g><g><title>tcp_sendmsg_locked (8 samples, 0.57%)</title><rect x="52.5788%" y="373" width="0.5731%" height="15" fill="rgb(219,179,1)"/><text x="52.8288%" y="383.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (10 samples, 0.72%)</title><rect x="52.5072%" y="517" width="0.7163%" height="15" fill="rgb(238,219,53)"/><text x="52.7572%" y="527.50"></text></g><g><title>std::sys_common::net::TcpStream::write (10 samples, 0.72%)</title><rect x="52.5072%" y="501" width="0.7163%" height="15" fill="rgb(232,167,36)"/><text x="52.7572%" y="511.50"></text></g><g><title>__libc_send (10 samples, 0.72%)</title><rect x="52.5072%" y="485" width="0.7163%" height="15" fill="rgb(244,19,51)"/><text x="52.7572%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (10 samples, 0.72%)</title><rect x="52.5072%" y="469" width="0.7163%" height="15" fill="rgb(224,6,22)"/><text x="52.7572%" y="479.50"></text></g><g><title>do_syscall_64 (10 samples, 0.72%)</title><rect x="52.5072%" y="453" width="0.7163%" height="15" fill="rgb(224,145,5)"/><text x="52.7572%" y="463.50"></text></g><g><title>__x64_sys_sendto (10 samples, 0.72%)</title><rect x="52.5072%" y="437" width="0.7163%" height="15" fill="rgb(234,130,49)"/><text x="52.7572%" y="447.50"></text></g><g><title>__sys_sendto (10 samples, 0.72%)</title><rect x="52.5072%" y="421" width="0.7163%" height="15" fill="rgb(254,6,2)"/><text x="52.7572%" y="431.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (15 samples, 1.07%)</title><rect x="52.2206%" y="581" width="1.0745%" height="15" fill="rgb(208,96,46)"/><text x="52.4706%" y="591.50"></text></g><g><title>mysql::conn::Conn::_query (12 samples, 0.86%)</title><rect x="52.4355%" y="565" width="0.8596%" height="15" fill="rgb(239,3,39)"/><text x="52.6855%" y="575.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (12 samples, 0.86%)</title><rect x="52.4355%" y="549" width="0.8596%" height="15" fill="rgb(233,210,1)"/><text x="52.6855%" y="559.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (12 samples, 0.86%)</title><rect x="52.4355%" y="533" width="0.8596%" height="15" fill="rgb(244,137,37)"/><text x="52.6855%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.21%)</title><rect x="53.5100%" y="485" width="0.2149%" height="15" fill="rgb(240,136,2)"/><text x="53.7600%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.21%)</title><rect x="53.5100%" y="469" width="0.2149%" height="15" fill="rgb(239,18,37)"/><text x="53.7600%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.21%)</title><rect x="53.5100%" y="453" width="0.2149%" height="15" fill="rgb(218,185,22)"/><text x="53.7600%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.14%)</title><rect x="53.5817%" y="437" width="0.1433%" height="15" fill="rgb(225,218,4)"/><text x="53.8317%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.43%)</title><rect x="53.5100%" y="549" width="0.4298%" height="15" fill="rgb(230,182,32)"/><text x="53.7600%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.43%)</title><rect x="53.5100%" y="533" width="0.4298%" height="15" fill="rgb(242,56,43)"/><text x="53.7600%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.43%)</title><rect x="53.5100%" y="517" width="0.4298%" height="15" fill="rgb(233,99,24)"/><text x="53.7600%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.43%)</title><rect x="53.5100%" y="501" width="0.4298%" height="15" fill="rgb(234,209,42)"/><text x="53.7600%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.21%)</title><rect x="53.7249%" y="485" width="0.2149%" height="15" fill="rgb(227,7,12)"/><text x="53.9749%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.21%)</title><rect x="53.7249%" y="469" width="0.2149%" height="15" fill="rgb(245,203,43)"/><text x="53.9749%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.21%)</title><rect x="53.7249%" y="453" width="0.2149%" height="15" fill="rgb(238,205,33)"/><text x="53.9749%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.21%)</title><rect x="53.7249%" y="437" width="0.2149%" height="15" fill="rgb(231,56,7)"/><text x="53.9749%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.21%)</title><rect x="53.7249%" y="421" width="0.2149%" height="15" fill="rgb(244,186,29)"/><text x="53.9749%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.21%)</title><rect x="53.7249%" y="405" width="0.2149%" height="15" fill="rgb(234,111,31)"/><text x="53.9749%" y="415.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.21%)</title><rect x="53.7249%" y="389" width="0.2149%" height="15" fill="rgb(241,149,10)"/><text x="53.9749%" y="399.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="53.7249%" y="373" width="0.2149%" height="15" fill="rgb(249,206,44)"/><text x="53.9749%" y="383.50"></text></g><g><title>__GI___libc_free (6 samples, 0.43%)</title><rect x="54.5129%" y="517" width="0.4298%" height="15" fill="rgb(251,153,30)"/><text x="54.7629%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 3.01%)</title><rect x="53.9398%" y="533" width="3.0086%" height="15" fill="rgb(239,152,38)"/><text x="54.1898%" y="543.50">&lt;ha..</text></g><g><title>_int_free (27 samples, 1.93%)</title><rect x="55.0143%" y="517" width="1.9341%" height="15" fill="rgb(249,139,47)"/><text x="55.2643%" y="527.50">_..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 3.65%)</title><rect x="53.9398%" y="549" width="3.6533%" height="15" fill="rgb(244,64,35)"/><text x="54.1898%" y="559.50">&lt;has..</text></g><g><title>_int_free (9 samples, 0.64%)</title><rect x="56.9484%" y="533" width="0.6447%" height="15" fill="rgb(216,46,15)"/><text x="57.1984%" y="543.50"></text></g><g><title>malloc_consolidate (9 samples, 0.64%)</title><rect x="56.9484%" y="517" width="0.6447%" height="15" fill="rgb(250,74,19)"/><text x="57.1984%" y="527.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.14%)</title><rect x="57.4499%" y="501" width="0.1433%" height="15" fill="rgb(249,42,33)"/><text x="57.6999%" y="511.50"></text></g><g><title>__GI___libc_free (14 samples, 1.00%)</title><rect x="57.5931%" y="549" width="1.0029%" height="15" fill="rgb(242,149,17)"/><text x="57.8431%" y="559.50"></text></g><g><title>__GI___libc_malloc (21 samples, 1.50%)</title><rect x="58.5960%" y="549" width="1.5043%" height="15" fill="rgb(244,29,21)"/><text x="58.8460%" y="559.50"></text></g><g><title>_int_malloc (17 samples, 1.22%)</title><rect x="58.8825%" y="533" width="1.2178%" height="15" fill="rgb(220,130,37)"/><text x="59.1325%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.14%)</title><rect x="60.1003%" y="549" width="0.1433%" height="15" fill="rgb(211,67,2)"/><text x="60.3503%" y="559.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.21%)</title><rect x="60.2436%" y="549" width="0.2149%" height="15" fill="rgb(235,68,52)"/><text x="60.4936%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.21%)</title><rect x="60.2436%" y="533" width="0.2149%" height="15" fill="rgb(246,142,3)"/><text x="60.4936%" y="543.50"></text></g><g><title>__rust_dealloc (3 samples, 0.21%)</title><rect x="60.4585%" y="549" width="0.2149%" height="15" fill="rgb(241,25,7)"/><text x="60.7085%" y="559.50"></text></g><g><title>_int_free (44 samples, 3.15%)</title><rect x="60.6734%" y="549" width="3.1519%" height="15" fill="rgb(242,119,39)"/><text x="60.9234%" y="559.50">_in..</text></g><g><title>decor_mem::select::get_query_results (159 samples, 11.39%)</title><rect x="53.2951%" y="581" width="11.3897%" height="15" fill="rgb(241,98,45)"/><text x="53.5451%" y="591.50">decor_mem::select..</text></g><g><title>decor_mem::select::get_setexpr_results (159 samples, 11.39%)</title><rect x="53.2951%" y="565" width="11.3897%" height="15" fill="rgb(254,28,30)"/><text x="53.5451%" y="575.50">decor_mem::select..</text></g><g><title>core::ptr::drop_in_place (11 samples, 0.79%)</title><rect x="63.8968%" y="549" width="0.7880%" height="15" fill="rgb(241,142,54)"/><text x="64.1468%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (3 samples, 0.21%)</title><rect x="64.7564%" y="517" width="0.2149%" height="15" fill="rgb(222,85,15)"/><text x="65.0064%" y="527.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (3 samples, 0.21%)</title><rect x="64.7564%" y="501" width="0.2149%" height="15" fill="rgb(210,85,47)"/><text x="65.0064%" y="511.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (3 samples, 0.21%)</title><rect x="64.7564%" y="485" width="0.2149%" height="15" fill="rgb(224,206,25)"/><text x="65.0064%" y="495.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (3 samples, 0.21%)</title><rect x="64.7564%" y="469" width="0.2149%" height="15" fill="rgb(243,201,19)"/><text x="65.0064%" y="479.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (3 samples, 0.21%)</title><rect x="64.7564%" y="453" width="0.2149%" height="15" fill="rgb(236,59,4)"/><text x="65.0064%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (3 samples, 0.21%)</title><rect x="64.7564%" y="437" width="0.2149%" height="15" fill="rgb(254,179,45)"/><text x="65.0064%" y="447.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (2 samples, 0.14%)</title><rect x="64.8281%" y="421" width="0.1433%" height="15" fill="rgb(226,14,10)"/><text x="65.0781%" y="431.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (4 samples, 0.29%)</title><rect x="64.7564%" y="533" width="0.2865%" height="15" fill="rgb(244,27,41)"/><text x="65.0064%" y="543.50"></text></g><g><title>core::fmt::write (7 samples, 0.50%)</title><rect x="64.7564%" y="549" width="0.5014%" height="15" fill="rgb(235,35,32)"/><text x="65.0064%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.21%)</title><rect x="65.0430%" y="533" width="0.2149%" height="15" fill="rgb(218,68,31)"/><text x="65.2930%" y="543.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (188 samples, 13.47%)</title><rect x="51.8625%" y="597" width="13.4670%" height="15" fill="rgb(207,120,37)"/><text x="52.1125%" y="607.50">decor_mem::query_tra..</text></g><g><title>decor_mem::views::Views::insert (9 samples, 0.64%)</title><rect x="64.6848%" y="581" width="0.6447%" height="15" fill="rgb(227,98,0)"/><text x="64.9348%" y="591.50"></text></g><g><title>decor_mem::views::View::insert_into_index (8 samples, 0.57%)</title><rect x="64.7564%" y="565" width="0.5731%" height="15" fill="rgb(207,7,3)"/><text x="65.0064%" y="575.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (195 samples, 13.97%)</title><rect x="51.5759%" y="629" width="13.9685%" height="15" fill="rgb(206,98,19)"/><text x="51.8259%" y="639.50">msql_srv::MysqlInterm..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (191 samples, 13.68%)</title><rect x="51.8625%" y="613" width="13.6819%" height="15" fill="rgb(217,5,26)"/><text x="52.1125%" y="623.50">&lt;decor_mem::Shim as m..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (3 samples, 0.21%)</title><rect x="65.3295%" y="597" width="0.2149%" height="15" fill="rgb(235,190,38)"/><text x="65.5795%" y="607.50"></text></g><g><title>sql_parser::parser::parse_statements (3 samples, 0.21%)</title><rect x="65.3295%" y="581" width="0.2149%" height="15" fill="rgb(247,86,24)"/><text x="65.5795%" y="591.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (3 samples, 0.21%)</title><rect x="65.3295%" y="565" width="0.2149%" height="15" fill="rgb(205,101,16)"/><text x="65.5795%" y="575.50"></text></g><g><title>mysql::conn::Conn::read_packet (2 samples, 0.14%)</title><rect x="65.6877%" y="629" width="0.1433%" height="15" fill="rgb(246,168,33)"/><text x="65.9377%" y="639.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (2 samples, 0.14%)</title><rect x="65.8309%" y="629" width="0.1433%" height="15" fill="rgb(231,114,1)"/><text x="66.0809%" y="639.50"></text></g><g><title>mysql_common::value::read_text_values (3 samples, 0.21%)</title><rect x="66.1175%" y="629" width="0.2149%" height="15" fill="rgb(207,184,53)"/><text x="66.3675%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 1.86%)</title><rect x="66.8338%" y="517" width="1.8625%" height="15" fill="rgb(224,95,51)"/><text x="67.0838%" y="527.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 1.86%)</title><rect x="66.8338%" y="501" width="1.8625%" height="15" fill="rgb(212,188,45)"/><text x="67.0838%" y="511.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (26 samples, 1.86%)</title><rect x="66.8338%" y="485" width="1.8625%" height="15" fill="rgb(223,154,38)"/><text x="67.0838%" y="495.50">a..</text></g><g><title>alloc::slice::hack::to_vec (26 samples, 1.86%)</title><rect x="66.8338%" y="469" width="1.8625%" height="15" fill="rgb(251,22,52)"/><text x="67.0838%" y="479.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (26 samples, 1.86%)</title><rect x="66.8338%" y="453" width="1.8625%" height="15" fill="rgb(229,209,22)"/><text x="67.0838%" y="463.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 1.86%)</title><rect x="66.8338%" y="437" width="1.8625%" height="15" fill="rgb(234,138,34)"/><text x="67.0838%" y="447.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (26 samples, 1.86%)</title><rect x="66.8338%" y="421" width="1.8625%" height="15" fill="rgb(212,95,11)"/><text x="67.0838%" y="431.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 1.86%)</title><rect x="66.8338%" y="405" width="1.8625%" height="15" fill="rgb(240,179,47)"/><text x="67.0838%" y="415.50">c..</text></g><g><title>__memmove_avx_unaligned_erms (26 samples, 1.86%)</title><rect x="66.8338%" y="389" width="1.8625%" height="15" fill="rgb(240,163,11)"/><text x="67.0838%" y="399.50">_..</text></g><g><title>sql_parser::parser::Parser::parse_data_type (31 samples, 2.22%)</title><rect x="66.5473%" y="549" width="2.2206%" height="15" fill="rgb(236,37,12)"/><text x="66.7973%" y="559.50">s..</text></g><g><title>sql_parser::parser::Parser::expected (28 samples, 2.01%)</title><rect x="66.7622%" y="533" width="2.0057%" height="15" fill="rgb(232,164,16)"/><text x="67.0122%" y="543.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_keyword (2 samples, 0.14%)</title><rect x="68.7679%" y="549" width="0.1433%" height="15" fill="rgb(244,205,15)"/><text x="69.0179%" y="559.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (36 samples, 2.58%)</title><rect x="66.4040%" y="597" width="2.5788%" height="15" fill="rgb(223,117,47)"/><text x="66.6540%" y="607.50">sq..</text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 2.58%)</title><rect x="66.4040%" y="581" width="2.5788%" height="15" fill="rgb(244,107,35)"/><text x="66.6540%" y="591.50">sq..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (36 samples, 2.58%)</title><rect x="66.4040%" y="565" width="2.5788%" height="15" fill="rgb(205,140,8)"/><text x="66.6540%" y="575.50">sq..</text></g><g><title>sql_parser::parser::Parser::check_descent (37 samples, 2.65%)</title><rect x="66.4040%" y="629" width="2.6504%" height="15" fill="rgb(228,84,46)"/><text x="66.6540%" y="639.50">sq..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (37 samples, 2.65%)</title><rect x="66.4040%" y="613" width="2.6504%" height="15" fill="rgb(254,188,9)"/><text x="66.6540%" y="623.50">sq..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="69.1261%" y="533" width="0.1433%" height="15" fill="rgb(206,112,54)"/><text x="69.3761%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="69.1261%" y="517" width="0.1433%" height="15" fill="rgb(216,84,49)"/><text x="69.3761%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.14%)</title><rect x="69.1261%" y="501" width="0.1433%" height="15" fill="rgb(214,194,35)"/><text x="69.3761%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.14%)</title><rect x="69.1261%" y="485" width="0.1433%" height="15" fill="rgb(249,28,3)"/><text x="69.3761%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="69.1261%" y="469" width="0.1433%" height="15" fill="rgb(222,56,52)"/><text x="69.3761%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="69.1261%" y="453" width="0.1433%" height="15" fill="rgb(245,217,50)"/><text x="69.3761%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="69.1261%" y="437" width="0.1433%" height="15" fill="rgb(213,201,24)"/><text x="69.3761%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.14%)</title><rect x="69.1261%" y="421" width="0.1433%" height="15" fill="rgb(248,116,28)"/><text x="69.3761%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.14%)</title><rect x="69.1261%" y="405" width="0.1433%" height="15" fill="rgb(219,72,43)"/><text x="69.3761%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="69.1261%" y="389" width="0.1433%" height="15" fill="rgb(209,138,14)"/><text x="69.3761%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="69.1261%" y="373" width="0.1433%" height="15" fill="rgb(222,18,33)"/><text x="69.3761%" y="383.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="69.1261%" y="357" width="0.1433%" height="15" fill="rgb(213,199,7)"/><text x="69.3761%" y="367.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="69.1261%" y="341" width="0.1433%" height="15" fill="rgb(250,110,10)"/><text x="69.3761%" y="351.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (3 samples, 0.21%)</title><rect x="69.1261%" y="629" width="0.2149%" height="15" fill="rgb(248,123,6)"/><text x="69.3761%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (3 samples, 0.21%)</title><rect x="69.1261%" y="613" width="0.2149%" height="15" fill="rgb(206,91,31)"/><text x="69.3761%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.21%)</title><rect x="69.1261%" y="597" width="0.2149%" height="15" fill="rgb(211,154,13)"/><text x="69.3761%" y="607.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (3 samples, 0.21%)</title><rect x="69.1261%" y="581" width="0.2149%" height="15" fill="rgb(225,148,7)"/><text x="69.3761%" y="591.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (3 samples, 0.21%)</title><rect x="69.1261%" y="565" width="0.2149%" height="15" fill="rgb(220,160,43)"/><text x="69.3761%" y="575.50"></text></g><g><title>sql_parser::parser::Parser::expected (3 samples, 0.21%)</title><rect x="69.1261%" y="549" width="0.2149%" height="15" fill="rgb(213,52,39)"/><text x="69.3761%" y="559.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (2 samples, 0.14%)</title><rect x="69.3410%" y="581" width="0.1433%" height="15" fill="rgb(243,137,7)"/><text x="69.5910%" y="591.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (3 samples, 0.21%)</title><rect x="69.3410%" y="629" width="0.2149%" height="15" fill="rgb(230,79,13)"/><text x="69.5910%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.21%)</title><rect x="69.3410%" y="613" width="0.2149%" height="15" fill="rgb(247,105,23)"/><text x="69.5910%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (3 samples, 0.21%)</title><rect x="69.3410%" y="597" width="0.2149%" height="15" fill="rgb(223,179,41)"/><text x="69.5910%" y="607.50"></text></g><g><title>__GI___openat (2 samples, 0.14%)</title><rect x="69.6275%" y="421" width="0.1433%" height="15" fill="rgb(218,9,34)"/><text x="69.8775%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.14%)</title><rect x="69.6275%" y="405" width="0.1433%" height="15" fill="rgb(222,106,8)"/><text x="69.8775%" y="415.50"></text></g><g><title>hwloc::Topology::new (3 samples, 0.21%)</title><rect x="69.6275%" y="501" width="0.2149%" height="15" fill="rgb(211,220,0)"/><text x="69.8775%" y="511.50"></text></g><g><title>hwloc_topology_load (3 samples, 0.21%)</title><rect x="69.6275%" y="485" width="0.2149%" height="15" fill="rgb(229,52,16)"/><text x="69.8775%" y="495.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.21%)</title><rect x="69.6275%" y="469" width="0.2149%" height="15" fill="rgb(212,155,18)"/><text x="69.8775%" y="479.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.21%)</title><rect x="69.6275%" y="453" width="0.2149%" height="15" fill="rgb(242,21,14)"/><text x="69.8775%" y="463.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.21%)</title><rect x="69.6275%" y="437" width="0.2149%" height="15" fill="rgb(222,19,48)"/><text x="69.8775%" y="447.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (15 samples, 1.07%)</title><rect x="69.8424%" y="469" width="1.0745%" height="15" fill="rgb(232,45,27)"/><text x="70.0924%" y="479.50"></text></g><g><title>mysql::conn::Conn::next_text (15 samples, 1.07%)</title><rect x="69.8424%" y="453" width="1.0745%" height="15" fill="rgb(249,103,42)"/><text x="70.0924%" y="463.50"></text></g><g><title>__rust_dealloc (4 samples, 0.29%)</title><rect x="70.6304%" y="437" width="0.2865%" height="15" fill="rgb(246,81,33)"/><text x="70.8804%" y="447.50"></text></g><g><title>__GI___libc_free (10 samples, 0.72%)</title><rect x="70.9169%" y="469" width="0.7163%" height="15" fill="rgb(252,33,42)"/><text x="71.1669%" y="479.50"></text></g><g><title>_int_free (8 samples, 0.57%)</title><rect x="71.6332%" y="469" width="0.5731%" height="15" fill="rgb(209,212,41)"/><text x="71.8832%" y="479.50"></text></g><g><title>std::rt::lang_start_internal (50 samples, 3.58%)</title><rect x="69.6275%" y="629" width="3.5817%" height="15" fill="rgb(207,154,6)"/><text x="69.8775%" y="639.50">std:..</text></g><g><title>std::panic::catch_unwind (50 samples, 3.58%)</title><rect x="69.6275%" y="613" width="3.5817%" height="15" fill="rgb(223,64,47)"/><text x="69.8775%" y="623.50">std:..</text></g><g><title>std::panicking::try (50 samples, 3.58%)</title><rect x="69.6275%" y="597" width="3.5817%" height="15" fill="rgb(211,161,38)"/><text x="69.8775%" y="607.50">std:..</text></g><g><title>std::panicking::try::do_call (50 samples, 3.58%)</title><rect x="69.6275%" y="581" width="3.5817%" height="15" fill="rgb(219,138,40)"/><text x="69.8775%" y="591.50">std:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (50 samples, 3.58%)</title><rect x="69.6275%" y="565" width="3.5817%" height="15" fill="rgb(241,228,46)"/><text x="69.8775%" y="575.50">core..</text></g><g><title>std::rt::lang_start::_{{closure}} (50 samples, 3.58%)</title><rect x="69.6275%" y="549" width="3.5817%" height="15" fill="rgb(223,209,38)"/><text x="69.8775%" y="559.50">std:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (50 samples, 3.58%)</title><rect x="69.6275%" y="533" width="3.5817%" height="15" fill="rgb(236,164,45)"/><text x="69.8775%" y="543.50">std:..</text></g><g><title>lobsters_microbenchmarks::main (50 samples, 3.58%)</title><rect x="69.6275%" y="517" width="3.5817%" height="15" fill="rgb(231,15,5)"/><text x="69.8775%" y="527.50">lobs..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (47 samples, 3.37%)</title><rect x="69.8424%" y="501" width="3.3668%" height="15" fill="rgb(252,35,15)"/><text x="70.0924%" y="511.50">lob..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 3.37%)</title><rect x="69.8424%" y="485" width="3.3668%" height="15" fill="rgb(248,181,18)"/><text x="70.0924%" y="495.50">&lt;my..</text></g><g><title>mysql_common::row::new_row (14 samples, 1.00%)</title><rect x="72.2063%" y="469" width="1.0029%" height="15" fill="rgb(233,39,42)"/><text x="72.4563%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.57%)</title><rect x="72.6361%" y="453" width="0.5731%" height="15" fill="rgb(238,110,33)"/><text x="72.8861%" y="463.50"></text></g><g><title>[unknown] (891 samples, 63.83%)</title><rect x="9.6705%" y="645" width="63.8252%" height="15" fill="rgb(233,195,10)"/><text x="9.9205%" y="655.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.29%)</title><rect x="73.2092%" y="629" width="0.2865%" height="15" fill="rgb(254,105,3)"/><text x="73.4592%" y="639.50"></text></g><g><title>lobsters_microbenchmarks::main (4 samples, 0.29%)</title><rect x="73.2092%" y="613" width="0.2865%" height="15" fill="rgb(221,225,9)"/><text x="73.4592%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (4 samples, 0.29%)</title><rect x="73.2092%" y="597" width="0.2865%" height="15" fill="rgb(224,227,45)"/><text x="73.4592%" y="607.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.29%)</title><rect x="73.2092%" y="581" width="0.2865%" height="15" fill="rgb(229,198,43)"/><text x="73.4592%" y="591.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (4 samples, 0.29%)</title><rect x="73.2092%" y="565" width="0.2865%" height="15" fill="rgb(206,209,35)"/><text x="73.4592%" y="575.50"></text></g><g><title>mysql::conn::Conn::next_text (4 samples, 0.29%)</title><rect x="73.2092%" y="549" width="0.2865%" height="15" fill="rgb(245,195,53)"/><text x="73.4592%" y="559.50"></text></g><g><title>__GI___libc_free (4 samples, 0.29%)</title><rect x="73.2092%" y="533" width="0.2865%" height="15" fill="rgb(240,92,26)"/><text x="73.4592%" y="543.50"></text></g><g><title>__GI___libc_free (6 samples, 0.43%)</title><rect x="74.0688%" y="469" width="0.4298%" height="15" fill="rgb(207,40,23)"/><text x="74.3188%" y="479.50"></text></g><g><title>_int_free (47 samples, 3.37%)</title><rect x="74.4986%" y="469" width="3.3668%" height="15" fill="rgb(223,111,35)"/><text x="74.7486%" y="479.50">_in..</text></g><g><title>malloc_consolidate (42 samples, 3.01%)</title><rect x="74.8567%" y="453" width="3.0086%" height="15" fill="rgb(229,147,28)"/><text x="75.1067%" y="463.50">mal..</text></g><g><title>unlink_chunk.constprop.0 (15 samples, 1.07%)</title><rect x="76.7908%" y="437" width="1.0745%" height="15" fill="rgb(211,29,28)"/><text x="77.0408%" y="447.50"></text></g><g><title>decor_mem::helpers::parser_val_to_common_val (3 samples, 0.21%)</title><rect x="77.8653%" y="469" width="0.2149%" height="15" fill="rgb(228,72,33)"/><text x="78.1153%" y="479.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::end_row (2 samples, 0.14%)</title><rect x="78.0802%" y="469" width="0.1433%" height="15" fill="rgb(205,214,31)"/><text x="78.3302%" y="479.50"></text></g><g><title>msql_srv::packet::PacketWriter&lt;W&gt;::maybe_end_packet (2 samples, 0.14%)</title><rect x="78.0802%" y="453" width="0.1433%" height="15" fill="rgb(224,111,15)"/><text x="78.3302%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.14%)</title><rect x="78.7966%" y="277" width="0.1433%" height="15" fill="rgb(253,21,26)"/><text x="79.0466%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="78.7966%" y="261" width="0.1433%" height="15" fill="rgb(245,139,43)"/><text x="79.0466%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.14%)</title><rect x="78.7966%" y="245" width="0.1433%" height="15" fill="rgb(252,170,7)"/><text x="79.0466%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="78.7966%" y="373" width="0.2149%" height="15" fill="rgb(231,118,14)"/><text x="79.0466%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="78.7966%" y="357" width="0.2149%" height="15" fill="rgb(238,83,0)"/><text x="79.0466%" y="367.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.21%)</title><rect x="78.7966%" y="341" width="0.2149%" height="15" fill="rgb(221,39,39)"/><text x="79.0466%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.21%)</title><rect x="78.7966%" y="325" width="0.2149%" height="15" fill="rgb(222,119,46)"/><text x="79.0466%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.21%)</title><rect x="78.7966%" y="309" width="0.2149%" height="15" fill="rgb(222,165,49)"/><text x="79.0466%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.21%)</title><rect x="78.7966%" y="293" width="0.2149%" height="15" fill="rgb(219,113,52)"/><text x="79.0466%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.14%)</title><rect x="79.1547%" y="197" width="0.1433%" height="15" fill="rgb(214,7,15)"/><text x="79.4047%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.14%)</title><rect x="79.1547%" y="181" width="0.1433%" height="15" fill="rgb(235,32,4)"/><text x="79.4047%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.14%)</title><rect x="79.1547%" y="165" width="0.1433%" height="15" fill="rgb(238,90,54)"/><text x="79.4047%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="79.1547%" y="149" width="0.1433%" height="15" fill="rgb(213,208,19)"/><text x="79.4047%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="79.1547%" y="133" width="0.1433%" height="15" fill="rgb(233,156,4)"/><text x="79.4047%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.29%)</title><rect x="79.0831%" y="341" width="0.2865%" height="15" fill="rgb(207,194,5)"/><text x="79.3331%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="79.1547%" y="325" width="0.2149%" height="15" fill="rgb(206,111,30)"/><text x="79.4047%" y="335.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.21%)</title><rect x="79.1547%" y="309" width="0.2149%" height="15" fill="rgb(243,70,54)"/><text x="79.4047%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.21%)</title><rect x="79.1547%" y="293" width="0.2149%" height="15" fill="rgb(242,28,8)"/><text x="79.4047%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.21%)</title><rect x="79.1547%" y="277" width="0.2149%" height="15" fill="rgb(219,106,18)"/><text x="79.4047%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.21%)</title><rect x="79.1547%" y="261" width="0.2149%" height="15" fill="rgb(244,222,10)"/><text x="79.4047%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.21%)</title><rect x="79.1547%" y="245" width="0.2149%" height="15" fill="rgb(236,179,52)"/><text x="79.4047%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.21%)</title><rect x="79.1547%" y="229" width="0.2149%" height="15" fill="rgb(213,23,39)"/><text x="79.4047%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.21%)</title><rect x="79.1547%" y="213" width="0.2149%" height="15" fill="rgb(238,48,10)"/><text x="79.4047%" y="223.50"></text></g><g><title>alloc::fmt::format (14 samples, 1.00%)</title><rect x="78.5100%" y="421" width="1.0029%" height="15" fill="rgb(251,196,23)"/><text x="78.7600%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (14 samples, 1.00%)</title><rect x="78.5100%" y="405" width="1.0029%" height="15" fill="rgb(250,152,24)"/><text x="78.7600%" y="415.50"></text></g><g><title>core::fmt::write (13 samples, 0.93%)</title><rect x="78.5817%" y="389" width="0.9312%" height="15" fill="rgb(209,150,17)"/><text x="78.8317%" y="399.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (6 samples, 0.43%)</title><rect x="79.0831%" y="373" width="0.4298%" height="15" fill="rgb(234,202,34)"/><text x="79.3331%" y="383.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (6 samples, 0.43%)</title><rect x="79.0831%" y="357" width="0.4298%" height="15" fill="rgb(253,148,53)"/><text x="79.3331%" y="367.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.14%)</title><rect x="79.3696%" y="341" width="0.1433%" height="15" fill="rgb(218,129,16)"/><text x="79.6196%" y="351.50"></text></g><g><title>mysql_common::io::WriteMysqlExt::write_lenenc_int (5 samples, 0.36%)</title><rect x="79.5129%" y="421" width="0.3582%" height="15" fill="rgb(216,85,19)"/><text x="79.7629%" y="431.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.29%)</title><rect x="79.5845%" y="405" width="0.2865%" height="15" fill="rgb(235,228,7)"/><text x="79.8345%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.21%)</title><rect x="79.6562%" y="389" width="0.2149%" height="15" fill="rgb(245,175,0)"/><text x="79.9062%" y="399.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (89 samples, 6.38%)</title><rect x="73.5673%" y="485" width="6.3754%" height="15" fill="rgb(208,168,36)"/><text x="73.8173%" y="495.50">decor_me..</text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (24 samples, 1.72%)</title><rect x="78.2235%" y="469" width="1.7192%" height="15" fill="rgb(246,171,24)"/><text x="78.4735%" y="479.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (24 samples, 1.72%)</title><rect x="78.2235%" y="453" width="1.7192%" height="15" fill="rgb(215,142,24)"/><text x="78.4735%" y="463.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (23 samples, 1.65%)</title><rect x="78.2951%" y="437" width="1.6476%" height="15" fill="rgb(250,187,7)"/><text x="78.5451%" y="447.50"></text></g><g><title>ksys_write (2 samples, 0.14%)</title><rect x="79.9427%" y="149" width="0.1433%" height="15" fill="rgb(228,66,33)"/><text x="80.1927%" y="159.50"></text></g><g><title>vfs_write (2 samples, 0.14%)</title><rect x="79.9427%" y="133" width="0.1433%" height="15" fill="rgb(234,215,21)"/><text x="80.1927%" y="143.50"></text></g><g><title>tty_write (2 samples, 0.14%)</title><rect x="79.9427%" y="117" width="0.1433%" height="15" fill="rgb(222,191,20)"/><text x="80.1927%" y="127.50"></text></g><g><title>n_tty_write (2 samples, 0.14%)</title><rect x="79.9427%" y="101" width="0.1433%" height="15" fill="rgb(245,79,54)"/><text x="80.1927%" y="111.50"></text></g><g><title>pty_write (2 samples, 0.14%)</title><rect x="79.9427%" y="85" width="0.1433%" height="15" fill="rgb(240,10,37)"/><text x="80.1927%" y="95.50"></text></g><g><title>queue_work_on (2 samples, 0.14%)</title><rect x="79.9427%" y="69" width="0.1433%" height="15" fill="rgb(214,192,32)"/><text x="80.1927%" y="79.50"></text></g><g><title>__queue_work (2 samples, 0.14%)</title><rect x="79.9427%" y="53" width="0.1433%" height="15" fill="rgb(209,36,54)"/><text x="80.1927%" y="63.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (92 samples, 6.59%)</title><rect x="73.5673%" y="501" width="6.5903%" height="15" fill="rgb(220,10,11)"/><text x="73.8173%" y="511.50">&lt;decor_me..</text></g><g><title>log::__private_api_log (3 samples, 0.21%)</title><rect x="79.9427%" y="485" width="0.2149%" height="15" fill="rgb(221,106,17)"/><text x="80.1927%" y="495.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (3 samples, 0.21%)</title><rect x="79.9427%" y="469" width="0.2149%" height="15" fill="rgb(251,142,44)"/><text x="80.1927%" y="479.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (3 samples, 0.21%)</title><rect x="79.9427%" y="453" width="0.2149%" height="15" fill="rgb(238,13,15)"/><text x="80.1927%" y="463.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (3 samples, 0.21%)</title><rect x="79.9427%" y="437" width="0.2149%" height="15" fill="rgb(208,107,27)"/><text x="80.1927%" y="447.50"></text></g><g><title>std::io::stdio::_eprint (3 samples, 0.21%)</title><rect x="79.9427%" y="421" width="0.2149%" height="15" fill="rgb(205,136,37)"/><text x="80.1927%" y="431.50"></text></g><g><title>std::io::stdio::print_to (3 samples, 0.21%)</title><rect x="79.9427%" y="405" width="0.2149%" height="15" fill="rgb(250,205,27)"/><text x="80.1927%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (3 samples, 0.21%)</title><rect x="79.9427%" y="389" width="0.2149%" height="15" fill="rgb(210,80,43)"/><text x="80.1927%" y="399.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (3 samples, 0.21%)</title><rect x="79.9427%" y="373" width="0.2149%" height="15" fill="rgb(247,160,36)"/><text x="80.1927%" y="383.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (3 samples, 0.21%)</title><rect x="79.9427%" y="357" width="0.2149%" height="15" fill="rgb(234,13,49)"/><text x="80.1927%" y="367.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (3 samples, 0.21%)</title><rect x="79.9427%" y="341" width="0.2149%" height="15" fill="rgb(234,122,0)"/><text x="80.1927%" y="351.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.21%)</title><rect x="79.9427%" y="325" width="0.2149%" height="15" fill="rgb(207,146,38)"/><text x="80.1927%" y="335.50"></text></g><g><title>core::fmt::write (3 samples, 0.21%)</title><rect x="79.9427%" y="309" width="0.2149%" height="15" fill="rgb(207,177,25)"/><text x="80.1927%" y="319.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="79.9427%" y="293" width="0.2149%" height="15" fill="rgb(211,178,42)"/><text x="80.1927%" y="303.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (3 samples, 0.21%)</title><rect x="79.9427%" y="277" width="0.2149%" height="15" fill="rgb(230,69,54)"/><text x="80.1927%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (3 samples, 0.21%)</title><rect x="79.9427%" y="261" width="0.2149%" height="15" fill="rgb(214,135,41)"/><text x="80.1927%" y="271.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.21%)</title><rect x="79.9427%" y="245" width="0.2149%" height="15" fill="rgb(237,67,25)"/><text x="80.1927%" y="255.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (3 samples, 0.21%)</title><rect x="79.9427%" y="229" width="0.2149%" height="15" fill="rgb(222,189,50)"/><text x="80.1927%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.21%)</title><rect x="79.9427%" y="213" width="0.2149%" height="15" fill="rgb(245,148,34)"/><text x="80.1927%" y="223.50"></text></g><g><title>__libc_write (3 samples, 0.21%)</title><rect x="79.9427%" y="197" width="0.2149%" height="15" fill="rgb(222,29,6)"/><text x="80.1927%" y="207.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.21%)</title><rect x="79.9427%" y="181" width="0.2149%" height="15" fill="rgb(221,189,43)"/><text x="80.1927%" y="191.50"></text></g><g><title>do_syscall_64 (3 samples, 0.21%)</title><rect x="79.9427%" y="165" width="0.2149%" height="15" fill="rgb(207,36,27)"/><text x="80.1927%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.14%)</title><rect x="80.1576%" y="501" width="0.1433%" height="15" fill="rgb(217,90,24)"/><text x="80.4076%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.14%)</title><rect x="80.1576%" y="485" width="0.1433%" height="15" fill="rgb(224,66,35)"/><text x="80.4076%" y="495.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (2 samples, 0.14%)</title><rect x="80.3009%" y="501" width="0.1433%" height="15" fill="rgb(221,13,50)"/><text x="80.5509%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="80.3009%" y="485" width="0.1433%" height="15" fill="rgb(236,68,49)"/><text x="80.5509%" y="495.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="80.3009%" y="469" width="0.1433%" height="15" fill="rgb(229,146,28)"/><text x="80.5509%" y="479.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.14%)</title><rect x="80.3009%" y="453" width="0.1433%" height="15" fill="rgb(225,31,38)"/><text x="80.5509%" y="463.50"></text></g><g><title>std::sys::unix::net::Socket::read (2 samples, 0.14%)</title><rect x="80.3009%" y="437" width="0.1433%" height="15" fill="rgb(250,208,3)"/><text x="80.5509%" y="447.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2 samples, 0.14%)</title><rect x="80.3009%" y="421" width="0.1433%" height="15" fill="rgb(246,54,23)"/><text x="80.5509%" y="431.50"></text></g><g><title>__libc_recv (2 samples, 0.14%)</title><rect x="80.3009%" y="405" width="0.1433%" height="15" fill="rgb(243,76,11)"/><text x="80.5509%" y="415.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.14%)</title><rect x="80.3009%" y="389" width="0.1433%" height="15" fill="rgb(245,21,50)"/><text x="80.5509%" y="399.50"></text></g><g><title>__GI___clone (99 samples, 7.09%)</title><rect x="73.4957%" y="645" width="7.0917%" height="15" fill="rgb(228,9,43)"/><text x="73.7457%" y="655.50">__GI___clo..</text></g><g><title>start_thread (99 samples, 7.09%)</title><rect x="73.4957%" y="629" width="7.0917%" height="15" fill="rgb(208,100,47)"/><text x="73.7457%" y="639.50">start_thre..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (99 samples, 7.09%)</title><rect x="73.4957%" y="613" width="7.0917%" height="15" fill="rgb(232,26,8)"/><text x="73.7457%" y="623.50">std::sys::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (99 samples, 7.09%)</title><rect x="73.4957%" y="597" width="7.0917%" height="15" fill="rgb(216,166,38)"/><text x="73.7457%" y="607.50">&lt;alloc::bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (99 samples, 7.09%)</title><rect x="73.4957%" y="581" width="7.0917%" height="15" fill="rgb(251,202,51)"/><text x="73.7457%" y="591.50">&lt;alloc::bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (99 samples, 7.09%)</title><rect x="73.4957%" y="565" width="7.0917%" height="15" fill="rgb(254,216,34)"/><text x="73.7457%" y="575.50">core::ops:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (99 samples, 7.09%)</title><rect x="73.4957%" y="549" width="7.0917%" height="15" fill="rgb(251,32,27)"/><text x="73.7457%" y="559.50">std::sys_c..</text></g><g><title>decor_mem::Shim::run_on_tcp (99 samples, 7.09%)</title><rect x="73.4957%" y="533" width="7.0917%" height="15" fill="rgb(208,127,28)"/><text x="73.7457%" y="543.50">decor_mem:..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (99 samples, 7.09%)</title><rect x="73.4957%" y="517" width="7.0917%" height="15" fill="rgb(224,137,22)"/><text x="73.7457%" y="527.50">msql_srv::..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.14%)</title><rect x="80.4441%" y="501" width="0.1433%" height="15" fill="rgb(254,70,32)"/><text x="80.6941%" y="511.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.14%)</title><rect x="80.4441%" y="485" width="0.1433%" height="15" fill="rgb(229,75,37)"/><text x="80.6941%" y="495.50"></text></g><g><title>std::sys_common::net::TcpStream::write (2 samples, 0.14%)</title><rect x="80.4441%" y="469" width="0.1433%" height="15" fill="rgb(252,64,23)"/><text x="80.6941%" y="479.50"></text></g><g><title>__libc_send (2 samples, 0.14%)</title><rect x="80.4441%" y="453" width="0.1433%" height="15" fill="rgb(232,162,48)"/><text x="80.6941%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.14%)</title><rect x="80.4441%" y="437" width="0.1433%" height="15" fill="rgb(246,160,12)"/><text x="80.6941%" y="447.50"></text></g><g><title>do_syscall_64 (2 samples, 0.14%)</title><rect x="80.4441%" y="421" width="0.1433%" height="15" fill="rgb(247,166,0)"/><text x="80.6941%" y="431.50"></text></g><g><title>__x64_sys_sendto (2 samples, 0.14%)</title><rect x="80.4441%" y="405" width="0.1433%" height="15" fill="rgb(249,219,21)"/><text x="80.6941%" y="415.50"></text></g><g><title>__sys_sendto (2 samples, 0.14%)</title><rect x="80.4441%" y="389" width="0.1433%" height="15" fill="rgb(205,209,3)"/><text x="80.6941%" y="399.50"></text></g><g><title>sock_sendmsg (2 samples, 0.14%)</title><rect x="80.4441%" y="373" width="0.1433%" height="15" fill="rgb(243,44,1)"/><text x="80.6941%" y="383.50"></text></g><g><title>tcp_sendmsg (2 samples, 0.14%)</title><rect x="80.4441%" y="357" width="0.1433%" height="15" fill="rgb(206,159,16)"/><text x="80.6941%" y="367.50"></text></g><g><title>tcp_sendmsg_locked (2 samples, 0.14%)</title><rect x="80.4441%" y="341" width="0.1433%" height="15" fill="rgb(244,77,30)"/><text x="80.6941%" y="351.50"></text></g><g><title>__tcp_push_pending_frames (2 samples, 0.14%)</title><rect x="80.4441%" y="325" width="0.1433%" height="15" fill="rgb(218,69,12)"/><text x="80.6941%" y="335.50"></text></g><g><title>tcp_write_xmit (2 samples, 0.14%)</title><rect x="80.4441%" y="309" width="0.1433%" height="15" fill="rgb(212,87,7)"/><text x="80.6941%" y="319.50"></text></g><g><title>__tcp_transmit_skb (2 samples, 0.14%)</title><rect x="80.4441%" y="293" width="0.1433%" height="15" fill="rgb(245,114,25)"/><text x="80.6941%" y="303.50"></text></g><g><title>__ip_queue_xmit (2 samples, 0.14%)</title><rect x="80.4441%" y="277" width="0.1433%" height="15" fill="rgb(210,61,42)"/><text x="80.6941%" y="287.50"></text></g><g><title>ip_output (2 samples, 0.14%)</title><rect x="80.4441%" y="261" width="0.1433%" height="15" fill="rgb(211,52,33)"/><text x="80.6941%" y="271.50"></text></g><g><title>ip_finish_output2 (2 samples, 0.14%)</title><rect x="80.4441%" y="245" width="0.1433%" height="15" fill="rgb(234,58,33)"/><text x="80.6941%" y="255.50"></text></g><g><title>_int_free (4 samples, 0.29%)</title><rect x="80.7307%" y="645" width="0.2865%" height="15" fill="rgb(220,115,36)"/><text x="80.9807%" y="655.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (230 samples, 16.48%)</title><rect x="81.5186%" y="165" width="16.4756%" height="15" fill="rgb(243,153,54)"/><text x="81.7686%" y="175.50">__intel_pmu_enable_all.co..</text></g><g><title>native_write_msr (230 samples, 16.48%)</title><rect x="81.5186%" y="149" width="16.4756%" height="15" fill="rgb(251,47,18)"/><text x="81.7686%" y="159.50">native_write_msr</text></g><g><title>__perf_event_task_sched_in (232 samples, 16.62%)</title><rect x="81.5186%" y="181" width="16.6189%" height="15" fill="rgb(242,102,42)"/><text x="81.7686%" y="191.50">__perf_event_task_sched_in</text></g><g><title>_raw_spin_unlock (2 samples, 0.14%)</title><rect x="97.9943%" y="165" width="0.1433%" height="15" fill="rgb(234,31,38)"/><text x="98.2443%" y="175.50"></text></g><g><title>finish_task_switch (236 samples, 16.91%)</title><rect x="81.3754%" y="197" width="16.9054%" height="15" fill="rgb(221,117,51)"/><text x="81.6254%" y="207.50">finish_task_switch</text></g><g><title>__x64_sys_sched_setaffinity (238 samples, 17.05%)</title><rect x="81.3037%" y="325" width="17.0487%" height="15" fill="rgb(212,20,18)"/><text x="81.5537%" y="335.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (238 samples, 17.05%)</title><rect x="81.3037%" y="309" width="17.0487%" height="15" fill="rgb(245,133,36)"/><text x="81.5537%" y="319.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (238 samples, 17.05%)</title><rect x="81.3037%" y="293" width="17.0487%" height="15" fill="rgb(212,6,19)"/><text x="81.5537%" y="303.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (237 samples, 16.98%)</title><rect x="81.3754%" y="277" width="16.9771%" height="15" fill="rgb(218,1,36)"/><text x="81.6254%" y="287.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (237 samples, 16.98%)</title><rect x="81.3754%" y="261" width="16.9771%" height="15" fill="rgb(246,84,54)"/><text x="81.6254%" y="271.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (237 samples, 16.98%)</title><rect x="81.3754%" y="245" width="16.9771%" height="15" fill="rgb(242,110,6)"/><text x="81.6254%" y="255.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (237 samples, 16.98%)</title><rect x="81.3754%" y="229" width="16.9771%" height="15" fill="rgb(214,47,5)"/><text x="81.6254%" y="239.50">preempt_schedule_common</text></g><g><title>__schedule (237 samples, 16.98%)</title><rect x="81.3754%" y="213" width="16.9771%" height="15" fill="rgb(218,159,25)"/><text x="81.6254%" y="223.50">__schedule</text></g><g><title>do_syscall_64 (239 samples, 17.12%)</title><rect x="81.3037%" y="341" width="17.1203%" height="15" fill="rgb(215,211,28)"/><text x="81.5537%" y="351.50">do_syscall_64</text></g><g><title>entry_SYSCALL_64 (241 samples, 17.26%)</title><rect x="81.3037%" y="357" width="17.2636%" height="15" fill="rgb(238,59,32)"/><text x="81.5537%" y="367.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.14%)</title><rect x="98.4241%" y="341" width="0.1433%" height="15" fill="rgb(226,82,3)"/><text x="98.6741%" y="351.50"></text></g><g><title>hwloc::Topology::new (245 samples, 17.55%)</title><rect x="81.0888%" y="469" width="17.5501%" height="15" fill="rgb(240,164,32)"/><text x="81.3388%" y="479.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (245 samples, 17.55%)</title><rect x="81.0888%" y="453" width="17.5501%" height="15" fill="rgb(232,46,7)"/><text x="81.3388%" y="463.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (245 samples, 17.55%)</title><rect x="81.0888%" y="437" width="17.5501%" height="15" fill="rgb(229,129,53)"/><text x="81.3388%" y="447.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (245 samples, 17.55%)</title><rect x="81.0888%" y="421" width="17.5501%" height="15" fill="rgb(234,188,29)"/><text x="81.3388%" y="431.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (245 samples, 17.55%)</title><rect x="81.0888%" y="405" width="17.5501%" height="15" fill="rgb(246,141,4)"/><text x="81.3388%" y="415.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (244 samples, 17.48%)</title><rect x="81.1605%" y="389" width="17.4785%" height="15" fill="rgb(229,23,39)"/><text x="81.4105%" y="399.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (243 samples, 17.41%)</title><rect x="81.2321%" y="373" width="17.4069%" height="15" fill="rgb(206,12,3)"/><text x="81.4821%" y="383.50">__GI___sched_setaffinity_new</text></g><g><title>__libc_start_main (248 samples, 17.77%)</title><rect x="81.0172%" y="629" width="17.7650%" height="15" fill="rgb(252,226,20)"/><text x="81.2672%" y="639.50">__libc_start_main</text></g><g><title>main (248 samples, 17.77%)</title><rect x="81.0172%" y="613" width="17.7650%" height="15" fill="rgb(216,123,35)"/><text x="81.2672%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (248 samples, 17.77%)</title><rect x="81.0172%" y="597" width="17.7650%" height="15" fill="rgb(212,68,40)"/><text x="81.2672%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (248 samples, 17.77%)</title><rect x="81.0172%" y="581" width="17.7650%" height="15" fill="rgb(254,125,32)"/><text x="81.2672%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (248 samples, 17.77%)</title><rect x="81.0172%" y="565" width="17.7650%" height="15" fill="rgb(253,97,22)"/><text x="81.2672%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (248 samples, 17.77%)</title><rect x="81.0172%" y="549" width="17.7650%" height="15" fill="rgb(241,101,14)"/><text x="81.2672%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (248 samples, 17.77%)</title><rect x="81.0172%" y="533" width="17.7650%" height="15" fill="rgb(238,103,29)"/><text x="81.2672%" y="543.50">core::ops::function::impls::..</text></g><g><title>std::rt::lang_start::_{{closure}} (248 samples, 17.77%)</title><rect x="81.0172%" y="517" width="17.7650%" height="15" fill="rgb(233,195,47)"/><text x="81.2672%" y="527.50">std::rt::lang_start::_{{clos..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (248 samples, 17.77%)</title><rect x="81.0172%" y="501" width="17.7650%" height="15" fill="rgb(246,218,30)"/><text x="81.2672%" y="511.50">std::sys_common::backtrace::..</text></g><g><title>lobsters_microbenchmarks::main (248 samples, 17.77%)</title><rect x="81.0172%" y="485" width="17.7650%" height="15" fill="rgb(219,145,47)"/><text x="81.2672%" y="495.50">lobsters_microbenchmarks::ma..</text></g><g><title>_start (249 samples, 17.84%)</title><rect x="81.0172%" y="645" width="17.8367%" height="15" fill="rgb(243,12,26)"/><text x="81.2672%" y="655.50">_start</text></g><g><title>[vmlinux] (3 samples, 0.21%)</title><rect x="98.9971%" y="613" width="0.2149%" height="15" fill="rgb(214,87,16)"/><text x="99.2471%" y="623.50"></text></g><g><title>do_group_exit (3 samples, 0.21%)</title><rect x="98.9971%" y="597" width="0.2149%" height="15" fill="rgb(208,99,42)"/><text x="99.2471%" y="607.50"></text></g><g><title>do_exit (3 samples, 0.21%)</title><rect x="98.9971%" y="581" width="0.2149%" height="15" fill="rgb(253,99,2)"/><text x="99.2471%" y="591.50"></text></g><g><title>mmput (3 samples, 0.21%)</title><rect x="98.9971%" y="565" width="0.2149%" height="15" fill="rgb(220,168,23)"/><text x="99.2471%" y="575.50"></text></g><g><title>exit_mmap (3 samples, 0.21%)</title><rect x="98.9971%" y="549" width="0.2149%" height="15" fill="rgb(242,38,24)"/><text x="99.2471%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.29%)</title><rect x="98.9971%" y="645" width="0.2865%" height="15" fill="rgb(225,182,9)"/><text x="99.2471%" y="655.50"></text></g><g><title>do_syscall_64 (4 samples, 0.29%)</title><rect x="98.9971%" y="629" width="0.2865%" height="15" fill="rgb(243,178,37)"/><text x="99.2471%" y="639.50"></text></g><g><title>lobsters-microb (1,390 samples, 99.57%)</title><rect x="0.0000%" y="661" width="99.5702%" height="15" fill="rgb(232,139,19)"/><text x="0.2500%" y="671.50">lobsters-microb</text></g><g><title>all (1,396 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(225,201,24)"/><text x="0.2500%" y="687.50"></text></g><g><title>perf (6 samples, 0.43%)</title><rect x="99.5702%" y="661" width="0.4298%" height="15" fill="rgb(221,47,46)"/><text x="99.8202%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.43%)</title><rect x="99.5702%" y="645" width="0.4298%" height="15" fill="rgb(249,23,13)"/><text x="99.8202%" y="655.50"></text></g><g><title>do_syscall_64 (6 samples, 0.43%)</title><rect x="99.5702%" y="629" width="0.4298%" height="15" fill="rgb(219,9,5)"/><text x="99.8202%" y="639.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.43%)</title><rect x="99.5702%" y="613" width="0.4298%" height="15" fill="rgb(254,171,16)"/><text x="99.8202%" y="623.50"></text></g><g><title>do_execve (6 samples, 0.43%)</title><rect x="99.5702%" y="597" width="0.4298%" height="15" fill="rgb(230,171,20)"/><text x="99.8202%" y="607.50"></text></g><g><title>__do_execve_file (6 samples, 0.43%)</title><rect x="99.5702%" y="581" width="0.4298%" height="15" fill="rgb(210,71,41)"/><text x="99.8202%" y="591.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.43%)</title><rect x="99.5702%" y="565" width="0.4298%" height="15" fill="rgb(206,173,20)"/><text x="99.8202%" y="575.50"></text></g><g><title>load_elf_binary (6 samples, 0.43%)</title><rect x="99.5702%" y="549" width="0.4298%" height="15" fill="rgb(233,88,34)"/><text x="99.8202%" y="559.50"></text></g><g><title>setup_new_exec (6 samples, 0.43%)</title><rect x="99.5702%" y="533" width="0.4298%" height="15" fill="rgb(223,209,46)"/><text x="99.8202%" y="543.50"></text></g><g><title>perf_event_exec (6 samples, 0.43%)</title><rect x="99.5702%" y="517" width="0.4298%" height="15" fill="rgb(250,43,18)"/><text x="99.8202%" y="527.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.36%)</title><rect x="99.6418%" y="501" width="0.3582%" height="15" fill="rgb(208,13,10)"/><text x="99.8918%" y="511.50"></text></g><g><title>native_write_msr (5 samples, 0.36%)</title><rect x="99.6418%" y="485" width="0.3582%" height="15" fill="rgb(212,200,36)"/><text x="99.8918%" y="495.50"></text></g></svg></svg>