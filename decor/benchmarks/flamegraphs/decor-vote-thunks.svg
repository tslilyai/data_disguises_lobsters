<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="837.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="837.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (20 samples, 0.38%)</title><rect x="0.2834%" y="757" width="0.3779%" height="15" fill="rgb(227,0,7)"/><text x="0.5334%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (10 samples, 0.19%)</title><rect x="1.4170%" y="693" width="0.1889%" height="15" fill="rgb(217,0,24)"/><text x="1.6670%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (10 samples, 0.19%)</title><rect x="1.4170%" y="677" width="0.1889%" height="15" fill="rgb(221,193,54)"/><text x="1.6670%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (10 samples, 0.19%)</title><rect x="1.4170%" y="661" width="0.1889%" height="15" fill="rgb(248,212,6)"/><text x="1.6670%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.19%)</title><rect x="1.4170%" y="645" width="0.1889%" height="15" fill="rgb(208,68,35)"/><text x="1.6670%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (62 samples, 1.17%)</title><rect x="0.6801%" y="757" width="1.1714%" height="15" fill="rgb(232,128,0)"/><text x="0.9301%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (23 samples, 0.43%)</title><rect x="1.4170%" y="741" width="0.4345%" height="15" fill="rgb(207,160,47)"/><text x="1.6670%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23 samples, 0.43%)</title><rect x="1.4170%" y="725" width="0.4345%" height="15" fill="rgb(228,23,34)"/><text x="1.6670%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.43%)</title><rect x="1.4170%" y="709" width="0.4345%" height="15" fill="rgb(218,30,26)"/><text x="1.6670%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (13 samples, 0.25%)</title><rect x="1.6059%" y="693" width="0.2456%" height="15" fill="rgb(220,122,19)"/><text x="1.8559%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (13 samples, 0.25%)</title><rect x="1.6059%" y="677" width="0.2456%" height="15" fill="rgb(250,228,42)"/><text x="1.8559%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.25%)</title><rect x="1.6059%" y="661" width="0.2456%" height="15" fill="rgb(240,193,28)"/><text x="1.8559%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.25%)</title><rect x="1.6059%" y="645" width="0.2456%" height="15" fill="rgb(216,20,37)"/><text x="1.8559%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (13 samples, 0.25%)</title><rect x="1.6059%" y="629" width="0.2456%" height="15" fill="rgb(206,188,39)"/><text x="1.8559%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.25%)</title><rect x="1.6059%" y="613" width="0.2456%" height="15" fill="rgb(217,207,13)"/><text x="1.8559%" y="623.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.25%)</title><rect x="1.6059%" y="597" width="0.2456%" height="15" fill="rgb(231,73,38)"/><text x="1.8559%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.43%)</title><rect x="1.9271%" y="757" width="0.4345%" height="15" fill="rgb(225,20,46)"/><text x="2.1771%" y="767.50"></text></g><g><title>__GI___libc_free (12 samples, 0.23%)</title><rect x="2.6450%" y="757" width="0.2267%" height="15" fill="rgb(210,31,41)"/><text x="2.8950%" y="767.50"></text></g><g><title>__GI___libc_malloc (41 samples, 0.77%)</title><rect x="2.8717%" y="757" width="0.7746%" height="15" fill="rgb(221,200,47)"/><text x="3.1217%" y="767.50"></text></g><g><title>__GI___libc_realloc (20 samples, 0.38%)</title><rect x="3.6463%" y="757" width="0.3779%" height="15" fill="rgb(226,26,5)"/><text x="3.8963%" y="767.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.19%)</title><rect x="4.0620%" y="757" width="0.1889%" height="15" fill="rgb(249,33,26)"/><text x="4.3120%" y="767.50"></text></g><g><title>__rdl_realloc (7 samples, 0.13%)</title><rect x="4.2509%" y="757" width="0.1323%" height="15" fill="rgb(235,183,28)"/><text x="4.5009%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.11%)</title><rect x="4.2698%" y="741" width="0.1134%" height="15" fill="rgb(221,5,38)"/><text x="4.5198%" y="751.50"></text></g><g><title>_int_free (37 samples, 0.70%)</title><rect x="4.3831%" y="757" width="0.6990%" height="15" fill="rgb(247,18,42)"/><text x="4.6331%" y="767.50"></text></g><g><title>_int_malloc (22 samples, 0.42%)</title><rect x="5.0822%" y="757" width="0.4156%" height="15" fill="rgb(241,131,45)"/><text x="5.3322%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.40%)</title><rect x="5.4978%" y="757" width="0.3968%" height="15" fill="rgb(249,31,29)"/><text x="5.7478%" y="767.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (25 samples, 0.47%)</title><rect x="5.8946%" y="757" width="0.4723%" height="15" fill="rgb(225,111,53)"/><text x="6.1446%" y="767.50"></text></g><g><title>alloc::string::String::push (12 samples, 0.23%)</title><rect x="6.3669%" y="757" width="0.2267%" height="15" fill="rgb(238,160,17)"/><text x="6.6169%" y="767.50"></text></g><g><title>core::fmt::write (9 samples, 0.17%)</title><rect x="6.5936%" y="757" width="0.1700%" height="15" fill="rgb(214,148,48)"/><text x="6.8436%" y="767.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (19 samples, 0.36%)</title><rect x="7.4060%" y="757" width="0.3590%" height="15" fill="rgb(232,36,49)"/><text x="7.6560%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (8 samples, 0.15%)</title><rect x="7.7650%" y="757" width="0.1511%" height="15" fill="rgb(209,103,24)"/><text x="8.0150%" y="767.50"></text></g><g><title>[anon] (436 samples, 8.24%)</title><rect x="0.2834%" y="773" width="8.2373%" height="15" fill="rgb(229,88,8)"/><text x="0.5334%" y="783.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (20 samples, 0.38%)</title><rect x="8.1428%" y="757" width="0.3779%" height="15" fill="rgb(213,181,19)"/><text x="8.3928%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.15%)</title><rect x="8.8985%" y="757" width="0.1511%" height="15" fill="rgb(254,191,54)"/><text x="9.1485%" y="767.50"></text></g><g><title>[lobsters-microbenchmarks] (27 samples, 0.51%)</title><rect x="8.6152%" y="773" width="0.5101%" height="15" fill="rgb(241,83,37)"/><text x="8.8652%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.25%)</title><rect x="9.1442%" y="757" width="0.2456%" height="15" fill="rgb(233,36,39)"/><text x="9.3942%" y="767.50"></text></g><g><title>do_syscall_64 (10 samples, 0.19%)</title><rect x="9.5409%" y="501" width="0.1889%" height="15" fill="rgb(226,3,54)"/><text x="9.7909%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (10 samples, 0.19%)</title><rect x="9.5409%" y="485" width="0.1889%" height="15" fill="rgb(245,192,40)"/><text x="9.7909%" y="495.50"></text></g><g><title>__sys_recvfrom (10 samples, 0.19%)</title><rect x="9.5409%" y="469" width="0.1889%" height="15" fill="rgb(238,167,29)"/><text x="9.7909%" y="479.50"></text></g><g><title>inet_recvmsg (9 samples, 0.17%)</title><rect x="9.5598%" y="453" width="0.1700%" height="15" fill="rgb(232,182,51)"/><text x="9.8098%" y="463.50"></text></g><g><title>tcp_recvmsg (9 samples, 0.17%)</title><rect x="9.5598%" y="437" width="0.1700%" height="15" fill="rgb(231,60,39)"/><text x="9.8098%" y="447.50"></text></g><g><title>sk_wait_data (7 samples, 0.13%)</title><rect x="9.5976%" y="421" width="0.1323%" height="15" fill="rgb(208,69,12)"/><text x="9.8476%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.21%)</title><rect x="9.5409%" y="517" width="0.2078%" height="15" fill="rgb(235,93,37)"/><text x="9.7909%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (12 samples, 0.23%)</title><rect x="9.5409%" y="613" width="0.2267%" height="15" fill="rgb(213,116,39)"/><text x="9.7909%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (12 samples, 0.23%)</title><rect x="9.5409%" y="597" width="0.2267%" height="15" fill="rgb(222,207,29)"/><text x="9.7909%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (12 samples, 0.23%)</title><rect x="9.5409%" y="581" width="0.2267%" height="15" fill="rgb(206,96,30)"/><text x="9.7909%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (12 samples, 0.23%)</title><rect x="9.5409%" y="565" width="0.2267%" height="15" fill="rgb(218,138,4)"/><text x="9.7909%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (12 samples, 0.23%)</title><rect x="9.5409%" y="549" width="0.2267%" height="15" fill="rgb(250,191,14)"/><text x="9.7909%" y="559.50"></text></g><g><title>__libc_recv (12 samples, 0.23%)</title><rect x="9.5409%" y="533" width="0.2267%" height="15" fill="rgb(239,60,40)"/><text x="9.7909%" y="543.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.25%)</title><rect x="9.5409%" y="629" width="0.2456%" height="15" fill="rgb(206,27,48)"/><text x="9.7909%" y="639.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (15 samples, 0.28%)</title><rect x="9.5220%" y="709" width="0.2834%" height="15" fill="rgb(225,35,8)"/><text x="9.7720%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (15 samples, 0.28%)</title><rect x="9.5220%" y="693" width="0.2834%" height="15" fill="rgb(250,213,24)"/><text x="9.7720%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (15 samples, 0.28%)</title><rect x="9.5220%" y="677" width="0.2834%" height="15" fill="rgb(247,123,22)"/><text x="9.7720%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (15 samples, 0.28%)</title><rect x="9.5220%" y="661" width="0.2834%" height="15" fill="rgb(231,138,38)"/><text x="9.7720%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (14 samples, 0.26%)</title><rect x="9.5409%" y="645" width="0.2645%" height="15" fill="rgb(231,145,46)"/><text x="9.7909%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="9.9188%" y="613" width="0.1323%" height="15" fill="rgb(251,118,11)"/><text x="10.1688%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.25%)</title><rect x="9.8999%" y="629" width="0.2456%" height="15" fill="rgb(217,147,25)"/><text x="10.1499%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.32%)</title><rect x="9.8621%" y="677" width="0.3212%" height="15" fill="rgb(247,81,37)"/><text x="10.1121%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (17 samples, 0.32%)</title><rect x="9.8621%" y="661" width="0.3212%" height="15" fill="rgb(209,12,38)"/><text x="10.1121%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.28%)</title><rect x="9.8999%" y="645" width="0.2834%" height="15" fill="rgb(227,1,9)"/><text x="10.1499%" y="655.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (8 samples, 0.15%)</title><rect x="10.3344%" y="629" width="0.1511%" height="15" fill="rgb(248,47,43)"/><text x="10.5844%" y="639.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (14 samples, 0.26%)</title><rect x="10.2966%" y="645" width="0.2645%" height="15" fill="rgb(221,10,30)"/><text x="10.5466%" y="655.50"></text></g><g><title>core::fmt::write (6 samples, 0.11%)</title><rect x="10.5611%" y="613" width="0.1134%" height="15" fill="rgb(210,229,1)"/><text x="10.8111%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (6 samples, 0.11%)</title><rect x="10.5611%" y="597" width="0.1134%" height="15" fill="rgb(222,148,37)"/><text x="10.8111%" y="607.50"></text></g><g><title>decor_mem::select::get_value_for_row (12 samples, 0.23%)</title><rect x="10.5611%" y="645" width="0.2267%" height="15" fill="rgb(234,67,33)"/><text x="10.8111%" y="655.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (12 samples, 0.23%)</title><rect x="10.5611%" y="629" width="0.2267%" height="15" fill="rgb(247,98,35)"/><text x="10.8111%" y="639.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (6 samples, 0.11%)</title><rect x="10.6745%" y="613" width="0.1134%" height="15" fill="rgb(247,138,52)"/><text x="10.9245%" y="623.50"></text></g><g><title>alloc::fmt::format (6 samples, 0.11%)</title><rect x="10.6745%" y="597" width="0.1134%" height="15" fill="rgb(213,79,30)"/><text x="10.9245%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (6 samples, 0.11%)</title><rect x="10.6745%" y="581" width="0.1134%" height="15" fill="rgb(246,177,23)"/><text x="10.9245%" y="591.50"></text></g><g><title>core::fmt::write (6 samples, 0.11%)</title><rect x="10.6745%" y="565" width="0.1134%" height="15" fill="rgb(230,62,27)"/><text x="10.9245%" y="575.50"></text></g><g><title>core::fmt::write (8 samples, 0.15%)</title><rect x="10.7878%" y="629" width="0.1511%" height="15" fill="rgb(216,154,8)"/><text x="11.0378%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.15%)</title><rect x="10.7878%" y="613" width="0.1511%" height="15" fill="rgb(244,35,45)"/><text x="11.0378%" y="623.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (11 samples, 0.21%)</title><rect x="10.7878%" y="645" width="0.2078%" height="15" fill="rgb(251,115,12)"/><text x="11.0378%" y="655.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (71 samples, 1.34%)</title><rect x="10.2588%" y="661" width="1.3414%" height="15" fill="rgb(240,54,50)"/><text x="10.5088%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (29 samples, 0.55%)</title><rect x="11.0523%" y="645" width="0.5479%" height="15" fill="rgb(233,84,52)"/><text x="11.3023%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (14 samples, 0.26%)</title><rect x="11.3357%" y="629" width="0.2645%" height="15" fill="rgb(207,117,47)"/><text x="11.5857%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (11 samples, 0.21%)</title><rect x="11.3924%" y="613" width="0.2078%" height="15" fill="rgb(249,43,39)"/><text x="11.6424%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.13%)</title><rect x="11.4680%" y="597" width="0.1323%" height="15" fill="rgb(209,38,44)"/><text x="11.7180%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (12 samples, 0.23%)</title><rect x="11.6947%" y="613" width="0.2267%" height="15" fill="rgb(236,212,23)"/><text x="11.9447%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (12 samples, 0.23%)</title><rect x="11.6947%" y="597" width="0.2267%" height="15" fill="rgb(242,79,21)"/><text x="11.9447%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (9 samples, 0.17%)</title><rect x="11.7514%" y="581" width="0.1700%" height="15" fill="rgb(211,96,35)"/><text x="12.0014%" y="591.50"></text></g><g><title>core::fmt::write (19 samples, 0.36%)</title><rect x="11.6380%" y="645" width="0.3590%" height="15" fill="rgb(253,215,40)"/><text x="11.8880%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (19 samples, 0.36%)</title><rect x="11.6380%" y="629" width="0.3590%" height="15" fill="rgb(211,81,21)"/><text x="11.8880%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.11%)</title><rect x="12.0159%" y="565" width="0.1134%" height="15" fill="rgb(208,190,38)"/><text x="12.2659%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (9 samples, 0.17%)</title><rect x="12.1292%" y="533" width="0.1700%" height="15" fill="rgb(235,213,38)"/><text x="12.3792%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.19%)</title><rect x="12.1292%" y="565" width="0.1889%" height="15" fill="rgb(237,122,38)"/><text x="12.3792%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (10 samples, 0.19%)</title><rect x="12.1292%" y="549" width="0.1889%" height="15" fill="rgb(244,218,35)"/><text x="12.3792%" y="559.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (41 samples, 0.77%)</title><rect x="11.6002%" y="661" width="0.7746%" height="15" fill="rgb(240,68,47)"/><text x="11.8502%" y="671.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (20 samples, 0.38%)</title><rect x="11.9970%" y="645" width="0.3779%" height="15" fill="rgb(210,16,53)"/><text x="12.2470%" y="655.50"></text></g><g><title>alloc::fmt::format (20 samples, 0.38%)</title><rect x="11.9970%" y="629" width="0.3779%" height="15" fill="rgb(235,124,12)"/><text x="12.2470%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (20 samples, 0.38%)</title><rect x="11.9970%" y="613" width="0.3779%" height="15" fill="rgb(224,169,11)"/><text x="12.2470%" y="623.50"></text></g><g><title>core::fmt::write (20 samples, 0.38%)</title><rect x="11.9970%" y="597" width="0.3779%" height="15" fill="rgb(250,166,2)"/><text x="12.2470%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (19 samples, 0.36%)</title><rect x="12.0159%" y="581" width="0.3590%" height="15" fill="rgb(242,216,29)"/><text x="12.2659%" y="591.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (121 samples, 2.29%)</title><rect x="10.2022%" y="677" width="2.2860%" height="15" fill="rgb(230,116,27)"/><text x="10.4522%" y="687.50">d..</text></g><g><title>decor_mem::views::View::get_ris_of_col (6 samples, 0.11%)</title><rect x="12.3748%" y="661" width="0.1134%" height="15" fill="rgb(228,99,48)"/><text x="12.6248%" y="671.50"></text></g><g><title>core::fmt::write (6 samples, 0.11%)</title><rect x="12.3748%" y="645" width="0.1134%" height="15" fill="rgb(253,11,6)"/><text x="12.6248%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (11 samples, 0.21%)</title><rect x="12.6015%" y="549" width="0.2078%" height="15" fill="rgb(247,143,39)"/><text x="12.8515%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (7 samples, 0.13%)</title><rect x="12.6771%" y="533" width="0.1323%" height="15" fill="rgb(236,97,10)"/><text x="12.9271%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (16 samples, 0.30%)</title><rect x="12.5260%" y="581" width="0.3023%" height="15" fill="rgb(233,208,19)"/><text x="12.7760%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (16 samples, 0.30%)</title><rect x="12.5260%" y="565" width="0.3023%" height="15" fill="rgb(216,164,2)"/><text x="12.7760%" y="575.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (22 samples, 0.42%)</title><rect x="12.4882%" y="677" width="0.4156%" height="15" fill="rgb(220,129,5)"/><text x="12.7382%" y="687.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (20 samples, 0.38%)</title><rect x="12.5260%" y="661" width="0.3779%" height="15" fill="rgb(242,17,10)"/><text x="12.7760%" y="671.50"></text></g><g><title>alloc::fmt::format (20 samples, 0.38%)</title><rect x="12.5260%" y="645" width="0.3779%" height="15" fill="rgb(242,107,0)"/><text x="12.7760%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (20 samples, 0.38%)</title><rect x="12.5260%" y="629" width="0.3779%" height="15" fill="rgb(251,28,31)"/><text x="12.7760%" y="639.50"></text></g><g><title>core::fmt::write (20 samples, 0.38%)</title><rect x="12.5260%" y="613" width="0.3779%" height="15" fill="rgb(233,223,10)"/><text x="12.7760%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (20 samples, 0.38%)</title><rect x="12.5260%" y="597" width="0.3779%" height="15" fill="rgb(215,21,27)"/><text x="12.7760%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="13.0550%" y="645" width="0.1323%" height="15" fill="rgb(232,23,21)"/><text x="13.3050%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="13.0550%" y="629" width="0.1323%" height="15" fill="rgb(244,5,23)"/><text x="13.3050%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.13%)</title><rect x="13.0550%" y="613" width="0.1323%" height="15" fill="rgb(226,81,46)"/><text x="13.3050%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.13%)</title><rect x="13.0550%" y="597" width="0.1323%" height="15" fill="rgb(247,70,30)"/><text x="13.3050%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.11%)</title><rect x="13.0739%" y="581" width="0.1134%" height="15" fill="rgb(212,68,19)"/><text x="13.3239%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.11%)</title><rect x="13.0739%" y="565" width="0.1134%" height="15" fill="rgb(240,187,13)"/><text x="13.3239%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.11%)</title><rect x="13.0739%" y="549" width="0.1134%" height="15" fill="rgb(223,113,26)"/><text x="13.3239%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.11%)</title><rect x="13.0739%" y="533" width="0.1134%" height="15" fill="rgb(206,192,2)"/><text x="13.3239%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.11%)</title><rect x="13.0739%" y="517" width="0.1134%" height="15" fill="rgb(241,108,4)"/><text x="13.3239%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.11%)</title><rect x="13.0739%" y="501" width="0.1134%" height="15" fill="rgb(247,173,49)"/><text x="13.3239%" y="511.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.11%)</title><rect x="13.0739%" y="485" width="0.1134%" height="15" fill="rgb(224,114,35)"/><text x="13.3239%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (18 samples, 0.34%)</title><rect x="13.1872%" y="645" width="0.3401%" height="15" fill="rgb(245,159,27)"/><text x="13.4372%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.25%)</title><rect x="13.2817%" y="629" width="0.2456%" height="15" fill="rgb(245,172,44)"/><text x="13.5317%" y="639.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.15%)</title><rect x="13.3762%" y="613" width="0.1511%" height="15" fill="rgb(236,23,11)"/><text x="13.6262%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 0.59%)</title><rect x="13.0172%" y="661" width="0.5857%" height="15" fill="rgb(205,117,38)"/><text x="13.2672%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.25%)</title><rect x="17.4759%" y="581" width="0.2456%" height="15" fill="rgb(237,72,25)"/><text x="17.7259%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.25%)</title><rect x="17.7215%" y="565" width="0.2456%" height="15" fill="rgb(244,70,9)"/><text x="17.9715%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (21 samples, 0.40%)</title><rect x="17.9671%" y="549" width="0.3968%" height="15" fill="rgb(217,125,39)"/><text x="18.2171%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (21 samples, 0.40%)</title><rect x="17.9671%" y="533" width="0.3968%" height="15" fill="rgb(235,36,10)"/><text x="18.2171%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (21 samples, 0.40%)</title><rect x="17.9671%" y="517" width="0.3968%" height="15" fill="rgb(251,123,47)"/><text x="18.2171%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.40%)</title><rect x="17.9671%" y="501" width="0.3968%" height="15" fill="rgb(221,13,13)"/><text x="18.2171%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.21%)</title><rect x="18.1561%" y="485" width="0.2078%" height="15" fill="rgb(238,131,9)"/><text x="18.4061%" y="495.50"></text></g><g><title>alloc_perturb (6 samples, 0.11%)</title><rect x="26.7334%" y="405" width="0.1134%" height="15" fill="rgb(211,50,8)"/><text x="26.9834%" y="415.50"></text></g><g><title>_int_malloc (329 samples, 6.22%)</title><rect x="20.8577%" y="421" width="6.2158%" height="15" fill="rgb(245,182,24)"/><text x="21.1077%" y="431.50">_int_mal..</text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.21%)</title><rect x="26.8657%" y="405" width="0.2078%" height="15" fill="rgb(242,14,37)"/><text x="27.1157%" y="415.50"></text></g><g><title>__GI___libc_malloc (460 samples, 8.69%)</title><rect x="18.4206%" y="437" width="8.6907%" height="15" fill="rgb(246,228,12)"/><text x="18.6706%" y="447.50">__GI___libc_..</text></g><g><title>__rdl_alloc (25 samples, 0.47%)</title><rect x="27.1113%" y="437" width="0.4723%" height="15" fill="rgb(213,55,15)"/><text x="27.3613%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (25 samples, 0.47%)</title><rect x="27.1113%" y="421" width="0.4723%" height="15" fill="rgb(209,9,3)"/><text x="27.3613%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (564 samples, 10.66%)</title><rect x="17.3059%" y="613" width="10.6556%" height="15" fill="rgb(230,59,30)"/><text x="17.5559%" y="623.50">&lt;alloc::string::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (555 samples, 10.49%)</title><rect x="17.4759%" y="597" width="10.4855%" height="15" fill="rgb(209,121,21)"/><text x="17.7259%" y="607.50">&lt;alloc::vec::Ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (542 samples, 10.24%)</title><rect x="17.7215%" y="581" width="10.2399%" height="15" fill="rgb(220,109,13)"/><text x="17.9715%" y="591.50">alloc::slice::&lt;..</text></g><g><title>alloc::slice::hack::to_vec (529 samples, 9.99%)</title><rect x="17.9671%" y="565" width="9.9943%" height="15" fill="rgb(232,18,1)"/><text x="18.2171%" y="575.50">alloc::slice::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (508 samples, 9.60%)</title><rect x="18.3639%" y="549" width="9.5976%" height="15" fill="rgb(215,41,42)"/><text x="18.6139%" y="559.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (508 samples, 9.60%)</title><rect x="18.3639%" y="533" width="9.5976%" height="15" fill="rgb(224,123,36)"/><text x="18.6139%" y="543.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (508 samples, 9.60%)</title><rect x="18.3639%" y="517" width="9.5976%" height="15" fill="rgb(240,125,3)"/><text x="18.6139%" y="527.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (508 samples, 9.60%)</title><rect x="18.3639%" y="501" width="9.5976%" height="15" fill="rgb(205,98,50)"/><text x="18.6139%" y="511.50">alloc::raw_vec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (508 samples, 9.60%)</title><rect x="18.3639%" y="485" width="9.5976%" height="15" fill="rgb(205,185,37)"/><text x="18.6139%" y="495.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (508 samples, 9.60%)</title><rect x="18.3639%" y="469" width="9.5976%" height="15" fill="rgb(238,207,15)"/><text x="18.6139%" y="479.50">alloc::alloc::..</text></g><g><title>alloc::alloc::alloc (508 samples, 9.60%)</title><rect x="18.3639%" y="453" width="9.5976%" height="15" fill="rgb(213,199,42)"/><text x="18.6139%" y="463.50">alloc::alloc::..</text></g><g><title>__rust_alloc (20 samples, 0.38%)</title><rect x="27.5836%" y="437" width="0.3779%" height="15" fill="rgb(235,201,11)"/><text x="27.8336%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (739 samples, 13.96%)</title><rect x="14.0374%" y="629" width="13.9618%" height="15" fill="rgb(207,46,11)"/><text x="14.2874%" y="639.50">&lt;core::iter::adapters..</text></g><g><title>_int_malloc (30 samples, 0.57%)</title><rect x="28.3393%" y="613" width="0.5668%" height="15" fill="rgb(241,35,35)"/><text x="28.5893%" y="623.50"></text></g><g><title>__GI___libc_malloc (50 samples, 0.94%)</title><rect x="27.9992%" y="629" width="0.9446%" height="15" fill="rgb(243,32,47)"/><text x="28.2492%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (805 samples, 15.21%)</title><rect x="13.7729%" y="645" width="15.2088%" height="15" fill="rgb(247,202,23)"/><text x="14.0229%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.15%)</title><rect x="30.7576%" y="565" width="0.1511%" height="15" fill="rgb(219,102,11)"/><text x="31.0076%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.15%)</title><rect x="30.7576%" y="549" width="0.1511%" height="15" fill="rgb(243,110,44)"/><text x="31.0076%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.15%)</title><rect x="30.7576%" y="533" width="0.1511%" height="15" fill="rgb(222,74,54)"/><text x="31.0076%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.15%)</title><rect x="30.7576%" y="517" width="0.1511%" height="15" fill="rgb(216,99,12)"/><text x="31.0076%" y="527.50"></text></g><g><title>__GI___libc_malloc (150 samples, 2.83%)</title><rect x="31.0221%" y="453" width="2.8339%" height="15" fill="rgb(226,22,26)"/><text x="31.2721%" y="463.50">__..</text></g><g><title>_int_malloc (103 samples, 1.95%)</title><rect x="31.9101%" y="437" width="1.9460%" height="15" fill="rgb(217,163,10)"/><text x="32.1601%" y="447.50">_..</text></g><g><title>__rdl_alloc (9 samples, 0.17%)</title><rect x="33.8560%" y="453" width="0.1700%" height="15" fill="rgb(213,25,53)"/><text x="34.1060%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.17%)</title><rect x="33.8560%" y="437" width="0.1700%" height="15" fill="rgb(252,105,26)"/><text x="34.1060%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (189 samples, 3.57%)</title><rect x="30.5876%" y="629" width="3.5708%" height="15" fill="rgb(220,39,43)"/><text x="30.8376%" y="639.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (186 samples, 3.51%)</title><rect x="30.6442%" y="613" width="3.5141%" height="15" fill="rgb(229,68,48)"/><text x="30.8942%" y="623.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (182 samples, 3.44%)</title><rect x="30.7198%" y="597" width="3.4385%" height="15" fill="rgb(252,8,32)"/><text x="30.9698%" y="607.50">all..</text></g><g><title>alloc::slice::hack::to_vec (180 samples, 3.40%)</title><rect x="30.7576%" y="581" width="3.4007%" height="15" fill="rgb(223,20,43)"/><text x="31.0076%" y="591.50">all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (172 samples, 3.25%)</title><rect x="30.9087%" y="565" width="3.2496%" height="15" fill="rgb(229,81,49)"/><text x="31.1587%" y="575.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (172 samples, 3.25%)</title><rect x="30.9087%" y="549" width="3.2496%" height="15" fill="rgb(236,28,36)"/><text x="31.1587%" y="559.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (172 samples, 3.25%)</title><rect x="30.9087%" y="533" width="3.2496%" height="15" fill="rgb(249,185,26)"/><text x="31.1587%" y="543.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (172 samples, 3.25%)</title><rect x="30.9087%" y="517" width="3.2496%" height="15" fill="rgb(249,174,33)"/><text x="31.1587%" y="527.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (172 samples, 3.25%)</title><rect x="30.9087%" y="501" width="3.2496%" height="15" fill="rgb(233,201,37)"/><text x="31.1587%" y="511.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (172 samples, 3.25%)</title><rect x="30.9087%" y="485" width="3.2496%" height="15" fill="rgb(221,78,26)"/><text x="31.1587%" y="495.50">all..</text></g><g><title>alloc::alloc::alloc (172 samples, 3.25%)</title><rect x="30.9087%" y="469" width="3.2496%" height="15" fill="rgb(250,127,30)"/><text x="31.1587%" y="479.50">all..</text></g><g><title>__rust_alloc (7 samples, 0.13%)</title><rect x="34.0261%" y="453" width="0.1323%" height="15" fill="rgb(230,49,44)"/><text x="34.2761%" y="463.50"></text></g><g><title>__GI___libc_malloc (123 samples, 2.32%)</title><rect x="34.6118%" y="613" width="2.3238%" height="15" fill="rgb(229,67,23)"/><text x="34.8618%" y="623.50">_..</text></g><g><title>_int_malloc (81 samples, 1.53%)</title><rect x="35.4053%" y="597" width="1.5303%" height="15" fill="rgb(249,83,47)"/><text x="35.6553%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.40%)</title><rect x="36.9356%" y="613" width="0.3968%" height="15" fill="rgb(215,43,3)"/><text x="37.1856%" y="623.50"></text></g><g><title>__rdl_alloc (9 samples, 0.17%)</title><rect x="37.3323%" y="613" width="0.1700%" height="15" fill="rgb(238,154,13)"/><text x="37.5823%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.17%)</title><rect x="37.3323%" y="597" width="0.1700%" height="15" fill="rgb(219,56,2)"/><text x="37.5823%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (178 samples, 3.36%)</title><rect x="34.1583%" y="629" width="3.3629%" height="15" fill="rgb(233,0,4)"/><text x="34.4083%" y="639.50">&lt;ha..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (1,267 samples, 23.94%)</title><rect x="13.6029%" y="661" width="23.9373%" height="15" fill="rgb(235,30,7)"/><text x="13.8529%" y="671.50">&lt;hashbrown::raw::RawTable&lt;T&gt; as core::..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (453 samples, 8.56%)</title><rect x="28.9817%" y="645" width="8.5585%" height="15" fill="rgb(250,79,13)"/><text x="29.2317%" y="655.50">&lt;hashbrown::..</text></g><g><title>__GI___libc_free (24 samples, 0.45%)</title><rect x="38.1258%" y="629" width="0.4534%" height="15" fill="rgb(211,146,34)"/><text x="38.3758%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (156 samples, 2.95%)</title><rect x="37.5401%" y="645" width="2.9473%" height="15" fill="rgb(228,22,38)"/><text x="37.7901%" y="655.50">&lt;h..</text></g><g><title>_int_free (98 samples, 1.85%)</title><rect x="38.6359%" y="629" width="1.8515%" height="15" fill="rgb(235,168,5)"/><text x="38.8859%" y="639.50">_..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (212 samples, 4.01%)</title><rect x="37.5401%" y="661" width="4.0053%" height="15" fill="rgb(221,155,16)"/><text x="37.7901%" y="671.50">&lt;has..</text></g><g><title>_int_free (56 samples, 1.06%)</title><rect x="40.4874%" y="645" width="1.0580%" height="15" fill="rgb(215,215,53)"/><text x="40.7374%" y="655.50"></text></g><g><title>malloc_consolidate (56 samples, 1.06%)</title><rect x="40.4874%" y="629" width="1.0580%" height="15" fill="rgb(223,4,10)"/><text x="40.7374%" y="639.50"></text></g><g><title>unlink_chunk.constprop.0 (13 samples, 0.25%)</title><rect x="41.2998%" y="613" width="0.2456%" height="15" fill="rgb(234,103,6)"/><text x="41.5498%" y="623.50"></text></g><g><title>__GI___libc_free (38 samples, 0.72%)</title><rect x="41.8288%" y="629" width="0.7179%" height="15" fill="rgb(227,97,0)"/><text x="42.0788%" y="639.50"></text></g><g><title>_int_free (152 samples, 2.87%)</title><rect x="42.7168%" y="629" width="2.8717%" height="15" fill="rgb(234,150,53)"/><text x="42.9668%" y="639.50">_i..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (255 samples, 4.82%)</title><rect x="41.5643%" y="645" width="4.8177%" height="15" fill="rgb(228,201,54)"/><text x="41.8143%" y="655.50">&lt;hashb..</text></g><g><title>core::ptr::drop_in_place (42 samples, 0.79%)</title><rect x="45.5885%" y="629" width="0.7935%" height="15" fill="rgb(222,22,37)"/><text x="45.8385%" y="639.50"></text></g><g><title>_int_free (182 samples, 3.44%)</title><rect x="46.4009%" y="645" width="3.4385%" height="15" fill="rgb(237,53,32)"/><text x="46.6509%" y="655.50">_in..</text></g><g><title>malloc_consolidate (181 samples, 3.42%)</title><rect x="46.4198%" y="629" width="3.4196%" height="15" fill="rgb(233,25,53)"/><text x="46.6698%" y="639.50">mal..</text></g><g><title>unlink_chunk.constprop.0 (27 samples, 0.51%)</title><rect x="49.3293%" y="613" width="0.5101%" height="15" fill="rgb(210,40,34)"/><text x="49.5793%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (440 samples, 8.31%)</title><rect x="41.5643%" y="661" width="8.3129%" height="15" fill="rgb(241,220,44)"/><text x="41.8143%" y="671.50">core::ptr::d..</text></g><g><title>decor_mem::select::expr_to_col (8 samples, 0.15%)</title><rect x="49.8961%" y="629" width="0.1511%" height="15" fill="rgb(235,28,35)"/><text x="50.1461%" y="639.50"></text></g><g><title>core::fmt::write (7 samples, 0.13%)</title><rect x="49.9150%" y="613" width="0.1323%" height="15" fill="rgb(210,56,17)"/><text x="50.1650%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (7 samples, 0.13%)</title><rect x="49.9150%" y="597" width="0.1323%" height="15" fill="rgb(224,130,29)"/><text x="50.1650%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.13%)</title><rect x="50.0661%" y="581" width="0.1323%" height="15" fill="rgb(235,212,8)"/><text x="50.3161%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (7 samples, 0.13%)</title><rect x="50.0661%" y="565" width="0.1323%" height="15" fill="rgb(223,33,50)"/><text x="50.3161%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (6 samples, 0.11%)</title><rect x="50.0850%" y="549" width="0.1134%" height="15" fill="rgb(219,149,13)"/><text x="50.3350%" y="559.50"></text></g><g><title>core::fmt::write (9 samples, 0.17%)</title><rect x="50.0472%" y="613" width="0.1700%" height="15" fill="rgb(250,156,29)"/><text x="50.2972%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.17%)</title><rect x="50.0472%" y="597" width="0.1700%" height="15" fill="rgb(216,193,19)"/><text x="50.2972%" y="607.50"></text></g><g><title>decor_mem::select::get_join_on_col_indices (22 samples, 0.42%)</title><rect x="49.8772%" y="661" width="0.4156%" height="15" fill="rgb(216,135,14)"/><text x="50.1272%" y="671.50"></text></g><g><title>decor_mem::select::get_binop_indices (22 samples, 0.42%)</title><rect x="49.8772%" y="645" width="0.4156%" height="15" fill="rgb(241,47,5)"/><text x="50.1272%" y="655.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (13 samples, 0.25%)</title><rect x="50.0472%" y="629" width="0.2456%" height="15" fill="rgb(233,42,35)"/><text x="50.2972%" y="639.50"></text></g><g><title>__GI___libc_realloc (30 samples, 0.57%)</title><rect x="50.9352%" y="645" width="0.5668%" height="15" fill="rgb(231,13,6)"/><text x="51.1852%" y="655.50"></text></g><g><title>_int_realloc (6 samples, 0.11%)</title><rect x="51.3886%" y="629" width="0.1134%" height="15" fill="rgb(207,181,40)"/><text x="51.6386%" y="639.50"></text></g><g><title>_int_free (12 samples, 0.23%)</title><rect x="51.6531%" y="645" width="0.2267%" height="15" fill="rgb(254,173,49)"/><text x="51.9031%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.17%)</title><rect x="51.9932%" y="629" width="0.1700%" height="15" fill="rgb(221,1,38)"/><text x="52.2432%" y="639.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.19%)</title><rect x="52.5789%" y="581" width="0.1889%" height="15" fill="rgb(206,124,46)"/><text x="52.8289%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (26 samples, 0.49%)</title><rect x="52.3144%" y="613" width="0.4912%" height="15" fill="rgb(249,21,11)"/><text x="52.5644%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.36%)</title><rect x="52.4466%" y="597" width="0.3590%" height="15" fill="rgb(222,201,40)"/><text x="52.6966%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (8 samples, 0.15%)</title><rect x="53.4480%" y="549" width="0.1511%" height="15" fill="rgb(235,61,29)"/><text x="53.6980%" y="559.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.28%)</title><rect x="53.4480%" y="565" width="0.2834%" height="15" fill="rgb(219,207,3)"/><text x="53.6980%" y="575.50"></text></g><g><title>core::str::validations::next_code_point (7 samples, 0.13%)</title><rect x="53.5991%" y="549" width="0.1323%" height="15" fill="rgb(222,56,46)"/><text x="53.8491%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (26 samples, 0.49%)</title><rect x="53.7880%" y="549" width="0.4912%" height="15" fill="rgb(239,76,54)"/><text x="54.0380%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (11 samples, 0.21%)</title><rect x="54.0714%" y="533" width="0.2078%" height="15" fill="rgb(231,124,27)"/><text x="54.3214%" y="543.50"></text></g><g><title>alloc::string::String::push (32 samples, 0.60%)</title><rect x="53.7691%" y="565" width="0.6046%" height="15" fill="rgb(249,195,6)"/><text x="54.0191%" y="575.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.42%)</title><rect x="54.3926%" y="437" width="0.4156%" height="15" fill="rgb(237,174,47)"/><text x="54.6426%" y="447.50"></text></g><g><title>_int_malloc (10 samples, 0.19%)</title><rect x="54.6193%" y="421" width="0.1889%" height="15" fill="rgb(206,201,31)"/><text x="54.8693%" y="431.50"></text></g><g><title>alloc::string::String::with_capacity (24 samples, 0.45%)</title><rect x="54.3737%" y="565" width="0.4534%" height="15" fill="rgb(231,57,52)"/><text x="54.6237%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (23 samples, 0.43%)</title><rect x="54.3926%" y="549" width="0.4345%" height="15" fill="rgb(248,177,22)"/><text x="54.6426%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (23 samples, 0.43%)</title><rect x="54.3926%" y="533" width="0.4345%" height="15" fill="rgb(215,211,37)"/><text x="54.6426%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.43%)</title><rect x="54.3926%" y="517" width="0.4345%" height="15" fill="rgb(241,128,51)"/><text x="54.6426%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.43%)</title><rect x="54.3926%" y="501" width="0.4345%" height="15" fill="rgb(227,165,31)"/><text x="54.6426%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (23 samples, 0.43%)</title><rect x="54.3926%" y="485" width="0.4345%" height="15" fill="rgb(228,167,24)"/><text x="54.6426%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.43%)</title><rect x="54.3926%" y="469" width="0.4345%" height="15" fill="rgb(228,143,12)"/><text x="54.6426%" y="479.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.43%)</title><rect x="54.3926%" y="453" width="0.4345%" height="15" fill="rgb(249,149,8)"/><text x="54.6426%" y="463.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (210 samples, 3.97%)</title><rect x="53.2023%" y="581" width="3.9675%" height="15" fill="rgb(243,35,44)"/><text x="53.4523%" y="591.50">allo..</text></g><g><title>core::unicode::unicode_data::conversions::to_upper (124 samples, 2.34%)</title><rect x="54.8271%" y="565" width="2.3427%" height="15" fill="rgb(246,89,9)"/><text x="55.0771%" y="575.50">c..</text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (93 samples, 1.76%)</title><rect x="55.4128%" y="549" width="1.7570%" height="15" fill="rgb(233,213,13)"/><text x="55.6628%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (93 samples, 1.76%)</title><rect x="55.4128%" y="533" width="1.7570%" height="15" fill="rgb(233,141,41)"/><text x="55.6628%" y="543.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (31 samples, 0.59%)</title><rect x="56.5842%" y="517" width="0.5857%" height="15" fill="rgb(239,167,4)"/><text x="56.8342%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (252 samples, 4.76%)</title><rect x="52.8056%" y="613" width="4.7610%" height="15" fill="rgb(209,217,16)"/><text x="53.0556%" y="623.50">&lt;sql_p..</text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (251 samples, 4.74%)</title><rect x="52.8245%" y="597" width="4.7421%" height="15" fill="rgb(219,88,35)"/><text x="53.0745%" y="607.50">sql_pa..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (21 samples, 0.40%)</title><rect x="57.1698%" y="581" width="0.3968%" height="15" fill="rgb(220,193,23)"/><text x="57.4198%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.36%)</title><rect x="57.2076%" y="565" width="0.3590%" height="15" fill="rgb(230,90,52)"/><text x="57.4576%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.17%)</title><rect x="57.3966%" y="549" width="0.1700%" height="15" fill="rgb(252,106,19)"/><text x="57.6466%" y="559.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.11%)</title><rect x="57.7555%" y="597" width="0.1134%" height="15" fill="rgb(206,74,20)"/><text x="58.0055%" y="607.50"></text></g><g><title>_int_free (6 samples, 0.11%)</title><rect x="57.9633%" y="597" width="0.1134%" height="15" fill="rgb(230,138,44)"/><text x="58.2133%" y="607.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.15%)</title><rect x="58.1901%" y="581" width="0.1511%" height="15" fill="rgb(235,182,43)"/><text x="58.4401%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.30%)</title><rect x="58.0767%" y="597" width="0.3023%" height="15" fill="rgb(242,16,51)"/><text x="58.3267%" y="607.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.25%)</title><rect x="58.6624%" y="549" width="0.2456%" height="15" fill="rgb(248,9,4)"/><text x="58.9124%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (27 samples, 0.51%)</title><rect x="58.4546%" y="581" width="0.5101%" height="15" fill="rgb(210,31,22)"/><text x="58.7046%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.38%)</title><rect x="58.5868%" y="565" width="0.3779%" height="15" fill="rgb(239,54,39)"/><text x="58.8368%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (360 samples, 6.80%)</title><rect x="52.2577%" y="629" width="6.8014%" height="15" fill="rgb(230,99,41)"/><text x="52.5077%" y="639.50">&lt;sql_pars..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (72 samples, 1.36%)</title><rect x="57.6988%" y="613" width="1.3603%" height="15" fill="rgb(253,106,12)"/><text x="57.9488%" y="623.50"></text></g><g><title>core::fmt::write (36 samples, 0.68%)</title><rect x="58.3790%" y="597" width="0.6801%" height="15" fill="rgb(213,46,41)"/><text x="58.6290%" y="607.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.19%)</title><rect x="59.1725%" y="581" width="0.1889%" height="15" fill="rgb(215,133,35)"/><text x="59.4225%" y="591.50"></text></g><g><title>_int_malloc (7 samples, 0.13%)</title><rect x="59.2292%" y="565" width="0.1323%" height="15" fill="rgb(213,28,5)"/><text x="59.4792%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (16 samples, 0.30%)</title><rect x="59.0780%" y="613" width="0.3023%" height="15" fill="rgb(215,77,49)"/><text x="59.3280%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.25%)</title><rect x="59.1347%" y="597" width="0.2456%" height="15" fill="rgb(248,100,22)"/><text x="59.3847%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.11%)</title><rect x="59.3803%" y="613" width="0.1134%" height="15" fill="rgb(208,67,9)"/><text x="59.6303%" y="623.50"></text></g><g><title>_int_free (9 samples, 0.17%)</title><rect x="59.5126%" y="613" width="0.1700%" height="15" fill="rgb(219,133,21)"/><text x="59.7626%" y="623.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.43%)</title><rect x="60.0416%" y="597" width="0.4345%" height="15" fill="rgb(246,46,29)"/><text x="60.2916%" y="607.50"></text></g><g><title>_int_realloc (10 samples, 0.19%)</title><rect x="60.2872%" y="581" width="0.1889%" height="15" fill="rgb(246,185,52)"/><text x="60.5372%" y="591.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.25%)</title><rect x="60.8351%" y="581" width="0.2456%" height="15" fill="rgb(252,136,11)"/><text x="61.0851%" y="591.50"></text></g><g><title>_int_malloc (7 samples, 0.13%)</title><rect x="60.9484%" y="565" width="0.1323%" height="15" fill="rgb(219,138,53)"/><text x="61.1984%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.38%)</title><rect x="60.7217%" y="597" width="0.3779%" height="15" fill="rgb(211,51,23)"/><text x="60.9717%" y="607.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.15%)</title><rect x="61.4207%" y="549" width="0.1511%" height="15" fill="rgb(247,221,28)"/><text x="61.6707%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (17 samples, 0.32%)</title><rect x="61.2696%" y="581" width="0.3212%" height="15" fill="rgb(251,222,45)"/><text x="61.5196%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.21%)</title><rect x="61.3830%" y="565" width="0.2078%" height="15" fill="rgb(217,162,53)"/><text x="61.6330%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (140 samples, 2.65%)</title><rect x="59.0591%" y="629" width="2.6450%" height="15" fill="rgb(229,93,14)"/><text x="59.3091%" y="639.50">&lt;s..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (107 samples, 2.02%)</title><rect x="59.6826%" y="613" width="2.0215%" height="15" fill="rgb(209,67,49)"/><text x="59.9326%" y="623.50">s..</text></g><g><title>core::fmt::write (32 samples, 0.60%)</title><rect x="61.0996%" y="597" width="0.6046%" height="15" fill="rgb(213,87,29)"/><text x="61.3496%" y="607.50"></text></g><g><title>core::fmt::write (521 samples, 9.84%)</title><rect x="51.8987%" y="645" width="9.8432%" height="15" fill="rgb(205,151,52)"/><text x="52.1487%" y="655.50">core::fmt::wri..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (2,825 samples, 53.37%)</title><rect x="9.4653%" y="741" width="53.3724%" height="15" fill="rgb(253,215,39)"/><text x="9.7153%" y="751.50">decor_mem::query_transformer::QueryTransformer::query</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (2,825 samples, 53.37%)</title><rect x="9.4653%" y="725" width="53.3724%" height="15" fill="rgb(221,220,41)"/><text x="9.7153%" y="735.50">decor_mem::query_transformer::QueryTransformer::issue_statement</text></g><g><title>decor_mem::select::get_query_results (2,804 samples, 52.98%)</title><rect x="9.8621%" y="709" width="52.9756%" height="15" fill="rgb(218,133,21)"/><text x="10.1121%" y="719.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (2,804 samples, 52.98%)</title><rect x="9.8621%" y="693" width="52.9756%" height="15" fill="rgb(221,193,43)"/><text x="10.1121%" y="703.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (2,641 samples, 49.90%)</title><rect x="12.9416%" y="677" width="49.8961%" height="15" fill="rgb(240,128,52)"/><text x="13.1916%" y="687.50">decor_mem::select::tablewithjoins_to_view</text></g><g><title>decor_mem::views::View::get_rows_of_col (661 samples, 12.49%)</title><rect x="50.3495%" y="661" width="12.4882%" height="15" fill="rgb(253,114,12)"/><text x="50.5995%" y="671.50">decor_mem::views::V..</text></g><g><title>hashbrown::map::make_hash (58 samples, 1.10%)</title><rect x="61.7419%" y="645" width="1.0958%" height="15" fill="rgb(215,223,47)"/><text x="61.9919%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.57%)</title><rect x="62.2709%" y="629" width="0.5668%" height="15" fill="rgb(248,225,23)"/><text x="62.5209%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.17%)</title><rect x="62.8377%" y="677" width="0.1700%" height="15" fill="rgb(250,108,0)"/><text x="63.0877%" y="687.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (15 samples, 0.28%)</title><rect x="62.8377%" y="741" width="0.2834%" height="15" fill="rgb(228,208,7)"/><text x="63.0877%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (15 samples, 0.28%)</title><rect x="62.8377%" y="725" width="0.2834%" height="15" fill="rgb(244,45,10)"/><text x="63.0877%" y="735.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (15 samples, 0.28%)</title><rect x="62.8377%" y="709" width="0.2834%" height="15" fill="rgb(207,125,25)"/><text x="63.0877%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (15 samples, 0.28%)</title><rect x="62.8377%" y="693" width="0.2834%" height="15" fill="rgb(210,195,18)"/><text x="63.0877%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (6 samples, 0.11%)</title><rect x="63.0077%" y="677" width="0.1134%" height="15" fill="rgb(249,80,12)"/><text x="63.2577%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (6 samples, 0.11%)</title><rect x="63.0077%" y="661" width="0.1134%" height="15" fill="rgb(221,65,9)"/><text x="63.2577%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (2,851 samples, 53.86%)</title><rect x="9.4653%" y="757" width="53.8636%" height="15" fill="rgb(235,49,36)"/><text x="9.7153%" y="767.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>decor_mem::stats::get_qtype (11 samples, 0.21%)</title><rect x="63.1211%" y="741" width="0.2078%" height="15" fill="rgb(225,32,20)"/><text x="63.3711%" y="751.50"></text></g><g><title>sql_parser::parser::parse_statements (11 samples, 0.21%)</title><rect x="63.1211%" y="725" width="0.2078%" height="15" fill="rgb(215,141,46)"/><text x="63.3711%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (11 samples, 0.21%)</title><rect x="63.1211%" y="709" width="0.2078%" height="15" fill="rgb(250,160,47)"/><text x="63.3711%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (25 samples, 0.47%)</title><rect x="63.3289%" y="757" width="0.4723%" height="15" fill="rgb(216,222,40)"/><text x="63.5789%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.15%)</title><rect x="63.8012%" y="757" width="0.1511%" height="15" fill="rgb(234,217,39)"/><text x="64.0512%" y="767.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (6 samples, 0.11%)</title><rect x="64.1791%" y="757" width="0.1134%" height="15" fill="rgb(207,178,40)"/><text x="64.4291%" y="767.50"></text></g><g><title>__GI___libc_free (13 samples, 0.25%)</title><rect x="64.4058%" y="757" width="0.2456%" height="15" fill="rgb(221,136,13)"/><text x="64.6558%" y="767.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.21%)</title><rect x="64.6514%" y="757" width="0.2078%" height="15" fill="rgb(249,199,10)"/><text x="64.9014%" y="767.50"></text></g><g><title>_int_free (61 samples, 1.15%)</title><rect x="65.1426%" y="757" width="1.1525%" height="15" fill="rgb(249,222,13)"/><text x="65.3926%" y="767.50"></text></g><g><title>_int_malloc (13 samples, 0.25%)</title><rect x="66.2951%" y="757" width="0.2456%" height="15" fill="rgb(244,185,38)"/><text x="66.5451%" y="767.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (6 samples, 0.11%)</title><rect x="66.6919%" y="757" width="0.1134%" height="15" fill="rgb(236,202,9)"/><text x="66.9419%" y="767.50"></text></g><g><title>alloc::string::String::push (10 samples, 0.19%)</title><rect x="66.8052%" y="757" width="0.1889%" height="15" fill="rgb(250,229,37)"/><text x="67.0552%" y="767.50"></text></g><g><title>core::fmt::write (12 samples, 0.23%)</title><rect x="67.1264%" y="757" width="0.2267%" height="15" fill="rgb(206,174,23)"/><text x="67.3764%" y="767.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (11 samples, 0.21%)</title><rect x="67.4476%" y="709" width="0.2078%" height="15" fill="rgb(211,33,43)"/><text x="67.6976%" y="719.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="67.6743%" y="677" width="0.1323%" height="15" fill="rgb(245,58,50)"/><text x="67.9243%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.15%)</title><rect x="67.8632%" y="677" width="0.1511%" height="15" fill="rgb(244,68,36)"/><text x="68.1132%" y="687.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.13%)</title><rect x="67.8821%" y="661" width="0.1323%" height="15" fill="rgb(232,229,15)"/><text x="68.1321%" y="671.50"></text></g><g><title>_int_malloc (7 samples, 0.13%)</title><rect x="67.8821%" y="645" width="0.1323%" height="15" fill="rgb(254,30,23)"/><text x="68.1321%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.26%)</title><rect x="68.1088%" y="661" width="0.2645%" height="15" fill="rgb(235,160,14)"/><text x="68.3588%" y="671.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.25%)</title><rect x="68.1277%" y="645" width="0.2456%" height="15" fill="rgb(212,155,44)"/><text x="68.3777%" y="655.50"></text></g><g><title>_int_realloc (13 samples, 0.25%)</title><rect x="68.1277%" y="629" width="0.2456%" height="15" fill="rgb(226,2,50)"/><text x="68.3777%" y="639.50"></text></g><g><title>_int_malloc (13 samples, 0.25%)</title><rect x="68.1277%" y="613" width="0.2456%" height="15" fill="rgb(234,177,6)"/><text x="68.3777%" y="623.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (12 samples, 0.23%)</title><rect x="68.3733%" y="661" width="0.2267%" height="15" fill="rgb(217,24,9)"/><text x="68.6233%" y="671.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (63 samples, 1.19%)</title><rect x="67.4476%" y="757" width="1.1903%" height="15" fill="rgb(220,13,46)"/><text x="67.6976%" y="767.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (63 samples, 1.19%)</title><rect x="67.4476%" y="741" width="1.1903%" height="15" fill="rgb(239,221,27)"/><text x="67.6976%" y="751.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (63 samples, 1.19%)</title><rect x="67.4476%" y="725" width="1.1903%" height="15" fill="rgb(222,198,25)"/><text x="67.6976%" y="735.50"></text></g><g><title>decor_mem::stats::get_qtype (52 samples, 0.98%)</title><rect x="67.6554%" y="709" width="0.9824%" height="15" fill="rgb(211,99,13)"/><text x="67.9054%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (52 samples, 0.98%)</title><rect x="67.6554%" y="693" width="0.9824%" height="15" fill="rgb(232,111,31)"/><text x="67.9054%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (29 samples, 0.55%)</title><rect x="68.0899%" y="677" width="0.5479%" height="15" fill="rgb(245,82,37)"/><text x="68.3399%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (7 samples, 0.13%)</title><rect x="68.6378%" y="757" width="0.1323%" height="15" fill="rgb(227,149,46)"/><text x="68.8878%" y="767.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::selection_to_datatable_selection (6 samples, 0.11%)</title><rect x="68.6567%" y="741" width="0.1134%" height="15" fill="rgb(218,36,50)"/><text x="68.9067%" y="751.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::fastpath_expr_to_gid_expr (6 samples, 0.11%)</title><rect x="68.6567%" y="725" width="0.1134%" height="15" fill="rgb(226,80,48)"/><text x="68.9067%" y="735.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (11 samples, 0.21%)</title><rect x="68.8456%" y="757" width="0.2078%" height="15" fill="rgb(238,224,15)"/><text x="69.0956%" y="767.50"></text></g><g><title>sql_parser::parser::parse_statements (11 samples, 0.21%)</title><rect x="68.8456%" y="741" width="0.2078%" height="15" fill="rgb(241,136,10)"/><text x="69.0956%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (11 samples, 0.21%)</title><rect x="68.8456%" y="725" width="0.2078%" height="15" fill="rgb(208,32,45)"/><text x="69.0956%" y="735.50"></text></g><g><title>sk_wait_data (12 samples, 0.23%)</title><rect x="69.5069%" y="453" width="0.2267%" height="15" fill="rgb(207,135,9)"/><text x="69.7569%" y="463.50"></text></g><g><title>wait_woken (11 samples, 0.21%)</title><rect x="69.5258%" y="437" width="0.2078%" height="15" fill="rgb(206,86,44)"/><text x="69.7758%" y="447.50"></text></g><g><title>schedule_timeout (11 samples, 0.21%)</title><rect x="69.5258%" y="421" width="0.2078%" height="15" fill="rgb(245,177,15)"/><text x="69.7758%" y="431.50"></text></g><g><title>schedule (10 samples, 0.19%)</title><rect x="69.5447%" y="405" width="0.1889%" height="15" fill="rgb(206,64,50)"/><text x="69.7947%" y="415.50"></text></g><g><title>__schedule (10 samples, 0.19%)</title><rect x="69.5447%" y="389" width="0.1889%" height="15" fill="rgb(234,36,40)"/><text x="69.7947%" y="399.50"></text></g><g><title>inet_recvmsg (20 samples, 0.38%)</title><rect x="69.4313%" y="485" width="0.3779%" height="15" fill="rgb(213,64,8)"/><text x="69.6813%" y="495.50"></text></g><g><title>tcp_recvmsg (20 samples, 0.38%)</title><rect x="69.4313%" y="469" width="0.3779%" height="15" fill="rgb(210,75,36)"/><text x="69.6813%" y="479.50"></text></g><g><title>do_syscall_64 (22 samples, 0.42%)</title><rect x="69.4124%" y="533" width="0.4156%" height="15" fill="rgb(229,88,21)"/><text x="69.6624%" y="543.50"></text></g><g><title>__x64_sys_recvfrom (22 samples, 0.42%)</title><rect x="69.4124%" y="517" width="0.4156%" height="15" fill="rgb(252,204,47)"/><text x="69.6624%" y="527.50"></text></g><g><title>__sys_recvfrom (21 samples, 0.40%)</title><rect x="69.4313%" y="501" width="0.3968%" height="15" fill="rgb(208,77,27)"/><text x="69.6813%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (26 samples, 0.49%)</title><rect x="69.4124%" y="549" width="0.4912%" height="15" fill="rgb(221,76,26)"/><text x="69.6624%" y="559.50"></text></g><g><title>__libc_recv (28 samples, 0.53%)</title><rect x="69.4124%" y="565" width="0.5290%" height="15" fill="rgb(225,139,18)"/><text x="69.6624%" y="575.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (29 samples, 0.55%)</title><rect x="69.4124%" y="645" width="0.5479%" height="15" fill="rgb(230,137,11)"/><text x="69.6624%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (29 samples, 0.55%)</title><rect x="69.4124%" y="629" width="0.5479%" height="15" fill="rgb(212,28,1)"/><text x="69.6624%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (29 samples, 0.55%)</title><rect x="69.4124%" y="613" width="0.5479%" height="15" fill="rgb(248,164,17)"/><text x="69.6624%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (29 samples, 0.55%)</title><rect x="69.4124%" y="597" width="0.5479%" height="15" fill="rgb(222,171,42)"/><text x="69.6624%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (29 samples, 0.55%)</title><rect x="69.4124%" y="581" width="0.5479%" height="15" fill="rgb(243,84,45)"/><text x="69.6624%" y="591.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.64%)</title><rect x="69.3746%" y="661" width="0.6424%" height="15" fill="rgb(252,49,23)"/><text x="69.6246%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (38 samples, 0.72%)</title><rect x="69.3369%" y="677" width="0.7179%" height="15" fill="rgb(215,19,7)"/><text x="69.5869%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (45 samples, 0.85%)</title><rect x="69.2235%" y="693" width="0.8502%" height="15" fill="rgb(238,81,41)"/><text x="69.4735%" y="703.50"></text></g><g><title>__dev_queue_xmit (6 samples, 0.11%)</title><rect x="70.3571%" y="405" width="0.1134%" height="15" fill="rgb(210,199,37)"/><text x="70.6071%" y="415.50"></text></g><g><title>psi_task_change (6 samples, 0.11%)</title><rect x="70.6405%" y="101" width="0.1134%" height="15" fill="rgb(244,192,49)"/><text x="70.8905%" y="111.50"></text></g><g><title>psi_group_change (6 samples, 0.11%)</title><rect x="70.6405%" y="85" width="0.1134%" height="15" fill="rgb(226,211,11)"/><text x="70.8905%" y="95.50"></text></g><g><title>enqueue_task (7 samples, 0.13%)</title><rect x="70.6405%" y="117" width="0.1323%" height="15" fill="rgb(236,162,54)"/><text x="70.8905%" y="127.50"></text></g><g><title>sock_def_readable (16 samples, 0.30%)</title><rect x="70.5838%" y="181" width="0.3023%" height="15" fill="rgb(220,229,9)"/><text x="70.8338%" y="191.50"></text></g><g><title>__wake_up_common_lock (15 samples, 0.28%)</title><rect x="70.6027%" y="165" width="0.2834%" height="15" fill="rgb(250,87,22)"/><text x="70.8527%" y="175.50"></text></g><g><title>__wake_up_common (14 samples, 0.26%)</title><rect x="70.6216%" y="149" width="0.2645%" height="15" fill="rgb(239,43,17)"/><text x="70.8716%" y="159.50"></text></g><g><title>try_to_wake_up (14 samples, 0.26%)</title><rect x="70.6216%" y="133" width="0.2645%" height="15" fill="rgb(231,177,25)"/><text x="70.8716%" y="143.50"></text></g><g><title>tcp_ack (7 samples, 0.13%)</title><rect x="70.8861%" y="181" width="0.1323%" height="15" fill="rgb(219,179,1)"/><text x="71.1361%" y="191.50"></text></g><g><title>ip_finish_output2 (38 samples, 0.72%)</title><rect x="70.3571%" y="421" width="0.7179%" height="15" fill="rgb(238,219,53)"/><text x="70.6071%" y="431.50"></text></g><g><title>__local_bh_enable_ip (32 samples, 0.60%)</title><rect x="70.4704%" y="405" width="0.6046%" height="15" fill="rgb(232,167,36)"/><text x="70.7204%" y="415.50"></text></g><g><title>do_softirq (32 samples, 0.60%)</title><rect x="70.4704%" y="389" width="0.6046%" height="15" fill="rgb(244,19,51)"/><text x="70.7204%" y="399.50"></text></g><g><title>do_softirq_own_stack (32 samples, 0.60%)</title><rect x="70.4704%" y="373" width="0.6046%" height="15" fill="rgb(224,6,22)"/><text x="70.7204%" y="383.50"></text></g><g><title>__do_softirq (32 samples, 0.60%)</title><rect x="70.4704%" y="357" width="0.6046%" height="15" fill="rgb(224,145,5)"/><text x="70.7204%" y="367.50"></text></g><g><title>net_rx_action (32 samples, 0.60%)</title><rect x="70.4704%" y="341" width="0.6046%" height="15" fill="rgb(234,130,49)"/><text x="70.7204%" y="351.50"></text></g><g><title>process_backlog (32 samples, 0.60%)</title><rect x="70.4704%" y="325" width="0.6046%" height="15" fill="rgb(254,6,2)"/><text x="70.7204%" y="335.50"></text></g><g><title>__netif_receive_skb_one_core (32 samples, 0.60%)</title><rect x="70.4704%" y="309" width="0.6046%" height="15" fill="rgb(208,96,46)"/><text x="70.7204%" y="319.50"></text></g><g><title>ip_rcv (32 samples, 0.60%)</title><rect x="70.4704%" y="293" width="0.6046%" height="15" fill="rgb(239,3,39)"/><text x="70.7204%" y="303.50"></text></g><g><title>ip_local_deliver (31 samples, 0.59%)</title><rect x="70.4893%" y="277" width="0.5857%" height="15" fill="rgb(233,210,1)"/><text x="70.7393%" y="287.50"></text></g><g><title>ip_local_deliver_finish (31 samples, 0.59%)</title><rect x="70.4893%" y="261" width="0.5857%" height="15" fill="rgb(244,137,37)"/><text x="70.7393%" y="271.50"></text></g><g><title>ip_protocol_deliver_rcu (31 samples, 0.59%)</title><rect x="70.4893%" y="245" width="0.5857%" height="15" fill="rgb(240,136,2)"/><text x="70.7393%" y="255.50"></text></g><g><title>tcp_v4_rcv (31 samples, 0.59%)</title><rect x="70.4893%" y="229" width="0.5857%" height="15" fill="rgb(239,18,37)"/><text x="70.7393%" y="239.50"></text></g><g><title>tcp_v4_do_rcv (30 samples, 0.57%)</title><rect x="70.5082%" y="213" width="0.5668%" height="15" fill="rgb(218,185,22)"/><text x="70.7582%" y="223.50"></text></g><g><title>tcp_rcv_established (30 samples, 0.57%)</title><rect x="70.5082%" y="197" width="0.5668%" height="15" fill="rgb(225,218,4)"/><text x="70.7582%" y="207.50"></text></g><g><title>__ip_queue_xmit (43 samples, 0.81%)</title><rect x="70.3004%" y="453" width="0.8124%" height="15" fill="rgb(230,182,32)"/><text x="70.5504%" y="463.50"></text></g><g><title>ip_output (40 samples, 0.76%)</title><rect x="70.3571%" y="437" width="0.7557%" height="15" fill="rgb(242,56,43)"/><text x="70.6071%" y="447.50"></text></g><g><title>__tcp_transmit_skb (47 samples, 0.89%)</title><rect x="70.2437%" y="469" width="0.8880%" height="15" fill="rgb(233,99,24)"/><text x="70.4937%" y="479.50"></text></g><g><title>__tcp_push_pending_frames (53 samples, 1.00%)</title><rect x="70.2248%" y="501" width="1.0013%" height="15" fill="rgb(234,209,42)"/><text x="70.4748%" y="511.50"></text></g><g><title>tcp_write_xmit (52 samples, 0.98%)</title><rect x="70.2437%" y="485" width="0.9824%" height="15" fill="rgb(227,7,12)"/><text x="70.4937%" y="495.50"></text></g><g><title>__x64_sys_sendto (64 samples, 1.21%)</title><rect x="70.1304%" y="581" width="1.2091%" height="15" fill="rgb(245,203,43)"/><text x="70.3804%" y="591.50"></text></g><g><title>__sys_sendto (64 samples, 1.21%)</title><rect x="70.1304%" y="565" width="1.2091%" height="15" fill="rgb(238,205,33)"/><text x="70.3804%" y="575.50"></text></g><g><title>sock_sendmsg (63 samples, 1.19%)</title><rect x="70.1493%" y="549" width="1.1903%" height="15" fill="rgb(231,56,7)"/><text x="70.3993%" y="559.50"></text></g><g><title>tcp_sendmsg (62 samples, 1.17%)</title><rect x="70.1681%" y="533" width="1.1714%" height="15" fill="rgb(244,186,29)"/><text x="70.4181%" y="543.50"></text></g><g><title>tcp_sendmsg_locked (59 samples, 1.11%)</title><rect x="70.2248%" y="517" width="1.1147%" height="15" fill="rgb(234,111,31)"/><text x="70.4748%" y="527.50"></text></g><g><title>do_syscall_64 (67 samples, 1.27%)</title><rect x="70.1304%" y="597" width="1.2658%" height="15" fill="rgb(241,149,10)"/><text x="70.3804%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (72 samples, 1.36%)</title><rect x="70.1304%" y="613" width="1.3603%" height="15" fill="rgb(249,206,44)"/><text x="70.3804%" y="623.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (123 samples, 2.32%)</title><rect x="69.2235%" y="725" width="2.3238%" height="15" fill="rgb(251,153,30)"/><text x="69.4735%" y="735.50">&lt;..</text></g><g><title>mysql::conn::Conn::_query (123 samples, 2.32%)</title><rect x="69.2235%" y="709" width="2.3238%" height="15" fill="rgb(239,152,38)"/><text x="69.4735%" y="719.50">m..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (78 samples, 1.47%)</title><rect x="70.0737%" y="693" width="1.4736%" height="15" fill="rgb(249,139,47)"/><text x="70.3237%" y="703.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (77 samples, 1.45%)</title><rect x="70.0926%" y="677" width="1.4548%" height="15" fill="rgb(244,64,35)"/><text x="70.3426%" y="687.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (77 samples, 1.45%)</title><rect x="70.0926%" y="661" width="1.4548%" height="15" fill="rgb(216,46,15)"/><text x="70.3426%" y="671.50"></text></g><g><title>std::sys_common::net::TcpStream::write (77 samples, 1.45%)</title><rect x="70.0926%" y="645" width="1.4548%" height="15" fill="rgb(250,74,19)"/><text x="70.3426%" y="655.50"></text></g><g><title>__libc_send (77 samples, 1.45%)</title><rect x="70.0926%" y="629" width="1.4548%" height="15" fill="rgb(249,42,33)"/><text x="70.3426%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (6 samples, 0.11%)</title><rect x="71.6796%" y="677" width="0.1134%" height="15" fill="rgb(242,149,17)"/><text x="71.9296%" y="687.50"></text></g><g><title>__tcp_push_pending_frames (8 samples, 0.15%)</title><rect x="71.8496%" y="485" width="0.1511%" height="15" fill="rgb(244,29,21)"/><text x="72.0996%" y="495.50"></text></g><g><title>tcp_write_xmit (8 samples, 0.15%)</title><rect x="71.8496%" y="469" width="0.1511%" height="15" fill="rgb(220,130,37)"/><text x="72.0996%" y="479.50"></text></g><g><title>__tcp_transmit_skb (8 samples, 0.15%)</title><rect x="71.8496%" y="453" width="0.1511%" height="15" fill="rgb(211,67,2)"/><text x="72.0996%" y="463.50"></text></g><g><title>__ip_queue_xmit (8 samples, 0.15%)</title><rect x="71.8496%" y="437" width="0.1511%" height="15" fill="rgb(235,68,52)"/><text x="72.0996%" y="447.50"></text></g><g><title>ip_output (8 samples, 0.15%)</title><rect x="71.8496%" y="421" width="0.1511%" height="15" fill="rgb(246,142,3)"/><text x="72.0996%" y="431.50"></text></g><g><title>ip_finish_output2 (8 samples, 0.15%)</title><rect x="71.8496%" y="405" width="0.1511%" height="15" fill="rgb(241,25,7)"/><text x="72.0996%" y="415.50"></text></g><g><title>__local_bh_enable_ip (6 samples, 0.11%)</title><rect x="71.8874%" y="389" width="0.1134%" height="15" fill="rgb(242,119,39)"/><text x="72.1374%" y="399.50"></text></g><g><title>do_softirq (6 samples, 0.11%)</title><rect x="71.8874%" y="373" width="0.1134%" height="15" fill="rgb(241,98,45)"/><text x="72.1374%" y="383.50"></text></g><g><title>do_softirq_own_stack (6 samples, 0.11%)</title><rect x="71.8874%" y="357" width="0.1134%" height="15" fill="rgb(254,28,30)"/><text x="72.1374%" y="367.50"></text></g><g><title>__do_softirq (6 samples, 0.11%)</title><rect x="71.8874%" y="341" width="0.1134%" height="15" fill="rgb(241,142,54)"/><text x="72.1374%" y="351.50"></text></g><g><title>net_rx_action (6 samples, 0.11%)</title><rect x="71.8874%" y="325" width="0.1134%" height="15" fill="rgb(222,85,15)"/><text x="72.1374%" y="335.50"></text></g><g><title>process_backlog (6 samples, 0.11%)</title><rect x="71.8874%" y="309" width="0.1134%" height="15" fill="rgb(210,85,47)"/><text x="72.1374%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (6 samples, 0.11%)</title><rect x="71.8874%" y="293" width="0.1134%" height="15" fill="rgb(224,206,25)"/><text x="72.1374%" y="303.50"></text></g><g><title>do_syscall_64 (12 samples, 0.23%)</title><rect x="71.7929%" y="581" width="0.2267%" height="15" fill="rgb(243,201,19)"/><text x="72.0429%" y="591.50"></text></g><g><title>__x64_sys_sendto (11 samples, 0.21%)</title><rect x="71.8118%" y="565" width="0.2078%" height="15" fill="rgb(236,59,4)"/><text x="72.0618%" y="575.50"></text></g><g><title>__sys_sendto (11 samples, 0.21%)</title><rect x="71.8118%" y="549" width="0.2078%" height="15" fill="rgb(254,179,45)"/><text x="72.0618%" y="559.50"></text></g><g><title>sock_sendmsg (11 samples, 0.21%)</title><rect x="71.8118%" y="533" width="0.2078%" height="15" fill="rgb(226,14,10)"/><text x="72.0618%" y="543.50"></text></g><g><title>tcp_sendmsg (10 samples, 0.19%)</title><rect x="71.8307%" y="517" width="0.1889%" height="15" fill="rgb(244,27,41)"/><text x="72.0807%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (10 samples, 0.19%)</title><rect x="71.8307%" y="501" width="0.1889%" height="15" fill="rgb(235,35,32)"/><text x="72.0807%" y="511.50"></text></g><g><title>lobsters_microbenchmarks::main (152 samples, 2.87%)</title><rect x="69.1668%" y="757" width="2.8717%" height="15" fill="rgb(218,68,31)"/><text x="69.4168%" y="767.50">lo..</text></g><g><title>lobsters_microbenchmarks::queriers::vote::vote_on_story (149 samples, 2.82%)</title><rect x="69.2235%" y="741" width="2.8150%" height="15" fill="rgb(207,120,37)"/><text x="69.4735%" y="751.50">lo..</text></g><g><title>mysql::conn::queryable::Queryable::query (24 samples, 0.45%)</title><rect x="71.5851%" y="725" width="0.4534%" height="15" fill="rgb(227,98,0)"/><text x="71.8351%" y="735.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (19 samples, 0.36%)</title><rect x="71.6796%" y="709" width="0.3590%" height="15" fill="rgb(207,7,3)"/><text x="71.9296%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (19 samples, 0.36%)</title><rect x="71.6796%" y="693" width="0.3590%" height="15" fill="rgb(206,98,19)"/><text x="71.9296%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (13 samples, 0.25%)</title><rect x="71.7929%" y="677" width="0.2456%" height="15" fill="rgb(217,5,26)"/><text x="72.0429%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (13 samples, 0.25%)</title><rect x="71.7929%" y="661" width="0.2456%" height="15" fill="rgb(235,190,38)"/><text x="72.0429%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (13 samples, 0.25%)</title><rect x="71.7929%" y="645" width="0.2456%" height="15" fill="rgb(247,86,24)"/><text x="72.0429%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (13 samples, 0.25%)</title><rect x="71.7929%" y="629" width="0.2456%" height="15" fill="rgb(205,101,16)"/><text x="72.0429%" y="639.50"></text></g><g><title>__libc_send (13 samples, 0.25%)</title><rect x="71.7929%" y="613" width="0.2456%" height="15" fill="rgb(246,168,33)"/><text x="72.0429%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (13 samples, 0.25%)</title><rect x="71.7929%" y="597" width="0.2456%" height="15" fill="rgb(231,114,1)"/><text x="72.0429%" y="607.50"></text></g><g><title>sk_wait_data (10 samples, 0.19%)</title><rect x="72.4164%" y="421" width="0.1889%" height="15" fill="rgb(207,184,53)"/><text x="72.6664%" y="431.50"></text></g><g><title>wait_woken (8 samples, 0.15%)</title><rect x="72.4542%" y="405" width="0.1511%" height="15" fill="rgb(224,95,51)"/><text x="72.7042%" y="415.50"></text></g><g><title>schedule_timeout (7 samples, 0.13%)</title><rect x="72.4731%" y="389" width="0.1323%" height="15" fill="rgb(212,188,45)"/><text x="72.7231%" y="399.50"></text></g><g><title>schedule (7 samples, 0.13%)</title><rect x="72.4731%" y="373" width="0.1323%" height="15" fill="rgb(223,154,38)"/><text x="72.7231%" y="383.50"></text></g><g><title>__schedule (7 samples, 0.13%)</title><rect x="72.4731%" y="357" width="0.1323%" height="15" fill="rgb(251,22,52)"/><text x="72.7231%" y="367.50"></text></g><g><title>__x64_sys_recvfrom (15 samples, 0.28%)</title><rect x="72.3597%" y="485" width="0.2834%" height="15" fill="rgb(229,209,22)"/><text x="72.6097%" y="495.50"></text></g><g><title>__sys_recvfrom (15 samples, 0.28%)</title><rect x="72.3597%" y="469" width="0.2834%" height="15" fill="rgb(234,138,34)"/><text x="72.6097%" y="479.50"></text></g><g><title>inet_recvmsg (15 samples, 0.28%)</title><rect x="72.3597%" y="453" width="0.2834%" height="15" fill="rgb(212,95,11)"/><text x="72.6097%" y="463.50"></text></g><g><title>tcp_recvmsg (15 samples, 0.28%)</title><rect x="72.3597%" y="437" width="0.2834%" height="15" fill="rgb(240,179,47)"/><text x="72.6097%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (16 samples, 0.30%)</title><rect x="72.3597%" y="517" width="0.3023%" height="15" fill="rgb(240,163,11)"/><text x="72.6097%" y="527.50"></text></g><g><title>do_syscall_64 (16 samples, 0.30%)</title><rect x="72.3597%" y="501" width="0.3023%" height="15" fill="rgb(236,37,12)"/><text x="72.6097%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (17 samples, 0.32%)</title><rect x="72.3597%" y="613" width="0.3212%" height="15" fill="rgb(232,164,16)"/><text x="72.6097%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (17 samples, 0.32%)</title><rect x="72.3597%" y="597" width="0.3212%" height="15" fill="rgb(244,205,15)"/><text x="72.6097%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (17 samples, 0.32%)</title><rect x="72.3597%" y="581" width="0.3212%" height="15" fill="rgb(223,117,47)"/><text x="72.6097%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (17 samples, 0.32%)</title><rect x="72.3597%" y="565" width="0.3212%" height="15" fill="rgb(244,107,35)"/><text x="72.6097%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (17 samples, 0.32%)</title><rect x="72.3597%" y="549" width="0.3212%" height="15" fill="rgb(205,140,8)"/><text x="72.6097%" y="559.50"></text></g><g><title>__libc_recv (17 samples, 0.32%)</title><rect x="72.3597%" y="533" width="0.3212%" height="15" fill="rgb(228,84,46)"/><text x="72.6097%" y="543.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.36%)</title><rect x="72.3597%" y="629" width="0.3590%" height="15" fill="rgb(254,188,9)"/><text x="72.6097%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (21 samples, 0.40%)</title><rect x="72.3408%" y="661" width="0.3968%" height="15" fill="rgb(206,112,54)"/><text x="72.5908%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (21 samples, 0.40%)</title><rect x="72.3408%" y="645" width="0.3968%" height="15" fill="rgb(216,84,49)"/><text x="72.5908%" y="655.50"></text></g><g><title>enqueue_task_fair (6 samples, 0.11%)</title><rect x="73.0588%" y="69" width="0.1134%" height="15" fill="rgb(214,194,35)"/><text x="73.3088%" y="79.50"></text></g><g><title>enqueue_entity (6 samples, 0.11%)</title><rect x="73.0588%" y="53" width="0.1134%" height="15" fill="rgb(249,28,3)"/><text x="73.3088%" y="63.50"></text></g><g><title>__wake_up_common (8 samples, 0.15%)</title><rect x="73.0399%" y="117" width="0.1511%" height="15" fill="rgb(222,56,52)"/><text x="73.2899%" y="127.50"></text></g><g><title>pollwake (8 samples, 0.15%)</title><rect x="73.0399%" y="101" width="0.1511%" height="15" fill="rgb(245,217,50)"/><text x="73.2899%" y="111.50"></text></g><g><title>try_to_wake_up (8 samples, 0.15%)</title><rect x="73.0399%" y="85" width="0.1511%" height="15" fill="rgb(213,201,24)"/><text x="73.2899%" y="95.50"></text></g><g><title>sock_def_readable (10 samples, 0.19%)</title><rect x="73.0399%" y="149" width="0.1889%" height="15" fill="rgb(248,116,28)"/><text x="73.2899%" y="159.50"></text></g><g><title>__wake_up_common_lock (10 samples, 0.19%)</title><rect x="73.0399%" y="133" width="0.1889%" height="15" fill="rgb(219,72,43)"/><text x="73.2899%" y="143.50"></text></g><g><title>__tcp_push_pending_frames (21 samples, 0.40%)</title><rect x="72.8698%" y="469" width="0.3968%" height="15" fill="rgb(209,138,14)"/><text x="73.1198%" y="479.50"></text></g><g><title>tcp_write_xmit (21 samples, 0.40%)</title><rect x="72.8698%" y="453" width="0.3968%" height="15" fill="rgb(222,18,33)"/><text x="73.1198%" y="463.50"></text></g><g><title>__tcp_transmit_skb (21 samples, 0.40%)</title><rect x="72.8698%" y="437" width="0.3968%" height="15" fill="rgb(213,199,7)"/><text x="73.1198%" y="447.50"></text></g><g><title>__ip_queue_xmit (21 samples, 0.40%)</title><rect x="72.8698%" y="421" width="0.3968%" height="15" fill="rgb(250,110,10)"/><text x="73.1198%" y="431.50"></text></g><g><title>ip_output (20 samples, 0.38%)</title><rect x="72.8887%" y="405" width="0.3779%" height="15" fill="rgb(248,123,6)"/><text x="73.1387%" y="415.50"></text></g><g><title>ip_finish_output2 (18 samples, 0.34%)</title><rect x="72.9265%" y="389" width="0.3401%" height="15" fill="rgb(206,91,31)"/><text x="73.1765%" y="399.50"></text></g><g><title>__local_bh_enable_ip (18 samples, 0.34%)</title><rect x="72.9265%" y="373" width="0.3401%" height="15" fill="rgb(211,154,13)"/><text x="73.1765%" y="383.50"></text></g><g><title>do_softirq (18 samples, 0.34%)</title><rect x="72.9265%" y="357" width="0.3401%" height="15" fill="rgb(225,148,7)"/><text x="73.1765%" y="367.50"></text></g><g><title>do_softirq_own_stack (18 samples, 0.34%)</title><rect x="72.9265%" y="341" width="0.3401%" height="15" fill="rgb(220,160,43)"/><text x="73.1765%" y="351.50"></text></g><g><title>__do_softirq (18 samples, 0.34%)</title><rect x="72.9265%" y="325" width="0.3401%" height="15" fill="rgb(213,52,39)"/><text x="73.1765%" y="335.50"></text></g><g><title>net_rx_action (18 samples, 0.34%)</title><rect x="72.9265%" y="309" width="0.3401%" height="15" fill="rgb(243,137,7)"/><text x="73.1765%" y="319.50"></text></g><g><title>process_backlog (18 samples, 0.34%)</title><rect x="72.9265%" y="293" width="0.3401%" height="15" fill="rgb(230,79,13)"/><text x="73.1765%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (18 samples, 0.34%)</title><rect x="72.9265%" y="277" width="0.3401%" height="15" fill="rgb(247,105,23)"/><text x="73.1765%" y="287.50"></text></g><g><title>ip_rcv (18 samples, 0.34%)</title><rect x="72.9265%" y="261" width="0.3401%" height="15" fill="rgb(223,179,41)"/><text x="73.1765%" y="271.50"></text></g><g><title>ip_local_deliver (18 samples, 0.34%)</title><rect x="72.9265%" y="245" width="0.3401%" height="15" fill="rgb(218,9,34)"/><text x="73.1765%" y="255.50"></text></g><g><title>ip_local_deliver_finish (18 samples, 0.34%)</title><rect x="72.9265%" y="229" width="0.3401%" height="15" fill="rgb(222,106,8)"/><text x="73.1765%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (18 samples, 0.34%)</title><rect x="72.9265%" y="213" width="0.3401%" height="15" fill="rgb(211,220,0)"/><text x="73.1765%" y="223.50"></text></g><g><title>tcp_v4_rcv (17 samples, 0.32%)</title><rect x="72.9454%" y="197" width="0.3212%" height="15" fill="rgb(229,52,16)"/><text x="73.1954%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (14 samples, 0.26%)</title><rect x="73.0021%" y="181" width="0.2645%" height="15" fill="rgb(212,155,18)"/><text x="73.2521%" y="191.50"></text></g><g><title>tcp_rcv_established (14 samples, 0.26%)</title><rect x="73.0021%" y="165" width="0.2645%" height="15" fill="rgb(242,21,14)"/><text x="73.2521%" y="175.50"></text></g><g><title>sock_sendmsg (26 samples, 0.49%)</title><rect x="72.7943%" y="517" width="0.4912%" height="15" fill="rgb(222,19,48)"/><text x="73.0443%" y="527.50"></text></g><g><title>tcp_sendmsg (26 samples, 0.49%)</title><rect x="72.7943%" y="501" width="0.4912%" height="15" fill="rgb(232,45,27)"/><text x="73.0443%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (25 samples, 0.47%)</title><rect x="72.8131%" y="485" width="0.4723%" height="15" fill="rgb(249,103,42)"/><text x="73.0631%" y="495.50"></text></g><g><title>__x64_sys_sendto (27 samples, 0.51%)</title><rect x="72.7943%" y="549" width="0.5101%" height="15" fill="rgb(246,81,33)"/><text x="73.0443%" y="559.50"></text></g><g><title>__sys_sendto (27 samples, 0.51%)</title><rect x="72.7943%" y="533" width="0.5101%" height="15" fill="rgb(252,33,42)"/><text x="73.0443%" y="543.50"></text></g><g><title>do_syscall_64 (30 samples, 0.57%)</title><rect x="72.7754%" y="565" width="0.5668%" height="15" fill="rgb(209,212,41)"/><text x="73.0254%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (55 samples, 1.04%)</title><rect x="72.3219%" y="693" width="1.0391%" height="15" fill="rgb(207,154,6)"/><text x="72.5719%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (54 samples, 1.02%)</title><rect x="72.3408%" y="677" width="1.0202%" height="15" fill="rgb(223,64,47)"/><text x="72.5908%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (33 samples, 0.62%)</title><rect x="72.7376%" y="661" width="0.6235%" height="15" fill="rgb(211,161,38)"/><text x="72.9876%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (31 samples, 0.59%)</title><rect x="72.7754%" y="645" width="0.5857%" height="15" fill="rgb(219,138,40)"/><text x="73.0254%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (31 samples, 0.59%)</title><rect x="72.7754%" y="629" width="0.5857%" height="15" fill="rgb(241,228,46)"/><text x="73.0254%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (31 samples, 0.59%)</title><rect x="72.7754%" y="613" width="0.5857%" height="15" fill="rgb(223,209,38)"/><text x="73.0254%" y="623.50"></text></g><g><title>__libc_send (31 samples, 0.59%)</title><rect x="72.7754%" y="597" width="0.5857%" height="15" fill="rgb(236,164,45)"/><text x="73.0254%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (31 samples, 0.59%)</title><rect x="72.7754%" y="581" width="0.5857%" height="15" fill="rgb(231,15,5)"/><text x="73.0254%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (6 samples, 0.11%)</title><rect x="73.3799%" y="693" width="0.1134%" height="15" fill="rgb(252,35,15)"/><text x="73.6299%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::InsertStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (8 samples, 0.15%)</title><rect x="73.7011%" y="661" width="0.1511%" height="15" fill="rgb(248,181,18)"/><text x="73.9511%" y="671.50"></text></g><g><title>core::fmt::write (25 samples, 0.47%)</title><rect x="73.5122%" y="693" width="0.4723%" height="15" fill="rgb(233,39,42)"/><text x="73.7622%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (19 samples, 0.36%)</title><rect x="73.6255%" y="677" width="0.3590%" height="15" fill="rgb(238,110,33)"/><text x="73.8755%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::UpdateStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.13%)</title><rect x="73.8523%" y="661" width="0.1323%" height="15" fill="rgb(233,195,10)"/><text x="74.1023%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.17%)</title><rect x="73.9845%" y="693" width="0.1700%" height="15" fill="rgb(254,105,3)"/><text x="74.2345%" y="703.50"></text></g><g><title>sock_def_readable (7 samples, 0.13%)</title><rect x="74.3435%" y="133" width="0.1323%" height="15" fill="rgb(221,225,9)"/><text x="74.5935%" y="143.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.13%)</title><rect x="74.3435%" y="117" width="0.1323%" height="15" fill="rgb(224,227,45)"/><text x="74.5935%" y="127.50"></text></g><g><title>__wake_up_common (7 samples, 0.13%)</title><rect x="74.3435%" y="101" width="0.1323%" height="15" fill="rgb(229,198,43)"/><text x="74.5935%" y="111.50"></text></g><g><title>pollwake (6 samples, 0.11%)</title><rect x="74.3624%" y="85" width="0.1134%" height="15" fill="rgb(206,209,35)"/><text x="74.6124%" y="95.50"></text></g><g><title>try_to_wake_up (6 samples, 0.11%)</title><rect x="74.3624%" y="69" width="0.1134%" height="15" fill="rgb(245,195,53)"/><text x="74.6124%" y="79.50"></text></g><g><title>__tcp_transmit_skb (18 samples, 0.34%)</title><rect x="74.2301%" y="421" width="0.3401%" height="15" fill="rgb(240,92,26)"/><text x="74.4801%" y="431.50"></text></g><g><title>__ip_queue_xmit (18 samples, 0.34%)</title><rect x="74.2301%" y="405" width="0.3401%" height="15" fill="rgb(207,40,23)"/><text x="74.4801%" y="415.50"></text></g><g><title>ip_output (17 samples, 0.32%)</title><rect x="74.2490%" y="389" width="0.3212%" height="15" fill="rgb(223,111,35)"/><text x="74.4990%" y="399.50"></text></g><g><title>ip_finish_output2 (17 samples, 0.32%)</title><rect x="74.2490%" y="373" width="0.3212%" height="15" fill="rgb(229,147,28)"/><text x="74.4990%" y="383.50"></text></g><g><title>__local_bh_enable_ip (16 samples, 0.30%)</title><rect x="74.2679%" y="357" width="0.3023%" height="15" fill="rgb(211,29,28)"/><text x="74.5179%" y="367.50"></text></g><g><title>do_softirq (16 samples, 0.30%)</title><rect x="74.2679%" y="341" width="0.3023%" height="15" fill="rgb(228,72,33)"/><text x="74.5179%" y="351.50"></text></g><g><title>do_softirq_own_stack (15 samples, 0.28%)</title><rect x="74.2868%" y="325" width="0.2834%" height="15" fill="rgb(205,214,31)"/><text x="74.5368%" y="335.50"></text></g><g><title>__do_softirq (15 samples, 0.28%)</title><rect x="74.2868%" y="309" width="0.2834%" height="15" fill="rgb(224,111,15)"/><text x="74.5368%" y="319.50"></text></g><g><title>net_rx_action (15 samples, 0.28%)</title><rect x="74.2868%" y="293" width="0.2834%" height="15" fill="rgb(253,21,26)"/><text x="74.5368%" y="303.50"></text></g><g><title>process_backlog (14 samples, 0.26%)</title><rect x="74.3057%" y="277" width="0.2645%" height="15" fill="rgb(245,139,43)"/><text x="74.5557%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (14 samples, 0.26%)</title><rect x="74.3057%" y="261" width="0.2645%" height="15" fill="rgb(252,170,7)"/><text x="74.5557%" y="271.50"></text></g><g><title>ip_rcv (14 samples, 0.26%)</title><rect x="74.3057%" y="245" width="0.2645%" height="15" fill="rgb(231,118,14)"/><text x="74.5557%" y="255.50"></text></g><g><title>ip_local_deliver (14 samples, 0.26%)</title><rect x="74.3057%" y="229" width="0.2645%" height="15" fill="rgb(238,83,0)"/><text x="74.5557%" y="239.50"></text></g><g><title>ip_local_deliver_finish (14 samples, 0.26%)</title><rect x="74.3057%" y="213" width="0.2645%" height="15" fill="rgb(221,39,39)"/><text x="74.5557%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (14 samples, 0.26%)</title><rect x="74.3057%" y="197" width="0.2645%" height="15" fill="rgb(222,119,46)"/><text x="74.5557%" y="207.50"></text></g><g><title>tcp_v4_rcv (14 samples, 0.26%)</title><rect x="74.3057%" y="181" width="0.2645%" height="15" fill="rgb(222,165,49)"/><text x="74.5557%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (14 samples, 0.26%)</title><rect x="74.3057%" y="165" width="0.2645%" height="15" fill="rgb(219,113,52)"/><text x="74.5557%" y="175.50"></text></g><g><title>tcp_rcv_established (14 samples, 0.26%)</title><rect x="74.3057%" y="149" width="0.2645%" height="15" fill="rgb(214,7,15)"/><text x="74.5557%" y="159.50"></text></g><g><title>__tcp_push_pending_frames (19 samples, 0.36%)</title><rect x="74.2301%" y="453" width="0.3590%" height="15" fill="rgb(235,32,4)"/><text x="74.4801%" y="463.50"></text></g><g><title>tcp_write_xmit (19 samples, 0.36%)</title><rect x="74.2301%" y="437" width="0.3590%" height="15" fill="rgb(238,90,54)"/><text x="74.4801%" y="447.50"></text></g><g><title>__x64_sys_sendto (21 samples, 0.40%)</title><rect x="74.2301%" y="533" width="0.3968%" height="15" fill="rgb(213,208,19)"/><text x="74.4801%" y="543.50"></text></g><g><title>__sys_sendto (21 samples, 0.40%)</title><rect x="74.2301%" y="517" width="0.3968%" height="15" fill="rgb(233,156,4)"/><text x="74.4801%" y="527.50"></text></g><g><title>sock_sendmsg (21 samples, 0.40%)</title><rect x="74.2301%" y="501" width="0.3968%" height="15" fill="rgb(207,194,5)"/><text x="74.4801%" y="511.50"></text></g><g><title>tcp_sendmsg (21 samples, 0.40%)</title><rect x="74.2301%" y="485" width="0.3968%" height="15" fill="rgb(206,111,30)"/><text x="74.4801%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (21 samples, 0.40%)</title><rect x="74.2301%" y="469" width="0.3968%" height="15" fill="rgb(243,70,54)"/><text x="74.4801%" y="479.50"></text></g><g><title>do_syscall_64 (23 samples, 0.43%)</title><rect x="74.2301%" y="549" width="0.4345%" height="15" fill="rgb(242,28,8)"/><text x="74.4801%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (25 samples, 0.47%)</title><rect x="74.2301%" y="565" width="0.4723%" height="15" fill="rgb(219,106,18)"/><text x="74.4801%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (28 samples, 0.53%)</title><rect x="74.1923%" y="677" width="0.5290%" height="15" fill="rgb(244,222,10)"/><text x="74.4423%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (28 samples, 0.53%)</title><rect x="74.1923%" y="661" width="0.5290%" height="15" fill="rgb(236,179,52)"/><text x="74.4423%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (27 samples, 0.51%)</title><rect x="74.2112%" y="645" width="0.5101%" height="15" fill="rgb(213,23,39)"/><text x="74.4612%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (27 samples, 0.51%)</title><rect x="74.2112%" y="629" width="0.5101%" height="15" fill="rgb(238,48,10)"/><text x="74.4612%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (27 samples, 0.51%)</title><rect x="74.2112%" y="613" width="0.5101%" height="15" fill="rgb(251,196,23)"/><text x="74.4612%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (27 samples, 0.51%)</title><rect x="74.2112%" y="597" width="0.5101%" height="15" fill="rgb(250,152,24)"/><text x="74.4612%" y="607.50"></text></g><g><title>__libc_send (27 samples, 0.51%)</title><rect x="74.2112%" y="581" width="0.5101%" height="15" fill="rgb(209,150,17)"/><text x="74.4612%" y="591.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (33 samples, 0.62%)</title><rect x="74.1545%" y="693" width="0.6235%" height="15" fill="rgb(234,202,34)"/><text x="74.4045%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.49%)</title><rect x="75.0425%" y="661" width="0.4912%" height="15" fill="rgb(253,148,53)"/><text x="75.2925%" y="671.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.19%)</title><rect x="75.3448%" y="645" width="0.1889%" height="15" fill="rgb(218,129,16)"/><text x="75.5948%" y="655.50"></text></g><g><title>_int_malloc (8 samples, 0.15%)</title><rect x="75.3826%" y="629" width="0.1511%" height="15" fill="rgb(216,85,19)"/><text x="75.6326%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (114 samples, 2.15%)</title><rect x="75.7038%" y="661" width="2.1538%" height="15" fill="rgb(235,228,7)"/><text x="75.9538%" y="671.50">a..</text></g><g><title>__GI___libc_malloc (114 samples, 2.15%)</title><rect x="75.7038%" y="645" width="2.1538%" height="15" fill="rgb(245,175,0)"/><text x="75.9538%" y="655.50">_..</text></g><g><title>_int_malloc (114 samples, 2.15%)</title><rect x="75.7038%" y="629" width="2.1538%" height="15" fill="rgb(208,168,36)"/><text x="75.9538%" y="639.50">_..</text></g><g><title>_int_free (6 samples, 0.11%)</title><rect x="77.9331%" y="645" width="0.1134%" height="15" fill="rgb(246,171,24)"/><text x="78.1831%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.21%)</title><rect x="77.8953%" y="661" width="0.2078%" height="15" fill="rgb(215,142,24)"/><text x="78.1453%" y="671.50"></text></g><g><title>decor_mem::select::expr_to_col (8 samples, 0.15%)</title><rect x="78.1032%" y="661" width="0.1511%" height="15" fill="rgb(250,187,7)"/><text x="78.3532%" y="671.50"></text></g><g><title>core::fmt::write (7 samples, 0.13%)</title><rect x="78.1220%" y="645" width="0.1323%" height="15" fill="rgb(228,66,33)"/><text x="78.3720%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (7 samples, 0.13%)</title><rect x="78.1220%" y="629" width="0.1323%" height="15" fill="rgb(234,215,21)"/><text x="78.3720%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.13%)</title><rect x="78.3677%" y="613" width="0.1323%" height="15" fill="rgb(222,191,20)"/><text x="78.6177%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (7 samples, 0.13%)</title><rect x="78.3677%" y="597" width="0.1323%" height="15" fill="rgb(245,79,54)"/><text x="78.6177%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.13%)</title><rect x="78.3677%" y="581" width="0.1323%" height="15" fill="rgb(240,10,37)"/><text x="78.6177%" y="591.50"></text></g><g><title>core::fmt::write (12 samples, 0.23%)</title><rect x="78.3299%" y="645" width="0.2267%" height="15" fill="rgb(214,192,32)"/><text x="78.5799%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (11 samples, 0.21%)</title><rect x="78.3488%" y="629" width="0.2078%" height="15" fill="rgb(209,36,54)"/><text x="78.5988%" y="639.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (18 samples, 0.34%)</title><rect x="78.2732%" y="661" width="0.3401%" height="15" fill="rgb(220,10,11)"/><text x="78.5232%" y="671.50"></text></g><g><title>decor_mem::select::get_query_results (203 samples, 3.84%)</title><rect x="74.8914%" y="693" width="3.8353%" height="15" fill="rgb(221,106,17)"/><text x="75.1414%" y="703.50">deco..</text></g><g><title>decor_mem::select::get_setexpr_results (203 samples, 3.84%)</title><rect x="74.8914%" y="677" width="3.8353%" height="15" fill="rgb(251,142,44)"/><text x="75.1414%" y="687.50">deco..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (8 samples, 0.15%)</title><rect x="78.9722%" y="597" width="0.1511%" height="15" fill="rgb(238,13,15)"/><text x="79.2222%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (11 samples, 0.21%)</title><rect x="78.9344%" y="629" width="0.2078%" height="15" fill="rgb(208,107,27)"/><text x="79.1844%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (11 samples, 0.21%)</title><rect x="78.9344%" y="613" width="0.2078%" height="15" fill="rgb(205,136,37)"/><text x="79.1844%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (16 samples, 0.30%)</title><rect x="78.9155%" y="645" width="0.3023%" height="15" fill="rgb(250,205,27)"/><text x="79.1655%" y="655.50"></text></g><g><title>core::fmt::write (22 samples, 0.42%)</title><rect x="78.8967%" y="661" width="0.4156%" height="15" fill="rgb(210,80,43)"/><text x="79.1467%" y="671.50"></text></g><g><title>decor_mem::views::Views::insert (35 samples, 0.66%)</title><rect x="78.7266%" y="693" width="0.6613%" height="15" fill="rgb(247,160,36)"/><text x="78.9766%" y="703.50"></text></g><g><title>decor_mem::views::View::insert_into_index (29 samples, 0.55%)</title><rect x="78.8400%" y="677" width="0.5479%" height="15" fill="rgb(234,13,49)"/><text x="79.0900%" y="687.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (9 samples, 0.17%)</title><rect x="79.5012%" y="677" width="0.1700%" height="15" fill="rgb(234,122,0)"/><text x="79.7512%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.17%)</title><rect x="79.7657%" y="613" width="0.1700%" height="15" fill="rgb(207,146,38)"/><text x="80.0157%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (9 samples, 0.17%)</title><rect x="79.7657%" y="597" width="0.1700%" height="15" fill="rgb(207,177,25)"/><text x="80.0157%" y="607.50"></text></g><g><title>core::fmt::write (10 samples, 0.19%)</title><rect x="79.7657%" y="645" width="0.1889%" height="15" fill="rgb(211,178,42)"/><text x="80.0157%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (10 samples, 0.19%)</title><rect x="79.7657%" y="629" width="0.1889%" height="15" fill="rgb(230,69,54)"/><text x="80.0157%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.13%)</title><rect x="80.0491%" y="533" width="0.1323%" height="15" fill="rgb(214,135,41)"/><text x="80.2991%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.17%)</title><rect x="80.0302%" y="565" width="0.1700%" height="15" fill="rgb(237,67,25)"/><text x="80.2802%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (9 samples, 0.17%)</title><rect x="80.0302%" y="549" width="0.1700%" height="15" fill="rgb(222,189,50)"/><text x="80.2802%" y="559.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (429 samples, 8.11%)</title><rect x="72.1330%" y="725" width="8.1050%" height="15" fill="rgb(245,148,34)"/><text x="72.3830%" y="735.50">decor_mem::..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (429 samples, 8.11%)</title><rect x="72.1330%" y="709" width="8.1050%" height="15" fill="rgb(222,29,6)"/><text x="72.3830%" y="719.50">decor_mem::..</text></g><g><title>decor_mem::views::Views::update (45 samples, 0.85%)</title><rect x="79.3879%" y="693" width="0.8502%" height="15" fill="rgb(221,189,43)"/><text x="79.6379%" y="703.50"></text></g><g><title>decor_mem::select::get_value_for_row (26 samples, 0.49%)</title><rect x="79.7468%" y="677" width="0.4912%" height="15" fill="rgb(207,36,27)"/><text x="79.9968%" y="687.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (25 samples, 0.47%)</title><rect x="79.7657%" y="661" width="0.4723%" height="15" fill="rgb(217,90,24)"/><text x="80.0157%" y="671.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (15 samples, 0.28%)</title><rect x="79.9547%" y="645" width="0.2834%" height="15" fill="rgb(224,66,35)"/><text x="80.2047%" y="655.50"></text></g><g><title>alloc::fmt::format (15 samples, 0.28%)</title><rect x="79.9547%" y="629" width="0.2834%" height="15" fill="rgb(221,13,50)"/><text x="80.2047%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (14 samples, 0.26%)</title><rect x="79.9735%" y="613" width="0.2645%" height="15" fill="rgb(236,68,49)"/><text x="80.2235%" y="623.50"></text></g><g><title>core::fmt::write (14 samples, 0.26%)</title><rect x="79.9735%" y="597" width="0.2645%" height="15" fill="rgb(229,146,28)"/><text x="80.2235%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (11 samples, 0.21%)</title><rect x="80.0302%" y="581" width="0.2078%" height="15" fill="rgb(225,31,38)"/><text x="80.2802%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (8 samples, 0.15%)</title><rect x="80.4081%" y="693" width="0.1511%" height="15" fill="rgb(250,208,3)"/><text x="80.6581%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (22 samples, 0.42%)</title><rect x="80.2381%" y="709" width="0.4156%" height="15" fill="rgb(246,54,23)"/><text x="80.4881%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.17%)</title><rect x="80.6537%" y="709" width="0.1700%" height="15" fill="rgb(243,76,11)"/><text x="80.9037%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (9 samples, 0.17%)</title><rect x="80.6537%" y="693" width="0.1700%" height="15" fill="rgb(245,21,50)"/><text x="80.9037%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (8 samples, 0.15%)</title><rect x="80.6726%" y="677" width="0.1511%" height="15" fill="rgb(228,9,43)"/><text x="80.9226%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (28 samples, 0.53%)</title><rect x="81.2205%" y="661" width="0.5290%" height="15" fill="rgb(208,100,47)"/><text x="81.4705%" y="671.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (10 samples, 0.19%)</title><rect x="81.5606%" y="645" width="0.1889%" height="15" fill="rgb(232,26,8)"/><text x="81.8106%" y="655.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.11%)</title><rect x="81.6361%" y="629" width="0.1134%" height="15" fill="rgb(216,166,38)"/><text x="81.8861%" y="639.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (90 samples, 1.70%)</title><rect x="80.2381%" y="725" width="1.7004%" height="15" fill="rgb(251,202,51)"/><text x="80.4881%" y="735.50"></text></g><g><title>sql_parser::parser::parse_statements (59 samples, 1.11%)</title><rect x="80.8237%" y="709" width="1.1147%" height="15" fill="rgb(254,216,34)"/><text x="81.0737%" y="719.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (51 samples, 0.96%)</title><rect x="80.9749%" y="693" width="0.9635%" height="15" fill="rgb(251,32,27)"/><text x="81.2249%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (44 samples, 0.83%)</title><rect x="81.1071%" y="677" width="0.8313%" height="15" fill="rgb(208,127,28)"/><text x="81.3571%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (8 samples, 0.15%)</title><rect x="81.7873%" y="661" width="0.1511%" height="15" fill="rgb(224,137,22)"/><text x="82.0373%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.34%)</title><rect x="81.9384%" y="677" width="0.3401%" height="15" fill="rgb(254,70,32)"/><text x="82.1884%" y="687.50"></text></g><g><title>__GI___libc_realloc (18 samples, 0.34%)</title><rect x="81.9384%" y="661" width="0.3401%" height="15" fill="rgb(229,75,37)"/><text x="82.1884%" y="671.50"></text></g><g><title>_int_realloc (18 samples, 0.34%)</title><rect x="81.9384%" y="645" width="0.3401%" height="15" fill="rgb(252,64,23)"/><text x="82.1884%" y="655.50"></text></g><g><title>_int_malloc (18 samples, 0.34%)</title><rect x="81.9384%" y="629" width="0.3401%" height="15" fill="rgb(232,162,48)"/><text x="82.1884%" y="639.50"></text></g><g><title>malloc_consolidate (18 samples, 0.34%)</title><rect x="81.9384%" y="613" width="0.3401%" height="15" fill="rgb(246,160,12)"/><text x="82.1884%" y="623.50"></text></g><g><title>__memcmp_avx2_movbe (12 samples, 0.23%)</title><rect x="82.7697%" y="645" width="0.2267%" height="15" fill="rgb(247,166,0)"/><text x="83.0197%" y="655.50"></text></g><g><title>alloc::string::String::push (8 samples, 0.15%)</title><rect x="83.0531%" y="629" width="0.1511%" height="15" fill="rgb(249,219,21)"/><text x="83.3031%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (7 samples, 0.13%)</title><rect x="83.0720%" y="613" width="0.1323%" height="15" fill="rgb(205,209,3)"/><text x="83.3220%" y="623.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (67 samples, 1.27%)</title><rect x="82.2974%" y="661" width="1.2658%" height="15" fill="rgb(243,44,1)"/><text x="82.5474%" y="671.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (30 samples, 0.57%)</title><rect x="82.9964%" y="645" width="0.5668%" height="15" fill="rgb(206,159,16)"/><text x="83.2464%" y="655.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (16 samples, 0.30%)</title><rect x="83.2609%" y="629" width="0.3023%" height="15" fill="rgb(244,77,30)"/><text x="83.5109%" y="639.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (14 samples, 0.26%)</title><rect x="83.2987%" y="613" width="0.2645%" height="15" fill="rgb(218,69,12)"/><text x="83.5487%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (14 samples, 0.26%)</title><rect x="83.2987%" y="597" width="0.2645%" height="15" fill="rgb(212,87,7)"/><text x="83.5487%" y="607.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (7 samples, 0.13%)</title><rect x="83.4309%" y="581" width="0.1323%" height="15" fill="rgb(245,114,25)"/><text x="83.6809%" y="591.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (614 samples, 11.60%)</title><rect x="72.0385%" y="757" width="11.6002%" height="15" fill="rgb(210,61,42)"/><text x="72.2885%" y="767.50">msql_srv::MysqlIn..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (609 samples, 11.51%)</title><rect x="72.1330%" y="741" width="11.5058%" height="15" fill="rgb(211,52,33)"/><text x="72.3830%" y="751.50">&lt;decor_mem::Shim ..</text></g><g><title>decor_mem::stats::get_qtype (90 samples, 1.70%)</title><rect x="81.9384%" y="725" width="1.7004%" height="15" fill="rgb(234,58,33)"/><text x="82.1884%" y="735.50"></text></g><g><title>sql_parser::parser::parse_statements (90 samples, 1.70%)</title><rect x="81.9384%" y="709" width="1.7004%" height="15" fill="rgb(220,115,36)"/><text x="82.1884%" y="719.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (90 samples, 1.70%)</title><rect x="81.9384%" y="693" width="1.7004%" height="15" fill="rgb(243,153,54)"/><text x="82.1884%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (72 samples, 1.36%)</title><rect x="82.2785%" y="677" width="1.3603%" height="15" fill="rgb(251,47,18)"/><text x="82.5285%" y="687.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.11%)</title><rect x="83.7143%" y="485" width="0.1134%" height="15" fill="rgb(242,102,42)"/><text x="83.9643%" y="495.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="83.7143%" y="677" width="0.1323%" height="15" fill="rgb(234,31,38)"/><text x="83.9643%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="83.7143%" y="661" width="0.1323%" height="15" fill="rgb(221,117,51)"/><text x="83.9643%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="83.7143%" y="645" width="0.1323%" height="15" fill="rgb(212,20,18)"/><text x="83.9643%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.13%)</title><rect x="83.7143%" y="629" width="0.1323%" height="15" fill="rgb(245,133,36)"/><text x="83.9643%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.13%)</title><rect x="83.7143%" y="613" width="0.1323%" height="15" fill="rgb(212,6,19)"/><text x="83.9643%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.13%)</title><rect x="83.7143%" y="597" width="0.1323%" height="15" fill="rgb(218,1,36)"/><text x="83.9643%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.13%)</title><rect x="83.7143%" y="581" width="0.1323%" height="15" fill="rgb(246,84,54)"/><text x="83.9643%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.13%)</title><rect x="83.7143%" y="565" width="0.1323%" height="15" fill="rgb(242,110,6)"/><text x="83.9643%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.13%)</title><rect x="83.7143%" y="549" width="0.1323%" height="15" fill="rgb(214,47,5)"/><text x="83.9643%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.13%)</title><rect x="83.7143%" y="533" width="0.1323%" height="15" fill="rgb(218,159,25)"/><text x="83.9643%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.13%)</title><rect x="83.7143%" y="517" width="0.1323%" height="15" fill="rgb(215,211,28)"/><text x="83.9643%" y="527.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.13%)</title><rect x="83.7143%" y="501" width="0.1323%" height="15" fill="rgb(238,59,32)"/><text x="83.9643%" y="511.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (10 samples, 0.19%)</title><rect x="83.7143%" y="693" width="0.1889%" height="15" fill="rgb(226,82,3)"/><text x="83.9643%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (13 samples, 0.25%)</title><rect x="83.7143%" y="741" width="0.2456%" height="15" fill="rgb(240,164,32)"/><text x="83.9643%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (13 samples, 0.25%)</title><rect x="83.7143%" y="725" width="0.2456%" height="15" fill="rgb(232,46,7)"/><text x="83.9643%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (13 samples, 0.25%)</title><rect x="83.7143%" y="709" width="0.2456%" height="15" fill="rgb(229,129,53)"/><text x="83.9643%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.60%)</title><rect x="84.1489%" y="645" width="0.6046%" height="15" fill="rgb(234,188,29)"/><text x="84.3989%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.60%)</title><rect x="84.1489%" y="629" width="0.6046%" height="15" fill="rgb(246,141,4)"/><text x="84.3989%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32 samples, 0.60%)</title><rect x="84.1489%" y="613" width="0.6046%" height="15" fill="rgb(229,23,39)"/><text x="84.3989%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.60%)</title><rect x="84.1489%" y="597" width="0.6046%" height="15" fill="rgb(206,12,3)"/><text x="84.3989%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (32 samples, 0.60%)</title><rect x="84.1489%" y="581" width="0.6046%" height="15" fill="rgb(252,226,20)"/><text x="84.3989%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32 samples, 0.60%)</title><rect x="84.1489%" y="565" width="0.6046%" height="15" fill="rgb(216,123,35)"/><text x="84.3989%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (32 samples, 0.60%)</title><rect x="84.1489%" y="549" width="0.6046%" height="15" fill="rgb(212,68,40)"/><text x="84.3989%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.60%)</title><rect x="84.1489%" y="533" width="0.6046%" height="15" fill="rgb(254,125,32)"/><text x="84.3989%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (32 samples, 0.60%)</title><rect x="84.1489%" y="517" width="0.6046%" height="15" fill="rgb(253,97,22)"/><text x="84.3989%" y="527.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (39 samples, 0.74%)</title><rect x="84.0355%" y="677" width="0.7368%" height="15" fill="rgb(241,101,14)"/><text x="84.2855%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (37 samples, 0.70%)</title><rect x="84.0733%" y="661" width="0.6990%" height="15" fill="rgb(238,103,29)"/><text x="84.3233%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (41 samples, 0.77%)</title><rect x="84.0166%" y="725" width="0.7746%" height="15" fill="rgb(233,195,47)"/><text x="84.2666%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (41 samples, 0.77%)</title><rect x="84.0166%" y="709" width="0.7746%" height="15" fill="rgb(246,218,30)"/><text x="84.2666%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (41 samples, 0.77%)</title><rect x="84.0166%" y="693" width="0.7746%" height="15" fill="rgb(219,145,47)"/><text x="84.2666%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (17 samples, 0.32%)</title><rect x="84.7912%" y="693" width="0.3212%" height="15" fill="rgb(243,12,26)"/><text x="85.0412%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (15 samples, 0.28%)</title><rect x="84.8290%" y="677" width="0.2834%" height="15" fill="rgb(214,87,16)"/><text x="85.0790%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 0.68%)</title><rect x="84.7912%" y="709" width="0.6801%" height="15" fill="rgb(208,99,42)"/><text x="85.0412%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (19 samples, 0.36%)</title><rect x="85.1124%" y="693" width="0.3590%" height="15" fill="rgb(253,99,2)"/><text x="85.3624%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_object_name (7 samples, 0.13%)</title><rect x="85.6981%" y="677" width="0.1323%" height="15" fill="rgb(220,168,23)"/><text x="85.9481%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_identifier (6 samples, 0.11%)</title><rect x="85.7170%" y="661" width="0.1134%" height="15" fill="rgb(242,38,24)"/><text x="85.9670%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (120 samples, 2.27%)</title><rect x="83.7143%" y="757" width="2.2671%" height="15" fill="rgb(225,182,9)"/><text x="83.9643%" y="767.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (104 samples, 1.96%)</title><rect x="84.0166%" y="741" width="1.9649%" height="15" fill="rgb(243,178,37)"/><text x="84.2666%" y="751.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_select (63 samples, 1.19%)</title><rect x="84.7912%" y="725" width="1.1903%" height="15" fill="rgb(232,139,19)"/><text x="85.0412%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (27 samples, 0.51%)</title><rect x="85.4714%" y="709" width="0.5101%" height="15" fill="rgb(225,201,24)"/><text x="85.7214%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (25 samples, 0.47%)</title><rect x="85.5092%" y="693" width="0.4723%" height="15" fill="rgb(221,47,46)"/><text x="85.7592%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_optional_table_alias (8 samples, 0.15%)</title><rect x="85.8303%" y="677" width="0.1511%" height="15" fill="rgb(249,23,13)"/><text x="86.0803%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_optional_alias (8 samples, 0.15%)</title><rect x="85.8303%" y="661" width="0.1511%" height="15" fill="rgb(219,9,5)"/><text x="86.0803%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (12 samples, 0.23%)</title><rect x="86.3404%" y="693" width="0.2267%" height="15" fill="rgb(254,171,16)"/><text x="86.5904%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::expected (10 samples, 0.19%)</title><rect x="86.3782%" y="677" width="0.1889%" height="15" fill="rgb(230,171,20)"/><text x="86.6282%" y="687.50"></text></g><g><title>alloc::fmt::format (7 samples, 0.13%)</title><rect x="86.4349%" y="661" width="0.1323%" height="15" fill="rgb(210,71,41)"/><text x="86.6849%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.13%)</title><rect x="86.4349%" y="645" width="0.1323%" height="15" fill="rgb(206,173,20)"/><text x="86.6849%" y="655.50"></text></g><g><title>core::fmt::write (7 samples, 0.13%)</title><rect x="86.4349%" y="629" width="0.1323%" height="15" fill="rgb(233,88,34)"/><text x="86.6849%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (19 samples, 0.36%)</title><rect x="86.2271%" y="725" width="0.3590%" height="15" fill="rgb(223,209,46)"/><text x="86.4771%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (18 samples, 0.34%)</title><rect x="86.2460%" y="709" width="0.3401%" height="15" fill="rgb(250,43,18)"/><text x="86.4960%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (36 samples, 0.68%)</title><rect x="86.1515%" y="757" width="0.6801%" height="15" fill="rgb(208,13,10)"/><text x="86.4015%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (32 samples, 0.60%)</title><rect x="86.2271%" y="741" width="0.6046%" height="15" fill="rgb(212,200,36)"/><text x="86.4771%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (13 samples, 0.25%)</title><rect x="86.5861%" y="725" width="0.2456%" height="15" fill="rgb(225,90,30)"/><text x="86.8361%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (13 samples, 0.25%)</title><rect x="86.5861%" y="709" width="0.2456%" height="15" fill="rgb(236,182,39)"/><text x="86.8361%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (10 samples, 0.19%)</title><rect x="86.6427%" y="693" width="0.1889%" height="15" fill="rgb(212,144,35)"/><text x="86.8927%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (8 samples, 0.15%)</title><rect x="86.8317%" y="693" width="0.1511%" height="15" fill="rgb(228,63,44)"/><text x="87.0817%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (22 samples, 0.42%)</title><rect x="86.8317%" y="757" width="0.4156%" height="15" fill="rgb(228,109,6)"/><text x="87.0817%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (22 samples, 0.42%)</title><rect x="86.8317%" y="741" width="0.4156%" height="15" fill="rgb(238,117,24)"/><text x="87.0817%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (22 samples, 0.42%)</title><rect x="86.8317%" y="725" width="0.4156%" height="15" fill="rgb(242,26,26)"/><text x="87.0817%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (22 samples, 0.42%)</title><rect x="86.8317%" y="709" width="0.4156%" height="15" fill="rgb(221,92,48)"/><text x="87.0817%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (14 samples, 0.26%)</title><rect x="86.9828%" y="693" width="0.2645%" height="15" fill="rgb(209,209,32)"/><text x="87.2328%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (8 samples, 0.15%)</title><rect x="87.2851%" y="709" width="0.1511%" height="15" fill="rgb(221,70,22)"/><text x="87.5351%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (11 samples, 0.21%)</title><rect x="87.2473%" y="725" width="0.2078%" height="15" fill="rgb(248,145,5)"/><text x="87.4973%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (13 samples, 0.25%)</title><rect x="87.6063%" y="709" width="0.2456%" height="15" fill="rgb(226,116,26)"/><text x="87.8563%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (7 samples, 0.13%)</title><rect x="87.9652%" y="693" width="0.1323%" height="15" fill="rgb(244,5,17)"/><text x="88.2152%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (19 samples, 0.36%)</title><rect x="88.0975%" y="693" width="0.3590%" height="15" fill="rgb(252,159,33)"/><text x="88.3475%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.19%)</title><rect x="88.5698%" y="677" width="0.1889%" height="15" fill="rgb(206,71,0)"/><text x="88.8198%" y="687.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.19%)</title><rect x="88.5698%" y="661" width="0.1889%" height="15" fill="rgb(233,118,54)"/><text x="88.8198%" y="671.50"></text></g><g><title>_int_malloc (10 samples, 0.19%)</title><rect x="88.5698%" y="645" width="0.1889%" height="15" fill="rgb(234,83,48)"/><text x="88.8198%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (90 samples, 1.70%)</title><rect x="87.2473%" y="757" width="1.7004%" height="15" fill="rgb(228,3,54)"/><text x="87.4973%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (90 samples, 1.70%)</title><rect x="87.2473%" y="741" width="1.7004%" height="15" fill="rgb(226,155,13)"/><text x="87.4973%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (79 samples, 1.49%)</title><rect x="87.4551%" y="725" width="1.4925%" height="15" fill="rgb(241,28,37)"/><text x="87.7051%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (58 samples, 1.10%)</title><rect x="87.8519%" y="709" width="1.0958%" height="15" fill="rgb(233,93,10)"/><text x="88.1019%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (23 samples, 0.43%)</title><rect x="88.5131%" y="693" width="0.4345%" height="15" fill="rgb(225,113,19)"/><text x="88.7631%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (10 samples, 0.19%)</title><rect x="88.7587%" y="677" width="0.1889%" height="15" fill="rgb(241,2,18)"/><text x="89.0087%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (8 samples, 0.15%)</title><rect x="89.0232%" y="709" width="0.1511%" height="15" fill="rgb(228,207,21)"/><text x="89.2732%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (13 samples, 0.25%)</title><rect x="89.1744%" y="709" width="0.2456%" height="15" fill="rgb(213,211,35)"/><text x="89.4244%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (28 samples, 0.53%)</title><rect x="89.0043%" y="725" width="0.5290%" height="15" fill="rgb(209,83,10)"/><text x="89.2543%" y="735.50"></text></g><g><title>sql_parser::parser::parse_statements (30 samples, 0.57%)</title><rect x="88.9855%" y="757" width="0.5668%" height="15" fill="rgb(209,164,1)"/><text x="89.2355%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (29 samples, 0.55%)</title><rect x="89.0043%" y="741" width="0.5479%" height="15" fill="rgb(213,184,43)"/><text x="89.2543%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 0.26%)</title><rect x="89.5522%" y="533" width="0.2645%" height="15" fill="rgb(231,61,34)"/><text x="89.8022%" y="543.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (14 samples, 0.26%)</title><rect x="89.5522%" y="517" width="0.2645%" height="15" fill="rgb(235,75,3)"/><text x="89.8022%" y="527.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (13 samples, 0.25%)</title><rect x="89.5711%" y="501" width="0.2456%" height="15" fill="rgb(220,106,47)"/><text x="89.8211%" y="511.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (8 samples, 0.15%)</title><rect x="89.6656%" y="485" width="0.1511%" height="15" fill="rgb(210,196,33)"/><text x="89.9156%" y="495.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (6 samples, 0.11%)</title><rect x="89.7034%" y="469" width="0.1134%" height="15" fill="rgb(229,154,42)"/><text x="89.9534%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (6 samples, 0.11%)</title><rect x="89.7034%" y="453" width="0.1134%" height="15" fill="rgb(228,114,26)"/><text x="89.9534%" y="463.50"></text></g><g><title>start_thread (15 samples, 0.28%)</title><rect x="89.5522%" y="757" width="0.2834%" height="15" fill="rgb(208,144,1)"/><text x="89.8022%" y="767.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (15 samples, 0.28%)</title><rect x="89.5522%" y="741" width="0.2834%" height="15" fill="rgb(239,112,37)"/><text x="89.8022%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (15 samples, 0.28%)</title><rect x="89.5522%" y="725" width="0.2834%" height="15" fill="rgb(210,96,50)"/><text x="89.8022%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (15 samples, 0.28%)</title><rect x="89.5522%" y="709" width="0.2834%" height="15" fill="rgb(222,178,2)"/><text x="89.8022%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (15 samples, 0.28%)</title><rect x="89.5522%" y="693" width="0.2834%" height="15" fill="rgb(226,74,18)"/><text x="89.8022%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15 samples, 0.28%)</title><rect x="89.5522%" y="677" width="0.2834%" height="15" fill="rgb(225,67,54)"/><text x="89.8022%" y="687.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (15 samples, 0.28%)</title><rect x="89.5522%" y="661" width="0.2834%" height="15" fill="rgb(251,92,32)"/><text x="89.8022%" y="671.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (15 samples, 0.28%)</title><rect x="89.5522%" y="645" width="0.2834%" height="15" fill="rgb(228,149,22)"/><text x="89.8022%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (15 samples, 0.28%)</title><rect x="89.5522%" y="629" width="0.2834%" height="15" fill="rgb(243,54,13)"/><text x="89.8022%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (15 samples, 0.28%)</title><rect x="89.5522%" y="613" width="0.2834%" height="15" fill="rgb(243,180,28)"/><text x="89.8022%" y="623.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (15 samples, 0.28%)</title><rect x="89.5522%" y="597" width="0.2834%" height="15" fill="rgb(208,167,24)"/><text x="89.8022%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.28%)</title><rect x="89.5522%" y="581" width="0.2834%" height="15" fill="rgb(245,73,45)"/><text x="89.8022%" y="591.50"></text></g><g><title>core::fmt::write (15 samples, 0.28%)</title><rect x="89.5522%" y="565" width="0.2834%" height="15" fill="rgb(237,203,48)"/><text x="89.8022%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (15 samples, 0.28%)</title><rect x="89.5522%" y="549" width="0.2834%" height="15" fill="rgb(211,197,16)"/><text x="89.8022%" y="559.50"></text></g><g><title>std::rt::lang_start_internal (10 samples, 0.19%)</title><rect x="89.8923%" y="757" width="0.1889%" height="15" fill="rgb(243,99,51)"/><text x="90.1423%" y="767.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.19%)</title><rect x="89.8923%" y="741" width="0.1889%" height="15" fill="rgb(215,123,29)"/><text x="90.1423%" y="751.50"></text></g><g><title>std::panicking::try (10 samples, 0.19%)</title><rect x="89.8923%" y="725" width="0.1889%" height="15" fill="rgb(239,186,37)"/><text x="90.1423%" y="735.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.19%)</title><rect x="89.8923%" y="709" width="0.1889%" height="15" fill="rgb(252,136,39)"/><text x="90.1423%" y="719.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (10 samples, 0.19%)</title><rect x="89.8923%" y="693" width="0.1889%" height="15" fill="rgb(223,213,32)"/><text x="90.1423%" y="703.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (10 samples, 0.19%)</title><rect x="89.8923%" y="677" width="0.1889%" height="15" fill="rgb(233,115,5)"/><text x="90.1423%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 0.19%)</title><rect x="89.8923%" y="661" width="0.1889%" height="15" fill="rgb(207,226,44)"/><text x="90.1423%" y="671.50"></text></g><g><title>lobsters_microbenchmarks::main (10 samples, 0.19%)</title><rect x="89.8923%" y="645" width="0.1889%" height="15" fill="rgb(208,126,0)"/><text x="90.1423%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::queriers::vote::vote_on_story (7 samples, 0.13%)</title><rect x="89.9490%" y="629" width="0.1323%" height="15" fill="rgb(244,66,21)"/><text x="90.1990%" y="639.50"></text></g><g><title>[unknown] (4,291 samples, 81.07%)</title><rect x="9.1253%" y="773" width="81.0693%" height="15" fill="rgb(222,97,12)"/><text x="9.3753%" y="783.50">[unknown]</text></g><g><title>core::ptr::drop_in_place (10 samples, 0.19%)</title><rect x="90.3080%" y="613" width="0.1889%" height="15" fill="rgb(219,213,19)"/><text x="90.5580%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.15%)</title><rect x="90.3457%" y="597" width="0.1511%" height="15" fill="rgb(252,169,30)"/><text x="90.5957%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.13%)</title><rect x="90.3646%" y="581" width="0.1323%" height="15" fill="rgb(206,32,51)"/><text x="90.6146%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (11 samples, 0.21%)</title><rect x="90.4969%" y="613" width="0.2078%" height="15" fill="rgb(250,172,42)"/><text x="90.7469%" y="623.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (9 samples, 0.17%)</title><rect x="90.5347%" y="597" width="0.1700%" height="15" fill="rgb(209,34,43)"/><text x="90.7847%" y="607.50"></text></g><g><title>decor_mem::stats::get_qtype (6 samples, 0.11%)</title><rect x="90.7047%" y="613" width="0.1134%" height="15" fill="rgb(223,11,35)"/><text x="90.9547%" y="623.50"></text></g><g><title>pty_write (9 samples, 0.17%)</title><rect x="90.9314%" y="213" width="0.1700%" height="15" fill="rgb(251,219,26)"/><text x="91.1814%" y="223.50"></text></g><g><title>queue_work_on (9 samples, 0.17%)</title><rect x="90.9314%" y="197" width="0.1700%" height="15" fill="rgb(231,119,3)"/><text x="91.1814%" y="207.50"></text></g><g><title>__queue_work (8 samples, 0.15%)</title><rect x="90.9503%" y="181" width="0.1511%" height="15" fill="rgb(216,97,11)"/><text x="91.2003%" y="191.50"></text></g><g><title>try_to_wake_up (7 samples, 0.13%)</title><rect x="90.9692%" y="165" width="0.1323%" height="15" fill="rgb(223,59,9)"/><text x="91.2192%" y="175.50"></text></g><g><title>log::__private_api_log (16 samples, 0.30%)</title><rect x="90.8181%" y="613" width="0.3023%" height="15" fill="rgb(233,93,31)"/><text x="91.0681%" y="623.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (16 samples, 0.30%)</title><rect x="90.8181%" y="597" width="0.3023%" height="15" fill="rgb(239,81,33)"/><text x="91.0681%" y="607.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (16 samples, 0.30%)</title><rect x="90.8181%" y="581" width="0.3023%" height="15" fill="rgb(213,120,34)"/><text x="91.0681%" y="591.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (14 samples, 0.26%)</title><rect x="90.8558%" y="565" width="0.2645%" height="15" fill="rgb(243,49,53)"/><text x="91.1058%" y="575.50"></text></g><g><title>std::io::stdio::_eprint (13 samples, 0.25%)</title><rect x="90.8747%" y="549" width="0.2456%" height="15" fill="rgb(247,216,33)"/><text x="91.1247%" y="559.50"></text></g><g><title>std::io::stdio::print_to (13 samples, 0.25%)</title><rect x="90.8747%" y="533" width="0.2456%" height="15" fill="rgb(226,26,14)"/><text x="91.1247%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (13 samples, 0.25%)</title><rect x="90.8747%" y="517" width="0.2456%" height="15" fill="rgb(215,49,53)"/><text x="91.1247%" y="527.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (13 samples, 0.25%)</title><rect x="90.8747%" y="501" width="0.2456%" height="15" fill="rgb(245,162,40)"/><text x="91.1247%" y="511.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (13 samples, 0.25%)</title><rect x="90.8747%" y="485" width="0.2456%" height="15" fill="rgb(229,68,17)"/><text x="91.1247%" y="495.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (13 samples, 0.25%)</title><rect x="90.8747%" y="469" width="0.2456%" height="15" fill="rgb(213,182,10)"/><text x="91.1247%" y="479.50"></text></g><g><title>std::io::Write::write_fmt (13 samples, 0.25%)</title><rect x="90.8747%" y="453" width="0.2456%" height="15" fill="rgb(245,125,30)"/><text x="91.1247%" y="463.50"></text></g><g><title>core::fmt::write (13 samples, 0.25%)</title><rect x="90.8747%" y="437" width="0.2456%" height="15" fill="rgb(232,202,2)"/><text x="91.1247%" y="447.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (13 samples, 0.25%)</title><rect x="90.8747%" y="421" width="0.2456%" height="15" fill="rgb(237,140,51)"/><text x="91.1247%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (13 samples, 0.25%)</title><rect x="90.8747%" y="405" width="0.2456%" height="15" fill="rgb(236,157,25)"/><text x="91.1247%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (13 samples, 0.25%)</title><rect x="90.8747%" y="389" width="0.2456%" height="15" fill="rgb(219,209,0)"/><text x="91.1247%" y="399.50"></text></g><g><title>std::io::Write::write_all (13 samples, 0.25%)</title><rect x="90.8747%" y="373" width="0.2456%" height="15" fill="rgb(240,116,54)"/><text x="91.1247%" y="383.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (13 samples, 0.25%)</title><rect x="90.8747%" y="357" width="0.2456%" height="15" fill="rgb(216,10,36)"/><text x="91.1247%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (13 samples, 0.25%)</title><rect x="90.8747%" y="341" width="0.2456%" height="15" fill="rgb(222,72,44)"/><text x="91.1247%" y="351.50"></text></g><g><title>__libc_write (13 samples, 0.25%)</title><rect x="90.8747%" y="325" width="0.2456%" height="15" fill="rgb(232,159,9)"/><text x="91.1247%" y="335.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.21%)</title><rect x="90.9125%" y="309" width="0.2078%" height="15" fill="rgb(210,39,32)"/><text x="91.1625%" y="319.50"></text></g><g><title>do_syscall_64 (11 samples, 0.21%)</title><rect x="90.9125%" y="293" width="0.2078%" height="15" fill="rgb(216,194,45)"/><text x="91.1625%" y="303.50"></text></g><g><title>ksys_write (11 samples, 0.21%)</title><rect x="90.9125%" y="277" width="0.2078%" height="15" fill="rgb(218,18,35)"/><text x="91.1625%" y="287.50"></text></g><g><title>vfs_write (11 samples, 0.21%)</title><rect x="90.9125%" y="261" width="0.2078%" height="15" fill="rgb(207,83,51)"/><text x="91.1625%" y="271.50"></text></g><g><title>tty_write (11 samples, 0.21%)</title><rect x="90.9125%" y="245" width="0.2078%" height="15" fill="rgb(225,63,43)"/><text x="91.1625%" y="255.50"></text></g><g><title>n_tty_write (10 samples, 0.19%)</title><rect x="90.9314%" y="229" width="0.1889%" height="15" fill="rgb(207,57,36)"/><text x="91.1814%" y="239.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (47 samples, 0.89%)</title><rect x="90.2702%" y="629" width="0.8880%" height="15" fill="rgb(216,99,33)"/><text x="90.5202%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.21%)</title><rect x="91.1770%" y="597" width="0.2078%" height="15" fill="rgb(225,42,16)"/><text x="91.4270%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.19%)</title><rect x="91.1959%" y="581" width="0.1889%" height="15" fill="rgb(220,201,45)"/><text x="91.4459%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.15%)</title><rect x="91.2337%" y="565" width="0.1511%" height="15" fill="rgb(225,33,4)"/><text x="91.4837%" y="575.50"></text></g><g><title>do_syscall_64 (6 samples, 0.11%)</title><rect x="91.4793%" y="501" width="0.1134%" height="15" fill="rgb(224,33,50)"/><text x="91.7293%" y="511.50"></text></g><g><title>ksys_write (6 samples, 0.11%)</title><rect x="91.4793%" y="485" width="0.1134%" height="15" fill="rgb(246,198,51)"/><text x="91.7293%" y="495.50"></text></g><g><title>vfs_write (6 samples, 0.11%)</title><rect x="91.4793%" y="469" width="0.1134%" height="15" fill="rgb(205,22,4)"/><text x="91.7293%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.17%)</title><rect x="91.4415%" y="517" width="0.1700%" height="15" fill="rgb(206,3,8)"/><text x="91.6915%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (26 samples, 0.49%)</title><rect x="91.1770%" y="629" width="0.4912%" height="15" fill="rgb(251,23,15)"/><text x="91.4270%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (26 samples, 0.49%)</title><rect x="91.1770%" y="613" width="0.4912%" height="15" fill="rgb(252,88,28)"/><text x="91.4270%" y="623.50"></text></g><g><title>decor_mem::stats::print_stats (12 samples, 0.23%)</title><rect x="91.4415%" y="597" width="0.2267%" height="15" fill="rgb(212,127,14)"/><text x="91.6915%" y="607.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (12 samples, 0.23%)</title><rect x="91.4415%" y="581" width="0.2267%" height="15" fill="rgb(247,145,37)"/><text x="91.6915%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::write (12 samples, 0.23%)</title><rect x="91.4415%" y="565" width="0.2267%" height="15" fill="rgb(209,117,53)"/><text x="91.6915%" y="575.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (12 samples, 0.23%)</title><rect x="91.4415%" y="549" width="0.2267%" height="15" fill="rgb(212,90,42)"/><text x="91.6915%" y="559.50"></text></g><g><title>__libc_write (12 samples, 0.23%)</title><rect x="91.4415%" y="533" width="0.2267%" height="15" fill="rgb(218,164,37)"/><text x="91.6915%" y="543.50"></text></g><g><title>dequeue_task_fair (6 samples, 0.11%)</title><rect x="92.0272%" y="341" width="0.1134%" height="15" fill="rgb(246,65,34)"/><text x="92.2772%" y="351.50"></text></g><g><title>dequeue_entity (6 samples, 0.11%)</title><rect x="92.0272%" y="325" width="0.1134%" height="15" fill="rgb(231,100,33)"/><text x="92.2772%" y="335.50"></text></g><g><title>sk_wait_data (21 samples, 0.40%)</title><rect x="91.8950%" y="421" width="0.3968%" height="15" fill="rgb(228,126,14)"/><text x="92.1450%" y="431.50"></text></g><g><title>wait_woken (18 samples, 0.34%)</title><rect x="91.9516%" y="405" width="0.3401%" height="15" fill="rgb(215,173,21)"/><text x="92.2016%" y="415.50"></text></g><g><title>schedule_timeout (18 samples, 0.34%)</title><rect x="91.9516%" y="389" width="0.3401%" height="15" fill="rgb(210,6,40)"/><text x="92.2016%" y="399.50"></text></g><g><title>schedule (18 samples, 0.34%)</title><rect x="91.9516%" y="373" width="0.3401%" height="15" fill="rgb(212,48,18)"/><text x="92.2016%" y="383.50"></text></g><g><title>__schedule (18 samples, 0.34%)</title><rect x="91.9516%" y="357" width="0.3401%" height="15" fill="rgb(230,214,11)"/><text x="92.2016%" y="367.50"></text></g><g><title>entry_SYSCALL_64 (33 samples, 0.62%)</title><rect x="91.6871%" y="517" width="0.6235%" height="15" fill="rgb(254,105,39)"/><text x="91.9371%" y="527.50"></text></g><g><title>do_syscall_64 (33 samples, 0.62%)</title><rect x="91.6871%" y="501" width="0.6235%" height="15" fill="rgb(245,158,5)"/><text x="91.9371%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (33 samples, 0.62%)</title><rect x="91.6871%" y="485" width="0.6235%" height="15" fill="rgb(249,208,11)"/><text x="91.9371%" y="495.50"></text></g><g><title>__sys_recvfrom (33 samples, 0.62%)</title><rect x="91.6871%" y="469" width="0.6235%" height="15" fill="rgb(210,39,28)"/><text x="91.9371%" y="479.50"></text></g><g><title>inet_recvmsg (33 samples, 0.62%)</title><rect x="91.6871%" y="453" width="0.6235%" height="15" fill="rgb(211,56,53)"/><text x="91.9371%" y="463.50"></text></g><g><title>tcp_recvmsg (33 samples, 0.62%)</title><rect x="91.6871%" y="437" width="0.6235%" height="15" fill="rgb(226,201,30)"/><text x="91.9371%" y="447.50"></text></g><g><title>__libc_recv (34 samples, 0.64%)</title><rect x="91.6871%" y="533" width="0.6424%" height="15" fill="rgb(239,101,34)"/><text x="91.9371%" y="543.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (35 samples, 0.66%)</title><rect x="91.6871%" y="597" width="0.6613%" height="15" fill="rgb(226,209,5)"/><text x="91.9371%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (35 samples, 0.66%)</title><rect x="91.6871%" y="581" width="0.6613%" height="15" fill="rgb(250,105,47)"/><text x="91.9371%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (35 samples, 0.66%)</title><rect x="91.6871%" y="565" width="0.6613%" height="15" fill="rgb(230,72,3)"/><text x="91.9371%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (35 samples, 0.66%)</title><rect x="91.6871%" y="549" width="0.6613%" height="15" fill="rgb(232,218,39)"/><text x="91.9371%" y="559.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (38 samples, 0.72%)</title><rect x="91.6871%" y="629" width="0.7179%" height="15" fill="rgb(248,166,6)"/><text x="91.9371%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (38 samples, 0.72%)</title><rect x="91.6871%" y="613" width="0.7179%" height="15" fill="rgb(247,89,20)"/><text x="91.9371%" y="623.50"></text></g><g><title>__dev_queue_xmit (8 samples, 0.15%)</title><rect x="92.8963%" y="357" width="0.1511%" height="15" fill="rgb(248,130,54)"/><text x="93.1463%" y="367.50"></text></g><g><title>psi_task_change (7 samples, 0.13%)</title><rect x="93.4442%" y="53" width="0.1323%" height="15" fill="rgb(234,196,4)"/><text x="93.6942%" y="63.50"></text></g><g><title>psi_group_change (6 samples, 0.11%)</title><rect x="93.4631%" y="37" width="0.1134%" height="15" fill="rgb(250,143,31)"/><text x="93.7131%" y="47.50"></text></g><g><title>enqueue_task (8 samples, 0.15%)</title><rect x="93.4442%" y="69" width="0.1511%" height="15" fill="rgb(211,110,34)"/><text x="93.6942%" y="79.50"></text></g><g><title>sock_def_readable (19 samples, 0.36%)</title><rect x="93.3875%" y="133" width="0.3590%" height="15" fill="rgb(215,124,48)"/><text x="93.6375%" y="143.50"></text></g><g><title>__wake_up_common_lock (19 samples, 0.36%)</title><rect x="93.3875%" y="117" width="0.3590%" height="15" fill="rgb(216,46,13)"/><text x="93.6375%" y="127.50"></text></g><g><title>__wake_up_common (19 samples, 0.36%)</title><rect x="93.3875%" y="101" width="0.3590%" height="15" fill="rgb(205,184,25)"/><text x="93.6375%" y="111.50"></text></g><g><title>try_to_wake_up (18 samples, 0.34%)</title><rect x="93.4064%" y="85" width="0.3401%" height="15" fill="rgb(228,1,10)"/><text x="93.6564%" y="95.50"></text></g><g><title>tcp_ack (11 samples, 0.21%)</title><rect x="93.7465%" y="133" width="0.2078%" height="15" fill="rgb(213,116,27)"/><text x="93.9965%" y="143.50"></text></g><g><title>ip_local_deliver (43 samples, 0.81%)</title><rect x="93.1608%" y="229" width="0.8124%" height="15" fill="rgb(241,95,50)"/><text x="93.4108%" y="239.50"></text></g><g><title>ip_local_deliver_finish (43 samples, 0.81%)</title><rect x="93.1608%" y="213" width="0.8124%" height="15" fill="rgb(238,48,32)"/><text x="93.4108%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (42 samples, 0.79%)</title><rect x="93.1797%" y="197" width="0.7935%" height="15" fill="rgb(235,113,49)"/><text x="93.4297%" y="207.50"></text></g><g><title>tcp_v4_rcv (41 samples, 0.77%)</title><rect x="93.1986%" y="181" width="0.7746%" height="15" fill="rgb(205,127,43)"/><text x="93.4486%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (34 samples, 0.64%)</title><rect x="93.3308%" y="165" width="0.6424%" height="15" fill="rgb(250,162,2)"/><text x="93.5808%" y="175.50"></text></g><g><title>tcp_rcv_established (34 samples, 0.64%)</title><rect x="93.3308%" y="149" width="0.6424%" height="15" fill="rgb(220,13,41)"/><text x="93.5808%" y="159.50"></text></g><g><title>__ip_queue_xmit (67 samples, 1.27%)</title><rect x="92.7451%" y="405" width="1.2658%" height="15" fill="rgb(249,221,25)"/><text x="92.9951%" y="415.50"></text></g><g><title>ip_output (66 samples, 1.25%)</title><rect x="92.7640%" y="389" width="1.2469%" height="15" fill="rgb(215,208,19)"/><text x="93.0140%" y="399.50"></text></g><g><title>ip_finish_output2 (62 samples, 1.17%)</title><rect x="92.8396%" y="373" width="1.1714%" height="15" fill="rgb(236,175,2)"/><text x="93.0896%" y="383.50"></text></g><g><title>__local_bh_enable_ip (51 samples, 0.96%)</title><rect x="93.0474%" y="357" width="0.9635%" height="15" fill="rgb(241,52,2)"/><text x="93.2974%" y="367.50"></text></g><g><title>do_softirq (51 samples, 0.96%)</title><rect x="93.0474%" y="341" width="0.9635%" height="15" fill="rgb(248,140,14)"/><text x="93.2974%" y="351.50"></text></g><g><title>do_softirq_own_stack (51 samples, 0.96%)</title><rect x="93.0474%" y="325" width="0.9635%" height="15" fill="rgb(253,22,42)"/><text x="93.2974%" y="335.50"></text></g><g><title>__do_softirq (51 samples, 0.96%)</title><rect x="93.0474%" y="309" width="0.9635%" height="15" fill="rgb(234,61,47)"/><text x="93.2974%" y="319.50"></text></g><g><title>net_rx_action (48 samples, 0.91%)</title><rect x="93.1041%" y="293" width="0.9069%" height="15" fill="rgb(208,226,15)"/><text x="93.3541%" y="303.50"></text></g><g><title>process_backlog (46 samples, 0.87%)</title><rect x="93.1419%" y="277" width="0.8691%" height="15" fill="rgb(217,221,4)"/><text x="93.3919%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (46 samples, 0.87%)</title><rect x="93.1419%" y="261" width="0.8691%" height="15" fill="rgb(212,174,34)"/><text x="93.3919%" y="271.50"></text></g><g><title>ip_rcv (45 samples, 0.85%)</title><rect x="93.1608%" y="245" width="0.8502%" height="15" fill="rgb(253,83,4)"/><text x="93.4108%" y="255.50"></text></g><g><title>__tcp_push_pending_frames (76 samples, 1.44%)</title><rect x="92.6129%" y="453" width="1.4359%" height="15" fill="rgb(250,195,49)"/><text x="92.8629%" y="463.50"></text></g><g><title>tcp_write_xmit (75 samples, 1.42%)</title><rect x="92.6318%" y="437" width="1.4170%" height="15" fill="rgb(241,192,25)"/><text x="92.8818%" y="447.50"></text></g><g><title>__tcp_transmit_skb (73 samples, 1.38%)</title><rect x="92.6696%" y="421" width="1.3792%" height="15" fill="rgb(208,124,10)"/><text x="92.9196%" y="431.50"></text></g><g><title>sk_stream_alloc_skb (8 samples, 0.15%)</title><rect x="94.0676%" y="453" width="0.1511%" height="15" fill="rgb(222,33,0)"/><text x="94.3176%" y="463.50"></text></g><g><title>__alloc_skb (8 samples, 0.15%)</title><rect x="94.0676%" y="437" width="0.1511%" height="15" fill="rgb(234,209,28)"/><text x="94.3176%" y="447.50"></text></g><g><title>__x64_sys_sendto (101 samples, 1.91%)</title><rect x="92.4428%" y="533" width="1.9082%" height="15" fill="rgb(224,11,23)"/><text x="92.6928%" y="543.50">_..</text></g><g><title>__sys_sendto (101 samples, 1.91%)</title><rect x="92.4428%" y="517" width="1.9082%" height="15" fill="rgb(232,99,1)"/><text x="92.6928%" y="527.50">_..</text></g><g><title>sock_sendmsg (98 samples, 1.85%)</title><rect x="92.4995%" y="501" width="1.8515%" height="15" fill="rgb(237,95,45)"/><text x="92.7495%" y="511.50">s..</text></g><g><title>tcp_sendmsg (97 samples, 1.83%)</title><rect x="92.5184%" y="485" width="1.8326%" height="15" fill="rgb(208,109,11)"/><text x="92.7684%" y="495.50">t..</text></g><g><title>tcp_sendmsg_locked (95 samples, 1.79%)</title><rect x="92.5562%" y="469" width="1.7948%" height="15" fill="rgb(216,190,48)"/><text x="92.8062%" y="479.50">t..</text></g><g><title>do_syscall_64 (105 samples, 1.98%)</title><rect x="92.4428%" y="549" width="1.9838%" height="15" fill="rgb(251,171,36)"/><text x="92.6928%" y="559.50">d..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (226 samples, 4.27%)</title><rect x="90.2513%" y="645" width="4.2698%" height="15" fill="rgb(230,62,22)"/><text x="90.5013%" y="655.50">msql_..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (111 samples, 2.10%)</title><rect x="92.4240%" y="629" width="2.0971%" height="15" fill="rgb(225,114,35)"/><text x="92.6740%" y="639.50">s..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (111 samples, 2.10%)</title><rect x="92.4240%" y="613" width="2.0971%" height="15" fill="rgb(215,118,42)"/><text x="92.6740%" y="623.50">&lt;..</text></g><g><title>std::sys_common::net::TcpStream::write (111 samples, 2.10%)</title><rect x="92.4240%" y="597" width="2.0971%" height="15" fill="rgb(243,119,21)"/><text x="92.6740%" y="607.50">s..</text></g><g><title>__libc_send (111 samples, 2.10%)</title><rect x="92.4240%" y="581" width="2.0971%" height="15" fill="rgb(252,177,53)"/><text x="92.6740%" y="591.50">_..</text></g><g><title>entry_SYSCALL_64 (110 samples, 2.08%)</title><rect x="92.4428%" y="565" width="2.0782%" height="15" fill="rgb(237,209,29)"/><text x="92.6928%" y="575.50">e..</text></g><g><title>__GI___clone (230 samples, 4.35%)</title><rect x="90.1946%" y="773" width="4.3454%" height="15" fill="rgb(212,65,23)"/><text x="90.4446%" y="783.50">__GI_..</text></g><g><title>start_thread (230 samples, 4.35%)</title><rect x="90.1946%" y="757" width="4.3454%" height="15" fill="rgb(230,222,46)"/><text x="90.4446%" y="767.50">start..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (228 samples, 4.31%)</title><rect x="90.2324%" y="741" width="4.3076%" height="15" fill="rgb(215,135,32)"/><text x="90.4824%" y="751.50">std::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (228 samples, 4.31%)</title><rect x="90.2324%" y="725" width="4.3076%" height="15" fill="rgb(246,101,22)"/><text x="90.4824%" y="735.50">&lt;allo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (228 samples, 4.31%)</title><rect x="90.2324%" y="709" width="4.3076%" height="15" fill="rgb(206,107,13)"/><text x="90.4824%" y="719.50">&lt;allo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (228 samples, 4.31%)</title><rect x="90.2324%" y="693" width="4.3076%" height="15" fill="rgb(250,100,44)"/><text x="90.4824%" y="703.50">core:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (228 samples, 4.31%)</title><rect x="90.2324%" y="677" width="4.3076%" height="15" fill="rgb(231,147,38)"/><text x="90.4824%" y="687.50">std::..</text></g><g><title>decor_mem::Shim::run_on_tcp (228 samples, 4.31%)</title><rect x="90.2324%" y="661" width="4.3076%" height="15" fill="rgb(229,8,40)"/><text x="90.4824%" y="671.50">decor..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (230 samples, 4.35%)</title><rect x="94.8989%" y="293" width="4.3454%" height="15" fill="rgb(221,135,30)"/><text x="95.1489%" y="303.50">__int..</text></g><g><title>native_write_msr (229 samples, 4.33%)</title><rect x="94.9178%" y="277" width="4.3265%" height="15" fill="rgb(249,193,18)"/><text x="95.1678%" y="287.50">nativ..</text></g><g><title>do_syscall_64 (234 samples, 4.42%)</title><rect x="94.8611%" y="469" width="4.4209%" height="15" fill="rgb(209,133,39)"/><text x="95.1111%" y="479.50">do_sy..</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 4.42%)</title><rect x="94.8611%" y="453" width="4.4209%" height="15" fill="rgb(232,100,14)"/><text x="95.1111%" y="463.50">__x64..</text></g><g><title>sched_setaffinity (234 samples, 4.42%)</title><rect x="94.8611%" y="437" width="4.4209%" height="15" fill="rgb(224,185,1)"/><text x="95.1111%" y="447.50">sched..</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 4.42%)</title><rect x="94.8611%" y="421" width="4.4209%" height="15" fill="rgb(223,139,8)"/><text x="95.1111%" y="431.50">__set..</text></g><g><title>stop_one_cpu (234 samples, 4.42%)</title><rect x="94.8611%" y="405" width="4.4209%" height="15" fill="rgb(232,213,38)"/><text x="95.1111%" y="415.50">stop_..</text></g><g><title>cpu_stop_queue_work (234 samples, 4.42%)</title><rect x="94.8611%" y="389" width="4.4209%" height="15" fill="rgb(207,94,22)"/><text x="95.1111%" y="399.50">cpu_s..</text></g><g><title>preempt_schedule_thunk (234 samples, 4.42%)</title><rect x="94.8611%" y="373" width="4.4209%" height="15" fill="rgb(219,183,54)"/><text x="95.1111%" y="383.50">preem..</text></g><g><title>preempt_schedule_common (234 samples, 4.42%)</title><rect x="94.8611%" y="357" width="4.4209%" height="15" fill="rgb(216,185,54)"/><text x="95.1111%" y="367.50">preem..</text></g><g><title>__schedule (234 samples, 4.42%)</title><rect x="94.8611%" y="341" width="4.4209%" height="15" fill="rgb(254,217,39)"/><text x="95.1111%" y="351.50">__sch..</text></g><g><title>finish_task_switch (234 samples, 4.42%)</title><rect x="94.8611%" y="325" width="4.4209%" height="15" fill="rgb(240,178,23)"/><text x="95.1111%" y="335.50">finis..</text></g><g><title>__perf_event_task_sched_in (232 samples, 4.38%)</title><rect x="94.8989%" y="309" width="4.3831%" height="15" fill="rgb(218,11,47)"/><text x="95.1489%" y="319.50">__per..</text></g><g><title>hwloc::Topology::new (238 samples, 4.50%)</title><rect x="94.8045%" y="597" width="4.4965%" height="15" fill="rgb(218,51,51)"/><text x="95.0545%" y="607.50">hwloc..</text></g><g><title>hwloc_topology_load (238 samples, 4.50%)</title><rect x="94.8045%" y="581" width="4.4965%" height="15" fill="rgb(238,126,27)"/><text x="95.0545%" y="591.50">hwloc..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.50%)</title><rect x="94.8045%" y="565" width="4.4965%" height="15" fill="rgb(249,202,22)"/><text x="95.0545%" y="575.50">[libh..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.50%)</title><rect x="94.8045%" y="549" width="4.4965%" height="15" fill="rgb(254,195,49)"/><text x="95.0545%" y="559.50">[libh..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.50%)</title><rect x="94.8045%" y="533" width="4.4965%" height="15" fill="rgb(208,123,14)"/><text x="95.0545%" y="543.50">[libh..</text></g><g><title>hwloc_linux_set_tid_cpubind (237 samples, 4.48%)</title><rect x="94.8234%" y="517" width="4.4776%" height="15" fill="rgb(224,200,8)"/><text x="95.0734%" y="527.50">hwloc..</text></g><g><title>__GI___sched_setaffinity_new (235 samples, 4.44%)</title><rect x="94.8611%" y="501" width="4.4398%" height="15" fill="rgb(217,61,36)"/><text x="95.1111%" y="511.50">__GI_..</text></g><g><title>entry_SYSCALL_64 (235 samples, 4.44%)</title><rect x="94.8611%" y="485" width="4.4398%" height="15" fill="rgb(206,35,45)"/><text x="95.1111%" y="495.50">entry..</text></g><g><title>__libc_start_main (241 samples, 4.55%)</title><rect x="94.7856%" y="757" width="4.5532%" height="15" fill="rgb(217,65,33)"/><text x="95.0356%" y="767.50">__lib..</text></g><g><title>main (240 samples, 4.53%)</title><rect x="94.8045%" y="741" width="4.5343%" height="15" fill="rgb(222,158,48)"/><text x="95.0545%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (240 samples, 4.53%)</title><rect x="94.8045%" y="725" width="4.5343%" height="15" fill="rgb(254,2,54)"/><text x="95.0545%" y="735.50">std::..</text></g><g><title>std::panic::catch_unwind (240 samples, 4.53%)</title><rect x="94.8045%" y="709" width="4.5343%" height="15" fill="rgb(250,143,38)"/><text x="95.0545%" y="719.50">std::..</text></g><g><title>std::panicking::try (240 samples, 4.53%)</title><rect x="94.8045%" y="693" width="4.5343%" height="15" fill="rgb(248,25,0)"/><text x="95.0545%" y="703.50">std::..</text></g><g><title>std::panicking::try::do_call (240 samples, 4.53%)</title><rect x="94.8045%" y="677" width="4.5343%" height="15" fill="rgb(206,152,27)"/><text x="95.0545%" y="687.50">std::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (240 samples, 4.53%)</title><rect x="94.8045%" y="661" width="4.5343%" height="15" fill="rgb(240,77,30)"/><text x="95.0545%" y="671.50">core:..</text></g><g><title>std::rt::lang_start::_{{closure}} (240 samples, 4.53%)</title><rect x="94.8045%" y="645" width="4.5343%" height="15" fill="rgb(231,5,3)"/><text x="95.0545%" y="655.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (240 samples, 4.53%)</title><rect x="94.8045%" y="629" width="4.5343%" height="15" fill="rgb(207,226,32)"/><text x="95.0545%" y="639.50">std::..</text></g><g><title>lobsters_microbenchmarks::main (240 samples, 4.53%)</title><rect x="94.8045%" y="613" width="4.5343%" height="15" fill="rgb(222,207,47)"/><text x="95.0545%" y="623.50">lobst..</text></g><g><title>_start (242 samples, 4.57%)</title><rect x="94.7856%" y="773" width="4.5721%" height="15" fill="rgb(229,115,45)"/><text x="95.0356%" y="783.50">_start</text></g><g><title>lobsters-microb (5,287 samples, 99.89%)</title><rect x="0.0000%" y="789" width="99.8866%" height="15" fill="rgb(224,191,6)"/><text x="0.2500%" y="799.50">lobsters-microb</text></g><g><title>all (5,293 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(230,227,24)"/><text x="0.2500%" y="815.50"></text></g><g><title>perf (6 samples, 0.11%)</title><rect x="99.8866%" y="789" width="0.1134%" height="15" fill="rgb(228,80,19)"/><text x="100.1366%" y="799.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.11%)</title><rect x="99.8866%" y="773" width="0.1134%" height="15" fill="rgb(247,229,0)"/><text x="100.1366%" y="783.50"></text></g><g><title>do_syscall_64 (6 samples, 0.11%)</title><rect x="99.8866%" y="757" width="0.1134%" height="15" fill="rgb(237,194,15)"/><text x="100.1366%" y="767.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.11%)</title><rect x="99.8866%" y="741" width="0.1134%" height="15" fill="rgb(219,203,20)"/><text x="100.1366%" y="751.50"></text></g><g><title>do_execve (6 samples, 0.11%)</title><rect x="99.8866%" y="725" width="0.1134%" height="15" fill="rgb(234,128,8)"/><text x="100.1366%" y="735.50"></text></g><g><title>__do_execve_file (6 samples, 0.11%)</title><rect x="99.8866%" y="709" width="0.1134%" height="15" fill="rgb(248,202,8)"/><text x="100.1366%" y="719.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.11%)</title><rect x="99.8866%" y="693" width="0.1134%" height="15" fill="rgb(206,104,37)"/><text x="100.1366%" y="703.50"></text></g><g><title>load_elf_binary (6 samples, 0.11%)</title><rect x="99.8866%" y="677" width="0.1134%" height="15" fill="rgb(223,8,27)"/><text x="100.1366%" y="687.50"></text></g><g><title>setup_new_exec (6 samples, 0.11%)</title><rect x="99.8866%" y="661" width="0.1134%" height="15" fill="rgb(216,217,28)"/><text x="100.1366%" y="671.50"></text></g><g><title>perf_event_exec (6 samples, 0.11%)</title><rect x="99.8866%" y="645" width="0.1134%" height="15" fill="rgb(249,199,1)"/><text x="100.1366%" y="655.50"></text></g></svg></svg>