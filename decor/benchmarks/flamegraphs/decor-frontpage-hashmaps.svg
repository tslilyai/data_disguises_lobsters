<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (7 samples, 0.14%)</title><rect x="0.0594%" y="757" width="0.1386%" height="15" fill="rgb(227,0,7)"/><text x="0.3094%" y="767.50"></text></g><g><title>[[stack]] (10 samples, 0.20%)</title><rect x="0.1980%" y="757" width="0.1980%" height="15" fill="rgb(217,0,24)"/><text x="0.4480%" y="767.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (25 samples, 0.50%)</title><rect x="0.3960%" y="741" width="0.4950%" height="15" fill="rgb(221,193,54)"/><text x="0.6460%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.16%)</title><rect x="1.4455%" y="677" width="0.1584%" height="15" fill="rgb(248,212,6)"/><text x="1.6955%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.16%)</title><rect x="1.4455%" y="661" width="0.1584%" height="15" fill="rgb(208,68,35)"/><text x="1.6955%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.16%)</title><rect x="1.4455%" y="645" width="0.1584%" height="15" fill="rgb(232,128,0)"/><text x="1.6955%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.16%)</title><rect x="1.4455%" y="629" width="0.1584%" height="15" fill="rgb(207,160,47)"/><text x="1.6955%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (40 samples, 0.79%)</title><rect x="0.8911%" y="741" width="0.7921%" height="15" fill="rgb(228,23,34)"/><text x="1.1411%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.24%)</title><rect x="1.4455%" y="725" width="0.2376%" height="15" fill="rgb(218,30,26)"/><text x="1.6955%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.24%)</title><rect x="1.4455%" y="709" width="0.2376%" height="15" fill="rgb(220,122,19)"/><text x="1.6955%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.24%)</title><rect x="1.4455%" y="693" width="0.2376%" height="15" fill="rgb(250,228,42)"/><text x="1.6955%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="1.8614%" y="741" width="0.1188%" height="15" fill="rgb(240,193,28)"/><text x="2.1114%" y="751.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="2.0198%" y="741" width="0.2178%" height="15" fill="rgb(216,20,37)"/><text x="2.2698%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="2.2376%" y="741" width="0.1386%" height="15" fill="rgb(206,188,39)"/><text x="2.4876%" y="751.50"></text></g><g><title>__GI___libc_free (8 samples, 0.16%)</title><rect x="2.4950%" y="741" width="0.1584%" height="15" fill="rgb(217,207,13)"/><text x="2.7450%" y="751.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.40%)</title><rect x="2.6535%" y="741" width="0.3960%" height="15" fill="rgb(231,73,38)"/><text x="2.9035%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.16%)</title><rect x="3.1485%" y="741" width="0.1584%" height="15" fill="rgb(225,20,46)"/><text x="3.3985%" y="751.50"></text></g><g><title>_int_free (37 samples, 0.73%)</title><rect x="3.4257%" y="741" width="0.7327%" height="15" fill="rgb(210,31,41)"/><text x="3.6757%" y="751.50"></text></g><g><title>_int_malloc (19 samples, 0.38%)</title><rect x="4.1584%" y="741" width="0.3762%" height="15" fill="rgb(221,200,47)"/><text x="4.4084%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.32%)</title><rect x="4.6337%" y="741" width="0.3168%" height="15" fill="rgb(226,26,5)"/><text x="4.8837%" y="751.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (11 samples, 0.22%)</title><rect x="4.9505%" y="741" width="0.2178%" height="15" fill="rgb(249,33,26)"/><text x="5.2005%" y="751.50"></text></g><g><title>alloc::string::String::push (6 samples, 0.12%)</title><rect x="5.1683%" y="741" width="0.1188%" height="15" fill="rgb(235,183,28)"/><text x="5.4183%" y="751.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="5.3465%" y="741" width="0.1980%" height="15" fill="rgb(221,5,38)"/><text x="5.5965%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.18%)</title><rect x="5.6832%" y="741" width="0.1782%" height="15" fill="rgb(247,18,42)"/><text x="5.9332%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (6 samples, 0.12%)</title><rect x="6.4752%" y="741" width="0.1188%" height="15" fill="rgb(241,131,45)"/><text x="6.7252%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (6 samples, 0.12%)</title><rect x="6.6337%" y="741" width="0.1188%" height="15" fill="rgb(249,31,29)"/><text x="6.8837%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (10 samples, 0.20%)</title><rect x="6.7921%" y="741" width="0.1980%" height="15" fill="rgb(225,111,53)"/><text x="7.0421%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (9 samples, 0.18%)</title><rect x="6.9901%" y="741" width="0.1782%" height="15" fill="rgb(238,160,17)"/><text x="7.2401%" y="751.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (11 samples, 0.22%)</title><rect x="7.4257%" y="741" width="0.2178%" height="15" fill="rgb(214,148,48)"/><text x="7.6757%" y="751.50"></text></g><g><title>[anon] (384 samples, 7.60%)</title><rect x="0.3960%" y="757" width="7.6040%" height="15" fill="rgb(232,36,49)"/><text x="0.6460%" y="767.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (9 samples, 0.18%)</title><rect x="7.8218%" y="741" width="0.1782%" height="15" fill="rgb(209,103,24)"/><text x="8.0718%" y="751.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="8.2376%" y="741" width="0.1782%" height="15" fill="rgb(229,88,8)"/><text x="8.4876%" y="751.50"></text></g><g><title>[lobsters-microbenchmarks] (31 samples, 0.61%)</title><rect x="8.0594%" y="757" width="0.6139%" height="15" fill="rgb(213,181,19)"/><text x="8.3094%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.32%)</title><rect x="8.7723%" y="741" width="0.3168%" height="15" fill="rgb(254,191,54)"/><text x="9.0223%" y="751.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="9.2871%" y="501" width="0.1188%" height="15" fill="rgb(241,83,37)"/><text x="9.5371%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.16%)</title><rect x="9.2871%" y="517" width="0.1584%" height="15" fill="rgb(233,36,39)"/><text x="9.5371%" y="527.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (9 samples, 0.18%)</title><rect x="9.2871%" y="693" width="0.1782%" height="15" fill="rgb(226,3,54)"/><text x="9.5371%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (9 samples, 0.18%)</title><rect x="9.2871%" y="677" width="0.1782%" height="15" fill="rgb(245,192,40)"/><text x="9.5371%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (9 samples, 0.18%)</title><rect x="9.2871%" y="661" width="0.1782%" height="15" fill="rgb(238,167,29)"/><text x="9.5371%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (9 samples, 0.18%)</title><rect x="9.2871%" y="645" width="0.1782%" height="15" fill="rgb(232,182,51)"/><text x="9.5371%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.18%)</title><rect x="9.2871%" y="629" width="0.1782%" height="15" fill="rgb(231,60,39)"/><text x="9.5371%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.18%)</title><rect x="9.2871%" y="613" width="0.1782%" height="15" fill="rgb(208,69,12)"/><text x="9.5371%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (9 samples, 0.18%)</title><rect x="9.2871%" y="597" width="0.1782%" height="15" fill="rgb(235,93,37)"/><text x="9.5371%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (9 samples, 0.18%)</title><rect x="9.2871%" y="581" width="0.1782%" height="15" fill="rgb(213,116,39)"/><text x="9.5371%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (9 samples, 0.18%)</title><rect x="9.2871%" y="565" width="0.1782%" height="15" fill="rgb(222,207,29)"/><text x="9.5371%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (9 samples, 0.18%)</title><rect x="9.2871%" y="549" width="0.1782%" height="15" fill="rgb(206,96,30)"/><text x="9.5371%" y="559.50"></text></g><g><title>__libc_recv (9 samples, 0.18%)</title><rect x="9.2871%" y="533" width="0.1782%" height="15" fill="rgb(218,138,4)"/><text x="9.5371%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="9.4653%" y="661" width="0.1584%" height="15" fill="rgb(250,191,14)"/><text x="9.7153%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19 samples, 0.38%)</title><rect x="9.7030%" y="645" width="0.3762%" height="15" fill="rgb(239,60,40)"/><text x="9.9530%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.36%)</title><rect x="9.7228%" y="629" width="0.3564%" height="15" fill="rgb(206,27,48)"/><text x="9.9728%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.36%)</title><rect x="9.7228%" y="613" width="0.3564%" height="15" fill="rgb(225,35,8)"/><text x="9.9728%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.36%)</title><rect x="9.7228%" y="597" width="0.3564%" height="15" fill="rgb(250,213,24)"/><text x="9.9728%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.36%)</title><rect x="9.7228%" y="581" width="0.3564%" height="15" fill="rgb(247,123,22)"/><text x="9.9728%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.34%)</title><rect x="9.7426%" y="565" width="0.3366%" height="15" fill="rgb(231,138,38)"/><text x="9.9926%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.34%)</title><rect x="9.7426%" y="549" width="0.3366%" height="15" fill="rgb(231,145,46)"/><text x="9.9926%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.34%)</title><rect x="9.7426%" y="533" width="0.3366%" height="15" fill="rgb(251,118,11)"/><text x="9.9926%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.34%)</title><rect x="9.7426%" y="517" width="0.3366%" height="15" fill="rgb(217,147,25)"/><text x="9.9926%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (17 samples, 0.34%)</title><rect x="9.7426%" y="501" width="0.3366%" height="15" fill="rgb(247,81,37)"/><text x="9.9926%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.34%)</title><rect x="9.7426%" y="485" width="0.3366%" height="15" fill="rgb(209,12,38)"/><text x="9.9926%" y="495.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.34%)</title><rect x="9.7426%" y="469" width="0.3366%" height="15" fill="rgb(227,1,9)"/><text x="9.9926%" y="479.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.34%)</title><rect x="9.7426%" y="453" width="0.3366%" height="15" fill="rgb(248,47,43)"/><text x="9.9926%" y="463.50"></text></g><g><title>_int_malloc (13 samples, 0.26%)</title><rect x="9.8218%" y="437" width="0.2574%" height="15" fill="rgb(221,10,30)"/><text x="10.0718%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.18%)</title><rect x="10.0792%" y="645" width="0.1782%" height="15" fill="rgb(210,229,1)"/><text x="10.3292%" y="655.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="10.0792%" y="629" width="0.1782%" height="15" fill="rgb(222,148,37)"/><text x="10.3292%" y="639.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="10.0792%" y="613" width="0.1782%" height="15" fill="rgb(234,67,33)"/><text x="10.3292%" y="623.50"></text></g><g><title>malloc_consolidate (6 samples, 0.12%)</title><rect x="10.1386%" y="597" width="0.1188%" height="15" fill="rgb(247,98,35)"/><text x="10.3886%" y="607.50"></text></g><g><title>decor_mem::select::expr_to_col (6 samples, 0.12%)</title><rect x="10.2574%" y="645" width="0.1188%" height="15" fill="rgb(247,138,52)"/><text x="10.5074%" y="655.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="10.2574%" y="629" width="0.1188%" height="15" fill="rgb(213,79,30)"/><text x="10.5074%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="10.2574%" y="613" width="0.1188%" height="15" fill="rgb(246,177,23)"/><text x="10.5074%" y="623.50"></text></g><g><title>_int_free (22 samples, 0.44%)</title><rect x="10.8713%" y="629" width="0.4356%" height="15" fill="rgb(230,62,27)"/><text x="11.1213%" y="639.50"></text></g><g><title>malloc_consolidate (8 samples, 0.16%)</title><rect x="11.1485%" y="613" width="0.1584%" height="15" fill="rgb(216,154,8)"/><text x="11.3985%" y="623.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (32 samples, 0.63%)</title><rect x="11.4257%" y="629" width="0.6337%" height="15" fill="rgb(244,35,45)"/><text x="11.6757%" y="639.50"></text></g><g><title>core::num::dec2flt::dec2flt (28 samples, 0.55%)</title><rect x="11.5050%" y="613" width="0.5545%" height="15" fill="rgb(251,115,12)"/><text x="11.7550%" y="623.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (8 samples, 0.16%)</title><rect x="11.9010%" y="597" width="0.1584%" height="15" fill="rgb(240,54,50)"/><text x="12.1510%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (11 samples, 0.22%)</title><rect x="12.4752%" y="533" width="0.2178%" height="15" fill="rgb(233,84,52)"/><text x="12.7252%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (17 samples, 0.34%)</title><rect x="12.4158%" y="565" width="0.3366%" height="15" fill="rgb(207,117,47)"/><text x="12.6658%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (17 samples, 0.34%)</title><rect x="12.4158%" y="549" width="0.3366%" height="15" fill="rgb(249,43,39)"/><text x="12.6658%" y="559.50"></text></g><g><title>core::fmt::write (21 samples, 0.42%)</title><rect x="12.3960%" y="597" width="0.4158%" height="15" fill="rgb(209,38,44)"/><text x="12.6460%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (20 samples, 0.40%)</title><rect x="12.4158%" y="581" width="0.3960%" height="15" fill="rgb(236,212,23)"/><text x="12.6658%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="12.8713%" y="533" width="0.1782%" height="15" fill="rgb(242,79,21)"/><text x="13.1213%" y="543.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (34 samples, 0.67%)</title><rect x="12.3960%" y="613" width="0.6733%" height="15" fill="rgb(211,96,35)"/><text x="12.6460%" y="623.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (13 samples, 0.26%)</title><rect x="12.8119%" y="597" width="0.2574%" height="15" fill="rgb(253,215,40)"/><text x="13.0619%" y="607.50"></text></g><g><title>alloc::fmt::format (12 samples, 0.24%)</title><rect x="12.8317%" y="581" width="0.2376%" height="15" fill="rgb(211,81,21)"/><text x="13.0817%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (11 samples, 0.22%)</title><rect x="12.8515%" y="565" width="0.2178%" height="15" fill="rgb(208,190,38)"/><text x="13.1015%" y="575.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="12.8515%" y="549" width="0.2178%" height="15" fill="rgb(235,213,38)"/><text x="13.1015%" y="559.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (6 samples, 0.12%)</title><rect x="13.6436%" y="469" width="0.1188%" height="15" fill="rgb(237,122,38)"/><text x="13.8936%" y="479.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (24 samples, 0.48%)</title><rect x="13.3267%" y="533" width="0.4752%" height="15" fill="rgb(244,218,35)"/><text x="13.5767%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (20 samples, 0.40%)</title><rect x="13.4059%" y="517" width="0.3960%" height="15" fill="rgb(240,68,47)"/><text x="13.6559%" y="527.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (14 samples, 0.28%)</title><rect x="13.5248%" y="501" width="0.2772%" height="15" fill="rgb(210,16,53)"/><text x="13.7748%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (14 samples, 0.28%)</title><rect x="13.5248%" y="485" width="0.2772%" height="15" fill="rgb(235,124,12)"/><text x="13.7748%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (30 samples, 0.59%)</title><rect x="13.2277%" y="565" width="0.5941%" height="15" fill="rgb(224,169,11)"/><text x="13.4777%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (30 samples, 0.59%)</title><rect x="13.2277%" y="549" width="0.5941%" height="15" fill="rgb(250,166,2)"/><text x="13.4777%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (32 samples, 0.63%)</title><rect x="13.2079%" y="581" width="0.6337%" height="15" fill="rgb(242,216,29)"/><text x="13.4579%" y="591.50"></text></g><g><title>core::fmt::write (38 samples, 0.75%)</title><rect x="13.1881%" y="597" width="0.7525%" height="15" fill="rgb(230,116,27)"/><text x="13.4381%" y="607.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (50 samples, 0.99%)</title><rect x="13.0693%" y="613" width="0.9901%" height="15" fill="rgb(228,99,48)"/><text x="13.3193%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="13.9406%" y="597" width="0.1188%" height="15" fill="rgb(253,11,6)"/><text x="14.1906%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (38 samples, 0.75%)</title><rect x="14.7327%" y="565" width="0.7525%" height="15" fill="rgb(247,143,39)"/><text x="14.9827%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.24%)</title><rect x="15.2475%" y="549" width="0.2376%" height="15" fill="rgb(236,97,10)"/><text x="15.4975%" y="559.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (175 samples, 3.47%)</title><rect x="12.1188%" y="629" width="3.4653%" height="15" fill="rgb(233,208,19)"/><text x="12.3688%" y="639.50">dec..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (77 samples, 1.52%)</title><rect x="14.0594%" y="613" width="1.5248%" height="15" fill="rgb(216,164,2)"/><text x="14.3094%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (55 samples, 1.09%)</title><rect x="14.4950%" y="597" width="1.0891%" height="15" fill="rgb(220,129,5)"/><text x="14.7450%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (51 samples, 1.01%)</title><rect x="14.5743%" y="581" width="1.0099%" height="15" fill="rgb(242,17,10)"/><text x="14.8243%" y="591.50"></text></g><g><title>_int_malloc (31 samples, 0.61%)</title><rect x="16.5743%" y="421" width="0.6139%" height="15" fill="rgb(242,107,0)"/><text x="16.8243%" y="431.50"></text></g><g><title>__GI___libc_malloc (42 samples, 0.83%)</title><rect x="16.3762%" y="437" width="0.8317%" height="15" fill="rgb(251,28,31)"/><text x="16.6262%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (57 samples, 1.13%)</title><rect x="16.1188%" y="613" width="1.1287%" height="15" fill="rgb(233,223,10)"/><text x="16.3688%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (55 samples, 1.09%)</title><rect x="16.1584%" y="597" width="1.0891%" height="15" fill="rgb(215,21,27)"/><text x="16.4084%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (55 samples, 1.09%)</title><rect x="16.1584%" y="581" width="1.0891%" height="15" fill="rgb(232,23,21)"/><text x="16.4084%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (50 samples, 0.99%)</title><rect x="16.2574%" y="565" width="0.9901%" height="15" fill="rgb(244,5,23)"/><text x="16.5074%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (46 samples, 0.91%)</title><rect x="16.3366%" y="549" width="0.9109%" height="15" fill="rgb(226,81,46)"/><text x="16.5866%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (46 samples, 0.91%)</title><rect x="16.3366%" y="533" width="0.9109%" height="15" fill="rgb(247,70,30)"/><text x="16.5866%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46 samples, 0.91%)</title><rect x="16.3366%" y="517" width="0.9109%" height="15" fill="rgb(212,68,19)"/><text x="16.5866%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (46 samples, 0.91%)</title><rect x="16.3366%" y="501" width="0.9109%" height="15" fill="rgb(240,187,13)"/><text x="16.5866%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (46 samples, 0.91%)</title><rect x="16.3366%" y="485" width="0.9109%" height="15" fill="rgb(223,113,26)"/><text x="16.5866%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.91%)</title><rect x="16.3366%" y="469" width="0.9109%" height="15" fill="rgb(206,192,2)"/><text x="16.5866%" y="479.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.87%)</title><rect x="16.3762%" y="453" width="0.8713%" height="15" fill="rgb(241,108,4)"/><text x="16.6262%" y="463.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="17.3069%" y="613" width="0.1584%" height="15" fill="rgb(247,173,49)"/><text x="17.5569%" y="623.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.20%)</title><rect x="17.5446%" y="597" width="0.1980%" height="15" fill="rgb(224,114,35)"/><text x="17.7946%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="17.9208%" y="549" width="0.1188%" height="15" fill="rgb(245,159,27)"/><text x="18.1708%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="17.9208%" y="533" width="0.1188%" height="15" fill="rgb(245,172,44)"/><text x="18.1708%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (10 samples, 0.20%)</title><rect x="17.8812%" y="565" width="0.1980%" height="15" fill="rgb(236,23,11)"/><text x="18.1312%" y="575.50"></text></g><g><title>core::fmt::write (17 samples, 0.34%)</title><rect x="17.8020%" y="597" width="0.3366%" height="15" fill="rgb(205,117,38)"/><text x="18.0520%" y="607.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (14 samples, 0.28%)</title><rect x="17.8614%" y="581" width="0.2772%" height="15" fill="rgb(237,72,25)"/><text x="18.1114%" y="591.50"></text></g><g><title>decor_mem::helpers::minus_parser_vals (60 samples, 1.19%)</title><rect x="17.4653%" y="613" width="1.1881%" height="15" fill="rgb(244,70,9)"/><text x="17.7153%" y="623.50"></text></g><g><title>core::num::dec2flt::dec2flt (26 samples, 0.51%)</title><rect x="18.1386%" y="597" width="0.5149%" height="15" fill="rgb(217,125,39)"/><text x="18.3886%" y="607.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (10 samples, 0.20%)</title><rect x="18.6931%" y="613" width="0.1980%" height="15" fill="rgb(235,36,10)"/><text x="18.9431%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="19.4059%" y="597" width="0.1386%" height="15" fill="rgb(251,123,47)"/><text x="19.6559%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (92 samples, 1.82%)</title><rect x="18.8911%" y="613" width="1.8218%" height="15" fill="rgb(221,13,13)"/><text x="19.1411%" y="623.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (59 samples, 1.17%)</title><rect x="19.5446%" y="597" width="1.1683%" height="15" fill="rgb(238,131,9)"/><text x="19.7946%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (49 samples, 0.97%)</title><rect x="19.7426%" y="581" width="0.9703%" height="15" fill="rgb(211,50,8)"/><text x="19.9926%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.57%)</title><rect x="20.1386%" y="565" width="0.5743%" height="15" fill="rgb(245,182,24)"/><text x="20.3886%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.16%)</title><rect x="20.5545%" y="549" width="0.1584%" height="15" fill="rgb(242,14,37)"/><text x="20.8045%" y="559.50"></text></g><g><title>decor_mem::select::get_value_for_rows (276 samples, 5.47%)</title><rect x="15.5842%" y="629" width="5.4653%" height="15" fill="rgb(246,228,12)"/><text x="15.8342%" y="639.50">decor_m..</text></g><g><title>hashbrown::map::make_hash (17 samples, 0.34%)</title><rect x="20.7129%" y="613" width="0.3366%" height="15" fill="rgb(213,55,15)"/><text x="20.9629%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="20.9109%" y="597" width="0.1386%" height="15" fill="rgb(209,9,3)"/><text x="21.1609%" y="607.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="21.0495%" y="613" width="0.1188%" height="15" fill="rgb(230,59,30)"/><text x="21.2995%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="21.0495%" y="597" width="0.1188%" height="15" fill="rgb(209,121,21)"/><text x="21.2995%" y="607.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (16 samples, 0.32%)</title><rect x="21.0495%" y="629" width="0.3168%" height="15" fill="rgb(220,109,13)"/><text x="21.2995%" y="639.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (10 samples, 0.20%)</title><rect x="21.1683%" y="613" width="0.1980%" height="15" fill="rgb(232,18,1)"/><text x="21.4183%" y="623.50"></text></g><g><title>alloc::fmt::format (10 samples, 0.20%)</title><rect x="21.1683%" y="597" width="0.1980%" height="15" fill="rgb(215,41,42)"/><text x="21.4183%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (10 samples, 0.20%)</title><rect x="21.1683%" y="581" width="0.1980%" height="15" fill="rgb(224,123,36)"/><text x="21.4183%" y="591.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="21.1683%" y="565" width="0.1980%" height="15" fill="rgb(240,125,3)"/><text x="21.4183%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="21.2079%" y="549" width="0.1584%" height="15" fill="rgb(205,98,50)"/><text x="21.4579%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (19 samples, 0.38%)</title><rect x="21.6436%" y="549" width="0.3762%" height="15" fill="rgb(205,185,37)"/><text x="21.8936%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (10 samples, 0.20%)</title><rect x="21.8218%" y="533" width="0.1980%" height="15" fill="rgb(238,207,15)"/><text x="22.0718%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (9 samples, 0.18%)</title><rect x="21.8416%" y="517" width="0.1782%" height="15" fill="rgb(213,199,42)"/><text x="22.0916%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (9 samples, 0.18%)</title><rect x="21.8416%" y="501" width="0.1782%" height="15" fill="rgb(235,201,11)"/><text x="22.0916%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (26 samples, 0.51%)</title><rect x="21.6238%" y="581" width="0.5149%" height="15" fill="rgb(207,46,11)"/><text x="21.8738%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (26 samples, 0.51%)</title><rect x="21.6238%" y="565" width="0.5149%" height="15" fill="rgb(241,35,35)"/><text x="21.8738%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (6 samples, 0.12%)</title><rect x="22.0198%" y="549" width="0.1188%" height="15" fill="rgb(243,32,47)"/><text x="22.2698%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="22.0198%" y="533" width="0.1188%" height="15" fill="rgb(247,202,23)"/><text x="22.2698%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (34 samples, 0.67%)</title><rect x="21.6040%" y="597" width="0.6733%" height="15" fill="rgb(219,102,11)"/><text x="21.8540%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (6 samples, 0.12%)</title><rect x="22.1584%" y="581" width="0.1188%" height="15" fill="rgb(243,110,44)"/><text x="22.4084%" y="591.50"></text></g><g><title>core::fmt::write (44 samples, 0.87%)</title><rect x="21.6040%" y="613" width="0.8713%" height="15" fill="rgb(222,74,54)"/><text x="21.8540%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.20%)</title><rect x="22.2772%" y="597" width="0.1980%" height="15" fill="rgb(216,99,12)"/><text x="22.5272%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (7 samples, 0.14%)</title><rect x="22.3366%" y="581" width="0.1386%" height="15" fill="rgb(226,22,26)"/><text x="22.5866%" y="591.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (58 samples, 1.15%)</title><rect x="21.3663%" y="629" width="1.1485%" height="15" fill="rgb(217,163,10)"/><text x="21.6163%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (10 samples, 0.20%)</title><rect x="22.5149%" y="629" width="0.1980%" height="15" fill="rgb(213,25,53)"/><text x="22.7649%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="23.0099%" y="613" width="0.1188%" height="15" fill="rgb(252,105,26)"/><text x="23.2599%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (38 samples, 0.75%)</title><rect x="23.4851%" y="581" width="0.7525%" height="15" fill="rgb(220,39,43)"/><text x="23.7351%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.28%)</title><rect x="23.9604%" y="565" width="0.2772%" height="15" fill="rgb(229,68,48)"/><text x="24.2104%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (78 samples, 1.54%)</title><rect x="22.7129%" y="629" width="1.5446%" height="15" fill="rgb(252,8,32)"/><text x="22.9629%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (57 samples, 1.13%)</title><rect x="23.1287%" y="613" width="1.1287%" height="15" fill="rgb(223,20,43)"/><text x="23.3787%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (50 samples, 0.99%)</title><rect x="23.2673%" y="597" width="0.9901%" height="15" fill="rgb(229,81,49)"/><text x="23.5173%" y="607.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (711 samples, 14.08%)</title><rect x="10.3762%" y="645" width="14.0792%" height="15" fill="rgb(236,28,36)"/><text x="10.6262%" y="655.50">decor_mem::select::ge..</text></g><g><title>hashbrown::map::make_hash (10 samples, 0.20%)</title><rect x="24.2574%" y="629" width="0.1980%" height="15" fill="rgb(249,185,26)"/><text x="24.5074%" y="639.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (8 samples, 0.16%)</title><rect x="24.4554%" y="645" width="0.1584%" height="15" fill="rgb(249,174,33)"/><text x="24.7054%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (6 samples, 0.12%)</title><rect x="25.1089%" y="533" width="0.1188%" height="15" fill="rgb(233,201,37)"/><text x="25.3589%" y="543.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.16%)</title><rect x="25.1089%" y="549" width="0.1584%" height="15" fill="rgb(221,78,26)"/><text x="25.3589%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (12 samples, 0.24%)</title><rect x="25.2871%" y="533" width="0.2376%" height="15" fill="rgb(250,127,30)"/><text x="25.5371%" y="543.50"></text></g><g><title>alloc::string::String::push (15 samples, 0.30%)</title><rect x="25.2871%" y="549" width="0.2970%" height="15" fill="rgb(230,49,44)"/><text x="25.5371%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (60 samples, 1.19%)</title><rect x="25.0693%" y="565" width="1.1881%" height="15" fill="rgb(229,67,23)"/><text x="25.3193%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (31 samples, 0.61%)</title><rect x="25.6436%" y="549" width="0.6139%" height="15" fill="rgb(249,83,47)"/><text x="25.8936%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (22 samples, 0.44%)</title><rect x="25.8218%" y="533" width="0.4356%" height="15" fill="rgb(215,43,3)"/><text x="26.0718%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (22 samples, 0.44%)</title><rect x="25.8218%" y="517" width="0.4356%" height="15" fill="rgb(238,154,13)"/><text x="26.0718%" y="527.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (10 samples, 0.20%)</title><rect x="26.0594%" y="501" width="0.1980%" height="15" fill="rgb(219,56,2)"/><text x="26.3094%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (72 samples, 1.43%)</title><rect x="24.9703%" y="597" width="1.4257%" height="15" fill="rgb(233,0,4)"/><text x="25.2203%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (72 samples, 1.43%)</title><rect x="24.9703%" y="581" width="1.4257%" height="15" fill="rgb(235,30,7)"/><text x="25.2203%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (6 samples, 0.12%)</title><rect x="26.2772%" y="565" width="0.1188%" height="15" fill="rgb(250,79,13)"/><text x="26.5272%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (91 samples, 1.80%)</title><rect x="24.9109%" y="613" width="1.8020%" height="15" fill="rgb(211,146,34)"/><text x="25.1609%" y="623.50">&lt;..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (15 samples, 0.30%)</title><rect x="26.4158%" y="597" width="0.2970%" height="15" fill="rgb(228,22,38)"/><text x="26.6658%" y="607.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="26.5743%" y="581" width="0.1386%" height="15" fill="rgb(235,168,5)"/><text x="26.8243%" y="591.50"></text></g><g><title>core::fmt::write (105 samples, 2.08%)</title><rect x="24.8911%" y="629" width="2.0792%" height="15" fill="rgb(221,155,16)"/><text x="25.1411%" y="639.50">c..</text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (13 samples, 0.26%)</title><rect x="26.7129%" y="613" width="0.2574%" height="15" fill="rgb(215,215,53)"/><text x="26.9629%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (9 samples, 0.18%)</title><rect x="26.7921%" y="597" width="0.1782%" height="15" fill="rgb(223,4,10)"/><text x="27.0421%" y="607.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (128 samples, 2.53%)</title><rect x="24.6139%" y="645" width="2.5347%" height="15" fill="rgb(234,103,6)"/><text x="24.8639%" y="655.50">de..</text></g><g><title>hashbrown::map::make_hash (9 samples, 0.18%)</title><rect x="26.9703%" y="629" width="0.1782%" height="15" fill="rgb(227,97,0)"/><text x="27.2203%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (8 samples, 0.16%)</title><rect x="27.1485%" y="645" width="0.1584%" height="15" fill="rgb(234,150,53)"/><text x="27.3985%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.40%)</title><rect x="27.8020%" y="597" width="0.3960%" height="15" fill="rgb(228,201,54)"/><text x="28.0520%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.20%)</title><rect x="28.0000%" y="581" width="0.1980%" height="15" fill="rgb(222,22,37)"/><text x="28.2500%" y="591.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (937 samples, 18.55%)</title><rect x="9.7030%" y="661" width="18.5545%" height="15" fill="rgb(237,53,32)"/><text x="9.9530%" y="671.50">decor_mem::select::get_ris_ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (48 samples, 0.95%)</title><rect x="27.3069%" y="645" width="0.9505%" height="15" fill="rgb(233,25,53)"/><text x="27.5569%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (32 samples, 0.63%)</title><rect x="27.6238%" y="629" width="0.6337%" height="15" fill="rgb(210,40,34)"/><text x="27.8738%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (27 samples, 0.53%)</title><rect x="27.7228%" y="613" width="0.5347%" height="15" fill="rgb(241,220,44)"/><text x="27.9728%" y="623.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (10 samples, 0.20%)</title><rect x="28.2574%" y="661" width="0.1980%" height="15" fill="rgb(235,28,35)"/><text x="28.5074%" y="671.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (9 samples, 0.18%)</title><rect x="28.2772%" y="645" width="0.1782%" height="15" fill="rgb(210,56,17)"/><text x="28.5272%" y="655.50"></text></g><g><title>alloc::fmt::format (9 samples, 0.18%)</title><rect x="28.2772%" y="629" width="0.1782%" height="15" fill="rgb(224,130,29)"/><text x="28.5272%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (9 samples, 0.18%)</title><rect x="28.2772%" y="613" width="0.1782%" height="15" fill="rgb(235,212,8)"/><text x="28.5272%" y="623.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="28.2772%" y="597" width="0.1782%" height="15" fill="rgb(223,33,50)"/><text x="28.5272%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="28.2970%" y="581" width="0.1584%" height="15" fill="rgb(219,149,13)"/><text x="28.5470%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="28.4554%" y="613" width="0.1188%" height="15" fill="rgb(250,156,29)"/><text x="28.7054%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.12%)</title><rect x="28.4554%" y="597" width="0.1188%" height="15" fill="rgb(216,193,19)"/><text x="28.7054%" y="607.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (982 samples, 19.45%)</title><rect x="9.1881%" y="725" width="19.4455%" height="15" fill="rgb(216,135,14)"/><text x="9.4381%" y="735.50">decor_mem::query_transformer::..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (982 samples, 19.45%)</title><rect x="9.1881%" y="709" width="19.4455%" height="15" fill="rgb(241,47,5)"/><text x="9.4381%" y="719.50">decor_mem::query_transformer::..</text></g><g><title>decor_mem::select::get_query_results (968 samples, 19.17%)</title><rect x="9.4653%" y="693" width="19.1683%" height="15" fill="rgb(233,42,35)"/><text x="9.7153%" y="703.50">decor_mem::select::get_query_r..</text></g><g><title>decor_mem::select::get_setexpr_results (968 samples, 19.17%)</title><rect x="9.4653%" y="677" width="19.1683%" height="15" fill="rgb(231,13,6)"/><text x="9.7153%" y="687.50">decor_mem::select::get_setexpr..</text></g><g><title>decor_mem::select::tablefactor_to_view (9 samples, 0.18%)</title><rect x="28.4554%" y="661" width="0.1782%" height="15" fill="rgb(207,181,40)"/><text x="28.7054%" y="671.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="28.4554%" y="645" width="0.1782%" height="15" fill="rgb(254,173,49)"/><text x="28.7054%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::ObjectName as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="28.4554%" y="629" width="0.1782%" height="15" fill="rgb(221,1,38)"/><text x="28.7054%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="28.6337%" y="661" width="0.1980%" height="15" fill="rgb(206,124,46)"/><text x="28.8837%" y="671.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.28%)</title><rect x="29.0099%" y="437" width="0.2772%" height="15" fill="rgb(249,21,11)"/><text x="29.2599%" y="447.50"></text></g><g><title>_int_malloc (11 samples, 0.22%)</title><rect x="29.0693%" y="421" width="0.2178%" height="15" fill="rgb(222,201,40)"/><text x="29.3193%" y="431.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (26 samples, 0.51%)</title><rect x="28.8317%" y="629" width="0.5149%" height="15" fill="rgb(235,61,29)"/><text x="29.0817%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.40%)</title><rect x="28.9505%" y="613" width="0.3960%" height="15" fill="rgb(219,207,3)"/><text x="29.2005%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 0.40%)</title><rect x="28.9505%" y="597" width="0.3960%" height="15" fill="rgb(222,56,46)"/><text x="29.2005%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (19 samples, 0.38%)</title><rect x="28.9703%" y="581" width="0.3762%" height="15" fill="rgb(239,76,54)"/><text x="29.2203%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.38%)</title><rect x="28.9703%" y="565" width="0.3762%" height="15" fill="rgb(231,124,27)"/><text x="29.2203%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.34%)</title><rect x="29.0099%" y="549" width="0.3366%" height="15" fill="rgb(249,195,6)"/><text x="29.2599%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.34%)</title><rect x="29.0099%" y="533" width="0.3366%" height="15" fill="rgb(237,174,47)"/><text x="29.2599%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.34%)</title><rect x="29.0099%" y="517" width="0.3366%" height="15" fill="rgb(206,201,31)"/><text x="29.2599%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.34%)</title><rect x="29.0099%" y="501" width="0.3366%" height="15" fill="rgb(231,57,52)"/><text x="29.2599%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (17 samples, 0.34%)</title><rect x="29.0099%" y="485" width="0.3366%" height="15" fill="rgb(248,177,22)"/><text x="29.2599%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.34%)</title><rect x="29.0099%" y="469" width="0.3366%" height="15" fill="rgb(215,211,37)"/><text x="29.2599%" y="479.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.34%)</title><rect x="29.0099%" y="453" width="0.3366%" height="15" fill="rgb(241,128,51)"/><text x="29.2599%" y="463.50"></text></g><g><title>malloc_consolidate (6 samples, 0.12%)</title><rect x="29.4059%" y="597" width="0.1188%" height="15" fill="rgb(227,165,31)"/><text x="29.6559%" y="607.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="29.3465%" y="629" width="0.1980%" height="15" fill="rgb(228,167,24)"/><text x="29.5965%" y="639.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="29.3465%" y="613" width="0.1980%" height="15" fill="rgb(228,143,12)"/><text x="29.5965%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.75%)</title><rect x="28.8317%" y="645" width="0.7525%" height="15" fill="rgb(249,149,8)"/><text x="29.0817%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="29.6040%" y="613" width="0.1584%" height="15" fill="rgb(243,35,44)"/><text x="29.8540%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="29.6436%" y="597" width="0.1188%" height="15" fill="rgb(246,89,9)"/><text x="29.8936%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="29.6436%" y="581" width="0.1188%" height="15" fill="rgb(233,213,13)"/><text x="29.8936%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="29.6436%" y="565" width="0.1188%" height="15" fill="rgb(233,141,41)"/><text x="29.8936%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="29.6436%" y="549" width="0.1188%" height="15" fill="rgb(239,167,4)"/><text x="29.8936%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="29.6040%" y="629" width="0.2178%" height="15" fill="rgb(209,217,16)"/><text x="29.8540%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="29.8614%" y="597" width="0.1584%" height="15" fill="rgb(219,88,35)"/><text x="30.1114%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="29.8812%" y="581" width="0.1386%" height="15" fill="rgb(220,193,23)"/><text x="30.1312%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="29.8812%" y="565" width="0.1386%" height="15" fill="rgb(230,90,52)"/><text x="30.1312%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="29.8812%" y="549" width="0.1386%" height="15" fill="rgb(252,106,19)"/><text x="30.1312%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.14%)</title><rect x="29.8812%" y="533" width="0.1386%" height="15" fill="rgb(206,74,20)"/><text x="30.1312%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="29.8812%" y="517" width="0.1386%" height="15" fill="rgb(230,138,44)"/><text x="30.1312%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="29.8812%" y="501" width="0.1386%" height="15" fill="rgb(235,182,43)"/><text x="30.1312%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.14%)</title><rect x="29.8812%" y="485" width="0.1386%" height="15" fill="rgb(242,16,51)"/><text x="30.1312%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.14%)</title><rect x="29.8812%" y="469" width="0.1386%" height="15" fill="rgb(248,9,4)"/><text x="30.1312%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.14%)</title><rect x="29.8812%" y="453" width="0.1386%" height="15" fill="rgb(210,31,22)"/><text x="30.1312%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.14%)</title><rect x="29.8812%" y="437" width="0.1386%" height="15" fill="rgb(239,54,39)"/><text x="30.1312%" y="447.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="29.8812%" y="421" width="0.1386%" height="15" fill="rgb(230,99,41)"/><text x="30.1312%" y="431.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="29.8812%" y="405" width="0.1386%" height="15" fill="rgb(253,106,12)"/><text x="30.1312%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="29.8614%" y="613" width="0.1782%" height="15" fill="rgb(213,46,41)"/><text x="30.1114%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (14 samples, 0.28%)</title><rect x="29.8218%" y="629" width="0.2772%" height="15" fill="rgb(215,133,35)"/><text x="30.0718%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (33 samples, 0.65%)</title><rect x="29.5842%" y="645" width="0.6535%" height="15" fill="rgb(213,28,5)"/><text x="29.8342%" y="655.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (83 samples, 1.64%)</title><rect x="28.6337%" y="725" width="1.6436%" height="15" fill="rgb(215,77,49)"/><text x="28.8837%" y="735.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (83 samples, 1.64%)</title><rect x="28.6337%" y="709" width="1.6436%" height="15" fill="rgb(248,100,22)"/><text x="28.8837%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (83 samples, 1.64%)</title><rect x="28.6337%" y="693" width="1.6436%" height="15" fill="rgb(208,67,9)"/><text x="28.8837%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (83 samples, 1.64%)</title><rect x="28.6337%" y="677" width="1.6436%" height="15" fill="rgb(219,133,21)"/><text x="28.8837%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (73 samples, 1.45%)</title><rect x="28.8317%" y="661" width="1.4455%" height="15" fill="rgb(246,46,29)"/><text x="29.0817%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (1,067 samples, 21.13%)</title><rect x="9.1881%" y="741" width="21.1287%" height="15" fill="rgb(246,185,52)"/><text x="9.4381%" y="751.50">&lt;decor_mem::Shim as msql_srv::Mys..</text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (12 samples, 0.24%)</title><rect x="30.5941%" y="741" width="0.2376%" height="15" fill="rgb(252,136,11)"/><text x="30.8441%" y="751.50"></text></g><g><title>__GI___libc_free (19 samples, 0.38%)</title><rect x="30.9109%" y="741" width="0.3762%" height="15" fill="rgb(219,138,53)"/><text x="31.1609%" y="751.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="31.2871%" y="741" width="0.1584%" height="15" fill="rgb(211,51,23)"/><text x="31.5371%" y="751.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="31.5446%" y="565" width="0.1188%" height="15" fill="rgb(247,221,28)"/><text x="31.7946%" y="575.50"></text></g><g><title>__libc_start_main (9 samples, 0.18%)</title><rect x="31.5248%" y="741" width="0.1782%" height="15" fill="rgb(251,222,45)"/><text x="31.7748%" y="751.50"></text></g><g><title>main (9 samples, 0.18%)</title><rect x="31.5248%" y="725" width="0.1782%" height="15" fill="rgb(217,162,53)"/><text x="31.7748%" y="735.50"></text></g><g><title>std::rt::lang_start_internal (9 samples, 0.18%)</title><rect x="31.5248%" y="709" width="0.1782%" height="15" fill="rgb(229,93,14)"/><text x="31.7748%" y="719.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.18%)</title><rect x="31.5248%" y="693" width="0.1782%" height="15" fill="rgb(209,67,49)"/><text x="31.7748%" y="703.50"></text></g><g><title>std::panicking::try (9 samples, 0.18%)</title><rect x="31.5248%" y="677" width="0.1782%" height="15" fill="rgb(213,87,29)"/><text x="31.7748%" y="687.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.18%)</title><rect x="31.5248%" y="661" width="0.1782%" height="15" fill="rgb(205,151,52)"/><text x="31.7748%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9 samples, 0.18%)</title><rect x="31.5248%" y="645" width="0.1782%" height="15" fill="rgb(253,215,39)"/><text x="31.7748%" y="655.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (9 samples, 0.18%)</title><rect x="31.5248%" y="629" width="0.1782%" height="15" fill="rgb(221,220,41)"/><text x="31.7748%" y="639.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 0.18%)</title><rect x="31.5248%" y="613" width="0.1782%" height="15" fill="rgb(218,133,21)"/><text x="31.7748%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::main (9 samples, 0.18%)</title><rect x="31.5248%" y="597" width="0.1782%" height="15" fill="rgb(221,193,43)"/><text x="31.7748%" y="607.50"></text></g><g><title>lobsters_microbenchmarks::queriers::frontpage::query_frontpage (8 samples, 0.16%)</title><rect x="31.5446%" y="581" width="0.1584%" height="15" fill="rgb(240,128,52)"/><text x="31.7946%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="31.7228%" y="741" width="0.1188%" height="15" fill="rgb(253,114,12)"/><text x="31.9728%" y="751.50"></text></g><g><title>_int_free (29 samples, 0.57%)</title><rect x="31.8812%" y="741" width="0.5743%" height="15" fill="rgb(215,223,47)"/><text x="32.1312%" y="751.50"></text></g><g><title>_int_malloc (11 samples, 0.22%)</title><rect x="32.4554%" y="741" width="0.2178%" height="15" fill="rgb(248,225,23)"/><text x="32.7054%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.28%)</title><rect x="32.7921%" y="741" width="0.2772%" height="15" fill="rgb(250,108,0)"/><text x="33.0421%" y="751.50"></text></g><g><title>alloc::string::String::push (8 samples, 0.16%)</title><rect x="33.1089%" y="741" width="0.1584%" height="15" fill="rgb(228,208,7)"/><text x="33.3589%" y="751.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="33.4653%" y="741" width="0.1782%" height="15" fill="rgb(244,45,10)"/><text x="33.7153%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.22%)</title><rect x="33.7030%" y="741" width="0.2178%" height="15" fill="rgb(207,125,25)"/><text x="33.9530%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.36%)</title><rect x="34.0198%" y="677" width="0.3564%" height="15" fill="rgb(210,195,18)"/><text x="34.2698%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.36%)</title><rect x="34.0198%" y="661" width="0.3564%" height="15" fill="rgb(249,80,12)"/><text x="34.2698%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.32%)</title><rect x="34.0594%" y="645" width="0.3168%" height="15" fill="rgb(221,65,9)"/><text x="34.3094%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.28%)</title><rect x="34.0990%" y="629" width="0.2772%" height="15" fill="rgb(235,49,36)"/><text x="34.3490%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.20%)</title><rect x="34.1782%" y="613" width="0.1980%" height="15" fill="rgb(225,32,20)"/><text x="34.4282%" y="623.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (24 samples, 0.48%)</title><rect x="33.9604%" y="693" width="0.4752%" height="15" fill="rgb(215,141,46)"/><text x="34.2104%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="34.6931%" y="661" width="0.1188%" height="15" fill="rgb(250,160,47)"/><text x="34.9431%" y="671.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="34.6931%" y="645" width="0.1188%" height="15" fill="rgb(216,222,40)"/><text x="34.9431%" y="655.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="34.6931%" y="629" width="0.1188%" height="15" fill="rgb(234,217,39)"/><text x="34.9431%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.12%)</title><rect x="34.8119%" y="661" width="0.1188%" height="15" fill="rgb(207,178,40)"/><text x="35.0619%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="35.1881%" y="645" width="0.1188%" height="15" fill="rgb(221,136,13)"/><text x="35.4381%" y="655.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (87 samples, 1.72%)</title><rect x="33.9604%" y="741" width="1.7228%" height="15" fill="rgb(249,199,10)"/><text x="34.2104%" y="751.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (87 samples, 1.72%)</title><rect x="33.9604%" y="725" width="1.7228%" height="15" fill="rgb(249,222,13)"/><text x="34.2104%" y="735.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (87 samples, 1.72%)</title><rect x="33.9604%" y="709" width="1.7228%" height="15" fill="rgb(244,185,38)"/><text x="34.2104%" y="719.50"></text></g><g><title>decor_mem::stats::get_qtype (63 samples, 1.25%)</title><rect x="34.4356%" y="693" width="1.2475%" height="15" fill="rgb(236,202,9)"/><text x="34.6856%" y="703.50"></text></g><g><title>sql_parser::parser::parse_statements (63 samples, 1.25%)</title><rect x="34.4356%" y="677" width="1.2475%" height="15" fill="rgb(250,229,37)"/><text x="34.6856%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (38 samples, 0.75%)</title><rect x="34.9307%" y="661" width="0.7525%" height="15" fill="rgb(206,174,23)"/><text x="35.1807%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (19 samples, 0.38%)</title><rect x="35.3069%" y="645" width="0.3762%" height="15" fill="rgb(211,33,43)"/><text x="35.5569%" y="655.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (7 samples, 0.14%)</title><rect x="35.7822%" y="741" width="0.1386%" height="15" fill="rgb(245,58,50)"/><text x="36.0322%" y="751.50"></text></g><g><title>sql_parser::parser::parse_statements (7 samples, 0.14%)</title><rect x="35.7822%" y="725" width="0.1386%" height="15" fill="rgb(244,68,36)"/><text x="36.0322%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (7 samples, 0.14%)</title><rect x="35.7822%" y="709" width="0.1386%" height="15" fill="rgb(232,229,15)"/><text x="36.0322%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.16%)</title><rect x="35.9604%" y="741" width="0.1584%" height="15" fill="rgb(254,30,23)"/><text x="36.2104%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.12%)</title><rect x="36.3168%" y="709" width="0.1188%" height="15" fill="rgb(235,160,14)"/><text x="36.5668%" y="719.50"></text></g><g><title>__schedule (24 samples, 0.48%)</title><rect x="36.8515%" y="373" width="0.4752%" height="15" fill="rgb(212,155,44)"/><text x="37.1015%" y="383.50"></text></g><g><title>sk_wait_data (31 samples, 0.61%)</title><rect x="36.7327%" y="437" width="0.6139%" height="15" fill="rgb(226,2,50)"/><text x="36.9827%" y="447.50"></text></g><g><title>wait_woken (25 samples, 0.50%)</title><rect x="36.8515%" y="421" width="0.4950%" height="15" fill="rgb(234,177,6)"/><text x="37.1015%" y="431.50"></text></g><g><title>schedule_timeout (25 samples, 0.50%)</title><rect x="36.8515%" y="405" width="0.4950%" height="15" fill="rgb(217,24,9)"/><text x="37.1015%" y="415.50"></text></g><g><title>schedule (25 samples, 0.50%)</title><rect x="36.8515%" y="389" width="0.4950%" height="15" fill="rgb(220,13,46)"/><text x="37.1015%" y="399.50"></text></g><g><title>inet_recvmsg (39 samples, 0.77%)</title><rect x="36.6535%" y="469" width="0.7723%" height="15" fill="rgb(239,221,27)"/><text x="36.9035%" y="479.50"></text></g><g><title>tcp_recvmsg (39 samples, 0.77%)</title><rect x="36.6535%" y="453" width="0.7723%" height="15" fill="rgb(222,198,25)"/><text x="36.9035%" y="463.50"></text></g><g><title>__x64_sys_recvfrom (41 samples, 0.81%)</title><rect x="36.6337%" y="501" width="0.8119%" height="15" fill="rgb(211,99,13)"/><text x="36.8837%" y="511.50"></text></g><g><title>__sys_recvfrom (41 samples, 0.81%)</title><rect x="36.6337%" y="485" width="0.8119%" height="15" fill="rgb(232,111,31)"/><text x="36.8837%" y="495.50"></text></g><g><title>do_syscall_64 (42 samples, 0.83%)</title><rect x="36.6337%" y="517" width="0.8317%" height="15" fill="rgb(245,82,37)"/><text x="36.8837%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (46 samples, 0.91%)</title><rect x="36.5743%" y="629" width="0.9109%" height="15" fill="rgb(227,149,46)"/><text x="36.8243%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (45 samples, 0.89%)</title><rect x="36.5941%" y="613" width="0.8911%" height="15" fill="rgb(218,36,50)"/><text x="36.8441%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (45 samples, 0.89%)</title><rect x="36.5941%" y="597" width="0.8911%" height="15" fill="rgb(226,80,48)"/><text x="36.8441%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (45 samples, 0.89%)</title><rect x="36.5941%" y="581" width="0.8911%" height="15" fill="rgb(238,224,15)"/><text x="36.8441%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (45 samples, 0.89%)</title><rect x="36.5941%" y="565" width="0.8911%" height="15" fill="rgb(241,136,10)"/><text x="36.8441%" y="575.50"></text></g><g><title>__libc_recv (45 samples, 0.89%)</title><rect x="36.5941%" y="549" width="0.8911%" height="15" fill="rgb(208,32,45)"/><text x="36.8441%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (43 samples, 0.85%)</title><rect x="36.6337%" y="533" width="0.8515%" height="15" fill="rgb(207,135,9)"/><text x="36.8837%" y="543.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 1.05%)</title><rect x="36.5149%" y="645" width="1.0495%" height="15" fill="rgb(206,86,44)"/><text x="36.7649%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (57 samples, 1.13%)</title><rect x="36.4554%" y="661" width="1.1287%" height="15" fill="rgb(245,177,15)"/><text x="36.7054%" y="671.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (59 samples, 1.17%)</title><rect x="36.4356%" y="677" width="1.1683%" height="15" fill="rgb(206,64,50)"/><text x="36.6856%" y="687.50"></text></g><g><title>sock_def_readable (12 samples, 0.24%)</title><rect x="38.0990%" y="165" width="0.2376%" height="15" fill="rgb(234,36,40)"/><text x="38.3490%" y="175.50"></text></g><g><title>__wake_up_common_lock (11 samples, 0.22%)</title><rect x="38.1188%" y="149" width="0.2178%" height="15" fill="rgb(213,64,8)"/><text x="38.3688%" y="159.50"></text></g><g><title>__wake_up_common (11 samples, 0.22%)</title><rect x="38.1188%" y="133" width="0.2178%" height="15" fill="rgb(210,75,36)"/><text x="38.3688%" y="143.50"></text></g><g><title>try_to_wake_up (11 samples, 0.22%)</title><rect x="38.1188%" y="117" width="0.2178%" height="15" fill="rgb(229,88,21)"/><text x="38.3688%" y="127.50"></text></g><g><title>tcp_ack (6 samples, 0.12%)</title><rect x="38.3366%" y="165" width="0.1188%" height="15" fill="rgb(252,204,47)"/><text x="38.5866%" y="175.50"></text></g><g><title>__netif_receive_skb_one_core (29 samples, 0.57%)</title><rect x="37.9802%" y="293" width="0.5743%" height="15" fill="rgb(208,77,27)"/><text x="38.2302%" y="303.50"></text></g><g><title>ip_rcv (28 samples, 0.55%)</title><rect x="38.0000%" y="277" width="0.5545%" height="15" fill="rgb(221,76,26)"/><text x="38.2500%" y="287.50"></text></g><g><title>ip_local_deliver (28 samples, 0.55%)</title><rect x="38.0000%" y="261" width="0.5545%" height="15" fill="rgb(225,139,18)"/><text x="38.2500%" y="271.50"></text></g><g><title>ip_local_deliver_finish (28 samples, 0.55%)</title><rect x="38.0000%" y="245" width="0.5545%" height="15" fill="rgb(230,137,11)"/><text x="38.2500%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (28 samples, 0.55%)</title><rect x="38.0000%" y="229" width="0.5545%" height="15" fill="rgb(212,28,1)"/><text x="38.2500%" y="239.50"></text></g><g><title>tcp_v4_rcv (28 samples, 0.55%)</title><rect x="38.0000%" y="213" width="0.5545%" height="15" fill="rgb(248,164,17)"/><text x="38.2500%" y="223.50"></text></g><g><title>tcp_v4_do_rcv (25 samples, 0.50%)</title><rect x="38.0594%" y="197" width="0.4950%" height="15" fill="rgb(222,171,42)"/><text x="38.3094%" y="207.50"></text></g><g><title>tcp_rcv_established (25 samples, 0.50%)</title><rect x="38.0594%" y="181" width="0.4950%" height="15" fill="rgb(243,84,45)"/><text x="38.3094%" y="191.50"></text></g><g><title>ip_finish_output2 (39 samples, 0.77%)</title><rect x="37.8416%" y="405" width="0.7723%" height="15" fill="rgb(252,49,23)"/><text x="38.0916%" y="415.50"></text></g><g><title>__local_bh_enable_ip (34 samples, 0.67%)</title><rect x="37.9406%" y="389" width="0.6733%" height="15" fill="rgb(215,19,7)"/><text x="38.1906%" y="399.50"></text></g><g><title>do_softirq (34 samples, 0.67%)</title><rect x="37.9406%" y="373" width="0.6733%" height="15" fill="rgb(238,81,41)"/><text x="38.1906%" y="383.50"></text></g><g><title>do_softirq_own_stack (34 samples, 0.67%)</title><rect x="37.9406%" y="357" width="0.6733%" height="15" fill="rgb(210,199,37)"/><text x="38.1906%" y="367.50"></text></g><g><title>__do_softirq (34 samples, 0.67%)</title><rect x="37.9406%" y="341" width="0.6733%" height="15" fill="rgb(244,192,49)"/><text x="38.1906%" y="351.50"></text></g><g><title>net_rx_action (34 samples, 0.67%)</title><rect x="37.9406%" y="325" width="0.6733%" height="15" fill="rgb(226,211,11)"/><text x="38.1906%" y="335.50"></text></g><g><title>process_backlog (33 samples, 0.65%)</title><rect x="37.9604%" y="309" width="0.6535%" height="15" fill="rgb(236,162,54)"/><text x="38.2104%" y="319.50"></text></g><g><title>__ip_queue_xmit (44 samples, 0.87%)</title><rect x="37.7624%" y="437" width="0.8713%" height="15" fill="rgb(220,229,9)"/><text x="38.0124%" y="447.50"></text></g><g><title>ip_output (40 samples, 0.79%)</title><rect x="37.8416%" y="421" width="0.7921%" height="15" fill="rgb(250,87,22)"/><text x="38.0916%" y="431.50"></text></g><g><title>__tcp_transmit_skb (47 samples, 0.93%)</title><rect x="37.7426%" y="453" width="0.9307%" height="15" fill="rgb(239,43,17)"/><text x="37.9926%" y="463.50"></text></g><g><title>__tcp_push_pending_frames (48 samples, 0.95%)</title><rect x="37.7426%" y="485" width="0.9505%" height="15" fill="rgb(231,177,25)"/><text x="37.9926%" y="495.50"></text></g><g><title>tcp_write_xmit (48 samples, 0.95%)</title><rect x="37.7426%" y="469" width="0.9505%" height="15" fill="rgb(219,179,1)"/><text x="37.9926%" y="479.50"></text></g><g><title>__x64_sys_sendto (59 samples, 1.17%)</title><rect x="37.6634%" y="565" width="1.1683%" height="15" fill="rgb(238,219,53)"/><text x="37.9134%" y="575.50"></text></g><g><title>__sys_sendto (59 samples, 1.17%)</title><rect x="37.6634%" y="549" width="1.1683%" height="15" fill="rgb(232,167,36)"/><text x="37.9134%" y="559.50"></text></g><g><title>sock_sendmsg (58 samples, 1.15%)</title><rect x="37.6832%" y="533" width="1.1485%" height="15" fill="rgb(244,19,51)"/><text x="37.9332%" y="543.50"></text></g><g><title>tcp_sendmsg (58 samples, 1.15%)</title><rect x="37.6832%" y="517" width="1.1485%" height="15" fill="rgb(224,6,22)"/><text x="37.9332%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (57 samples, 1.13%)</title><rect x="37.7030%" y="501" width="1.1287%" height="15" fill="rgb(224,145,5)"/><text x="37.9530%" y="511.50"></text></g><g><title>do_syscall_64 (63 samples, 1.25%)</title><rect x="37.6436%" y="581" width="1.2475%" height="15" fill="rgb(234,130,49)"/><text x="37.8936%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (68 samples, 1.35%)</title><rect x="37.6436%" y="597" width="1.3465%" height="15" fill="rgb(254,6,2)"/><text x="37.8936%" y="607.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (130 samples, 2.57%)</title><rect x="36.4356%" y="709" width="2.5743%" height="15" fill="rgb(208,96,46)"/><text x="36.6856%" y="719.50">&lt;m..</text></g><g><title>mysql::conn::Conn::_query (130 samples, 2.57%)</title><rect x="36.4356%" y="693" width="2.5743%" height="15" fill="rgb(239,3,39)"/><text x="36.6856%" y="703.50">my..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (71 samples, 1.41%)</title><rect x="37.6040%" y="677" width="1.4059%" height="15" fill="rgb(233,210,1)"/><text x="37.8540%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (70 samples, 1.39%)</title><rect x="37.6238%" y="661" width="1.3861%" height="15" fill="rgb(244,137,37)"/><text x="37.8738%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (70 samples, 1.39%)</title><rect x="37.6238%" y="645" width="1.3861%" height="15" fill="rgb(240,136,2)"/><text x="37.8738%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (70 samples, 1.39%)</title><rect x="37.6238%" y="629" width="1.3861%" height="15" fill="rgb(239,18,37)"/><text x="37.8738%" y="639.50"></text></g><g><title>__libc_send (70 samples, 1.39%)</title><rect x="37.6238%" y="613" width="1.3861%" height="15" fill="rgb(218,185,22)"/><text x="37.8738%" y="623.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (14 samples, 0.28%)</title><rect x="39.0099%" y="677" width="0.2772%" height="15" fill="rgb(225,218,4)"/><text x="39.2599%" y="687.50"></text></g><g><title>mysql::conn::Conn::next_text (14 samples, 0.28%)</title><rect x="39.0099%" y="661" width="0.2772%" height="15" fill="rgb(230,182,32)"/><text x="39.2599%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.30%)</title><rect x="39.0099%" y="709" width="0.2970%" height="15" fill="rgb(242,56,43)"/><text x="39.2599%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.30%)</title><rect x="39.0099%" y="693" width="0.2970%" height="15" fill="rgb(233,99,24)"/><text x="39.2599%" y="703.50"></text></g><g><title>&lt;(T1,T2) as mysql_common::row::convert::FromRow&gt;::from_row_opt (6 samples, 0.12%)</title><rect x="39.3663%" y="677" width="0.1188%" height="15" fill="rgb(234,209,42)"/><text x="39.6163%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.32%)</title><rect x="39.4851%" y="677" width="0.3168%" height="15" fill="rgb(227,7,12)"/><text x="39.7351%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (14 samples, 0.28%)</title><rect x="39.5248%" y="661" width="0.2772%" height="15" fill="rgb(245,203,43)"/><text x="39.7748%" y="671.50"></text></g><g><title>mysql::conn::Conn::next_text (14 samples, 0.28%)</title><rect x="39.5248%" y="645" width="0.2772%" height="15" fill="rgb(238,205,33)"/><text x="39.7748%" y="655.50"></text></g><g><title>mysql_common::value::read_text_values (7 samples, 0.14%)</title><rect x="39.6634%" y="629" width="0.1386%" height="15" fill="rgb(231,56,7)"/><text x="39.9134%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 0.69%)</title><rect x="39.3267%" y="693" width="0.6931%" height="15" fill="rgb(244,186,29)"/><text x="39.5767%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.22%)</title><rect x="39.8020%" y="677" width="0.2178%" height="15" fill="rgb(234,111,31)"/><text x="40.0520%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (8 samples, 0.16%)</title><rect x="39.8614%" y="661" width="0.1584%" height="15" fill="rgb(241,149,10)"/><text x="40.1114%" y="671.50"></text></g><g><title>__libc_recv (6 samples, 0.12%)</title><rect x="40.0792%" y="549" width="0.1188%" height="15" fill="rgb(249,206,44)"/><text x="40.3292%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="40.0792%" y="533" width="0.1188%" height="15" fill="rgb(251,153,30)"/><text x="40.3292%" y="543.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.16%)</title><rect x="40.0594%" y="629" width="0.1584%" height="15" fill="rgb(239,152,38)"/><text x="40.3094%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (7 samples, 0.14%)</title><rect x="40.0792%" y="613" width="0.1386%" height="15" fill="rgb(249,139,47)"/><text x="40.3292%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (7 samples, 0.14%)</title><rect x="40.0792%" y="597" width="0.1386%" height="15" fill="rgb(244,64,35)"/><text x="40.3292%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (7 samples, 0.14%)</title><rect x="40.0792%" y="581" width="0.1386%" height="15" fill="rgb(216,46,15)"/><text x="40.3292%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (7 samples, 0.14%)</title><rect x="40.0792%" y="565" width="0.1386%" height="15" fill="rgb(250,74,19)"/><text x="40.3292%" y="575.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (11 samples, 0.22%)</title><rect x="40.0198%" y="677" width="0.2178%" height="15" fill="rgb(249,42,33)"/><text x="40.2698%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (10 samples, 0.20%)</title><rect x="40.0396%" y="661" width="0.1980%" height="15" fill="rgb(242,149,17)"/><text x="40.2896%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.18%)</title><rect x="40.0594%" y="645" width="0.1782%" height="15" fill="rgb(244,29,21)"/><text x="40.3094%" y="655.50"></text></g><g><title>__netif_receive_skb_one_core (10 samples, 0.20%)</title><rect x="40.3168%" y="293" width="0.1980%" height="15" fill="rgb(220,130,37)"/><text x="40.5668%" y="303.50"></text></g><g><title>ip_rcv (9 samples, 0.18%)</title><rect x="40.3366%" y="277" width="0.1782%" height="15" fill="rgb(211,67,2)"/><text x="40.5866%" y="287.50"></text></g><g><title>ip_local_deliver (9 samples, 0.18%)</title><rect x="40.3366%" y="261" width="0.1782%" height="15" fill="rgb(235,68,52)"/><text x="40.5866%" y="271.50"></text></g><g><title>ip_local_deliver_finish (9 samples, 0.18%)</title><rect x="40.3366%" y="245" width="0.1782%" height="15" fill="rgb(246,142,3)"/><text x="40.5866%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (9 samples, 0.18%)</title><rect x="40.3366%" y="229" width="0.1782%" height="15" fill="rgb(241,25,7)"/><text x="40.5866%" y="239.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.16%)</title><rect x="40.3564%" y="213" width="0.1584%" height="15" fill="rgb(242,119,39)"/><text x="40.6064%" y="223.50"></text></g><g><title>tcp_v4_do_rcv (6 samples, 0.12%)</title><rect x="40.3960%" y="197" width="0.1188%" height="15" fill="rgb(241,98,45)"/><text x="40.6460%" y="207.50"></text></g><g><title>tcp_rcv_established (6 samples, 0.12%)</title><rect x="40.3960%" y="181" width="0.1188%" height="15" fill="rgb(254,28,30)"/><text x="40.6460%" y="191.50"></text></g><g><title>__tcp_push_pending_frames (14 samples, 0.28%)</title><rect x="40.2574%" y="485" width="0.2772%" height="15" fill="rgb(241,142,54)"/><text x="40.5074%" y="495.50"></text></g><g><title>tcp_write_xmit (14 samples, 0.28%)</title><rect x="40.2574%" y="469" width="0.2772%" height="15" fill="rgb(222,85,15)"/><text x="40.5074%" y="479.50"></text></g><g><title>__tcp_transmit_skb (14 samples, 0.28%)</title><rect x="40.2574%" y="453" width="0.2772%" height="15" fill="rgb(210,85,47)"/><text x="40.5074%" y="463.50"></text></g><g><title>__ip_queue_xmit (14 samples, 0.28%)</title><rect x="40.2574%" y="437" width="0.2772%" height="15" fill="rgb(224,206,25)"/><text x="40.5074%" y="447.50"></text></g><g><title>ip_output (14 samples, 0.28%)</title><rect x="40.2574%" y="421" width="0.2772%" height="15" fill="rgb(243,201,19)"/><text x="40.5074%" y="431.50"></text></g><g><title>ip_finish_output2 (13 samples, 0.26%)</title><rect x="40.2772%" y="405" width="0.2574%" height="15" fill="rgb(236,59,4)"/><text x="40.5272%" y="415.50"></text></g><g><title>__local_bh_enable_ip (11 samples, 0.22%)</title><rect x="40.3168%" y="389" width="0.2178%" height="15" fill="rgb(254,179,45)"/><text x="40.5668%" y="399.50"></text></g><g><title>do_softirq (11 samples, 0.22%)</title><rect x="40.3168%" y="373" width="0.2178%" height="15" fill="rgb(226,14,10)"/><text x="40.5668%" y="383.50"></text></g><g><title>do_softirq_own_stack (11 samples, 0.22%)</title><rect x="40.3168%" y="357" width="0.2178%" height="15" fill="rgb(244,27,41)"/><text x="40.5668%" y="367.50"></text></g><g><title>__do_softirq (11 samples, 0.22%)</title><rect x="40.3168%" y="341" width="0.2178%" height="15" fill="rgb(235,35,32)"/><text x="40.5668%" y="351.50"></text></g><g><title>net_rx_action (11 samples, 0.22%)</title><rect x="40.3168%" y="325" width="0.2178%" height="15" fill="rgb(218,68,31)"/><text x="40.5668%" y="335.50"></text></g><g><title>process_backlog (11 samples, 0.22%)</title><rect x="40.3168%" y="309" width="0.2178%" height="15" fill="rgb(207,120,37)"/><text x="40.5668%" y="319.50"></text></g><g><title>lobsters_microbenchmarks::main (217 samples, 4.30%)</title><rect x="36.2772%" y="741" width="4.2970%" height="15" fill="rgb(227,98,0)"/><text x="36.5272%" y="751.50">lobst..</text></g><g><title>lobsters_microbenchmarks::queriers::frontpage::query_frontpage (215 samples, 4.26%)</title><rect x="36.3168%" y="725" width="4.2574%" height="15" fill="rgb(207,7,3)"/><text x="36.5668%" y="735.50">lobst..</text></g><g><title>mysql::conn::queryable::Queryable::query_map (64 samples, 1.27%)</title><rect x="39.3069%" y="709" width="1.2673%" height="15" fill="rgb(206,98,19)"/><text x="39.5569%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (28 samples, 0.55%)</title><rect x="40.0198%" y="693" width="0.5545%" height="15" fill="rgb(217,5,26)"/><text x="40.2698%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (17 samples, 0.34%)</title><rect x="40.2376%" y="677" width="0.3366%" height="15" fill="rgb(235,190,38)"/><text x="40.4876%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (17 samples, 0.34%)</title><rect x="40.2376%" y="661" width="0.3366%" height="15" fill="rgb(247,86,24)"/><text x="40.4876%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (17 samples, 0.34%)</title><rect x="40.2376%" y="645" width="0.3366%" height="15" fill="rgb(205,101,16)"/><text x="40.4876%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (17 samples, 0.34%)</title><rect x="40.2376%" y="629" width="0.3366%" height="15" fill="rgb(246,168,33)"/><text x="40.4876%" y="639.50"></text></g><g><title>__libc_send (17 samples, 0.34%)</title><rect x="40.2376%" y="613" width="0.3366%" height="15" fill="rgb(231,114,1)"/><text x="40.4876%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (17 samples, 0.34%)</title><rect x="40.2376%" y="597" width="0.3366%" height="15" fill="rgb(207,184,53)"/><text x="40.4876%" y="607.50"></text></g><g><title>do_syscall_64 (17 samples, 0.34%)</title><rect x="40.2376%" y="581" width="0.3366%" height="15" fill="rgb(224,95,51)"/><text x="40.4876%" y="591.50"></text></g><g><title>__x64_sys_sendto (17 samples, 0.34%)</title><rect x="40.2376%" y="565" width="0.3366%" height="15" fill="rgb(212,188,45)"/><text x="40.4876%" y="575.50"></text></g><g><title>__sys_sendto (17 samples, 0.34%)</title><rect x="40.2376%" y="549" width="0.3366%" height="15" fill="rgb(223,154,38)"/><text x="40.4876%" y="559.50"></text></g><g><title>sock_sendmsg (17 samples, 0.34%)</title><rect x="40.2376%" y="533" width="0.3366%" height="15" fill="rgb(251,22,52)"/><text x="40.4876%" y="543.50"></text></g><g><title>tcp_sendmsg (17 samples, 0.34%)</title><rect x="40.2376%" y="517" width="0.3366%" height="15" fill="rgb(229,209,22)"/><text x="40.4876%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (17 samples, 0.34%)</title><rect x="40.2376%" y="501" width="0.3366%" height="15" fill="rgb(234,138,34)"/><text x="40.4876%" y="511.50"></text></g><g><title>malloc_consolidate (6 samples, 0.12%)</title><rect x="40.5941%" y="741" width="0.1188%" height="15" fill="rgb(212,95,11)"/><text x="40.8441%" y="751.50"></text></g><g><title>__wake_up_common (6 samples, 0.12%)</title><rect x="41.3069%" y="101" width="0.1188%" height="15" fill="rgb(240,179,47)"/><text x="41.5569%" y="111.50"></text></g><g><title>pollwake (6 samples, 0.12%)</title><rect x="41.3069%" y="85" width="0.1188%" height="15" fill="rgb(240,163,11)"/><text x="41.5569%" y="95.50"></text></g><g><title>sock_def_readable (7 samples, 0.14%)</title><rect x="41.3069%" y="133" width="0.1386%" height="15" fill="rgb(236,37,12)"/><text x="41.5569%" y="143.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.14%)</title><rect x="41.3069%" y="117" width="0.1386%" height="15" fill="rgb(232,164,16)"/><text x="41.5569%" y="127.50"></text></g><g><title>ip_local_deliver (9 samples, 0.18%)</title><rect x="41.2871%" y="229" width="0.1782%" height="15" fill="rgb(244,205,15)"/><text x="41.5371%" y="239.50"></text></g><g><title>ip_local_deliver_finish (9 samples, 0.18%)</title><rect x="41.2871%" y="213" width="0.1782%" height="15" fill="rgb(223,117,47)"/><text x="41.5371%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (9 samples, 0.18%)</title><rect x="41.2871%" y="197" width="0.1782%" height="15" fill="rgb(244,107,35)"/><text x="41.5371%" y="207.50"></text></g><g><title>tcp_v4_rcv (9 samples, 0.18%)</title><rect x="41.2871%" y="181" width="0.1782%" height="15" fill="rgb(205,140,8)"/><text x="41.5371%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (8 samples, 0.16%)</title><rect x="41.3069%" y="165" width="0.1584%" height="15" fill="rgb(228,84,46)"/><text x="41.5569%" y="175.50"></text></g><g><title>tcp_rcv_established (8 samples, 0.16%)</title><rect x="41.3069%" y="149" width="0.1584%" height="15" fill="rgb(254,188,9)"/><text x="41.5569%" y="159.50"></text></g><g><title>__netif_receive_skb_one_core (10 samples, 0.20%)</title><rect x="41.2871%" y="261" width="0.1980%" height="15" fill="rgb(206,112,54)"/><text x="41.5371%" y="271.50"></text></g><g><title>ip_rcv (10 samples, 0.20%)</title><rect x="41.2871%" y="245" width="0.1980%" height="15" fill="rgb(216,84,49)"/><text x="41.5371%" y="255.50"></text></g><g><title>__tcp_transmit_skb (16 samples, 0.32%)</title><rect x="41.2079%" y="421" width="0.3168%" height="15" fill="rgb(214,194,35)"/><text x="41.4579%" y="431.50"></text></g><g><title>__ip_queue_xmit (16 samples, 0.32%)</title><rect x="41.2079%" y="405" width="0.3168%" height="15" fill="rgb(249,28,3)"/><text x="41.4579%" y="415.50"></text></g><g><title>ip_output (15 samples, 0.30%)</title><rect x="41.2277%" y="389" width="0.2970%" height="15" fill="rgb(222,56,52)"/><text x="41.4777%" y="399.50"></text></g><g><title>ip_finish_output2 (15 samples, 0.30%)</title><rect x="41.2277%" y="373" width="0.2970%" height="15" fill="rgb(245,217,50)"/><text x="41.4777%" y="383.50"></text></g><g><title>__local_bh_enable_ip (13 samples, 0.26%)</title><rect x="41.2673%" y="357" width="0.2574%" height="15" fill="rgb(213,201,24)"/><text x="41.5173%" y="367.50"></text></g><g><title>do_softirq (13 samples, 0.26%)</title><rect x="41.2673%" y="341" width="0.2574%" height="15" fill="rgb(248,116,28)"/><text x="41.5173%" y="351.50"></text></g><g><title>do_softirq_own_stack (13 samples, 0.26%)</title><rect x="41.2673%" y="325" width="0.2574%" height="15" fill="rgb(219,72,43)"/><text x="41.5173%" y="335.50"></text></g><g><title>__do_softirq (13 samples, 0.26%)</title><rect x="41.2673%" y="309" width="0.2574%" height="15" fill="rgb(209,138,14)"/><text x="41.5173%" y="319.50"></text></g><g><title>net_rx_action (12 samples, 0.24%)</title><rect x="41.2871%" y="293" width="0.2376%" height="15" fill="rgb(222,18,33)"/><text x="41.5371%" y="303.50"></text></g><g><title>process_backlog (12 samples, 0.24%)</title><rect x="41.2871%" y="277" width="0.2376%" height="15" fill="rgb(213,199,7)"/><text x="41.5371%" y="287.50"></text></g><g><title>__tcp_push_pending_frames (17 samples, 0.34%)</title><rect x="41.2079%" y="453" width="0.3366%" height="15" fill="rgb(250,110,10)"/><text x="41.4579%" y="463.50"></text></g><g><title>tcp_write_xmit (17 samples, 0.34%)</title><rect x="41.2079%" y="437" width="0.3366%" height="15" fill="rgb(248,123,6)"/><text x="41.4579%" y="447.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (27 samples, 0.53%)</title><rect x="41.0693%" y="677" width="0.5347%" height="15" fill="rgb(206,91,31)"/><text x="41.3193%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (23 samples, 0.46%)</title><rect x="41.1485%" y="661" width="0.4554%" height="15" fill="rgb(211,154,13)"/><text x="41.3985%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (23 samples, 0.46%)</title><rect x="41.1485%" y="645" width="0.4554%" height="15" fill="rgb(225,148,7)"/><text x="41.3985%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (22 samples, 0.44%)</title><rect x="41.1683%" y="629" width="0.4356%" height="15" fill="rgb(220,160,43)"/><text x="41.4183%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (21 samples, 0.42%)</title><rect x="41.1881%" y="613" width="0.4158%" height="15" fill="rgb(213,52,39)"/><text x="41.4381%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (21 samples, 0.42%)</title><rect x="41.1881%" y="597" width="0.4158%" height="15" fill="rgb(243,137,7)"/><text x="41.4381%" y="607.50"></text></g><g><title>__libc_send (21 samples, 0.42%)</title><rect x="41.1881%" y="581" width="0.4158%" height="15" fill="rgb(230,79,13)"/><text x="41.4381%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (21 samples, 0.42%)</title><rect x="41.1881%" y="565" width="0.4158%" height="15" fill="rgb(247,105,23)"/><text x="41.4381%" y="575.50"></text></g><g><title>do_syscall_64 (21 samples, 0.42%)</title><rect x="41.1881%" y="549" width="0.4158%" height="15" fill="rgb(223,179,41)"/><text x="41.4381%" y="559.50"></text></g><g><title>__x64_sys_sendto (21 samples, 0.42%)</title><rect x="41.1881%" y="533" width="0.4158%" height="15" fill="rgb(218,9,34)"/><text x="41.4381%" y="543.50"></text></g><g><title>__sys_sendto (21 samples, 0.42%)</title><rect x="41.1881%" y="517" width="0.4158%" height="15" fill="rgb(222,106,8)"/><text x="41.4381%" y="527.50"></text></g><g><title>sock_sendmsg (21 samples, 0.42%)</title><rect x="41.1881%" y="501" width="0.4158%" height="15" fill="rgb(211,220,0)"/><text x="41.4381%" y="511.50"></text></g><g><title>tcp_sendmsg (21 samples, 0.42%)</title><rect x="41.1881%" y="485" width="0.4158%" height="15" fill="rgb(229,52,16)"/><text x="41.4381%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (20 samples, 0.40%)</title><rect x="41.2079%" y="469" width="0.3960%" height="15" fill="rgb(212,155,18)"/><text x="41.4579%" y="479.50"></text></g><g><title>_int_free (19 samples, 0.38%)</title><rect x="41.7624%" y="645" width="0.3762%" height="15" fill="rgb(242,21,14)"/><text x="42.0124%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (28 samples, 0.55%)</title><rect x="41.6238%" y="661" width="0.5545%" height="15" fill="rgb(222,19,48)"/><text x="41.8738%" y="671.50"></text></g><g><title>__GI___mprotect (7 samples, 0.14%)</title><rect x="43.9010%" y="421" width="0.1386%" height="15" fill="rgb(232,45,27)"/><text x="44.1510%" y="431.50"></text></g><g><title>__GI___libc_malloc (70 samples, 1.39%)</title><rect x="42.7327%" y="469" width="1.3861%" height="15" fill="rgb(249,103,42)"/><text x="42.9827%" y="479.50"></text></g><g><title>_int_malloc (51 samples, 1.01%)</title><rect x="43.1089%" y="453" width="1.0099%" height="15" fill="rgb(246,81,33)"/><text x="43.3589%" y="463.50"></text></g><g><title>sysmalloc (11 samples, 0.22%)</title><rect x="43.9010%" y="437" width="0.2178%" height="15" fill="rgb(252,33,42)"/><text x="44.1510%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (79 samples, 1.56%)</title><rect x="42.6337%" y="645" width="1.5644%" height="15" fill="rgb(209,212,41)"/><text x="42.8837%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (78 samples, 1.54%)</title><rect x="42.6535%" y="629" width="1.5446%" height="15" fill="rgb(207,154,6)"/><text x="42.9035%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (78 samples, 1.54%)</title><rect x="42.6535%" y="613" width="1.5446%" height="15" fill="rgb(223,64,47)"/><text x="42.9035%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (78 samples, 1.54%)</title><rect x="42.6535%" y="597" width="1.5446%" height="15" fill="rgb(211,161,38)"/><text x="42.9035%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (76 samples, 1.50%)</title><rect x="42.6931%" y="581" width="1.5050%" height="15" fill="rgb(219,138,40)"/><text x="42.9431%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (76 samples, 1.50%)</title><rect x="42.6931%" y="565" width="1.5050%" height="15" fill="rgb(241,228,46)"/><text x="42.9431%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76 samples, 1.50%)</title><rect x="42.6931%" y="549" width="1.5050%" height="15" fill="rgb(223,209,38)"/><text x="42.9431%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (76 samples, 1.50%)</title><rect x="42.6931%" y="533" width="1.5050%" height="15" fill="rgb(236,164,45)"/><text x="42.9431%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (76 samples, 1.50%)</title><rect x="42.6931%" y="517" width="1.5050%" height="15" fill="rgb(231,15,5)"/><text x="42.9431%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 1.50%)</title><rect x="42.6931%" y="501" width="1.5050%" height="15" fill="rgb(252,35,15)"/><text x="42.9431%" y="511.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 1.47%)</title><rect x="42.7327%" y="485" width="1.4653%" height="15" fill="rgb(248,181,18)"/><text x="42.9827%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="46.0792%" y="565" width="0.1188%" height="15" fill="rgb(233,39,42)"/><text x="46.3292%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (17 samples, 0.34%)</title><rect x="46.1980%" y="549" width="0.3366%" height="15" fill="rgb(238,110,33)"/><text x="46.4480%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17 samples, 0.34%)</title><rect x="46.1980%" y="533" width="0.3366%" height="15" fill="rgb(233,195,10)"/><text x="46.4480%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (17 samples, 0.34%)</title><rect x="46.1980%" y="517" width="0.3366%" height="15" fill="rgb(254,105,3)"/><text x="46.4480%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.30%)</title><rect x="46.2376%" y="501" width="0.2970%" height="15" fill="rgb(221,225,9)"/><text x="46.4876%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.20%)</title><rect x="46.3366%" y="485" width="0.1980%" height="15" fill="rgb(224,227,45)"/><text x="46.5866%" y="495.50"></text></g><g><title>__GI___libc_malloc (226 samples, 4.48%)</title><rect x="46.6535%" y="437" width="4.4752%" height="15" fill="rgb(229,198,43)"/><text x="46.9035%" y="447.50">__GI_..</text></g><g><title>_int_malloc (158 samples, 3.13%)</title><rect x="48.0000%" y="421" width="3.1287%" height="15" fill="rgb(206,209,35)"/><text x="48.2500%" y="431.50">_in..</text></g><g><title>__rdl_alloc (7 samples, 0.14%)</title><rect x="51.1287%" y="437" width="0.1386%" height="15" fill="rgb(245,195,53)"/><text x="51.3787%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.14%)</title><rect x="51.1287%" y="421" width="0.1386%" height="15" fill="rgb(240,92,26)"/><text x="51.3787%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (353 samples, 6.99%)</title><rect x="44.3564%" y="629" width="6.9901%" height="15" fill="rgb(207,40,23)"/><text x="44.6064%" y="639.50">&lt;core::it..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (272 samples, 5.39%)</title><rect x="45.9604%" y="613" width="5.3861%" height="15" fill="rgb(223,111,35)"/><text x="46.2104%" y="623.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (270 samples, 5.35%)</title><rect x="46.0000%" y="597" width="5.3465%" height="15" fill="rgb(229,147,28)"/><text x="46.2500%" y="607.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (266 samples, 5.27%)</title><rect x="46.0792%" y="581" width="5.2673%" height="15" fill="rgb(211,29,28)"/><text x="46.3292%" y="591.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (260 samples, 5.15%)</title><rect x="46.1980%" y="565" width="5.1485%" height="15" fill="rgb(228,72,33)"/><text x="46.4480%" y="575.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (243 samples, 4.81%)</title><rect x="46.5347%" y="549" width="4.8119%" height="15" fill="rgb(205,214,31)"/><text x="46.7847%" y="559.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (243 samples, 4.81%)</title><rect x="46.5347%" y="533" width="4.8119%" height="15" fill="rgb(224,111,15)"/><text x="46.7847%" y="543.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (243 samples, 4.81%)</title><rect x="46.5347%" y="517" width="4.8119%" height="15" fill="rgb(253,21,26)"/><text x="46.7847%" y="527.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (243 samples, 4.81%)</title><rect x="46.5347%" y="501" width="4.8119%" height="15" fill="rgb(245,139,43)"/><text x="46.7847%" y="511.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (243 samples, 4.81%)</title><rect x="46.5347%" y="485" width="4.8119%" height="15" fill="rgb(252,170,7)"/><text x="46.7847%" y="495.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (243 samples, 4.81%)</title><rect x="46.5347%" y="469" width="4.8119%" height="15" fill="rgb(231,118,14)"/><text x="46.7847%" y="479.50">alloc:..</text></g><g><title>alloc::alloc::alloc (242 samples, 4.79%)</title><rect x="46.5545%" y="453" width="4.7921%" height="15" fill="rgb(238,83,0)"/><text x="46.8045%" y="463.50">alloc:..</text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="51.3465%" y="629" width="0.1584%" height="15" fill="rgb(221,39,39)"/><text x="51.5965%" y="639.50"></text></g><g><title>__GI___libc_malloc (56 samples, 1.11%)</title><rect x="51.5050%" y="629" width="1.1089%" height="15" fill="rgb(222,119,46)"/><text x="51.7550%" y="639.50"></text></g><g><title>_int_malloc (33 samples, 0.65%)</title><rect x="51.9604%" y="613" width="0.6535%" height="15" fill="rgb(222,165,49)"/><text x="52.2104%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (431 samples, 8.53%)</title><rect x="44.1980%" y="645" width="8.5347%" height="15" fill="rgb(219,113,52)"/><text x="44.4480%" y="655.50">&lt;alloc::vec:..</text></g><g><title>perf_iterate_sb (26 samples, 0.51%)</title><rect x="53.7030%" y="469" width="0.5149%" height="15" fill="rgb(214,7,15)"/><text x="53.9530%" y="479.50"></text></g><g><title>perf_iterate_ctx (24 samples, 0.48%)</title><rect x="53.7426%" y="453" width="0.4752%" height="15" fill="rgb(235,32,4)"/><text x="53.9926%" y="463.50"></text></g><g><title>perf_event_mmap_output (11 samples, 0.22%)</title><rect x="54.0000%" y="437" width="0.2178%" height="15" fill="rgb(238,90,54)"/><text x="54.2500%" y="447.50"></text></g><g><title>perf_event_mmap (27 samples, 0.53%)</title><rect x="53.7030%" y="485" width="0.5347%" height="15" fill="rgb(213,208,19)"/><text x="53.9530%" y="495.50"></text></g><g><title>__x64_sys_mprotect (31 samples, 0.61%)</title><rect x="53.6634%" y="533" width="0.6139%" height="15" fill="rgb(233,156,4)"/><text x="53.9134%" y="543.50"></text></g><g><title>do_mprotect_pkey (31 samples, 0.61%)</title><rect x="53.6634%" y="517" width="0.6139%" height="15" fill="rgb(207,194,5)"/><text x="53.9134%" y="527.50"></text></g><g><title>mprotect_fixup (31 samples, 0.61%)</title><rect x="53.6634%" y="501" width="0.6139%" height="15" fill="rgb(206,111,30)"/><text x="53.9134%" y="511.50"></text></g><g><title>do_syscall_64 (32 samples, 0.63%)</title><rect x="53.6634%" y="549" width="0.6337%" height="15" fill="rgb(243,70,54)"/><text x="53.9134%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (34 samples, 0.67%)</title><rect x="53.6634%" y="565" width="0.6733%" height="15" fill="rgb(242,28,8)"/><text x="53.9134%" y="575.50"></text></g><g><title>__GI___mprotect (37 samples, 0.73%)</title><rect x="53.6634%" y="581" width="0.7327%" height="15" fill="rgb(219,106,18)"/><text x="53.9134%" y="591.50"></text></g><g><title>alloc_pages_vma (10 samples, 0.20%)</title><rect x="54.5347%" y="517" width="0.1980%" height="15" fill="rgb(244,222,10)"/><text x="54.7847%" y="527.50"></text></g><g><title>__alloc_pages_nodemask (10 samples, 0.20%)</title><rect x="54.5347%" y="501" width="0.1980%" height="15" fill="rgb(236,179,52)"/><text x="54.7847%" y="511.50"></text></g><g><title>get_page_from_freelist (9 samples, 0.18%)</title><rect x="54.5545%" y="485" width="0.1782%" height="15" fill="rgb(213,23,39)"/><text x="54.8045%" y="495.50"></text></g><g><title>prep_new_page (6 samples, 0.12%)</title><rect x="54.6139%" y="469" width="0.1188%" height="15" fill="rgb(238,48,10)"/><text x="54.8639%" y="479.50"></text></g><g><title>__handle_mm_fault (18 samples, 0.36%)</title><rect x="54.4752%" y="533" width="0.3564%" height="15" fill="rgb(251,196,23)"/><text x="54.7252%" y="543.50"></text></g><g><title>page_fault (20 samples, 0.40%)</title><rect x="54.4554%" y="581" width="0.3960%" height="15" fill="rgb(250,152,24)"/><text x="54.7054%" y="591.50"></text></g><g><title>do_user_addr_fault (20 samples, 0.40%)</title><rect x="54.4554%" y="565" width="0.3960%" height="15" fill="rgb(209,150,17)"/><text x="54.7054%" y="575.50"></text></g><g><title>handle_mm_fault (20 samples, 0.40%)</title><rect x="54.4554%" y="549" width="0.3960%" height="15" fill="rgb(234,202,34)"/><text x="54.7054%" y="559.50"></text></g><g><title>__GI___libc_malloc (91 samples, 1.80%)</title><rect x="53.0693%" y="629" width="1.8020%" height="15" fill="rgb(253,148,53)"/><text x="53.3193%" y="639.50">_..</text></g><g><title>_int_malloc (85 samples, 1.68%)</title><rect x="53.1881%" y="613" width="1.6832%" height="15" fill="rgb(218,129,16)"/><text x="53.4381%" y="623.50"></text></g><g><title>sysmalloc (62 samples, 1.23%)</title><rect x="53.6436%" y="597" width="1.2277%" height="15" fill="rgb(216,85,19)"/><text x="53.8936%" y="607.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="54.8713%" y="629" width="0.1188%" height="15" fill="rgb(235,228,7)"/><text x="55.1213%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (104 samples, 2.06%)</title><rect x="52.9505%" y="645" width="2.0594%" height="15" fill="rgb(245,175,0)"/><text x="53.2005%" y="655.50">a..</text></g><g><title>alloc::slice::merge_sort (7 samples, 0.14%)</title><rect x="55.0099%" y="645" width="0.1386%" height="15" fill="rgb(208,168,36)"/><text x="55.2599%" y="655.50"></text></g><g><title>__GI___libc_free (17 samples, 0.34%)</title><rect x="55.5842%" y="629" width="0.3366%" height="15" fill="rgb(246,171,24)"/><text x="55.8342%" y="639.50"></text></g><g><title>_int_free (67 samples, 1.33%)</title><rect x="56.0396%" y="629" width="1.3267%" height="15" fill="rgb(215,142,24)"/><text x="56.2896%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (116 samples, 2.30%)</title><rect x="55.3069%" y="645" width="2.2970%" height="15" fill="rgb(250,187,7)"/><text x="55.5569%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place (12 samples, 0.24%)</title><rect x="57.3663%" y="629" width="0.2376%" height="15" fill="rgb(228,66,33)"/><text x="57.6163%" y="639.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (11 samples, 0.22%)</title><rect x="57.6436%" y="645" width="0.2178%" height="15" fill="rgb(234,215,21)"/><text x="57.8936%" y="655.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="57.8614%" y="629" width="0.1584%" height="15" fill="rgb(222,191,20)"/><text x="58.1114%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="57.8614%" y="613" width="0.1584%" height="15" fill="rgb(245,79,54)"/><text x="58.1114%" y="623.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (12 samples, 0.24%)</title><rect x="57.8614%" y="645" width="0.2376%" height="15" fill="rgb(240,10,37)"/><text x="58.1114%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.22%)</title><rect x="58.1782%" y="645" width="0.2178%" height="15" fill="rgb(214,192,32)"/><text x="58.4282%" y="655.50"></text></g><g><title>decor_mem::select::get_query_results (849 samples, 16.81%)</title><rect x="41.6040%" y="677" width="16.8119%" height="15" fill="rgb(209,36,54)"/><text x="41.8540%" y="687.50">decor_mem::select::get_que..</text></g><g><title>decor_mem::select::get_setexpr_results (820 samples, 16.24%)</title><rect x="42.1782%" y="661" width="16.2376%" height="15" fill="rgb(220,10,11)"/><text x="42.4282%" y="671.50">decor_mem::select::get_se..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (12 samples, 0.24%)</title><rect x="58.5545%" y="581" width="0.2376%" height="15" fill="rgb(221,106,17)"/><text x="58.8045%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (7 samples, 0.14%)</title><rect x="58.6535%" y="565" width="0.1386%" height="15" fill="rgb(251,142,44)"/><text x="58.9035%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (6 samples, 0.12%)</title><rect x="58.6733%" y="549" width="0.1188%" height="15" fill="rgb(238,13,15)"/><text x="58.9233%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (6 samples, 0.12%)</title><rect x="58.6733%" y="533" width="0.1188%" height="15" fill="rgb(208,107,27)"/><text x="58.9233%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (15 samples, 0.30%)</title><rect x="58.5149%" y="629" width="0.2970%" height="15" fill="rgb(205,136,37)"/><text x="58.7649%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (15 samples, 0.30%)</title><rect x="58.5149%" y="613" width="0.2970%" height="15" fill="rgb(250,205,27)"/><text x="58.7649%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (15 samples, 0.30%)</title><rect x="58.5149%" y="597" width="0.2970%" height="15" fill="rgb(210,80,43)"/><text x="58.7649%" y="607.50"></text></g><g><title>core::fmt::write (19 samples, 0.38%)</title><rect x="58.4950%" y="645" width="0.3762%" height="15" fill="rgb(247,160,36)"/><text x="58.7450%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (916 samples, 18.14%)</title><rect x="40.8119%" y="709" width="18.1386%" height="15" fill="rgb(234,13,49)"/><text x="41.0619%" y="719.50">decor_mem::query_transformer..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (916 samples, 18.14%)</title><rect x="40.8119%" y="693" width="18.1386%" height="15" fill="rgb(234,122,0)"/><text x="41.0619%" y="703.50">decor_mem::query_transformer..</text></g><g><title>decor_mem::views::Views::insert (27 samples, 0.53%)</title><rect x="58.4158%" y="677" width="0.5347%" height="15" fill="rgb(207,146,38)"/><text x="58.6658%" y="687.50"></text></g><g><title>decor_mem::views::View::insert_into_index (26 samples, 0.51%)</title><rect x="58.4356%" y="661" width="0.5149%" height="15" fill="rgb(207,177,25)"/><text x="58.6856%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="58.9505%" y="677" width="0.1782%" height="15" fill="rgb(211,178,42)"/><text x="59.2005%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="59.0099%" y="661" width="0.1188%" height="15" fill="rgb(230,69,54)"/><text x="59.2599%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (12 samples, 0.24%)</title><rect x="58.9505%" y="693" width="0.2376%" height="15" fill="rgb(214,135,41)"/><text x="59.2005%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="59.2277%" y="661" width="0.1188%" height="15" fill="rgb(237,67,25)"/><text x="59.4777%" y="671.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="59.3465%" y="645" width="0.1188%" height="15" fill="rgb(222,189,50)"/><text x="59.5965%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (28 samples, 0.55%)</title><rect x="59.1881%" y="693" width="0.5545%" height="15" fill="rgb(245,148,34)"/><text x="59.4381%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (27 samples, 0.53%)</title><rect x="59.2079%" y="677" width="0.5347%" height="15" fill="rgb(222,29,6)"/><text x="59.4579%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (20 samples, 0.40%)</title><rect x="59.3465%" y="661" width="0.3960%" height="15" fill="rgb(221,189,43)"/><text x="59.5965%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.28%)</title><rect x="59.4653%" y="645" width="0.2772%" height="15" fill="rgb(207,36,27)"/><text x="59.7153%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.28%)</title><rect x="59.4653%" y="629" width="0.2772%" height="15" fill="rgb(217,90,24)"/><text x="59.7153%" y="639.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="59.9010%" y="677" width="0.1188%" height="15" fill="rgb(224,66,35)"/><text x="60.1510%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.32%)</title><rect x="60.3564%" y="661" width="0.3168%" height="15" fill="rgb(221,13,50)"/><text x="60.6064%" y="671.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.28%)</title><rect x="60.3960%" y="645" width="0.2772%" height="15" fill="rgb(236,68,49)"/><text x="60.6460%" y="655.50"></text></g><g><title>_int_realloc (13 samples, 0.26%)</title><rect x="60.4158%" y="629" width="0.2574%" height="15" fill="rgb(229,146,28)"/><text x="60.6658%" y="639.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="60.5149%" y="613" width="0.1584%" height="15" fill="rgb(225,31,38)"/><text x="60.7649%" y="623.50"></text></g><g><title>__memcmp_avx2_movbe (7 samples, 0.14%)</title><rect x="61.4653%" y="629" width="0.1386%" height="15" fill="rgb(250,208,3)"/><text x="61.7153%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (39 samples, 0.77%)</title><rect x="61.1881%" y="645" width="0.7723%" height="15" fill="rgb(246,54,23)"/><text x="61.4381%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (18 samples, 0.36%)</title><rect x="61.6040%" y="629" width="0.3564%" height="15" fill="rgb(243,76,11)"/><text x="61.8540%" y="639.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (13 samples, 0.26%)</title><rect x="61.7030%" y="613" width="0.2574%" height="15" fill="rgb(245,21,50)"/><text x="61.9530%" y="623.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (10 samples, 0.20%)</title><rect x="61.7624%" y="597" width="0.1980%" height="15" fill="rgb(228,9,43)"/><text x="62.0124%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (10 samples, 0.20%)</title><rect x="61.7624%" y="581" width="0.1980%" height="15" fill="rgb(208,100,47)"/><text x="62.0124%" y="591.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (70 samples, 1.39%)</title><rect x="60.6733%" y="661" width="1.3861%" height="15" fill="rgb(232,26,8)"/><text x="60.9233%" y="671.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="62.3762%" y="645" width="0.1188%" height="15" fill="rgb(216,166,38)"/><text x="62.6262%" y="655.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="62.5149%" y="629" width="0.1782%" height="15" fill="rgb(251,202,51)"/><text x="62.7649%" y="639.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="62.5743%" y="613" width="0.1188%" height="15" fill="rgb(254,216,34)"/><text x="62.8243%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.24%)</title><rect x="62.4950%" y="645" width="0.2376%" height="15" fill="rgb(251,32,27)"/><text x="62.7450%" y="655.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (193 samples, 3.82%)</title><rect x="58.9505%" y="709" width="3.8218%" height="15" fill="rgb(208,127,28)"/><text x="59.2005%" y="719.50">deco..</text></g><g><title>sql_parser::parser::parse_statements (153 samples, 3.03%)</title><rect x="59.7426%" y="693" width="3.0297%" height="15" fill="rgb(224,137,22)"/><text x="59.9926%" y="703.50">sql..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (134 samples, 2.65%)</title><rect x="60.1188%" y="677" width="2.6535%" height="15" fill="rgb(254,70,32)"/><text x="60.3688%" y="687.50">sq..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (36 samples, 0.71%)</title><rect x="62.0594%" y="661" width="0.7129%" height="15" fill="rgb(229,75,37)"/><text x="62.3094%" y="671.50"></text></g><g><title>malloc_consolidate (79 samples, 1.56%)</title><rect x="63.2475%" y="597" width="1.5644%" height="15" fill="rgb(252,64,23)"/><text x="63.4975%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (20 samples, 0.40%)</title><rect x="64.4158%" y="581" width="0.3960%" height="15" fill="rgb(232,162,48)"/><text x="64.6658%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (104 samples, 2.06%)</title><rect x="62.7723%" y="661" width="2.0594%" height="15" fill="rgb(246,160,12)"/><text x="63.0223%" y="671.50">a..</text></g><g><title>__GI___libc_realloc (104 samples, 2.06%)</title><rect x="62.7723%" y="645" width="2.0594%" height="15" fill="rgb(247,166,0)"/><text x="63.0223%" y="655.50">_..</text></g><g><title>_int_realloc (104 samples, 2.06%)</title><rect x="62.7723%" y="629" width="2.0594%" height="15" fill="rgb(249,219,21)"/><text x="63.0223%" y="639.50">_..</text></g><g><title>_int_malloc (103 samples, 2.04%)</title><rect x="62.7921%" y="613" width="2.0396%" height="15" fill="rgb(205,209,3)"/><text x="63.0421%" y="623.50">_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="65.3069%" y="645" width="0.1188%" height="15" fill="rgb(243,44,1)"/><text x="65.5569%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.18%)</title><rect x="65.9802%" y="629" width="0.1782%" height="15" fill="rgb(206,159,16)"/><text x="66.2302%" y="639.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (10 samples, 0.20%)</title><rect x="66.6931%" y="565" width="0.1980%" height="15" fill="rgb(244,77,30)"/><text x="66.9431%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (72 samples, 1.43%)</title><rect x="65.5050%" y="645" width="1.4257%" height="15" fill="rgb(218,69,12)"/><text x="65.7550%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (39 samples, 0.77%)</title><rect x="66.1584%" y="629" width="0.7723%" height="15" fill="rgb(212,87,7)"/><text x="66.4084%" y="639.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (26 samples, 0.51%)</title><rect x="66.4158%" y="613" width="0.5149%" height="15" fill="rgb(245,114,25)"/><text x="66.6658%" y="623.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (22 samples, 0.44%)</title><rect x="66.4950%" y="597" width="0.4356%" height="15" fill="rgb(210,61,42)"/><text x="66.7450%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (22 samples, 0.44%)</title><rect x="66.4950%" y="581" width="0.4356%" height="15" fill="rgb(211,52,33)"/><text x="66.7450%" y="591.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (112 samples, 2.22%)</title><rect x="64.8317%" y="661" width="2.2178%" height="15" fill="rgb(234,58,33)"/><text x="65.0817%" y="671.50">s..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (6 samples, 0.12%)</title><rect x="66.9307%" y="645" width="0.1188%" height="15" fill="rgb(220,115,36)"/><text x="67.1807%" y="655.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,347 samples, 26.67%)</title><rect x="40.7129%" y="741" width="26.6733%" height="15" fill="rgb(243,153,54)"/><text x="40.9629%" y="751.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (1,342 samples, 26.57%)</title><rect x="40.8119%" y="725" width="26.5743%" height="15" fill="rgb(251,47,18)"/><text x="41.0619%" y="735.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;..</text></g><g><title>decor_mem::stats::get_qtype (233 samples, 4.61%)</title><rect x="62.7723%" y="709" width="4.6139%" height="15" fill="rgb(242,102,42)"/><text x="63.0223%" y="719.50">decor..</text></g><g><title>sql_parser::parser::parse_statements (233 samples, 4.61%)</title><rect x="62.7723%" y="693" width="4.6139%" height="15" fill="rgb(234,31,38)"/><text x="63.0223%" y="703.50">sql_p..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (233 samples, 4.61%)</title><rect x="62.7723%" y="677" width="4.6139%" height="15" fill="rgb(221,117,51)"/><text x="63.0223%" y="687.50">sql_p..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (17 samples, 0.34%)</title><rect x="67.0495%" y="661" width="0.3366%" height="15" fill="rgb(212,20,18)"/><text x="67.2995%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.26%)</title><rect x="67.1287%" y="645" width="0.2574%" height="15" fill="rgb(245,133,36)"/><text x="67.3787%" y="655.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.26%)</title><rect x="67.1287%" y="629" width="0.2574%" height="15" fill="rgb(212,6,19)"/><text x="67.3787%" y="639.50"></text></g><g><title>_int_malloc (13 samples, 0.26%)</title><rect x="67.1287%" y="613" width="0.2574%" height="15" fill="rgb(218,1,36)"/><text x="67.3787%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.14%)</title><rect x="67.6040%" y="645" width="0.1386%" height="15" fill="rgb(246,84,54)"/><text x="67.8540%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::get_next_precedence (10 samples, 0.20%)</title><rect x="67.7426%" y="645" width="0.1980%" height="15" fill="rgb(242,110,6)"/><text x="67.9926%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (22 samples, 0.44%)</title><rect x="67.5248%" y="693" width="0.4356%" height="15" fill="rgb(214,47,5)"/><text x="67.7748%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (21 samples, 0.42%)</title><rect x="67.5446%" y="677" width="0.4158%" height="15" fill="rgb(218,159,25)"/><text x="67.7946%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (21 samples, 0.42%)</title><rect x="67.5446%" y="661" width="0.4158%" height="15" fill="rgb(215,211,28)"/><text x="67.7946%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (29 samples, 0.57%)</title><rect x="67.5248%" y="709" width="0.5743%" height="15" fill="rgb(238,59,32)"/><text x="67.7748%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (7 samples, 0.14%)</title><rect x="67.9604%" y="693" width="0.1386%" height="15" fill="rgb(226,82,3)"/><text x="68.2104%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (7 samples, 0.14%)</title><rect x="67.9604%" y="677" width="0.1386%" height="15" fill="rgb(240,164,32)"/><text x="68.2104%" y="687.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (13 samples, 0.26%)</title><rect x="68.9307%" y="661" width="0.2574%" height="15" fill="rgb(232,46,7)"/><text x="69.1807%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.24%)</title><rect x="68.9505%" y="645" width="0.2376%" height="15" fill="rgb(229,129,53)"/><text x="69.2005%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="68.9703%" y="629" width="0.2178%" height="15" fill="rgb(234,188,29)"/><text x="69.2203%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 0.22%)</title><rect x="68.9703%" y="613" width="0.2178%" height="15" fill="rgb(246,141,4)"/><text x="69.2203%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.22%)</title><rect x="68.9703%" y="597" width="0.2178%" height="15" fill="rgb(229,23,39)"/><text x="69.2203%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="68.9901%" y="581" width="0.1980%" height="15" fill="rgb(206,12,3)"/><text x="69.2401%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="68.9901%" y="565" width="0.1980%" height="15" fill="rgb(252,226,20)"/><text x="69.2401%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.20%)</title><rect x="68.9901%" y="549" width="0.1980%" height="15" fill="rgb(216,123,35)"/><text x="69.2401%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.20%)</title><rect x="68.9901%" y="533" width="0.1980%" height="15" fill="rgb(212,68,40)"/><text x="69.2401%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.20%)</title><rect x="68.9901%" y="517" width="0.1980%" height="15" fill="rgb(254,125,32)"/><text x="69.2401%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.20%)</title><rect x="68.9901%" y="501" width="0.1980%" height="15" fill="rgb(253,97,22)"/><text x="69.2401%" y="511.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.20%)</title><rect x="68.9901%" y="485" width="0.1980%" height="15" fill="rgb(241,101,14)"/><text x="69.2401%" y="495.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="69.0297%" y="469" width="0.1584%" height="15" fill="rgb(238,103,29)"/><text x="69.2797%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.50%)</title><rect x="69.2673%" y="661" width="0.4950%" height="15" fill="rgb(233,195,47)"/><text x="69.5173%" y="671.50"></text></g><g><title>_int_free (16 samples, 0.32%)</title><rect x="69.7822%" y="661" width="0.3168%" height="15" fill="rgb(246,218,30)"/><text x="70.0322%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="70.4950%" y="645" width="0.2178%" height="15" fill="rgb(219,145,47)"/><text x="70.7450%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="70.5347%" y="629" width="0.1782%" height="15" fill="rgb(243,12,26)"/><text x="70.7847%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="70.5743%" y="613" width="0.1386%" height="15" fill="rgb(214,87,16)"/><text x="70.8243%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="70.5743%" y="597" width="0.1386%" height="15" fill="rgb(208,99,42)"/><text x="70.8243%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="70.5941%" y="581" width="0.1188%" height="15" fill="rgb(253,99,2)"/><text x="70.8441%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="70.9901%" y="501" width="0.1188%" height="15" fill="rgb(220,168,23)"/><text x="71.2401%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.14%)</title><rect x="70.9901%" y="565" width="0.1386%" height="15" fill="rgb(242,38,24)"/><text x="71.2401%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.14%)</title><rect x="70.9901%" y="549" width="0.1386%" height="15" fill="rgb(225,182,9)"/><text x="71.2401%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (7 samples, 0.14%)</title><rect x="70.9901%" y="533" width="0.1386%" height="15" fill="rgb(243,178,37)"/><text x="71.2401%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.14%)</title><rect x="70.9901%" y="517" width="0.1386%" height="15" fill="rgb(232,139,19)"/><text x="71.2401%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.28%)</title><rect x="70.9901%" y="629" width="0.2772%" height="15" fill="rgb(225,201,24)"/><text x="71.2401%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.28%)</title><rect x="70.9901%" y="613" width="0.2772%" height="15" fill="rgb(221,47,46)"/><text x="71.2401%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.28%)</title><rect x="70.9901%" y="597" width="0.2772%" height="15" fill="rgb(249,23,13)"/><text x="71.2401%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.28%)</title><rect x="70.9901%" y="581" width="0.2772%" height="15" fill="rgb(219,9,5)"/><text x="71.2401%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="71.1287%" y="565" width="0.1386%" height="15" fill="rgb(254,171,16)"/><text x="71.3787%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="71.1287%" y="549" width="0.1386%" height="15" fill="rgb(230,171,20)"/><text x="71.3787%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.14%)</title><rect x="71.1287%" y="533" width="0.1386%" height="15" fill="rgb(210,71,41)"/><text x="71.3787%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.14%)</title><rect x="71.1287%" y="517" width="0.1386%" height="15" fill="rgb(206,173,20)"/><text x="71.3787%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.14%)</title><rect x="71.1287%" y="501" width="0.1386%" height="15" fill="rgb(233,88,34)"/><text x="71.3787%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.14%)</title><rect x="71.1287%" y="485" width="0.1386%" height="15" fill="rgb(223,209,46)"/><text x="71.3787%" y="495.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="71.1287%" y="469" width="0.1386%" height="15" fill="rgb(250,43,18)"/><text x="71.3787%" y="479.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (10 samples, 0.20%)</title><rect x="71.4653%" y="613" width="0.1980%" height="15" fill="rgb(208,13,10)"/><text x="71.7153%" y="623.50"></text></g><g><title>alloc::fmt::format (16 samples, 0.32%)</title><rect x="71.4059%" y="629" width="0.3168%" height="15" fill="rgb(212,200,36)"/><text x="71.6559%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (80 samples, 1.58%)</title><rect x="70.1584%" y="661" width="1.5842%" height="15" fill="rgb(225,90,30)"/><text x="70.4084%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::expected (52 samples, 1.03%)</title><rect x="70.7129%" y="645" width="1.0297%" height="15" fill="rgb(236,182,39)"/><text x="70.9629%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (37 samples, 0.73%)</title><rect x="71.7426%" y="661" width="0.7327%" height="15" fill="rgb(212,144,35)"/><text x="71.9926%" y="671.50"></text></g><g><title>__GI___libc_malloc (37 samples, 0.73%)</title><rect x="72.7129%" y="469" width="0.7327%" height="15" fill="rgb(228,63,44)"/><text x="72.9629%" y="479.50"></text></g><g><title>_int_malloc (24 samples, 0.48%)</title><rect x="72.9703%" y="453" width="0.4752%" height="15" fill="rgb(228,109,6)"/><text x="73.2203%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (43 samples, 0.85%)</title><rect x="72.6931%" y="645" width="0.8515%" height="15" fill="rgb(238,117,24)"/><text x="72.9431%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (43 samples, 0.85%)</title><rect x="72.6931%" y="629" width="0.8515%" height="15" fill="rgb(242,26,26)"/><text x="72.9431%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (42 samples, 0.83%)</title><rect x="72.7129%" y="613" width="0.8317%" height="15" fill="rgb(221,92,48)"/><text x="72.9629%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (42 samples, 0.83%)</title><rect x="72.7129%" y="597" width="0.8317%" height="15" fill="rgb(209,209,32)"/><text x="72.9629%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (42 samples, 0.83%)</title><rect x="72.7129%" y="581" width="0.8317%" height="15" fill="rgb(221,70,22)"/><text x="72.9629%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (42 samples, 0.83%)</title><rect x="72.7129%" y="565" width="0.8317%" height="15" fill="rgb(248,145,5)"/><text x="72.9629%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42 samples, 0.83%)</title><rect x="72.7129%" y="549" width="0.8317%" height="15" fill="rgb(226,116,26)"/><text x="72.9629%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (42 samples, 0.83%)</title><rect x="72.7129%" y="533" width="0.8317%" height="15" fill="rgb(244,5,17)"/><text x="72.9629%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (42 samples, 0.83%)</title><rect x="72.7129%" y="517" width="0.8317%" height="15" fill="rgb(252,159,33)"/><text x="72.9629%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.83%)</title><rect x="72.7129%" y="501" width="0.8317%" height="15" fill="rgb(206,71,0)"/><text x="72.9629%" y="511.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.83%)</title><rect x="72.7129%" y="485" width="0.8317%" height="15" fill="rgb(233,118,54)"/><text x="72.9629%" y="495.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="73.5446%" y="645" width="0.1584%" height="15" fill="rgb(234,83,48)"/><text x="73.7946%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="73.5644%" y="629" width="0.1386%" height="15" fill="rgb(228,3,54)"/><text x="73.8144%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="73.5644%" y="613" width="0.1386%" height="15" fill="rgb(226,155,13)"/><text x="73.8144%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="73.5644%" y="597" width="0.1386%" height="15" fill="rgb(241,28,37)"/><text x="73.8144%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.14%)</title><rect x="73.5644%" y="581" width="0.1386%" height="15" fill="rgb(233,93,10)"/><text x="73.8144%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="73.5644%" y="565" width="0.1386%" height="15" fill="rgb(225,113,19)"/><text x="73.8144%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="73.5644%" y="549" width="0.1386%" height="15" fill="rgb(241,2,18)"/><text x="73.8144%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.14%)</title><rect x="73.5644%" y="533" width="0.1386%" height="15" fill="rgb(228,207,21)"/><text x="73.8144%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.14%)</title><rect x="73.5644%" y="517" width="0.1386%" height="15" fill="rgb(213,211,35)"/><text x="73.8144%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.14%)</title><rect x="73.5644%" y="501" width="0.1386%" height="15" fill="rgb(209,83,10)"/><text x="73.8144%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.14%)</title><rect x="73.5644%" y="485" width="0.1386%" height="15" fill="rgb(209,164,1)"/><text x="73.8144%" y="495.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="73.5644%" y="469" width="0.1386%" height="15" fill="rgb(213,184,43)"/><text x="73.8144%" y="479.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (327 samples, 6.48%)</title><rect x="67.5248%" y="725" width="6.4752%" height="15" fill="rgb(231,61,34)"/><text x="67.7748%" y="735.50">sql_pars..</text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (298 samples, 5.90%)</title><rect x="68.0990%" y="709" width="5.9010%" height="15" fill="rgb(235,75,3)"/><text x="68.3490%" y="719.50">sql_pars..</text></g><g><title>sql_parser::parser::Parser::check_descent (298 samples, 5.90%)</title><rect x="68.0990%" y="693" width="5.9010%" height="15" fill="rgb(220,106,47)"/><text x="68.3490%" y="703.50">sql_pars..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (298 samples, 5.90%)</title><rect x="68.0990%" y="677" width="5.9010%" height="15" fill="rgb(210,196,33)"/><text x="68.3490%" y="687.50">sql_pars..</text></g><g><title>sql_parser::parser::Parser::parse_value (77 samples, 1.52%)</title><rect x="72.4752%" y="661" width="1.5248%" height="15" fill="rgb(229,154,42)"/><text x="72.7252%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (30 samples, 0.59%)</title><rect x="74.0990%" y="629" width="0.5941%" height="15" fill="rgb(228,114,26)"/><text x="74.3490%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (30 samples, 0.59%)</title><rect x="74.0990%" y="613" width="0.5941%" height="15" fill="rgb(208,144,1)"/><text x="74.3490%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.59%)</title><rect x="74.0990%" y="597" width="0.5941%" height="15" fill="rgb(239,112,37)"/><text x="74.3490%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.59%)</title><rect x="74.0990%" y="581" width="0.5941%" height="15" fill="rgb(210,96,50)"/><text x="74.3490%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (30 samples, 0.59%)</title><rect x="74.0990%" y="565" width="0.5941%" height="15" fill="rgb(222,178,2)"/><text x="74.3490%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (30 samples, 0.59%)</title><rect x="74.0990%" y="549" width="0.5941%" height="15" fill="rgb(226,74,18)"/><text x="74.3490%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (30 samples, 0.59%)</title><rect x="74.0990%" y="533" width="0.5941%" height="15" fill="rgb(225,67,54)"/><text x="74.3490%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.59%)</title><rect x="74.0990%" y="517" width="0.5941%" height="15" fill="rgb(251,92,32)"/><text x="74.3490%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (30 samples, 0.59%)</title><rect x="74.0990%" y="501" width="0.5941%" height="15" fill="rgb(228,149,22)"/><text x="74.3490%" y="511.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (35 samples, 0.69%)</title><rect x="74.0198%" y="661" width="0.6931%" height="15" fill="rgb(243,54,13)"/><text x="74.2698%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::expected (33 samples, 0.65%)</title><rect x="74.0594%" y="645" width="0.6535%" height="15" fill="rgb(243,180,28)"/><text x="74.3094%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (38 samples, 0.75%)</title><rect x="74.0000%" y="709" width="0.7525%" height="15" fill="rgb(208,167,24)"/><text x="74.2500%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (38 samples, 0.75%)</title><rect x="74.0000%" y="693" width="0.7525%" height="15" fill="rgb(245,73,45)"/><text x="74.2500%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (38 samples, 0.75%)</title><rect x="74.0000%" y="677" width="0.7525%" height="15" fill="rgb(237,203,48)"/><text x="74.2500%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.32%)</title><rect x="75.3069%" y="645" width="0.3168%" height="15" fill="rgb(211,197,16)"/><text x="75.5569%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (41 samples, 0.81%)</title><rect x="74.9307%" y="661" width="0.8119%" height="15" fill="rgb(243,99,51)"/><text x="75.1807%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (10 samples, 0.20%)</title><rect x="75.7426%" y="661" width="0.1980%" height="15" fill="rgb(215,123,29)"/><text x="75.9926%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (100 samples, 1.98%)</title><rect x="74.7525%" y="677" width="1.9802%" height="15" fill="rgb(239,186,37)"/><text x="75.0025%" y="687.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (40 samples, 0.79%)</title><rect x="75.9406%" y="661" width="0.7921%" height="15" fill="rgb(252,136,39)"/><text x="76.1906%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (19 samples, 0.38%)</title><rect x="76.3564%" y="645" width="0.3762%" height="15" fill="rgb(223,213,32)"/><text x="76.6064%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (126 samples, 2.50%)</title><rect x="74.7525%" y="693" width="2.4950%" height="15" fill="rgb(233,115,5)"/><text x="75.0025%" y="703.50">sq..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (26 samples, 0.51%)</title><rect x="76.7327%" y="677" width="0.5149%" height="15" fill="rgb(207,226,44)"/><text x="76.9827%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (9 samples, 0.18%)</title><rect x="77.3069%" y="661" width="0.1782%" height="15" fill="rgb(208,126,0)"/><text x="77.5569%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_object_name (12 samples, 0.24%)</title><rect x="77.4851%" y="661" width="0.2376%" height="15" fill="rgb(244,66,21)"/><text x="77.7351%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (521 samples, 10.32%)</title><rect x="67.4851%" y="741" width="10.3168%" height="15" fill="rgb(222,97,12)"/><text x="67.7351%" y="751.50">sql_parser::par..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (192 samples, 3.80%)</title><rect x="74.0000%" y="725" width="3.8020%" height="15" fill="rgb(219,213,19)"/><text x="74.2500%" y="735.50">sql_..</text></g><g><title>sql_parser::parser::Parser::parse_select (154 samples, 3.05%)</title><rect x="74.7525%" y="709" width="3.0495%" height="15" fill="rgb(252,169,30)"/><text x="75.0025%" y="719.50">sql..</text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (28 samples, 0.55%)</title><rect x="77.2475%" y="693" width="0.5545%" height="15" fill="rgb(206,32,51)"/><text x="77.4975%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (28 samples, 0.55%)</title><rect x="77.2475%" y="677" width="0.5545%" height="15" fill="rgb(250,172,42)"/><text x="77.4975%" y="687.50"></text></g><g><title>_int_free (12 samples, 0.24%)</title><rect x="77.9406%" y="645" width="0.2376%" height="15" fill="rgb(209,34,43)"/><text x="78.1906%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.44%)</title><rect x="78.5149%" y="437" width="0.4356%" height="15" fill="rgb(223,11,35)"/><text x="78.7649%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (21 samples, 0.42%)</title><rect x="78.5347%" y="421" width="0.4158%" height="15" fill="rgb(251,219,26)"/><text x="78.7847%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.42%)</title><rect x="78.5347%" y="405" width="0.4158%" height="15" fill="rgb(231,119,3)"/><text x="78.7847%" y="415.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.42%)</title><rect x="78.5347%" y="389" width="0.4158%" height="15" fill="rgb(216,97,11)"/><text x="78.7847%" y="399.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.42%)</title><rect x="78.5347%" y="373" width="0.4158%" height="15" fill="rgb(223,59,9)"/><text x="78.7847%" y="383.50"></text></g><g><title>_int_realloc (13 samples, 0.26%)</title><rect x="78.6931%" y="357" width="0.2574%" height="15" fill="rgb(233,93,31)"/><text x="78.9431%" y="367.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="78.8317%" y="341" width="0.1188%" height="15" fill="rgb(239,81,33)"/><text x="79.0817%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (26 samples, 0.51%)</title><rect x="78.4950%" y="501" width="0.5149%" height="15" fill="rgb(213,120,34)"/><text x="78.7450%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 0.51%)</title><rect x="78.4950%" y="485" width="0.5149%" height="15" fill="rgb(243,49,53)"/><text x="78.7450%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (26 samples, 0.51%)</title><rect x="78.4950%" y="469" width="0.5149%" height="15" fill="rgb(247,216,33)"/><text x="78.7450%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (25 samples, 0.50%)</title><rect x="78.5149%" y="453" width="0.4950%" height="15" fill="rgb(226,26,14)"/><text x="78.7649%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (38 samples, 0.75%)</title><rect x="78.3960%" y="597" width="0.7525%" height="15" fill="rgb(215,49,53)"/><text x="78.6460%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (36 samples, 0.71%)</title><rect x="78.4356%" y="581" width="0.7129%" height="15" fill="rgb(245,162,40)"/><text x="78.6856%" y="591.50"></text></g><g><title>alloc::string::String::push_str (36 samples, 0.71%)</title><rect x="78.4356%" y="565" width="0.7129%" height="15" fill="rgb(229,68,17)"/><text x="78.6856%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (36 samples, 0.71%)</title><rect x="78.4356%" y="549" width="0.7129%" height="15" fill="rgb(213,182,10)"/><text x="78.6856%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (36 samples, 0.71%)</title><rect x="78.4356%" y="533" width="0.7129%" height="15" fill="rgb(245,125,30)"/><text x="78.6856%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (36 samples, 0.71%)</title><rect x="78.4356%" y="517" width="0.7129%" height="15" fill="rgb(232,202,2)"/><text x="78.6856%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.14%)</title><rect x="79.0099%" y="501" width="0.1386%" height="15" fill="rgb(237,140,51)"/><text x="79.2599%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.14%)</title><rect x="79.0099%" y="485" width="0.1386%" height="15" fill="rgb(236,157,25)"/><text x="79.2599%" y="495.50"></text></g><g><title>core::fmt::Formatter::pad (8 samples, 0.16%)</title><rect x="79.1881%" y="597" width="0.1584%" height="15" fill="rgb(219,209,0)"/><text x="79.4381%" y="607.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (77 samples, 1.52%)</title><rect x="77.8812%" y="741" width="1.5248%" height="15" fill="rgb(240,116,54)"/><text x="78.1312%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (74 samples, 1.47%)</title><rect x="77.9406%" y="725" width="1.4653%" height="15" fill="rgb(216,10,36)"/><text x="78.1906%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (74 samples, 1.47%)</title><rect x="77.9406%" y="709" width="1.4653%" height="15" fill="rgb(222,72,44)"/><text x="78.1906%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (74 samples, 1.47%)</title><rect x="77.9406%" y="693" width="1.4653%" height="15" fill="rgb(232,159,9)"/><text x="78.1906%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (74 samples, 1.47%)</title><rect x="77.9406%" y="677" width="1.4653%" height="15" fill="rgb(210,39,32)"/><text x="78.1906%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (74 samples, 1.47%)</title><rect x="77.9406%" y="661" width="1.4653%" height="15" fill="rgb(216,194,45)"/><text x="78.1906%" y="671.50"></text></g><g><title>alloc::fmt::format (62 samples, 1.23%)</title><rect x="78.1782%" y="645" width="1.2277%" height="15" fill="rgb(218,18,35)"/><text x="78.4282%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (60 samples, 1.19%)</title><rect x="78.2178%" y="629" width="1.1881%" height="15" fill="rgb(207,83,51)"/><text x="78.4678%" y="639.50"></text></g><g><title>core::fmt::write (60 samples, 1.19%)</title><rect x="78.2178%" y="613" width="1.1881%" height="15" fill="rgb(225,63,43)"/><text x="78.4678%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (6 samples, 0.12%)</title><rect x="79.6634%" y="677" width="0.1188%" height="15" fill="rgb(207,57,36)"/><text x="79.9134%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="79.7822%" y="661" width="0.1188%" height="15" fill="rgb(216,99,33)"/><text x="80.0322%" y="671.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="79.7822%" y="645" width="0.1188%" height="15" fill="rgb(225,42,16)"/><text x="80.0322%" y="655.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="79.7822%" y="629" width="0.1188%" height="15" fill="rgb(220,201,45)"/><text x="80.0322%" y="639.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="79.7822%" y="613" width="0.1188%" height="15" fill="rgb(225,33,4)"/><text x="80.0322%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.28%)</title><rect x="79.9406%" y="645" width="0.2772%" height="15" fill="rgb(224,33,50)"/><text x="80.1906%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::get_next_precedence (6 samples, 0.12%)</title><rect x="80.2178%" y="645" width="0.1188%" height="15" fill="rgb(246,198,51)"/><text x="80.4678%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (35 samples, 0.69%)</title><rect x="79.6634%" y="693" width="0.6931%" height="15" fill="rgb(205,22,4)"/><text x="79.9134%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (29 samples, 0.57%)</title><rect x="79.7822%" y="677" width="0.5743%" height="15" fill="rgb(206,3,8)"/><text x="80.0322%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (23 samples, 0.46%)</title><rect x="79.9010%" y="661" width="0.4554%" height="15" fill="rgb(251,23,15)"/><text x="80.1510%" y="671.50"></text></g><g><title>alloc::fmt::format (21 samples, 0.42%)</title><rect x="80.5743%" y="645" width="0.4158%" height="15" fill="rgb(252,88,28)"/><text x="80.8243%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (17 samples, 0.34%)</title><rect x="80.6535%" y="629" width="0.3366%" height="15" fill="rgb(212,127,14)"/><text x="80.9035%" y="639.50"></text></g><g><title>core::fmt::write (17 samples, 0.34%)</title><rect x="80.6535%" y="613" width="0.3366%" height="15" fill="rgb(247,145,37)"/><text x="80.9035%" y="623.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::fmt::Display&gt;::fmt (14 samples, 0.28%)</title><rect x="80.7129%" y="597" width="0.2772%" height="15" fill="rgb(209,117,53)"/><text x="80.9629%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (14 samples, 0.28%)</title><rect x="80.7129%" y="581" width="0.2772%" height="15" fill="rgb(212,90,42)"/><text x="80.9629%" y="591.50"></text></g><g><title>core::fmt::write (14 samples, 0.28%)</title><rect x="80.7129%" y="565" width="0.2772%" height="15" fill="rgb(218,164,37)"/><text x="80.9629%" y="575.50"></text></g><g><title>&lt;sql_parser::tokenizer::Word as core::fmt::Display&gt;::fmt (13 samples, 0.26%)</title><rect x="80.7327%" y="549" width="0.2574%" height="15" fill="rgb(246,65,34)"/><text x="80.9827%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (12 samples, 0.24%)</title><rect x="80.7525%" y="533" width="0.2376%" height="15" fill="rgb(231,100,33)"/><text x="81.0025%" y="543.50"></text></g><g><title>core::fmt::write (12 samples, 0.24%)</title><rect x="80.7525%" y="517" width="0.2376%" height="15" fill="rgb(228,126,14)"/><text x="81.0025%" y="527.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (74 samples, 1.47%)</title><rect x="79.5644%" y="741" width="1.4653%" height="15" fill="rgb(215,173,21)"/><text x="79.8144%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (69 samples, 1.37%)</title><rect x="79.6634%" y="725" width="1.3663%" height="15" fill="rgb(210,6,40)"/><text x="79.9134%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (69 samples, 1.37%)</title><rect x="79.6634%" y="709" width="1.3663%" height="15" fill="rgb(212,48,18)"/><text x="79.9134%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (34 samples, 0.67%)</title><rect x="80.3564%" y="693" width="0.6733%" height="15" fill="rgb(230,214,11)"/><text x="80.6064%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (33 samples, 0.65%)</title><rect x="80.3762%" y="677" width="0.6535%" height="15" fill="rgb(254,105,39)"/><text x="80.6262%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (27 samples, 0.53%)</title><rect x="80.4950%" y="661" width="0.5347%" height="15" fill="rgb(245,158,5)"/><text x="80.7450%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (24 samples, 0.48%)</title><rect x="81.0495%" y="661" width="0.4752%" height="15" fill="rgb(249,208,11)"/><text x="81.2995%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="81.3861%" y="645" width="0.1386%" height="15" fill="rgb(210,39,28)"/><text x="81.6361%" y="655.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.14%)</title><rect x="81.3861%" y="629" width="0.1386%" height="15" fill="rgb(211,56,53)"/><text x="81.6361%" y="639.50"></text></g><g><title>_int_realloc (7 samples, 0.14%)</title><rect x="81.3861%" y="613" width="0.1386%" height="15" fill="rgb(226,201,30)"/><text x="81.6361%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (8 samples, 0.16%)</title><rect x="81.5248%" y="661" width="0.1584%" height="15" fill="rgb(239,101,34)"/><text x="81.7748%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (47 samples, 0.93%)</title><rect x="81.0297%" y="677" width="0.9307%" height="15" fill="rgb(226,209,5)"/><text x="81.2797%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (14 samples, 0.28%)</title><rect x="81.6832%" y="661" width="0.2772%" height="15" fill="rgb(250,105,47)"/><text x="81.9332%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.16%)</title><rect x="81.8020%" y="645" width="0.1584%" height="15" fill="rgb(230,72,3)"/><text x="82.0520%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (58 samples, 1.15%)</title><rect x="81.0297%" y="741" width="1.1485%" height="15" fill="rgb(232,218,39)"/><text x="81.2797%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (58 samples, 1.15%)</title><rect x="81.0297%" y="725" width="1.1485%" height="15" fill="rgb(248,166,6)"/><text x="81.2797%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (58 samples, 1.15%)</title><rect x="81.0297%" y="709" width="1.1485%" height="15" fill="rgb(247,89,20)"/><text x="81.2797%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (58 samples, 1.15%)</title><rect x="81.0297%" y="693" width="1.1485%" height="15" fill="rgb(248,130,54)"/><text x="81.2797%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (11 samples, 0.22%)</title><rect x="81.9604%" y="677" width="0.2178%" height="15" fill="rgb(234,196,4)"/><text x="82.2104%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (16 samples, 0.32%)</title><rect x="82.2772%" y="693" width="0.3168%" height="15" fill="rgb(250,143,31)"/><text x="82.5272%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (10 samples, 0.20%)</title><rect x="82.8911%" y="677" width="0.1980%" height="15" fill="rgb(211,110,34)"/><text x="83.1411%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::get_next_precedence (8 samples, 0.16%)</title><rect x="82.9307%" y="661" width="0.1584%" height="15" fill="rgb(215,124,48)"/><text x="83.1807%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="83.5446%" y="661" width="0.1188%" height="15" fill="rgb(216,46,13)"/><text x="83.7946%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="83.5446%" y="645" width="0.1188%" height="15" fill="rgb(205,184,25)"/><text x="83.7946%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="83.5446%" y="629" width="0.1188%" height="15" fill="rgb(228,1,10)"/><text x="83.7946%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="83.5446%" y="613" width="0.1188%" height="15" fill="rgb(213,116,27)"/><text x="83.7946%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="83.5446%" y="597" width="0.1188%" height="15" fill="rgb(241,95,50)"/><text x="83.7946%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="83.5446%" y="581" width="0.1188%" height="15" fill="rgb(238,48,32)"/><text x="83.7946%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="83.5446%" y="565" width="0.1188%" height="15" fill="rgb(235,113,49)"/><text x="83.7946%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="83.5446%" y="549" width="0.1188%" height="15" fill="rgb(205,127,43)"/><text x="83.7946%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="83.5446%" y="533" width="0.1188%" height="15" fill="rgb(250,162,2)"/><text x="83.7946%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.12%)</title><rect x="83.5446%" y="517" width="0.1188%" height="15" fill="rgb(220,13,41)"/><text x="83.7946%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.12%)</title><rect x="83.5446%" y="501" width="0.1188%" height="15" fill="rgb(249,221,25)"/><text x="83.7946%" y="511.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.12%)</title><rect x="83.5446%" y="485" width="0.1188%" height="15" fill="rgb(215,208,19)"/><text x="83.7946%" y="495.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="83.5446%" y="469" width="0.1188%" height="15" fill="rgb(236,175,2)"/><text x="83.7946%" y="479.50"></text></g><g><title>__memcmp_avx2_movbe (16 samples, 0.32%)</title><rect x="83.6634%" y="661" width="0.3168%" height="15" fill="rgb(241,52,2)"/><text x="83.9134%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (46 samples, 0.91%)</title><rect x="83.0891%" y="677" width="0.9109%" height="15" fill="rgb(248,140,14)"/><text x="83.3391%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_optional_alias (10 samples, 0.20%)</title><rect x="84.0000%" y="677" width="0.1980%" height="15" fill="rgb(253,22,42)"/><text x="84.2500%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (116 samples, 2.30%)</title><rect x="82.1782%" y="741" width="2.2970%" height="15" fill="rgb(234,61,47)"/><text x="82.4282%" y="751.50">s..</text></g><g><title>sql_parser::parser::Parser::check_descent (116 samples, 2.30%)</title><rect x="82.1782%" y="725" width="2.2970%" height="15" fill="rgb(208,226,15)"/><text x="82.4282%" y="735.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (115 samples, 2.28%)</title><rect x="82.1980%" y="709" width="2.2772%" height="15" fill="rgb(217,221,4)"/><text x="82.4480%" y="719.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_select (95 samples, 1.88%)</title><rect x="82.5941%" y="693" width="1.8812%" height="15" fill="rgb(212,174,34)"/><text x="82.8441%" y="703.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (14 samples, 0.28%)</title><rect x="84.1980%" y="677" width="0.2772%" height="15" fill="rgb(253,83,4)"/><text x="84.4480%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (10 samples, 0.20%)</title><rect x="84.2772%" y="661" width="0.1980%" height="15" fill="rgb(250,195,49)"/><text x="84.5272%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (16 samples, 0.32%)</title><rect x="85.1089%" y="677" width="0.3168%" height="15" fill="rgb(241,192,25)"/><text x="85.3589%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (46 samples, 0.91%)</title><rect x="84.5347%" y="709" width="0.9109%" height="15" fill="rgb(208,124,10)"/><text x="84.7847%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (36 samples, 0.71%)</title><rect x="84.7327%" y="693" width="0.7129%" height="15" fill="rgb(222,33,0)"/><text x="84.9827%" y="703.50"></text></g><g><title>sql_parser::parser::parse_statements (48 samples, 0.95%)</title><rect x="84.5149%" y="741" width="0.9505%" height="15" fill="rgb(234,209,28)"/><text x="84.7649%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (47 samples, 0.93%)</title><rect x="84.5347%" y="725" width="0.9307%" height="15" fill="rgb(224,11,23)"/><text x="84.7847%" y="735.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (7 samples, 0.14%)</title><rect x="85.6040%" y="597" width="0.1386%" height="15" fill="rgb(232,99,1)"/><text x="85.8540%" y="607.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (7 samples, 0.14%)</title><rect x="85.6040%" y="581" width="0.1386%" height="15" fill="rgb(237,95,45)"/><text x="85.8540%" y="591.50"></text></g><g><title>start_thread (8 samples, 0.16%)</title><rect x="85.6040%" y="741" width="0.1584%" height="15" fill="rgb(208,109,11)"/><text x="85.8540%" y="751.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8 samples, 0.16%)</title><rect x="85.6040%" y="725" width="0.1584%" height="15" fill="rgb(216,190,48)"/><text x="85.8540%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (8 samples, 0.16%)</title><rect x="85.6040%" y="709" width="0.1584%" height="15" fill="rgb(251,171,36)"/><text x="85.8540%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (8 samples, 0.16%)</title><rect x="85.6040%" y="693" width="0.1584%" height="15" fill="rgb(230,62,22)"/><text x="85.8540%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (8 samples, 0.16%)</title><rect x="85.6040%" y="677" width="0.1584%" height="15" fill="rgb(225,114,35)"/><text x="85.8540%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.16%)</title><rect x="85.6040%" y="661" width="0.1584%" height="15" fill="rgb(215,118,42)"/><text x="85.8540%" y="671.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (8 samples, 0.16%)</title><rect x="85.6040%" y="645" width="0.1584%" height="15" fill="rgb(243,119,21)"/><text x="85.8540%" y="655.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (8 samples, 0.16%)</title><rect x="85.6040%" y="629" width="0.1584%" height="15" fill="rgb(252,177,53)"/><text x="85.8540%" y="639.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (8 samples, 0.16%)</title><rect x="85.6040%" y="613" width="0.1584%" height="15" fill="rgb(237,209,29)"/><text x="85.8540%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (6 samples, 0.12%)</title><rect x="85.7822%" y="741" width="0.1188%" height="15" fill="rgb(212,65,23)"/><text x="86.0322%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.12%)</title><rect x="85.7822%" y="725" width="0.1188%" height="15" fill="rgb(230,222,46)"/><text x="86.0322%" y="735.50"></text></g><g><title>lobsters_microbenchmarks::main (6 samples, 0.12%)</title><rect x="85.7822%" y="709" width="0.1188%" height="15" fill="rgb(215,135,32)"/><text x="86.0322%" y="719.50"></text></g><g><title>lobsters_microbenchmarks::queriers::frontpage::query_frontpage (6 samples, 0.12%)</title><rect x="85.7822%" y="693" width="0.1188%" height="15" fill="rgb(246,101,22)"/><text x="86.0322%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.14%)</title><rect x="85.9604%" y="597" width="0.1386%" height="15" fill="rgb(206,107,13)"/><text x="86.2104%" y="607.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 0.22%)</title><rect x="85.9010%" y="741" width="0.2178%" height="15" fill="rgb(250,100,44)"/><text x="86.1510%" y="751.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 0.22%)</title><rect x="85.9010%" y="725" width="0.2178%" height="15" fill="rgb(231,147,38)"/><text x="86.1510%" y="735.50"></text></g><g><title>std::panicking::try (11 samples, 0.22%)</title><rect x="85.9010%" y="709" width="0.2178%" height="15" fill="rgb(229,8,40)"/><text x="86.1510%" y="719.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 0.22%)</title><rect x="85.9010%" y="693" width="0.2178%" height="15" fill="rgb(221,135,30)"/><text x="86.1510%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 0.22%)</title><rect x="85.9010%" y="677" width="0.2178%" height="15" fill="rgb(249,193,18)"/><text x="86.1510%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11 samples, 0.22%)</title><rect x="85.9010%" y="661" width="0.2178%" height="15" fill="rgb(209,133,39)"/><text x="86.1510%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 0.22%)</title><rect x="85.9010%" y="645" width="0.2178%" height="15" fill="rgb(232,100,14)"/><text x="86.1510%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (11 samples, 0.22%)</title><rect x="85.9010%" y="629" width="0.2178%" height="15" fill="rgb(224,185,1)"/><text x="86.1510%" y="639.50"></text></g><g><title>lobsters_microbenchmarks::queriers::frontpage::query_frontpage (8 samples, 0.16%)</title><rect x="85.9604%" y="613" width="0.1584%" height="15" fill="rgb(223,139,8)"/><text x="86.2104%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.14%)</title><rect x="86.1188%" y="533" width="0.1386%" height="15" fill="rgb(232,213,38)"/><text x="86.3688%" y="543.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (7 samples, 0.14%)</title><rect x="86.1188%" y="517" width="0.1386%" height="15" fill="rgb(207,94,22)"/><text x="86.3688%" y="527.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.14%)</title><rect x="86.1188%" y="501" width="0.1386%" height="15" fill="rgb(219,183,54)"/><text x="86.3688%" y="511.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.12%)</title><rect x="86.1386%" y="485" width="0.1188%" height="15" fill="rgb(216,185,54)"/><text x="86.3886%" y="495.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 0.18%)</title><rect x="86.1188%" y="741" width="0.1782%" height="15" fill="rgb(254,217,39)"/><text x="86.3688%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.18%)</title><rect x="86.1188%" y="725" width="0.1782%" height="15" fill="rgb(240,178,23)"/><text x="86.3688%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (9 samples, 0.18%)</title><rect x="86.1188%" y="709" width="0.1782%" height="15" fill="rgb(218,11,47)"/><text x="86.3688%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9 samples, 0.18%)</title><rect x="86.1188%" y="693" width="0.1782%" height="15" fill="rgb(218,51,51)"/><text x="86.3688%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 0.18%)</title><rect x="86.1188%" y="677" width="0.1782%" height="15" fill="rgb(238,126,27)"/><text x="86.3688%" y="687.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (9 samples, 0.18%)</title><rect x="86.1188%" y="661" width="0.1782%" height="15" fill="rgb(249,202,22)"/><text x="86.3688%" y="671.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (9 samples, 0.18%)</title><rect x="86.1188%" y="645" width="0.1782%" height="15" fill="rgb(254,195,49)"/><text x="86.3688%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (9 samples, 0.18%)</title><rect x="86.1188%" y="629" width="0.1782%" height="15" fill="rgb(208,123,14)"/><text x="86.3688%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (9 samples, 0.18%)</title><rect x="86.1188%" y="613" width="0.1782%" height="15" fill="rgb(224,200,8)"/><text x="86.3688%" y="623.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (9 samples, 0.18%)</title><rect x="86.1188%" y="597" width="0.1782%" height="15" fill="rgb(217,61,36)"/><text x="86.3688%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.18%)</title><rect x="86.1188%" y="581" width="0.1782%" height="15" fill="rgb(206,35,45)"/><text x="86.3688%" y="591.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="86.1188%" y="565" width="0.1782%" height="15" fill="rgb(217,65,33)"/><text x="86.3688%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="86.1188%" y="549" width="0.1782%" height="15" fill="rgb(222,158,48)"/><text x="86.3688%" y="559.50"></text></g><g><title>[unknown] (3,926 samples, 77.74%)</title><rect x="8.6733%" y="757" width="77.7426%" height="15" fill="rgb(254,2,54)"/><text x="8.9233%" y="767.50">[unknown]</text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="86.8119%" y="549" width="0.1188%" height="15" fill="rgb(250,143,38)"/><text x="87.0619%" y="559.50"></text></g><g><title>malloc_consolidate (6 samples, 0.12%)</title><rect x="86.8119%" y="533" width="0.1188%" height="15" fill="rgb(248,25,0)"/><text x="87.0619%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.53%)</title><rect x="86.7327%" y="597" width="0.5347%" height="15" fill="rgb(206,152,27)"/><text x="86.9827%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.53%)</title><rect x="86.7327%" y="581" width="0.5347%" height="15" fill="rgb(240,77,30)"/><text x="86.9827%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (26 samples, 0.51%)</title><rect x="86.7525%" y="565" width="0.5149%" height="15" fill="rgb(231,5,3)"/><text x="87.0025%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.34%)</title><rect x="86.9307%" y="549" width="0.3366%" height="15" fill="rgb(207,226,32)"/><text x="87.1807%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.20%)</title><rect x="87.0693%" y="533" width="0.1980%" height="15" fill="rgb(222,207,47)"/><text x="87.3193%" y="543.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="87.3465%" y="565" width="0.1782%" height="15" fill="rgb(229,115,45)"/><text x="87.5965%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.24%)</title><rect x="87.3069%" y="581" width="0.2376%" height="15" fill="rgb(224,191,6)"/><text x="87.5569%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.14%)</title><rect x="87.5842%" y="565" width="0.1386%" height="15" fill="rgb(230,227,24)"/><text x="87.8342%" y="575.50"></text></g><g><title>mysql_common::io::WriteMysqlExt::write_lenenc_int (6 samples, 0.12%)</title><rect x="87.7822%" y="533" width="0.1188%" height="15" fill="rgb(228,80,19)"/><text x="88.0322%" y="543.50"></text></g><g><title>msql_srv::resultset::QueryResultWriter&lt;W&gt;::start (13 samples, 0.26%)</title><rect x="87.7822%" y="565" width="0.2574%" height="15" fill="rgb(247,229,0)"/><text x="88.0322%" y="575.50"></text></g><g><title>msql_srv::writers::column_definitions (13 samples, 0.26%)</title><rect x="87.7822%" y="549" width="0.2574%" height="15" fill="rgb(237,194,15)"/><text x="88.0322%" y="559.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.14%)</title><rect x="87.9010%" y="533" width="0.1386%" height="15" fill="rgb(219,203,20)"/><text x="88.1510%" y="543.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (8 samples, 0.16%)</title><rect x="88.1386%" y="533" width="0.1584%" height="15" fill="rgb(234,128,8)"/><text x="88.3886%" y="543.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (13 samples, 0.26%)</title><rect x="88.1188%" y="549" width="0.2574%" height="15" fill="rgb(248,202,8)"/><text x="88.3688%" y="559.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (57 samples, 1.13%)</title><rect x="87.2673%" y="597" width="1.1287%" height="15" fill="rgb(206,104,37)"/><text x="87.5173%" y="607.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (43 samples, 0.85%)</title><rect x="87.5446%" y="581" width="0.8515%" height="15" fill="rgb(223,8,27)"/><text x="87.7946%" y="591.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (15 samples, 0.30%)</title><rect x="88.0990%" y="565" width="0.2970%" height="15" fill="rgb(216,217,28)"/><text x="88.3490%" y="575.50"></text></g><g><title>decor_mem::stats::get_qtype (18 samples, 0.36%)</title><rect x="88.3960%" y="597" width="0.3564%" height="15" fill="rgb(249,199,1)"/><text x="88.6460%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.32%)</title><rect x="88.4356%" y="581" width="0.3168%" height="15" fill="rgb(240,85,17)"/><text x="88.6856%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.32%)</title><rect x="88.4356%" y="565" width="0.3168%" height="15" fill="rgb(206,108,45)"/><text x="88.6856%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.32%)</title><rect x="88.4356%" y="549" width="0.3168%" height="15" fill="rgb(245,210,41)"/><text x="88.6856%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.28%)</title><rect x="88.4752%" y="533" width="0.2772%" height="15" fill="rgb(206,13,37)"/><text x="88.7252%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="88.6139%" y="517" width="0.1386%" height="15" fill="rgb(250,61,18)"/><text x="88.8639%" y="527.50"></text></g><g><title>log::__private_api_log (7 samples, 0.14%)</title><rect x="88.7525%" y="597" width="0.1386%" height="15" fill="rgb(235,172,48)"/><text x="89.0025%" y="607.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (7 samples, 0.14%)</title><rect x="88.7525%" y="581" width="0.1386%" height="15" fill="rgb(249,201,17)"/><text x="89.0025%" y="591.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (7 samples, 0.14%)</title><rect x="88.7525%" y="565" width="0.1386%" height="15" fill="rgb(219,208,6)"/><text x="89.0025%" y="575.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (6 samples, 0.12%)</title><rect x="88.7723%" y="549" width="0.1188%" height="15" fill="rgb(248,31,23)"/><text x="89.0223%" y="559.50"></text></g><g><title>std::io::stdio::_eprint (6 samples, 0.12%)</title><rect x="88.7723%" y="533" width="0.1188%" height="15" fill="rgb(245,15,42)"/><text x="89.0223%" y="543.50"></text></g><g><title>std::io::stdio::print_to (6 samples, 0.12%)</title><rect x="88.7723%" y="517" width="0.1188%" height="15" fill="rgb(222,217,39)"/><text x="89.0223%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (6 samples, 0.12%)</title><rect x="88.7723%" y="501" width="0.1188%" height="15" fill="rgb(210,219,27)"/><text x="89.0223%" y="511.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (6 samples, 0.12%)</title><rect x="88.7723%" y="485" width="0.1188%" height="15" fill="rgb(252,166,36)"/><text x="89.0223%" y="495.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (6 samples, 0.12%)</title><rect x="88.7723%" y="469" width="0.1188%" height="15" fill="rgb(245,132,34)"/><text x="89.0223%" y="479.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (6 samples, 0.12%)</title><rect x="88.7723%" y="453" width="0.1188%" height="15" fill="rgb(236,54,3)"/><text x="89.0223%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (6 samples, 0.12%)</title><rect x="88.7723%" y="437" width="0.1188%" height="15" fill="rgb(241,173,43)"/><text x="89.0223%" y="447.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="88.7723%" y="421" width="0.1188%" height="15" fill="rgb(215,190,9)"/><text x="89.0223%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="88.7723%" y="405" width="0.1188%" height="15" fill="rgb(242,101,16)"/><text x="89.0223%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (6 samples, 0.12%)</title><rect x="88.7723%" y="389" width="0.1188%" height="15" fill="rgb(223,190,21)"/><text x="89.0223%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (6 samples, 0.12%)</title><rect x="88.7723%" y="373" width="0.1188%" height="15" fill="rgb(215,228,25)"/><text x="89.0223%" y="383.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.12%)</title><rect x="88.7723%" y="357" width="0.1188%" height="15" fill="rgb(225,36,22)"/><text x="89.0223%" y="367.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (6 samples, 0.12%)</title><rect x="88.7723%" y="341" width="0.1188%" height="15" fill="rgb(251,106,46)"/><text x="89.0223%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (6 samples, 0.12%)</title><rect x="88.7723%" y="325" width="0.1188%" height="15" fill="rgb(208,90,1)"/><text x="89.0223%" y="335.50"></text></g><g><title>__libc_write (6 samples, 0.12%)</title><rect x="88.7723%" y="309" width="0.1188%" height="15" fill="rgb(243,10,4)"/><text x="89.0223%" y="319.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="88.7723%" y="293" width="0.1188%" height="15" fill="rgb(212,137,27)"/><text x="89.0223%" y="303.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="88.7723%" y="277" width="0.1188%" height="15" fill="rgb(231,220,49)"/><text x="89.0223%" y="287.50"></text></g><g><title>ksys_write (6 samples, 0.12%)</title><rect x="88.7723%" y="261" width="0.1188%" height="15" fill="rgb(237,96,20)"/><text x="89.0223%" y="271.50"></text></g><g><title>vfs_write (6 samples, 0.12%)</title><rect x="88.7723%" y="245" width="0.1188%" height="15" fill="rgb(239,229,30)"/><text x="89.0223%" y="255.50"></text></g><g><title>tty_write (6 samples, 0.12%)</title><rect x="88.7723%" y="229" width="0.1188%" height="15" fill="rgb(219,65,33)"/><text x="89.0223%" y="239.50"></text></g><g><title>n_tty_write (6 samples, 0.12%)</title><rect x="88.7723%" y="213" width="0.1188%" height="15" fill="rgb(243,134,7)"/><text x="89.0223%" y="223.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (118 samples, 2.34%)</title><rect x="86.6139%" y="613" width="2.3366%" height="15" fill="rgb(216,177,54)"/><text x="86.8639%" y="623.50">&lt;..</text></g><g><title>__GI___libc_free (7 samples, 0.14%)</title><rect x="89.3069%" y="501" width="0.1386%" height="15" fill="rgb(211,160,20)"/><text x="89.5569%" y="511.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="89.4455%" y="501" width="0.1584%" height="15" fill="rgb(239,85,39)"/><text x="89.6955%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.16%)</title><rect x="89.8812%" y="485" width="0.1584%" height="15" fill="rgb(232,125,22)"/><text x="90.1312%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (24 samples, 0.48%)</title><rect x="89.6040%" y="501" width="0.4752%" height="15" fill="rgb(244,57,34)"/><text x="89.8540%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 1.15%)</title><rect x="88.9505%" y="581" width="1.1485%" height="15" fill="rgb(214,203,32)"/><text x="89.2005%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (53 samples, 1.05%)</title><rect x="89.0495%" y="565" width="1.0495%" height="15" fill="rgb(207,58,43)"/><text x="89.2995%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (50 samples, 0.99%)</title><rect x="89.1089%" y="549" width="0.9901%" height="15" fill="rgb(215,193,15)"/><text x="89.3589%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (48 samples, 0.95%)</title><rect x="89.1485%" y="533" width="0.9505%" height="15" fill="rgb(232,15,44)"/><text x="89.3985%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.81%)</title><rect x="89.2871%" y="517" width="0.8119%" height="15" fill="rgb(212,3,48)"/><text x="89.5371%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (79 samples, 1.56%)</title><rect x="88.9505%" y="613" width="1.5644%" height="15" fill="rgb(218,128,7)"/><text x="89.2005%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (79 samples, 1.56%)</title><rect x="88.9505%" y="597" width="1.5644%" height="15" fill="rgb(226,216,39)"/><text x="89.2005%" y="607.50"></text></g><g><title>decor_mem::stats::print_stats (19 samples, 0.38%)</title><rect x="90.1386%" y="581" width="0.3762%" height="15" fill="rgb(243,47,51)"/><text x="90.3886%" y="591.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (19 samples, 0.38%)</title><rect x="90.1386%" y="565" width="0.3762%" height="15" fill="rgb(241,183,40)"/><text x="90.3886%" y="575.50"></text></g><g><title>std::sys::unix::fs::File::write (19 samples, 0.38%)</title><rect x="90.1386%" y="549" width="0.3762%" height="15" fill="rgb(231,217,32)"/><text x="90.3886%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (19 samples, 0.38%)</title><rect x="90.1386%" y="533" width="0.3762%" height="15" fill="rgb(229,61,38)"/><text x="90.3886%" y="543.50"></text></g><g><title>__libc_write (19 samples, 0.38%)</title><rect x="90.1386%" y="517" width="0.3762%" height="15" fill="rgb(225,210,5)"/><text x="90.3886%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (19 samples, 0.38%)</title><rect x="90.1386%" y="501" width="0.3762%" height="15" fill="rgb(231,79,45)"/><text x="90.3886%" y="511.50"></text></g><g><title>do_syscall_64 (18 samples, 0.36%)</title><rect x="90.1584%" y="485" width="0.3564%" height="15" fill="rgb(224,100,7)"/><text x="90.4084%" y="495.50"></text></g><g><title>ksys_write (16 samples, 0.32%)</title><rect x="90.1980%" y="469" width="0.3168%" height="15" fill="rgb(241,198,18)"/><text x="90.4480%" y="479.50"></text></g><g><title>vfs_write (13 samples, 0.26%)</title><rect x="90.2574%" y="453" width="0.2574%" height="15" fill="rgb(252,97,53)"/><text x="90.5074%" y="463.50"></text></g><g><title>new_sync_write (13 samples, 0.26%)</title><rect x="90.2574%" y="437" width="0.2574%" height="15" fill="rgb(220,88,7)"/><text x="90.5074%" y="447.50"></text></g><g><title>ext4_buffered_write_iter (13 samples, 0.26%)</title><rect x="90.2574%" y="421" width="0.2574%" height="15" fill="rgb(213,176,14)"/><text x="90.5074%" y="431.50"></text></g><g><title>generic_perform_write (13 samples, 0.26%)</title><rect x="90.2574%" y="405" width="0.2574%" height="15" fill="rgb(246,73,7)"/><text x="90.5074%" y="415.50"></text></g><g><title>ext4_da_write_end (9 samples, 0.18%)</title><rect x="90.3366%" y="389" width="0.1782%" height="15" fill="rgb(245,64,36)"/><text x="90.5866%" y="399.50"></text></g><g><title>generic_write_end (6 samples, 0.12%)</title><rect x="90.3960%" y="373" width="0.1188%" height="15" fill="rgb(245,80,10)"/><text x="90.6460%" y="383.50"></text></g><g><title>dequeue_task_fair (8 samples, 0.16%)</title><rect x="91.1089%" y="325" width="0.1584%" height="15" fill="rgb(232,107,50)"/><text x="91.3589%" y="335.50"></text></g><g><title>dequeue_entity (7 samples, 0.14%)</title><rect x="91.1287%" y="309" width="0.1386%" height="15" fill="rgb(253,3,0)"/><text x="91.3787%" y="319.50"></text></g><g><title>sk_wait_data (38 samples, 0.75%)</title><rect x="90.8317%" y="405" width="0.7525%" height="15" fill="rgb(212,99,53)"/><text x="91.0817%" y="415.50"></text></g><g><title>wait_woken (32 samples, 0.63%)</title><rect x="90.9505%" y="389" width="0.6337%" height="15" fill="rgb(249,111,54)"/><text x="91.2005%" y="399.50"></text></g><g><title>schedule_timeout (32 samples, 0.63%)</title><rect x="90.9505%" y="373" width="0.6337%" height="15" fill="rgb(249,55,30)"/><text x="91.2005%" y="383.50"></text></g><g><title>schedule (30 samples, 0.59%)</title><rect x="90.9901%" y="357" width="0.5941%" height="15" fill="rgb(237,47,42)"/><text x="91.2401%" y="367.50"></text></g><g><title>__schedule (30 samples, 0.59%)</title><rect x="90.9901%" y="341" width="0.5941%" height="15" fill="rgb(211,20,18)"/><text x="91.2401%" y="351.50"></text></g><g><title>skb_copy_datagram_iter (6 samples, 0.12%)</title><rect x="91.5842%" y="405" width="0.1188%" height="15" fill="rgb(231,203,46)"/><text x="91.8342%" y="415.50"></text></g><g><title>inet_recvmsg (54 samples, 1.07%)</title><rect x="90.6535%" y="437" width="1.0693%" height="15" fill="rgb(237,142,3)"/><text x="90.9035%" y="447.50"></text></g><g><title>tcp_recvmsg (53 samples, 1.05%)</title><rect x="90.6733%" y="421" width="1.0495%" height="15" fill="rgb(241,107,1)"/><text x="90.9233%" y="431.50"></text></g><g><title>__x64_sys_recvfrom (56 samples, 1.11%)</title><rect x="90.6337%" y="469" width="1.1089%" height="15" fill="rgb(229,83,13)"/><text x="90.8837%" y="479.50"></text></g><g><title>__sys_recvfrom (56 samples, 1.11%)</title><rect x="90.6337%" y="453" width="1.1089%" height="15" fill="rgb(241,91,40)"/><text x="90.8837%" y="463.50"></text></g><g><title>do_syscall_64 (58 samples, 1.15%)</title><rect x="90.6139%" y="485" width="1.1485%" height="15" fill="rgb(225,3,45)"/><text x="90.8639%" y="495.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (66 samples, 1.31%)</title><rect x="90.5545%" y="597" width="1.3069%" height="15" fill="rgb(244,223,14)"/><text x="90.8045%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (66 samples, 1.31%)</title><rect x="90.5545%" y="581" width="1.3069%" height="15" fill="rgb(224,124,37)"/><text x="90.8045%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (66 samples, 1.31%)</title><rect x="90.5545%" y="565" width="1.3069%" height="15" fill="rgb(251,171,30)"/><text x="90.8045%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (66 samples, 1.31%)</title><rect x="90.5545%" y="549" width="1.3069%" height="15" fill="rgb(236,46,54)"/><text x="90.8045%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (66 samples, 1.31%)</title><rect x="90.5545%" y="533" width="1.3069%" height="15" fill="rgb(245,213,5)"/><text x="90.8045%" y="543.50"></text></g><g><title>__libc_recv (66 samples, 1.31%)</title><rect x="90.5545%" y="517" width="1.3069%" height="15" fill="rgb(230,144,27)"/><text x="90.8045%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (64 samples, 1.27%)</title><rect x="90.5941%" y="501" width="1.2673%" height="15" fill="rgb(220,86,6)"/><text x="90.8441%" y="511.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (69 samples, 1.37%)</title><rect x="90.5545%" y="613" width="1.3663%" height="15" fill="rgb(240,20,13)"/><text x="90.8045%" y="623.50"></text></g><g><title>__dev_queue_xmit (10 samples, 0.20%)</title><rect x="92.2970%" y="341" width="0.1980%" height="15" fill="rgb(217,89,34)"/><text x="92.5470%" y="351.50"></text></g><g><title>enqueue_task_fair (8 samples, 0.16%)</title><rect x="93.1881%" y="53" width="0.1584%" height="15" fill="rgb(229,13,5)"/><text x="93.4381%" y="63.50"></text></g><g><title>enqueue_entity (7 samples, 0.14%)</title><rect x="93.2079%" y="37" width="0.1386%" height="15" fill="rgb(244,67,35)"/><text x="93.4579%" y="47.50"></text></g><g><title>__wake_up_common (18 samples, 0.36%)</title><rect x="93.0693%" y="85" width="0.3564%" height="15" fill="rgb(221,40,2)"/><text x="93.3193%" y="95.50"></text></g><g><title>try_to_wake_up (18 samples, 0.36%)</title><rect x="93.0693%" y="69" width="0.3564%" height="15" fill="rgb(237,157,21)"/><text x="93.3193%" y="79.50"></text></g><g><title>sock_def_readable (19 samples, 0.38%)</title><rect x="93.0693%" y="117" width="0.3762%" height="15" fill="rgb(222,94,11)"/><text x="93.3193%" y="127.50"></text></g><g><title>__wake_up_common_lock (19 samples, 0.38%)</title><rect x="93.0693%" y="101" width="0.3762%" height="15" fill="rgb(249,113,6)"/><text x="93.3193%" y="111.50"></text></g><g><title>tcp_ack (7 samples, 0.14%)</title><rect x="93.4455%" y="117" width="0.1386%" height="15" fill="rgb(238,137,36)"/><text x="93.6955%" y="127.50"></text></g><g><title>ip_local_deliver (51 samples, 1.01%)</title><rect x="92.6931%" y="213" width="1.0099%" height="15" fill="rgb(210,102,26)"/><text x="92.9431%" y="223.50"></text></g><g><title>ip_local_deliver_finish (51 samples, 1.01%)</title><rect x="92.6931%" y="197" width="1.0099%" height="15" fill="rgb(218,30,30)"/><text x="92.9431%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (51 samples, 1.01%)</title><rect x="92.6931%" y="181" width="1.0099%" height="15" fill="rgb(214,67,26)"/><text x="92.9431%" y="191.50"></text></g><g><title>tcp_v4_rcv (49 samples, 0.97%)</title><rect x="92.7327%" y="165" width="0.9703%" height="15" fill="rgb(251,9,53)"/><text x="92.9827%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (39 samples, 0.77%)</title><rect x="92.9307%" y="149" width="0.7723%" height="15" fill="rgb(228,204,25)"/><text x="93.1807%" y="159.50"></text></g><g><title>tcp_rcv_established (39 samples, 0.77%)</title><rect x="92.9307%" y="133" width="0.7723%" height="15" fill="rgb(207,153,8)"/><text x="93.1807%" y="143.50"></text></g><g><title>__netif_receive_skb_one_core (55 samples, 1.09%)</title><rect x="92.6337%" y="245" width="1.0891%" height="15" fill="rgb(242,9,16)"/><text x="92.8837%" y="255.50"></text></g><g><title>ip_rcv (52 samples, 1.03%)</title><rect x="92.6931%" y="229" width="1.0297%" height="15" fill="rgb(217,211,10)"/><text x="92.9431%" y="239.50"></text></g><g><title>__local_bh_enable_ip (65 samples, 1.29%)</title><rect x="92.4950%" y="341" width="1.2871%" height="15" fill="rgb(219,228,52)"/><text x="92.7450%" y="351.50"></text></g><g><title>do_softirq (65 samples, 1.29%)</title><rect x="92.4950%" y="325" width="1.2871%" height="15" fill="rgb(231,92,29)"/><text x="92.7450%" y="335.50"></text></g><g><title>do_softirq_own_stack (64 samples, 1.27%)</title><rect x="92.5149%" y="309" width="1.2673%" height="15" fill="rgb(232,8,23)"/><text x="92.7649%" y="319.50"></text></g><g><title>__do_softirq (64 samples, 1.27%)</title><rect x="92.5149%" y="293" width="1.2673%" height="15" fill="rgb(216,211,34)"/><text x="92.7649%" y="303.50"></text></g><g><title>net_rx_action (63 samples, 1.25%)</title><rect x="92.5347%" y="277" width="1.2475%" height="15" fill="rgb(236,151,0)"/><text x="92.7847%" y="287.50"></text></g><g><title>process_backlog (61 samples, 1.21%)</title><rect x="92.5743%" y="261" width="1.2079%" height="15" fill="rgb(209,168,3)"/><text x="92.8243%" y="271.50"></text></g><g><title>ip_finish_output2 (80 samples, 1.58%)</title><rect x="92.2376%" y="357" width="1.5842%" height="15" fill="rgb(208,129,28)"/><text x="92.4876%" y="367.50"></text></g><g><title>__ip_queue_xmit (85 samples, 1.68%)</title><rect x="92.1584%" y="389" width="1.6832%" height="15" fill="rgb(229,78,22)"/><text x="92.4084%" y="399.50"></text></g><g><title>ip_output (81 samples, 1.60%)</title><rect x="92.2376%" y="373" width="1.6040%" height="15" fill="rgb(228,187,13)"/><text x="92.4876%" y="383.50"></text></g><g><title>__tcp_transmit_skb (92 samples, 1.82%)</title><rect x="92.1386%" y="405" width="1.8218%" height="15" fill="rgb(240,119,24)"/><text x="92.3886%" y="415.50">_..</text></g><g><title>__tcp_push_pending_frames (100 samples, 1.98%)</title><rect x="92.0792%" y="437" width="1.9802%" height="15" fill="rgb(209,194,42)"/><text x="92.3292%" y="447.50">_..</text></g><g><title>tcp_write_xmit (100 samples, 1.98%)</title><rect x="92.0792%" y="421" width="1.9802%" height="15" fill="rgb(247,200,46)"/><text x="92.3292%" y="431.50">t..</text></g><g><title>sock_sendmsg (119 samples, 2.36%)</title><rect x="91.9406%" y="485" width="2.3564%" height="15" fill="rgb(218,76,16)"/><text x="92.1906%" y="495.50">s..</text></g><g><title>tcp_sendmsg (118 samples, 2.34%)</title><rect x="91.9604%" y="469" width="2.3366%" height="15" fill="rgb(225,21,48)"/><text x="92.2104%" y="479.50">t..</text></g><g><title>tcp_sendmsg_locked (117 samples, 2.32%)</title><rect x="91.9802%" y="453" width="2.3168%" height="15" fill="rgb(239,223,50)"/><text x="92.2302%" y="463.50">t..</text></g><g><title>do_syscall_64 (122 samples, 2.42%)</title><rect x="91.9208%" y="533" width="2.4158%" height="15" fill="rgb(244,45,21)"/><text x="92.1708%" y="543.50">do..</text></g><g><title>__x64_sys_sendto (121 samples, 2.40%)</title><rect x="91.9406%" y="517" width="2.3960%" height="15" fill="rgb(232,33,43)"/><text x="92.1906%" y="527.50">__..</text></g><g><title>__sys_sendto (121 samples, 2.40%)</title><rect x="91.9406%" y="501" width="2.3960%" height="15" fill="rgb(209,8,3)"/><text x="92.1906%" y="511.50">__..</text></g><g><title>entry_SYSCALL_64 (125 samples, 2.48%)</title><rect x="91.9208%" y="549" width="2.4752%" height="15" fill="rgb(214,25,53)"/><text x="92.1708%" y="559.50">en..</text></g><g><title>decor_mem::Shim::run_on_tcp (399 samples, 7.90%)</title><rect x="86.5347%" y="645" width="7.9010%" height="15" fill="rgb(254,186,54)"/><text x="86.7847%" y="655.50">decor_mem::..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (399 samples, 7.90%)</title><rect x="86.5347%" y="629" width="7.9010%" height="15" fill="rgb(208,174,49)"/><text x="86.7847%" y="639.50">msql_srv::M..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (127 samples, 2.51%)</title><rect x="91.9208%" y="613" width="2.5149%" height="15" fill="rgb(233,191,51)"/><text x="92.1708%" y="623.50">st..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (127 samples, 2.51%)</title><rect x="91.9208%" y="597" width="2.5149%" height="15" fill="rgb(222,134,10)"/><text x="92.1708%" y="607.50">&lt;s..</text></g><g><title>std::sys_common::net::TcpStream::write (127 samples, 2.51%)</title><rect x="91.9208%" y="581" width="2.5149%" height="15" fill="rgb(230,226,20)"/><text x="92.1708%" y="591.50">st..</text></g><g><title>__libc_send (127 samples, 2.51%)</title><rect x="91.9208%" y="565" width="2.5149%" height="15" fill="rgb(251,111,25)"/><text x="92.1708%" y="575.50">__..</text></g><g><title>__GI___clone (406 samples, 8.04%)</title><rect x="86.4158%" y="757" width="8.0396%" height="15" fill="rgb(224,40,46)"/><text x="86.6658%" y="767.50">__GI___clone</text></g><g><title>start_thread (406 samples, 8.04%)</title><rect x="86.4158%" y="741" width="8.0396%" height="15" fill="rgb(236,108,47)"/><text x="86.6658%" y="751.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (400 samples, 7.92%)</title><rect x="86.5347%" y="725" width="7.9208%" height="15" fill="rgb(234,93,0)"/><text x="86.7847%" y="735.50">std::sys::u..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (400 samples, 7.92%)</title><rect x="86.5347%" y="709" width="7.9208%" height="15" fill="rgb(224,213,32)"/><text x="86.7847%" y="719.50">&lt;alloc::box..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (400 samples, 7.92%)</title><rect x="86.5347%" y="693" width="7.9208%" height="15" fill="rgb(251,11,48)"/><text x="86.7847%" y="703.50">&lt;alloc::box..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (400 samples, 7.92%)</title><rect x="86.5347%" y="677" width="7.9208%" height="15" fill="rgb(236,173,5)"/><text x="86.7847%" y="687.50">core::ops::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (400 samples, 7.92%)</title><rect x="86.5347%" y="661" width="7.9208%" height="15" fill="rgb(230,95,12)"/><text x="86.7847%" y="671.50">std::sys_co..</text></g><g><title>__GI___sched_setaffinity_new (235 samples, 4.65%)</title><rect x="94.6337%" y="485" width="4.6535%" height="15" fill="rgb(232,209,1)"/><text x="94.8837%" y="495.50">__GI_..</text></g><g><title>entry_SYSCALL_64 (235 samples, 4.65%)</title><rect x="94.6337%" y="469" width="4.6535%" height="15" fill="rgb(232,6,1)"/><text x="94.8837%" y="479.50">entry..</text></g><g><title>do_syscall_64 (235 samples, 4.65%)</title><rect x="94.6337%" y="453" width="4.6535%" height="15" fill="rgb(210,224,50)"/><text x="94.8837%" y="463.50">do_sy..</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 4.65%)</title><rect x="94.6337%" y="437" width="4.6535%" height="15" fill="rgb(228,127,35)"/><text x="94.8837%" y="447.50">__x64..</text></g><g><title>sched_setaffinity (235 samples, 4.65%)</title><rect x="94.6337%" y="421" width="4.6535%" height="15" fill="rgb(245,102,45)"/><text x="94.8837%" y="431.50">sched..</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 4.65%)</title><rect x="94.6337%" y="405" width="4.6535%" height="15" fill="rgb(214,1,49)"/><text x="94.8837%" y="415.50">__set..</text></g><g><title>stop_one_cpu (235 samples, 4.65%)</title><rect x="94.6337%" y="389" width="4.6535%" height="15" fill="rgb(226,163,40)"/><text x="94.8837%" y="399.50">stop_..</text></g><g><title>cpu_stop_queue_work (234 samples, 4.63%)</title><rect x="94.6535%" y="373" width="4.6337%" height="15" fill="rgb(239,212,28)"/><text x="94.9035%" y="383.50">cpu_s..</text></g><g><title>preempt_schedule_thunk (234 samples, 4.63%)</title><rect x="94.6535%" y="357" width="4.6337%" height="15" fill="rgb(220,20,13)"/><text x="94.9035%" y="367.50">preem..</text></g><g><title>preempt_schedule_common (234 samples, 4.63%)</title><rect x="94.6535%" y="341" width="4.6337%" height="15" fill="rgb(210,164,35)"/><text x="94.9035%" y="351.50">preem..</text></g><g><title>__schedule (234 samples, 4.63%)</title><rect x="94.6535%" y="325" width="4.6337%" height="15" fill="rgb(248,109,41)"/><text x="94.9035%" y="335.50">__sch..</text></g><g><title>finish_task_switch (234 samples, 4.63%)</title><rect x="94.6535%" y="309" width="4.6337%" height="15" fill="rgb(238,23,50)"/><text x="94.9035%" y="319.50">finis..</text></g><g><title>__perf_event_task_sched_in (234 samples, 4.63%)</title><rect x="94.6535%" y="293" width="4.6337%" height="15" fill="rgb(211,48,49)"/><text x="94.9035%" y="303.50">__per..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (234 samples, 4.63%)</title><rect x="94.6535%" y="277" width="4.6337%" height="15" fill="rgb(223,36,21)"/><text x="94.9035%" y="287.50">__int..</text></g><g><title>native_write_msr (230 samples, 4.55%)</title><rect x="94.7327%" y="261" width="4.5545%" height="15" fill="rgb(207,123,46)"/><text x="94.9827%" y="271.50">nativ..</text></g><g><title>__libc_start_main (240 samples, 4.75%)</title><rect x="94.5545%" y="741" width="4.7525%" height="15" fill="rgb(240,218,32)"/><text x="94.8045%" y="751.50">__libc..</text></g><g><title>main (240 samples, 4.75%)</title><rect x="94.5545%" y="725" width="4.7525%" height="15" fill="rgb(252,5,43)"/><text x="94.8045%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (240 samples, 4.75%)</title><rect x="94.5545%" y="709" width="4.7525%" height="15" fill="rgb(252,84,19)"/><text x="94.8045%" y="719.50">std::r..</text></g><g><title>std::panic::catch_unwind (240 samples, 4.75%)</title><rect x="94.5545%" y="693" width="4.7525%" height="15" fill="rgb(243,152,39)"/><text x="94.8045%" y="703.50">std::p..</text></g><g><title>std::panicking::try (240 samples, 4.75%)</title><rect x="94.5545%" y="677" width="4.7525%" height="15" fill="rgb(234,160,15)"/><text x="94.8045%" y="687.50">std::p..</text></g><g><title>std::panicking::try::do_call (240 samples, 4.75%)</title><rect x="94.5545%" y="661" width="4.7525%" height="15" fill="rgb(237,34,20)"/><text x="94.8045%" y="671.50">std::p..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (240 samples, 4.75%)</title><rect x="94.5545%" y="645" width="4.7525%" height="15" fill="rgb(229,97,13)"/><text x="94.8045%" y="655.50">core::..</text></g><g><title>std::rt::lang_start::_{{closure}} (240 samples, 4.75%)</title><rect x="94.5545%" y="629" width="4.7525%" height="15" fill="rgb(234,71,50)"/><text x="94.8045%" y="639.50">std::r..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (240 samples, 4.75%)</title><rect x="94.5545%" y="613" width="4.7525%" height="15" fill="rgb(253,155,4)"/><text x="94.8045%" y="623.50">std::s..</text></g><g><title>lobsters_microbenchmarks::main (240 samples, 4.75%)</title><rect x="94.5545%" y="597" width="4.7525%" height="15" fill="rgb(222,185,37)"/><text x="94.8045%" y="607.50">lobste..</text></g><g><title>hwloc::Topology::new (238 samples, 4.71%)</title><rect x="94.5941%" y="581" width="4.7129%" height="15" fill="rgb(251,177,13)"/><text x="94.8441%" y="591.50">hwloc..</text></g><g><title>hwloc_topology_load (238 samples, 4.71%)</title><rect x="94.5941%" y="565" width="4.7129%" height="15" fill="rgb(250,179,40)"/><text x="94.8441%" y="575.50">hwloc..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.71%)</title><rect x="94.5941%" y="549" width="4.7129%" height="15" fill="rgb(242,44,2)"/><text x="94.8441%" y="559.50">[libh..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.71%)</title><rect x="94.5941%" y="533" width="4.7129%" height="15" fill="rgb(216,177,13)"/><text x="94.8441%" y="543.50">[libh..</text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 4.69%)</title><rect x="94.6139%" y="517" width="4.6931%" height="15" fill="rgb(216,106,43)"/><text x="94.8639%" y="527.50">[libh..</text></g><g><title>hwloc_linux_set_tid_cpubind (236 samples, 4.67%)</title><rect x="94.6337%" y="501" width="4.6733%" height="15" fill="rgb(216,183,2)"/><text x="94.8837%" y="511.50">hwloc..</text></g><g><title>_start (241 samples, 4.77%)</title><rect x="94.5545%" y="757" width="4.7723%" height="15" fill="rgb(249,75,3)"/><text x="94.8045%" y="767.50">_start</text></g><g><title>lobsters-microb (5,044 samples, 99.88%)</title><rect x="0.0000%" y="773" width="99.8812%" height="15" fill="rgb(219,67,39)"/><text x="0.2500%" y="783.50">lobsters-microb</text></g><g><title>page_fault (19 samples, 0.38%)</title><rect x="99.5050%" y="757" width="0.3762%" height="15" fill="rgb(253,228,2)"/><text x="99.7550%" y="767.50"></text></g><g><title>all (5,050 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(235,138,27)"/><text x="0.2500%" y="799.50"></text></g><g><title>perf (6 samples, 0.12%)</title><rect x="99.8812%" y="773" width="0.1188%" height="15" fill="rgb(236,97,51)"/><text x="100.1312%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="99.8812%" y="757" width="0.1188%" height="15" fill="rgb(240,80,30)"/><text x="100.1312%" y="767.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="99.8812%" y="741" width="0.1188%" height="15" fill="rgb(230,178,19)"/><text x="100.1312%" y="751.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.12%)</title><rect x="99.8812%" y="725" width="0.1188%" height="15" fill="rgb(210,190,27)"/><text x="100.1312%" y="735.50"></text></g><g><title>do_execve (6 samples, 0.12%)</title><rect x="99.8812%" y="709" width="0.1188%" height="15" fill="rgb(222,107,31)"/><text x="100.1312%" y="719.50"></text></g><g><title>__do_execve_file (6 samples, 0.12%)</title><rect x="99.8812%" y="693" width="0.1188%" height="15" fill="rgb(216,127,34)"/><text x="100.1312%" y="703.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.12%)</title><rect x="99.8812%" y="677" width="0.1188%" height="15" fill="rgb(234,116,52)"/><text x="100.1312%" y="687.50"></text></g><g><title>load_elf_binary (6 samples, 0.12%)</title><rect x="99.8812%" y="661" width="0.1188%" height="15" fill="rgb(222,124,15)"/><text x="100.1312%" y="671.50"></text></g><g><title>setup_new_exec (6 samples, 0.12%)</title><rect x="99.8812%" y="645" width="0.1188%" height="15" fill="rgb(231,179,28)"/><text x="100.1312%" y="655.50"></text></g><g><title>perf_event_exec (6 samples, 0.12%)</title><rect x="99.8812%" y="629" width="0.1188%" height="15" fill="rgb(226,93,45)"/><text x="100.1312%" y="639.50"></text></g></svg></svg>