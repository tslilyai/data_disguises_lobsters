<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (33 samples, 0.66%)</title><rect x="0.2003%" y="741" width="0.6611%" height="15" fill="rgb(227,0,7)"/><text x="0.4503%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.18%)</title><rect x="1.7428%" y="677" width="0.1803%" height="15" fill="rgb(217,0,24)"/><text x="1.9928%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.18%)</title><rect x="1.7428%" y="661" width="0.1803%" height="15" fill="rgb(221,193,54)"/><text x="1.9928%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.18%)</title><rect x="1.7428%" y="645" width="0.1803%" height="15" fill="rgb(248,212,6)"/><text x="1.9928%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.18%)</title><rect x="1.7428%" y="629" width="0.1803%" height="15" fill="rgb(208,68,35)"/><text x="1.9928%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (70 samples, 1.40%)</title><rect x="0.8814%" y="741" width="1.4022%" height="15" fill="rgb(232,128,0)"/><text x="1.1314%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 0.54%)</title><rect x="1.7428%" y="725" width="0.5409%" height="15" fill="rgb(207,160,47)"/><text x="1.9928%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.54%)</title><rect x="1.7428%" y="709" width="0.5409%" height="15" fill="rgb(228,23,34)"/><text x="1.9928%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.54%)</title><rect x="1.7428%" y="693" width="0.5409%" height="15" fill="rgb(218,30,26)"/><text x="1.9928%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 0.36%)</title><rect x="1.9231%" y="677" width="0.3606%" height="15" fill="rgb(220,122,19)"/><text x="2.1731%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (18 samples, 0.36%)</title><rect x="1.9231%" y="661" width="0.3606%" height="15" fill="rgb(250,228,42)"/><text x="2.1731%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.36%)</title><rect x="1.9231%" y="645" width="0.3606%" height="15" fill="rgb(240,193,28)"/><text x="2.1731%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.36%)</title><rect x="1.9231%" y="629" width="0.3606%" height="15" fill="rgb(216,20,37)"/><text x="2.1731%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (18 samples, 0.36%)</title><rect x="1.9231%" y="613" width="0.3606%" height="15" fill="rgb(206,188,39)"/><text x="2.1731%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.36%)</title><rect x="1.9231%" y="597" width="0.3606%" height="15" fill="rgb(217,207,13)"/><text x="2.1731%" y="607.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.36%)</title><rect x="1.9231%" y="581" width="0.3606%" height="15" fill="rgb(231,73,38)"/><text x="2.1731%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="2.2837%" y="741" width="0.1202%" height="15" fill="rgb(225,20,46)"/><text x="2.5337%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.30%)</title><rect x="2.4038%" y="741" width="0.3005%" height="15" fill="rgb(210,31,41)"/><text x="2.6538%" y="751.50"></text></g><g><title>__GI___libc_free (21 samples, 0.42%)</title><rect x="2.9848%" y="741" width="0.4207%" height="15" fill="rgb(221,200,47)"/><text x="3.2348%" y="751.50"></text></g><g><title>__GI___libc_malloc (50 samples, 1.00%)</title><rect x="3.4054%" y="741" width="1.0016%" height="15" fill="rgb(226,26,5)"/><text x="3.6554%" y="751.50"></text></g><g><title>__GI___libc_realloc (27 samples, 0.54%)</title><rect x="4.4071%" y="741" width="0.5409%" height="15" fill="rgb(249,33,26)"/><text x="4.6571%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.38%)</title><rect x="5.0481%" y="741" width="0.3806%" height="15" fill="rgb(235,183,28)"/><text x="5.2981%" y="751.50"></text></g><g><title>__rdl_realloc (8 samples, 0.16%)</title><rect x="5.4487%" y="741" width="0.1603%" height="15" fill="rgb(221,5,38)"/><text x="5.6987%" y="751.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.12%)</title><rect x="5.4888%" y="725" width="0.1202%" height="15" fill="rgb(247,18,42)"/><text x="5.7388%" y="735.50"></text></g><g><title>_int_free (63 samples, 1.26%)</title><rect x="5.6090%" y="741" width="1.2620%" height="15" fill="rgb(241,131,45)"/><text x="5.8590%" y="751.50"></text></g><g><title>_int_malloc (31 samples, 0.62%)</title><rect x="6.8710%" y="741" width="0.6210%" height="15" fill="rgb(249,31,29)"/><text x="7.1210%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.62%)</title><rect x="7.5120%" y="741" width="0.6210%" height="15" fill="rgb(225,111,53)"/><text x="7.7620%" y="751.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (33 samples, 0.66%)</title><rect x="8.1530%" y="741" width="0.6611%" height="15" fill="rgb(238,160,17)"/><text x="8.4030%" y="751.50"></text></g><g><title>alloc::string::String::push (18 samples, 0.36%)</title><rect x="8.8141%" y="741" width="0.3606%" height="15" fill="rgb(214,148,48)"/><text x="9.0641%" y="751.50"></text></g><g><title>core::fmt::write (17 samples, 0.34%)</title><rect x="9.1747%" y="741" width="0.3405%" height="15" fill="rgb(232,36,49)"/><text x="9.4247%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (6 samples, 0.12%)</title><rect x="9.7756%" y="741" width="0.1202%" height="15" fill="rgb(209,103,24)"/><text x="10.0256%" y="751.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (10 samples, 0.20%)</title><rect x="10.0361%" y="741" width="0.2003%" height="15" fill="rgb(229,88,8)"/><text x="10.2861%" y="751.50"></text></g><g><title>[anon] (539 samples, 10.80%)</title><rect x="0.2003%" y="757" width="10.7973%" height="15" fill="rgb(213,181,19)"/><text x="0.4503%" y="767.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (14 samples, 0.28%)</title><rect x="10.7171%" y="741" width="0.2804%" height="15" fill="rgb(254,191,54)"/><text x="10.9671%" y="751.50"></text></g><g><title>_int_free (19 samples, 0.38%)</title><rect x="11.1779%" y="741" width="0.3806%" height="15" fill="rgb(241,83,37)"/><text x="11.4279%" y="751.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="11.5585%" y="741" width="0.1002%" height="15" fill="rgb(233,36,39)"/><text x="11.8085%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.20%)</title><rect x="11.6587%" y="741" width="0.2003%" height="15" fill="rgb(226,3,54)"/><text x="11.9087%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.12%)</title><rect x="11.8990%" y="741" width="0.1202%" height="15" fill="rgb(245,192,40)"/><text x="12.1490%" y="751.50"></text></g><g><title>[lobsters-microbenchmarks] (50 samples, 1.00%)</title><rect x="11.0577%" y="757" width="1.0016%" height="15" fill="rgb(238,167,29)"/><text x="11.3077%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="12.1595%" y="741" width="0.1803%" height="15" fill="rgb(232,182,51)"/><text x="12.4095%" y="751.50"></text></g><g><title>sk_wait_data (13 samples, 0.26%)</title><rect x="12.4399%" y="437" width="0.2604%" height="15" fill="rgb(231,60,39)"/><text x="12.6899%" y="447.50"></text></g><g><title>wait_woken (11 samples, 0.22%)</title><rect x="12.4800%" y="421" width="0.2204%" height="15" fill="rgb(208,69,12)"/><text x="12.7300%" y="431.50"></text></g><g><title>schedule_timeout (10 samples, 0.20%)</title><rect x="12.5000%" y="405" width="0.2003%" height="15" fill="rgb(235,93,37)"/><text x="12.7500%" y="415.50"></text></g><g><title>schedule (10 samples, 0.20%)</title><rect x="12.5000%" y="389" width="0.2003%" height="15" fill="rgb(213,116,39)"/><text x="12.7500%" y="399.50"></text></g><g><title>__schedule (10 samples, 0.20%)</title><rect x="12.5000%" y="373" width="0.2003%" height="15" fill="rgb(222,207,29)"/><text x="12.7500%" y="383.50"></text></g><g><title>do_syscall_64 (20 samples, 0.40%)</title><rect x="12.3798%" y="517" width="0.4006%" height="15" fill="rgb(206,96,30)"/><text x="12.6298%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (20 samples, 0.40%)</title><rect x="12.3798%" y="501" width="0.4006%" height="15" fill="rgb(218,138,4)"/><text x="12.6298%" y="511.50"></text></g><g><title>__sys_recvfrom (19 samples, 0.38%)</title><rect x="12.3998%" y="485" width="0.3806%" height="15" fill="rgb(250,191,14)"/><text x="12.6498%" y="495.50"></text></g><g><title>inet_recvmsg (19 samples, 0.38%)</title><rect x="12.3998%" y="469" width="0.3806%" height="15" fill="rgb(239,60,40)"/><text x="12.6498%" y="479.50"></text></g><g><title>tcp_recvmsg (19 samples, 0.38%)</title><rect x="12.3998%" y="453" width="0.3806%" height="15" fill="rgb(206,27,48)"/><text x="12.6498%" y="463.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (22 samples, 0.44%)</title><rect x="12.3798%" y="629" width="0.4407%" height="15" fill="rgb(225,35,8)"/><text x="12.6298%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (22 samples, 0.44%)</title><rect x="12.3798%" y="613" width="0.4407%" height="15" fill="rgb(250,213,24)"/><text x="12.6298%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (22 samples, 0.44%)</title><rect x="12.3798%" y="597" width="0.4407%" height="15" fill="rgb(247,123,22)"/><text x="12.6298%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (22 samples, 0.44%)</title><rect x="12.3798%" y="581" width="0.4407%" height="15" fill="rgb(231,138,38)"/><text x="12.6298%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (22 samples, 0.44%)</title><rect x="12.3798%" y="565" width="0.4407%" height="15" fill="rgb(231,145,46)"/><text x="12.6298%" y="575.50"></text></g><g><title>__libc_recv (22 samples, 0.44%)</title><rect x="12.3798%" y="549" width="0.4407%" height="15" fill="rgb(251,118,11)"/><text x="12.6298%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (22 samples, 0.44%)</title><rect x="12.3798%" y="533" width="0.4407%" height="15" fill="rgb(217,147,25)"/><text x="12.6298%" y="543.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (25 samples, 0.50%)</title><rect x="12.3798%" y="709" width="0.5008%" height="15" fill="rgb(247,81,37)"/><text x="12.6298%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (25 samples, 0.50%)</title><rect x="12.3798%" y="693" width="0.5008%" height="15" fill="rgb(209,12,38)"/><text x="12.6298%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (25 samples, 0.50%)</title><rect x="12.3798%" y="677" width="0.5008%" height="15" fill="rgb(227,1,9)"/><text x="12.6298%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (25 samples, 0.50%)</title><rect x="12.3798%" y="661" width="0.5008%" height="15" fill="rgb(248,47,43)"/><text x="12.6298%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.50%)</title><rect x="12.3798%" y="645" width="0.5008%" height="15" fill="rgb(221,10,30)"/><text x="12.6298%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="12.8806%" y="709" width="0.1202%" height="15" fill="rgb(210,229,1)"/><text x="13.1306%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="12.8806%" y="693" width="0.1202%" height="15" fill="rgb(222,148,37)"/><text x="13.1306%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="12.8806%" y="677" width="0.1202%" height="15" fill="rgb(234,67,33)"/><text x="13.1306%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="12.8806%" y="661" width="0.1202%" height="15" fill="rgb(247,98,35)"/><text x="13.1306%" y="671.50"></text></g><g><title>do_syscall_64 (13 samples, 0.26%)</title><rect x="13.0409%" y="501" width="0.2604%" height="15" fill="rgb(247,138,52)"/><text x="13.2909%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (13 samples, 0.26%)</title><rect x="13.0409%" y="485" width="0.2604%" height="15" fill="rgb(213,79,30)"/><text x="13.2909%" y="495.50"></text></g><g><title>__sys_recvfrom (13 samples, 0.26%)</title><rect x="13.0409%" y="469" width="0.2604%" height="15" fill="rgb(246,177,23)"/><text x="13.2909%" y="479.50"></text></g><g><title>inet_recvmsg (10 samples, 0.20%)</title><rect x="13.1010%" y="453" width="0.2003%" height="15" fill="rgb(230,62,27)"/><text x="13.3510%" y="463.50"></text></g><g><title>tcp_recvmsg (10 samples, 0.20%)</title><rect x="13.1010%" y="437" width="0.2003%" height="15" fill="rgb(216,154,8)"/><text x="13.3510%" y="447.50"></text></g><g><title>sk_wait_data (8 samples, 0.16%)</title><rect x="13.1410%" y="421" width="0.1603%" height="15" fill="rgb(244,35,45)"/><text x="13.3910%" y="431.50"></text></g><g><title>wait_woken (8 samples, 0.16%)</title><rect x="13.1410%" y="405" width="0.1603%" height="15" fill="rgb(251,115,12)"/><text x="13.3910%" y="415.50"></text></g><g><title>schedule_timeout (6 samples, 0.12%)</title><rect x="13.1811%" y="389" width="0.1202%" height="15" fill="rgb(240,54,50)"/><text x="13.4311%" y="399.50"></text></g><g><title>schedule (6 samples, 0.12%)</title><rect x="13.1811%" y="373" width="0.1202%" height="15" fill="rgb(233,84,52)"/><text x="13.4311%" y="383.50"></text></g><g><title>__schedule (6 samples, 0.12%)</title><rect x="13.1811%" y="357" width="0.1202%" height="15" fill="rgb(207,117,47)"/><text x="13.4311%" y="367.50"></text></g><g><title>entry_SYSCALL_64 (15 samples, 0.30%)</title><rect x="13.0208%" y="517" width="0.3005%" height="15" fill="rgb(249,43,39)"/><text x="13.2708%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (16 samples, 0.32%)</title><rect x="13.0208%" y="613" width="0.3205%" height="15" fill="rgb(209,38,44)"/><text x="13.2708%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (16 samples, 0.32%)</title><rect x="13.0208%" y="597" width="0.3205%" height="15" fill="rgb(236,212,23)"/><text x="13.2708%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (16 samples, 0.32%)</title><rect x="13.0208%" y="581" width="0.3205%" height="15" fill="rgb(242,79,21)"/><text x="13.2708%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (16 samples, 0.32%)</title><rect x="13.0208%" y="565" width="0.3205%" height="15" fill="rgb(211,96,35)"/><text x="13.2708%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (16 samples, 0.32%)</title><rect x="13.0208%" y="549" width="0.3205%" height="15" fill="rgb(253,215,40)"/><text x="13.2708%" y="559.50"></text></g><g><title>__libc_recv (16 samples, 0.32%)</title><rect x="13.0208%" y="533" width="0.3205%" height="15" fill="rgb(211,81,21)"/><text x="13.2708%" y="543.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (19 samples, 0.38%)</title><rect x="13.0008%" y="709" width="0.3806%" height="15" fill="rgb(208,190,38)"/><text x="13.2508%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (19 samples, 0.38%)</title><rect x="13.0008%" y="693" width="0.3806%" height="15" fill="rgb(235,213,38)"/><text x="13.2508%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (19 samples, 0.38%)</title><rect x="13.0008%" y="677" width="0.3806%" height="15" fill="rgb(237,122,38)"/><text x="13.2508%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (19 samples, 0.38%)</title><rect x="13.0008%" y="661" width="0.3806%" height="15" fill="rgb(244,218,35)"/><text x="13.2508%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (18 samples, 0.36%)</title><rect x="13.0208%" y="645" width="0.3606%" height="15" fill="rgb(240,68,47)"/><text x="13.2708%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.36%)</title><rect x="13.0208%" y="629" width="0.3606%" height="15" fill="rgb(210,16,53)"/><text x="13.2708%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="13.4615%" y="661" width="0.1202%" height="15" fill="rgb(235,124,12)"/><text x="13.7115%" y="671.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="13.5817%" y="661" width="0.1402%" height="15" fill="rgb(224,169,11)"/><text x="13.8317%" y="671.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="13.6018%" y="645" width="0.1202%" height="15" fill="rgb(250,166,2)"/><text x="13.8518%" y="655.50"></text></g><g><title>malloc_consolidate (5 samples, 0.10%)</title><rect x="13.6218%" y="629" width="0.1002%" height="15" fill="rgb(242,216,29)"/><text x="13.8718%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.36%)</title><rect x="13.4014%" y="677" width="0.3606%" height="15" fill="rgb(230,116,27)"/><text x="13.6514%" y="687.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.48%)</title><rect x="13.7620%" y="661" width="0.4808%" height="15" fill="rgb(228,99,48)"/><text x="14.0120%" y="671.50"></text></g><g><title>_int_malloc (24 samples, 0.48%)</title><rect x="13.7620%" y="645" width="0.4808%" height="15" fill="rgb(253,11,6)"/><text x="14.0120%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.56%)</title><rect x="13.7620%" y="677" width="0.5609%" height="15" fill="rgb(247,143,39)"/><text x="14.0120%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="14.3630%" y="629" width="0.1202%" height="15" fill="rgb(236,97,10)"/><text x="14.6130%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.12%)</title><rect x="14.3630%" y="613" width="0.1202%" height="15" fill="rgb(233,208,19)"/><text x="14.6130%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (6 samples, 0.12%)</title><rect x="14.3630%" y="597" width="0.1202%" height="15" fill="rgb(216,164,2)"/><text x="14.6130%" y="607.50"></text></g><g><title>decor_mem::select::expr_to_col (11 samples, 0.22%)</title><rect x="14.3229%" y="677" width="0.2204%" height="15" fill="rgb(220,129,5)"/><text x="14.5729%" y="687.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="14.3229%" y="661" width="0.2204%" height="15" fill="rgb(242,17,10)"/><text x="14.5729%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (10 samples, 0.20%)</title><rect x="14.3429%" y="645" width="0.2003%" height="15" fill="rgb(242,107,0)"/><text x="14.5929%" y="655.50"></text></g><g><title>decor_mem::select::expr_to_col (5 samples, 0.10%)</title><rect x="14.5633%" y="661" width="0.1002%" height="15" fill="rgb(251,28,31)"/><text x="14.8133%" y="671.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="14.5633%" y="645" width="0.1002%" height="15" fill="rgb(233,223,10)"/><text x="14.8133%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="14.5633%" y="629" width="0.1002%" height="15" fill="rgb(215,21,27)"/><text x="14.8133%" y="639.50"></text></g><g><title>decor_mem::select::expr_to_col (6 samples, 0.12%)</title><rect x="14.6835%" y="645" width="0.1202%" height="15" fill="rgb(232,23,21)"/><text x="14.9335%" y="655.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="14.6835%" y="629" width="0.1202%" height="15" fill="rgb(244,5,23)"/><text x="14.9335%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="14.6835%" y="613" width="0.1202%" height="15" fill="rgb(226,81,46)"/><text x="14.9335%" y="623.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.44%)</title><rect x="15.3446%" y="613" width="0.4407%" height="15" fill="rgb(247,70,30)"/><text x="15.5946%" y="623.50"></text></g><g><title>_int_realloc (8 samples, 0.16%)</title><rect x="15.6250%" y="597" width="0.1603%" height="15" fill="rgb(212,68,19)"/><text x="15.8750%" y="607.50"></text></g><g><title>_int_free (11 samples, 0.22%)</title><rect x="15.9255%" y="613" width="0.2204%" height="15" fill="rgb(240,187,13)"/><text x="16.1755%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.24%)</title><rect x="16.3261%" y="597" width="0.2404%" height="15" fill="rgb(223,113,26)"/><text x="16.5761%" y="607.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="16.9271%" y="549" width="0.1603%" height="15" fill="rgb(206,192,2)"/><text x="17.1771%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (21 samples, 0.42%)</title><rect x="16.7067%" y="581" width="0.4207%" height="15" fill="rgb(241,108,4)"/><text x="16.9567%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.26%)</title><rect x="16.8670%" y="565" width="0.2604%" height="15" fill="rgb(247,173,49)"/><text x="17.1170%" y="575.50"></text></g><g><title>_int_free (16 samples, 0.32%)</title><rect x="17.2476%" y="581" width="0.3205%" height="15" fill="rgb(224,114,35)"/><text x="17.4976%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="17.9888%" y="565" width="0.1002%" height="15" fill="rgb(245,159,27)"/><text x="18.2388%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (83 samples, 1.66%)</title><rect x="16.5865%" y="597" width="1.6627%" height="15" fill="rgb(245,172,44)"/><text x="16.8365%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (33 samples, 0.66%)</title><rect x="17.5881%" y="581" width="0.6611%" height="15" fill="rgb(236,23,11)"/><text x="17.8381%" y="591.50"></text></g><g><title>__rust_dealloc (5 samples, 0.10%)</title><rect x="18.1490%" y="565" width="0.1002%" height="15" fill="rgb(205,117,38)"/><text x="18.3990%" y="575.50"></text></g><g><title>core::fmt::write (107 samples, 2.14%)</title><rect x="16.1458%" y="613" width="2.1434%" height="15" fill="rgb(237,72,25)"/><text x="16.3958%" y="623.50">c..</text></g><g><title>decor_mem::views::View::get_row_indices_of_col (172 samples, 3.45%)</title><rect x="14.9239%" y="629" width="3.4455%" height="15" fill="rgb(244,70,9)"/><text x="15.1739%" y="639.50">dec..</text></g><g><title>decor_mem::select::get_rows_matching_constraint (183 samples, 3.67%)</title><rect x="14.8037%" y="645" width="3.6659%" height="15" fill="rgb(217,125,39)"/><text x="15.0537%" y="655.50">deco..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.10%)</title><rect x="18.3694%" y="629" width="0.1002%" height="15" fill="rgb(235,36,10)"/><text x="18.6194%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (5 samples, 0.10%)</title><rect x="18.3694%" y="613" width="0.1002%" height="15" fill="rgb(251,123,47)"/><text x="18.6194%" y="623.50"></text></g><g><title>decor_mem::select::get_value_for_rows (8 samples, 0.16%)</title><rect x="18.4696%" y="645" width="0.1603%" height="15" fill="rgb(221,13,13)"/><text x="18.7196%" y="655.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (6 samples, 0.12%)</title><rect x="18.5096%" y="629" width="0.1202%" height="15" fill="rgb(238,131,9)"/><text x="18.7596%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.10%)</title><rect x="18.6498%" y="597" width="0.1002%" height="15" fill="rgb(211,50,8)"/><text x="18.8998%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (5 samples, 0.10%)</title><rect x="18.6498%" y="581" width="0.1002%" height="15" fill="rgb(245,182,24)"/><text x="18.8998%" y="591.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (7 samples, 0.14%)</title><rect x="18.6298%" y="645" width="0.1402%" height="15" fill="rgb(242,14,37)"/><text x="18.8798%" y="655.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="18.6498%" y="629" width="0.1202%" height="15" fill="rgb(246,228,12)"/><text x="18.8998%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="18.6498%" y="613" width="0.1202%" height="15" fill="rgb(213,55,15)"/><text x="18.8998%" y="623.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (210 samples, 4.21%)</title><rect x="14.6635%" y="661" width="4.2067%" height="15" fill="rgb(209,9,3)"/><text x="14.9135%" y="671.50">decor..</text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (12 samples, 0.24%)</title><rect x="18.9103%" y="613" width="0.2404%" height="15" fill="rgb(230,59,30)"/><text x="19.1603%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (12 samples, 0.24%)</title><rect x="18.9103%" y="597" width="0.2404%" height="15" fill="rgb(209,121,21)"/><text x="19.1603%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (12 samples, 0.24%)</title><rect x="18.9103%" y="581" width="0.2404%" height="15" fill="rgb(220,109,13)"/><text x="19.1603%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (10 samples, 0.20%)</title><rect x="18.9503%" y="565" width="0.2003%" height="15" fill="rgb(232,18,1)"/><text x="19.2003%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (9 samples, 0.18%)</title><rect x="18.9704%" y="549" width="0.1803%" height="15" fill="rgb(215,41,42)"/><text x="19.2204%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (9 samples, 0.18%)</title><rect x="18.9704%" y="533" width="0.1803%" height="15" fill="rgb(224,123,36)"/><text x="19.2204%" y="543.50"></text></g><g><title>core::fmt::write (18 samples, 0.36%)</title><rect x="18.9103%" y="645" width="0.3606%" height="15" fill="rgb(240,125,3)"/><text x="19.1603%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (18 samples, 0.36%)</title><rect x="18.9103%" y="629" width="0.3606%" height="15" fill="rgb(205,98,50)"/><text x="19.1603%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (5 samples, 0.10%)</title><rect x="19.3109%" y="533" width="0.1002%" height="15" fill="rgb(205,185,37)"/><text x="19.5609%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.14%)</title><rect x="19.3109%" y="565" width="0.1402%" height="15" fill="rgb(238,207,15)"/><text x="19.5609%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (7 samples, 0.14%)</title><rect x="19.3109%" y="549" width="0.1402%" height="15" fill="rgb(213,199,42)"/><text x="19.5609%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="19.2909%" y="581" width="0.1803%" height="15" fill="rgb(235,201,11)"/><text x="19.5409%" y="591.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (31 samples, 0.62%)</title><rect x="18.8702%" y="661" width="0.6210%" height="15" fill="rgb(207,46,11)"/><text x="19.1202%" y="671.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (11 samples, 0.22%)</title><rect x="19.2708%" y="645" width="0.2204%" height="15" fill="rgb(241,35,35)"/><text x="19.5208%" y="655.50"></text></g><g><title>alloc::fmt::format (11 samples, 0.22%)</title><rect x="19.2708%" y="629" width="0.2204%" height="15" fill="rgb(243,32,47)"/><text x="19.5208%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (11 samples, 0.22%)</title><rect x="19.2708%" y="613" width="0.2204%" height="15" fill="rgb(247,202,23)"/><text x="19.5208%" y="623.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="19.2708%" y="597" width="0.2204%" height="15" fill="rgb(219,102,11)"/><text x="19.5208%" y="607.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (249 samples, 4.99%)</title><rect x="14.5433%" y="677" width="4.9880%" height="15" fill="rgb(243,110,44)"/><text x="14.7933%" y="687.50">decor_..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (15 samples, 0.30%)</title><rect x="19.7115%" y="597" width="0.3005%" height="15" fill="rgb(222,74,54)"/><text x="19.9615%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (9 samples, 0.18%)</title><rect x="19.8317%" y="581" width="0.1803%" height="15" fill="rgb(216,99,12)"/><text x="20.0817%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (7 samples, 0.14%)</title><rect x="19.8718%" y="565" width="0.1402%" height="15" fill="rgb(226,22,26)"/><text x="20.1218%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (7 samples, 0.14%)</title><rect x="19.8718%" y="549" width="0.1402%" height="15" fill="rgb(217,163,10)"/><text x="20.1218%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (23 samples, 0.46%)</title><rect x="19.6114%" y="629" width="0.4607%" height="15" fill="rgb(213,25,53)"/><text x="19.8614%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (23 samples, 0.46%)</title><rect x="19.6114%" y="613" width="0.4607%" height="15" fill="rgb(252,105,26)"/><text x="19.8614%" y="623.50"></text></g><g><title>core::fmt::write (30 samples, 0.60%)</title><rect x="19.5513%" y="661" width="0.6010%" height="15" fill="rgb(220,39,43)"/><text x="19.8013%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (29 samples, 0.58%)</title><rect x="19.5713%" y="645" width="0.5809%" height="15" fill="rgb(229,68,48)"/><text x="19.8213%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (10 samples, 0.20%)</title><rect x="20.1923%" y="549" width="0.2003%" height="15" fill="rgb(252,8,32)"/><text x="20.4423%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.12%)</title><rect x="20.2724%" y="533" width="0.1202%" height="15" fill="rgb(223,20,43)"/><text x="20.5224%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (11 samples, 0.22%)</title><rect x="20.1923%" y="581" width="0.2204%" height="15" fill="rgb(229,81,49)"/><text x="20.4423%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (11 samples, 0.22%)</title><rect x="20.1923%" y="565" width="0.2204%" height="15" fill="rgb(236,28,36)"/><text x="20.4423%" y="575.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (49 samples, 0.98%)</title><rect x="19.5312%" y="677" width="0.9816%" height="15" fill="rgb(249,185,26)"/><text x="19.7812%" y="687.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (18 samples, 0.36%)</title><rect x="20.1522%" y="661" width="0.3606%" height="15" fill="rgb(249,174,33)"/><text x="20.4022%" y="671.50"></text></g><g><title>alloc::fmt::format (18 samples, 0.36%)</title><rect x="20.1522%" y="645" width="0.3606%" height="15" fill="rgb(233,201,37)"/><text x="20.4022%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (18 samples, 0.36%)</title><rect x="20.1522%" y="629" width="0.3606%" height="15" fill="rgb(221,78,26)"/><text x="20.4022%" y="639.50"></text></g><g><title>core::fmt::write (18 samples, 0.36%)</title><rect x="20.1522%" y="613" width="0.3606%" height="15" fill="rgb(250,127,30)"/><text x="20.4022%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (16 samples, 0.32%)</title><rect x="20.1923%" y="597" width="0.3205%" height="15" fill="rgb(230,49,44)"/><text x="20.4423%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="20.6530%" y="645" width="0.1402%" height="15" fill="rgb(229,67,23)"/><text x="20.9030%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="20.6330%" y="661" width="0.1803%" height="15" fill="rgb(249,83,47)"/><text x="20.8830%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.26%)</title><rect x="24.2989%" y="565" width="0.2604%" height="15" fill="rgb(215,43,3)"/><text x="24.5489%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="24.5593%" y="549" width="0.2204%" height="15" fill="rgb(238,154,13)"/><text x="24.8093%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (24 samples, 0.48%)</title><rect x="24.7796%" y="533" width="0.4808%" height="15" fill="rgb(219,56,2)"/><text x="25.0296%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (24 samples, 0.48%)</title><rect x="24.7796%" y="517" width="0.4808%" height="15" fill="rgb(233,0,4)"/><text x="25.0296%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (24 samples, 0.48%)</title><rect x="24.7796%" y="501" width="0.4808%" height="15" fill="rgb(235,30,7)"/><text x="25.0296%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.48%)</title><rect x="24.7796%" y="485" width="0.4808%" height="15" fill="rgb(250,79,13)"/><text x="25.0296%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.28%)</title><rect x="24.9800%" y="469" width="0.2804%" height="15" fill="rgb(211,146,34)"/><text x="25.2300%" y="479.50"></text></g><g><title>_int_malloc (326 samples, 6.53%)</title><rect x="27.7845%" y="405" width="6.5304%" height="15" fill="rgb(228,22,38)"/><text x="28.0345%" y="415.50">_int_mall..</text></g><g><title>__GI___libc_malloc (450 samples, 9.01%)</title><rect x="25.3405%" y="421" width="9.0144%" height="15" fill="rgb(235,168,5)"/><text x="25.5905%" y="431.50">__GI___libc_m..</text></g><g><title>__rdl_alloc (31 samples, 0.62%)</title><rect x="34.3550%" y="421" width="0.6210%" height="15" fill="rgb(221,155,16)"/><text x="34.6050%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (31 samples, 0.62%)</title><rect x="34.3550%" y="405" width="0.6210%" height="15" fill="rgb(215,215,53)"/><text x="34.6050%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (549 samples, 11.00%)</title><rect x="24.1386%" y="597" width="10.9976%" height="15" fill="rgb(223,4,10)"/><text x="24.3886%" y="607.50">&lt;alloc::string::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (541 samples, 10.84%)</title><rect x="24.2989%" y="581" width="10.8373%" height="15" fill="rgb(234,103,6)"/><text x="24.5489%" y="591.50">&lt;alloc::vec::Vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (528 samples, 10.58%)</title><rect x="24.5593%" y="565" width="10.5769%" height="15" fill="rgb(227,97,0)"/><text x="24.8093%" y="575.50">alloc::slice::&lt;..</text></g><g><title>alloc::slice::hack::to_vec (517 samples, 10.36%)</title><rect x="24.7796%" y="549" width="10.3566%" height="15" fill="rgb(234,150,53)"/><text x="25.0296%" y="559.50">alloc::slice::h..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (493 samples, 9.88%)</title><rect x="25.2604%" y="533" width="9.8758%" height="15" fill="rgb(228,201,54)"/><text x="25.5104%" y="543.50">alloc::vec::Ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (493 samples, 9.88%)</title><rect x="25.2604%" y="517" width="9.8758%" height="15" fill="rgb(222,22,37)"/><text x="25.5104%" y="527.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (493 samples, 9.88%)</title><rect x="25.2604%" y="501" width="9.8758%" height="15" fill="rgb(237,53,32)"/><text x="25.5104%" y="511.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (493 samples, 9.88%)</title><rect x="25.2604%" y="485" width="9.8758%" height="15" fill="rgb(233,25,53)"/><text x="25.5104%" y="495.50">alloc::raw_vec..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (493 samples, 9.88%)</title><rect x="25.2604%" y="469" width="9.8758%" height="15" fill="rgb(210,40,34)"/><text x="25.5104%" y="479.50">&lt;alloc::alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (493 samples, 9.88%)</title><rect x="25.2604%" y="453" width="9.8758%" height="15" fill="rgb(241,220,44)"/><text x="25.5104%" y="463.50">alloc::alloc::..</text></g><g><title>alloc::alloc::alloc (493 samples, 9.88%)</title><rect x="25.2604%" y="437" width="9.8758%" height="15" fill="rgb(235,28,35)"/><text x="25.5104%" y="447.50">alloc::alloc::..</text></g><g><title>__rust_alloc (8 samples, 0.16%)</title><rect x="34.9760%" y="421" width="0.1603%" height="15" fill="rgb(210,56,17)"/><text x="35.2260%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (705 samples, 14.12%)</title><rect x="21.0337%" y="613" width="14.1226%" height="15" fill="rgb(224,130,29)"/><text x="21.2837%" y="623.50">&lt;core::iter::adapters..</text></g><g><title>__GI___libc_malloc (50 samples, 1.00%)</title><rect x="35.1562%" y="613" width="1.0016%" height="15" fill="rgb(235,212,8)"/><text x="35.4062%" y="623.50"></text></g><g><title>_int_malloc (29 samples, 0.58%)</title><rect x="35.5769%" y="597" width="0.5809%" height="15" fill="rgb(223,33,50)"/><text x="35.8269%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (765 samples, 15.32%)</title><rect x="20.8534%" y="629" width="15.3245%" height="15" fill="rgb(219,149,13)"/><text x="21.1034%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (771 samples, 15.44%)</title><rect x="20.8333%" y="645" width="15.4447%" height="15" fill="rgb(250,156,29)"/><text x="21.0833%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as c..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (7 samples, 0.14%)</title><rect x="37.5401%" y="549" width="0.1402%" height="15" fill="rgb(216,193,19)"/><text x="37.7901%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (7 samples, 0.14%)</title><rect x="37.5401%" y="533" width="0.1402%" height="15" fill="rgb(216,135,14)"/><text x="37.7901%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (7 samples, 0.14%)</title><rect x="37.5401%" y="517" width="0.1402%" height="15" fill="rgb(241,47,5)"/><text x="37.7901%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.14%)</title><rect x="37.5401%" y="501" width="0.1402%" height="15" fill="rgb(233,42,35)"/><text x="37.7901%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="37.5801%" y="485" width="0.1002%" height="15" fill="rgb(231,13,6)"/><text x="37.8301%" y="495.50"></text></g><g><title>__GI___libc_malloc (111 samples, 2.22%)</title><rect x="37.7003%" y="437" width="2.2236%" height="15" fill="rgb(207,181,40)"/><text x="37.9503%" y="447.50">_..</text></g><g><title>_int_malloc (80 samples, 1.60%)</title><rect x="38.3213%" y="421" width="1.6026%" height="15" fill="rgb(254,173,49)"/><text x="38.5713%" y="431.50"></text></g><g><title>__rdl_alloc (6 samples, 0.12%)</title><rect x="39.9239%" y="437" width="0.1202%" height="15" fill="rgb(221,1,38)"/><text x="40.1739%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.12%)</title><rect x="39.9239%" y="421" width="0.1202%" height="15" fill="rgb(206,124,46)"/><text x="40.1739%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (136 samples, 2.72%)</title><rect x="37.4199%" y="613" width="2.7244%" height="15" fill="rgb(249,21,11)"/><text x="37.6699%" y="623.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (134 samples, 2.68%)</title><rect x="37.4599%" y="597" width="2.6843%" height="15" fill="rgb(222,201,40)"/><text x="37.7099%" y="607.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (133 samples, 2.66%)</title><rect x="37.4800%" y="581" width="2.6643%" height="15" fill="rgb(235,61,29)"/><text x="37.7300%" y="591.50">al..</text></g><g><title>alloc::slice::hack::to_vec (130 samples, 2.60%)</title><rect x="37.5401%" y="565" width="2.6042%" height="15" fill="rgb(219,207,3)"/><text x="37.7901%" y="575.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (123 samples, 2.46%)</title><rect x="37.6803%" y="549" width="2.4639%" height="15" fill="rgb(222,56,46)"/><text x="37.9303%" y="559.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (123 samples, 2.46%)</title><rect x="37.6803%" y="533" width="2.4639%" height="15" fill="rgb(239,76,54)"/><text x="37.9303%" y="543.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123 samples, 2.46%)</title><rect x="37.6803%" y="517" width="2.4639%" height="15" fill="rgb(231,124,27)"/><text x="37.9303%" y="527.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (123 samples, 2.46%)</title><rect x="37.6803%" y="501" width="2.4639%" height="15" fill="rgb(249,195,6)"/><text x="37.9303%" y="511.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (123 samples, 2.46%)</title><rect x="37.6803%" y="485" width="2.4639%" height="15" fill="rgb(237,174,47)"/><text x="37.9303%" y="495.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 2.46%)</title><rect x="37.6803%" y="469" width="2.4639%" height="15" fill="rgb(206,201,31)"/><text x="37.9303%" y="479.50">al..</text></g><g><title>alloc::alloc::alloc (123 samples, 2.46%)</title><rect x="37.6803%" y="453" width="2.4639%" height="15" fill="rgb(231,57,52)"/><text x="37.9303%" y="463.50">al..</text></g><g><title>__rust_alloc (5 samples, 0.10%)</title><rect x="40.0441%" y="437" width="0.1002%" height="15" fill="rgb(248,177,22)"/><text x="40.2941%" y="447.50"></text></g><g><title>__GI___libc_malloc (95 samples, 1.90%)</title><rect x="40.6450%" y="597" width="1.9030%" height="15" fill="rgb(215,211,37)"/><text x="40.8950%" y="607.50">_..</text></g><g><title>_int_malloc (62 samples, 1.24%)</title><rect x="41.3061%" y="581" width="1.2420%" height="15" fill="rgb(241,128,51)"/><text x="41.5561%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.36%)</title><rect x="42.5481%" y="597" width="0.3606%" height="15" fill="rgb(227,165,31)"/><text x="42.7981%" y="607.50"></text></g><g><title>__rdl_alloc (8 samples, 0.16%)</title><rect x="42.9087%" y="597" width="0.1603%" height="15" fill="rgb(228,167,24)"/><text x="43.1587%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.16%)</title><rect x="42.9087%" y="581" width="0.1603%" height="15" fill="rgb(228,143,12)"/><text x="43.1587%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (147 samples, 2.94%)</title><rect x="40.1442%" y="613" width="2.9447%" height="15" fill="rgb(249,149,8)"/><text x="40.3942%" y="623.50">&lt;h..</text></g><g><title>&lt;decor_mem::views::View as core::clone::Clone&gt;::clone (1,114 samples, 22.32%)</title><rect x="20.8133%" y="661" width="22.3157%" height="15" fill="rgb(243,35,44)"/><text x="21.0633%" y="671.50">&lt;decor_mem::views::View as core::cl..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (342 samples, 6.85%)</title><rect x="36.2780%" y="645" width="6.8510%" height="15" fill="rgb(246,89,9)"/><text x="36.5280%" y="655.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (342 samples, 6.85%)</title><rect x="36.2780%" y="629" width="6.8510%" height="15" fill="rgb(233,213,13)"/><text x="36.5280%" y="639.50">&lt;hashbrow..</text></g><g><title>__GI___libc_free (24 samples, 0.48%)</title><rect x="43.6298%" y="629" width="0.4808%" height="15" fill="rgb(233,141,41)"/><text x="43.8798%" y="639.50"></text></g><g><title>__rust_dealloc (5 samples, 0.10%)</title><rect x="44.1306%" y="629" width="0.1002%" height="15" fill="rgb(239,167,4)"/><text x="44.3806%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 2.28%)</title><rect x="43.1490%" y="645" width="2.2837%" height="15" fill="rgb(209,217,16)"/><text x="43.3990%" y="655.50">&lt;..</text></g><g><title>_int_free (60 samples, 1.20%)</title><rect x="44.2308%" y="629" width="1.2019%" height="15" fill="rgb(219,88,35)"/><text x="44.4808%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (308 samples, 6.17%)</title><rect x="43.1290%" y="661" width="6.1699%" height="15" fill="rgb(220,193,23)"/><text x="43.3790%" y="671.50">&lt;hashbro..</text></g><g><title>_int_free (193 samples, 3.87%)</title><rect x="45.4327%" y="645" width="3.8662%" height="15" fill="rgb(230,90,52)"/><text x="45.6827%" y="655.50">_int..</text></g><g><title>malloc_consolidate (192 samples, 3.85%)</title><rect x="45.4527%" y="629" width="3.8462%" height="15" fill="rgb(252,106,19)"/><text x="45.7027%" y="639.50">mall..</text></g><g><title>unlink_chunk.constprop.0 (50 samples, 1.00%)</title><rect x="48.2973%" y="613" width="1.0016%" height="15" fill="rgb(206,74,20)"/><text x="48.5473%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="49.2989%" y="661" width="0.1002%" height="15" fill="rgb(230,138,44)"/><text x="49.5489%" y="671.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="49.2989%" y="645" width="0.1002%" height="15" fill="rgb(235,182,43)"/><text x="49.5489%" y="655.50"></text></g><g><title>__GI___libc_free (38 samples, 0.76%)</title><rect x="49.7196%" y="629" width="0.7612%" height="15" fill="rgb(242,16,51)"/><text x="49.9696%" y="639.50"></text></g><g><title>__rust_dealloc (5 samples, 0.10%)</title><rect x="50.5609%" y="629" width="0.1002%" height="15" fill="rgb(248,9,4)"/><text x="50.8109%" y="639.50"></text></g><g><title>_int_free (123 samples, 2.46%)</title><rect x="50.6611%" y="629" width="2.4639%" height="15" fill="rgb(210,31,22)"/><text x="50.9111%" y="639.50">_i..</text></g><g><title>core::ptr::drop_in_place (214 samples, 4.29%)</title><rect x="49.3990%" y="661" width="4.2869%" height="15" fill="rgb(239,54,39)"/><text x="49.6490%" y="671.50">core:..</text></g><g><title>core::ptr::drop_in_place (214 samples, 4.29%)</title><rect x="49.3990%" y="645" width="4.2869%" height="15" fill="rgb(230,99,41)"/><text x="49.6490%" y="655.50">core:..</text></g><g><title>core::ptr::drop_in_place (28 samples, 0.56%)</title><rect x="53.1250%" y="629" width="0.5609%" height="15" fill="rgb(253,106,12)"/><text x="53.3750%" y="639.50"></text></g><g><title>decor_mem::select::get_join_on_col_indices (10 samples, 0.20%)</title><rect x="53.6859%" y="661" width="0.2003%" height="15" fill="rgb(213,46,41)"/><text x="53.9359%" y="671.50"></text></g><g><title>decor_mem::select::get_binop_indices (10 samples, 0.20%)</title><rect x="53.6859%" y="645" width="0.2003%" height="15" fill="rgb(215,133,35)"/><text x="53.9359%" y="655.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (7 samples, 0.14%)</title><rect x="53.7460%" y="629" width="0.1402%" height="15" fill="rgb(213,28,5)"/><text x="53.9960%" y="639.50"></text></g><g><title>decor_mem::select::tablefactor_to_view (5 samples, 0.10%)</title><rect x="53.8862%" y="661" width="0.1002%" height="15" fill="rgb(215,77,49)"/><text x="54.1362%" y="671.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="53.8862%" y="645" width="0.1002%" height="15" fill="rgb(248,100,22)"/><text x="54.1362%" y="655.50"></text></g><g><title>__GI___libc_free (6 samples, 0.12%)</title><rect x="54.6675%" y="645" width="0.1202%" height="15" fill="rgb(208,67,9)"/><text x="54.9175%" y="655.50"></text></g><g><title>_int_realloc (17 samples, 0.34%)</title><rect x="55.3085%" y="629" width="0.3405%" height="15" fill="rgb(219,133,21)"/><text x="55.5585%" y="639.50"></text></g><g><title>__GI___libc_realloc (44 samples, 0.88%)</title><rect x="54.7877%" y="645" width="0.8814%" height="15" fill="rgb(246,46,29)"/><text x="55.0377%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.10%)</title><rect x="55.6691%" y="645" width="0.1002%" height="15" fill="rgb(246,185,52)"/><text x="55.9191%" y="655.50"></text></g><g><title>_int_free (11 samples, 0.22%)</title><rect x="55.8494%" y="645" width="0.2204%" height="15" fill="rgb(252,136,11)"/><text x="56.0994%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.14%)</title><rect x="56.2099%" y="629" width="0.1402%" height="15" fill="rgb(219,138,53)"/><text x="56.4599%" y="639.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="56.5705%" y="581" width="0.1202%" height="15" fill="rgb(211,51,23)"/><text x="56.8205%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (13 samples, 0.26%)</title><rect x="56.4503%" y="613" width="0.2604%" height="15" fill="rgb(247,221,28)"/><text x="56.7003%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.16%)</title><rect x="56.5505%" y="597" width="0.1603%" height="15" fill="rgb(251,222,45)"/><text x="56.8005%" y="607.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="57.1314%" y="581" width="0.1603%" height="15" fill="rgb(217,162,53)"/><text x="57.3814%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (11 samples, 0.22%)</title><rect x="57.7123%" y="549" width="0.2204%" height="15" fill="rgb(229,93,14)"/><text x="57.9623%" y="559.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.42%)</title><rect x="57.7123%" y="565" width="0.4207%" height="15" fill="rgb(209,67,49)"/><text x="57.9623%" y="575.50"></text></g><g><title>core::str::validations::next_code_point (10 samples, 0.20%)</title><rect x="57.9327%" y="549" width="0.2003%" height="15" fill="rgb(213,87,29)"/><text x="58.1827%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (15 samples, 0.30%)</title><rect x="58.1530%" y="549" width="0.3005%" height="15" fill="rgb(205,151,52)"/><text x="58.4030%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (5 samples, 0.10%)</title><rect x="58.3534%" y="533" width="0.1002%" height="15" fill="rgb(253,215,39)"/><text x="58.6034%" y="543.50"></text></g><g><title>alloc::string::String::push (26 samples, 0.52%)</title><rect x="58.1530%" y="565" width="0.5208%" height="15" fill="rgb(221,220,41)"/><text x="58.4030%" y="575.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (11 samples, 0.22%)</title><rect x="58.4535%" y="549" width="0.2204%" height="15" fill="rgb(218,133,21)"/><text x="58.7035%" y="559.50"></text></g><g><title>core::char::methods::len_utf8 (11 samples, 0.22%)</title><rect x="58.4535%" y="533" width="0.2204%" height="15" fill="rgb(221,193,43)"/><text x="58.7035%" y="543.50"></text></g><g><title>alloc::string::String::with_capacity (5 samples, 0.10%)</title><rect x="58.6739%" y="565" width="0.1002%" height="15" fill="rgb(240,128,52)"/><text x="58.9239%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.10%)</title><rect x="58.6739%" y="549" width="0.1002%" height="15" fill="rgb(253,114,12)"/><text x="58.9239%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (5 samples, 0.10%)</title><rect x="58.6739%" y="533" width="0.1002%" height="15" fill="rgb(215,223,47)"/><text x="58.9239%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.10%)</title><rect x="58.6739%" y="517" width="0.1002%" height="15" fill="rgb(248,225,23)"/><text x="58.9239%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.10%)</title><rect x="58.6739%" y="501" width="0.1002%" height="15" fill="rgb(250,108,0)"/><text x="58.9239%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (5 samples, 0.10%)</title><rect x="58.6739%" y="485" width="0.1002%" height="15" fill="rgb(228,208,7)"/><text x="58.9239%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.10%)</title><rect x="58.6739%" y="469" width="0.1002%" height="15" fill="rgb(244,45,10)"/><text x="58.9239%" y="479.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.10%)</title><rect x="58.6739%" y="453" width="0.1002%" height="15" fill="rgb(207,125,25)"/><text x="58.9239%" y="463.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="58.6739%" y="437" width="0.1002%" height="15" fill="rgb(210,195,18)"/><text x="58.9239%" y="447.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (59 samples, 1.18%)</title><rect x="60.3165%" y="517" width="1.1819%" height="15" fill="rgb(249,80,12)"/><text x="60.5665%" y="527.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (211 samples, 4.23%)</title><rect x="57.2917%" y="581" width="4.2268%" height="15" fill="rgb(221,65,9)"/><text x="57.5417%" y="591.50">alloc..</text></g><g><title>core::unicode::unicode_data::conversions::to_upper (137 samples, 2.74%)</title><rect x="58.7740%" y="565" width="2.7444%" height="15" fill="rgb(235,49,36)"/><text x="59.0240%" y="575.50">co..</text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (117 samples, 2.34%)</title><rect x="59.1747%" y="549" width="2.3438%" height="15" fill="rgb(225,32,20)"/><text x="59.4247%" y="559.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (117 samples, 2.34%)</title><rect x="59.1747%" y="533" width="2.3438%" height="15" fill="rgb(215,141,46)"/><text x="59.4247%" y="543.50">c..</text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (262 samples, 5.25%)</title><rect x="56.7107%" y="613" width="5.2484%" height="15" fill="rgb(250,160,47)"/><text x="56.9607%" y="623.50">&lt;sql_p..</text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (262 samples, 5.25%)</title><rect x="56.7107%" y="597" width="5.2484%" height="15" fill="rgb(216,222,40)"/><text x="56.9607%" y="607.50">sql_pa..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (22 samples, 0.44%)</title><rect x="61.5184%" y="581" width="0.4407%" height="15" fill="rgb(234,217,39)"/><text x="61.7684%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.36%)</title><rect x="61.5986%" y="565" width="0.3606%" height="15" fill="rgb(207,178,40)"/><text x="61.8486%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.18%)</title><rect x="61.7788%" y="549" width="0.1803%" height="15" fill="rgb(221,136,13)"/><text x="62.0288%" y="559.50"></text></g><g><title>__GI___libc_free (6 samples, 0.12%)</title><rect x="61.9591%" y="613" width="0.1202%" height="15" fill="rgb(249,199,10)"/><text x="62.2091%" y="623.50"></text></g><g><title>__GI___libc_realloc (20 samples, 0.40%)</title><rect x="62.3397%" y="597" width="0.4006%" height="15" fill="rgb(249,222,13)"/><text x="62.5897%" y="607.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="62.8005%" y="597" width="0.1202%" height="15" fill="rgb(244,185,38)"/><text x="63.0505%" y="607.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="63.0008%" y="581" width="0.1002%" height="15" fill="rgb(236,202,9)"/><text x="63.2508%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.24%)</title><rect x="62.9207%" y="597" width="0.2404%" height="15" fill="rgb(250,229,37)"/><text x="63.1707%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.30%)</title><rect x="63.3013%" y="581" width="0.3005%" height="15" fill="rgb(206,174,23)"/><text x="63.5513%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.18%)</title><rect x="63.4215%" y="565" width="0.1803%" height="15" fill="rgb(211,33,43)"/><text x="63.6715%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (366 samples, 7.33%)</title><rect x="56.4103%" y="629" width="7.3317%" height="15" fill="rgb(245,58,50)"/><text x="56.6603%" y="639.50">&lt;sql_parse..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (79 samples, 1.58%)</title><rect x="62.1595%" y="613" width="1.5825%" height="15" fill="rgb(244,68,36)"/><text x="62.4095%" y="623.50"></text></g><g><title>core::fmt::write (29 samples, 0.58%)</title><rect x="63.1611%" y="597" width="0.5809%" height="15" fill="rgb(232,229,15)"/><text x="63.4111%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.10%)</title><rect x="63.7420%" y="613" width="0.1002%" height="15" fill="rgb(254,30,23)"/><text x="63.9920%" y="623.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="63.9223%" y="613" width="0.1202%" height="15" fill="rgb(235,160,14)"/><text x="64.1723%" y="623.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.34%)</title><rect x="64.4231%" y="597" width="0.3405%" height="15" fill="rgb(212,155,44)"/><text x="64.6731%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.26%)</title><rect x="64.9239%" y="597" width="0.2604%" height="15" fill="rgb(226,2,50)"/><text x="65.1739%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.30%)</title><rect x="65.2644%" y="581" width="0.3005%" height="15" fill="rgb(234,177,6)"/><text x="65.5144%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.16%)</title><rect x="65.4046%" y="565" width="0.1603%" height="15" fill="rgb(217,24,9)"/><text x="65.6546%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (100 samples, 2.00%)</title><rect x="63.7420%" y="629" width="2.0032%" height="15" fill="rgb(220,13,46)"/><text x="63.9920%" y="639.50">&lt;..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (85 samples, 1.70%)</title><rect x="64.0425%" y="613" width="1.7027%" height="15" fill="rgb(239,221,27)"/><text x="64.2925%" y="623.50"></text></g><g><title>core::fmt::write (28 samples, 0.56%)</title><rect x="65.1843%" y="597" width="0.5609%" height="15" fill="rgb(222,198,25)"/><text x="65.4343%" y="607.50"></text></g><g><title>core::fmt::write (486 samples, 9.74%)</title><rect x="56.0697%" y="645" width="9.7356%" height="15" fill="rgb(211,99,13)"/><text x="56.3197%" y="655.50">core::fmt::wri..</text></g><g><title>decor_mem::select::get_query_results (2,660 samples, 53.29%)</title><rect x="13.4014%" y="709" width="53.2853%" height="15" fill="rgb(232,111,31)"/><text x="13.6514%" y="719.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (2,660 samples, 53.29%)</title><rect x="13.4014%" y="693" width="53.2853%" height="15" fill="rgb(245,82,37)"/><text x="13.6514%" y="703.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (2,301 samples, 46.09%)</title><rect x="20.5929%" y="677" width="46.0938%" height="15" fill="rgb(227,149,46)"/><text x="20.8429%" y="687.50">decor_mem::select::tablewithjoins_to_view</text></g><g><title>decor_mem::views::View::get_rows_of_col (634 samples, 12.70%)</title><rect x="53.9864%" y="661" width="12.7003%" height="15" fill="rgb(218,36,50)"/><text x="54.2364%" y="671.50">decor_mem::views::V..</text></g><g><title>hashbrown::map::make_hash (44 samples, 0.88%)</title><rect x="65.8053%" y="645" width="0.8814%" height="15" fill="rgb(226,80,48)"/><text x="66.0553%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.34%)</title><rect x="66.3462%" y="629" width="0.3405%" height="15" fill="rgb(238,224,15)"/><text x="66.5962%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="66.7468%" y="581" width="0.1202%" height="15" fill="rgb(241,136,10)"/><text x="66.9968%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.12%)</title><rect x="66.7468%" y="565" width="0.1202%" height="15" fill="rgb(208,32,45)"/><text x="66.9968%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (6 samples, 0.12%)</title><rect x="66.7468%" y="549" width="0.1202%" height="15" fill="rgb(207,135,9)"/><text x="66.9968%" y="559.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (2,722 samples, 54.53%)</title><rect x="12.3798%" y="725" width="54.5272%" height="15" fill="rgb(206,86,44)"/><text x="12.6298%" y="735.50">decor_mem::query_transformer::QueryTransformer::issue_statement</text></g><g><title>decor_mem::views::Views::update (11 samples, 0.22%)</title><rect x="66.6867%" y="709" width="0.2204%" height="15" fill="rgb(245,177,15)"/><text x="66.9367%" y="719.50"></text></g><g><title>decor_mem::select::get_value_for_rows (11 samples, 0.22%)</title><rect x="66.6867%" y="693" width="0.2204%" height="15" fill="rgb(206,64,50)"/><text x="66.9367%" y="703.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (9 samples, 0.18%)</title><rect x="66.7268%" y="677" width="0.1803%" height="15" fill="rgb(234,36,40)"/><text x="66.9768%" y="687.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (8 samples, 0.16%)</title><rect x="66.7468%" y="661" width="0.1603%" height="15" fill="rgb(213,64,8)"/><text x="66.9968%" y="671.50"></text></g><g><title>alloc::fmt::format (8 samples, 0.16%)</title><rect x="66.7468%" y="645" width="0.1603%" height="15" fill="rgb(210,75,36)"/><text x="66.9968%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (8 samples, 0.16%)</title><rect x="66.7468%" y="629" width="0.1603%" height="15" fill="rgb(229,88,21)"/><text x="66.9968%" y="639.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="66.7468%" y="613" width="0.1603%" height="15" fill="rgb(252,204,47)"/><text x="66.9968%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="66.7468%" y="597" width="0.1603%" height="15" fill="rgb(208,77,27)"/><text x="66.9968%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="66.9071%" y="661" width="0.1803%" height="15" fill="rgb(221,76,26)"/><text x="67.1571%" y="671.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (11 samples, 0.22%)</title><rect x="66.9071%" y="725" width="0.2204%" height="15" fill="rgb(225,139,18)"/><text x="67.1571%" y="735.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="66.9071%" y="709" width="0.2204%" height="15" fill="rgb(230,137,11)"/><text x="67.1571%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="66.9071%" y="693" width="0.2204%" height="15" fill="rgb(212,28,1)"/><text x="67.1571%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="66.9071%" y="677" width="0.2204%" height="15" fill="rgb(248,164,17)"/><text x="67.1571%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (10 samples, 0.20%)</title><rect x="67.2676%" y="677" width="0.2003%" height="15" fill="rgb(222,171,42)"/><text x="67.5176%" y="687.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.12%)</title><rect x="67.3478%" y="661" width="0.1202%" height="15" fill="rgb(243,84,45)"/><text x="67.5978%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (2,754 samples, 55.17%)</title><rect x="12.3798%" y="741" width="55.1683%" height="15" fill="rgb(252,49,23)"/><text x="12.6298%" y="751.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>decor_mem::stats::get_qtype (21 samples, 0.42%)</title><rect x="67.1274%" y="725" width="0.4207%" height="15" fill="rgb(215,19,7)"/><text x="67.3774%" y="735.50"></text></g><g><title>sql_parser::parser::parse_statements (21 samples, 0.42%)</title><rect x="67.1274%" y="709" width="0.4207%" height="15" fill="rgb(238,81,41)"/><text x="67.3774%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (21 samples, 0.42%)</title><rect x="67.1274%" y="693" width="0.4207%" height="15" fill="rgb(210,199,37)"/><text x="67.3774%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.38%)</title><rect x="67.5481%" y="741" width="0.3806%" height="15" fill="rgb(244,192,49)"/><text x="67.7981%" y="751.50"></text></g><g><title>__GI___libc_free (10 samples, 0.20%)</title><rect x="68.2893%" y="741" width="0.2003%" height="15" fill="rgb(226,211,11)"/><text x="68.5393%" y="751.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.24%)</title><rect x="68.4896%" y="741" width="0.2404%" height="15" fill="rgb(236,162,54)"/><text x="68.7396%" y="751.50"></text></g><g><title>_int_free (21 samples, 0.42%)</title><rect x="68.9303%" y="741" width="0.4207%" height="15" fill="rgb(220,229,9)"/><text x="69.1803%" y="751.50"></text></g><g><title>_int_malloc (7 samples, 0.14%)</title><rect x="69.3510%" y="741" width="0.1402%" height="15" fill="rgb(250,87,22)"/><text x="69.6010%" y="751.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="69.4912%" y="741" width="0.1002%" height="15" fill="rgb(239,43,17)"/><text x="69.7412%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="69.6114%" y="741" width="0.1002%" height="15" fill="rgb(231,177,25)"/><text x="69.8614%" y="751.50"></text></g><g><title>alloc::string::String::push (7 samples, 0.14%)</title><rect x="69.7316%" y="741" width="0.1402%" height="15" fill="rgb(219,179,1)"/><text x="69.9816%" y="751.50"></text></g><g><title>core::fmt::write (25 samples, 0.50%)</title><rect x="69.9720%" y="741" width="0.5008%" height="15" fill="rgb(238,219,53)"/><text x="70.2220%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="70.4728%" y="741" width="0.1402%" height="15" fill="rgb(232,167,36)"/><text x="70.7228%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.18%)</title><rect x="70.7332%" y="661" width="0.1803%" height="15" fill="rgb(244,19,51)"/><text x="70.9832%" y="671.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="70.7332%" y="645" width="0.1803%" height="15" fill="rgb(224,6,22)"/><text x="70.9832%" y="655.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="70.7332%" y="629" width="0.1803%" height="15" fill="rgb(224,145,5)"/><text x="70.9832%" y="639.50"></text></g><g><title>malloc_consolidate (10 samples, 0.20%)</title><rect x="71.2139%" y="581" width="0.2003%" height="15" fill="rgb(234,130,49)"/><text x="71.4639%" y="591.50"></text></g><g><title>__GI___libc_realloc (24 samples, 0.48%)</title><rect x="70.9535%" y="629" width="0.4808%" height="15" fill="rgb(254,6,2)"/><text x="71.2035%" y="639.50"></text></g><g><title>_int_realloc (22 samples, 0.44%)</title><rect x="70.9936%" y="613" width="0.4407%" height="15" fill="rgb(208,96,46)"/><text x="71.2436%" y="623.50"></text></g><g><title>_int_malloc (17 samples, 0.34%)</title><rect x="71.0938%" y="597" width="0.3405%" height="15" fill="rgb(239,3,39)"/><text x="71.3438%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (25 samples, 0.50%)</title><rect x="70.9535%" y="645" width="0.5008%" height="15" fill="rgb(233,210,1)"/><text x="71.2035%" y="655.50"></text></g><g><title>sql_parser::tokenizer::PeekableChars::next (5 samples, 0.10%)</title><rect x="71.6546%" y="629" width="0.1002%" height="15" fill="rgb(244,137,37)"/><text x="71.9046%" y="639.50"></text></g><g><title>__memcmp_avx2_movbe (7 samples, 0.14%)</title><rect x="72.2556%" y="613" width="0.1402%" height="15" fill="rgb(240,136,2)"/><text x="72.5056%" y="623.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (51 samples, 1.02%)</title><rect x="71.7548%" y="629" width="1.0216%" height="15" fill="rgb(239,18,37)"/><text x="72.0048%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (18 samples, 0.36%)</title><rect x="72.4159%" y="613" width="0.3606%" height="15" fill="rgb(218,185,22)"/><text x="72.6659%" y="623.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (14 samples, 0.28%)</title><rect x="72.4960%" y="597" width="0.2804%" height="15" fill="rgb(225,218,4)"/><text x="72.7460%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (8 samples, 0.16%)</title><rect x="72.6162%" y="581" width="0.1603%" height="15" fill="rgb(230,182,32)"/><text x="72.8662%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (8 samples, 0.16%)</title><rect x="72.6162%" y="565" width="0.1603%" height="15" fill="rgb(242,56,43)"/><text x="72.8662%" y="575.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (5 samples, 0.10%)</title><rect x="72.6763%" y="549" width="0.1002%" height="15" fill="rgb(233,99,24)"/><text x="72.9263%" y="559.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (73 samples, 1.46%)</title><rect x="71.4543%" y="645" width="1.4623%" height="15" fill="rgb(234,209,42)"/><text x="71.7043%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (6 samples, 0.12%)</title><rect x="72.7965%" y="629" width="0.1202%" height="15" fill="rgb(227,7,12)"/><text x="73.0465%" y="639.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (118 samples, 2.36%)</title><rect x="70.6130%" y="741" width="2.3638%" height="15" fill="rgb(245,203,43)"/><text x="70.8630%" y="751.50">de..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (118 samples, 2.36%)</title><rect x="70.6130%" y="725" width="2.3638%" height="15" fill="rgb(238,205,33)"/><text x="70.8630%" y="735.50">ms..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (118 samples, 2.36%)</title><rect x="70.6130%" y="709" width="2.3638%" height="15" fill="rgb(231,56,7)"/><text x="70.8630%" y="719.50">&lt;d..</text></g><g><title>decor_mem::stats::get_qtype (117 samples, 2.34%)</title><rect x="70.6330%" y="693" width="2.3438%" height="15" fill="rgb(244,186,29)"/><text x="70.8830%" y="703.50">d..</text></g><g><title>sql_parser::parser::parse_statements (117 samples, 2.34%)</title><rect x="70.6330%" y="677" width="2.3438%" height="15" fill="rgb(234,111,31)"/><text x="70.8830%" y="687.50">s..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (103 samples, 2.06%)</title><rect x="70.9135%" y="661" width="2.0633%" height="15" fill="rgb(241,149,10)"/><text x="71.1635%" y="671.50">s..</text></g><g><title>__GI___libc_realloc (44 samples, 0.88%)</title><rect x="73.1971%" y="581" width="0.8814%" height="15" fill="rgb(249,206,44)"/><text x="73.4471%" y="591.50"></text></g><g><title>_int_realloc (7 samples, 0.14%)</title><rect x="73.9383%" y="565" width="0.1402%" height="15" fill="rgb(251,153,30)"/><text x="74.1883%" y="575.50"></text></g><g><title>__rdl_realloc (5 samples, 0.10%)</title><rect x="74.0785%" y="581" width="0.1002%" height="15" fill="rgb(239,152,38)"/><text x="74.3285%" y="591.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="74.1787%" y="581" width="0.1002%" height="15" fill="rgb(249,139,47)"/><text x="74.4287%" y="591.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="74.4191%" y="565" width="0.2003%" height="15" fill="rgb(244,64,35)"/><text x="74.6691%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.36%)</title><rect x="74.2788%" y="581" width="0.3606%" height="15" fill="rgb(216,46,15)"/><text x="74.5288%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.24%)</title><rect x="75.0601%" y="549" width="0.2404%" height="15" fill="rgb(250,74,19)"/><text x="75.3101%" y="559.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="75.4006%" y="533" width="0.1202%" height="15" fill="rgb(249,42,33)"/><text x="75.6506%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (31 samples, 0.62%)</title><rect x="74.9199%" y="565" width="0.6210%" height="15" fill="rgb(242,149,17)"/><text x="75.1699%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.24%)</title><rect x="75.3005%" y="549" width="0.2404%" height="15" fill="rgb(244,29,21)"/><text x="75.5505%" y="559.50"></text></g><g><title>core::fmt::write (132 samples, 2.64%)</title><rect x="73.0569%" y="629" width="2.6442%" height="15" fill="rgb(220,130,37)"/><text x="73.3069%" y="639.50">co..</text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (130 samples, 2.60%)</title><rect x="73.0970%" y="613" width="2.6042%" height="15" fill="rgb(211,67,2)"/><text x="73.3470%" y="623.50">&lt;s..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (129 samples, 2.58%)</title><rect x="73.1170%" y="597" width="2.5841%" height="15" fill="rgb(235,68,52)"/><text x="73.3670%" y="607.50">sq..</text></g><g><title>core::fmt::write (53 samples, 1.06%)</title><rect x="74.6394%" y="581" width="1.0617%" height="15" fill="rgb(246,142,3)"/><text x="74.8894%" y="591.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (134 samples, 2.68%)</title><rect x="73.0369%" y="661" width="2.6843%" height="15" fill="rgb(241,25,7)"/><text x="73.2869%" y="671.50">de..</text></g><g><title>decor_mem::views::View::get_row_indices_of_col (133 samples, 2.66%)</title><rect x="73.0569%" y="645" width="2.6643%" height="15" fill="rgb(242,119,39)"/><text x="73.3069%" y="655.50">de..</text></g><g><title>decor_mem::select::get_rows_matching_constraint (140 samples, 2.80%)</title><rect x="73.0369%" y="693" width="2.8045%" height="15" fill="rgb(241,98,45)"/><text x="73.2869%" y="703.50">de..</text></g><g><title>decor_mem::select::get_rows_matching_constraint (140 samples, 2.80%)</title><rect x="73.0369%" y="677" width="2.8045%" height="15" fill="rgb(254,28,30)"/><text x="73.2869%" y="687.50">de..</text></g><g><title>decor_mem::select::get_value_for_rows (6 samples, 0.12%)</title><rect x="75.7212%" y="661" width="0.1202%" height="15" fill="rgb(241,142,54)"/><text x="75.9712%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (145 samples, 2.90%)</title><rect x="72.9768%" y="741" width="2.9046%" height="15" fill="rgb(222,85,15)"/><text x="73.2268%" y="751.50">de..</text></g><g><title>decor_mem::select::get_query_results (142 samples, 2.84%)</title><rect x="73.0369%" y="725" width="2.8446%" height="15" fill="rgb(210,85,47)"/><text x="73.2869%" y="735.50">de..</text></g><g><title>decor_mem::select::get_setexpr_results (142 samples, 2.84%)</title><rect x="73.0369%" y="709" width="2.8446%" height="15" fill="rgb(224,206,25)"/><text x="73.2869%" y="719.50">de..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (14 samples, 0.28%)</title><rect x="75.9816%" y="741" width="0.2804%" height="15" fill="rgb(243,201,19)"/><text x="76.2316%" y="751.50"></text></g><g><title>sql_parser::parser::parse_statements (13 samples, 0.26%)</title><rect x="76.0016%" y="725" width="0.2604%" height="15" fill="rgb(236,59,4)"/><text x="76.2516%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (13 samples, 0.26%)</title><rect x="76.0016%" y="709" width="0.2604%" height="15" fill="rgb(254,179,45)"/><text x="76.2516%" y="719.50"></text></g><g><title>decor_mem::views::View::get_rows_of_col (6 samples, 0.12%)</title><rect x="76.2620%" y="741" width="0.1202%" height="15" fill="rgb(226,14,10)"/><text x="76.5120%" y="751.50"></text></g><g><title>sk_wait_data (9 samples, 0.18%)</title><rect x="76.6226%" y="437" width="0.1803%" height="15" fill="rgb(244,27,41)"/><text x="76.8726%" y="447.50"></text></g><g><title>wait_woken (8 samples, 0.16%)</title><rect x="76.6426%" y="421" width="0.1603%" height="15" fill="rgb(235,35,32)"/><text x="76.8926%" y="431.50"></text></g><g><title>schedule_timeout (8 samples, 0.16%)</title><rect x="76.6426%" y="405" width="0.1603%" height="15" fill="rgb(218,68,31)"/><text x="76.8926%" y="415.50"></text></g><g><title>schedule (8 samples, 0.16%)</title><rect x="76.6426%" y="389" width="0.1603%" height="15" fill="rgb(207,120,37)"/><text x="76.8926%" y="399.50"></text></g><g><title>__schedule (8 samples, 0.16%)</title><rect x="76.6426%" y="373" width="0.1603%" height="15" fill="rgb(227,98,0)"/><text x="76.8926%" y="383.50"></text></g><g><title>inet_recvmsg (15 samples, 0.30%)</title><rect x="76.5625%" y="469" width="0.3005%" height="15" fill="rgb(207,7,3)"/><text x="76.8125%" y="479.50"></text></g><g><title>tcp_recvmsg (14 samples, 0.28%)</title><rect x="76.5825%" y="453" width="0.2804%" height="15" fill="rgb(206,98,19)"/><text x="76.8325%" y="463.50"></text></g><g><title>__x64_sys_recvfrom (19 samples, 0.38%)</title><rect x="76.5024%" y="501" width="0.3806%" height="15" fill="rgb(217,5,26)"/><text x="76.7524%" y="511.50"></text></g><g><title>__sys_recvfrom (19 samples, 0.38%)</title><rect x="76.5024%" y="485" width="0.3806%" height="15" fill="rgb(235,190,38)"/><text x="76.7524%" y="495.50"></text></g><g><title>do_syscall_64 (21 samples, 0.42%)</title><rect x="76.5024%" y="517" width="0.4207%" height="15" fill="rgb(247,86,24)"/><text x="76.7524%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (25 samples, 0.50%)</title><rect x="76.4824%" y="533" width="0.5008%" height="15" fill="rgb(205,101,16)"/><text x="76.7324%" y="543.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (26 samples, 0.52%)</title><rect x="76.4824%" y="629" width="0.5208%" height="15" fill="rgb(246,168,33)"/><text x="76.7324%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (26 samples, 0.52%)</title><rect x="76.4824%" y="613" width="0.5208%" height="15" fill="rgb(231,114,1)"/><text x="76.7324%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (26 samples, 0.52%)</title><rect x="76.4824%" y="597" width="0.5208%" height="15" fill="rgb(207,184,53)"/><text x="76.7324%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (26 samples, 0.52%)</title><rect x="76.4824%" y="581" width="0.5208%" height="15" fill="rgb(224,95,51)"/><text x="76.7324%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (26 samples, 0.52%)</title><rect x="76.4824%" y="565" width="0.5208%" height="15" fill="rgb(212,188,45)"/><text x="76.7324%" y="575.50"></text></g><g><title>__libc_recv (26 samples, 0.52%)</title><rect x="76.4824%" y="549" width="0.5208%" height="15" fill="rgb(223,154,38)"/><text x="76.7324%" y="559.50"></text></g><g><title>mysql::conn::Conn::read_packet (30 samples, 0.60%)</title><rect x="76.4423%" y="661" width="0.6010%" height="15" fill="rgb(251,22,52)"/><text x="76.6923%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.56%)</title><rect x="76.4824%" y="645" width="0.5609%" height="15" fill="rgb(229,209,22)"/><text x="76.7324%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (32 samples, 0.64%)</title><rect x="76.4423%" y="677" width="0.6410%" height="15" fill="rgb(234,138,34)"/><text x="76.6923%" y="687.50"></text></g><g><title>enqueue_task (6 samples, 0.12%)</title><rect x="77.7043%" y="101" width="0.1202%" height="15" fill="rgb(212,95,11)"/><text x="77.9543%" y="111.50"></text></g><g><title>sock_def_readable (12 samples, 0.24%)</title><rect x="77.6643%" y="165" width="0.2404%" height="15" fill="rgb(240,179,47)"/><text x="77.9143%" y="175.50"></text></g><g><title>__wake_up_common_lock (12 samples, 0.24%)</title><rect x="77.6643%" y="149" width="0.2404%" height="15" fill="rgb(240,163,11)"/><text x="77.9143%" y="159.50"></text></g><g><title>__wake_up_common (12 samples, 0.24%)</title><rect x="77.6643%" y="133" width="0.2404%" height="15" fill="rgb(236,37,12)"/><text x="77.9143%" y="143.50"></text></g><g><title>try_to_wake_up (12 samples, 0.24%)</title><rect x="77.6643%" y="117" width="0.2404%" height="15" fill="rgb(232,164,16)"/><text x="77.9143%" y="127.50"></text></g><g><title>tcp_ack (9 samples, 0.18%)</title><rect x="77.9046%" y="165" width="0.1803%" height="15" fill="rgb(244,205,15)"/><text x="78.1546%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (25 samples, 0.50%)</title><rect x="77.6442%" y="197" width="0.5008%" height="15" fill="rgb(223,117,47)"/><text x="77.8942%" y="207.50"></text></g><g><title>tcp_rcv_established (25 samples, 0.50%)</title><rect x="77.6442%" y="181" width="0.5008%" height="15" fill="rgb(244,107,35)"/><text x="77.8942%" y="191.50"></text></g><g><title>ip_local_deliver (27 samples, 0.54%)</title><rect x="77.6242%" y="261" width="0.5409%" height="15" fill="rgb(205,140,8)"/><text x="77.8742%" y="271.50"></text></g><g><title>ip_local_deliver_finish (27 samples, 0.54%)</title><rect x="77.6242%" y="245" width="0.5409%" height="15" fill="rgb(228,84,46)"/><text x="77.8742%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (27 samples, 0.54%)</title><rect x="77.6242%" y="229" width="0.5409%" height="15" fill="rgb(254,188,9)"/><text x="77.8742%" y="239.50"></text></g><g><title>tcp_v4_rcv (27 samples, 0.54%)</title><rect x="77.6242%" y="213" width="0.5409%" height="15" fill="rgb(206,112,54)"/><text x="77.8742%" y="223.50"></text></g><g><title>do_softirq (36 samples, 0.72%)</title><rect x="77.4840%" y="373" width="0.7212%" height="15" fill="rgb(216,84,49)"/><text x="77.7340%" y="383.50"></text></g><g><title>do_softirq_own_stack (36 samples, 0.72%)</title><rect x="77.4840%" y="357" width="0.7212%" height="15" fill="rgb(214,194,35)"/><text x="77.7340%" y="367.50"></text></g><g><title>__do_softirq (36 samples, 0.72%)</title><rect x="77.4840%" y="341" width="0.7212%" height="15" fill="rgb(249,28,3)"/><text x="77.7340%" y="351.50"></text></g><g><title>net_rx_action (34 samples, 0.68%)</title><rect x="77.5240%" y="325" width="0.6811%" height="15" fill="rgb(222,56,52)"/><text x="77.7740%" y="335.50"></text></g><g><title>process_backlog (33 samples, 0.66%)</title><rect x="77.5441%" y="309" width="0.6611%" height="15" fill="rgb(245,217,50)"/><text x="77.7941%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (33 samples, 0.66%)</title><rect x="77.5441%" y="293" width="0.6611%" height="15" fill="rgb(213,201,24)"/><text x="77.7941%" y="303.50"></text></g><g><title>ip_rcv (31 samples, 0.62%)</title><rect x="77.5841%" y="277" width="0.6210%" height="15" fill="rgb(248,116,28)"/><text x="77.8341%" y="287.50"></text></g><g><title>__local_bh_enable_ip (38 samples, 0.76%)</title><rect x="77.4639%" y="389" width="0.7612%" height="15" fill="rgb(219,72,43)"/><text x="77.7139%" y="399.50"></text></g><g><title>__ip_queue_xmit (44 samples, 0.88%)</title><rect x="77.3638%" y="437" width="0.8814%" height="15" fill="rgb(209,138,14)"/><text x="77.6138%" y="447.50"></text></g><g><title>ip_output (44 samples, 0.88%)</title><rect x="77.3638%" y="421" width="0.8814%" height="15" fill="rgb(222,18,33)"/><text x="77.6138%" y="431.50"></text></g><g><title>ip_finish_output2 (43 samples, 0.86%)</title><rect x="77.3838%" y="405" width="0.8614%" height="15" fill="rgb(213,199,7)"/><text x="77.6338%" y="415.50"></text></g><g><title>__tcp_transmit_skb (49 samples, 0.98%)</title><rect x="77.3438%" y="453" width="0.9816%" height="15" fill="rgb(250,110,10)"/><text x="77.5938%" y="463.50"></text></g><g><title>__tcp_push_pending_frames (53 samples, 1.06%)</title><rect x="77.3037%" y="485" width="1.0617%" height="15" fill="rgb(248,123,6)"/><text x="77.5537%" y="495.50"></text></g><g><title>tcp_write_xmit (53 samples, 1.06%)</title><rect x="77.3037%" y="469" width="1.0617%" height="15" fill="rgb(206,91,31)"/><text x="77.5537%" y="479.50"></text></g><g><title>sock_sendmsg (62 samples, 1.24%)</title><rect x="77.2035%" y="533" width="1.2420%" height="15" fill="rgb(211,154,13)"/><text x="77.4535%" y="543.50"></text></g><g><title>tcp_sendmsg (62 samples, 1.24%)</title><rect x="77.2035%" y="517" width="1.2420%" height="15" fill="rgb(225,148,7)"/><text x="77.4535%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (61 samples, 1.22%)</title><rect x="77.2236%" y="501" width="1.2220%" height="15" fill="rgb(220,160,43)"/><text x="77.4736%" y="511.50"></text></g><g><title>do_syscall_64 (65 samples, 1.30%)</title><rect x="77.1635%" y="581" width="1.3021%" height="15" fill="rgb(213,52,39)"/><text x="77.4135%" y="591.50"></text></g><g><title>__x64_sys_sendto (65 samples, 1.30%)</title><rect x="77.1635%" y="565" width="1.3021%" height="15" fill="rgb(243,137,7)"/><text x="77.4135%" y="575.50"></text></g><g><title>__sys_sendto (65 samples, 1.30%)</title><rect x="77.1635%" y="549" width="1.3021%" height="15" fill="rgb(230,79,13)"/><text x="77.4135%" y="559.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (103 samples, 2.06%)</title><rect x="76.4423%" y="709" width="2.0633%" height="15" fill="rgb(247,105,23)"/><text x="76.6923%" y="719.50">&lt;..</text></g><g><title>mysql::conn::Conn::_query (103 samples, 2.06%)</title><rect x="76.4423%" y="693" width="2.0633%" height="15" fill="rgb(223,179,41)"/><text x="76.6923%" y="703.50">m..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (71 samples, 1.42%)</title><rect x="77.0833%" y="677" width="1.4223%" height="15" fill="rgb(218,9,34)"/><text x="77.3333%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (69 samples, 1.38%)</title><rect x="77.1234%" y="661" width="1.3822%" height="15" fill="rgb(222,106,8)"/><text x="77.3734%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (69 samples, 1.38%)</title><rect x="77.1234%" y="645" width="1.3822%" height="15" fill="rgb(211,220,0)"/><text x="77.3734%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (69 samples, 1.38%)</title><rect x="77.1234%" y="629" width="1.3822%" height="15" fill="rgb(229,52,16)"/><text x="77.3734%" y="639.50"></text></g><g><title>__libc_send (69 samples, 1.38%)</title><rect x="77.1234%" y="613" width="1.3822%" height="15" fill="rgb(212,155,18)"/><text x="77.3734%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (68 samples, 1.36%)</title><rect x="77.1434%" y="597" width="1.3622%" height="15" fill="rgb(242,21,14)"/><text x="77.3934%" y="607.50"></text></g><g><title>mysql::conn::Conn::read_packet (5 samples, 0.10%)</title><rect x="78.6058%" y="645" width="0.1002%" height="15" fill="rgb(222,19,48)"/><text x="78.8558%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (6 samples, 0.12%)</title><rect x="78.6058%" y="661" width="0.1202%" height="15" fill="rgb(232,45,27)"/><text x="78.8558%" y="671.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="78.7260%" y="565" width="0.1202%" height="15" fill="rgb(249,103,42)"/><text x="78.9760%" y="575.50"></text></g><g><title>__x64_sys_sendto (6 samples, 0.12%)</title><rect x="78.7260%" y="549" width="0.1202%" height="15" fill="rgb(246,81,33)"/><text x="78.9760%" y="559.50"></text></g><g><title>__sys_sendto (6 samples, 0.12%)</title><rect x="78.7260%" y="533" width="0.1202%" height="15" fill="rgb(252,33,42)"/><text x="78.9760%" y="543.50"></text></g><g><title>sock_sendmsg (6 samples, 0.12%)</title><rect x="78.7260%" y="517" width="0.1202%" height="15" fill="rgb(209,212,41)"/><text x="78.9760%" y="527.50"></text></g><g><title>tcp_sendmsg (6 samples, 0.12%)</title><rect x="78.7260%" y="501" width="0.1202%" height="15" fill="rgb(207,154,6)"/><text x="78.9760%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (6 samples, 0.12%)</title><rect x="78.7260%" y="485" width="0.1202%" height="15" fill="rgb(223,64,47)"/><text x="78.9760%" y="495.50"></text></g><g><title>lobsters_microbenchmarks::main (123 samples, 2.46%)</title><rect x="76.4022%" y="741" width="2.4639%" height="15" fill="rgb(211,161,38)"/><text x="76.6522%" y="751.50">lo..</text></g><g><title>lobsters_microbenchmarks::queriers::vote::vote_on_story (121 samples, 2.42%)</title><rect x="76.4423%" y="725" width="2.4239%" height="15" fill="rgb(219,138,40)"/><text x="76.6923%" y="735.50">lo..</text></g><g><title>mysql::conn::queryable::Queryable::query (15 samples, 0.30%)</title><rect x="78.5657%" y="709" width="0.3005%" height="15" fill="rgb(241,228,46)"/><text x="78.8157%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (13 samples, 0.26%)</title><rect x="78.6058%" y="693" width="0.2604%" height="15" fill="rgb(223,209,38)"/><text x="78.8558%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (13 samples, 0.26%)</title><rect x="78.6058%" y="677" width="0.2604%" height="15" fill="rgb(236,164,45)"/><text x="78.8558%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (7 samples, 0.14%)</title><rect x="78.7260%" y="661" width="0.1402%" height="15" fill="rgb(231,15,5)"/><text x="78.9760%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (7 samples, 0.14%)</title><rect x="78.7260%" y="645" width="0.1402%" height="15" fill="rgb(252,35,15)"/><text x="78.9760%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (7 samples, 0.14%)</title><rect x="78.7260%" y="629" width="0.1402%" height="15" fill="rgb(248,181,18)"/><text x="78.9760%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (7 samples, 0.14%)</title><rect x="78.7260%" y="613" width="0.1402%" height="15" fill="rgb(233,39,42)"/><text x="78.9760%" y="623.50"></text></g><g><title>__libc_send (7 samples, 0.14%)</title><rect x="78.7260%" y="597" width="0.1402%" height="15" fill="rgb(238,110,33)"/><text x="78.9760%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (7 samples, 0.14%)</title><rect x="78.7260%" y="581" width="0.1402%" height="15" fill="rgb(233,195,10)"/><text x="78.9760%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="78.9864%" y="693" width="0.1002%" height="15" fill="rgb(254,105,3)"/><text x="79.2364%" y="703.50"></text></g><g><title>sock_def_readable (8 samples, 0.16%)</title><rect x="79.4671%" y="149" width="0.1603%" height="15" fill="rgb(221,225,9)"/><text x="79.7171%" y="159.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.14%)</title><rect x="79.4872%" y="133" width="0.1402%" height="15" fill="rgb(224,227,45)"/><text x="79.7372%" y="143.50"></text></g><g><title>__wake_up_common (7 samples, 0.14%)</title><rect x="79.4872%" y="117" width="0.1402%" height="15" fill="rgb(229,198,43)"/><text x="79.7372%" y="127.50"></text></g><g><title>pollwake (7 samples, 0.14%)</title><rect x="79.4872%" y="101" width="0.1402%" height="15" fill="rgb(206,209,35)"/><text x="79.7372%" y="111.50"></text></g><g><title>try_to_wake_up (7 samples, 0.14%)</title><rect x="79.4872%" y="85" width="0.1402%" height="15" fill="rgb(245,195,53)"/><text x="79.7372%" y="95.50"></text></g><g><title>ip_local_deliver (14 samples, 0.28%)</title><rect x="79.4271%" y="245" width="0.2804%" height="15" fill="rgb(240,92,26)"/><text x="79.6771%" y="255.50"></text></g><g><title>ip_local_deliver_finish (14 samples, 0.28%)</title><rect x="79.4271%" y="229" width="0.2804%" height="15" fill="rgb(207,40,23)"/><text x="79.6771%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (14 samples, 0.28%)</title><rect x="79.4271%" y="213" width="0.2804%" height="15" fill="rgb(223,111,35)"/><text x="79.6771%" y="223.50"></text></g><g><title>tcp_v4_rcv (14 samples, 0.28%)</title><rect x="79.4271%" y="197" width="0.2804%" height="15" fill="rgb(229,147,28)"/><text x="79.6771%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (14 samples, 0.28%)</title><rect x="79.4271%" y="181" width="0.2804%" height="15" fill="rgb(211,29,28)"/><text x="79.6771%" y="191.50"></text></g><g><title>tcp_rcv_established (13 samples, 0.26%)</title><rect x="79.4471%" y="165" width="0.2604%" height="15" fill="rgb(228,72,33)"/><text x="79.6971%" y="175.50"></text></g><g><title>__ip_queue_xmit (23 samples, 0.46%)</title><rect x="79.2668%" y="421" width="0.4607%" height="15" fill="rgb(205,214,31)"/><text x="79.5168%" y="431.50"></text></g><g><title>ip_output (23 samples, 0.46%)</title><rect x="79.2668%" y="405" width="0.4607%" height="15" fill="rgb(224,111,15)"/><text x="79.5168%" y="415.50"></text></g><g><title>ip_finish_output2 (23 samples, 0.46%)</title><rect x="79.2668%" y="389" width="0.4607%" height="15" fill="rgb(253,21,26)"/><text x="79.5168%" y="399.50"></text></g><g><title>__local_bh_enable_ip (21 samples, 0.42%)</title><rect x="79.3069%" y="373" width="0.4207%" height="15" fill="rgb(245,139,43)"/><text x="79.5569%" y="383.50"></text></g><g><title>do_softirq (21 samples, 0.42%)</title><rect x="79.3069%" y="357" width="0.4207%" height="15" fill="rgb(252,170,7)"/><text x="79.5569%" y="367.50"></text></g><g><title>do_softirq_own_stack (21 samples, 0.42%)</title><rect x="79.3069%" y="341" width="0.4207%" height="15" fill="rgb(231,118,14)"/><text x="79.5569%" y="351.50"></text></g><g><title>__do_softirq (21 samples, 0.42%)</title><rect x="79.3069%" y="325" width="0.4207%" height="15" fill="rgb(238,83,0)"/><text x="79.5569%" y="335.50"></text></g><g><title>net_rx_action (21 samples, 0.42%)</title><rect x="79.3069%" y="309" width="0.4207%" height="15" fill="rgb(221,39,39)"/><text x="79.5569%" y="319.50"></text></g><g><title>process_backlog (20 samples, 0.40%)</title><rect x="79.3269%" y="293" width="0.4006%" height="15" fill="rgb(222,119,46)"/><text x="79.5769%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (19 samples, 0.38%)</title><rect x="79.3470%" y="277" width="0.3806%" height="15" fill="rgb(222,165,49)"/><text x="79.5970%" y="287.50"></text></g><g><title>ip_rcv (16 samples, 0.32%)</title><rect x="79.4071%" y="261" width="0.3205%" height="15" fill="rgb(219,113,52)"/><text x="79.6571%" y="271.50"></text></g><g><title>__tcp_transmit_skb (25 samples, 0.50%)</title><rect x="79.2468%" y="437" width="0.5008%" height="15" fill="rgb(214,7,15)"/><text x="79.4968%" y="447.50"></text></g><g><title>__tcp_push_pending_frames (28 samples, 0.56%)</title><rect x="79.2468%" y="469" width="0.5609%" height="15" fill="rgb(235,32,4)"/><text x="79.4968%" y="479.50"></text></g><g><title>tcp_write_xmit (28 samples, 0.56%)</title><rect x="79.2468%" y="453" width="0.5609%" height="15" fill="rgb(238,90,54)"/><text x="79.4968%" y="463.50"></text></g><g><title>__x64_sys_sendto (31 samples, 0.62%)</title><rect x="79.2268%" y="549" width="0.6210%" height="15" fill="rgb(213,208,19)"/><text x="79.4768%" y="559.50"></text></g><g><title>__sys_sendto (31 samples, 0.62%)</title><rect x="79.2268%" y="533" width="0.6210%" height="15" fill="rgb(233,156,4)"/><text x="79.4768%" y="543.50"></text></g><g><title>sock_sendmsg (31 samples, 0.62%)</title><rect x="79.2268%" y="517" width="0.6210%" height="15" fill="rgb(207,194,5)"/><text x="79.4768%" y="527.50"></text></g><g><title>tcp_sendmsg (31 samples, 0.62%)</title><rect x="79.2268%" y="501" width="0.6210%" height="15" fill="rgb(206,111,30)"/><text x="79.4768%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (31 samples, 0.62%)</title><rect x="79.2268%" y="485" width="0.6210%" height="15" fill="rgb(243,70,54)"/><text x="79.4768%" y="495.50"></text></g><g><title>do_syscall_64 (32 samples, 0.64%)</title><rect x="79.2268%" y="565" width="0.6410%" height="15" fill="rgb(242,28,8)"/><text x="79.4768%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (39 samples, 0.78%)</title><rect x="79.1266%" y="693" width="0.7812%" height="15" fill="rgb(219,106,18)"/><text x="79.3766%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (38 samples, 0.76%)</title><rect x="79.1466%" y="677" width="0.7612%" height="15" fill="rgb(244,222,10)"/><text x="79.3966%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (36 samples, 0.72%)</title><rect x="79.1867%" y="661" width="0.7212%" height="15" fill="rgb(236,179,52)"/><text x="79.4367%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (35 samples, 0.70%)</title><rect x="79.2067%" y="645" width="0.7011%" height="15" fill="rgb(213,23,39)"/><text x="79.4567%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (35 samples, 0.70%)</title><rect x="79.2067%" y="629" width="0.7011%" height="15" fill="rgb(238,48,10)"/><text x="79.4567%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (35 samples, 0.70%)</title><rect x="79.2067%" y="613" width="0.7011%" height="15" fill="rgb(251,196,23)"/><text x="79.4567%" y="623.50"></text></g><g><title>__libc_send (35 samples, 0.70%)</title><rect x="79.2067%" y="597" width="0.7011%" height="15" fill="rgb(250,152,24)"/><text x="79.4567%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (34 samples, 0.68%)</title><rect x="79.2268%" y="581" width="0.6811%" height="15" fill="rgb(209,150,17)"/><text x="79.4768%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::UpdateStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.20%)</title><rect x="80.2284%" y="661" width="0.2003%" height="15" fill="rgb(234,202,34)"/><text x="80.4784%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="80.3285%" y="645" width="0.1002%" height="15" fill="rgb(253,148,53)"/><text x="80.5785%" y="655.50"></text></g><g><title>core::fmt::write (24 samples, 0.48%)</title><rect x="79.9880%" y="693" width="0.4808%" height="15" fill="rgb(218,129,16)"/><text x="80.2380%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (20 samples, 0.40%)</title><rect x="80.0681%" y="677" width="0.4006%" height="15" fill="rgb(216,85,19)"/><text x="80.3181%" y="687.50"></text></g><g><title>sock_def_readable (7 samples, 0.14%)</title><rect x="80.6090%" y="133" width="0.1402%" height="15" fill="rgb(235,228,7)"/><text x="80.8590%" y="143.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.14%)</title><rect x="80.6090%" y="117" width="0.1402%" height="15" fill="rgb(245,175,0)"/><text x="80.8590%" y="127.50"></text></g><g><title>__wake_up_common (7 samples, 0.14%)</title><rect x="80.6090%" y="101" width="0.1402%" height="15" fill="rgb(208,168,36)"/><text x="80.8590%" y="111.50"></text></g><g><title>pollwake (7 samples, 0.14%)</title><rect x="80.6090%" y="85" width="0.1402%" height="15" fill="rgb(246,171,24)"/><text x="80.8590%" y="95.50"></text></g><g><title>try_to_wake_up (6 samples, 0.12%)</title><rect x="80.6290%" y="69" width="0.1202%" height="15" fill="rgb(215,142,24)"/><text x="80.8790%" y="79.50"></text></g><g><title>ip_local_deliver (11 samples, 0.22%)</title><rect x="80.6090%" y="229" width="0.2204%" height="15" fill="rgb(250,187,7)"/><text x="80.8590%" y="239.50"></text></g><g><title>ip_local_deliver_finish (11 samples, 0.22%)</title><rect x="80.6090%" y="213" width="0.2204%" height="15" fill="rgb(228,66,33)"/><text x="80.8590%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (11 samples, 0.22%)</title><rect x="80.6090%" y="197" width="0.2204%" height="15" fill="rgb(234,215,21)"/><text x="80.8590%" y="207.50"></text></g><g><title>tcp_v4_rcv (11 samples, 0.22%)</title><rect x="80.6090%" y="181" width="0.2204%" height="15" fill="rgb(222,191,20)"/><text x="80.8590%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (11 samples, 0.22%)</title><rect x="80.6090%" y="165" width="0.2204%" height="15" fill="rgb(245,79,54)"/><text x="80.8590%" y="175.50"></text></g><g><title>tcp_rcv_established (11 samples, 0.22%)</title><rect x="80.6090%" y="149" width="0.2204%" height="15" fill="rgb(240,10,37)"/><text x="80.8590%" y="159.50"></text></g><g><title>__tcp_push_pending_frames (16 samples, 0.32%)</title><rect x="80.5489%" y="453" width="0.3205%" height="15" fill="rgb(214,192,32)"/><text x="80.7989%" y="463.50"></text></g><g><title>tcp_write_xmit (16 samples, 0.32%)</title><rect x="80.5489%" y="437" width="0.3205%" height="15" fill="rgb(209,36,54)"/><text x="80.7989%" y="447.50"></text></g><g><title>__tcp_transmit_skb (16 samples, 0.32%)</title><rect x="80.5489%" y="421" width="0.3205%" height="15" fill="rgb(220,10,11)"/><text x="80.7989%" y="431.50"></text></g><g><title>__ip_queue_xmit (14 samples, 0.28%)</title><rect x="80.5889%" y="405" width="0.2804%" height="15" fill="rgb(221,106,17)"/><text x="80.8389%" y="415.50"></text></g><g><title>ip_output (13 samples, 0.26%)</title><rect x="80.6090%" y="389" width="0.2604%" height="15" fill="rgb(251,142,44)"/><text x="80.8590%" y="399.50"></text></g><g><title>ip_finish_output2 (13 samples, 0.26%)</title><rect x="80.6090%" y="373" width="0.2604%" height="15" fill="rgb(238,13,15)"/><text x="80.8590%" y="383.50"></text></g><g><title>__local_bh_enable_ip (13 samples, 0.26%)</title><rect x="80.6090%" y="357" width="0.2604%" height="15" fill="rgb(208,107,27)"/><text x="80.8590%" y="367.50"></text></g><g><title>do_softirq (13 samples, 0.26%)</title><rect x="80.6090%" y="341" width="0.2604%" height="15" fill="rgb(205,136,37)"/><text x="80.8590%" y="351.50"></text></g><g><title>do_softirq_own_stack (13 samples, 0.26%)</title><rect x="80.6090%" y="325" width="0.2604%" height="15" fill="rgb(250,205,27)"/><text x="80.8590%" y="335.50"></text></g><g><title>__do_softirq (13 samples, 0.26%)</title><rect x="80.6090%" y="309" width="0.2604%" height="15" fill="rgb(210,80,43)"/><text x="80.8590%" y="319.50"></text></g><g><title>net_rx_action (13 samples, 0.26%)</title><rect x="80.6090%" y="293" width="0.2604%" height="15" fill="rgb(247,160,36)"/><text x="80.8590%" y="303.50"></text></g><g><title>process_backlog (13 samples, 0.26%)</title><rect x="80.6090%" y="277" width="0.2604%" height="15" fill="rgb(234,13,49)"/><text x="80.8590%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (13 samples, 0.26%)</title><rect x="80.6090%" y="261" width="0.2604%" height="15" fill="rgb(234,122,0)"/><text x="80.8590%" y="271.50"></text></g><g><title>ip_rcv (13 samples, 0.26%)</title><rect x="80.6090%" y="245" width="0.2604%" height="15" fill="rgb(207,146,38)"/><text x="80.8590%" y="255.50"></text></g><g><title>__x64_sys_sendto (20 samples, 0.40%)</title><rect x="80.5088%" y="533" width="0.4006%" height="15" fill="rgb(207,177,25)"/><text x="80.7588%" y="543.50"></text></g><g><title>__sys_sendto (20 samples, 0.40%)</title><rect x="80.5088%" y="517" width="0.4006%" height="15" fill="rgb(211,178,42)"/><text x="80.7588%" y="527.50"></text></g><g><title>sock_sendmsg (20 samples, 0.40%)</title><rect x="80.5088%" y="501" width="0.4006%" height="15" fill="rgb(230,69,54)"/><text x="80.7588%" y="511.50"></text></g><g><title>tcp_sendmsg (20 samples, 0.40%)</title><rect x="80.5088%" y="485" width="0.4006%" height="15" fill="rgb(214,135,41)"/><text x="80.7588%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (20 samples, 0.40%)</title><rect x="80.5088%" y="469" width="0.4006%" height="15" fill="rgb(237,67,25)"/><text x="80.7588%" y="479.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (21 samples, 0.42%)</title><rect x="80.5088%" y="677" width="0.4207%" height="15" fill="rgb(222,189,50)"/><text x="80.7588%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (21 samples, 0.42%)</title><rect x="80.5088%" y="661" width="0.4207%" height="15" fill="rgb(245,148,34)"/><text x="80.7588%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (21 samples, 0.42%)</title><rect x="80.5088%" y="645" width="0.4207%" height="15" fill="rgb(222,29,6)"/><text x="80.7588%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (21 samples, 0.42%)</title><rect x="80.5088%" y="629" width="0.4207%" height="15" fill="rgb(221,189,43)"/><text x="80.7588%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (21 samples, 0.42%)</title><rect x="80.5088%" y="613" width="0.4207%" height="15" fill="rgb(207,36,27)"/><text x="80.7588%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (21 samples, 0.42%)</title><rect x="80.5088%" y="597" width="0.4207%" height="15" fill="rgb(217,90,24)"/><text x="80.7588%" y="607.50"></text></g><g><title>__libc_send (21 samples, 0.42%)</title><rect x="80.5088%" y="581" width="0.4207%" height="15" fill="rgb(224,66,35)"/><text x="80.7588%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (21 samples, 0.42%)</title><rect x="80.5088%" y="565" width="0.4207%" height="15" fill="rgb(221,13,50)"/><text x="80.7588%" y="575.50"></text></g><g><title>do_syscall_64 (21 samples, 0.42%)</title><rect x="80.5088%" y="549" width="0.4207%" height="15" fill="rgb(236,68,49)"/><text x="80.7588%" y="559.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (23 samples, 0.46%)</title><rect x="80.5088%" y="693" width="0.4607%" height="15" fill="rgb(229,146,28)"/><text x="80.7588%" y="703.50"></text></g><g><title>decor_mem::select::get_query_results (16 samples, 0.32%)</title><rect x="81.1498%" y="693" width="0.3205%" height="15" fill="rgb(225,31,38)"/><text x="81.3998%" y="703.50"></text></g><g><title>decor_mem::select::get_setexpr_results (16 samples, 0.32%)</title><rect x="81.1498%" y="677" width="0.3205%" height="15" fill="rgb(250,208,3)"/><text x="81.3998%" y="687.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.14%)</title><rect x="81.6106%" y="597" width="0.1402%" height="15" fill="rgb(246,54,23)"/><text x="81.8606%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (5 samples, 0.10%)</title><rect x="81.6506%" y="581" width="0.1002%" height="15" fill="rgb(243,76,11)"/><text x="81.9006%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (5 samples, 0.10%)</title><rect x="81.6506%" y="565" width="0.1002%" height="15" fill="rgb(245,21,50)"/><text x="81.9006%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (5 samples, 0.10%)</title><rect x="81.6506%" y="549" width="0.1002%" height="15" fill="rgb(228,9,43)"/><text x="81.9006%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.20%)</title><rect x="81.5705%" y="629" width="0.2003%" height="15" fill="rgb(208,100,47)"/><text x="81.8205%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (10 samples, 0.20%)</title><rect x="81.5705%" y="613" width="0.2003%" height="15" fill="rgb(232,26,8)"/><text x="81.8205%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (14 samples, 0.28%)</title><rect x="81.5505%" y="645" width="0.2804%" height="15" fill="rgb(216,166,38)"/><text x="81.8005%" y="655.50"></text></g><g><title>core::fmt::write (22 samples, 0.44%)</title><rect x="81.5304%" y="661" width="0.4407%" height="15" fill="rgb(251,202,51)"/><text x="81.7804%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.14%)</title><rect x="81.8309%" y="645" width="0.1402%" height="15" fill="rgb(254,216,34)"/><text x="82.0809%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="81.8710%" y="629" width="0.1002%" height="15" fill="rgb(251,32,27)"/><text x="82.1210%" y="639.50"></text></g><g><title>decor_mem::views::Views::insert (30 samples, 0.60%)</title><rect x="81.4704%" y="693" width="0.6010%" height="15" fill="rgb(208,127,28)"/><text x="81.7204%" y="703.50"></text></g><g><title>decor_mem::views::View::insert_into_index (28 samples, 0.56%)</title><rect x="81.5104%" y="677" width="0.5609%" height="15" fill="rgb(224,137,22)"/><text x="81.7604%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.10%)</title><rect x="81.9712%" y="661" width="0.1002%" height="15" fill="rgb(254,70,32)"/><text x="82.2212%" y="671.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="82.1114%" y="677" width="0.1002%" height="15" fill="rgb(229,75,37)"/><text x="82.3614%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::ObjectName as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="82.1114%" y="661" width="0.1002%" height="15" fill="rgb(252,64,23)"/><text x="82.3614%" y="671.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (7 samples, 0.14%)</title><rect x="82.2115%" y="677" width="0.1402%" height="15" fill="rgb(232,162,48)"/><text x="82.4615%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="82.4920%" y="613" width="0.1202%" height="15" fill="rgb(246,160,12)"/><text x="82.7420%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (5 samples, 0.10%)</title><rect x="82.5120%" y="597" width="0.1002%" height="15" fill="rgb(247,166,0)"/><text x="82.7620%" y="607.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="82.4920%" y="645" width="0.2003%" height="15" fill="rgb(249,219,21)"/><text x="82.7420%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (10 samples, 0.20%)</title><rect x="82.4920%" y="629" width="0.2003%" height="15" fill="rgb(205,209,3)"/><text x="82.7420%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (191 samples, 3.83%)</title><rect x="78.9062%" y="709" width="3.8261%" height="15" fill="rgb(243,44,1)"/><text x="79.1562%" y="719.50">deco..</text></g><g><title>decor_mem::views::Views::update (33 samples, 0.66%)</title><rect x="82.0713%" y="693" width="0.6611%" height="15" fill="rgb(206,159,16)"/><text x="82.3213%" y="703.50"></text></g><g><title>decor_mem::select::get_value_for_rows (19 samples, 0.38%)</title><rect x="82.3518%" y="677" width="0.3806%" height="15" fill="rgb(244,77,30)"/><text x="82.6018%" y="687.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (13 samples, 0.26%)</title><rect x="82.4720%" y="661" width="0.2604%" height="15" fill="rgb(218,69,12)"/><text x="82.7220%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="82.7324%" y="693" width="0.1402%" height="15" fill="rgb(212,87,7)"/><text x="82.9824%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (20 samples, 0.40%)</title><rect x="83.1130%" y="645" width="0.4006%" height="15" fill="rgb(245,114,25)"/><text x="83.3630%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (27 samples, 0.54%)</title><rect x="83.0128%" y="661" width="0.5409%" height="15" fill="rgb(210,61,42)"/><text x="83.2628%" y="671.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (43 samples, 0.86%)</title><rect x="82.7324%" y="709" width="0.8614%" height="15" fill="rgb(211,52,33)"/><text x="82.9824%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (36 samples, 0.72%)</title><rect x="82.8726%" y="693" width="0.7212%" height="15" fill="rgb(234,58,33)"/><text x="83.1226%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (31 samples, 0.62%)</title><rect x="82.9728%" y="677" width="0.6210%" height="15" fill="rgb(220,115,36)"/><text x="83.2228%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (9 samples, 0.18%)</title><rect x="83.5938%" y="645" width="0.1803%" height="15" fill="rgb(243,153,54)"/><text x="83.8438%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (5 samples, 0.10%)</title><rect x="83.6739%" y="629" width="0.1002%" height="15" fill="rgb(251,47,18)"/><text x="83.9239%" y="639.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (247 samples, 4.95%)</title><rect x="78.8662%" y="741" width="4.9479%" height="15" fill="rgb(242,102,42)"/><text x="79.1162%" y="751.50">msql_s..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (245 samples, 4.91%)</title><rect x="78.9062%" y="725" width="4.9079%" height="15" fill="rgb(234,31,38)"/><text x="79.1562%" y="735.50">&lt;decor..</text></g><g><title>decor_mem::stats::get_qtype (11 samples, 0.22%)</title><rect x="83.5938%" y="709" width="0.2204%" height="15" fill="rgb(221,117,51)"/><text x="83.8438%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (11 samples, 0.22%)</title><rect x="83.5938%" y="693" width="0.2204%" height="15" fill="rgb(212,20,18)"/><text x="83.8438%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (11 samples, 0.22%)</title><rect x="83.5938%" y="677" width="0.2204%" height="15" fill="rgb(245,133,36)"/><text x="83.8438%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (11 samples, 0.22%)</title><rect x="83.5938%" y="661" width="0.2204%" height="15" fill="rgb(212,6,19)"/><text x="83.8438%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (6 samples, 0.12%)</title><rect x="83.9343%" y="725" width="0.1202%" height="15" fill="rgb(218,1,36)"/><text x="84.1843%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (6 samples, 0.12%)</title><rect x="83.9343%" y="709" width="0.1202%" height="15" fill="rgb(246,84,54)"/><text x="84.1843%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (6 samples, 0.12%)</title><rect x="83.9343%" y="693" width="0.1202%" height="15" fill="rgb(242,110,6)"/><text x="84.1843%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (22 samples, 0.44%)</title><rect x="84.2548%" y="629" width="0.4407%" height="15" fill="rgb(214,47,5)"/><text x="84.5048%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 0.44%)</title><rect x="84.2548%" y="613" width="0.4407%" height="15" fill="rgb(218,159,25)"/><text x="84.5048%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.44%)</title><rect x="84.2548%" y="597" width="0.4407%" height="15" fill="rgb(215,211,28)"/><text x="84.5048%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.44%)</title><rect x="84.2548%" y="581" width="0.4407%" height="15" fill="rgb(238,59,32)"/><text x="84.5048%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (22 samples, 0.44%)</title><rect x="84.2548%" y="565" width="0.4407%" height="15" fill="rgb(226,82,3)"/><text x="84.5048%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (22 samples, 0.44%)</title><rect x="84.2548%" y="549" width="0.4407%" height="15" fill="rgb(240,164,32)"/><text x="84.5048%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (22 samples, 0.44%)</title><rect x="84.2548%" y="533" width="0.4407%" height="15" fill="rgb(232,46,7)"/><text x="84.5048%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.44%)</title><rect x="84.2548%" y="517" width="0.4407%" height="15" fill="rgb(229,129,53)"/><text x="84.5048%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.44%)</title><rect x="84.2548%" y="501" width="0.4407%" height="15" fill="rgb(234,188,29)"/><text x="84.5048%" y="511.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (27 samples, 0.54%)</title><rect x="84.1947%" y="661" width="0.5409%" height="15" fill="rgb(246,141,4)"/><text x="84.4447%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::expected (26 samples, 0.52%)</title><rect x="84.2147%" y="645" width="0.5208%" height="15" fill="rgb(229,23,39)"/><text x="84.4647%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (33 samples, 0.66%)</title><rect x="84.1346%" y="709" width="0.6611%" height="15" fill="rgb(206,12,3)"/><text x="84.3846%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (33 samples, 0.66%)</title><rect x="84.1346%" y="693" width="0.6611%" height="15" fill="rgb(252,226,20)"/><text x="84.3846%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (33 samples, 0.66%)</title><rect x="84.1346%" y="677" width="0.6611%" height="15" fill="rgb(216,123,35)"/><text x="84.3846%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (11 samples, 0.22%)</title><rect x="84.7957%" y="677" width="0.2204%" height="15" fill="rgb(212,68,40)"/><text x="85.0457%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (6 samples, 0.12%)</title><rect x="84.8958%" y="661" width="0.1202%" height="15" fill="rgb(254,125,32)"/><text x="85.1458%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (22 samples, 0.44%)</title><rect x="84.7957%" y="693" width="0.4407%" height="15" fill="rgb(253,97,22)"/><text x="85.0457%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (11 samples, 0.22%)</title><rect x="85.0160%" y="677" width="0.2204%" height="15" fill="rgb(241,101,14)"/><text x="85.2660%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_object_name (5 samples, 0.10%)</title><rect x="85.4567%" y="661" width="0.1002%" height="15" fill="rgb(238,103,29)"/><text x="85.7067%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (85 samples, 1.70%)</title><rect x="83.9343%" y="741" width="1.7027%" height="15" fill="rgb(233,195,47)"/><text x="84.1843%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (75 samples, 1.50%)</title><rect x="84.1346%" y="725" width="1.5024%" height="15" fill="rgb(246,218,30)"/><text x="84.3846%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (42 samples, 0.84%)</title><rect x="84.7957%" y="709" width="0.8413%" height="15" fill="rgb(219,145,47)"/><text x="85.0457%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (20 samples, 0.40%)</title><rect x="85.2364%" y="693" width="0.4006%" height="15" fill="rgb(243,12,26)"/><text x="85.4864%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (16 samples, 0.32%)</title><rect x="85.3165%" y="677" width="0.3205%" height="15" fill="rgb(214,87,16)"/><text x="85.5665%" y="687.50"></text></g><g><title>alloc::fmt::format (9 samples, 0.18%)</title><rect x="86.0377%" y="645" width="0.1803%" height="15" fill="rgb(208,99,42)"/><text x="86.2877%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (8 samples, 0.16%)</title><rect x="86.0577%" y="629" width="0.1603%" height="15" fill="rgb(253,99,2)"/><text x="86.3077%" y="639.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="86.0577%" y="613" width="0.1603%" height="15" fill="rgb(220,168,23)"/><text x="86.3077%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (17 samples, 0.34%)</title><rect x="85.8974%" y="709" width="0.3405%" height="15" fill="rgb(242,38,24)"/><text x="86.1474%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (16 samples, 0.32%)</title><rect x="85.9175%" y="693" width="0.3205%" height="15" fill="rgb(225,182,9)"/><text x="86.1675%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (13 samples, 0.26%)</title><rect x="85.9776%" y="677" width="0.2604%" height="15" fill="rgb(243,178,37)"/><text x="86.2276%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (11 samples, 0.22%)</title><rect x="86.0176%" y="661" width="0.2204%" height="15" fill="rgb(232,139,19)"/><text x="86.2676%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (26 samples, 0.52%)</title><rect x="85.8173%" y="741" width="0.5208%" height="15" fill="rgb(225,201,24)"/><text x="86.0673%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (22 samples, 0.44%)</title><rect x="85.8974%" y="725" width="0.4407%" height="15" fill="rgb(221,47,46)"/><text x="86.1474%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (5 samples, 0.10%)</title><rect x="86.2380%" y="709" width="0.1002%" height="15" fill="rgb(249,23,13)"/><text x="86.4880%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.10%)</title><rect x="86.2380%" y="693" width="0.1002%" height="15" fill="rgb(219,9,5)"/><text x="86.4880%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (5 samples, 0.10%)</title><rect x="86.2380%" y="677" width="0.1002%" height="15" fill="rgb(254,171,16)"/><text x="86.4880%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.10%)</title><rect x="86.3381%" y="725" width="0.1002%" height="15" fill="rgb(230,171,20)"/><text x="86.5881%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (5 samples, 0.10%)</title><rect x="86.3381%" y="709" width="0.1002%" height="15" fill="rgb(210,71,41)"/><text x="86.5881%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.10%)</title><rect x="86.3381%" y="693" width="0.1002%" height="15" fill="rgb(206,173,20)"/><text x="86.5881%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (6 samples, 0.12%)</title><rect x="86.3381%" y="741" width="0.1202%" height="15" fill="rgb(233,88,34)"/><text x="86.5881%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (7 samples, 0.14%)</title><rect x="86.4583%" y="709" width="0.1402%" height="15" fill="rgb(223,209,46)"/><text x="86.7083%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (7 samples, 0.14%)</title><rect x="86.4583%" y="693" width="0.1402%" height="15" fill="rgb(250,43,18)"/><text x="86.7083%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (6 samples, 0.12%)</title><rect x="86.4784%" y="677" width="0.1202%" height="15" fill="rgb(208,13,10)"/><text x="86.7284%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (9 samples, 0.18%)</title><rect x="86.5986%" y="709" width="0.1803%" height="15" fill="rgb(212,200,36)"/><text x="86.8486%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (8 samples, 0.16%)</title><rect x="86.8389%" y="693" width="0.1603%" height="15" fill="rgb(225,90,30)"/><text x="87.0889%" y="703.50"></text></g><g><title>__memcmp_avx2_movbe (11 samples, 0.22%)</title><rect x="87.2997%" y="661" width="0.2204%" height="15" fill="rgb(236,182,39)"/><text x="87.5497%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (21 samples, 0.42%)</title><rect x="87.1194%" y="677" width="0.4207%" height="15" fill="rgb(212,144,35)"/><text x="87.3694%" y="687.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.10%)</title><rect x="87.7404%" y="645" width="0.1002%" height="15" fill="rgb(228,63,44)"/><text x="87.9904%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (70 samples, 1.40%)</title><rect x="86.4583%" y="741" width="1.4022%" height="15" fill="rgb(228,109,6)"/><text x="86.7083%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (70 samples, 1.40%)</title><rect x="86.4583%" y="725" width="1.4022%" height="15" fill="rgb(238,117,24)"/><text x="86.7083%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (54 samples, 1.08%)</title><rect x="86.7788%" y="709" width="1.0817%" height="15" fill="rgb(242,26,26)"/><text x="87.0288%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (43 samples, 0.86%)</title><rect x="86.9992%" y="693" width="0.8614%" height="15" fill="rgb(221,92,48)"/><text x="87.2492%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (12 samples, 0.24%)</title><rect x="87.6202%" y="677" width="0.2404%" height="15" fill="rgb(209,209,32)"/><text x="87.8702%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (8 samples, 0.16%)</title><rect x="87.7003%" y="661" width="0.1603%" height="15" fill="rgb(221,70,22)"/><text x="87.9503%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (11 samples, 0.22%)</title><rect x="87.9006%" y="693" width="0.2204%" height="15" fill="rgb(248,145,5)"/><text x="88.1506%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (9 samples, 0.18%)</title><rect x="87.9407%" y="677" width="0.1803%" height="15" fill="rgb(226,116,26)"/><text x="88.1907%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (14 samples, 0.28%)</title><rect x="88.1210%" y="693" width="0.2804%" height="15" fill="rgb(244,5,17)"/><text x="88.3710%" y="703.50"></text></g><g><title>sql_parser::parser::parse_statements (29 samples, 0.58%)</title><rect x="87.8606%" y="741" width="0.5809%" height="15" fill="rgb(252,159,33)"/><text x="88.1106%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (29 samples, 0.58%)</title><rect x="87.8606%" y="725" width="0.5809%" height="15" fill="rgb(206,71,0)"/><text x="88.1106%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (29 samples, 0.58%)</title><rect x="87.8606%" y="709" width="0.5809%" height="15" fill="rgb(233,118,54)"/><text x="88.1106%" y="719.50"></text></g><g><title>std::rt::lang_start_internal (6 samples, 0.12%)</title><rect x="88.5417%" y="741" width="0.1202%" height="15" fill="rgb(234,83,48)"/><text x="88.7917%" y="751.50"></text></g><g><title>std::panic::catch_unwind (6 samples, 0.12%)</title><rect x="88.5417%" y="725" width="0.1202%" height="15" fill="rgb(228,3,54)"/><text x="88.7917%" y="735.50"></text></g><g><title>std::panicking::try (6 samples, 0.12%)</title><rect x="88.5417%" y="709" width="0.1202%" height="15" fill="rgb(226,155,13)"/><text x="88.7917%" y="719.50"></text></g><g><title>std::panicking::try::do_call (6 samples, 0.12%)</title><rect x="88.5417%" y="693" width="0.1202%" height="15" fill="rgb(241,28,37)"/><text x="88.7917%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6 samples, 0.12%)</title><rect x="88.5417%" y="677" width="0.1202%" height="15" fill="rgb(233,93,10)"/><text x="88.7917%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (6 samples, 0.12%)</title><rect x="88.5417%" y="661" width="0.1202%" height="15" fill="rgb(225,113,19)"/><text x="88.7917%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.12%)</title><rect x="88.5417%" y="645" width="0.1202%" height="15" fill="rgb(241,2,18)"/><text x="88.7917%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (6 samples, 0.12%)</title><rect x="88.5417%" y="629" width="0.1202%" height="15" fill="rgb(228,207,21)"/><text x="88.7917%" y="639.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 0.18%)</title><rect x="88.6619%" y="741" width="0.1803%" height="15" fill="rgb(213,211,35)"/><text x="88.9119%" y="751.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (9 samples, 0.18%)</title><rect x="88.6619%" y="725" width="0.1803%" height="15" fill="rgb(209,83,10)"/><text x="88.9119%" y="735.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (9 samples, 0.18%)</title><rect x="88.6619%" y="709" width="0.1803%" height="15" fill="rgb(209,164,1)"/><text x="88.9119%" y="719.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (9 samples, 0.18%)</title><rect x="88.6619%" y="693" width="0.1803%" height="15" fill="rgb(213,184,43)"/><text x="88.9119%" y="703.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (9 samples, 0.18%)</title><rect x="88.6619%" y="677" width="0.1803%" height="15" fill="rgb(231,61,34)"/><text x="88.9119%" y="687.50"></text></g><g><title>[unknown] (3,836 samples, 76.84%)</title><rect x="12.0593%" y="757" width="76.8429%" height="15" fill="rgb(235,75,3)"/><text x="12.3093%" y="767.50">[unknown]</text></g><g><title>core::ptr::drop_in_place (11 samples, 0.22%)</title><rect x="88.9824%" y="597" width="0.2204%" height="15" fill="rgb(220,106,47)"/><text x="89.2324%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.20%)</title><rect x="89.0024%" y="581" width="0.2003%" height="15" fill="rgb(210,196,33)"/><text x="89.2524%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.18%)</title><rect x="89.0224%" y="565" width="0.1803%" height="15" fill="rgb(229,154,42)"/><text x="89.2724%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="89.3029%" y="533" width="0.1202%" height="15" fill="rgb(228,114,26)"/><text x="89.5529%" y="543.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.12%)</title><rect x="89.3029%" y="517" width="0.1202%" height="15" fill="rgb(208,144,1)"/><text x="89.5529%" y="527.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (5 samples, 0.10%)</title><rect x="89.3229%" y="501" width="0.1002%" height="15" fill="rgb(239,112,37)"/><text x="89.5729%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.20%)</title><rect x="89.2428%" y="581" width="0.2003%" height="15" fill="rgb(210,96,50)"/><text x="89.4928%" y="591.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="89.2829%" y="565" width="0.1603%" height="15" fill="rgb(222,178,2)"/><text x="89.5329%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="89.2829%" y="549" width="0.1603%" height="15" fill="rgb(226,74,18)"/><text x="89.5329%" y="559.50"></text></g><g><title>msql_srv::resultset::QueryResultWriter&lt;W&gt;::start (7 samples, 0.14%)</title><rect x="89.5232%" y="581" width="0.1402%" height="15" fill="rgb(225,67,54)"/><text x="89.7732%" y="591.50"></text></g><g><title>msql_srv::writers::column_definitions (6 samples, 0.12%)</title><rect x="89.5433%" y="565" width="0.1202%" height="15" fill="rgb(251,92,32)"/><text x="89.7933%" y="575.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (25 samples, 0.50%)</title><rect x="89.2027%" y="597" width="0.5008%" height="15" fill="rgb(228,149,22)"/><text x="89.4527%" y="607.50"></text></g><g><title>decor_mem::stats::get_qtype (10 samples, 0.20%)</title><rect x="89.7035%" y="597" width="0.2003%" height="15" fill="rgb(243,54,13)"/><text x="89.9535%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.20%)</title><rect x="89.7035%" y="581" width="0.2003%" height="15" fill="rgb(243,180,28)"/><text x="89.9535%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.18%)</title><rect x="89.7236%" y="565" width="0.1803%" height="15" fill="rgb(208,167,24)"/><text x="89.9736%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="89.7636%" y="549" width="0.1402%" height="15" fill="rgb(245,73,45)"/><text x="90.0136%" y="559.50"></text></g><g><title>env_logger::fmt::Builder::build::_{{closure}} (5 samples, 0.10%)</title><rect x="89.9038%" y="549" width="0.1002%" height="15" fill="rgb(237,203,48)"/><text x="90.1538%" y="559.50"></text></g><g><title>n_tty_write (8 samples, 0.16%)</title><rect x="90.0841%" y="213" width="0.1603%" height="15" fill="rgb(211,197,16)"/><text x="90.3341%" y="223.50"></text></g><g><title>pty_write (6 samples, 0.12%)</title><rect x="90.1242%" y="197" width="0.1202%" height="15" fill="rgb(243,99,51)"/><text x="90.3742%" y="207.50"></text></g><g><title>queue_work_on (6 samples, 0.12%)</title><rect x="90.1242%" y="181" width="0.1202%" height="15" fill="rgb(215,123,29)"/><text x="90.3742%" y="191.50"></text></g><g><title>__queue_work (6 samples, 0.12%)</title><rect x="90.1242%" y="165" width="0.1202%" height="15" fill="rgb(239,186,37)"/><text x="90.3742%" y="175.50"></text></g><g><title>try_to_wake_up (6 samples, 0.12%)</title><rect x="90.1242%" y="149" width="0.1202%" height="15" fill="rgb(252,136,39)"/><text x="90.3742%" y="159.50"></text></g><g><title>ksys_write (12 samples, 0.24%)</title><rect x="90.0240%" y="261" width="0.2404%" height="15" fill="rgb(223,213,32)"/><text x="90.2740%" y="271.50"></text></g><g><title>vfs_write (12 samples, 0.24%)</title><rect x="90.0240%" y="245" width="0.2404%" height="15" fill="rgb(233,115,5)"/><text x="90.2740%" y="255.50"></text></g><g><title>tty_write (12 samples, 0.24%)</title><rect x="90.0240%" y="229" width="0.2404%" height="15" fill="rgb(207,226,44)"/><text x="90.2740%" y="239.50"></text></g><g><title>do_syscall_64 (13 samples, 0.26%)</title><rect x="90.0240%" y="277" width="0.2604%" height="15" fill="rgb(208,126,0)"/><text x="90.2740%" y="287.50"></text></g><g><title>log::__private_api_log (20 samples, 0.40%)</title><rect x="89.9038%" y="597" width="0.4006%" height="15" fill="rgb(244,66,21)"/><text x="90.1538%" y="607.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (20 samples, 0.40%)</title><rect x="89.9038%" y="581" width="0.4006%" height="15" fill="rgb(222,97,12)"/><text x="90.1538%" y="591.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (20 samples, 0.40%)</title><rect x="89.9038%" y="565" width="0.4006%" height="15" fill="rgb(219,213,19)"/><text x="90.1538%" y="575.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (15 samples, 0.30%)</title><rect x="90.0040%" y="549" width="0.3005%" height="15" fill="rgb(252,169,30)"/><text x="90.2540%" y="559.50"></text></g><g><title>std::io::stdio::_eprint (15 samples, 0.30%)</title><rect x="90.0040%" y="533" width="0.3005%" height="15" fill="rgb(206,32,51)"/><text x="90.2540%" y="543.50"></text></g><g><title>std::io::stdio::print_to (15 samples, 0.30%)</title><rect x="90.0040%" y="517" width="0.3005%" height="15" fill="rgb(250,172,42)"/><text x="90.2540%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (15 samples, 0.30%)</title><rect x="90.0040%" y="501" width="0.3005%" height="15" fill="rgb(209,34,43)"/><text x="90.2540%" y="511.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (15 samples, 0.30%)</title><rect x="90.0040%" y="485" width="0.3005%" height="15" fill="rgb(223,11,35)"/><text x="90.2540%" y="495.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (15 samples, 0.30%)</title><rect x="90.0040%" y="469" width="0.3005%" height="15" fill="rgb(251,219,26)"/><text x="90.2540%" y="479.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (15 samples, 0.30%)</title><rect x="90.0040%" y="453" width="0.3005%" height="15" fill="rgb(231,119,3)"/><text x="90.2540%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (15 samples, 0.30%)</title><rect x="90.0040%" y="437" width="0.3005%" height="15" fill="rgb(216,97,11)"/><text x="90.2540%" y="447.50"></text></g><g><title>core::fmt::write (15 samples, 0.30%)</title><rect x="90.0040%" y="421" width="0.3005%" height="15" fill="rgb(223,59,9)"/><text x="90.2540%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (15 samples, 0.30%)</title><rect x="90.0040%" y="405" width="0.3005%" height="15" fill="rgb(233,93,31)"/><text x="90.2540%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (15 samples, 0.30%)</title><rect x="90.0040%" y="389" width="0.3005%" height="15" fill="rgb(239,81,33)"/><text x="90.2540%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (15 samples, 0.30%)</title><rect x="90.0040%" y="373" width="0.3005%" height="15" fill="rgb(213,120,34)"/><text x="90.2540%" y="383.50"></text></g><g><title>std::io::Write::write_all (15 samples, 0.30%)</title><rect x="90.0040%" y="357" width="0.3005%" height="15" fill="rgb(243,49,53)"/><text x="90.2540%" y="367.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (15 samples, 0.30%)</title><rect x="90.0040%" y="341" width="0.3005%" height="15" fill="rgb(247,216,33)"/><text x="90.2540%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (15 samples, 0.30%)</title><rect x="90.0040%" y="325" width="0.3005%" height="15" fill="rgb(226,26,14)"/><text x="90.2540%" y="335.50"></text></g><g><title>__libc_write (15 samples, 0.30%)</title><rect x="90.0040%" y="309" width="0.3005%" height="15" fill="rgb(215,49,53)"/><text x="90.2540%" y="319.50"></text></g><g><title>entry_SYSCALL_64 (14 samples, 0.28%)</title><rect x="90.0240%" y="293" width="0.2804%" height="15" fill="rgb(245,162,40)"/><text x="90.2740%" y="303.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (70 samples, 1.40%)</title><rect x="88.9623%" y="613" width="1.4022%" height="15" fill="rgb(229,68,17)"/><text x="89.2123%" y="623.50"></text></g><g><title>do_syscall_64 (9 samples, 0.18%)</title><rect x="90.4647%" y="485" width="0.1803%" height="15" fill="rgb(213,182,10)"/><text x="90.7147%" y="495.50"></text></g><g><title>ksys_write (9 samples, 0.18%)</title><rect x="90.4647%" y="469" width="0.1803%" height="15" fill="rgb(245,125,30)"/><text x="90.7147%" y="479.50"></text></g><g><title>vfs_write (8 samples, 0.16%)</title><rect x="90.4848%" y="453" width="0.1603%" height="15" fill="rgb(232,202,2)"/><text x="90.7348%" y="463.50"></text></g><g><title>new_sync_write (6 samples, 0.12%)</title><rect x="90.5248%" y="437" width="0.1202%" height="15" fill="rgb(237,140,51)"/><text x="90.7748%" y="447.50"></text></g><g><title>ext4_buffered_write_iter (5 samples, 0.10%)</title><rect x="90.5449%" y="421" width="0.1002%" height="15" fill="rgb(236,157,25)"/><text x="90.7949%" y="431.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (14 samples, 0.28%)</title><rect x="90.4247%" y="565" width="0.2804%" height="15" fill="rgb(219,209,0)"/><text x="90.6747%" y="575.50"></text></g><g><title>std::sys::unix::fs::File::write (14 samples, 0.28%)</title><rect x="90.4247%" y="549" width="0.2804%" height="15" fill="rgb(240,116,54)"/><text x="90.6747%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (14 samples, 0.28%)</title><rect x="90.4247%" y="533" width="0.2804%" height="15" fill="rgb(216,10,36)"/><text x="90.6747%" y="543.50"></text></g><g><title>__libc_write (14 samples, 0.28%)</title><rect x="90.4247%" y="517" width="0.2804%" height="15" fill="rgb(222,72,44)"/><text x="90.6747%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (14 samples, 0.28%)</title><rect x="90.4247%" y="501" width="0.2804%" height="15" fill="rgb(232,159,9)"/><text x="90.6747%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.36%)</title><rect x="90.3646%" y="613" width="0.3606%" height="15" fill="rgb(210,39,32)"/><text x="90.6146%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.36%)</title><rect x="90.3646%" y="597" width="0.3606%" height="15" fill="rgb(216,194,45)"/><text x="90.6146%" y="607.50"></text></g><g><title>decor_mem::stats::print_stats (15 samples, 0.30%)</title><rect x="90.4247%" y="581" width="0.3005%" height="15" fill="rgb(218,18,35)"/><text x="90.6747%" y="591.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.14%)</title><rect x="91.1458%" y="325" width="0.1402%" height="15" fill="rgb(207,83,51)"/><text x="91.3958%" y="335.50"></text></g><g><title>dequeue_entity (6 samples, 0.12%)</title><rect x="91.1659%" y="309" width="0.1202%" height="15" fill="rgb(225,63,43)"/><text x="91.4159%" y="319.50"></text></g><g><title>sk_wait_data (29 samples, 0.58%)</title><rect x="90.9655%" y="405" width="0.5809%" height="15" fill="rgb(207,57,36)"/><text x="91.2155%" y="415.50"></text></g><g><title>wait_woken (26 samples, 0.52%)</title><rect x="91.0256%" y="389" width="0.5208%" height="15" fill="rgb(216,99,33)"/><text x="91.2756%" y="399.50"></text></g><g><title>schedule_timeout (26 samples, 0.52%)</title><rect x="91.0256%" y="373" width="0.5208%" height="15" fill="rgb(225,42,16)"/><text x="91.2756%" y="383.50"></text></g><g><title>schedule (26 samples, 0.52%)</title><rect x="91.0256%" y="357" width="0.5208%" height="15" fill="rgb(220,201,45)"/><text x="91.2756%" y="367.50"></text></g><g><title>__schedule (26 samples, 0.52%)</title><rect x="91.0256%" y="341" width="0.5208%" height="15" fill="rgb(225,33,4)"/><text x="91.2756%" y="351.50"></text></g><g><title>__x64_sys_recvfrom (44 samples, 0.88%)</title><rect x="90.7452%" y="469" width="0.8814%" height="15" fill="rgb(224,33,50)"/><text x="90.9952%" y="479.50"></text></g><g><title>__sys_recvfrom (44 samples, 0.88%)</title><rect x="90.7452%" y="453" width="0.8814%" height="15" fill="rgb(246,198,51)"/><text x="90.9952%" y="463.50"></text></g><g><title>inet_recvmsg (44 samples, 0.88%)</title><rect x="90.7452%" y="437" width="0.8814%" height="15" fill="rgb(205,22,4)"/><text x="90.9952%" y="447.50"></text></g><g><title>tcp_recvmsg (44 samples, 0.88%)</title><rect x="90.7452%" y="421" width="0.8814%" height="15" fill="rgb(206,3,8)"/><text x="90.9952%" y="431.50"></text></g><g><title>do_syscall_64 (47 samples, 0.94%)</title><rect x="90.7452%" y="485" width="0.9415%" height="15" fill="rgb(251,23,15)"/><text x="90.9952%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (50 samples, 1.00%)</title><rect x="90.7452%" y="501" width="1.0016%" height="15" fill="rgb(252,88,28)"/><text x="90.9952%" y="511.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (54 samples, 1.08%)</title><rect x="90.7452%" y="581" width="1.0817%" height="15" fill="rgb(212,127,14)"/><text x="90.9952%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (54 samples, 1.08%)</title><rect x="90.7452%" y="565" width="1.0817%" height="15" fill="rgb(247,145,37)"/><text x="90.9952%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (54 samples, 1.08%)</title><rect x="90.7452%" y="549" width="1.0817%" height="15" fill="rgb(209,117,53)"/><text x="90.9952%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (54 samples, 1.08%)</title><rect x="90.7452%" y="533" width="1.0817%" height="15" fill="rgb(212,90,42)"/><text x="90.9952%" y="543.50"></text></g><g><title>__libc_recv (54 samples, 1.08%)</title><rect x="90.7452%" y="517" width="1.0817%" height="15" fill="rgb(218,164,37)"/><text x="90.9952%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (55 samples, 1.10%)</title><rect x="90.7452%" y="597" width="1.1018%" height="15" fill="rgb(246,65,34)"/><text x="90.9952%" y="607.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (58 samples, 1.16%)</title><rect x="90.7252%" y="613" width="1.1619%" height="15" fill="rgb(231,100,33)"/><text x="90.9752%" y="623.50"></text></g><g><title>__dev_queue_xmit (5 samples, 0.10%)</title><rect x="92.3277%" y="341" width="0.1002%" height="15" fill="rgb(228,126,14)"/><text x="92.5777%" y="351.50"></text></g><g><title>enqueue_task (7 samples, 0.14%)</title><rect x="92.7484%" y="53" width="0.1402%" height="15" fill="rgb(215,173,21)"/><text x="92.9984%" y="63.50"></text></g><g><title>psi_task_change (7 samples, 0.14%)</title><rect x="92.7484%" y="37" width="0.1402%" height="15" fill="rgb(210,6,40)"/><text x="92.9984%" y="47.50"></text></g><g><title>enqueue_task_fair (8 samples, 0.16%)</title><rect x="92.8886%" y="53" width="0.1603%" height="15" fill="rgb(212,48,18)"/><text x="93.1386%" y="63.50"></text></g><g><title>enqueue_entity (8 samples, 0.16%)</title><rect x="92.8886%" y="37" width="0.1603%" height="15" fill="rgb(230,214,11)"/><text x="93.1386%" y="47.50"></text></g><g><title>sock_def_readable (17 samples, 0.34%)</title><rect x="92.7284%" y="117" width="0.3405%" height="15" fill="rgb(254,105,39)"/><text x="92.9784%" y="127.50"></text></g><g><title>__wake_up_common_lock (17 samples, 0.34%)</title><rect x="92.7284%" y="101" width="0.3405%" height="15" fill="rgb(245,158,5)"/><text x="92.9784%" y="111.50"></text></g><g><title>__wake_up_common (17 samples, 0.34%)</title><rect x="92.7284%" y="85" width="0.3405%" height="15" fill="rgb(249,208,11)"/><text x="92.9784%" y="95.50"></text></g><g><title>try_to_wake_up (17 samples, 0.34%)</title><rect x="92.7284%" y="69" width="0.3405%" height="15" fill="rgb(210,39,28)"/><text x="92.9784%" y="79.50"></text></g><g><title>tcp_ack (10 samples, 0.20%)</title><rect x="93.0689%" y="117" width="0.2003%" height="15" fill="rgb(211,56,53)"/><text x="93.3189%" y="127.50"></text></g><g><title>ip_local_deliver (39 samples, 0.78%)</title><rect x="92.5280%" y="213" width="0.7812%" height="15" fill="rgb(226,201,30)"/><text x="92.7780%" y="223.50"></text></g><g><title>ip_local_deliver_finish (38 samples, 0.76%)</title><rect x="92.5481%" y="197" width="0.7612%" height="15" fill="rgb(239,101,34)"/><text x="92.7981%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (36 samples, 0.72%)</title><rect x="92.5881%" y="181" width="0.7212%" height="15" fill="rgb(226,209,5)"/><text x="92.8381%" y="191.50"></text></g><g><title>tcp_v4_rcv (35 samples, 0.70%)</title><rect x="92.6082%" y="165" width="0.7011%" height="15" fill="rgb(250,105,47)"/><text x="92.8582%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (32 samples, 0.64%)</title><rect x="92.6683%" y="149" width="0.6410%" height="15" fill="rgb(230,72,3)"/><text x="92.9183%" y="159.50"></text></g><g><title>tcp_rcv_established (32 samples, 0.64%)</title><rect x="92.6683%" y="133" width="0.6410%" height="15" fill="rgb(232,218,39)"/><text x="92.9183%" y="143.50"></text></g><g><title>__tcp_transmit_skb (63 samples, 1.26%)</title><rect x="92.1474%" y="405" width="1.2620%" height="15" fill="rgb(248,166,6)"/><text x="92.3974%" y="415.50"></text></g><g><title>__ip_queue_xmit (60 samples, 1.20%)</title><rect x="92.2075%" y="389" width="1.2019%" height="15" fill="rgb(247,89,20)"/><text x="92.4575%" y="399.50"></text></g><g><title>ip_output (57 samples, 1.14%)</title><rect x="92.2676%" y="373" width="1.1418%" height="15" fill="rgb(248,130,54)"/><text x="92.5176%" y="383.50"></text></g><g><title>ip_finish_output2 (56 samples, 1.12%)</title><rect x="92.2877%" y="357" width="1.1218%" height="15" fill="rgb(234,196,4)"/><text x="92.5377%" y="367.50"></text></g><g><title>__local_bh_enable_ip (49 samples, 0.98%)</title><rect x="92.4279%" y="341" width="0.9816%" height="15" fill="rgb(250,143,31)"/><text x="92.6779%" y="351.50"></text></g><g><title>do_softirq (49 samples, 0.98%)</title><rect x="92.4279%" y="325" width="0.9816%" height="15" fill="rgb(211,110,34)"/><text x="92.6779%" y="335.50"></text></g><g><title>do_softirq_own_stack (48 samples, 0.96%)</title><rect x="92.4479%" y="309" width="0.9615%" height="15" fill="rgb(215,124,48)"/><text x="92.6979%" y="319.50"></text></g><g><title>__do_softirq (48 samples, 0.96%)</title><rect x="92.4479%" y="293" width="0.9615%" height="15" fill="rgb(216,46,13)"/><text x="92.6979%" y="303.50"></text></g><g><title>net_rx_action (48 samples, 0.96%)</title><rect x="92.4479%" y="277" width="0.9615%" height="15" fill="rgb(205,184,25)"/><text x="92.6979%" y="287.50"></text></g><g><title>process_backlog (47 samples, 0.94%)</title><rect x="92.4679%" y="261" width="0.9415%" height="15" fill="rgb(228,1,10)"/><text x="92.7179%" y="271.50"></text></g><g><title>__netif_receive_skb_one_core (46 samples, 0.92%)</title><rect x="92.4880%" y="245" width="0.9215%" height="15" fill="rgb(213,116,27)"/><text x="92.7380%" y="255.50"></text></g><g><title>ip_rcv (45 samples, 0.90%)</title><rect x="92.5080%" y="229" width="0.9014%" height="15" fill="rgb(241,95,50)"/><text x="92.7580%" y="239.50"></text></g><g><title>__tcp_push_pending_frames (64 samples, 1.28%)</title><rect x="92.1474%" y="437" width="1.2821%" height="15" fill="rgb(238,48,32)"/><text x="92.3974%" y="447.50"></text></g><g><title>tcp_write_xmit (64 samples, 1.28%)</title><rect x="92.1474%" y="421" width="1.2821%" height="15" fill="rgb(235,113,49)"/><text x="92.3974%" y="431.50"></text></g><g><title>sk_stream_alloc_skb (7 samples, 0.14%)</title><rect x="93.4495%" y="437" width="0.1402%" height="15" fill="rgb(205,127,43)"/><text x="93.6995%" y="447.50"></text></g><g><title>__alloc_skb (7 samples, 0.14%)</title><rect x="93.4495%" y="421" width="0.1402%" height="15" fill="rgb(250,162,2)"/><text x="93.6995%" y="431.50"></text></g><g><title>sock_sendmsg (84 samples, 1.68%)</title><rect x="92.0272%" y="485" width="1.6827%" height="15" fill="rgb(220,13,41)"/><text x="92.2772%" y="495.50"></text></g><g><title>tcp_sendmsg (83 samples, 1.66%)</title><rect x="92.0473%" y="469" width="1.6627%" height="15" fill="rgb(249,221,25)"/><text x="92.2973%" y="479.50"></text></g><g><title>tcp_sendmsg_locked (80 samples, 1.60%)</title><rect x="92.1074%" y="453" width="1.6026%" height="15" fill="rgb(215,208,19)"/><text x="92.3574%" y="463.50"></text></g><g><title>tcp_send_mss (5 samples, 0.10%)</title><rect x="93.6098%" y="437" width="0.1002%" height="15" fill="rgb(236,175,2)"/><text x="93.8598%" y="447.50"></text></g><g><title>__x64_sys_sendto (89 samples, 1.78%)</title><rect x="91.9471%" y="517" width="1.7829%" height="15" fill="rgb(241,52,2)"/><text x="92.1971%" y="527.50">_..</text></g><g><title>__sys_sendto (89 samples, 1.78%)</title><rect x="91.9471%" y="501" width="1.7829%" height="15" fill="rgb(248,140,14)"/><text x="92.1971%" y="511.50">_..</text></g><g><title>do_syscall_64 (93 samples, 1.86%)</title><rect x="91.9471%" y="533" width="1.8630%" height="15" fill="rgb(253,22,42)"/><text x="92.1971%" y="543.50">d..</text></g><g><title>entry_SYSCALL_64 (97 samples, 1.94%)</title><rect x="91.9471%" y="549" width="1.9431%" height="15" fill="rgb(234,61,47)"/><text x="92.1971%" y="559.50">e..</text></g><g><title>__GI___clone (250 samples, 5.01%)</title><rect x="88.9022%" y="757" width="5.0080%" height="15" fill="rgb(208,226,15)"/><text x="89.1522%" y="767.50">__GI__..</text></g><g><title>start_thread (250 samples, 5.01%)</title><rect x="88.9022%" y="741" width="5.0080%" height="15" fill="rgb(217,221,4)"/><text x="89.1522%" y="751.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (249 samples, 4.99%)</title><rect x="88.9223%" y="725" width="4.9880%" height="15" fill="rgb(212,174,34)"/><text x="89.1723%" y="735.50">std::s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (249 samples, 4.99%)</title><rect x="88.9223%" y="709" width="4.9880%" height="15" fill="rgb(253,83,4)"/><text x="89.1723%" y="719.50">&lt;alloc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (249 samples, 4.99%)</title><rect x="88.9223%" y="693" width="4.9880%" height="15" fill="rgb(250,195,49)"/><text x="89.1723%" y="703.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (249 samples, 4.99%)</title><rect x="88.9223%" y="677" width="4.9880%" height="15" fill="rgb(241,192,25)"/><text x="89.1723%" y="687.50">core::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (249 samples, 4.99%)</title><rect x="88.9223%" y="661" width="4.9880%" height="15" fill="rgb(208,124,10)"/><text x="89.1723%" y="671.50">std::s..</text></g><g><title>decor_mem::Shim::run_on_tcp (249 samples, 4.99%)</title><rect x="88.9223%" y="645" width="4.9880%" height="15" fill="rgb(222,33,0)"/><text x="89.1723%" y="655.50">decor_..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (249 samples, 4.99%)</title><rect x="88.9223%" y="629" width="4.9880%" height="15" fill="rgb(234,209,28)"/><text x="89.1723%" y="639.50">msql_s..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (101 samples, 2.02%)</title><rect x="91.8870%" y="613" width="2.0232%" height="15" fill="rgb(224,11,23)"/><text x="92.1370%" y="623.50">s..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (101 samples, 2.02%)</title><rect x="91.8870%" y="597" width="2.0232%" height="15" fill="rgb(232,99,1)"/><text x="92.1370%" y="607.50">&lt;..</text></g><g><title>std::sys_common::net::TcpStream::write (101 samples, 2.02%)</title><rect x="91.8870%" y="581" width="2.0232%" height="15" fill="rgb(237,95,45)"/><text x="92.1370%" y="591.50">s..</text></g><g><title>__libc_send (101 samples, 2.02%)</title><rect x="91.8870%" y="565" width="2.0232%" height="15" fill="rgb(208,109,11)"/><text x="92.1370%" y="575.50">_..</text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="94.1306%" y="757" width="0.1002%" height="15" fill="rgb(216,190,48)"/><text x="94.3806%" y="767.50"></text></g><g><title>__perf_event_task_sched_in (231 samples, 4.63%)</title><rect x="94.3109%" y="293" width="4.6274%" height="15" fill="rgb(251,171,36)"/><text x="94.5609%" y="303.50">__per..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (231 samples, 4.63%)</title><rect x="94.3109%" y="277" width="4.6274%" height="15" fill="rgb(230,62,22)"/><text x="94.5609%" y="287.50">__int..</text></g><g><title>native_write_msr (231 samples, 4.63%)</title><rect x="94.3109%" y="261" width="4.6274%" height="15" fill="rgb(225,114,35)"/><text x="94.5609%" y="271.50">nativ..</text></g><g><title>__x64_sys_sched_setaffinity (236 samples, 4.73%)</title><rect x="94.2308%" y="437" width="4.7276%" height="15" fill="rgb(215,118,42)"/><text x="94.4808%" y="447.50">__x64_..</text></g><g><title>sched_setaffinity (236 samples, 4.73%)</title><rect x="94.2308%" y="421" width="4.7276%" height="15" fill="rgb(243,119,21)"/><text x="94.4808%" y="431.50">sched_..</text></g><g><title>__set_cpus_allowed_ptr (236 samples, 4.73%)</title><rect x="94.2308%" y="405" width="4.7276%" height="15" fill="rgb(252,177,53)"/><text x="94.4808%" y="415.50">__set_..</text></g><g><title>stop_one_cpu (236 samples, 4.73%)</title><rect x="94.2308%" y="389" width="4.7276%" height="15" fill="rgb(237,209,29)"/><text x="94.4808%" y="399.50">stop_o..</text></g><g><title>cpu_stop_queue_work (236 samples, 4.73%)</title><rect x="94.2308%" y="373" width="4.7276%" height="15" fill="rgb(212,65,23)"/><text x="94.4808%" y="383.50">cpu_st..</text></g><g><title>preempt_schedule_thunk (236 samples, 4.73%)</title><rect x="94.2308%" y="357" width="4.7276%" height="15" fill="rgb(230,222,46)"/><text x="94.4808%" y="367.50">preemp..</text></g><g><title>preempt_schedule_common (236 samples, 4.73%)</title><rect x="94.2308%" y="341" width="4.7276%" height="15" fill="rgb(215,135,32)"/><text x="94.4808%" y="351.50">preemp..</text></g><g><title>__schedule (236 samples, 4.73%)</title><rect x="94.2308%" y="325" width="4.7276%" height="15" fill="rgb(246,101,22)"/><text x="94.4808%" y="335.50">__sche..</text></g><g><title>finish_task_switch (236 samples, 4.73%)</title><rect x="94.2308%" y="309" width="4.7276%" height="15" fill="rgb(206,107,13)"/><text x="94.4808%" y="319.50">finish..</text></g><g><title>do_syscall_64 (237 samples, 4.75%)</title><rect x="94.2308%" y="453" width="4.7476%" height="15" fill="rgb(250,100,44)"/><text x="94.4808%" y="463.50">do_sys..</text></g><g><title>entry_SYSCALL_64 (239 samples, 4.79%)</title><rect x="94.2308%" y="469" width="4.7877%" height="15" fill="rgb(231,147,38)"/><text x="94.4808%" y="479.50">entry_..</text></g><g><title>hwloc::Topology::new (240 samples, 4.81%)</title><rect x="94.2308%" y="581" width="4.8077%" height="15" fill="rgb(229,8,40)"/><text x="94.4808%" y="591.50">hwloc:..</text></g><g><title>hwloc_topology_load (240 samples, 4.81%)</title><rect x="94.2308%" y="565" width="4.8077%" height="15" fill="rgb(221,135,30)"/><text x="94.4808%" y="575.50">hwloc_..</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 4.81%)</title><rect x="94.2308%" y="549" width="4.8077%" height="15" fill="rgb(249,193,18)"/><text x="94.4808%" y="559.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 4.81%)</title><rect x="94.2308%" y="533" width="4.8077%" height="15" fill="rgb(209,133,39)"/><text x="94.4808%" y="543.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 4.81%)</title><rect x="94.2308%" y="517" width="4.8077%" height="15" fill="rgb(232,100,14)"/><text x="94.4808%" y="527.50">[libhw..</text></g><g><title>hwloc_linux_set_tid_cpubind (240 samples, 4.81%)</title><rect x="94.2308%" y="501" width="4.8077%" height="15" fill="rgb(224,185,1)"/><text x="94.4808%" y="511.50">hwloc_..</text></g><g><title>__GI___sched_setaffinity_new (240 samples, 4.81%)</title><rect x="94.2308%" y="485" width="4.8077%" height="15" fill="rgb(223,139,8)"/><text x="94.4808%" y="495.50">__GI__..</text></g><g><title>__libc_start_main (241 samples, 4.83%)</title><rect x="94.2308%" y="741" width="4.8277%" height="15" fill="rgb(232,213,38)"/><text x="94.4808%" y="751.50">__libc..</text></g><g><title>main (241 samples, 4.83%)</title><rect x="94.2308%" y="725" width="4.8277%" height="15" fill="rgb(207,94,22)"/><text x="94.4808%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (241 samples, 4.83%)</title><rect x="94.2308%" y="709" width="4.8277%" height="15" fill="rgb(219,183,54)"/><text x="94.4808%" y="719.50">std::r..</text></g><g><title>std::panic::catch_unwind (241 samples, 4.83%)</title><rect x="94.2308%" y="693" width="4.8277%" height="15" fill="rgb(216,185,54)"/><text x="94.4808%" y="703.50">std::p..</text></g><g><title>std::panicking::try (241 samples, 4.83%)</title><rect x="94.2308%" y="677" width="4.8277%" height="15" fill="rgb(254,217,39)"/><text x="94.4808%" y="687.50">std::p..</text></g><g><title>std::panicking::try::do_call (241 samples, 4.83%)</title><rect x="94.2308%" y="661" width="4.8277%" height="15" fill="rgb(240,178,23)"/><text x="94.4808%" y="671.50">std::p..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (241 samples, 4.83%)</title><rect x="94.2308%" y="645" width="4.8277%" height="15" fill="rgb(218,11,47)"/><text x="94.4808%" y="655.50">core::..</text></g><g><title>std::rt::lang_start::_{{closure}} (241 samples, 4.83%)</title><rect x="94.2308%" y="629" width="4.8277%" height="15" fill="rgb(218,51,51)"/><text x="94.4808%" y="639.50">std::r..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (241 samples, 4.83%)</title><rect x="94.2308%" y="613" width="4.8277%" height="15" fill="rgb(238,126,27)"/><text x="94.4808%" y="623.50">std::s..</text></g><g><title>lobsters_microbenchmarks::main (241 samples, 4.83%)</title><rect x="94.2308%" y="597" width="4.8277%" height="15" fill="rgb(249,202,22)"/><text x="94.4808%" y="607.50">lobste..</text></g><g><title>_start (242 samples, 4.85%)</title><rect x="94.2308%" y="757" width="4.8478%" height="15" fill="rgb(254,195,49)"/><text x="94.4808%" y="767.50">_start</text></g><g><title>anon.ccc88910d37cf82f28ed26132c28eeac.2.llvm.10278298529400591180 (9 samples, 0.18%)</title><rect x="99.1186%" y="757" width="0.1803%" height="15" fill="rgb(208,123,14)"/><text x="99.3686%" y="767.50"></text></g><g><title>_int_realloc (9 samples, 0.18%)</title><rect x="99.1186%" y="741" width="0.1803%" height="15" fill="rgb(224,200,8)"/><text x="99.3686%" y="751.50"></text></g><g><title>malloc_consolidate (13 samples, 0.26%)</title><rect x="99.4992%" y="757" width="0.2604%" height="15" fill="rgb(217,61,36)"/><text x="99.7492%" y="767.50"></text></g><g><title>page_fault (5 samples, 0.10%)</title><rect x="99.7596%" y="757" width="0.1002%" height="15" fill="rgb(206,35,45)"/><text x="100.0096%" y="767.50"></text></g><g><title>lobsters-microb (4,986 samples, 99.88%)</title><rect x="0.0000%" y="773" width="99.8798%" height="15" fill="rgb(217,65,33)"/><text x="0.2500%" y="783.50">lobsters-microb</text></g><g><title>all (4,992 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(222,158,48)"/><text x="0.2500%" y="799.50"></text></g><g><title>perf (6 samples, 0.12%)</title><rect x="99.8798%" y="773" width="0.1202%" height="15" fill="rgb(254,2,54)"/><text x="100.1298%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="99.8798%" y="757" width="0.1202%" height="15" fill="rgb(250,143,38)"/><text x="100.1298%" y="767.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="99.8798%" y="741" width="0.1202%" height="15" fill="rgb(248,25,0)"/><text x="100.1298%" y="751.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.12%)</title><rect x="99.8798%" y="725" width="0.1202%" height="15" fill="rgb(206,152,27)"/><text x="100.1298%" y="735.50"></text></g><g><title>do_execve (6 samples, 0.12%)</title><rect x="99.8798%" y="709" width="0.1202%" height="15" fill="rgb(240,77,30)"/><text x="100.1298%" y="719.50"></text></g><g><title>__do_execve_file (6 samples, 0.12%)</title><rect x="99.8798%" y="693" width="0.1202%" height="15" fill="rgb(231,5,3)"/><text x="100.1298%" y="703.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.12%)</title><rect x="99.8798%" y="677" width="0.1202%" height="15" fill="rgb(207,226,32)"/><text x="100.1298%" y="687.50"></text></g><g><title>load_elf_binary (6 samples, 0.12%)</title><rect x="99.8798%" y="661" width="0.1202%" height="15" fill="rgb(222,207,47)"/><text x="100.1298%" y="671.50"></text></g><g><title>setup_new_exec (6 samples, 0.12%)</title><rect x="99.8798%" y="645" width="0.1202%" height="15" fill="rgb(229,115,45)"/><text x="100.1298%" y="655.50"></text></g><g><title>perf_event_exec (6 samples, 0.12%)</title><rect x="99.8798%" y="629" width="0.1202%" height="15" fill="rgb(224,191,6)"/><text x="100.1298%" y="639.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.10%)</title><rect x="99.8998%" y="613" width="0.1002%" height="15" fill="rgb(230,227,24)"/><text x="100.1498%" y="623.50"></text></g><g><title>native_write_msr (5 samples, 0.10%)</title><rect x="99.8998%" y="597" width="0.1002%" height="15" fill="rgb(228,80,19)"/><text x="100.1498%" y="607.50"></text></g></svg></svg>