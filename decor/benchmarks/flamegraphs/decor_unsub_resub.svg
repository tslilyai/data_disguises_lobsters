<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (6 samples, 0.12%)</title><rect x="0.1636%" y="789" width="0.1227%" height="15" fill="rgb(227,0,7)"/><text x="0.4136%" y="799.50"></text></g><g><title>[[stack]] (6 samples, 0.12%)</title><rect x="0.2863%" y="789" width="0.1227%" height="15" fill="rgb(217,0,24)"/><text x="0.5363%" y="799.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (20 samples, 0.41%)</title><rect x="0.4090%" y="773" width="0.4090%" height="15" fill="rgb(221,193,54)"/><text x="0.6590%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="1.0634%" y="709" width="0.1022%" height="15" fill="rgb(248,212,6)"/><text x="1.3134%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.10%)</title><rect x="1.0634%" y="693" width="0.1022%" height="15" fill="rgb(208,68,35)"/><text x="1.3134%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.10%)</title><rect x="1.0634%" y="677" width="0.1022%" height="15" fill="rgb(232,128,0)"/><text x="1.3134%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.10%)</title><rect x="1.0634%" y="661" width="0.1022%" height="15" fill="rgb(207,160,47)"/><text x="1.3134%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.33%)</title><rect x="0.8589%" y="773" width="0.3272%" height="15" fill="rgb(228,23,34)"/><text x="1.1089%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="1.0634%" y="757" width="0.1227%" height="15" fill="rgb(218,30,26)"/><text x="1.3134%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="1.0634%" y="741" width="0.1227%" height="15" fill="rgb(220,122,19)"/><text x="1.3134%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="1.0634%" y="725" width="0.1227%" height="15" fill="rgb(250,228,42)"/><text x="1.3134%" y="735.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.10%)</title><rect x="1.3292%" y="773" width="0.1022%" height="15" fill="rgb(240,193,28)"/><text x="1.5792%" y="783.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="1.6564%" y="773" width="0.1227%" height="15" fill="rgb(216,20,37)"/><text x="1.9064%" y="783.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.33%)</title><rect x="2.0041%" y="773" width="0.3272%" height="15" fill="rgb(206,188,39)"/><text x="2.2541%" y="783.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.31%)</title><rect x="2.3313%" y="773" width="0.3067%" height="15" fill="rgb(217,207,13)"/><text x="2.5813%" y="783.50"></text></g><g><title>__clock_gettime_2 (6 samples, 0.12%)</title><rect x="2.6585%" y="773" width="0.1227%" height="15" fill="rgb(231,73,38)"/><text x="2.9085%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.25%)</title><rect x="2.8834%" y="773" width="0.2454%" height="15" fill="rgb(225,20,46)"/><text x="3.1334%" y="783.50"></text></g><g><title>__rdl_realloc (5 samples, 0.10%)</title><rect x="3.2106%" y="773" width="0.1022%" height="15" fill="rgb(210,31,41)"/><text x="3.4606%" y="783.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (5 samples, 0.10%)</title><rect x="3.2106%" y="757" width="0.1022%" height="15" fill="rgb(221,200,47)"/><text x="3.4606%" y="767.50"></text></g><g><title>_int_free (45 samples, 0.92%)</title><rect x="3.3129%" y="773" width="0.9202%" height="15" fill="rgb(226,26,5)"/><text x="3.5629%" y="783.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="4.2331%" y="773" width="0.1022%" height="15" fill="rgb(249,33,26)"/><text x="4.4831%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.70%)</title><rect x="4.3763%" y="773" width="0.6953%" height="15" fill="rgb(235,183,28)"/><text x="4.6263%" y="783.50"></text></g><g><title>core::fmt::write (13 samples, 0.27%)</title><rect x="5.2761%" y="773" width="0.2658%" height="15" fill="rgb(221,5,38)"/><text x="5.5261%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.12%)</title><rect x="5.5419%" y="773" width="0.1227%" height="15" fill="rgb(247,18,42)"/><text x="5.7919%" y="783.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (7 samples, 0.14%)</title><rect x="5.9714%" y="773" width="0.1431%" height="15" fill="rgb(241,131,45)"/><text x="6.2214%" y="783.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (9 samples, 0.18%)</title><rect x="6.1963%" y="773" width="0.1840%" height="15" fill="rgb(249,31,29)"/><text x="6.4463%" y="783.50"></text></g><g><title>decor_mem::views::View::insert_into_index (6 samples, 0.12%)</title><rect x="6.4417%" y="773" width="0.1227%" height="15" fill="rgb(225,111,53)"/><text x="6.6917%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.10%)</title><rect x="6.7076%" y="773" width="0.1022%" height="15" fill="rgb(238,160,17)"/><text x="6.9576%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.16%)</title><rect x="6.8712%" y="773" width="0.1636%" height="15" fill="rgb(214,148,48)"/><text x="7.1212%" y="783.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (19 samples, 0.39%)</title><rect x="7.3211%" y="773" width="0.3885%" height="15" fill="rgb(232,36,49)"/><text x="7.5711%" y="783.50"></text></g><g><title>[anon] (373 samples, 7.63%)</title><rect x="0.4090%" y="789" width="7.6278%" height="15" fill="rgb(209,103,24)"/><text x="0.6590%" y="799.50">[anon]</text></g><g><title>_int_realloc (7 samples, 0.14%)</title><rect x="8.4049%" y="773" width="0.1431%" height="15" fill="rgb(229,88,8)"/><text x="8.6549%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.18%)</title><rect x="8.5481%" y="773" width="0.1840%" height="15" fill="rgb(213,181,19)"/><text x="8.7981%" y="783.50"></text></g><g><title>[lobsters-microbenchmarks] (39 samples, 0.80%)</title><rect x="8.0573%" y="789" width="0.7975%" height="15" fill="rgb(254,191,54)"/><text x="8.3073%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.14%)</title><rect x="9.2229%" y="693" width="0.1431%" height="15" fill="rgb(241,83,37)"/><text x="9.4729%" y="703.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="9.2638%" y="677" width="0.1022%" height="15" fill="rgb(233,36,39)"/><text x="9.5138%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="9.2638%" y="661" width="0.1022%" height="15" fill="rgb(226,3,54)"/><text x="9.5138%" y="671.50"></text></g><g><title>ip_finish_output2 (11 samples, 0.22%)</title><rect x="9.4479%" y="389" width="0.2249%" height="15" fill="rgb(245,192,40)"/><text x="9.6979%" y="399.50"></text></g><g><title>__local_bh_enable_ip (11 samples, 0.22%)</title><rect x="9.4479%" y="373" width="0.2249%" height="15" fill="rgb(238,167,29)"/><text x="9.6979%" y="383.50"></text></g><g><title>do_softirq (11 samples, 0.22%)</title><rect x="9.4479%" y="357" width="0.2249%" height="15" fill="rgb(232,182,51)"/><text x="9.6979%" y="367.50"></text></g><g><title>do_softirq_own_stack (11 samples, 0.22%)</title><rect x="9.4479%" y="341" width="0.2249%" height="15" fill="rgb(231,60,39)"/><text x="9.6979%" y="351.50"></text></g><g><title>__do_softirq (11 samples, 0.22%)</title><rect x="9.4479%" y="325" width="0.2249%" height="15" fill="rgb(208,69,12)"/><text x="9.6979%" y="335.50"></text></g><g><title>net_rx_action (11 samples, 0.22%)</title><rect x="9.4479%" y="309" width="0.2249%" height="15" fill="rgb(235,93,37)"/><text x="9.6979%" y="319.50"></text></g><g><title>process_backlog (9 samples, 0.18%)</title><rect x="9.4888%" y="293" width="0.1840%" height="15" fill="rgb(213,116,39)"/><text x="9.7388%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (9 samples, 0.18%)</title><rect x="9.4888%" y="277" width="0.1840%" height="15" fill="rgb(222,207,29)"/><text x="9.7388%" y="287.50"></text></g><g><title>ip_rcv (9 samples, 0.18%)</title><rect x="9.4888%" y="261" width="0.1840%" height="15" fill="rgb(206,96,30)"/><text x="9.7388%" y="271.50"></text></g><g><title>ip_local_deliver (9 samples, 0.18%)</title><rect x="9.4888%" y="245" width="0.1840%" height="15" fill="rgb(218,138,4)"/><text x="9.7388%" y="255.50"></text></g><g><title>ip_local_deliver_finish (8 samples, 0.16%)</title><rect x="9.5092%" y="229" width="0.1636%" height="15" fill="rgb(250,191,14)"/><text x="9.7592%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (8 samples, 0.16%)</title><rect x="9.5092%" y="213" width="0.1636%" height="15" fill="rgb(239,60,40)"/><text x="9.7592%" y="223.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.16%)</title><rect x="9.5092%" y="197" width="0.1636%" height="15" fill="rgb(206,27,48)"/><text x="9.7592%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (5 samples, 0.10%)</title><rect x="9.5706%" y="181" width="0.1022%" height="15" fill="rgb(225,35,8)"/><text x="9.8206%" y="191.50"></text></g><g><title>tcp_rcv_established (5 samples, 0.10%)</title><rect x="9.5706%" y="165" width="0.1022%" height="15" fill="rgb(250,213,24)"/><text x="9.8206%" y="175.50"></text></g><g><title>__ip_queue_xmit (13 samples, 0.27%)</title><rect x="9.4274%" y="421" width="0.2658%" height="15" fill="rgb(247,123,22)"/><text x="9.6774%" y="431.50"></text></g><g><title>ip_output (13 samples, 0.27%)</title><rect x="9.4274%" y="405" width="0.2658%" height="15" fill="rgb(231,138,38)"/><text x="9.6774%" y="415.50"></text></g><g><title>__tcp_push_pending_frames (14 samples, 0.29%)</title><rect x="9.4274%" y="469" width="0.2863%" height="15" fill="rgb(231,145,46)"/><text x="9.6774%" y="479.50"></text></g><g><title>tcp_write_xmit (14 samples, 0.29%)</title><rect x="9.4274%" y="453" width="0.2863%" height="15" fill="rgb(251,118,11)"/><text x="9.6774%" y="463.50"></text></g><g><title>__tcp_transmit_skb (14 samples, 0.29%)</title><rect x="9.4274%" y="437" width="0.2863%" height="15" fill="rgb(217,147,25)"/><text x="9.6774%" y="447.50"></text></g><g><title>sock_sendmsg (16 samples, 0.33%)</title><rect x="9.4274%" y="517" width="0.3272%" height="15" fill="rgb(247,81,37)"/><text x="9.6774%" y="527.50"></text></g><g><title>tcp_sendmsg (16 samples, 0.33%)</title><rect x="9.4274%" y="501" width="0.3272%" height="15" fill="rgb(209,12,38)"/><text x="9.6774%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (16 samples, 0.33%)</title><rect x="9.4274%" y="485" width="0.3272%" height="15" fill="rgb(227,1,9)"/><text x="9.6774%" y="495.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (20 samples, 0.41%)</title><rect x="9.3661%" y="693" width="0.4090%" height="15" fill="rgb(248,47,43)"/><text x="9.6161%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (20 samples, 0.41%)</title><rect x="9.3661%" y="677" width="0.4090%" height="15" fill="rgb(221,10,30)"/><text x="9.6161%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (20 samples, 0.41%)</title><rect x="9.3661%" y="661" width="0.4090%" height="15" fill="rgb(210,229,1)"/><text x="9.6161%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (20 samples, 0.41%)</title><rect x="9.3661%" y="645" width="0.4090%" height="15" fill="rgb(222,148,37)"/><text x="9.6161%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (20 samples, 0.41%)</title><rect x="9.3661%" y="629" width="0.4090%" height="15" fill="rgb(234,67,33)"/><text x="9.6161%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (20 samples, 0.41%)</title><rect x="9.3661%" y="613" width="0.4090%" height="15" fill="rgb(247,98,35)"/><text x="9.6161%" y="623.50"></text></g><g><title>__libc_send (20 samples, 0.41%)</title><rect x="9.3661%" y="597" width="0.4090%" height="15" fill="rgb(247,138,52)"/><text x="9.6161%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (19 samples, 0.39%)</title><rect x="9.3865%" y="581" width="0.3885%" height="15" fill="rgb(213,79,30)"/><text x="9.6365%" y="591.50"></text></g><g><title>do_syscall_64 (18 samples, 0.37%)</title><rect x="9.4070%" y="565" width="0.3681%" height="15" fill="rgb(246,177,23)"/><text x="9.6570%" y="575.50"></text></g><g><title>__x64_sys_sendto (18 samples, 0.37%)</title><rect x="9.4070%" y="549" width="0.3681%" height="15" fill="rgb(230,62,27)"/><text x="9.6570%" y="559.50"></text></g><g><title>__sys_sendto (18 samples, 0.37%)</title><rect x="9.4070%" y="533" width="0.3681%" height="15" fill="rgb(216,154,8)"/><text x="9.6570%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.10%)</title><rect x="9.8978%" y="661" width="0.1022%" height="15" fill="rgb(244,35,45)"/><text x="10.1478%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.10%)</title><rect x="9.8978%" y="645" width="0.1022%" height="15" fill="rgb(251,115,12)"/><text x="10.1478%" y="655.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="9.8364%" y="693" width="0.2249%" height="15" fill="rgb(240,54,50)"/><text x="10.0864%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="9.8978%" y="677" width="0.1636%" height="15" fill="rgb(233,84,52)"/><text x="10.1478%" y="687.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (50 samples, 1.02%)</title><rect x="9.1411%" y="709" width="1.0225%" height="15" fill="rgb(207,117,47)"/><text x="9.3911%" y="719.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.14%)</title><rect x="10.1636%" y="661" width="0.1431%" height="15" fill="rgb(249,43,39)"/><text x="10.4136%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.12%)</title><rect x="10.1840%" y="645" width="0.1227%" height="15" fill="rgb(209,38,44)"/><text x="10.4340%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (6 samples, 0.12%)</title><rect x="10.1840%" y="629" width="0.1227%" height="15" fill="rgb(236,212,23)"/><text x="10.4340%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (6 samples, 0.12%)</title><rect x="10.1840%" y="613" width="0.1227%" height="15" fill="rgb(242,79,21)"/><text x="10.4340%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (6 samples, 0.12%)</title><rect x="10.1840%" y="597" width="0.1227%" height="15" fill="rgb(211,96,35)"/><text x="10.4340%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (6 samples, 0.12%)</title><rect x="10.1840%" y="581" width="0.1227%" height="15" fill="rgb(253,215,40)"/><text x="10.4340%" y="591.50"></text></g><g><title>__libc_recv (6 samples, 0.12%)</title><rect x="10.1840%" y="565" width="0.1227%" height="15" fill="rgb(211,81,21)"/><text x="10.4340%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="10.1840%" y="549" width="0.1227%" height="15" fill="rgb(208,190,38)"/><text x="10.4340%" y="559.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="10.1840%" y="533" width="0.1227%" height="15" fill="rgb(235,213,38)"/><text x="10.4340%" y="543.50"></text></g><g><title>__x64_sys_recvfrom (6 samples, 0.12%)</title><rect x="10.1840%" y="517" width="0.1227%" height="15" fill="rgb(237,122,38)"/><text x="10.4340%" y="527.50"></text></g><g><title>__sys_recvfrom (6 samples, 0.12%)</title><rect x="10.1840%" y="501" width="0.1227%" height="15" fill="rgb(244,218,35)"/><text x="10.4340%" y="511.50"></text></g><g><title>inet_recvmsg (5 samples, 0.10%)</title><rect x="10.2045%" y="485" width="0.1022%" height="15" fill="rgb(240,68,47)"/><text x="10.4545%" y="495.50"></text></g><g><title>tcp_recvmsg (5 samples, 0.10%)</title><rect x="10.2045%" y="469" width="0.1022%" height="15" fill="rgb(210,16,53)"/><text x="10.4545%" y="479.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (60 samples, 1.23%)</title><rect x="9.1002%" y="773" width="1.2270%" height="15" fill="rgb(235,124,12)"/><text x="9.3502%" y="783.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (60 samples, 1.23%)</title><rect x="9.1002%" y="757" width="1.2270%" height="15" fill="rgb(224,169,11)"/><text x="9.3502%" y="767.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (60 samples, 1.23%)</title><rect x="9.1002%" y="741" width="1.2270%" height="15" fill="rgb(250,166,2)"/><text x="9.3502%" y="751.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (58 samples, 1.19%)</title><rect x="9.1411%" y="725" width="1.1861%" height="15" fill="rgb(242,216,29)"/><text x="9.3911%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (8 samples, 0.16%)</title><rect x="10.1636%" y="709" width="0.1636%" height="15" fill="rgb(230,116,27)"/><text x="10.4136%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (8 samples, 0.16%)</title><rect x="10.1636%" y="693" width="0.1636%" height="15" fill="rgb(228,99,48)"/><text x="10.4136%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (8 samples, 0.16%)</title><rect x="10.1636%" y="677" width="0.1636%" height="15" fill="rgb(253,11,6)"/><text x="10.4136%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="10.4294%" y="773" width="0.1022%" height="15" fill="rgb(247,143,39)"/><text x="10.6794%" y="783.50"></text></g><g><title>__GI___libc_free (6 samples, 0.12%)</title><rect x="10.9611%" y="773" width="0.1227%" height="15" fill="rgb(236,97,10)"/><text x="11.2111%" y="783.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.35%)</title><rect x="11.0838%" y="773" width="0.3476%" height="15" fill="rgb(233,208,19)"/><text x="11.3338%" y="783.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.16%)</title><rect x="11.4315%" y="773" width="0.1636%" height="15" fill="rgb(216,164,2)"/><text x="11.6815%" y="783.50"></text></g><g><title>alloc::fmt::format (10 samples, 0.20%)</title><rect x="11.7178%" y="597" width="0.2045%" height="15" fill="rgb(220,129,5)"/><text x="11.9678%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (9 samples, 0.18%)</title><rect x="11.7382%" y="581" width="0.1840%" height="15" fill="rgb(242,17,10)"/><text x="11.9882%" y="591.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="11.7382%" y="565" width="0.1840%" height="15" fill="rgb(242,107,0)"/><text x="11.9882%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (5 samples, 0.10%)</title><rect x="11.8200%" y="549" width="0.1022%" height="15" fill="rgb(251,28,31)"/><text x="12.0700%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (5 samples, 0.10%)</title><rect x="11.8200%" y="533" width="0.1022%" height="15" fill="rgb(233,223,10)"/><text x="12.0700%" y="543.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (11 samples, 0.22%)</title><rect x="11.7178%" y="613" width="0.2249%" height="15" fill="rgb(215,21,27)"/><text x="11.9678%" y="623.50"></text></g><g><title>__libc_start_main (18 samples, 0.37%)</title><rect x="11.6564%" y="773" width="0.3681%" height="15" fill="rgb(232,23,21)"/><text x="11.9064%" y="783.50"></text></g><g><title>main (18 samples, 0.37%)</title><rect x="11.6564%" y="757" width="0.3681%" height="15" fill="rgb(244,5,23)"/><text x="11.9064%" y="767.50"></text></g><g><title>std::rt::lang_start_internal (18 samples, 0.37%)</title><rect x="11.6564%" y="741" width="0.3681%" height="15" fill="rgb(226,81,46)"/><text x="11.9064%" y="751.50"></text></g><g><title>std::panic::catch_unwind (18 samples, 0.37%)</title><rect x="11.6564%" y="725" width="0.3681%" height="15" fill="rgb(247,70,30)"/><text x="11.9064%" y="735.50"></text></g><g><title>std::panicking::try (18 samples, 0.37%)</title><rect x="11.6564%" y="709" width="0.3681%" height="15" fill="rgb(212,68,19)"/><text x="11.9064%" y="719.50"></text></g><g><title>std::panicking::try::do_call (18 samples, 0.37%)</title><rect x="11.6564%" y="693" width="0.3681%" height="15" fill="rgb(240,187,13)"/><text x="11.9064%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (18 samples, 0.37%)</title><rect x="11.6564%" y="677" width="0.3681%" height="15" fill="rgb(223,113,26)"/><text x="11.9064%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (18 samples, 0.37%)</title><rect x="11.6564%" y="661" width="0.3681%" height="15" fill="rgb(206,192,2)"/><text x="11.9064%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 0.37%)</title><rect x="11.6564%" y="645" width="0.3681%" height="15" fill="rgb(241,108,4)"/><text x="11.9064%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (18 samples, 0.37%)</title><rect x="11.6564%" y="629" width="0.3681%" height="15" fill="rgb(247,173,49)"/><text x="11.9064%" y="639.50"></text></g><g><title>__rdl_alloc (5 samples, 0.10%)</title><rect x="12.0654%" y="773" width="0.1022%" height="15" fill="rgb(224,114,35)"/><text x="12.3154%" y="783.50"></text></g><g><title>_int_free (21 samples, 0.43%)</title><rect x="12.2086%" y="773" width="0.4294%" height="15" fill="rgb(245,159,27)"/><text x="12.4586%" y="783.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="12.6380%" y="773" width="0.1227%" height="15" fill="rgb(245,172,44)"/><text x="12.8880%" y="783.50"></text></g><g><title>_int_realloc (7 samples, 0.14%)</title><rect x="12.7607%" y="773" width="0.1431%" height="15" fill="rgb(236,23,11)"/><text x="13.0107%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="12.9039%" y="773" width="0.1431%" height="15" fill="rgb(205,117,38)"/><text x="13.1539%" y="783.50"></text></g><g><title>core::fmt::Formatter::pad (9 samples, 0.18%)</title><rect x="13.1084%" y="773" width="0.1840%" height="15" fill="rgb(237,72,25)"/><text x="13.3584%" y="783.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="13.3947%" y="773" width="0.2249%" height="15" fill="rgb(244,70,9)"/><text x="13.6447%" y="783.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (10 samples, 0.20%)</title><rect x="13.6810%" y="661" width="0.2045%" height="15" fill="rgb(217,125,39)"/><text x="13.9310%" y="671.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="13.6810%" y="645" width="0.2045%" height="15" fill="rgb(235,36,10)"/><text x="13.9310%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.20%)</title><rect x="13.6810%" y="629" width="0.2045%" height="15" fill="rgb(251,123,47)"/><text x="13.9310%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (7 samples, 0.14%)</title><rect x="13.7423%" y="613" width="0.1431%" height="15" fill="rgb(221,13,13)"/><text x="13.9923%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.16%)</title><rect x="13.9673%" y="629" width="0.1636%" height="15" fill="rgb(238,131,9)"/><text x="14.2173%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (32 samples, 0.65%)</title><rect x="13.6196%" y="773" width="0.6544%" height="15" fill="rgb(211,50,8)"/><text x="13.8696%" y="783.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (32 samples, 0.65%)</title><rect x="13.6196%" y="757" width="0.6544%" height="15" fill="rgb(245,182,24)"/><text x="13.8696%" y="767.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (32 samples, 0.65%)</title><rect x="13.6196%" y="741" width="0.6544%" height="15" fill="rgb(242,14,37)"/><text x="13.8696%" y="751.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (32 samples, 0.65%)</title><rect x="13.6196%" y="725" width="0.6544%" height="15" fill="rgb(246,228,12)"/><text x="13.8696%" y="735.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (32 samples, 0.65%)</title><rect x="13.6196%" y="709" width="0.6544%" height="15" fill="rgb(213,55,15)"/><text x="13.8696%" y="719.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (32 samples, 0.65%)</title><rect x="13.6196%" y="693" width="0.6544%" height="15" fill="rgb(209,9,3)"/><text x="13.8696%" y="703.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (32 samples, 0.65%)</title><rect x="13.6196%" y="677" width="0.6544%" height="15" fill="rgb(230,59,30)"/><text x="13.8696%" y="687.50"></text></g><g><title>decor_mem::views::Views::insert (19 samples, 0.39%)</title><rect x="13.8855%" y="661" width="0.3885%" height="15" fill="rgb(209,121,21)"/><text x="14.1355%" y="671.50"></text></g><g><title>decor_mem::views::View::insert_into_index (19 samples, 0.39%)</title><rect x="13.8855%" y="645" width="0.3885%" height="15" fill="rgb(220,109,13)"/><text x="14.1355%" y="655.50"></text></g><g><title>tcp_ack (7 samples, 0.14%)</title><rect x="15.0920%" y="133" width="0.1431%" height="15" fill="rgb(232,18,1)"/><text x="15.3420%" y="143.50"></text></g><g><title>ip_local_deliver (17 samples, 0.35%)</title><rect x="14.9080%" y="229" width="0.3476%" height="15" fill="rgb(215,41,42)"/><text x="15.1580%" y="239.50"></text></g><g><title>ip_local_deliver_finish (17 samples, 0.35%)</title><rect x="14.9080%" y="213" width="0.3476%" height="15" fill="rgb(224,123,36)"/><text x="15.1580%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (17 samples, 0.35%)</title><rect x="14.9080%" y="197" width="0.3476%" height="15" fill="rgb(240,125,3)"/><text x="15.1580%" y="207.50"></text></g><g><title>tcp_v4_rcv (17 samples, 0.35%)</title><rect x="14.9080%" y="181" width="0.3476%" height="15" fill="rgb(205,98,50)"/><text x="15.1580%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (14 samples, 0.29%)</title><rect x="14.9693%" y="165" width="0.2863%" height="15" fill="rgb(205,185,37)"/><text x="15.2193%" y="175.50"></text></g><g><title>tcp_rcv_established (14 samples, 0.29%)</title><rect x="14.9693%" y="149" width="0.2863%" height="15" fill="rgb(238,207,15)"/><text x="15.2193%" y="159.50"></text></g><g><title>ip_finish_output2 (29 samples, 0.59%)</title><rect x="14.6830%" y="373" width="0.5930%" height="15" fill="rgb(213,199,42)"/><text x="14.9330%" y="383.50"></text></g><g><title>__local_bh_enable_ip (26 samples, 0.53%)</title><rect x="14.7444%" y="357" width="0.5317%" height="15" fill="rgb(235,201,11)"/><text x="14.9944%" y="367.50"></text></g><g><title>do_softirq (25 samples, 0.51%)</title><rect x="14.7648%" y="341" width="0.5112%" height="15" fill="rgb(207,46,11)"/><text x="15.0148%" y="351.50"></text></g><g><title>do_softirq_own_stack (23 samples, 0.47%)</title><rect x="14.8057%" y="325" width="0.4703%" height="15" fill="rgb(241,35,35)"/><text x="15.0557%" y="335.50"></text></g><g><title>__do_softirq (22 samples, 0.45%)</title><rect x="14.8262%" y="309" width="0.4499%" height="15" fill="rgb(243,32,47)"/><text x="15.0762%" y="319.50"></text></g><g><title>net_rx_action (22 samples, 0.45%)</title><rect x="14.8262%" y="293" width="0.4499%" height="15" fill="rgb(247,202,23)"/><text x="15.0762%" y="303.50"></text></g><g><title>process_backlog (21 samples, 0.43%)</title><rect x="14.8466%" y="277" width="0.4294%" height="15" fill="rgb(219,102,11)"/><text x="15.0966%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (21 samples, 0.43%)</title><rect x="14.8466%" y="261" width="0.4294%" height="15" fill="rgb(243,110,44)"/><text x="15.0966%" y="271.50"></text></g><g><title>ip_rcv (20 samples, 0.41%)</title><rect x="14.8671%" y="245" width="0.4090%" height="15" fill="rgb(222,74,54)"/><text x="15.1171%" y="255.50"></text></g><g><title>__ip_queue_xmit (33 samples, 0.67%)</title><rect x="14.6626%" y="405" width="0.6748%" height="15" fill="rgb(216,99,12)"/><text x="14.9126%" y="415.50"></text></g><g><title>ip_output (32 samples, 0.65%)</title><rect x="14.6830%" y="389" width="0.6544%" height="15" fill="rgb(226,22,26)"/><text x="14.9330%" y="399.50"></text></g><g><title>__tcp_push_pending_frames (38 samples, 0.78%)</title><rect x="14.6012%" y="453" width="0.7771%" height="15" fill="rgb(217,163,10)"/><text x="14.8512%" y="463.50"></text></g><g><title>tcp_write_xmit (38 samples, 0.78%)</title><rect x="14.6012%" y="437" width="0.7771%" height="15" fill="rgb(213,25,53)"/><text x="14.8512%" y="447.50"></text></g><g><title>__tcp_transmit_skb (38 samples, 0.78%)</title><rect x="14.6012%" y="421" width="0.7771%" height="15" fill="rgb(252,105,26)"/><text x="14.8512%" y="431.50"></text></g><g><title>__x64_sys_sendto (44 samples, 0.90%)</title><rect x="14.5194%" y="533" width="0.8998%" height="15" fill="rgb(220,39,43)"/><text x="14.7694%" y="543.50"></text></g><g><title>__sys_sendto (44 samples, 0.90%)</title><rect x="14.5194%" y="517" width="0.8998%" height="15" fill="rgb(229,68,48)"/><text x="14.7694%" y="527.50"></text></g><g><title>sock_sendmsg (44 samples, 0.90%)</title><rect x="14.5194%" y="501" width="0.8998%" height="15" fill="rgb(252,8,32)"/><text x="14.7694%" y="511.50"></text></g><g><title>tcp_sendmsg (43 samples, 0.88%)</title><rect x="14.5399%" y="485" width="0.8793%" height="15" fill="rgb(223,20,43)"/><text x="14.7899%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (42 samples, 0.86%)</title><rect x="14.5603%" y="469" width="0.8589%" height="15" fill="rgb(229,81,49)"/><text x="14.8103%" y="479.50"></text></g><g><title>do_syscall_64 (45 samples, 0.92%)</title><rect x="14.5194%" y="549" width="0.9202%" height="15" fill="rgb(236,28,36)"/><text x="14.7694%" y="559.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (55 samples, 1.12%)</title><rect x="14.3763%" y="677" width="1.1247%" height="15" fill="rgb(249,185,26)"/><text x="14.6263%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (55 samples, 1.12%)</title><rect x="14.3763%" y="661" width="1.1247%" height="15" fill="rgb(249,174,33)"/><text x="14.6263%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (50 samples, 1.02%)</title><rect x="14.4785%" y="645" width="1.0225%" height="15" fill="rgb(233,201,37)"/><text x="14.7285%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (49 samples, 1.00%)</title><rect x="14.4990%" y="629" width="1.0020%" height="15" fill="rgb(221,78,26)"/><text x="14.7490%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (48 samples, 0.98%)</title><rect x="14.5194%" y="613" width="0.9816%" height="15" fill="rgb(250,127,30)"/><text x="14.7694%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (48 samples, 0.98%)</title><rect x="14.5194%" y="597" width="0.9816%" height="15" fill="rgb(230,49,44)"/><text x="14.7694%" y="607.50"></text></g><g><title>__libc_send (48 samples, 0.98%)</title><rect x="14.5194%" y="581" width="0.9816%" height="15" fill="rgb(229,67,23)"/><text x="14.7694%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (48 samples, 0.98%)</title><rect x="14.5194%" y="565" width="0.9816%" height="15" fill="rgb(249,83,47)"/><text x="14.7694%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="15.5624%" y="645" width="0.1227%" height="15" fill="rgb(215,43,3)"/><text x="15.8124%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="15.5624%" y="629" width="0.1227%" height="15" fill="rgb(238,154,13)"/><text x="15.8124%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (6 samples, 0.12%)</title><rect x="15.5624%" y="613" width="0.1227%" height="15" fill="rgb(219,56,2)"/><text x="15.8124%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (8 samples, 0.16%)</title><rect x="15.7055%" y="597" width="0.1636%" height="15" fill="rgb(233,0,4)"/><text x="15.9555%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (11 samples, 0.22%)</title><rect x="15.6851%" y="629" width="0.2249%" height="15" fill="rgb(235,30,7)"/><text x="15.9351%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (11 samples, 0.22%)</title><rect x="15.6851%" y="613" width="0.2249%" height="15" fill="rgb(250,79,13)"/><text x="15.9351%" y="623.50"></text></g><g><title>core::fmt::write (19 samples, 0.39%)</title><rect x="15.5624%" y="677" width="0.3885%" height="15" fill="rgb(211,146,34)"/><text x="15.8124%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (19 samples, 0.39%)</title><rect x="15.5624%" y="661" width="0.3885%" height="15" fill="rgb(228,22,38)"/><text x="15.8124%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::InsertStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (13 samples, 0.27%)</title><rect x="15.6851%" y="645" width="0.2658%" height="15" fill="rgb(235,168,5)"/><text x="15.9351%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (8 samples, 0.16%)</title><rect x="16.0941%" y="613" width="0.1636%" height="15" fill="rgb(221,155,16)"/><text x="16.3441%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="16.1554%" y="597" width="0.1022%" height="15" fill="rgb(215,215,53)"/><text x="16.4054%" y="607.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="16.0941%" y="645" width="0.1840%" height="15" fill="rgb(223,4,10)"/><text x="16.3441%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="16.0941%" y="629" width="0.1840%" height="15" fill="rgb(234,103,6)"/><text x="16.3441%" y="639.50"></text></g><g><title>decor_mem::views::View::insert_into_index (13 samples, 0.27%)</title><rect x="16.0532%" y="661" width="0.2658%" height="15" fill="rgb(227,97,0)"/><text x="16.3032%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (99 samples, 2.02%)</title><rect x="14.3354%" y="693" width="2.0245%" height="15" fill="rgb(234,150,53)"/><text x="14.5854%" y="703.50">d..</text></g><g><title>decor_mem::views::Views::insert (20 samples, 0.41%)</title><rect x="15.9509%" y="677" width="0.4090%" height="15" fill="rgb(228,201,54)"/><text x="16.2009%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.16%)</title><rect x="16.3599%" y="677" width="0.1636%" height="15" fill="rgb(222,22,37)"/><text x="16.6099%" y="687.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.29%)</title><rect x="16.8507%" y="469" width="0.2863%" height="15" fill="rgb(237,53,32)"/><text x="17.1007%" y="479.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="16.9530%" y="453" width="0.1840%" height="15" fill="rgb(233,25,53)"/><text x="17.2030%" y="463.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (30 samples, 0.61%)</title><rect x="16.5644%" y="661" width="0.6135%" height="15" fill="rgb(210,40,34)"/><text x="16.8144%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.37%)</title><rect x="16.8098%" y="645" width="0.3681%" height="15" fill="rgb(241,220,44)"/><text x="17.0598%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.35%)</title><rect x="16.8303%" y="629" width="0.3476%" height="15" fill="rgb(235,28,35)"/><text x="17.0803%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.35%)</title><rect x="16.8303%" y="613" width="0.3476%" height="15" fill="rgb(210,56,17)"/><text x="17.0803%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.35%)</title><rect x="16.8303%" y="597" width="0.3476%" height="15" fill="rgb(224,130,29)"/><text x="17.0803%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.33%)</title><rect x="16.8507%" y="581" width="0.3272%" height="15" fill="rgb(235,212,8)"/><text x="17.1007%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (16 samples, 0.33%)</title><rect x="16.8507%" y="565" width="0.3272%" height="15" fill="rgb(223,33,50)"/><text x="17.1007%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.33%)</title><rect x="16.8507%" y="549" width="0.3272%" height="15" fill="rgb(219,149,13)"/><text x="17.1007%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.33%)</title><rect x="16.8507%" y="533" width="0.3272%" height="15" fill="rgb(250,156,29)"/><text x="17.1007%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.33%)</title><rect x="16.8507%" y="517" width="0.3272%" height="15" fill="rgb(216,193,19)"/><text x="17.1007%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.33%)</title><rect x="16.8507%" y="501" width="0.3272%" height="15" fill="rgb(216,135,14)"/><text x="17.1007%" y="511.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.33%)</title><rect x="16.8507%" y="485" width="0.3272%" height="15" fill="rgb(241,47,5)"/><text x="17.1007%" y="495.50"></text></g><g><title>malloc_consolidate (19 samples, 0.39%)</title><rect x="17.6892%" y="629" width="0.3885%" height="15" fill="rgb(233,42,35)"/><text x="17.9392%" y="639.50"></text></g><g><title>__GI___libc_malloc (45 samples, 0.92%)</title><rect x="17.1779%" y="661" width="0.9202%" height="15" fill="rgb(231,13,6)"/><text x="17.4279%" y="671.50"></text></g><g><title>_int_malloc (44 samples, 0.90%)</title><rect x="17.1984%" y="645" width="0.8998%" height="15" fill="rgb(207,181,40)"/><text x="17.4484%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (83 samples, 1.70%)</title><rect x="16.5235%" y="677" width="1.6973%" height="15" fill="rgb(254,173,49)"/><text x="16.7735%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="18.0982%" y="661" width="0.1227%" height="15" fill="rgb(221,1,38)"/><text x="18.3482%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.16%)</title><rect x="18.2209%" y="677" width="0.1636%" height="15" fill="rgb(206,124,46)"/><text x="18.4709%" y="687.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="18.2822%" y="661" width="0.1022%" height="15" fill="rgb(249,21,11)"/><text x="18.5322%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (90 samples, 1.84%)</title><rect x="18.3845%" y="677" width="1.8405%" height="15" fill="rgb(222,201,40)"/><text x="18.6345%" y="687.50">a..</text></g><g><title>__GI___libc_malloc (90 samples, 1.84%)</title><rect x="18.3845%" y="661" width="1.8405%" height="15" fill="rgb(235,61,29)"/><text x="18.6345%" y="671.50">_..</text></g><g><title>_int_malloc (90 samples, 1.84%)</title><rect x="18.3845%" y="645" width="1.8405%" height="15" fill="rgb(219,207,3)"/><text x="18.6345%" y="655.50">_..</text></g><g><title>malloc_consolidate (57 samples, 1.17%)</title><rect x="19.0593%" y="629" width="1.1656%" height="15" fill="rgb(222,56,46)"/><text x="19.3093%" y="639.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="20.3476%" y="613" width="0.1227%" height="15" fill="rgb(239,76,54)"/><text x="20.5976%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.22%)</title><rect x="20.2863%" y="645" width="0.2249%" height="15" fill="rgb(231,124,27)"/><text x="20.5363%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.18%)</title><rect x="20.3272%" y="629" width="0.1840%" height="15" fill="rgb(249,195,6)"/><text x="20.5772%" y="639.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.27%)</title><rect x="20.7771%" y="629" width="0.2658%" height="15" fill="rgb(237,174,47)"/><text x="21.0271%" y="639.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="21.1656%" y="629" width="0.1022%" height="15" fill="rgb(206,201,31)"/><text x="21.4156%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="21.2679%" y="629" width="0.1227%" height="15" fill="rgb(231,57,52)"/><text x="21.5179%" y="639.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="21.5337%" y="581" width="0.1022%" height="15" fill="rgb(248,177,22)"/><text x="21.7837%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.22%)</title><rect x="21.4315%" y="613" width="0.2249%" height="15" fill="rgb(215,211,37)"/><text x="21.6815%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="21.5133%" y="597" width="0.1431%" height="15" fill="rgb(241,128,51)"/><text x="21.7633%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (77 samples, 1.57%)</title><rect x="20.2249%" y="661" width="1.5746%" height="15" fill="rgb(227,165,31)"/><text x="20.4749%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (57 samples, 1.17%)</title><rect x="20.6339%" y="645" width="1.1656%" height="15" fill="rgb(228,167,24)"/><text x="20.8839%" y="655.50"></text></g><g><title>core::fmt::write (20 samples, 0.41%)</title><rect x="21.3906%" y="629" width="0.4090%" height="15" fill="rgb(228,143,12)"/><text x="21.6406%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.14%)</title><rect x="21.7996%" y="629" width="0.1431%" height="15" fill="rgb(249,149,8)"/><text x="22.0496%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="21.8200%" y="613" width="0.1227%" height="15" fill="rgb(243,35,44)"/><text x="22.0700%" y="623.50"></text></g><g><title>core::fmt::write (91 samples, 1.86%)</title><rect x="20.2249%" y="677" width="1.8609%" height="15" fill="rgb(246,89,9)"/><text x="20.4749%" y="687.50">c..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (14 samples, 0.29%)</title><rect x="21.7996%" y="661" width="0.2863%" height="15" fill="rgb(233,213,13)"/><text x="22.0496%" y="671.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (14 samples, 0.29%)</title><rect x="21.7996%" y="645" width="0.2863%" height="15" fill="rgb(233,141,41)"/><text x="22.0496%" y="655.50"></text></g><g><title>core::fmt::Formatter::pad_integral (7 samples, 0.14%)</title><rect x="21.9427%" y="629" width="0.1431%" height="15" fill="rgb(239,167,4)"/><text x="22.1927%" y="639.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="22.0859%" y="661" width="0.1022%" height="15" fill="rgb(209,217,16)"/><text x="22.3359%" y="671.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="22.1881%" y="645" width="0.1227%" height="15" fill="rgb(219,88,35)"/><text x="22.4381%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.29%)</title><rect x="22.0859%" y="677" width="0.2863%" height="15" fill="rgb(220,193,23)"/><text x="22.3359%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.18%)</title><rect x="22.1881%" y="661" width="0.1840%" height="15" fill="rgb(230,90,52)"/><text x="22.4381%" y="671.50"></text></g><g><title>alloc::fmt::format (9 samples, 0.18%)</title><rect x="22.4744%" y="661" width="0.1840%" height="15" fill="rgb(252,106,19)"/><text x="22.7244%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (6 samples, 0.12%)</title><rect x="22.5358%" y="645" width="0.1227%" height="15" fill="rgb(206,74,20)"/><text x="22.7858%" y="655.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="22.5358%" y="629" width="0.1227%" height="15" fill="rgb(230,138,44)"/><text x="22.7858%" y="639.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (30 samples, 0.61%)</title><rect x="22.3722%" y="677" width="0.6135%" height="15" fill="rgb(235,182,43)"/><text x="22.6222%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.16%)</title><rect x="22.8221%" y="661" width="0.1636%" height="15" fill="rgb(242,16,51)"/><text x="23.0721%" y="671.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="22.9857%" y="645" width="0.1022%" height="15" fill="rgb(248,9,4)"/><text x="23.2357%" y="655.50"></text></g><g><title>__GI___libc_free (8 samples, 0.16%)</title><rect x="23.1084%" y="629" width="0.1636%" height="15" fill="rgb(210,31,22)"/><text x="23.3584%" y="639.50"></text></g><g><title>_int_free (10 samples, 0.20%)</title><rect x="23.2720%" y="629" width="0.2045%" height="15" fill="rgb(239,54,39)"/><text x="23.5220%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.57%)</title><rect x="22.9857%" y="661" width="0.5726%" height="15" fill="rgb(230,99,41)"/><text x="23.2357%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (23 samples, 0.47%)</title><rect x="23.0879%" y="645" width="0.4703%" height="15" fill="rgb(253,106,12)"/><text x="23.3379%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.31%)</title><rect x="23.6810%" y="613" width="0.3067%" height="15" fill="rgb(213,46,41)"/><text x="23.9310%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="23.8650%" y="597" width="0.1227%" height="15" fill="rgb(215,133,35)"/><text x="24.1150%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="23.8650%" y="581" width="0.1227%" height="15" fill="rgb(213,28,5)"/><text x="24.1150%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.10%)</title><rect x="23.8855%" y="565" width="0.1022%" height="15" fill="rgb(215,77,49)"/><text x="24.1355%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="23.9877%" y="613" width="0.1227%" height="15" fill="rgb(248,100,22)"/><text x="24.2377%" y="623.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (28 samples, 0.57%)</title><rect x="23.6810%" y="629" width="0.5726%" height="15" fill="rgb(208,67,9)"/><text x="23.9310%" y="639.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (37 samples, 0.76%)</title><rect x="23.5992%" y="645" width="0.7566%" height="15" fill="rgb(219,133,21)"/><text x="23.8492%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (45 samples, 0.92%)</title><rect x="23.5787%" y="661" width="0.9202%" height="15" fill="rgb(246,46,29)"/><text x="23.8287%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.22%)</title><rect x="24.5194%" y="629" width="0.2249%" height="15" fill="rgb(246,185,52)"/><text x="24.7694%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.14%)</title><rect x="24.6012%" y="613" width="0.1431%" height="15" fill="rgb(252,136,11)"/><text x="24.8512%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (15 samples, 0.31%)</title><rect x="24.4990%" y="645" width="0.3067%" height="15" fill="rgb(219,138,53)"/><text x="24.7490%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="24.8057%" y="645" width="0.1022%" height="15" fill="rgb(211,51,23)"/><text x="25.0557%" y="655.50"></text></g><g><title>_int_free (13 samples, 0.27%)</title><rect x="25.0102%" y="629" width="0.2658%" height="15" fill="rgb(247,221,28)"/><text x="25.2602%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (19 samples, 0.39%)</title><rect x="24.9080%" y="645" width="0.3885%" height="15" fill="rgb(251,222,45)"/><text x="25.1580%" y="655.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="25.5215%" y="421" width="0.2045%" height="15" fill="rgb(217,162,53)"/><text x="25.7715%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.43%)</title><rect x="25.3374%" y="613" width="0.4294%" height="15" fill="rgb(229,93,14)"/><text x="25.5874%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.29%)</title><rect x="25.4806%" y="597" width="0.2863%" height="15" fill="rgb(209,67,49)"/><text x="25.7306%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.27%)</title><rect x="25.5010%" y="581" width="0.2658%" height="15" fill="rgb(213,87,29)"/><text x="25.7510%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.27%)</title><rect x="25.5010%" y="565" width="0.2658%" height="15" fill="rgb(205,151,52)"/><text x="25.7510%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.27%)</title><rect x="25.5010%" y="549" width="0.2658%" height="15" fill="rgb(253,215,39)"/><text x="25.7510%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12 samples, 0.25%)</title><rect x="25.5215%" y="533" width="0.2454%" height="15" fill="rgb(221,220,41)"/><text x="25.7715%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (12 samples, 0.25%)</title><rect x="25.5215%" y="517" width="0.2454%" height="15" fill="rgb(218,133,21)"/><text x="25.7715%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.25%)</title><rect x="25.5215%" y="501" width="0.2454%" height="15" fill="rgb(221,193,43)"/><text x="25.7715%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.25%)</title><rect x="25.5215%" y="485" width="0.2454%" height="15" fill="rgb(240,128,52)"/><text x="25.7715%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (12 samples, 0.25%)</title><rect x="25.5215%" y="469" width="0.2454%" height="15" fill="rgb(253,114,12)"/><text x="25.7715%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.25%)</title><rect x="25.5215%" y="453" width="0.2454%" height="15" fill="rgb(215,223,47)"/><text x="25.7715%" y="463.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.25%)</title><rect x="25.5215%" y="437" width="0.2454%" height="15" fill="rgb(248,225,23)"/><text x="25.7715%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 0.45%)</title><rect x="25.3374%" y="629" width="0.4499%" height="15" fill="rgb(250,108,0)"/><text x="25.5874%" y="639.50"></text></g><g><title>decor_mem::select::predicates::NamedPredicate::to_indexed_predicate (28 samples, 0.57%)</title><rect x="25.2965%" y="645" width="0.5726%" height="15" fill="rgb(228,208,7)"/><text x="25.5465%" y="655.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.14%)</title><rect x="26.0532%" y="629" width="0.1431%" height="15" fill="rgb(244,45,10)"/><text x="26.3032%" y="639.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="26.2168%" y="629" width="0.1022%" height="15" fill="rgb(207,125,25)"/><text x="26.4668%" y="639.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="26.3190%" y="629" width="0.1840%" height="15" fill="rgb(210,195,18)"/><text x="26.5690%" y="639.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (92 samples, 1.88%)</title><rect x="26.5644%" y="629" width="1.8814%" height="15" fill="rgb(249,80,12)"/><text x="26.8144%" y="639.50">d..</text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (133 samples, 2.72%)</title><rect x="25.8691%" y="645" width="2.7198%" height="15" fill="rgb(221,65,9)"/><text x="26.1191%" y="655.50">de..</text></g><g><title>decor_mem::views::View::is_indexed_col (7 samples, 0.14%)</title><rect x="28.4458%" y="629" width="0.1431%" height="15" fill="rgb(235,49,36)"/><text x="28.6958%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="28.4867%" y="613" width="0.1022%" height="15" fill="rgb(225,32,20)"/><text x="28.7367%" y="623.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (275 samples, 5.62%)</title><rect x="22.9857%" y="677" width="5.6237%" height="15" fill="rgb(215,141,46)"/><text x="23.2357%" y="687.50">decor_m..</text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (201 samples, 4.11%)</title><rect x="24.4990%" y="661" width="4.1104%" height="15" fill="rgb(250,160,47)"/><text x="24.7490%" y="671.50">deco..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="29.1207%" y="661" width="0.2249%" height="15" fill="rgb(216,222,40)"/><text x="29.3707%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="29.1411%" y="645" width="0.2045%" height="15" fill="rgb(234,217,39)"/><text x="29.3911%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.20%)</title><rect x="29.1411%" y="629" width="0.2045%" height="15" fill="rgb(207,178,40)"/><text x="29.3911%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.20%)</title><rect x="29.1411%" y="613" width="0.2045%" height="15" fill="rgb(221,136,13)"/><text x="29.3911%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.18%)</title><rect x="29.1616%" y="597" width="0.1840%" height="15" fill="rgb(249,199,10)"/><text x="29.4116%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (9 samples, 0.18%)</title><rect x="29.1616%" y="581" width="0.1840%" height="15" fill="rgb(249,222,13)"/><text x="29.4116%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.18%)</title><rect x="29.1616%" y="565" width="0.1840%" height="15" fill="rgb(244,185,38)"/><text x="29.4116%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.18%)</title><rect x="29.1616%" y="549" width="0.1840%" height="15" fill="rgb(236,202,9)"/><text x="29.4116%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.16%)</title><rect x="29.1820%" y="533" width="0.1636%" height="15" fill="rgb(250,229,37)"/><text x="29.4320%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.16%)</title><rect x="29.1820%" y="517" width="0.1636%" height="15" fill="rgb(206,174,23)"/><text x="29.4320%" y="527.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.16%)</title><rect x="29.1820%" y="501" width="0.1636%" height="15" fill="rgb(211,33,43)"/><text x="29.4320%" y="511.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="29.1820%" y="485" width="0.1636%" height="15" fill="rgb(245,58,50)"/><text x="29.4320%" y="495.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.22%)</title><rect x="29.4274%" y="661" width="0.2249%" height="15" fill="rgb(244,68,36)"/><text x="29.6774%" y="671.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="29.5501%" y="645" width="0.1022%" height="15" fill="rgb(232,229,15)"/><text x="29.8001%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.16%)</title><rect x="29.6524%" y="661" width="0.1636%" height="15" fill="rgb(254,30,23)"/><text x="29.9024%" y="671.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="30.1022%" y="597" width="0.1227%" height="15" fill="rgb(235,160,14)"/><text x="30.3522%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (13 samples, 0.27%)</title><rect x="30.0000%" y="629" width="0.2658%" height="15" fill="rgb(212,155,44)"/><text x="30.2500%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.20%)</title><rect x="30.0613%" y="613" width="0.2045%" height="15" fill="rgb(226,2,50)"/><text x="30.3113%" y="623.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="30.4908%" y="581" width="0.1227%" height="15" fill="rgb(234,177,6)"/><text x="30.7408%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (26 samples, 0.53%)</title><rect x="30.3067%" y="613" width="0.5317%" height="15" fill="rgb(217,24,9)"/><text x="30.5567%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (25 samples, 0.51%)</title><rect x="30.3272%" y="597" width="0.5112%" height="15" fill="rgb(220,13,46)"/><text x="30.5772%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (35 samples, 0.72%)</title><rect x="30.2658%" y="629" width="0.7157%" height="15" fill="rgb(239,221,27)"/><text x="30.5158%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (7 samples, 0.14%)</title><rect x="30.8384%" y="613" width="0.1431%" height="15" fill="rgb(222,198,25)"/><text x="31.0884%" y="623.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.14%)</title><rect x="31.2883%" y="613" width="0.1431%" height="15" fill="rgb(211,99,13)"/><text x="31.5383%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="31.4724%" y="613" width="0.1431%" height="15" fill="rgb(232,111,31)"/><text x="31.7224%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.25%)</title><rect x="31.6769%" y="597" width="0.2454%" height="15" fill="rgb(245,82,37)"/><text x="31.9269%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (100 samples, 2.04%)</title><rect x="29.9796%" y="645" width="2.0450%" height="15" fill="rgb(227,149,46)"/><text x="30.2296%" y="655.50">&lt;..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (45 samples, 0.92%)</title><rect x="31.1043%" y="629" width="0.9202%" height="15" fill="rgb(218,36,50)"/><text x="31.3543%" y="639.50"></text></g><g><title>core::fmt::write (20 samples, 0.41%)</title><rect x="31.6155%" y="613" width="0.4090%" height="15" fill="rgb(226,80,48)"/><text x="31.8655%" y="623.50"></text></g><g><title>core::fmt::write (106 samples, 2.17%)</title><rect x="29.8773%" y="661" width="2.1677%" height="15" fill="rgb(238,224,15)"/><text x="30.1273%" y="671.50">c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.16%)</title><rect x="32.0450%" y="661" width="0.1636%" height="15" fill="rgb(241,136,10)"/><text x="32.2950%" y="671.50"></text></g><g><title>&lt;decor_mem::views::HashedRowPtr as core::cmp::PartialEq&gt;::eq (7 samples, 0.14%)</title><rect x="32.8221%" y="645" width="0.1431%" height="15" fill="rgb(208,32,45)"/><text x="33.0721%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="33.0470%" y="645" width="0.1227%" height="15" fill="rgb(207,135,9)"/><text x="33.2970%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.12%)</title><rect x="33.1902%" y="645" width="0.1227%" height="15" fill="rgb(206,86,44)"/><text x="33.4402%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (55 samples, 1.12%)</title><rect x="32.2086%" y="661" width="1.1247%" height="15" fill="rgb(245,177,15)"/><text x="32.4586%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.29%)</title><rect x="33.3333%" y="661" width="0.2863%" height="15" fill="rgb(206,64,50)"/><text x="33.5833%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (6 samples, 0.12%)</title><rect x="33.7832%" y="581" width="0.1227%" height="15" fill="rgb(234,36,40)"/><text x="34.0332%" y="591.50"></text></g><g><title>core::cmp::PartialOrd::ge (6 samples, 0.12%)</title><rect x="33.7832%" y="565" width="0.1227%" height="15" fill="rgb(213,64,8)"/><text x="34.0332%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (5 samples, 0.10%)</title><rect x="33.8037%" y="549" width="0.1022%" height="15" fill="rgb(210,75,36)"/><text x="34.0537%" y="559.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (5 samples, 0.10%)</title><rect x="33.8037%" y="533" width="0.1022%" height="15" fill="rgb(229,88,21)"/><text x="34.0537%" y="543.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (5 samples, 0.10%)</title><rect x="33.8037%" y="517" width="0.1022%" height="15" fill="rgb(252,204,47)"/><text x="34.0537%" y="527.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (15 samples, 0.31%)</title><rect x="33.6196%" y="645" width="0.3067%" height="15" fill="rgb(208,77,27)"/><text x="33.8696%" y="655.50"></text></g><g><title>std::time::Instant::duration_since (15 samples, 0.31%)</title><rect x="33.6196%" y="629" width="0.3067%" height="15" fill="rgb(221,76,26)"/><text x="33.8696%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (15 samples, 0.31%)</title><rect x="33.6196%" y="613" width="0.3067%" height="15" fill="rgb(225,139,18)"/><text x="33.8696%" y="623.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (13 samples, 0.27%)</title><rect x="33.6605%" y="597" width="0.2658%" height="15" fill="rgb(230,137,11)"/><text x="33.9105%" y="607.50"></text></g><g><title>std::time::Instant::elapsed (20 samples, 0.41%)</title><rect x="33.6196%" y="661" width="0.4090%" height="15" fill="rgb(212,28,1)"/><text x="33.8696%" y="671.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.10%)</title><rect x="33.9264%" y="645" width="0.1022%" height="15" fill="rgb(248,164,17)"/><text x="34.1764%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (5 samples, 0.10%)</title><rect x="33.9264%" y="629" width="0.1022%" height="15" fill="rgb(222,171,42)"/><text x="34.1764%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (5 samples, 0.10%)</title><rect x="33.9264%" y="613" width="0.1022%" height="15" fill="rgb(243,84,45)"/><text x="34.1764%" y="623.50"></text></g><g><title>__clock_gettime_2 (5 samples, 0.10%)</title><rect x="33.9264%" y="597" width="0.1022%" height="15" fill="rgb(252,49,23)"/><text x="34.1764%" y="607.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (276 samples, 5.64%)</title><rect x="28.6094%" y="677" width="5.6442%" height="15" fill="rgb(215,19,7)"/><text x="28.8594%" y="687.50">decor_m..</text></g><g><title>std::time::Instant::now (11 samples, 0.22%)</title><rect x="34.0286%" y="661" width="0.2249%" height="15" fill="rgb(238,81,41)"/><text x="34.2786%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (11 samples, 0.22%)</title><rect x="34.0286%" y="645" width="0.2249%" height="15" fill="rgb(210,199,37)"/><text x="34.2786%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::now (11 samples, 0.22%)</title><rect x="34.0286%" y="629" width="0.2249%" height="15" fill="rgb(244,192,49)"/><text x="34.2786%" y="639.50"></text></g><g><title>__clock_gettime_2 (10 samples, 0.20%)</title><rect x="34.0491%" y="613" width="0.2045%" height="15" fill="rgb(226,211,11)"/><text x="34.2991%" y="623.50"></text></g><g><title>__vdso_clock_gettime (9 samples, 0.18%)</title><rect x="34.0695%" y="597" width="0.1840%" height="15" fill="rgb(236,162,54)"/><text x="34.3195%" y="607.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (977 samples, 19.98%)</title><rect x="14.3354%" y="725" width="19.9796%" height="15" fill="rgb(220,229,9)"/><text x="14.5854%" y="735.50">&lt;decor_mem::Shim as msql_srv::M..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (977 samples, 19.98%)</title><rect x="14.3354%" y="709" width="19.9796%" height="15" fill="rgb(250,87,22)"/><text x="14.5854%" y="719.50">decor_mem::query_transformer::Q..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (878 samples, 17.96%)</title><rect x="16.3599%" y="693" width="17.9550%" height="15" fill="rgb(239,43,17)"/><text x="16.6099%" y="703.50">decor_mem::query_transformer..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.18%)</title><rect x="34.3354%" y="677" width="0.1840%" height="15" fill="rgb(231,177,25)"/><text x="34.5854%" y="687.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="34.3967%" y="661" width="0.1227%" height="15" fill="rgb(219,179,1)"/><text x="34.6467%" y="671.50"></text></g><g><title>__dev_queue_xmit (6 samples, 0.12%)</title><rect x="34.8057%" y="357" width="0.1227%" height="15" fill="rgb(238,219,53)"/><text x="35.0557%" y="367.50"></text></g><g><title>enqueue_task_fair (5 samples, 0.10%)</title><rect x="35.5215%" y="53" width="0.1022%" height="15" fill="rgb(232,167,36)"/><text x="35.7715%" y="63.50"></text></g><g><title>enqueue_entity (5 samples, 0.10%)</title><rect x="35.5215%" y="37" width="0.1022%" height="15" fill="rgb(244,19,51)"/><text x="35.7715%" y="47.50"></text></g><g><title>__wake_up_common (19 samples, 0.39%)</title><rect x="35.3579%" y="101" width="0.3885%" height="15" fill="rgb(224,6,22)"/><text x="35.6079%" y="111.50"></text></g><g><title>pollwake (18 samples, 0.37%)</title><rect x="35.3783%" y="85" width="0.3681%" height="15" fill="rgb(224,145,5)"/><text x="35.6283%" y="95.50"></text></g><g><title>try_to_wake_up (18 samples, 0.37%)</title><rect x="35.3783%" y="69" width="0.3681%" height="15" fill="rgb(234,130,49)"/><text x="35.6283%" y="79.50"></text></g><g><title>sock_def_readable (22 samples, 0.45%)</title><rect x="35.3170%" y="133" width="0.4499%" height="15" fill="rgb(254,6,2)"/><text x="35.5670%" y="143.50"></text></g><g><title>__wake_up_common_lock (20 samples, 0.41%)</title><rect x="35.3579%" y="117" width="0.4090%" height="15" fill="rgb(208,96,46)"/><text x="35.6079%" y="127.50"></text></g><g><title>tcp_ack (13 samples, 0.27%)</title><rect x="35.7669%" y="133" width="0.2658%" height="15" fill="rgb(239,3,39)"/><text x="36.0169%" y="143.50"></text></g><g><title>__ip_queue_xmit (65 samples, 1.33%)</title><rect x="34.7648%" y="405" width="1.3292%" height="15" fill="rgb(233,210,1)"/><text x="35.0148%" y="415.50"></text></g><g><title>ip_output (64 samples, 1.31%)</title><rect x="34.7853%" y="389" width="1.3088%" height="15" fill="rgb(244,137,37)"/><text x="35.0353%" y="399.50"></text></g><g><title>ip_finish_output2 (64 samples, 1.31%)</title><rect x="34.7853%" y="373" width="1.3088%" height="15" fill="rgb(240,136,2)"/><text x="35.0353%" y="383.50"></text></g><g><title>__local_bh_enable_ip (57 samples, 1.17%)</title><rect x="34.9284%" y="357" width="1.1656%" height="15" fill="rgb(239,18,37)"/><text x="35.1784%" y="367.50"></text></g><g><title>do_softirq (57 samples, 1.17%)</title><rect x="34.9284%" y="341" width="1.1656%" height="15" fill="rgb(218,185,22)"/><text x="35.1784%" y="351.50"></text></g><g><title>do_softirq_own_stack (56 samples, 1.15%)</title><rect x="34.9489%" y="325" width="1.1452%" height="15" fill="rgb(225,218,4)"/><text x="35.1989%" y="335.50"></text></g><g><title>__do_softirq (56 samples, 1.15%)</title><rect x="34.9489%" y="309" width="1.1452%" height="15" fill="rgb(230,182,32)"/><text x="35.1989%" y="319.50"></text></g><g><title>net_rx_action (53 samples, 1.08%)</title><rect x="35.0102%" y="293" width="1.0838%" height="15" fill="rgb(242,56,43)"/><text x="35.2602%" y="303.50"></text></g><g><title>process_backlog (52 samples, 1.06%)</title><rect x="35.0307%" y="277" width="1.0634%" height="15" fill="rgb(233,99,24)"/><text x="35.2807%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (51 samples, 1.04%)</title><rect x="35.0511%" y="261" width="1.0429%" height="15" fill="rgb(234,209,42)"/><text x="35.3011%" y="271.50"></text></g><g><title>ip_rcv (49 samples, 1.00%)</title><rect x="35.0920%" y="245" width="1.0020%" height="15" fill="rgb(227,7,12)"/><text x="35.3420%" y="255.50"></text></g><g><title>ip_local_deliver (48 samples, 0.98%)</title><rect x="35.1125%" y="229" width="0.9816%" height="15" fill="rgb(245,203,43)"/><text x="35.3625%" y="239.50"></text></g><g><title>ip_local_deliver_finish (48 samples, 0.98%)</title><rect x="35.1125%" y="213" width="0.9816%" height="15" fill="rgb(238,205,33)"/><text x="35.3625%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (47 samples, 0.96%)</title><rect x="35.1329%" y="197" width="0.9611%" height="15" fill="rgb(231,56,7)"/><text x="35.3829%" y="207.50"></text></g><g><title>tcp_v4_rcv (45 samples, 0.92%)</title><rect x="35.1738%" y="181" width="0.9202%" height="15" fill="rgb(244,186,29)"/><text x="35.4238%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (44 samples, 0.90%)</title><rect x="35.1943%" y="165" width="0.8998%" height="15" fill="rgb(234,111,31)"/><text x="35.4443%" y="175.50"></text></g><g><title>tcp_rcv_established (44 samples, 0.90%)</title><rect x="35.1943%" y="149" width="0.8998%" height="15" fill="rgb(241,149,10)"/><text x="35.4443%" y="159.50"></text></g><g><title>__tcp_transmit_skb (67 samples, 1.37%)</title><rect x="34.7648%" y="421" width="1.3701%" height="15" fill="rgb(249,206,44)"/><text x="35.0148%" y="431.50"></text></g><g><title>__tcp_push_pending_frames (70 samples, 1.43%)</title><rect x="34.7444%" y="453" width="1.4315%" height="15" fill="rgb(251,153,30)"/><text x="34.9944%" y="463.50"></text></g><g><title>tcp_write_xmit (70 samples, 1.43%)</title><rect x="34.7444%" y="437" width="1.4315%" height="15" fill="rgb(239,152,38)"/><text x="34.9944%" y="447.50"></text></g><g><title>__x64_sys_sendto (81 samples, 1.66%)</title><rect x="34.6626%" y="533" width="1.6564%" height="15" fill="rgb(249,139,47)"/><text x="34.9126%" y="543.50"></text></g><g><title>__sys_sendto (81 samples, 1.66%)</title><rect x="34.6626%" y="517" width="1.6564%" height="15" fill="rgb(244,64,35)"/><text x="34.9126%" y="527.50"></text></g><g><title>sock_sendmsg (81 samples, 1.66%)</title><rect x="34.6626%" y="501" width="1.6564%" height="15" fill="rgb(216,46,15)"/><text x="34.9126%" y="511.50"></text></g><g><title>tcp_sendmsg (79 samples, 1.62%)</title><rect x="34.7035%" y="485" width="1.6155%" height="15" fill="rgb(250,74,19)"/><text x="34.9535%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (78 samples, 1.60%)</title><rect x="34.7239%" y="469" width="1.5951%" height="15" fill="rgb(249,42,33)"/><text x="34.9739%" y="479.50"></text></g><g><title>do_syscall_64 (84 samples, 1.72%)</title><rect x="34.6421%" y="549" width="1.7178%" height="15" fill="rgb(242,149,17)"/><text x="34.8921%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (86 samples, 1.76%)</title><rect x="34.6421%" y="565" width="1.7587%" height="15" fill="rgb(244,29,21)"/><text x="34.8921%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (94 samples, 1.92%)</title><rect x="34.5194%" y="677" width="1.9223%" height="15" fill="rgb(220,130,37)"/><text x="34.7694%" y="687.50">&lt;..</text></g><g><title>mysql::conn::Conn::_query (93 samples, 1.90%)</title><rect x="34.5399%" y="661" width="1.9018%" height="15" fill="rgb(211,67,2)"/><text x="34.7899%" y="671.50">m..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (90 samples, 1.84%)</title><rect x="34.6012%" y="645" width="1.8405%" height="15" fill="rgb(235,68,52)"/><text x="34.8512%" y="655.50">m..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (88 samples, 1.80%)</title><rect x="34.6421%" y="629" width="1.7996%" height="15" fill="rgb(246,142,3)"/><text x="34.8921%" y="639.50">s..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (88 samples, 1.80%)</title><rect x="34.6421%" y="613" width="1.7996%" height="15" fill="rgb(241,25,7)"/><text x="34.8921%" y="623.50">&lt;..</text></g><g><title>std::sys_common::net::TcpStream::write (88 samples, 1.80%)</title><rect x="34.6421%" y="597" width="1.7996%" height="15" fill="rgb(242,119,39)"/><text x="34.8921%" y="607.50">s..</text></g><g><title>__libc_send (88 samples, 1.80%)</title><rect x="34.6421%" y="581" width="1.7996%" height="15" fill="rgb(241,98,45)"/><text x="34.8921%" y="591.50">_..</text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="36.5440%" y="581" width="0.1227%" height="15" fill="rgb(254,28,30)"/><text x="36.7940%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (16 samples, 0.33%)</title><rect x="36.4622%" y="613" width="0.3272%" height="15" fill="rgb(241,142,54)"/><text x="36.7122%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (15 samples, 0.31%)</title><rect x="36.4826%" y="597" width="0.3067%" height="15" fill="rgb(222,85,15)"/><text x="36.7326%" y="607.50"></text></g><g><title>alloc::fmt::format (25 samples, 0.51%)</title><rect x="36.4622%" y="677" width="0.5112%" height="15" fill="rgb(210,85,47)"/><text x="36.7122%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (25 samples, 0.51%)</title><rect x="36.4622%" y="661" width="0.5112%" height="15" fill="rgb(224,206,25)"/><text x="36.7122%" y="671.50"></text></g><g><title>core::fmt::write (25 samples, 0.51%)</title><rect x="36.4622%" y="645" width="0.5112%" height="15" fill="rgb(243,201,19)"/><text x="36.7122%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (25 samples, 0.51%)</title><rect x="36.4622%" y="629" width="0.5112%" height="15" fill="rgb(236,59,4)"/><text x="36.7122%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.18%)</title><rect x="36.7894%" y="613" width="0.1840%" height="15" fill="rgb(254,179,45)"/><text x="37.0394%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (6 samples, 0.12%)</title><rect x="36.8507%" y="597" width="0.1227%" height="15" fill="rgb(226,14,10)"/><text x="37.1007%" y="607.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (164 samples, 3.35%)</title><rect x="34.3149%" y="693" width="3.3538%" height="15" fill="rgb(244,27,41)"/><text x="34.5649%" y="703.50">dec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.70%)</title><rect x="36.9734%" y="677" width="0.6953%" height="15" fill="rgb(235,35,32)"/><text x="37.2234%" y="687.50"></text></g><g><title>__GI___libc_malloc (34 samples, 0.70%)</title><rect x="36.9734%" y="661" width="0.6953%" height="15" fill="rgb(218,68,31)"/><text x="37.2234%" y="671.50"></text></g><g><title>_int_malloc (34 samples, 0.70%)</title><rect x="36.9734%" y="645" width="0.6953%" height="15" fill="rgb(207,120,37)"/><text x="37.2234%" y="655.50"></text></g><g><title>malloc_consolidate (25 samples, 0.51%)</title><rect x="37.1575%" y="629" width="0.5112%" height="15" fill="rgb(227,98,0)"/><text x="37.4075%" y="639.50"></text></g><g><title>__dev_queue_xmit (6 samples, 0.12%)</title><rect x="38.0368%" y="357" width="0.1227%" height="15" fill="rgb(207,7,3)"/><text x="38.2868%" y="367.50"></text></g><g><title>sock_def_readable (10 samples, 0.20%)</title><rect x="38.2822%" y="133" width="0.2045%" height="15" fill="rgb(206,98,19)"/><text x="38.5322%" y="143.50"></text></g><g><title>__wake_up_common_lock (10 samples, 0.20%)</title><rect x="38.2822%" y="117" width="0.2045%" height="15" fill="rgb(217,5,26)"/><text x="38.5322%" y="127.50"></text></g><g><title>__wake_up_common (10 samples, 0.20%)</title><rect x="38.2822%" y="101" width="0.2045%" height="15" fill="rgb(235,190,38)"/><text x="38.5322%" y="111.50"></text></g><g><title>pollwake (10 samples, 0.20%)</title><rect x="38.2822%" y="85" width="0.2045%" height="15" fill="rgb(247,86,24)"/><text x="38.5322%" y="95.50"></text></g><g><title>try_to_wake_up (9 samples, 0.18%)</title><rect x="38.3027%" y="69" width="0.1840%" height="15" fill="rgb(205,101,16)"/><text x="38.5527%" y="79.50"></text></g><g><title>tcp_ack (8 samples, 0.16%)</title><rect x="38.4867%" y="133" width="0.1636%" height="15" fill="rgb(246,168,33)"/><text x="38.7367%" y="143.50"></text></g><g><title>ip_local_deliver (22 samples, 0.45%)</title><rect x="38.2209%" y="229" width="0.4499%" height="15" fill="rgb(231,114,1)"/><text x="38.4709%" y="239.50"></text></g><g><title>ip_local_deliver_finish (22 samples, 0.45%)</title><rect x="38.2209%" y="213" width="0.4499%" height="15" fill="rgb(207,184,53)"/><text x="38.4709%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (22 samples, 0.45%)</title><rect x="38.2209%" y="197" width="0.4499%" height="15" fill="rgb(224,95,51)"/><text x="38.4709%" y="207.50"></text></g><g><title>tcp_v4_rcv (22 samples, 0.45%)</title><rect x="38.2209%" y="181" width="0.4499%" height="15" fill="rgb(212,188,45)"/><text x="38.4709%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (19 samples, 0.39%)</title><rect x="38.2822%" y="165" width="0.3885%" height="15" fill="rgb(223,154,38)"/><text x="38.5322%" y="175.50"></text></g><g><title>tcp_rcv_established (19 samples, 0.39%)</title><rect x="38.2822%" y="149" width="0.3885%" height="15" fill="rgb(251,22,52)"/><text x="38.5322%" y="159.50"></text></g><g><title>__netif_receive_skb_one_core (24 samples, 0.49%)</title><rect x="38.2209%" y="261" width="0.4908%" height="15" fill="rgb(229,209,22)"/><text x="38.4709%" y="271.50"></text></g><g><title>ip_rcv (24 samples, 0.49%)</title><rect x="38.2209%" y="245" width="0.4908%" height="15" fill="rgb(234,138,34)"/><text x="38.4709%" y="255.50"></text></g><g><title>__ip_queue_xmit (35 samples, 0.72%)</title><rect x="38.0164%" y="405" width="0.7157%" height="15" fill="rgb(212,95,11)"/><text x="38.2664%" y="415.50"></text></g><g><title>ip_output (34 samples, 0.70%)</title><rect x="38.0368%" y="389" width="0.6953%" height="15" fill="rgb(240,179,47)"/><text x="38.2868%" y="399.50"></text></g><g><title>ip_finish_output2 (34 samples, 0.70%)</title><rect x="38.0368%" y="373" width="0.6953%" height="15" fill="rgb(240,163,11)"/><text x="38.2868%" y="383.50"></text></g><g><title>__local_bh_enable_ip (28 samples, 0.57%)</title><rect x="38.1595%" y="357" width="0.5726%" height="15" fill="rgb(236,37,12)"/><text x="38.4095%" y="367.50"></text></g><g><title>do_softirq (28 samples, 0.57%)</title><rect x="38.1595%" y="341" width="0.5726%" height="15" fill="rgb(232,164,16)"/><text x="38.4095%" y="351.50"></text></g><g><title>do_softirq_own_stack (27 samples, 0.55%)</title><rect x="38.1800%" y="325" width="0.5521%" height="15" fill="rgb(244,205,15)"/><text x="38.4300%" y="335.50"></text></g><g><title>__do_softirq (27 samples, 0.55%)</title><rect x="38.1800%" y="309" width="0.5521%" height="15" fill="rgb(223,117,47)"/><text x="38.4300%" y="319.50"></text></g><g><title>net_rx_action (27 samples, 0.55%)</title><rect x="38.1800%" y="293" width="0.5521%" height="15" fill="rgb(244,107,35)"/><text x="38.4300%" y="303.50"></text></g><g><title>process_backlog (26 samples, 0.53%)</title><rect x="38.2004%" y="277" width="0.5317%" height="15" fill="rgb(205,140,8)"/><text x="38.4504%" y="287.50"></text></g><g><title>__tcp_transmit_skb (37 samples, 0.76%)</title><rect x="38.0164%" y="421" width="0.7566%" height="15" fill="rgb(228,84,46)"/><text x="38.2664%" y="431.50"></text></g><g><title>__tcp_push_pending_frames (39 samples, 0.80%)</title><rect x="38.0164%" y="453" width="0.7975%" height="15" fill="rgb(254,188,9)"/><text x="38.2664%" y="463.50"></text></g><g><title>tcp_write_xmit (39 samples, 0.80%)</title><rect x="38.0164%" y="437" width="0.7975%" height="15" fill="rgb(206,112,54)"/><text x="38.2664%" y="447.50"></text></g><g><title>sock_sendmsg (52 samples, 1.06%)</title><rect x="37.9346%" y="501" width="1.0634%" height="15" fill="rgb(216,84,49)"/><text x="38.1846%" y="511.50"></text></g><g><title>tcp_sendmsg (52 samples, 1.06%)</title><rect x="37.9346%" y="485" width="1.0634%" height="15" fill="rgb(214,194,35)"/><text x="38.1846%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (50 samples, 1.02%)</title><rect x="37.9755%" y="469" width="1.0225%" height="15" fill="rgb(249,28,3)"/><text x="38.2255%" y="479.50"></text></g><g><title>__x64_sys_sendto (54 samples, 1.10%)</title><rect x="37.9141%" y="533" width="1.1043%" height="15" fill="rgb(222,56,52)"/><text x="38.1641%" y="543.50"></text></g><g><title>__sys_sendto (54 samples, 1.10%)</title><rect x="37.9141%" y="517" width="1.1043%" height="15" fill="rgb(245,217,50)"/><text x="38.1641%" y="527.50"></text></g><g><title>do_syscall_64 (59 samples, 1.21%)</title><rect x="37.8937%" y="549" width="1.2065%" height="15" fill="rgb(213,201,24)"/><text x="38.1437%" y="559.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (67 samples, 1.37%)</title><rect x="37.7710%" y="677" width="1.3701%" height="15" fill="rgb(248,116,28)"/><text x="38.0210%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (66 samples, 1.35%)</title><rect x="37.7914%" y="661" width="1.3497%" height="15" fill="rgb(219,72,43)"/><text x="38.0414%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (65 samples, 1.33%)</title><rect x="37.8119%" y="645" width="1.3292%" height="15" fill="rgb(209,138,14)"/><text x="38.0619%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (63 samples, 1.29%)</title><rect x="37.8528%" y="629" width="1.2883%" height="15" fill="rgb(222,18,33)"/><text x="38.1028%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (63 samples, 1.29%)</title><rect x="37.8528%" y="613" width="1.2883%" height="15" fill="rgb(213,199,7)"/><text x="38.1028%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (63 samples, 1.29%)</title><rect x="37.8528%" y="597" width="1.2883%" height="15" fill="rgb(250,110,10)"/><text x="38.1028%" y="607.50"></text></g><g><title>__libc_send (63 samples, 1.29%)</title><rect x="37.8528%" y="581" width="1.2883%" height="15" fill="rgb(248,123,6)"/><text x="38.1028%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (62 samples, 1.27%)</title><rect x="37.8732%" y="565" width="1.2679%" height="15" fill="rgb(206,91,31)"/><text x="38.1232%" y="575.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="39.3047%" y="677" width="0.1840%" height="15" fill="rgb(211,154,13)"/><text x="39.5547%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="39.3047%" y="661" width="0.1840%" height="15" fill="rgb(225,148,7)"/><text x="39.5547%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.10%)</title><rect x="39.4888%" y="677" width="0.1022%" height="15" fill="rgb(220,160,43)"/><text x="39.7388%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="39.8978%" y="629" width="0.1022%" height="15" fill="rgb(213,52,39)"/><text x="40.1478%" y="639.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="39.8569%" y="645" width="0.1636%" height="15" fill="rgb(243,137,7)"/><text x="40.1069%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (118 samples, 2.41%)</title><rect x="37.6687%" y="693" width="2.4131%" height="15" fill="rgb(230,79,13)"/><text x="37.9187%" y="703.50">de..</text></g><g><title>decor_mem::views::Views::delete (24 samples, 0.49%)</title><rect x="39.5910%" y="677" width="0.4908%" height="15" fill="rgb(247,105,23)"/><text x="39.8410%" y="687.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (17 samples, 0.35%)</title><rect x="39.7342%" y="661" width="0.3476%" height="15" fill="rgb(223,179,41)"/><text x="39.9842%" y="671.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (7 samples, 0.14%)</title><rect x="40.1022%" y="693" width="0.1431%" height="15" fill="rgb(218,9,34)"/><text x="40.3522%" y="703.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (1,269 samples, 25.95%)</title><rect x="14.3354%" y="773" width="25.9509%" height="15" fill="rgb(222,106,8)"/><text x="14.5854%" y="783.50">decor_mem::Shim::run_on_tcp</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,269 samples, 25.95%)</title><rect x="14.3354%" y="757" width="25.9509%" height="15" fill="rgb(211,220,0)"/><text x="14.5854%" y="767.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (1,269 samples, 25.95%)</title><rect x="14.3354%" y="741" width="25.9509%" height="15" fill="rgb(229,52,16)"/><text x="14.5854%" y="751.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (292 samples, 5.97%)</title><rect x="34.3149%" y="725" width="5.9714%" height="15" fill="rgb(212,155,18)"/><text x="34.5649%" y="735.50">&lt;decor_m..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (292 samples, 5.97%)</title><rect x="34.3149%" y="709" width="5.9714%" height="15" fill="rgb(242,21,14)"/><text x="34.5649%" y="719.50">decor_me..</text></g><g><title>__x64_sys_recvfrom (7 samples, 0.14%)</title><rect x="40.4703%" y="517" width="0.1431%" height="15" fill="rgb(222,19,48)"/><text x="40.7203%" y="527.50"></text></g><g><title>__sys_recvfrom (7 samples, 0.14%)</title><rect x="40.4703%" y="501" width="0.1431%" height="15" fill="rgb(232,45,27)"/><text x="40.7203%" y="511.50"></text></g><g><title>inet_recvmsg (7 samples, 0.14%)</title><rect x="40.4703%" y="485" width="0.1431%" height="15" fill="rgb(249,103,42)"/><text x="40.7203%" y="495.50"></text></g><g><title>tcp_recvmsg (7 samples, 0.14%)</title><rect x="40.4703%" y="469" width="0.1431%" height="15" fill="rgb(246,81,33)"/><text x="40.7203%" y="479.50"></text></g><g><title>do_syscall_64 (8 samples, 0.16%)</title><rect x="40.4703%" y="533" width="0.1636%" height="15" fill="rgb(252,33,42)"/><text x="40.7203%" y="543.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (10 samples, 0.20%)</title><rect x="40.4703%" y="773" width="0.2045%" height="15" fill="rgb(209,212,41)"/><text x="40.7203%" y="783.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (10 samples, 0.20%)</title><rect x="40.4703%" y="757" width="0.2045%" height="15" fill="rgb(207,154,6)"/><text x="40.7203%" y="767.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (10 samples, 0.20%)</title><rect x="40.4703%" y="741" width="0.2045%" height="15" fill="rgb(223,64,47)"/><text x="40.7203%" y="751.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (10 samples, 0.20%)</title><rect x="40.4703%" y="725" width="0.2045%" height="15" fill="rgb(211,161,38)"/><text x="40.7203%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (10 samples, 0.20%)</title><rect x="40.4703%" y="709" width="0.2045%" height="15" fill="rgb(219,138,40)"/><text x="40.7203%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (10 samples, 0.20%)</title><rect x="40.4703%" y="693" width="0.2045%" height="15" fill="rgb(241,228,46)"/><text x="40.7203%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (10 samples, 0.20%)</title><rect x="40.4703%" y="677" width="0.2045%" height="15" fill="rgb(223,209,38)"/><text x="40.7203%" y="687.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.20%)</title><rect x="40.4703%" y="661" width="0.2045%" height="15" fill="rgb(236,164,45)"/><text x="40.7203%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.20%)</title><rect x="40.4703%" y="645" width="0.2045%" height="15" fill="rgb(231,15,5)"/><text x="40.7203%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (10 samples, 0.20%)</title><rect x="40.4703%" y="629" width="0.2045%" height="15" fill="rgb(252,35,15)"/><text x="40.7203%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (10 samples, 0.20%)</title><rect x="40.4703%" y="613" width="0.2045%" height="15" fill="rgb(248,181,18)"/><text x="40.7203%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (10 samples, 0.20%)</title><rect x="40.4703%" y="597" width="0.2045%" height="15" fill="rgb(233,39,42)"/><text x="40.7203%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (10 samples, 0.20%)</title><rect x="40.4703%" y="581" width="0.2045%" height="15" fill="rgb(238,110,33)"/><text x="40.7203%" y="591.50"></text></g><g><title>__libc_recv (10 samples, 0.20%)</title><rect x="40.4703%" y="565" width="0.2045%" height="15" fill="rgb(233,195,10)"/><text x="40.7203%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (10 samples, 0.20%)</title><rect x="40.4703%" y="549" width="0.2045%" height="15" fill="rgb(254,105,3)"/><text x="40.7203%" y="559.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (6 samples, 0.12%)</title><rect x="40.6953%" y="773" width="0.1227%" height="15" fill="rgb(221,225,9)"/><text x="40.9453%" y="783.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (6 samples, 0.12%)</title><rect x="40.9202%" y="773" width="0.1227%" height="15" fill="rgb(224,227,45)"/><text x="41.1702%" y="783.50"></text></g><g><title>sk_wait_data (16 samples, 0.33%)</title><rect x="41.5542%" y="469" width="0.3272%" height="15" fill="rgb(229,198,43)"/><text x="41.8042%" y="479.50"></text></g><g><title>wait_woken (14 samples, 0.29%)</title><rect x="41.5951%" y="453" width="0.2863%" height="15" fill="rgb(206,209,35)"/><text x="41.8451%" y="463.50"></text></g><g><title>schedule_timeout (13 samples, 0.27%)</title><rect x="41.6155%" y="437" width="0.2658%" height="15" fill="rgb(245,195,53)"/><text x="41.8655%" y="447.50"></text></g><g><title>schedule (13 samples, 0.27%)</title><rect x="41.6155%" y="421" width="0.2658%" height="15" fill="rgb(240,92,26)"/><text x="41.8655%" y="431.50"></text></g><g><title>__schedule (13 samples, 0.27%)</title><rect x="41.6155%" y="405" width="0.2658%" height="15" fill="rgb(207,40,23)"/><text x="41.8655%" y="415.50"></text></g><g><title>do_syscall_64 (23 samples, 0.47%)</title><rect x="41.4724%" y="549" width="0.4703%" height="15" fill="rgb(223,111,35)"/><text x="41.7224%" y="559.50"></text></g><g><title>__x64_sys_recvfrom (23 samples, 0.47%)</title><rect x="41.4724%" y="533" width="0.4703%" height="15" fill="rgb(229,147,28)"/><text x="41.7224%" y="543.50"></text></g><g><title>__sys_recvfrom (23 samples, 0.47%)</title><rect x="41.4724%" y="517" width="0.4703%" height="15" fill="rgb(211,29,28)"/><text x="41.7224%" y="527.50"></text></g><g><title>inet_recvmsg (21 samples, 0.43%)</title><rect x="41.5133%" y="501" width="0.4294%" height="15" fill="rgb(228,72,33)"/><text x="41.7633%" y="511.50"></text></g><g><title>tcp_recvmsg (21 samples, 0.43%)</title><rect x="41.5133%" y="485" width="0.4294%" height="15" fill="rgb(205,214,31)"/><text x="41.7633%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (24 samples, 0.49%)</title><rect x="41.4724%" y="565" width="0.4908%" height="15" fill="rgb(224,111,15)"/><text x="41.7224%" y="575.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (25 samples, 0.51%)</title><rect x="41.4724%" y="661" width="0.5112%" height="15" fill="rgb(253,21,26)"/><text x="41.7224%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (25 samples, 0.51%)</title><rect x="41.4724%" y="645" width="0.5112%" height="15" fill="rgb(245,139,43)"/><text x="41.7224%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (25 samples, 0.51%)</title><rect x="41.4724%" y="629" width="0.5112%" height="15" fill="rgb(252,170,7)"/><text x="41.7224%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::read (25 samples, 0.51%)</title><rect x="41.4724%" y="613" width="0.5112%" height="15" fill="rgb(231,118,14)"/><text x="41.7224%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (25 samples, 0.51%)</title><rect x="41.4724%" y="597" width="0.5112%" height="15" fill="rgb(238,83,0)"/><text x="41.7224%" y="607.50"></text></g><g><title>__libc_recv (25 samples, 0.51%)</title><rect x="41.4724%" y="581" width="0.5112%" height="15" fill="rgb(221,39,39)"/><text x="41.7224%" y="591.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.53%)</title><rect x="41.4724%" y="677" width="0.5317%" height="15" fill="rgb(222,119,46)"/><text x="41.7224%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (29 samples, 0.59%)</title><rect x="41.4315%" y="709" width="0.5930%" height="15" fill="rgb(222,165,49)"/><text x="41.6815%" y="719.50"></text></g><g><title>mysql::conn::Conn::read_packet (27 samples, 0.55%)</title><rect x="41.4724%" y="693" width="0.5521%" height="15" fill="rgb(219,113,52)"/><text x="41.7224%" y="703.50"></text></g><g><title>__dev_queue_xmit (6 samples, 0.12%)</title><rect x="42.2086%" y="421" width="0.1227%" height="15" fill="rgb(214,7,15)"/><text x="42.4586%" y="431.50"></text></g><g><title>tcp_ack (5 samples, 0.10%)</title><rect x="42.3926%" y="197" width="0.1022%" height="15" fill="rgb(235,32,4)"/><text x="42.6426%" y="207.50"></text></g><g><title>do_softirq (10 samples, 0.20%)</title><rect x="42.3313%" y="405" width="0.2045%" height="15" fill="rgb(238,90,54)"/><text x="42.5813%" y="415.50"></text></g><g><title>do_softirq_own_stack (10 samples, 0.20%)</title><rect x="42.3313%" y="389" width="0.2045%" height="15" fill="rgb(213,208,19)"/><text x="42.5813%" y="399.50"></text></g><g><title>__do_softirq (10 samples, 0.20%)</title><rect x="42.3313%" y="373" width="0.2045%" height="15" fill="rgb(233,156,4)"/><text x="42.5813%" y="383.50"></text></g><g><title>net_rx_action (10 samples, 0.20%)</title><rect x="42.3313%" y="357" width="0.2045%" height="15" fill="rgb(207,194,5)"/><text x="42.5813%" y="367.50"></text></g><g><title>process_backlog (10 samples, 0.20%)</title><rect x="42.3313%" y="341" width="0.2045%" height="15" fill="rgb(206,111,30)"/><text x="42.5813%" y="351.50"></text></g><g><title>__netif_receive_skb_one_core (10 samples, 0.20%)</title><rect x="42.3313%" y="325" width="0.2045%" height="15" fill="rgb(243,70,54)"/><text x="42.5813%" y="335.50"></text></g><g><title>ip_rcv (10 samples, 0.20%)</title><rect x="42.3313%" y="309" width="0.2045%" height="15" fill="rgb(242,28,8)"/><text x="42.5813%" y="319.50"></text></g><g><title>ip_local_deliver (10 samples, 0.20%)</title><rect x="42.3313%" y="293" width="0.2045%" height="15" fill="rgb(219,106,18)"/><text x="42.5813%" y="303.50"></text></g><g><title>ip_local_deliver_finish (10 samples, 0.20%)</title><rect x="42.3313%" y="277" width="0.2045%" height="15" fill="rgb(244,222,10)"/><text x="42.5813%" y="287.50"></text></g><g><title>ip_protocol_deliver_rcu (10 samples, 0.20%)</title><rect x="42.3313%" y="261" width="0.2045%" height="15" fill="rgb(236,179,52)"/><text x="42.5813%" y="271.50"></text></g><g><title>tcp_v4_rcv (10 samples, 0.20%)</title><rect x="42.3313%" y="245" width="0.2045%" height="15" fill="rgb(213,23,39)"/><text x="42.5813%" y="255.50"></text></g><g><title>tcp_v4_do_rcv (10 samples, 0.20%)</title><rect x="42.3313%" y="229" width="0.2045%" height="15" fill="rgb(238,48,10)"/><text x="42.5813%" y="239.50"></text></g><g><title>tcp_rcv_established (10 samples, 0.20%)</title><rect x="42.3313%" y="213" width="0.2045%" height="15" fill="rgb(251,196,23)"/><text x="42.5813%" y="223.50"></text></g><g><title>__ip_queue_xmit (20 samples, 0.41%)</title><rect x="42.1472%" y="469" width="0.4090%" height="15" fill="rgb(250,152,24)"/><text x="42.3972%" y="479.50"></text></g><g><title>ip_output (17 samples, 0.35%)</title><rect x="42.2086%" y="453" width="0.3476%" height="15" fill="rgb(209,150,17)"/><text x="42.4586%" y="463.50"></text></g><g><title>ip_finish_output2 (17 samples, 0.35%)</title><rect x="42.2086%" y="437" width="0.3476%" height="15" fill="rgb(234,202,34)"/><text x="42.4586%" y="447.50"></text></g><g><title>__local_bh_enable_ip (11 samples, 0.22%)</title><rect x="42.3313%" y="421" width="0.2249%" height="15" fill="rgb(253,148,53)"/><text x="42.5813%" y="431.50"></text></g><g><title>__tcp_transmit_skb (22 samples, 0.45%)</title><rect x="42.1472%" y="485" width="0.4499%" height="15" fill="rgb(218,129,16)"/><text x="42.3972%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (25 samples, 0.51%)</title><rect x="42.1472%" y="517" width="0.5112%" height="15" fill="rgb(216,85,19)"/><text x="42.3972%" y="527.50"></text></g><g><title>tcp_write_xmit (25 samples, 0.51%)</title><rect x="42.1472%" y="501" width="0.5112%" height="15" fill="rgb(235,228,7)"/><text x="42.3972%" y="511.50"></text></g><g><title>do_syscall_64 (36 samples, 0.74%)</title><rect x="42.0245%" y="613" width="0.7362%" height="15" fill="rgb(245,175,0)"/><text x="42.2745%" y="623.50"></text></g><g><title>__x64_sys_sendto (35 samples, 0.72%)</title><rect x="42.0450%" y="597" width="0.7157%" height="15" fill="rgb(208,168,36)"/><text x="42.2950%" y="607.50"></text></g><g><title>__sys_sendto (35 samples, 0.72%)</title><rect x="42.0450%" y="581" width="0.7157%" height="15" fill="rgb(246,171,24)"/><text x="42.2950%" y="591.50"></text></g><g><title>sock_sendmsg (34 samples, 0.70%)</title><rect x="42.0654%" y="565" width="0.6953%" height="15" fill="rgb(215,142,24)"/><text x="42.3154%" y="575.50"></text></g><g><title>tcp_sendmsg (34 samples, 0.70%)</title><rect x="42.0654%" y="549" width="0.6953%" height="15" fill="rgb(250,187,7)"/><text x="42.3154%" y="559.50"></text></g><g><title>tcp_sendmsg_locked (32 samples, 0.65%)</title><rect x="42.1063%" y="533" width="0.6544%" height="15" fill="rgb(228,66,33)"/><text x="42.3563%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (40 samples, 0.82%)</title><rect x="42.0245%" y="629" width="0.8180%" height="15" fill="rgb(234,215,21)"/><text x="42.2745%" y="639.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (70 samples, 1.43%)</title><rect x="41.4315%" y="757" width="1.4315%" height="15" fill="rgb(222,191,20)"/><text x="41.6815%" y="767.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (70 samples, 1.43%)</title><rect x="41.4315%" y="741" width="1.4315%" height="15" fill="rgb(245,79,54)"/><text x="41.6815%" y="751.50"></text></g><g><title>mysql::conn::Conn::_query (70 samples, 1.43%)</title><rect x="41.4315%" y="725" width="1.4315%" height="15" fill="rgb(240,10,37)"/><text x="41.6815%" y="735.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (41 samples, 0.84%)</title><rect x="42.0245%" y="709" width="0.8384%" height="15" fill="rgb(214,192,32)"/><text x="42.2745%" y="719.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (41 samples, 0.84%)</title><rect x="42.0245%" y="693" width="0.8384%" height="15" fill="rgb(209,36,54)"/><text x="42.2745%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (41 samples, 0.84%)</title><rect x="42.0245%" y="677" width="0.8384%" height="15" fill="rgb(220,10,11)"/><text x="42.2745%" y="687.50"></text></g><g><title>std::sys_common::net::TcpStream::write (41 samples, 0.84%)</title><rect x="42.0245%" y="661" width="0.8384%" height="15" fill="rgb(221,106,17)"/><text x="42.2745%" y="671.50"></text></g><g><title>__libc_send (41 samples, 0.84%)</title><rect x="42.0245%" y="645" width="0.8384%" height="15" fill="rgb(251,142,44)"/><text x="42.2745%" y="655.50"></text></g><g><title>sk_wait_data (7 samples, 0.14%)</title><rect x="43.1288%" y="469" width="0.1431%" height="15" fill="rgb(238,13,15)"/><text x="43.3788%" y="479.50"></text></g><g><title>wait_woken (7 samples, 0.14%)</title><rect x="43.1288%" y="453" width="0.1431%" height="15" fill="rgb(208,107,27)"/><text x="43.3788%" y="463.50"></text></g><g><title>schedule_timeout (7 samples, 0.14%)</title><rect x="43.1288%" y="437" width="0.1431%" height="15" fill="rgb(205,136,37)"/><text x="43.3788%" y="447.50"></text></g><g><title>schedule (7 samples, 0.14%)</title><rect x="43.1288%" y="421" width="0.1431%" height="15" fill="rgb(250,205,27)"/><text x="43.3788%" y="431.50"></text></g><g><title>__schedule (7 samples, 0.14%)</title><rect x="43.1288%" y="405" width="0.1431%" height="15" fill="rgb(210,80,43)"/><text x="43.3788%" y="415.50"></text></g><g><title>skb_copy_datagram_iter (5 samples, 0.10%)</title><rect x="43.2720%" y="469" width="0.1022%" height="15" fill="rgb(247,160,36)"/><text x="43.5220%" y="479.50"></text></g><g><title>__skb_datagram_iter (5 samples, 0.10%)</title><rect x="43.2720%" y="453" width="0.1022%" height="15" fill="rgb(234,13,49)"/><text x="43.5220%" y="463.50"></text></g><g><title>_copy_to_iter (5 samples, 0.10%)</title><rect x="43.2720%" y="437" width="0.1022%" height="15" fill="rgb(234,122,0)"/><text x="43.5220%" y="447.50"></text></g><g><title>copy_user_enhanced_fast_string (5 samples, 0.10%)</title><rect x="43.2720%" y="421" width="0.1022%" height="15" fill="rgb(207,146,38)"/><text x="43.5220%" y="431.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (20 samples, 0.41%)</title><rect x="42.9857%" y="661" width="0.4090%" height="15" fill="rgb(207,177,25)"/><text x="43.2357%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (20 samples, 0.41%)</title><rect x="42.9857%" y="645" width="0.4090%" height="15" fill="rgb(211,178,42)"/><text x="43.2357%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (20 samples, 0.41%)</title><rect x="42.9857%" y="629" width="0.4090%" height="15" fill="rgb(230,69,54)"/><text x="43.2357%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::read (20 samples, 0.41%)</title><rect x="42.9857%" y="613" width="0.4090%" height="15" fill="rgb(214,135,41)"/><text x="43.2357%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (20 samples, 0.41%)</title><rect x="42.9857%" y="597" width="0.4090%" height="15" fill="rgb(237,67,25)"/><text x="43.2357%" y="607.50"></text></g><g><title>__libc_recv (20 samples, 0.41%)</title><rect x="42.9857%" y="581" width="0.4090%" height="15" fill="rgb(222,189,50)"/><text x="43.2357%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (19 samples, 0.39%)</title><rect x="43.0061%" y="565" width="0.3885%" height="15" fill="rgb(245,148,34)"/><text x="43.2561%" y="575.50"></text></g><g><title>do_syscall_64 (19 samples, 0.39%)</title><rect x="43.0061%" y="549" width="0.3885%" height="15" fill="rgb(222,29,6)"/><text x="43.2561%" y="559.50"></text></g><g><title>__x64_sys_recvfrom (19 samples, 0.39%)</title><rect x="43.0061%" y="533" width="0.3885%" height="15" fill="rgb(221,189,43)"/><text x="43.2561%" y="543.50"></text></g><g><title>__sys_recvfrom (19 samples, 0.39%)</title><rect x="43.0061%" y="517" width="0.3885%" height="15" fill="rgb(207,36,27)"/><text x="43.2561%" y="527.50"></text></g><g><title>inet_recvmsg (18 samples, 0.37%)</title><rect x="43.0266%" y="501" width="0.3681%" height="15" fill="rgb(217,90,24)"/><text x="43.2766%" y="511.50"></text></g><g><title>tcp_recvmsg (16 samples, 0.33%)</title><rect x="43.0675%" y="485" width="0.3272%" height="15" fill="rgb(224,66,35)"/><text x="43.3175%" y="495.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.49%)</title><rect x="42.9448%" y="677" width="0.4908%" height="15" fill="rgb(221,13,50)"/><text x="43.1948%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (27 samples, 0.55%)</title><rect x="42.9039%" y="693" width="0.5521%" height="15" fill="rgb(236,68,49)"/><text x="43.1539%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (30 samples, 0.61%)</title><rect x="42.8630%" y="709" width="0.6135%" height="15" fill="rgb(229,146,28)"/><text x="43.1130%" y="719.50"></text></g><g><title>sock_def_readable (8 samples, 0.16%)</title><rect x="43.8241%" y="197" width="0.1636%" height="15" fill="rgb(225,31,38)"/><text x="44.0741%" y="207.50"></text></g><g><title>__wake_up_common_lock (8 samples, 0.16%)</title><rect x="43.8241%" y="181" width="0.1636%" height="15" fill="rgb(250,208,3)"/><text x="44.0741%" y="191.50"></text></g><g><title>__wake_up_common (8 samples, 0.16%)</title><rect x="43.8241%" y="165" width="0.1636%" height="15" fill="rgb(246,54,23)"/><text x="44.0741%" y="175.50"></text></g><g><title>try_to_wake_up (8 samples, 0.16%)</title><rect x="43.8241%" y="149" width="0.1636%" height="15" fill="rgb(243,76,11)"/><text x="44.0741%" y="159.50"></text></g><g><title>ip_local_deliver (16 samples, 0.33%)</title><rect x="43.7832%" y="293" width="0.3272%" height="15" fill="rgb(245,21,50)"/><text x="44.0332%" y="303.50"></text></g><g><title>ip_local_deliver_finish (15 samples, 0.31%)</title><rect x="43.8037%" y="277" width="0.3067%" height="15" fill="rgb(228,9,43)"/><text x="44.0537%" y="287.50"></text></g><g><title>ip_protocol_deliver_rcu (14 samples, 0.29%)</title><rect x="43.8241%" y="261" width="0.2863%" height="15" fill="rgb(208,100,47)"/><text x="44.0741%" y="271.50"></text></g><g><title>tcp_v4_rcv (14 samples, 0.29%)</title><rect x="43.8241%" y="245" width="0.2863%" height="15" fill="rgb(232,26,8)"/><text x="44.0741%" y="255.50"></text></g><g><title>tcp_v4_do_rcv (14 samples, 0.29%)</title><rect x="43.8241%" y="229" width="0.2863%" height="15" fill="rgb(216,166,38)"/><text x="44.0741%" y="239.50"></text></g><g><title>tcp_rcv_established (14 samples, 0.29%)</title><rect x="43.8241%" y="213" width="0.2863%" height="15" fill="rgb(251,202,51)"/><text x="44.0741%" y="223.50"></text></g><g><title>tcp_ack (6 samples, 0.12%)</title><rect x="43.9877%" y="197" width="0.1227%" height="15" fill="rgb(254,216,34)"/><text x="44.2377%" y="207.50"></text></g><g><title>__netif_receive_skb_one_core (19 samples, 0.39%)</title><rect x="43.7423%" y="325" width="0.3885%" height="15" fill="rgb(251,32,27)"/><text x="43.9923%" y="335.50"></text></g><g><title>ip_rcv (17 samples, 0.35%)</title><rect x="43.7832%" y="309" width="0.3476%" height="15" fill="rgb(208,127,28)"/><text x="44.0332%" y="319.50"></text></g><g><title>__ip_queue_xmit (27 samples, 0.55%)</title><rect x="43.5992%" y="469" width="0.5521%" height="15" fill="rgb(224,137,22)"/><text x="43.8492%" y="479.50"></text></g><g><title>ip_output (24 samples, 0.49%)</title><rect x="43.6605%" y="453" width="0.4908%" height="15" fill="rgb(254,70,32)"/><text x="43.9105%" y="463.50"></text></g><g><title>ip_finish_output2 (24 samples, 0.49%)</title><rect x="43.6605%" y="437" width="0.4908%" height="15" fill="rgb(229,75,37)"/><text x="43.9105%" y="447.50"></text></g><g><title>__local_bh_enable_ip (21 samples, 0.43%)</title><rect x="43.7219%" y="421" width="0.4294%" height="15" fill="rgb(252,64,23)"/><text x="43.9719%" y="431.50"></text></g><g><title>do_softirq (21 samples, 0.43%)</title><rect x="43.7219%" y="405" width="0.4294%" height="15" fill="rgb(232,162,48)"/><text x="43.9719%" y="415.50"></text></g><g><title>do_softirq_own_stack (20 samples, 0.41%)</title><rect x="43.7423%" y="389" width="0.4090%" height="15" fill="rgb(246,160,12)"/><text x="43.9923%" y="399.50"></text></g><g><title>__do_softirq (20 samples, 0.41%)</title><rect x="43.7423%" y="373" width="0.4090%" height="15" fill="rgb(247,166,0)"/><text x="43.9923%" y="383.50"></text></g><g><title>net_rx_action (20 samples, 0.41%)</title><rect x="43.7423%" y="357" width="0.4090%" height="15" fill="rgb(249,219,21)"/><text x="43.9923%" y="367.50"></text></g><g><title>process_backlog (20 samples, 0.41%)</title><rect x="43.7423%" y="341" width="0.4090%" height="15" fill="rgb(205,209,3)"/><text x="43.9923%" y="351.50"></text></g><g><title>__tcp_transmit_skb (28 samples, 0.57%)</title><rect x="43.5992%" y="485" width="0.5726%" height="15" fill="rgb(243,44,1)"/><text x="43.8492%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (31 samples, 0.63%)</title><rect x="43.5787%" y="517" width="0.6339%" height="15" fill="rgb(206,159,16)"/><text x="43.8287%" y="527.50"></text></g><g><title>tcp_write_xmit (31 samples, 0.63%)</title><rect x="43.5787%" y="501" width="0.6339%" height="15" fill="rgb(244,77,30)"/><text x="43.8287%" y="511.50"></text></g><g><title>__x64_sys_sendto (36 samples, 0.74%)</title><rect x="43.5583%" y="597" width="0.7362%" height="15" fill="rgb(218,69,12)"/><text x="43.8083%" y="607.50"></text></g><g><title>__sys_sendto (36 samples, 0.74%)</title><rect x="43.5583%" y="581" width="0.7362%" height="15" fill="rgb(212,87,7)"/><text x="43.8083%" y="591.50"></text></g><g><title>sock_sendmsg (36 samples, 0.74%)</title><rect x="43.5583%" y="565" width="0.7362%" height="15" fill="rgb(245,114,25)"/><text x="43.8083%" y="575.50"></text></g><g><title>tcp_sendmsg (36 samples, 0.74%)</title><rect x="43.5583%" y="549" width="0.7362%" height="15" fill="rgb(210,61,42)"/><text x="43.8083%" y="559.50"></text></g><g><title>tcp_sendmsg_locked (35 samples, 0.72%)</title><rect x="43.5787%" y="533" width="0.7157%" height="15" fill="rgb(211,52,33)"/><text x="43.8287%" y="543.50"></text></g><g><title>do_syscall_64 (37 samples, 0.76%)</title><rect x="43.5583%" y="613" width="0.7566%" height="15" fill="rgb(234,58,33)"/><text x="43.8083%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (39 samples, 0.80%)</title><rect x="43.5378%" y="629" width="0.7975%" height="15" fill="rgb(220,115,36)"/><text x="43.7878%" y="639.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (73 samples, 1.49%)</title><rect x="42.8630%" y="741" width="1.4928%" height="15" fill="rgb(243,153,54)"/><text x="43.1130%" y="751.50"></text></g><g><title>mysql::conn::Conn::_query (73 samples, 1.49%)</title><rect x="42.8630%" y="725" width="1.4928%" height="15" fill="rgb(251,47,18)"/><text x="43.1130%" y="735.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (43 samples, 0.88%)</title><rect x="43.4765%" y="709" width="0.8793%" height="15" fill="rgb(242,102,42)"/><text x="43.7265%" y="719.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (42 samples, 0.86%)</title><rect x="43.4969%" y="693" width="0.8589%" height="15" fill="rgb(234,31,38)"/><text x="43.7469%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (41 samples, 0.84%)</title><rect x="43.5174%" y="677" width="0.8384%" height="15" fill="rgb(221,117,51)"/><text x="43.7674%" y="687.50"></text></g><g><title>std::sys_common::net::TcpStream::write (41 samples, 0.84%)</title><rect x="43.5174%" y="661" width="0.8384%" height="15" fill="rgb(212,20,18)"/><text x="43.7674%" y="671.50"></text></g><g><title>__libc_send (41 samples, 0.84%)</title><rect x="43.5174%" y="645" width="0.8384%" height="15" fill="rgb(245,133,36)"/><text x="43.7674%" y="655.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.12%)</title><rect x="44.4581%" y="693" width="0.1227%" height="15" fill="rgb(212,6,19)"/><text x="44.7081%" y="703.50"></text></g><g><title>lobsters_microbenchmarks::main (160 samples, 3.27%)</title><rect x="41.3906%" y="773" width="3.2720%" height="15" fill="rgb(218,1,36)"/><text x="41.6406%" y="783.50">lob..</text></g><g><title>lobsters_microbenchmarks::queriers::user::unsubscribe_user (88 samples, 1.80%)</title><rect x="42.8630%" y="757" width="1.7996%" height="15" fill="rgb(246,84,54)"/><text x="43.1130%" y="767.50">l..</text></g><g><title>serde_json::de::from_str (10 samples, 0.20%)</title><rect x="44.4581%" y="741" width="0.2045%" height="15" fill="rgb(242,110,6)"/><text x="44.7081%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (10 samples, 0.20%)</title><rect x="44.4581%" y="725" width="0.2045%" height="15" fill="rgb(214,47,5)"/><text x="44.7081%" y="735.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (10 samples, 0.20%)</title><rect x="44.4581%" y="709" width="0.2045%" height="15" fill="rgb(218,159,25)"/><text x="44.7081%" y="719.50"></text></g><g><title>__tcp_transmit_skb (19 samples, 0.39%)</title><rect x="44.9693%" y="453" width="0.3885%" height="15" fill="rgb(215,211,28)"/><text x="45.2193%" y="463.50"></text></g><g><title>__ip_queue_xmit (18 samples, 0.37%)</title><rect x="44.9898%" y="437" width="0.3681%" height="15" fill="rgb(238,59,32)"/><text x="45.2398%" y="447.50"></text></g><g><title>ip_output (18 samples, 0.37%)</title><rect x="44.9898%" y="421" width="0.3681%" height="15" fill="rgb(226,82,3)"/><text x="45.2398%" y="431.50"></text></g><g><title>ip_finish_output2 (18 samples, 0.37%)</title><rect x="44.9898%" y="405" width="0.3681%" height="15" fill="rgb(240,164,32)"/><text x="45.2398%" y="415.50"></text></g><g><title>__local_bh_enable_ip (15 samples, 0.31%)</title><rect x="45.0511%" y="389" width="0.3067%" height="15" fill="rgb(232,46,7)"/><text x="45.3011%" y="399.50"></text></g><g><title>do_softirq (15 samples, 0.31%)</title><rect x="45.0511%" y="373" width="0.3067%" height="15" fill="rgb(229,129,53)"/><text x="45.3011%" y="383.50"></text></g><g><title>do_softirq_own_stack (15 samples, 0.31%)</title><rect x="45.0511%" y="357" width="0.3067%" height="15" fill="rgb(234,188,29)"/><text x="45.3011%" y="367.50"></text></g><g><title>__do_softirq (15 samples, 0.31%)</title><rect x="45.0511%" y="341" width="0.3067%" height="15" fill="rgb(246,141,4)"/><text x="45.3011%" y="351.50"></text></g><g><title>net_rx_action (13 samples, 0.27%)</title><rect x="45.0920%" y="325" width="0.2658%" height="15" fill="rgb(229,23,39)"/><text x="45.3420%" y="335.50"></text></g><g><title>process_backlog (12 samples, 0.25%)</title><rect x="45.1125%" y="309" width="0.2454%" height="15" fill="rgb(206,12,3)"/><text x="45.3625%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (12 samples, 0.25%)</title><rect x="45.1125%" y="293" width="0.2454%" height="15" fill="rgb(252,226,20)"/><text x="45.3625%" y="303.50"></text></g><g><title>ip_rcv (12 samples, 0.25%)</title><rect x="45.1125%" y="277" width="0.2454%" height="15" fill="rgb(216,123,35)"/><text x="45.3625%" y="287.50"></text></g><g><title>ip_local_deliver (12 samples, 0.25%)</title><rect x="45.1125%" y="261" width="0.2454%" height="15" fill="rgb(212,68,40)"/><text x="45.3625%" y="271.50"></text></g><g><title>ip_local_deliver_finish (12 samples, 0.25%)</title><rect x="45.1125%" y="245" width="0.2454%" height="15" fill="rgb(254,125,32)"/><text x="45.3625%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (11 samples, 0.22%)</title><rect x="45.1329%" y="229" width="0.2249%" height="15" fill="rgb(253,97,22)"/><text x="45.3829%" y="239.50"></text></g><g><title>tcp_v4_rcv (11 samples, 0.22%)</title><rect x="45.1329%" y="213" width="0.2249%" height="15" fill="rgb(241,101,14)"/><text x="45.3829%" y="223.50"></text></g><g><title>tcp_v4_do_rcv (10 samples, 0.20%)</title><rect x="45.1534%" y="197" width="0.2045%" height="15" fill="rgb(238,103,29)"/><text x="45.4034%" y="207.50"></text></g><g><title>tcp_rcv_established (10 samples, 0.20%)</title><rect x="45.1534%" y="181" width="0.2045%" height="15" fill="rgb(233,195,47)"/><text x="45.4034%" y="191.50"></text></g><g><title>__tcp_push_pending_frames (22 samples, 0.45%)</title><rect x="44.9284%" y="485" width="0.4499%" height="15" fill="rgb(246,218,30)"/><text x="45.1784%" y="495.50"></text></g><g><title>tcp_write_xmit (22 samples, 0.45%)</title><rect x="44.9284%" y="469" width="0.4499%" height="15" fill="rgb(219,145,47)"/><text x="45.1784%" y="479.50"></text></g><g><title>do_syscall_64 (26 samples, 0.53%)</title><rect x="44.9080%" y="581" width="0.5317%" height="15" fill="rgb(243,12,26)"/><text x="45.1580%" y="591.50"></text></g><g><title>__x64_sys_sendto (26 samples, 0.53%)</title><rect x="44.9080%" y="565" width="0.5317%" height="15" fill="rgb(214,87,16)"/><text x="45.1580%" y="575.50"></text></g><g><title>__sys_sendto (26 samples, 0.53%)</title><rect x="44.9080%" y="549" width="0.5317%" height="15" fill="rgb(208,99,42)"/><text x="45.1580%" y="559.50"></text></g><g><title>sock_sendmsg (26 samples, 0.53%)</title><rect x="44.9080%" y="533" width="0.5317%" height="15" fill="rgb(253,99,2)"/><text x="45.1580%" y="543.50"></text></g><g><title>tcp_sendmsg (26 samples, 0.53%)</title><rect x="44.9080%" y="517" width="0.5317%" height="15" fill="rgb(220,168,23)"/><text x="45.1580%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (26 samples, 0.53%)</title><rect x="44.9080%" y="501" width="0.5317%" height="15" fill="rgb(242,38,24)"/><text x="45.1580%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (29 samples, 0.59%)</title><rect x="44.8875%" y="597" width="0.5930%" height="15" fill="rgb(225,182,9)"/><text x="45.1375%" y="607.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (32 samples, 0.65%)</title><rect x="44.8466%" y="709" width="0.6544%" height="15" fill="rgb(243,178,37)"/><text x="45.0966%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (31 samples, 0.63%)</title><rect x="44.8671%" y="693" width="0.6339%" height="15" fill="rgb(232,139,19)"/><text x="45.1171%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (30 samples, 0.61%)</title><rect x="44.8875%" y="677" width="0.6135%" height="15" fill="rgb(225,201,24)"/><text x="45.1375%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (30 samples, 0.61%)</title><rect x="44.8875%" y="661" width="0.6135%" height="15" fill="rgb(221,47,46)"/><text x="45.1375%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (30 samples, 0.61%)</title><rect x="44.8875%" y="645" width="0.6135%" height="15" fill="rgb(249,23,13)"/><text x="45.1375%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (30 samples, 0.61%)</title><rect x="44.8875%" y="629" width="0.6135%" height="15" fill="rgb(219,9,5)"/><text x="45.1375%" y="639.50"></text></g><g><title>__libc_send (30 samples, 0.61%)</title><rect x="44.8875%" y="613" width="0.6135%" height="15" fill="rgb(254,171,16)"/><text x="45.1375%" y="623.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (10 samples, 0.20%)</title><rect x="45.5010%" y="709" width="0.2045%" height="15" fill="rgb(230,171,20)"/><text x="45.7510%" y="719.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (7 samples, 0.14%)</title><rect x="45.5624%" y="693" width="0.1431%" height="15" fill="rgb(210,71,41)"/><text x="45.8124%" y="703.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="45.7055%" y="677" width="0.1022%" height="15" fill="rgb(206,173,20)"/><text x="45.9555%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="45.7055%" y="661" width="0.1022%" height="15" fill="rgb(233,88,34)"/><text x="45.9555%" y="671.50"></text></g><g><title>page_fault (5 samples, 0.10%)</title><rect x="45.8282%" y="645" width="0.1022%" height="15" fill="rgb(223,209,46)"/><text x="46.0782%" y="655.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.10%)</title><rect x="45.8282%" y="629" width="0.1022%" height="15" fill="rgb(250,43,18)"/><text x="46.0782%" y="639.50"></text></g><g><title>handle_mm_fault (5 samples, 0.10%)</title><rect x="45.8282%" y="613" width="0.1022%" height="15" fill="rgb(208,13,10)"/><text x="46.0782%" y="623.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.10%)</title><rect x="45.8282%" y="597" width="0.1022%" height="15" fill="rgb(212,200,36)"/><text x="46.0782%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.18%)</title><rect x="45.8078%" y="677" width="0.1840%" height="15" fill="rgb(225,90,30)"/><text x="46.0578%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (8 samples, 0.16%)</title><rect x="45.8282%" y="661" width="0.1636%" height="15" fill="rgb(236,182,39)"/><text x="46.0782%" y="671.50"></text></g><g><title>__x64_sys_mprotect (5 samples, 0.10%)</title><rect x="46.0327%" y="565" width="0.1022%" height="15" fill="rgb(212,144,35)"/><text x="46.2827%" y="575.50"></text></g><g><title>do_mprotect_pkey (5 samples, 0.10%)</title><rect x="46.0327%" y="549" width="0.1022%" height="15" fill="rgb(228,63,44)"/><text x="46.2827%" y="559.50"></text></g><g><title>mprotect_fixup (5 samples, 0.10%)</title><rect x="46.0327%" y="533" width="0.1022%" height="15" fill="rgb(228,109,6)"/><text x="46.2827%" y="543.50"></text></g><g><title>__GI___mprotect (8 samples, 0.16%)</title><rect x="46.0123%" y="613" width="0.1636%" height="15" fill="rgb(238,117,24)"/><text x="46.2623%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (7 samples, 0.14%)</title><rect x="46.0327%" y="597" width="0.1431%" height="15" fill="rgb(242,26,26)"/><text x="46.2827%" y="607.50"></text></g><g><title>do_syscall_64 (7 samples, 0.14%)</title><rect x="46.0327%" y="581" width="0.1431%" height="15" fill="rgb(221,92,48)"/><text x="46.2827%" y="591.50"></text></g><g><title>page_fault (7 samples, 0.14%)</title><rect x="46.1759%" y="613" width="0.1431%" height="15" fill="rgb(209,209,32)"/><text x="46.4259%" y="623.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.14%)</title><rect x="46.1759%" y="597" width="0.1431%" height="15" fill="rgb(221,70,22)"/><text x="46.4259%" y="607.50"></text></g><g><title>handle_mm_fault (7 samples, 0.14%)</title><rect x="46.1759%" y="581" width="0.1431%" height="15" fill="rgb(248,145,5)"/><text x="46.4259%" y="591.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.12%)</title><rect x="46.1963%" y="565" width="0.1227%" height="15" fill="rgb(226,116,26)"/><text x="46.4463%" y="575.50"></text></g><g><title>alloc_pages_vma (5 samples, 0.10%)</title><rect x="46.2168%" y="549" width="0.1022%" height="15" fill="rgb(244,5,17)"/><text x="46.4668%" y="559.50"></text></g><g><title>__alloc_pages_nodemask (5 samples, 0.10%)</title><rect x="46.2168%" y="533" width="0.1022%" height="15" fill="rgb(252,159,33)"/><text x="46.4668%" y="543.50"></text></g><g><title>get_page_from_freelist (5 samples, 0.10%)</title><rect x="46.2168%" y="517" width="0.1022%" height="15" fill="rgb(206,71,0)"/><text x="46.4668%" y="527.50"></text></g><g><title>prep_new_page (5 samples, 0.10%)</title><rect x="46.2168%" y="501" width="0.1022%" height="15" fill="rgb(233,118,54)"/><text x="46.4668%" y="511.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (77 samples, 1.57%)</title><rect x="44.7648%" y="773" width="1.5746%" height="15" fill="rgb(234,83,48)"/><text x="45.0148%" y="783.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (74 samples, 1.51%)</title><rect x="44.8262%" y="757" width="1.5133%" height="15" fill="rgb(228,3,54)"/><text x="45.0762%" y="767.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (74 samples, 1.51%)</title><rect x="44.8262%" y="741" width="1.5133%" height="15" fill="rgb(226,155,13)"/><text x="45.0762%" y="751.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (74 samples, 1.51%)</title><rect x="44.8262%" y="725" width="1.5133%" height="15" fill="rgb(241,28,37)"/><text x="45.0762%" y="735.50"></text></g><g><title>decor_mem::views::Views::insert (31 samples, 0.63%)</title><rect x="45.7055%" y="709" width="0.6339%" height="15" fill="rgb(233,93,10)"/><text x="45.9555%" y="719.50"></text></g><g><title>decor_mem::views::View::insert_into_index (31 samples, 0.63%)</title><rect x="45.7055%" y="693" width="0.6339%" height="15" fill="rgb(225,113,19)"/><text x="45.9555%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (17 samples, 0.35%)</title><rect x="45.9918%" y="677" width="0.3476%" height="15" fill="rgb(241,2,18)"/><text x="46.2418%" y="687.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.35%)</title><rect x="45.9918%" y="661" width="0.3476%" height="15" fill="rgb(228,207,21)"/><text x="46.2418%" y="671.50"></text></g><g><title>_int_malloc (17 samples, 0.35%)</title><rect x="45.9918%" y="645" width="0.3476%" height="15" fill="rgb(213,211,35)"/><text x="46.2418%" y="655.50"></text></g><g><title>sysmalloc (17 samples, 0.35%)</title><rect x="45.9918%" y="629" width="0.3476%" height="15" fill="rgb(209,83,10)"/><text x="46.2418%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="46.3804%" y="693" width="0.1227%" height="15" fill="rgb(209,164,1)"/><text x="46.6304%" y="703.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="46.3804%" y="677" width="0.1227%" height="15" fill="rgb(213,184,43)"/><text x="46.6304%" y="687.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="46.3804%" y="661" width="0.1227%" height="15" fill="rgb(231,61,34)"/><text x="46.6304%" y="671.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="46.4008%" y="645" width="0.1022%" height="15" fill="rgb(235,75,3)"/><text x="46.6508%" y="655.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="46.5031%" y="693" width="0.1227%" height="15" fill="rgb(220,106,47)"/><text x="46.7531%" y="703.50"></text></g><g><title>decor_mem::views::Views::insert (8 samples, 0.16%)</title><rect x="46.7076%" y="693" width="0.1636%" height="15" fill="rgb(210,196,33)"/><text x="46.9576%" y="703.50"></text></g><g><title>decor_mem::views::View::insert_into_index (6 samples, 0.12%)</title><rect x="46.7485%" y="677" width="0.1227%" height="15" fill="rgb(229,154,42)"/><text x="46.9985%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (26 samples, 0.53%)</title><rect x="46.3599%" y="725" width="0.5317%" height="15" fill="rgb(228,114,26)"/><text x="46.6099%" y="735.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (26 samples, 0.53%)</title><rect x="46.3599%" y="709" width="0.5317%" height="15" fill="rgb(208,144,1)"/><text x="46.6099%" y="719.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (5 samples, 0.10%)</title><rect x="46.8916%" y="725" width="0.1022%" height="15" fill="rgb(239,112,37)"/><text x="47.1416%" y="735.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (34 samples, 0.70%)</title><rect x="46.3599%" y="741" width="0.6953%" height="15" fill="rgb(210,96,50)"/><text x="46.6099%" y="751.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.14%)</title><rect x="47.3006%" y="341" width="0.1431%" height="15" fill="rgb(222,178,2)"/><text x="47.5506%" y="351.50"></text></g><g><title>dequeue_entity (6 samples, 0.12%)</title><rect x="47.3211%" y="325" width="0.1227%" height="15" fill="rgb(226,74,18)"/><text x="47.5711%" y="335.50"></text></g><g><title>__schedule (18 samples, 0.37%)</title><rect x="47.1779%" y="357" width="0.3681%" height="15" fill="rgb(225,67,54)"/><text x="47.4279%" y="367.50"></text></g><g><title>sk_wait_data (22 samples, 0.45%)</title><rect x="47.1166%" y="421" width="0.4499%" height="15" fill="rgb(251,92,32)"/><text x="47.3666%" y="431.50"></text></g><g><title>wait_woken (20 samples, 0.41%)</title><rect x="47.1575%" y="405" width="0.4090%" height="15" fill="rgb(228,149,22)"/><text x="47.4075%" y="415.50"></text></g><g><title>schedule_timeout (19 samples, 0.39%)</title><rect x="47.1779%" y="389" width="0.3885%" height="15" fill="rgb(243,54,13)"/><text x="47.4279%" y="399.50"></text></g><g><title>schedule (19 samples, 0.39%)</title><rect x="47.1779%" y="373" width="0.3885%" height="15" fill="rgb(243,180,28)"/><text x="47.4279%" y="383.50"></text></g><g><title>do_syscall_64 (28 samples, 0.57%)</title><rect x="47.0757%" y="501" width="0.5726%" height="15" fill="rgb(208,167,24)"/><text x="47.3257%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (28 samples, 0.57%)</title><rect x="47.0757%" y="485" width="0.5726%" height="15" fill="rgb(245,73,45)"/><text x="47.3257%" y="495.50"></text></g><g><title>__sys_recvfrom (27 samples, 0.55%)</title><rect x="47.0961%" y="469" width="0.5521%" height="15" fill="rgb(237,203,48)"/><text x="47.3461%" y="479.50"></text></g><g><title>inet_recvmsg (27 samples, 0.55%)</title><rect x="47.0961%" y="453" width="0.5521%" height="15" fill="rgb(211,197,16)"/><text x="47.3461%" y="463.50"></text></g><g><title>tcp_recvmsg (27 samples, 0.55%)</title><rect x="47.0961%" y="437" width="0.5521%" height="15" fill="rgb(243,99,51)"/><text x="47.3461%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (30 samples, 0.61%)</title><rect x="47.0757%" y="517" width="0.6135%" height="15" fill="rgb(215,123,29)"/><text x="47.3257%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (32 samples, 0.65%)</title><rect x="47.0552%" y="613" width="0.6544%" height="15" fill="rgb(239,186,37)"/><text x="47.3052%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (32 samples, 0.65%)</title><rect x="47.0552%" y="597" width="0.6544%" height="15" fill="rgb(252,136,39)"/><text x="47.3052%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (32 samples, 0.65%)</title><rect x="47.0552%" y="581" width="0.6544%" height="15" fill="rgb(223,213,32)"/><text x="47.3052%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (32 samples, 0.65%)</title><rect x="47.0552%" y="565" width="0.6544%" height="15" fill="rgb(233,115,5)"/><text x="47.3052%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (32 samples, 0.65%)</title><rect x="47.0552%" y="549" width="0.6544%" height="15" fill="rgb(207,226,44)"/><text x="47.3052%" y="559.50"></text></g><g><title>__libc_recv (32 samples, 0.65%)</title><rect x="47.0552%" y="533" width="0.6544%" height="15" fill="rgb(208,126,0)"/><text x="47.3052%" y="543.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (36 samples, 0.74%)</title><rect x="47.0552%" y="709" width="0.7362%" height="15" fill="rgb(244,66,21)"/><text x="47.3052%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (36 samples, 0.74%)</title><rect x="47.0552%" y="693" width="0.7362%" height="15" fill="rgb(222,97,12)"/><text x="47.3052%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (36 samples, 0.74%)</title><rect x="47.0552%" y="677" width="0.7362%" height="15" fill="rgb(219,213,19)"/><text x="47.3052%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (36 samples, 0.74%)</title><rect x="47.0552%" y="661" width="0.7362%" height="15" fill="rgb(252,169,30)"/><text x="47.3052%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (36 samples, 0.74%)</title><rect x="47.0552%" y="645" width="0.7362%" height="15" fill="rgb(206,32,51)"/><text x="47.3052%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.74%)</title><rect x="47.0552%" y="629" width="0.7362%" height="15" fill="rgb(250,172,42)"/><text x="47.3052%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.10%)</title><rect x="47.8323%" y="629" width="0.1022%" height="15" fill="rgb(209,34,43)"/><text x="48.0823%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.10%)</title><rect x="47.8323%" y="613" width="0.1022%" height="15" fill="rgb(223,11,35)"/><text x="48.0823%" y="623.50"></text></g><g><title>alloc::string::String::push_str (5 samples, 0.10%)</title><rect x="47.8323%" y="597" width="0.1022%" height="15" fill="rgb(251,219,26)"/><text x="48.0823%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="47.8323%" y="581" width="0.1022%" height="15" fill="rgb(231,119,3)"/><text x="48.0823%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.10%)</title><rect x="47.8323%" y="565" width="0.1022%" height="15" fill="rgb(216,97,11)"/><text x="48.0823%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.10%)</title><rect x="47.8323%" y="549" width="0.1022%" height="15" fill="rgb(223,59,9)"/><text x="48.0823%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.10%)</title><rect x="47.8323%" y="533" width="0.1022%" height="15" fill="rgb(233,93,31)"/><text x="48.0823%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="47.8323%" y="517" width="0.1022%" height="15" fill="rgb(239,81,33)"/><text x="48.0823%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.10%)</title><rect x="47.8323%" y="501" width="0.1022%" height="15" fill="rgb(213,120,34)"/><text x="48.0823%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.10%)</title><rect x="47.8323%" y="485" width="0.1022%" height="15" fill="rgb(243,49,53)"/><text x="48.0823%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.10%)</title><rect x="47.8323%" y="469" width="0.1022%" height="15" fill="rgb(247,216,33)"/><text x="48.0823%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (5 samples, 0.10%)</title><rect x="47.8323%" y="453" width="0.1022%" height="15" fill="rgb(226,26,14)"/><text x="48.0823%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.10%)</title><rect x="47.8323%" y="437" width="0.1022%" height="15" fill="rgb(215,49,53)"/><text x="48.0823%" y="447.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.10%)</title><rect x="47.8323%" y="421" width="0.1022%" height="15" fill="rgb(245,162,40)"/><text x="48.0823%" y="431.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="47.8323%" y="405" width="0.1022%" height="15" fill="rgb(229,68,17)"/><text x="48.0823%" y="415.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="47.8323%" y="389" width="0.1022%" height="15" fill="rgb(213,182,10)"/><text x="48.0823%" y="399.50"></text></g><g><title>alloc::fmt::format (7 samples, 0.14%)</title><rect x="47.8323%" y="677" width="0.1431%" height="15" fill="rgb(245,125,30)"/><text x="48.0823%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.14%)</title><rect x="47.8323%" y="661" width="0.1431%" height="15" fill="rgb(232,202,2)"/><text x="48.0823%" y="671.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="47.8323%" y="645" width="0.1431%" height="15" fill="rgb(237,140,51)"/><text x="48.0823%" y="655.50"></text></g><g><title>sk_wait_data (13 samples, 0.27%)</title><rect x="48.1800%" y="421" width="0.2658%" height="15" fill="rgb(236,157,25)"/><text x="48.4300%" y="431.50"></text></g><g><title>wait_woken (11 samples, 0.22%)</title><rect x="48.2209%" y="405" width="0.2249%" height="15" fill="rgb(219,209,0)"/><text x="48.4709%" y="415.50"></text></g><g><title>schedule_timeout (9 samples, 0.18%)</title><rect x="48.2618%" y="389" width="0.1840%" height="15" fill="rgb(240,116,54)"/><text x="48.5118%" y="399.50"></text></g><g><title>schedule (9 samples, 0.18%)</title><rect x="48.2618%" y="373" width="0.1840%" height="15" fill="rgb(216,10,36)"/><text x="48.5118%" y="383.50"></text></g><g><title>__schedule (8 samples, 0.16%)</title><rect x="48.2822%" y="357" width="0.1636%" height="15" fill="rgb(222,72,44)"/><text x="48.5322%" y="367.50"></text></g><g><title>do_syscall_64 (18 samples, 0.37%)</title><rect x="48.0982%" y="501" width="0.3681%" height="15" fill="rgb(232,159,9)"/><text x="48.3482%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (17 samples, 0.35%)</title><rect x="48.1186%" y="485" width="0.3476%" height="15" fill="rgb(210,39,32)"/><text x="48.3686%" y="495.50"></text></g><g><title>__sys_recvfrom (17 samples, 0.35%)</title><rect x="48.1186%" y="469" width="0.3476%" height="15" fill="rgb(216,194,45)"/><text x="48.3686%" y="479.50"></text></g><g><title>inet_recvmsg (17 samples, 0.35%)</title><rect x="48.1186%" y="453" width="0.3476%" height="15" fill="rgb(218,18,35)"/><text x="48.3686%" y="463.50"></text></g><g><title>tcp_recvmsg (17 samples, 0.35%)</title><rect x="48.1186%" y="437" width="0.3476%" height="15" fill="rgb(207,83,51)"/><text x="48.3686%" y="447.50"></text></g><g><title>__libc_recv (19 samples, 0.39%)</title><rect x="48.0982%" y="533" width="0.3885%" height="15" fill="rgb(225,63,43)"/><text x="48.3482%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (19 samples, 0.39%)</title><rect x="48.0982%" y="517" width="0.3885%" height="15" fill="rgb(207,57,36)"/><text x="48.3482%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (20 samples, 0.41%)</title><rect x="48.0982%" y="613" width="0.4090%" height="15" fill="rgb(216,99,33)"/><text x="48.3482%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (20 samples, 0.41%)</title><rect x="48.0982%" y="597" width="0.4090%" height="15" fill="rgb(225,42,16)"/><text x="48.3482%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (20 samples, 0.41%)</title><rect x="48.0982%" y="581" width="0.4090%" height="15" fill="rgb(220,201,45)"/><text x="48.3482%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (20 samples, 0.41%)</title><rect x="48.0982%" y="565" width="0.4090%" height="15" fill="rgb(225,33,4)"/><text x="48.3482%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (20 samples, 0.41%)</title><rect x="48.0982%" y="549" width="0.4090%" height="15" fill="rgb(224,33,50)"/><text x="48.3482%" y="559.50"></text></g><g><title>mysql::conn::Conn::read_packet (23 samples, 0.47%)</title><rect x="48.0777%" y="645" width="0.4703%" height="15" fill="rgb(246,198,51)"/><text x="48.3277%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.45%)</title><rect x="48.0982%" y="629" width="0.4499%" height="15" fill="rgb(205,22,4)"/><text x="48.3482%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (28 samples, 0.57%)</title><rect x="48.0164%" y="661" width="0.5726%" height="15" fill="rgb(206,3,8)"/><text x="48.2664%" y="671.50"></text></g><g><title>enqueue_task (6 samples, 0.12%)</title><rect x="49.2229%" y="69" width="0.1227%" height="15" fill="rgb(251,23,15)"/><text x="49.4729%" y="79.50"></text></g><g><title>sock_def_readable (15 samples, 0.31%)</title><rect x="49.2025%" y="149" width="0.3067%" height="15" fill="rgb(252,88,28)"/><text x="49.4525%" y="159.50"></text></g><g><title>__wake_up_common_lock (14 samples, 0.29%)</title><rect x="49.2229%" y="133" width="0.2863%" height="15" fill="rgb(212,127,14)"/><text x="49.4729%" y="143.50"></text></g><g><title>__wake_up_common (14 samples, 0.29%)</title><rect x="49.2229%" y="117" width="0.2863%" height="15" fill="rgb(247,145,37)"/><text x="49.4729%" y="127.50"></text></g><g><title>pollwake (14 samples, 0.29%)</title><rect x="49.2229%" y="101" width="0.2863%" height="15" fill="rgb(209,117,53)"/><text x="49.4729%" y="111.50"></text></g><g><title>try_to_wake_up (14 samples, 0.29%)</title><rect x="49.2229%" y="85" width="0.2863%" height="15" fill="rgb(212,90,42)"/><text x="49.4729%" y="95.50"></text></g><g><title>tcp_ack (8 samples, 0.16%)</title><rect x="49.5092%" y="149" width="0.1636%" height="15" fill="rgb(218,164,37)"/><text x="49.7592%" y="159.50"></text></g><g><title>__ip_queue_xmit (50 samples, 1.02%)</title><rect x="48.7117%" y="421" width="1.0225%" height="15" fill="rgb(246,65,34)"/><text x="48.9617%" y="431.50"></text></g><g><title>ip_output (48 samples, 0.98%)</title><rect x="48.7526%" y="405" width="0.9816%" height="15" fill="rgb(231,100,33)"/><text x="49.0026%" y="415.50"></text></g><g><title>ip_finish_output2 (46 samples, 0.94%)</title><rect x="48.7935%" y="389" width="0.9407%" height="15" fill="rgb(228,126,14)"/><text x="49.0435%" y="399.50"></text></g><g><title>__local_bh_enable_ip (42 samples, 0.86%)</title><rect x="48.8753%" y="373" width="0.8589%" height="15" fill="rgb(215,173,21)"/><text x="49.1253%" y="383.50"></text></g><g><title>do_softirq (42 samples, 0.86%)</title><rect x="48.8753%" y="357" width="0.8589%" height="15" fill="rgb(210,6,40)"/><text x="49.1253%" y="367.50"></text></g><g><title>do_softirq_own_stack (42 samples, 0.86%)</title><rect x="48.8753%" y="341" width="0.8589%" height="15" fill="rgb(212,48,18)"/><text x="49.1253%" y="351.50"></text></g><g><title>__do_softirq (42 samples, 0.86%)</title><rect x="48.8753%" y="325" width="0.8589%" height="15" fill="rgb(230,214,11)"/><text x="49.1253%" y="335.50"></text></g><g><title>net_rx_action (41 samples, 0.84%)</title><rect x="48.8957%" y="309" width="0.8384%" height="15" fill="rgb(254,105,39)"/><text x="49.1457%" y="319.50"></text></g><g><title>process_backlog (39 samples, 0.80%)</title><rect x="48.9366%" y="293" width="0.7975%" height="15" fill="rgb(245,158,5)"/><text x="49.1866%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (39 samples, 0.80%)</title><rect x="48.9366%" y="277" width="0.7975%" height="15" fill="rgb(249,208,11)"/><text x="49.1866%" y="287.50"></text></g><g><title>ip_rcv (38 samples, 0.78%)</title><rect x="48.9571%" y="261" width="0.7771%" height="15" fill="rgb(210,39,28)"/><text x="49.2071%" y="271.50"></text></g><g><title>ip_local_deliver (37 samples, 0.76%)</title><rect x="48.9775%" y="245" width="0.7566%" height="15" fill="rgb(211,56,53)"/><text x="49.2275%" y="255.50"></text></g><g><title>ip_local_deliver_finish (37 samples, 0.76%)</title><rect x="48.9775%" y="229" width="0.7566%" height="15" fill="rgb(226,201,30)"/><text x="49.2275%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (37 samples, 0.76%)</title><rect x="48.9775%" y="213" width="0.7566%" height="15" fill="rgb(239,101,34)"/><text x="49.2275%" y="223.50"></text></g><g><title>tcp_v4_rcv (37 samples, 0.76%)</title><rect x="48.9775%" y="197" width="0.7566%" height="15" fill="rgb(226,209,5)"/><text x="49.2275%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (30 samples, 0.61%)</title><rect x="49.1207%" y="181" width="0.6135%" height="15" fill="rgb(250,105,47)"/><text x="49.3707%" y="191.50"></text></g><g><title>tcp_rcv_established (30 samples, 0.61%)</title><rect x="49.1207%" y="165" width="0.6135%" height="15" fill="rgb(230,72,3)"/><text x="49.3707%" y="175.50"></text></g><g><title>__tcp_transmit_skb (55 samples, 1.12%)</title><rect x="48.6708%" y="437" width="1.1247%" height="15" fill="rgb(232,218,39)"/><text x="48.9208%" y="447.50"></text></g><g><title>__tcp_push_pending_frames (57 samples, 1.17%)</title><rect x="48.6708%" y="469" width="1.1656%" height="15" fill="rgb(248,166,6)"/><text x="48.9208%" y="479.50"></text></g><g><title>tcp_write_xmit (57 samples, 1.17%)</title><rect x="48.6708%" y="453" width="1.1656%" height="15" fill="rgb(247,89,20)"/><text x="48.9208%" y="463.50"></text></g><g><title>sock_sendmsg (62 samples, 1.27%)</title><rect x="48.6708%" y="517" width="1.2679%" height="15" fill="rgb(248,130,54)"/><text x="48.9208%" y="527.50"></text></g><g><title>tcp_sendmsg (62 samples, 1.27%)</title><rect x="48.6708%" y="501" width="1.2679%" height="15" fill="rgb(234,196,4)"/><text x="48.9208%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (62 samples, 1.27%)</title><rect x="48.6708%" y="485" width="1.2679%" height="15" fill="rgb(250,143,31)"/><text x="48.9208%" y="495.50"></text></g><g><title>__x64_sys_sendto (64 samples, 1.31%)</title><rect x="48.6503%" y="549" width="1.3088%" height="15" fill="rgb(211,110,34)"/><text x="48.9003%" y="559.50"></text></g><g><title>__sys_sendto (64 samples, 1.31%)</title><rect x="48.6503%" y="533" width="1.3088%" height="15" fill="rgb(215,124,48)"/><text x="48.9003%" y="543.50"></text></g><g><title>do_syscall_64 (66 samples, 1.35%)</title><rect x="48.6503%" y="565" width="1.3497%" height="15" fill="rgb(216,46,13)"/><text x="48.9003%" y="575.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (109 samples, 2.23%)</title><rect x="47.7914%" y="693" width="2.2290%" height="15" fill="rgb(205,184,25)"/><text x="48.0414%" y="703.50">d..</text></g><g><title>mysql::conn::Conn::_query (98 samples, 2.00%)</title><rect x="48.0164%" y="677" width="2.0041%" height="15" fill="rgb(228,1,10)"/><text x="48.2664%" y="687.50">m..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (70 samples, 1.43%)</title><rect x="48.5890%" y="661" width="1.4315%" height="15" fill="rgb(213,116,27)"/><text x="48.8390%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (69 samples, 1.41%)</title><rect x="48.6094%" y="645" width="1.4110%" height="15" fill="rgb(241,95,50)"/><text x="48.8594%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (69 samples, 1.41%)</title><rect x="48.6094%" y="629" width="1.4110%" height="15" fill="rgb(238,48,32)"/><text x="48.8594%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (69 samples, 1.41%)</title><rect x="48.6094%" y="613" width="1.4110%" height="15" fill="rgb(235,113,49)"/><text x="48.8594%" y="623.50"></text></g><g><title>__libc_send (69 samples, 1.41%)</title><rect x="48.6094%" y="597" width="1.4110%" height="15" fill="rgb(205,127,43)"/><text x="48.8594%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (67 samples, 1.37%)</title><rect x="48.6503%" y="581" width="1.3701%" height="15" fill="rgb(250,162,2)"/><text x="48.9003%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.10%)</title><rect x="50.0204%" y="613" width="0.1022%" height="15" fill="rgb(220,13,41)"/><text x="50.2704%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.14%)</title><rect x="50.1431%" y="565" width="0.1431%" height="15" fill="rgb(249,221,25)"/><text x="50.3931%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (7 samples, 0.14%)</title><rect x="50.1431%" y="549" width="0.1431%" height="15" fill="rgb(215,208,19)"/><text x="50.3931%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.14%)</title><rect x="50.1431%" y="533" width="0.1431%" height="15" fill="rgb(236,175,2)"/><text x="50.3931%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (5 samples, 0.10%)</title><rect x="50.1840%" y="517" width="0.1022%" height="15" fill="rgb(241,52,2)"/><text x="50.4340%" y="527.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (14 samples, 0.29%)</title><rect x="50.0204%" y="645" width="0.2863%" height="15" fill="rgb(248,140,14)"/><text x="50.2704%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (14 samples, 0.29%)</title><rect x="50.0204%" y="629" width="0.2863%" height="15" fill="rgb(253,22,42)"/><text x="50.2704%" y="639.50"></text></g><g><title>decor_mem::helpers::expr_to_col (9 samples, 0.18%)</title><rect x="50.1227%" y="613" width="0.1840%" height="15" fill="rgb(234,61,47)"/><text x="50.3727%" y="623.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="50.1227%" y="597" width="0.1840%" height="15" fill="rgb(208,226,15)"/><text x="50.3727%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="50.1227%" y="581" width="0.1840%" height="15" fill="rgb(217,221,4)"/><text x="50.3727%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.31%)</title><rect x="50.3067%" y="629" width="0.3067%" height="15" fill="rgb(212,174,34)"/><text x="50.5567%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.31%)</title><rect x="50.3067%" y="613" width="0.3067%" height="15" fill="rgb(253,83,4)"/><text x="50.5567%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.31%)</title><rect x="50.3067%" y="597" width="0.3067%" height="15" fill="rgb(250,195,49)"/><text x="50.5567%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.31%)</title><rect x="50.3067%" y="581" width="0.3067%" height="15" fill="rgb(241,192,25)"/><text x="50.5567%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.31%)</title><rect x="50.3067%" y="565" width="0.3067%" height="15" fill="rgb(208,124,10)"/><text x="50.5567%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.31%)</title><rect x="50.3067%" y="549" width="0.3067%" height="15" fill="rgb(222,33,0)"/><text x="50.5567%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (15 samples, 0.31%)</title><rect x="50.3067%" y="533" width="0.3067%" height="15" fill="rgb(234,209,28)"/><text x="50.5567%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.31%)</title><rect x="50.3067%" y="517" width="0.3067%" height="15" fill="rgb(224,11,23)"/><text x="50.5567%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.31%)</title><rect x="50.3067%" y="501" width="0.3067%" height="15" fill="rgb(232,99,1)"/><text x="50.5567%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (15 samples, 0.31%)</title><rect x="50.3067%" y="485" width="0.3067%" height="15" fill="rgb(237,95,45)"/><text x="50.5567%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.31%)</title><rect x="50.3067%" y="469" width="0.3067%" height="15" fill="rgb(208,109,11)"/><text x="50.5567%" y="479.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.31%)</title><rect x="50.3067%" y="453" width="0.3067%" height="15" fill="rgb(216,190,48)"/><text x="50.5567%" y="463.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.31%)</title><rect x="50.3067%" y="437" width="0.3067%" height="15" fill="rgb(251,171,36)"/><text x="50.5567%" y="447.50"></text></g><g><title>_int_malloc (15 samples, 0.31%)</title><rect x="50.3067%" y="421" width="0.3067%" height="15" fill="rgb(230,62,22)"/><text x="50.5567%" y="431.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (14 samples, 0.29%)</title><rect x="50.6953%" y="549" width="0.2863%" height="15" fill="rgb(225,114,35)"/><text x="50.9453%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (10 samples, 0.20%)</title><rect x="50.7771%" y="533" width="0.2045%" height="15" fill="rgb(215,118,42)"/><text x="51.0271%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (8 samples, 0.16%)</title><rect x="50.8180%" y="517" width="0.1636%" height="15" fill="rgb(243,119,21)"/><text x="51.0680%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (8 samples, 0.16%)</title><rect x="50.8180%" y="501" width="0.1636%" height="15" fill="rgb(252,177,53)"/><text x="51.0680%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (20 samples, 0.41%)</title><rect x="50.6544%" y="581" width="0.4090%" height="15" fill="rgb(237,209,29)"/><text x="50.9044%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (20 samples, 0.41%)</title><rect x="50.6544%" y="565" width="0.4090%" height="15" fill="rgb(212,65,23)"/><text x="50.9044%" y="575.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (56 samples, 1.15%)</title><rect x="50.0204%" y="661" width="1.1452%" height="15" fill="rgb(230,222,46)"/><text x="50.2704%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (42 samples, 0.86%)</title><rect x="50.3067%" y="645" width="0.8589%" height="15" fill="rgb(215,135,32)"/><text x="50.5567%" y="655.50"></text></g><g><title>decor_mem::helpers::expr_to_col (27 samples, 0.55%)</title><rect x="50.6135%" y="629" width="0.5521%" height="15" fill="rgb(246,101,22)"/><text x="50.8635%" y="639.50"></text></g><g><title>core::fmt::write (27 samples, 0.55%)</title><rect x="50.6135%" y="613" width="0.5521%" height="15" fill="rgb(206,107,13)"/><text x="50.8635%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (27 samples, 0.55%)</title><rect x="50.6135%" y="597" width="0.5521%" height="15" fill="rgb(250,100,44)"/><text x="50.8635%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="51.0634%" y="581" width="0.1022%" height="15" fill="rgb(231,147,38)"/><text x="51.3134%" y="591.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (59 samples, 1.21%)</title><rect x="50.0204%" y="677" width="1.2065%" height="15" fill="rgb(229,8,40)"/><text x="50.2704%" y="687.50"></text></g><g><title>decor_mem::select::predicates::NamedPredicate::to_indexed_predicate (11 samples, 0.22%)</title><rect x="51.2270%" y="661" width="0.2249%" height="15" fill="rgb(221,135,30)"/><text x="51.4770%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="51.2270%" y="645" width="0.2249%" height="15" fill="rgb(249,193,18)"/><text x="51.4770%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.22%)</title><rect x="51.2270%" y="629" width="0.2249%" height="15" fill="rgb(209,133,39)"/><text x="51.4770%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="51.2270%" y="613" width="0.2249%" height="15" fill="rgb(232,100,14)"/><text x="51.4770%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="51.2270%" y="597" width="0.2249%" height="15" fill="rgb(224,185,1)"/><text x="51.4770%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 0.22%)</title><rect x="51.2270%" y="581" width="0.2249%" height="15" fill="rgb(223,139,8)"/><text x="51.4770%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.22%)</title><rect x="51.2270%" y="565" width="0.2249%" height="15" fill="rgb(232,213,38)"/><text x="51.4770%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="51.2270%" y="549" width="0.2249%" height="15" fill="rgb(207,94,22)"/><text x="51.4770%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="51.2270%" y="533" width="0.2249%" height="15" fill="rgb(219,183,54)"/><text x="51.4770%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.22%)</title><rect x="51.2270%" y="517" width="0.2249%" height="15" fill="rgb(216,185,54)"/><text x="51.4770%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.22%)</title><rect x="51.2270%" y="501" width="0.2249%" height="15" fill="rgb(254,217,39)"/><text x="51.4770%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (11 samples, 0.22%)</title><rect x="51.2270%" y="485" width="0.2249%" height="15" fill="rgb(240,178,23)"/><text x="51.4770%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.22%)</title><rect x="51.2270%" y="469" width="0.2249%" height="15" fill="rgb(218,11,47)"/><text x="51.4770%" y="479.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.22%)</title><rect x="51.2270%" y="453" width="0.2249%" height="15" fill="rgb(218,51,51)"/><text x="51.4770%" y="463.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.22%)</title><rect x="51.2270%" y="437" width="0.2249%" height="15" fill="rgb(238,126,27)"/><text x="51.4770%" y="447.50"></text></g><g><title>_int_malloc (11 samples, 0.22%)</title><rect x="51.2270%" y="421" width="0.2249%" height="15" fill="rgb(249,202,22)"/><text x="51.4770%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 1.31%)</title><rect x="51.4519%" y="613" width="1.3088%" height="15" fill="rgb(254,195,49)"/><text x="51.7019%" y="623.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="52.8016%" y="613" width="0.1022%" height="15" fill="rgb(208,123,14)"/><text x="53.0516%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (9 samples, 0.18%)</title><rect x="53.0061%" y="597" width="0.1840%" height="15" fill="rgb(224,200,8)"/><text x="53.2561%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.16%)</title><rect x="53.0266%" y="581" width="0.1636%" height="15" fill="rgb(217,61,36)"/><text x="53.2766%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (87 samples, 1.78%)</title><rect x="51.4519%" y="629" width="1.7791%" height="15" fill="rgb(206,35,45)"/><text x="51.7019%" y="639.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (16 samples, 0.33%)</title><rect x="52.9039%" y="613" width="0.3272%" height="15" fill="rgb(217,65,33)"/><text x="53.1539%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (5 samples, 0.10%)</title><rect x="53.2311%" y="629" width="0.1022%" height="15" fill="rgb(222,158,48)"/><text x="53.4811%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.18%)</title><rect x="53.5583%" y="613" width="0.1840%" height="15" fill="rgb(254,2,54)"/><text x="53.8083%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (7 samples, 0.14%)</title><rect x="53.5992%" y="597" width="0.1431%" height="15" fill="rgb(250,143,38)"/><text x="53.8492%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="53.6196%" y="581" width="0.1227%" height="15" fill="rgb(248,25,0)"/><text x="53.8696%" y="591.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (113 samples, 2.31%)</title><rect x="51.4519%" y="645" width="2.3108%" height="15" fill="rgb(206,152,27)"/><text x="51.7019%" y="655.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (21 samples, 0.43%)</title><rect x="53.3333%" y="629" width="0.4294%" height="15" fill="rgb(240,77,30)"/><text x="53.5833%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="53.7628%" y="613" width="0.1227%" height="15" fill="rgb(231,5,3)"/><text x="54.0128%" y="623.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="54.0286%" y="597" width="0.1227%" height="15" fill="rgb(207,226,32)"/><text x="54.2786%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="54.2331%" y="597" width="0.1227%" height="15" fill="rgb(222,207,47)"/><text x="54.4831%" y="607.50"></text></g><g><title>core::fmt::write (38 samples, 0.78%)</title><rect x="53.7628%" y="645" width="0.7771%" height="15" fill="rgb(229,115,45)"/><text x="54.0128%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (38 samples, 0.78%)</title><rect x="53.7628%" y="629" width="0.7771%" height="15" fill="rgb(224,191,6)"/><text x="54.0128%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (27 samples, 0.55%)</title><rect x="53.9877%" y="613" width="0.5521%" height="15" fill="rgb(230,227,24)"/><text x="54.2377%" y="623.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="54.3558%" y="597" width="0.1840%" height="15" fill="rgb(228,80,19)"/><text x="54.6058%" y="607.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (19 samples, 0.39%)</title><rect x="54.6217%" y="645" width="0.3885%" height="15" fill="rgb(247,229,0)"/><text x="54.8717%" y="655.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (19 samples, 0.39%)</title><rect x="54.6217%" y="629" width="0.3885%" height="15" fill="rgb(237,194,15)"/><text x="54.8717%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="55.2761%" y="629" width="0.1227%" height="15" fill="rgb(219,203,20)"/><text x="55.5261%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="55.2965%" y="613" width="0.1022%" height="15" fill="rgb(234,128,8)"/><text x="55.5465%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.10%)</title><rect x="55.2965%" y="597" width="0.1022%" height="15" fill="rgb(248,202,8)"/><text x="55.5465%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.10%)</title><rect x="55.2965%" y="581" width="0.1022%" height="15" fill="rgb(206,104,37)"/><text x="55.5465%" y="591.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.27%)</title><rect x="55.9714%" y="613" width="0.2658%" height="15" fill="rgb(223,8,27)"/><text x="56.2214%" y="623.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="56.0532%" y="597" width="0.1840%" height="15" fill="rgb(216,217,28)"/><text x="56.3032%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (45 samples, 0.92%)</title><rect x="56.2372%" y="613" width="0.9202%" height="15" fill="rgb(249,199,1)"/><text x="56.4872%" y="623.50"></text></g><g><title>alloc_pages_vma (5 samples, 0.10%)</title><rect x="57.3415%" y="549" width="0.1022%" height="15" fill="rgb(240,85,17)"/><text x="57.5915%" y="559.50"></text></g><g><title>__handle_mm_fault (9 samples, 0.18%)</title><rect x="57.3006%" y="565" width="0.1840%" height="15" fill="rgb(206,108,45)"/><text x="57.5506%" y="575.50"></text></g><g><title>page_fault (14 samples, 0.29%)</title><rect x="57.2188%" y="613" width="0.2863%" height="15" fill="rgb(245,210,41)"/><text x="57.4688%" y="623.50"></text></g><g><title>do_user_addr_fault (12 samples, 0.25%)</title><rect x="57.2597%" y="597" width="0.2454%" height="15" fill="rgb(206,13,37)"/><text x="57.5097%" y="607.50"></text></g><g><title>handle_mm_fault (11 samples, 0.22%)</title><rect x="57.2802%" y="581" width="0.2249%" height="15" fill="rgb(250,61,18)"/><text x="57.5302%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (107 samples, 2.19%)</title><rect x="55.3988%" y="629" width="2.1881%" height="15" fill="rgb(235,172,48)"/><text x="55.6488%" y="639.50">&lt;..</text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.10%)</title><rect x="57.6687%" y="629" width="0.1022%" height="15" fill="rgb(249,201,17)"/><text x="57.9187%" y="639.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="57.8119%" y="629" width="0.1227%" height="15" fill="rgb(219,208,6)"/><text x="58.0619%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.33%)</title><rect x="57.9755%" y="629" width="0.3272%" height="15" fill="rgb(248,31,23)"/><text x="58.2255%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.16%)</title><rect x="58.1391%" y="613" width="0.1636%" height="15" fill="rgb(245,15,42)"/><text x="58.3891%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (9 samples, 0.18%)</title><rect x="58.3027%" y="629" width="0.1840%" height="15" fill="rgb(222,217,39)"/><text x="58.5527%" y="639.50"></text></g><g><title>decor_mem::views::View::get_indexed_rptrs_of_col (172 samples, 3.52%)</title><rect x="55.0102%" y="645" width="3.5174%" height="15" fill="rgb(210,219,27)"/><text x="55.2602%" y="655.50">dec..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (566 samples, 11.57%)</title><rect x="47.0552%" y="741" width="11.5746%" height="15" fill="rgb(252,166,36)"/><text x="47.3052%" y="751.50">&lt;decor_mem::Shim ..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (566 samples, 11.57%)</title><rect x="47.0552%" y="725" width="11.5746%" height="15" fill="rgb(245,132,34)"/><text x="47.3052%" y="735.50">decor_mem::query_..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (530 samples, 10.84%)</title><rect x="47.7914%" y="709" width="10.8384%" height="15" fill="rgb(236,54,3)"/><text x="48.0414%" y="719.50">decor_mem::query..</text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (421 samples, 8.61%)</title><rect x="50.0204%" y="693" width="8.6094%" height="15" fill="rgb(241,173,43)"/><text x="50.2704%" y="703.50">decor_mem::s..</text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (362 samples, 7.40%)</title><rect x="51.2270%" y="677" width="7.4029%" height="15" fill="rgb(215,190,9)"/><text x="51.4770%" y="687.50">decor_mem:..</text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (351 samples, 7.18%)</title><rect x="51.4519%" y="661" width="7.1779%" height="15" fill="rgb(242,101,16)"/><text x="51.7019%" y="671.50">decor_mem:..</text></g><g><title>decor_mem::views::View::is_indexed_col (5 samples, 0.10%)</title><rect x="58.5276%" y="645" width="0.1022%" height="15" fill="rgb(223,190,21)"/><text x="58.7776%" y="655.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.14%)</title><rect x="58.7117%" y="341" width="0.1431%" height="15" fill="rgb(215,228,25)"/><text x="58.9617%" y="351.50"></text></g><g><title>dequeue_entity (6 samples, 0.12%)</title><rect x="58.7321%" y="325" width="0.1227%" height="15" fill="rgb(225,36,22)"/><text x="58.9821%" y="335.50"></text></g><g><title>sk_wait_data (13 samples, 0.27%)</title><rect x="58.7117%" y="421" width="0.2658%" height="15" fill="rgb(251,106,46)"/><text x="58.9617%" y="431.50"></text></g><g><title>wait_woken (13 samples, 0.27%)</title><rect x="58.7117%" y="405" width="0.2658%" height="15" fill="rgb(208,90,1)"/><text x="58.9617%" y="415.50"></text></g><g><title>schedule_timeout (13 samples, 0.27%)</title><rect x="58.7117%" y="389" width="0.2658%" height="15" fill="rgb(243,10,4)"/><text x="58.9617%" y="399.50"></text></g><g><title>schedule (13 samples, 0.27%)</title><rect x="58.7117%" y="373" width="0.2658%" height="15" fill="rgb(212,137,27)"/><text x="58.9617%" y="383.50"></text></g><g><title>__schedule (13 samples, 0.27%)</title><rect x="58.7117%" y="357" width="0.2658%" height="15" fill="rgb(231,220,49)"/><text x="58.9617%" y="367.50"></text></g><g><title>do_syscall_64 (16 samples, 0.33%)</title><rect x="58.6708%" y="501" width="0.3272%" height="15" fill="rgb(237,96,20)"/><text x="58.9208%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (16 samples, 0.33%)</title><rect x="58.6708%" y="485" width="0.3272%" height="15" fill="rgb(239,229,30)"/><text x="58.9208%" y="495.50"></text></g><g><title>__sys_recvfrom (16 samples, 0.33%)</title><rect x="58.6708%" y="469" width="0.3272%" height="15" fill="rgb(219,65,33)"/><text x="58.9208%" y="479.50"></text></g><g><title>inet_recvmsg (16 samples, 0.33%)</title><rect x="58.6708%" y="453" width="0.3272%" height="15" fill="rgb(243,134,7)"/><text x="58.9208%" y="463.50"></text></g><g><title>tcp_recvmsg (16 samples, 0.33%)</title><rect x="58.6708%" y="437" width="0.3272%" height="15" fill="rgb(216,177,54)"/><text x="58.9208%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (19 samples, 0.39%)</title><rect x="58.6708%" y="613" width="0.3885%" height="15" fill="rgb(211,160,20)"/><text x="58.9208%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (19 samples, 0.39%)</title><rect x="58.6708%" y="597" width="0.3885%" height="15" fill="rgb(239,85,39)"/><text x="58.9208%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (19 samples, 0.39%)</title><rect x="58.6708%" y="581" width="0.3885%" height="15" fill="rgb(232,125,22)"/><text x="58.9208%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (19 samples, 0.39%)</title><rect x="58.6708%" y="565" width="0.3885%" height="15" fill="rgb(244,57,34)"/><text x="58.9208%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (19 samples, 0.39%)</title><rect x="58.6708%" y="549" width="0.3885%" height="15" fill="rgb(214,203,32)"/><text x="58.9208%" y="559.50"></text></g><g><title>__libc_recv (19 samples, 0.39%)</title><rect x="58.6708%" y="533" width="0.3885%" height="15" fill="rgb(207,58,43)"/><text x="58.9208%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (19 samples, 0.39%)</title><rect x="58.6708%" y="517" width="0.3885%" height="15" fill="rgb(215,193,15)"/><text x="58.9208%" y="527.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.43%)</title><rect x="58.6708%" y="629" width="0.4294%" height="15" fill="rgb(232,15,44)"/><text x="58.9208%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (23 samples, 0.47%)</title><rect x="58.6503%" y="645" width="0.4703%" height="15" fill="rgb(212,3,48)"/><text x="58.9003%" y="655.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (25 samples, 0.51%)</title><rect x="58.6299%" y="709" width="0.5112%" height="15" fill="rgb(218,128,7)"/><text x="58.8799%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (25 samples, 0.51%)</title><rect x="58.6299%" y="693" width="0.5112%" height="15" fill="rgb(226,216,39)"/><text x="58.8799%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (25 samples, 0.51%)</title><rect x="58.6299%" y="677" width="0.5112%" height="15" fill="rgb(243,47,51)"/><text x="58.8799%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (25 samples, 0.51%)</title><rect x="58.6299%" y="661" width="0.5112%" height="15" fill="rgb(241,183,40)"/><text x="58.8799%" y="671.50"></text></g><g><title>update_curr (5 samples, 0.10%)</title><rect x="59.5706%" y="309" width="0.1022%" height="15" fill="rgb(231,217,32)"/><text x="59.8206%" y="319.50"></text></g><g><title>dequeue_task_fair (6 samples, 0.12%)</title><rect x="59.5706%" y="341" width="0.1227%" height="15" fill="rgb(229,61,38)"/><text x="59.8206%" y="351.50"></text></g><g><title>dequeue_entity (6 samples, 0.12%)</title><rect x="59.5706%" y="325" width="0.1227%" height="15" fill="rgb(225,210,5)"/><text x="59.8206%" y="335.50"></text></g><g><title>sk_wait_data (16 samples, 0.33%)</title><rect x="59.4274%" y="421" width="0.3272%" height="15" fill="rgb(231,79,45)"/><text x="59.6774%" y="431.50"></text></g><g><title>wait_woken (13 samples, 0.27%)</title><rect x="59.4888%" y="405" width="0.2658%" height="15" fill="rgb(224,100,7)"/><text x="59.7388%" y="415.50"></text></g><g><title>schedule_timeout (12 samples, 0.25%)</title><rect x="59.5092%" y="389" width="0.2454%" height="15" fill="rgb(241,198,18)"/><text x="59.7592%" y="399.50"></text></g><g><title>schedule (12 samples, 0.25%)</title><rect x="59.5092%" y="373" width="0.2454%" height="15" fill="rgb(252,97,53)"/><text x="59.7592%" y="383.50"></text></g><g><title>__schedule (12 samples, 0.25%)</title><rect x="59.5092%" y="357" width="0.2454%" height="15" fill="rgb(220,88,7)"/><text x="59.7592%" y="367.50"></text></g><g><title>inet_recvmsg (21 samples, 0.43%)</title><rect x="59.3456%" y="453" width="0.4294%" height="15" fill="rgb(213,176,14)"/><text x="59.5956%" y="463.50"></text></g><g><title>tcp_recvmsg (21 samples, 0.43%)</title><rect x="59.3456%" y="437" width="0.4294%" height="15" fill="rgb(246,73,7)"/><text x="59.5956%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (26 samples, 0.53%)</title><rect x="59.3252%" y="485" width="0.5317%" height="15" fill="rgb(245,64,36)"/><text x="59.5752%" y="495.50"></text></g><g><title>__sys_recvfrom (26 samples, 0.53%)</title><rect x="59.3252%" y="469" width="0.5317%" height="15" fill="rgb(245,80,10)"/><text x="59.5752%" y="479.50"></text></g><g><title>do_syscall_64 (27 samples, 0.55%)</title><rect x="59.3252%" y="501" width="0.5521%" height="15" fill="rgb(232,107,50)"/><text x="59.5752%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (29 samples, 0.59%)</title><rect x="59.3252%" y="517" width="0.5930%" height="15" fill="rgb(253,3,0)"/><text x="59.5752%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (31 samples, 0.63%)</title><rect x="59.3047%" y="613" width="0.6339%" height="15" fill="rgb(212,99,53)"/><text x="59.5547%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (30 samples, 0.61%)</title><rect x="59.3252%" y="597" width="0.6135%" height="15" fill="rgb(249,111,54)"/><text x="59.5752%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (30 samples, 0.61%)</title><rect x="59.3252%" y="581" width="0.6135%" height="15" fill="rgb(249,55,30)"/><text x="59.5752%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (30 samples, 0.61%)</title><rect x="59.3252%" y="565" width="0.6135%" height="15" fill="rgb(237,47,42)"/><text x="59.5752%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (30 samples, 0.61%)</title><rect x="59.3252%" y="549" width="0.6135%" height="15" fill="rgb(211,20,18)"/><text x="59.5752%" y="559.50"></text></g><g><title>__libc_recv (30 samples, 0.61%)</title><rect x="59.3252%" y="533" width="0.6135%" height="15" fill="rgb(231,203,46)"/><text x="59.5752%" y="543.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (41 samples, 0.84%)</title><rect x="59.1411%" y="693" width="0.8384%" height="15" fill="rgb(237,142,3)"/><text x="59.3911%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (41 samples, 0.84%)</title><rect x="59.1411%" y="677" width="0.8384%" height="15" fill="rgb(241,107,1)"/><text x="59.3911%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (41 samples, 0.84%)</title><rect x="59.1411%" y="661" width="0.8384%" height="15" fill="rgb(229,83,13)"/><text x="59.3911%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (39 samples, 0.80%)</title><rect x="59.1820%" y="645" width="0.7975%" height="15" fill="rgb(241,91,40)"/><text x="59.4320%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.72%)</title><rect x="59.2638%" y="629" width="0.7157%" height="15" fill="rgb(225,3,45)"/><text x="59.5138%" y="639.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (6 samples, 0.12%)</title><rect x="59.9796%" y="661" width="0.1227%" height="15" fill="rgb(244,223,14)"/><text x="60.2296%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (6 samples, 0.12%)</title><rect x="59.9796%" y="645" width="0.1227%" height="15" fill="rgb(224,124,37)"/><text x="60.2296%" y="655.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (14 samples, 0.29%)</title><rect x="59.9796%" y="677" width="0.2863%" height="15" fill="rgb(251,171,30)"/><text x="60.2296%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (8 samples, 0.16%)</title><rect x="60.1022%" y="661" width="0.1636%" height="15" fill="rgb(236,46,54)"/><text x="60.3522%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (6 samples, 0.12%)</title><rect x="60.1431%" y="645" width="0.1227%" height="15" fill="rgb(245,213,5)"/><text x="60.3931%" y="655.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (688 samples, 14.07%)</title><rect x="46.3395%" y="773" width="14.0695%" height="15" fill="rgb(230,144,27)"/><text x="46.5895%" y="783.50">msql_srv::MysqlInterm..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (688 samples, 14.07%)</title><rect x="46.3395%" y="757" width="14.0695%" height="15" fill="rgb(220,86,6)"/><text x="46.5895%" y="767.50">msql_srv::MysqlInterm..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (87 samples, 1.78%)</title><rect x="58.6299%" y="741" width="1.7791%" height="15" fill="rgb(240,20,13)"/><text x="58.8799%" y="751.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (87 samples, 1.78%)</title><rect x="58.6299%" y="725" width="1.7791%" height="15" fill="rgb(217,89,34)"/><text x="58.8799%" y="735.50">d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (62 samples, 1.27%)</title><rect x="59.1411%" y="709" width="1.2679%" height="15" fill="rgb(229,13,5)"/><text x="59.3911%" y="719.50"></text></g><g><title>decor_mem::views::Views::delete (21 samples, 0.43%)</title><rect x="59.9796%" y="693" width="0.4294%" height="15" fill="rgb(244,67,35)"/><text x="60.2296%" y="703.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (7 samples, 0.14%)</title><rect x="60.2658%" y="677" width="0.1431%" height="15" fill="rgb(221,40,2)"/><text x="60.5158%" y="687.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="60.2658%" y="661" width="0.1431%" height="15" fill="rgb(237,157,21)"/><text x="60.5158%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.14%)</title><rect x="60.2658%" y="645" width="0.1431%" height="15" fill="rgb(222,94,11)"/><text x="60.5158%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (27 samples, 0.55%)</title><rect x="60.6339%" y="693" width="0.5521%" height="15" fill="rgb(249,113,6)"/><text x="60.8839%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::expected (27 samples, 0.55%)</title><rect x="60.6339%" y="677" width="0.5521%" height="15" fill="rgb(238,137,36)"/><text x="60.8839%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (27 samples, 0.55%)</title><rect x="60.6339%" y="661" width="0.5521%" height="15" fill="rgb(210,102,26)"/><text x="60.8839%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 0.55%)</title><rect x="60.6339%" y="645" width="0.5521%" height="15" fill="rgb(218,30,30)"/><text x="60.8839%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.55%)</title><rect x="60.6339%" y="629" width="0.5521%" height="15" fill="rgb(214,67,26)"/><text x="60.8839%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.55%)</title><rect x="60.6339%" y="613" width="0.5521%" height="15" fill="rgb(251,9,53)"/><text x="60.8839%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (27 samples, 0.55%)</title><rect x="60.6339%" y="597" width="0.5521%" height="15" fill="rgb(228,204,25)"/><text x="60.8839%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (27 samples, 0.55%)</title><rect x="60.6339%" y="581" width="0.5521%" height="15" fill="rgb(207,153,8)"/><text x="60.8839%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (27 samples, 0.55%)</title><rect x="60.6339%" y="565" width="0.5521%" height="15" fill="rgb(242,9,16)"/><text x="60.8839%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.55%)</title><rect x="60.6339%" y="549" width="0.5521%" height="15" fill="rgb(217,211,10)"/><text x="60.8839%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.55%)</title><rect x="60.6339%" y="533" width="0.5521%" height="15" fill="rgb(219,228,52)"/><text x="60.8839%" y="543.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (34 samples, 0.70%)</title><rect x="60.5726%" y="773" width="0.6953%" height="15" fill="rgb(231,92,29)"/><text x="60.8226%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (34 samples, 0.70%)</title><rect x="60.5726%" y="757" width="0.6953%" height="15" fill="rgb(232,8,23)"/><text x="60.8226%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (34 samples, 0.70%)</title><rect x="60.5726%" y="741" width="0.6953%" height="15" fill="rgb(216,211,34)"/><text x="60.8226%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (34 samples, 0.70%)</title><rect x="60.5726%" y="725" width="0.6953%" height="15" fill="rgb(236,151,0)"/><text x="60.8226%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (34 samples, 0.70%)</title><rect x="60.5726%" y="709" width="0.6953%" height="15" fill="rgb(209,168,3)"/><text x="60.8226%" y="719.50"></text></g><g><title>decor_mem::ghosts_map::answer_rows (7 samples, 0.14%)</title><rect x="61.4724%" y="597" width="0.1431%" height="15" fill="rgb(208,129,28)"/><text x="61.7224%" y="607.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="61.6360%" y="581" width="0.1431%" height="15" fill="rgb(229,78,22)"/><text x="61.8860%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="61.6564%" y="565" width="0.1227%" height="15" fill="rgb(228,187,13)"/><text x="61.9064%" y="575.50"></text></g><g><title>__alloc_pages_nodemask (12 samples, 0.25%)</title><rect x="62.4131%" y="469" width="0.2454%" height="15" fill="rgb(240,119,24)"/><text x="62.6631%" y="479.50"></text></g><g><title>get_page_from_freelist (11 samples, 0.22%)</title><rect x="62.4335%" y="453" width="0.2249%" height="15" fill="rgb(209,194,42)"/><text x="62.6835%" y="463.50"></text></g><g><title>alloc_pages_vma (13 samples, 0.27%)</title><rect x="62.4131%" y="485" width="0.2658%" height="15" fill="rgb(247,200,46)"/><text x="62.6631%" y="495.50"></text></g><g><title>__handle_mm_fault (24 samples, 0.49%)</title><rect x="62.2904%" y="501" width="0.4908%" height="15" fill="rgb(218,76,16)"/><text x="62.5404%" y="511.50"></text></g><g><title>handle_mm_fault (29 samples, 0.59%)</title><rect x="62.2290%" y="517" width="0.5930%" height="15" fill="rgb(225,21,48)"/><text x="62.4790%" y="527.50"></text></g><g><title>page_fault (36 samples, 0.74%)</title><rect x="62.1063%" y="549" width="0.7362%" height="15" fill="rgb(239,223,50)"/><text x="62.3563%" y="559.50"></text></g><g><title>do_user_addr_fault (35 samples, 0.72%)</title><rect x="62.1268%" y="533" width="0.7157%" height="15" fill="rgb(244,45,21)"/><text x="62.3768%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (62 samples, 1.27%)</title><rect x="61.7791%" y="581" width="1.2679%" height="15" fill="rgb(232,33,43)"/><text x="62.0291%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (56 samples, 1.15%)</title><rect x="61.9018%" y="565" width="1.1452%" height="15" fill="rgb(209,8,3)"/><text x="62.1518%" y="575.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (10 samples, 0.20%)</title><rect x="62.8425%" y="549" width="0.2045%" height="15" fill="rgb(214,25,53)"/><text x="63.0925%" y="559.50"></text></g><g><title>prepare_exit_to_usermode (10 samples, 0.20%)</title><rect x="62.8425%" y="533" width="0.2045%" height="15" fill="rgb(254,186,54)"/><text x="63.0925%" y="543.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (77 samples, 1.57%)</title><rect x="61.6155%" y="597" width="1.5746%" height="15" fill="rgb(208,174,49)"/><text x="61.8655%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (7 samples, 0.14%)</title><rect x="63.0470%" y="581" width="0.1431%" height="15" fill="rgb(233,191,51)"/><text x="63.2970%" y="591.50"></text></g><g><title>decor_mem::views::View::insert_into_index (12 samples, 0.25%)</title><rect x="63.2106%" y="581" width="0.2454%" height="15" fill="rgb(222,134,10)"/><text x="63.4606%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.10%)</title><rect x="63.3538%" y="565" width="0.1022%" height="15" fill="rgb(230,226,20)"/><text x="63.6038%" y="575.50"></text></g><g><title>decor_mem::views::Views::insert (19 samples, 0.39%)</title><rect x="63.1902%" y="597" width="0.3885%" height="15" fill="rgb(251,111,25)"/><text x="63.4402%" y="607.50"></text></g><g><title>decor_mem::views::View::insert_row (6 samples, 0.12%)</title><rect x="63.4560%" y="581" width="0.1227%" height="15" fill="rgb(224,40,46)"/><text x="63.7060%" y="591.50"></text></g><g><title>start_thread (110 samples, 2.25%)</title><rect x="61.4519%" y="773" width="2.2495%" height="15" fill="rgb(236,108,47)"/><text x="61.7019%" y="783.50">s..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (110 samples, 2.25%)</title><rect x="61.4519%" y="757" width="2.2495%" height="15" fill="rgb(234,93,0)"/><text x="61.7019%" y="767.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (110 samples, 2.25%)</title><rect x="61.4519%" y="741" width="2.2495%" height="15" fill="rgb(224,213,32)"/><text x="61.7019%" y="751.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (110 samples, 2.25%)</title><rect x="61.4519%" y="725" width="2.2495%" height="15" fill="rgb(251,11,48)"/><text x="61.7019%" y="735.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (110 samples, 2.25%)</title><rect x="61.4519%" y="709" width="2.2495%" height="15" fill="rgb(236,173,5)"/><text x="61.7019%" y="719.50">c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (110 samples, 2.25%)</title><rect x="61.4519%" y="693" width="2.2495%" height="15" fill="rgb(230,95,12)"/><text x="61.7019%" y="703.50">s..</text></g><g><title>decor_mem::Shim::run_on_tcp (110 samples, 2.25%)</title><rect x="61.4519%" y="677" width="2.2495%" height="15" fill="rgb(232,209,1)"/><text x="61.7019%" y="687.50">d..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (110 samples, 2.25%)</title><rect x="61.4519%" y="661" width="2.2495%" height="15" fill="rgb(232,6,1)"/><text x="61.7019%" y="671.50">m..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (110 samples, 2.25%)</title><rect x="61.4519%" y="645" width="2.2495%" height="15" fill="rgb(210,224,50)"/><text x="61.7019%" y="655.50">m..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (110 samples, 2.25%)</title><rect x="61.4519%" y="629" width="2.2495%" height="15" fill="rgb(228,127,35)"/><text x="61.7019%" y="639.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (110 samples, 2.25%)</title><rect x="61.4519%" y="613" width="2.2495%" height="15" fill="rgb(245,102,45)"/><text x="61.7019%" y="623.50">d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.12%)</title><rect x="63.5787%" y="597" width="0.1227%" height="15" fill="rgb(214,1,49)"/><text x="63.8287%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (6 samples, 0.12%)</title><rect x="63.5787%" y="581" width="0.1227%" height="15" fill="rgb(226,163,40)"/><text x="63.8287%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (6 samples, 0.12%)</title><rect x="63.5787%" y="565" width="0.1227%" height="15" fill="rgb(239,212,28)"/><text x="63.8287%" y="575.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="63.5787%" y="549" width="0.1227%" height="15" fill="rgb(220,20,13)"/><text x="63.8287%" y="559.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="63.5787%" y="533" width="0.1227%" height="15" fill="rgb(210,164,35)"/><text x="63.8287%" y="543.50"></text></g><g><title>malloc_consolidate (6 samples, 0.12%)</title><rect x="63.5787%" y="517" width="0.1227%" height="15" fill="rgb(248,109,41)"/><text x="63.8287%" y="527.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.10%)</title><rect x="63.7219%" y="773" width="0.1022%" height="15" fill="rgb(238,23,50)"/><text x="63.9719%" y="783.50"></text></g><g><title>std::rt::lang_start_internal (8 samples, 0.16%)</title><rect x="63.8855%" y="773" width="0.1636%" height="15" fill="rgb(211,48,49)"/><text x="64.1355%" y="783.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.16%)</title><rect x="63.8855%" y="757" width="0.1636%" height="15" fill="rgb(223,36,21)"/><text x="64.1355%" y="767.50"></text></g><g><title>std::panicking::try (8 samples, 0.16%)</title><rect x="63.8855%" y="741" width="0.1636%" height="15" fill="rgb(207,123,46)"/><text x="64.1355%" y="751.50"></text></g><g><title>std::panicking::try::do_call (8 samples, 0.16%)</title><rect x="63.8855%" y="725" width="0.1636%" height="15" fill="rgb(240,218,32)"/><text x="64.1355%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8 samples, 0.16%)</title><rect x="63.8855%" y="709" width="0.1636%" height="15" fill="rgb(252,5,43)"/><text x="64.1355%" y="719.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (8 samples, 0.16%)</title><rect x="63.8855%" y="693" width="0.1636%" height="15" fill="rgb(252,84,19)"/><text x="64.1355%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.16%)</title><rect x="63.8855%" y="677" width="0.1636%" height="15" fill="rgb(243,152,39)"/><text x="64.1355%" y="687.50"></text></g><g><title>lobsters_microbenchmarks::main (8 samples, 0.16%)</title><rect x="63.8855%" y="661" width="0.1636%" height="15" fill="rgb(234,160,15)"/><text x="64.1355%" y="671.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="64.0695%" y="597" width="0.1227%" height="15" fill="rgb(237,34,20)"/><text x="64.3195%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="64.0695%" y="581" width="0.1227%" height="15" fill="rgb(229,97,13)"/><text x="64.3195%" y="591.50"></text></g><g><title>do_syscall_64 (7 samples, 0.14%)</title><rect x="64.1922%" y="501" width="0.1431%" height="15" fill="rgb(234,71,50)"/><text x="64.4422%" y="511.50"></text></g><g><title>__x64_sys_mprotect (6 samples, 0.12%)</title><rect x="64.2127%" y="485" width="0.1227%" height="15" fill="rgb(253,155,4)"/><text x="64.4627%" y="495.50"></text></g><g><title>do_mprotect_pkey (6 samples, 0.12%)</title><rect x="64.2127%" y="469" width="0.1227%" height="15" fill="rgb(222,185,37)"/><text x="64.4627%" y="479.50"></text></g><g><title>mprotect_fixup (5 samples, 0.10%)</title><rect x="64.2331%" y="453" width="0.1022%" height="15" fill="rgb(251,177,13)"/><text x="64.4831%" y="463.50"></text></g><g><title>__GI___mprotect (9 samples, 0.18%)</title><rect x="64.1922%" y="533" width="0.1840%" height="15" fill="rgb(250,179,40)"/><text x="64.4422%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.18%)</title><rect x="64.1922%" y="517" width="0.1840%" height="15" fill="rgb(242,44,2)"/><text x="64.4422%" y="527.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (20 samples, 0.41%)</title><rect x="64.0695%" y="613" width="0.4090%" height="15" fill="rgb(216,177,13)"/><text x="64.3195%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (14 samples, 0.29%)</title><rect x="64.1922%" y="597" width="0.2863%" height="15" fill="rgb(216,106,43)"/><text x="64.4422%" y="607.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.29%)</title><rect x="64.1922%" y="581" width="0.2863%" height="15" fill="rgb(216,183,2)"/><text x="64.4422%" y="591.50"></text></g><g><title>_int_malloc (14 samples, 0.29%)</title><rect x="64.1922%" y="565" width="0.2863%" height="15" fill="rgb(249,75,3)"/><text x="64.4422%" y="575.50"></text></g><g><title>sysmalloc (14 samples, 0.29%)</title><rect x="64.1922%" y="549" width="0.2863%" height="15" fill="rgb(219,67,39)"/><text x="64.4422%" y="559.50"></text></g><g><title>decor_mem::views::View::insert_into_index (8 samples, 0.16%)</title><rect x="64.4785%" y="597" width="0.1636%" height="15" fill="rgb(253,228,2)"/><text x="64.7285%" y="607.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (35 samples, 0.72%)</title><rect x="64.0491%" y="773" width="0.7157%" height="15" fill="rgb(235,138,27)"/><text x="64.2991%" y="783.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (35 samples, 0.72%)</title><rect x="64.0491%" y="757" width="0.7157%" height="15" fill="rgb(236,97,51)"/><text x="64.2991%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (35 samples, 0.72%)</title><rect x="64.0491%" y="741" width="0.7157%" height="15" fill="rgb(240,80,30)"/><text x="64.2991%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (35 samples, 0.72%)</title><rect x="64.0491%" y="725" width="0.7157%" height="15" fill="rgb(230,178,19)"/><text x="64.2991%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (35 samples, 0.72%)</title><rect x="64.0491%" y="709" width="0.7157%" height="15" fill="rgb(210,190,27)"/><text x="64.2991%" y="719.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (35 samples, 0.72%)</title><rect x="64.0491%" y="693" width="0.7157%" height="15" fill="rgb(222,107,31)"/><text x="64.2991%" y="703.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (35 samples, 0.72%)</title><rect x="64.0491%" y="677" width="0.7157%" height="15" fill="rgb(216,127,34)"/><text x="64.2991%" y="687.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (35 samples, 0.72%)</title><rect x="64.0491%" y="661" width="0.7157%" height="15" fill="rgb(234,116,52)"/><text x="64.2991%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (35 samples, 0.72%)</title><rect x="64.0491%" y="645" width="0.7157%" height="15" fill="rgb(222,124,15)"/><text x="64.2991%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (35 samples, 0.72%)</title><rect x="64.0491%" y="629" width="0.7157%" height="15" fill="rgb(231,179,28)"/><text x="64.2991%" y="639.50"></text></g><g><title>decor_mem::views::Views::insert (14 samples, 0.29%)</title><rect x="64.4785%" y="613" width="0.2863%" height="15" fill="rgb(226,93,45)"/><text x="64.7285%" y="623.50"></text></g><g><title>decor_mem::views::View::insert_row (6 samples, 0.12%)</title><rect x="64.6421%" y="597" width="0.1227%" height="15" fill="rgb(215,8,51)"/><text x="64.8921%" y="607.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (19 samples, 0.39%)</title><rect x="64.8057%" y="677" width="0.3885%" height="15" fill="rgb(223,106,5)"/><text x="65.0557%" y="687.50"></text></g><g><title>__GI___libc_realloc (27 samples, 0.55%)</title><rect x="65.9918%" y="661" width="0.5521%" height="15" fill="rgb(250,191,5)"/><text x="66.2418%" y="671.50"></text></g><g><title>_int_realloc (8 samples, 0.16%)</title><rect x="66.3804%" y="645" width="0.1636%" height="15" fill="rgb(242,132,44)"/><text x="66.6304%" y="655.50"></text></g><g><title>_int_free (13 samples, 0.27%)</title><rect x="66.6667%" y="661" width="0.2658%" height="15" fill="rgb(251,152,29)"/><text x="66.9167%" y="671.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (9 samples, 0.18%)</title><rect x="67.1370%" y="645" width="0.1840%" height="15" fill="rgb(218,179,5)"/><text x="67.3870%" y="655.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (8 samples, 0.16%)</title><rect x="67.1575%" y="629" width="0.1636%" height="15" fill="rgb(227,67,19)"/><text x="67.4075%" y="639.50"></text></g><g><title>core::fmt::write (19 samples, 0.39%)</title><rect x="66.9734%" y="661" width="0.3885%" height="15" fill="rgb(233,119,31)"/><text x="67.2234%" y="671.50"></text></g><g><title>__GI___libc_free (9 samples, 0.18%)</title><rect x="67.4847%" y="629" width="0.1840%" height="15" fill="rgb(241,120,22)"/><text x="67.7347%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.35%)</title><rect x="67.3620%" y="661" width="0.3476%" height="15" fill="rgb(224,102,30)"/><text x="67.6120%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.27%)</title><rect x="67.4438%" y="645" width="0.2658%" height="15" fill="rgb(210,164,37)"/><text x="67.6938%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (153 samples, 3.13%)</title><rect x="64.8057%" y="709" width="3.1288%" height="15" fill="rgb(226,191,16)"/><text x="65.0557%" y="719.50">&lt;de..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (153 samples, 3.13%)</title><rect x="64.8057%" y="693" width="3.1288%" height="15" fill="rgb(214,40,45)"/><text x="65.0557%" y="703.50">dec..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (134 samples, 2.74%)</title><rect x="65.1943%" y="677" width="2.7403%" height="15" fill="rgb(244,29,26)"/><text x="65.4443%" y="687.50">de..</text></g><g><title>decor_mem::views::Views::get_view (6 samples, 0.12%)</title><rect x="67.8119%" y="661" width="0.1227%" height="15" fill="rgb(216,16,5)"/><text x="68.0619%" y="671.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (14 samples, 0.29%)</title><rect x="67.9346%" y="677" width="0.2863%" height="15" fill="rgb(249,76,35)"/><text x="68.1846%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe_child_parent_edges (7 samples, 0.14%)</title><rect x="68.2209%" y="677" width="0.1431%" height="15" fill="rgb(207,11,44)"/><text x="68.4709%" y="687.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (5 samples, 0.10%)</title><rect x="68.3640%" y="677" width="0.1022%" height="15" fill="rgb(228,190,49)"/><text x="68.6140%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="68.4663%" y="613" width="0.1227%" height="15" fill="rgb(214,173,12)"/><text x="68.7163%" y="623.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="68.4663%" y="597" width="0.1227%" height="15" fill="rgb(218,26,35)"/><text x="68.7163%" y="607.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="68.4663%" y="581" width="0.1227%" height="15" fill="rgb(220,200,19)"/><text x="68.7163%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.20%)</title><rect x="68.5890%" y="597" width="0.2045%" height="15" fill="rgb(239,95,49)"/><text x="68.8390%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.16%)</title><rect x="68.6299%" y="581" width="0.1636%" height="15" fill="rgb(235,85,53)"/><text x="68.8799%" y="591.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="68.6503%" y="565" width="0.1431%" height="15" fill="rgb(233,133,31)"/><text x="68.9003%" y="575.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (17 samples, 0.35%)</title><rect x="68.4663%" y="677" width="0.3476%" height="15" fill="rgb(218,25,20)"/><text x="68.7163%" y="687.50"></text></g><g><title>core::fmt::write (17 samples, 0.35%)</title><rect x="68.4663%" y="661" width="0.3476%" height="15" fill="rgb(252,210,38)"/><text x="68.7163%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (17 samples, 0.35%)</title><rect x="68.4663%" y="645" width="0.3476%" height="15" fill="rgb(242,134,21)"/><text x="68.7163%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (17 samples, 0.35%)</title><rect x="68.4663%" y="629" width="0.3476%" height="15" fill="rgb(213,28,48)"/><text x="68.7163%" y="639.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="68.5890%" y="613" width="0.2249%" height="15" fill="rgb(250,196,2)"/><text x="68.8390%" y="623.50"></text></g><g><title>__GI___libc_free (5 samples, 0.10%)</title><rect x="68.9571%" y="565" width="0.1022%" height="15" fill="rgb(227,5,17)"/><text x="69.2071%" y="575.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="69.1616%" y="565" width="0.1227%" height="15" fill="rgb(221,226,24)"/><text x="69.4116%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (28 samples, 0.57%)</title><rect x="68.8139%" y="597" width="0.5726%" height="15" fill="rgb(211,5,48)"/><text x="69.0639%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (27 samples, 0.55%)</title><rect x="68.8344%" y="581" width="0.5521%" height="15" fill="rgb(219,150,6)"/><text x="69.0844%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="69.2843%" y="565" width="0.1022%" height="15" fill="rgb(251,46,16)"/><text x="69.5343%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (32 samples, 0.65%)</title><rect x="68.8139%" y="613" width="0.6544%" height="15" fill="rgb(220,204,40)"/><text x="69.0639%" y="623.50"></text></g><g><title>core::fmt::write (38 samples, 0.78%)</title><rect x="68.8139%" y="645" width="0.7771%" height="15" fill="rgb(211,85,2)"/><text x="69.0639%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (38 samples, 0.78%)</title><rect x="68.8139%" y="629" width="0.7771%" height="15" fill="rgb(229,17,7)"/><text x="69.0639%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="69.4888%" y="613" width="0.1022%" height="15" fill="rgb(239,72,28)"/><text x="69.7388%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.14%)</title><rect x="69.5910%" y="645" width="0.1431%" height="15" fill="rgb(230,47,54)"/><text x="69.8410%" y="655.50"></text></g><g><title>decor_mem::views::View::insert_into_index (54 samples, 1.10%)</title><rect x="68.8139%" y="661" width="1.1043%" height="15" fill="rgb(214,50,8)"/><text x="69.0639%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (9 samples, 0.18%)</title><rect x="69.7342%" y="645" width="0.1840%" height="15" fill="rgb(216,198,43)"/><text x="69.9842%" y="655.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="69.7342%" y="629" width="0.1840%" height="15" fill="rgb(234,20,35)"/><text x="69.9842%" y="639.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="69.7342%" y="613" width="0.1840%" height="15" fill="rgb(254,45,19)"/><text x="69.9842%" y="623.50"></text></g><g><title>sysmalloc (9 samples, 0.18%)</title><rect x="69.7342%" y="597" width="0.1840%" height="15" fill="rgb(219,14,44)"/><text x="69.9842%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (257 samples, 5.26%)</title><rect x="64.7853%" y="773" width="5.2556%" height="15" fill="rgb(217,220,26)"/><text x="65.0353%" y="783.50">std::s..</text></g><g><title>decor_mem::Shim::run_on_tcp (257 samples, 5.26%)</title><rect x="64.7853%" y="757" width="5.2556%" height="15" fill="rgb(213,158,28)"/><text x="65.0353%" y="767.50">decor_..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (257 samples, 5.26%)</title><rect x="64.7853%" y="741" width="5.2556%" height="15" fill="rgb(252,51,52)"/><text x="65.0353%" y="751.50">msql_s..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (257 samples, 5.26%)</title><rect x="64.7853%" y="725" width="5.2556%" height="15" fill="rgb(246,89,16)"/><text x="65.0353%" y="735.50">msql_s..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (103 samples, 2.11%)</title><rect x="67.9346%" y="709" width="2.1063%" height="15" fill="rgb(216,158,49)"/><text x="68.1846%" y="719.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (103 samples, 2.11%)</title><rect x="67.9346%" y="693" width="2.1063%" height="15" fill="rgb(236,107,19)"/><text x="68.1846%" y="703.50">d..</text></g><g><title>decor_mem::views::Views::insert (60 samples, 1.23%)</title><rect x="68.8139%" y="677" width="1.2270%" height="15" fill="rgb(228,185,30)"/><text x="69.0639%" y="687.50"></text></g><g><title>decor_mem::views::View::insert_row (6 samples, 0.12%)</title><rect x="69.9182%" y="661" width="0.1227%" height="15" fill="rgb(246,134,8)"/><text x="70.1682%" y="671.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="69.9182%" y="645" width="0.1227%" height="15" fill="rgb(214,143,50)"/><text x="70.1682%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="69.9182%" y="629" width="0.1227%" height="15" fill="rgb(228,75,8)"/><text x="70.1682%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (6 samples, 0.12%)</title><rect x="69.9182%" y="613" width="0.1227%" height="15" fill="rgb(207,175,4)"/><text x="70.1682%" y="623.50"></text></g><g><title>[unknown] (2,995 samples, 61.25%)</title><rect x="8.8548%" y="789" width="61.2474%" height="15" fill="rgb(205,108,24)"/><text x="9.1048%" y="799.50">[unknown]</text></g><g><title>__malloc_arena_thread_freeres (7 samples, 0.14%)</title><rect x="70.1227%" y="757" width="0.1431%" height="15" fill="rgb(244,120,49)"/><text x="70.3727%" y="767.50"></text></g><g><title>_int_free (7 samples, 0.14%)</title><rect x="70.1227%" y="741" width="0.1431%" height="15" fill="rgb(223,47,38)"/><text x="70.3727%" y="751.50"></text></g><g><title>__GI_munmap (5 samples, 0.10%)</title><rect x="70.1636%" y="725" width="0.1022%" height="15" fill="rgb(229,179,11)"/><text x="70.4136%" y="735.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.10%)</title><rect x="70.1636%" y="709" width="0.1022%" height="15" fill="rgb(231,122,1)"/><text x="70.4136%" y="719.50"></text></g><g><title>do_syscall_64 (5 samples, 0.10%)</title><rect x="70.1636%" y="693" width="0.1022%" height="15" fill="rgb(245,119,9)"/><text x="70.4136%" y="703.50"></text></g><g><title>__x64_sys_munmap (5 samples, 0.10%)</title><rect x="70.1636%" y="677" width="0.1022%" height="15" fill="rgb(241,163,25)"/><text x="70.4136%" y="687.50"></text></g><g><title>__vm_munmap (5 samples, 0.10%)</title><rect x="70.1636%" y="661" width="0.1022%" height="15" fill="rgb(217,214,3)"/><text x="70.4136%" y="671.50"></text></g><g><title>__do_munmap (5 samples, 0.10%)</title><rect x="70.1636%" y="645" width="0.1022%" height="15" fill="rgb(240,86,28)"/><text x="70.4136%" y="655.50"></text></g><g><title>unmap_region (5 samples, 0.10%)</title><rect x="70.1636%" y="629" width="0.1022%" height="15" fill="rgb(215,47,9)"/><text x="70.4136%" y="639.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.41%)</title><rect x="70.4499%" y="613" width="0.4090%" height="15" fill="rgb(252,25,45)"/><text x="70.6999%" y="623.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (8 samples, 0.16%)</title><rect x="70.6953%" y="597" width="0.1636%" height="15" fill="rgb(251,164,9)"/><text x="70.9453%" y="607.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="70.8589%" y="613" width="0.1431%" height="15" fill="rgb(233,194,0)"/><text x="71.1089%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.18%)</title><rect x="71.0225%" y="613" width="0.1840%" height="15" fill="rgb(249,111,24)"/><text x="71.2725%" y="623.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.16%)</title><rect x="71.0429%" y="597" width="0.1636%" height="15" fill="rgb(250,223,3)"/><text x="71.2929%" y="607.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="71.1043%" y="581" width="0.1022%" height="15" fill="rgb(236,178,37)"/><text x="71.3543%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 0.92%)</title><rect x="70.3681%" y="629" width="0.9202%" height="15" fill="rgb(241,158,50)"/><text x="70.6181%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="71.4110%" y="581" width="0.1636%" height="15" fill="rgb(213,121,41)"/><text x="71.6610%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="71.4110%" y="565" width="0.1636%" height="15" fill="rgb(240,92,3)"/><text x="71.6610%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="71.4519%" y="549" width="0.1227%" height="15" fill="rgb(205,123,3)"/><text x="71.7019%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="71.4519%" y="533" width="0.1227%" height="15" fill="rgb(205,97,47)"/><text x="71.7019%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="71.4519%" y="517" width="0.1227%" height="15" fill="rgb(247,152,14)"/><text x="71.7019%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="71.4519%" y="501" width="0.1227%" height="15" fill="rgb(248,195,53)"/><text x="71.7019%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="71.4519%" y="485" width="0.1227%" height="15" fill="rgb(226,201,16)"/><text x="71.7019%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="71.4519%" y="469" width="0.1227%" height="15" fill="rgb(205,98,0)"/><text x="71.7019%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.12%)</title><rect x="71.4519%" y="453" width="0.1227%" height="15" fill="rgb(214,191,48)"/><text x="71.7019%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.12%)</title><rect x="71.4519%" y="437" width="0.1227%" height="15" fill="rgb(237,112,39)"/><text x="71.7019%" y="447.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.12%)</title><rect x="71.4519%" y="421" width="0.1227%" height="15" fill="rgb(247,203,27)"/><text x="71.7019%" y="431.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="71.4519%" y="405" width="0.1227%" height="15" fill="rgb(235,124,28)"/><text x="71.7019%" y="415.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="71.4724%" y="389" width="0.1022%" height="15" fill="rgb(208,207,46)"/><text x="71.7224%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.25%)</title><rect x="71.4110%" y="597" width="0.2454%" height="15" fill="rgb(234,176,4)"/><text x="71.6610%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (19 samples, 0.39%)</title><rect x="71.6564%" y="597" width="0.3885%" height="15" fill="rgb(230,133,28)"/><text x="71.9064%" y="607.50"></text></g><g><title>crypto::sha3::keccak_f (16 samples, 0.33%)</title><rect x="71.7178%" y="581" width="0.3272%" height="15" fill="rgb(211,137,40)"/><text x="71.9678%" y="591.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (25 samples, 0.51%)</title><rect x="72.2495%" y="565" width="0.5112%" height="15" fill="rgb(254,35,13)"/><text x="72.4995%" y="575.50"></text></g><g><title>crypto::sha3::keccak_f (23 samples, 0.47%)</title><rect x="72.2904%" y="549" width="0.4703%" height="15" fill="rgb(225,49,51)"/><text x="72.5404%" y="559.50"></text></g><g><title>crypto::digest::Digest::result_str (27 samples, 0.55%)</title><rect x="72.2495%" y="597" width="0.5521%" height="15" fill="rgb(251,10,15)"/><text x="72.4995%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (27 samples, 0.55%)</title><rect x="72.2495%" y="581" width="0.5521%" height="15" fill="rgb(228,207,15)"/><text x="72.4995%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (79 samples, 1.62%)</title><rect x="71.3701%" y="613" width="1.6155%" height="15" fill="rgb(241,99,19)"/><text x="71.6201%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (9 samples, 0.18%)</title><rect x="72.8016%" y="597" width="0.1840%" height="15" fill="rgb(207,104,49)"/><text x="73.0516%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (7 samples, 0.14%)</title><rect x="72.8425%" y="581" width="0.1431%" height="15" fill="rgb(234,99,18)"/><text x="73.0925%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="72.8630%" y="565" width="0.1227%" height="15" fill="rgb(213,191,49)"/><text x="73.1130%" y="575.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="72.8834%" y="549" width="0.1022%" height="15" fill="rgb(210,226,19)"/><text x="73.1334%" y="559.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="72.8834%" y="533" width="0.1022%" height="15" fill="rgb(229,97,18)"/><text x="73.1334%" y="543.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (85 samples, 1.74%)</title><rect x="71.2883%" y="629" width="1.7382%" height="15" fill="rgb(211,167,15)"/><text x="71.5383%" y="639.50"></text></g><g><title>_int_free (7 samples, 0.14%)</title><rect x="73.6196%" y="581" width="0.1431%" height="15" fill="rgb(210,169,34)"/><text x="73.8696%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.29%)</title><rect x="73.5174%" y="597" width="0.2863%" height="15" fill="rgb(241,121,31)"/><text x="73.7674%" y="607.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.29%)</title><rect x="73.9059%" y="421" width="0.2863%" height="15" fill="rgb(232,40,11)"/><text x="74.1559%" y="431.50"></text></g><g><title>_int_malloc (12 samples, 0.25%)</title><rect x="73.9468%" y="405" width="0.2454%" height="15" fill="rgb(205,86,26)"/><text x="74.1968%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (22 samples, 0.45%)</title><rect x="73.8037%" y="597" width="0.4499%" height="15" fill="rgb(231,126,28)"/><text x="74.0537%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 0.45%)</title><rect x="73.8037%" y="581" width="0.4499%" height="15" fill="rgb(219,221,18)"/><text x="74.0537%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.43%)</title><rect x="73.8241%" y="565" width="0.4294%" height="15" fill="rgb(211,40,0)"/><text x="74.0741%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.43%)</title><rect x="73.8241%" y="549" width="0.4294%" height="15" fill="rgb(239,85,43)"/><text x="74.0741%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.35%)</title><rect x="73.9059%" y="533" width="0.3476%" height="15" fill="rgb(231,55,21)"/><text x="74.1559%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.35%)</title><rect x="73.9059%" y="517" width="0.3476%" height="15" fill="rgb(225,184,43)"/><text x="74.1559%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.35%)</title><rect x="73.9059%" y="501" width="0.3476%" height="15" fill="rgb(251,158,41)"/><text x="74.1559%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.35%)</title><rect x="73.9059%" y="485" width="0.3476%" height="15" fill="rgb(234,159,37)"/><text x="74.1559%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (17 samples, 0.35%)</title><rect x="73.9059%" y="469" width="0.3476%" height="15" fill="rgb(216,204,22)"/><text x="74.1559%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.35%)</title><rect x="73.9059%" y="453" width="0.3476%" height="15" fill="rgb(214,17,3)"/><text x="74.1559%" y="463.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.35%)</title><rect x="73.9059%" y="437" width="0.3476%" height="15" fill="rgb(212,111,17)"/><text x="74.1559%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.12%)</title><rect x="74.5399%" y="517" width="0.1227%" height="15" fill="rgb(221,157,24)"/><text x="74.7899%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.12%)</title><rect x="74.5399%" y="501" width="0.1227%" height="15" fill="rgb(252,16,13)"/><text x="74.7899%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.12%)</title><rect x="74.5399%" y="485" width="0.1227%" height="15" fill="rgb(221,62,2)"/><text x="74.7899%" y="495.50"></text></g><g><title>__GI___libc_malloc (87 samples, 1.78%)</title><rect x="74.7648%" y="405" width="1.7791%" height="15" fill="rgb(247,87,22)"/><text x="75.0148%" y="415.50">_..</text></g><g><title>_int_malloc (60 samples, 1.23%)</title><rect x="75.3170%" y="389" width="1.2270%" height="15" fill="rgb(215,73,9)"/><text x="75.5670%" y="399.50"></text></g><g><title>__rdl_alloc (6 samples, 0.12%)</title><rect x="76.5440%" y="405" width="0.1227%" height="15" fill="rgb(207,175,33)"/><text x="76.7940%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.12%)</title><rect x="76.5440%" y="389" width="0.1227%" height="15" fill="rgb(243,129,54)"/><text x="76.7940%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (109 samples, 2.23%)</title><rect x="74.4785%" y="581" width="2.2290%" height="15" fill="rgb(227,119,45)"/><text x="74.7285%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (108 samples, 2.21%)</title><rect x="74.4990%" y="565" width="2.2086%" height="15" fill="rgb(205,109,36)"/><text x="74.7490%" y="575.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (106 samples, 2.17%)</title><rect x="74.5399%" y="549" width="2.1677%" height="15" fill="rgb(205,6,39)"/><text x="74.7899%" y="559.50">a..</text></g><g><title>alloc::slice::hack::to_vec (106 samples, 2.17%)</title><rect x="74.5399%" y="533" width="2.1677%" height="15" fill="rgb(221,32,16)"/><text x="74.7899%" y="543.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (100 samples, 2.04%)</title><rect x="74.6626%" y="517" width="2.0450%" height="15" fill="rgb(228,144,50)"/><text x="74.9126%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (100 samples, 2.04%)</title><rect x="74.6626%" y="501" width="2.0450%" height="15" fill="rgb(229,201,53)"/><text x="74.9126%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (100 samples, 2.04%)</title><rect x="74.6626%" y="485" width="2.0450%" height="15" fill="rgb(249,153,27)"/><text x="74.9126%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (100 samples, 2.04%)</title><rect x="74.6626%" y="469" width="2.0450%" height="15" fill="rgb(227,106,25)"/><text x="74.9126%" y="479.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (100 samples, 2.04%)</title><rect x="74.6626%" y="453" width="2.0450%" height="15" fill="rgb(230,65,29)"/><text x="74.9126%" y="463.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 2.04%)</title><rect x="74.6626%" y="437" width="2.0450%" height="15" fill="rgb(221,57,46)"/><text x="74.9126%" y="447.50">a..</text></g><g><title>alloc::alloc::alloc (98 samples, 2.00%)</title><rect x="74.7035%" y="421" width="2.0041%" height="15" fill="rgb(229,161,17)"/><text x="74.9535%" y="431.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (121 samples, 2.47%)</title><rect x="74.3354%" y="597" width="2.4744%" height="15" fill="rgb(222,213,11)"/><text x="74.5854%" y="607.50">&lt;a..</text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="76.7076%" y="581" width="0.1022%" height="15" fill="rgb(235,35,13)"/><text x="76.9576%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.29%)</title><rect x="76.8098%" y="597" width="0.2863%" height="15" fill="rgb(233,158,34)"/><text x="77.0598%" y="607.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="76.8916%" y="581" width="0.2045%" height="15" fill="rgb(215,151,48)"/><text x="77.1416%" y="591.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (31 samples, 0.63%)</title><rect x="77.0961%" y="597" width="0.6339%" height="15" fill="rgb(229,84,14)"/><text x="77.3461%" y="607.50"></text></g><g><title>crypto::sha3::keccak_f (27 samples, 0.55%)</title><rect x="77.1779%" y="581" width="0.5521%" height="15" fill="rgb(229,68,14)"/><text x="77.4279%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="77.7914%" y="501" width="0.1022%" height="15" fill="rgb(243,106,26)"/><text x="78.0414%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.10%)</title><rect x="77.7914%" y="485" width="0.1022%" height="15" fill="rgb(206,45,38)"/><text x="78.0414%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.10%)</title><rect x="77.7914%" y="469" width="0.1022%" height="15" fill="rgb(226,6,15)"/><text x="78.0414%" y="479.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="77.8937%" y="389" width="0.2045%" height="15" fill="rgb(232,22,54)"/><text x="78.1437%" y="399.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="77.9346%" y="373" width="0.1636%" height="15" fill="rgb(229,222,32)"/><text x="78.1846%" y="383.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::clone::Clone&gt;::clone (19 samples, 0.39%)</title><rect x="77.7301%" y="597" width="0.3885%" height="15" fill="rgb(228,62,29)"/><text x="77.9801%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.39%)</title><rect x="77.7301%" y="581" width="0.3885%" height="15" fill="rgb(251,103,34)"/><text x="77.9801%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.37%)</title><rect x="77.7505%" y="565" width="0.3681%" height="15" fill="rgb(233,12,30)"/><text x="78.0005%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.35%)</title><rect x="77.7710%" y="549" width="0.3476%" height="15" fill="rgb(238,52,0)"/><text x="78.0210%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.33%)</title><rect x="77.7914%" y="533" width="0.3272%" height="15" fill="rgb(223,98,5)"/><text x="78.0414%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.33%)</title><rect x="77.7914%" y="517" width="0.3272%" height="15" fill="rgb(228,75,37)"/><text x="78.0414%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="77.8937%" y="501" width="0.2249%" height="15" fill="rgb(205,115,49)"/><text x="78.1437%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="77.8937%" y="485" width="0.2249%" height="15" fill="rgb(250,154,43)"/><text x="78.1437%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.22%)</title><rect x="77.8937%" y="469" width="0.2249%" height="15" fill="rgb(226,43,29)"/><text x="78.1437%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.22%)</title><rect x="77.8937%" y="453" width="0.2249%" height="15" fill="rgb(249,228,39)"/><text x="78.1437%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (11 samples, 0.22%)</title><rect x="77.8937%" y="437" width="0.2249%" height="15" fill="rgb(216,79,43)"/><text x="78.1437%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.22%)</title><rect x="77.8937%" y="421" width="0.2249%" height="15" fill="rgb(228,95,12)"/><text x="78.1437%" y="431.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.22%)</title><rect x="77.8937%" y="405" width="0.2249%" height="15" fill="rgb(249,221,15)"/><text x="78.1437%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.14%)</title><rect x="78.1186%" y="597" width="0.1431%" height="15" fill="rgb(233,34,13)"/><text x="78.3686%" y="607.50"></text></g><g><title>__GI___libc_free (9 samples, 0.18%)</title><rect x="78.2618%" y="597" width="0.1840%" height="15" fill="rgb(214,103,39)"/><text x="78.5118%" y="607.50"></text></g><g><title>_int_free (26 samples, 0.53%)</title><rect x="78.4867%" y="597" width="0.5317%" height="15" fill="rgb(251,126,39)"/><text x="78.7367%" y="607.50"></text></g><g><title>malloc_consolidate (6 samples, 0.12%)</title><rect x="79.2843%" y="533" width="0.1227%" height="15" fill="rgb(214,216,36)"/><text x="79.5343%" y="543.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.39%)</title><rect x="79.0389%" y="581" width="0.3885%" height="15" fill="rgb(220,221,8)"/><text x="79.2889%" y="591.50"></text></g><g><title>_int_realloc (19 samples, 0.39%)</title><rect x="79.0389%" y="565" width="0.3885%" height="15" fill="rgb(240,216,3)"/><text x="79.2889%" y="575.50"></text></g><g><title>_int_malloc (15 samples, 0.31%)</title><rect x="79.1207%" y="549" width="0.3067%" height="15" fill="rgb(232,218,17)"/><text x="79.3707%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.45%)</title><rect x="79.0184%" y="597" width="0.4499%" height="15" fill="rgb(229,163,45)"/><text x="79.2684%" y="607.50"></text></g><g><title>alloc::slice::merge_sort (10 samples, 0.20%)</title><rect x="79.4683%" y="597" width="0.2045%" height="15" fill="rgb(231,110,42)"/><text x="79.7183%" y="607.50"></text></g><g><title>alloc::slice::insert_head (9 samples, 0.18%)</title><rect x="79.4888%" y="581" width="0.1840%" height="15" fill="rgb(208,170,48)"/><text x="79.7388%" y="591.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="79.6728%" y="597" width="0.1840%" height="15" fill="rgb(239,116,25)"/><text x="79.9228%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (7 samples, 0.14%)</title><rect x="79.7137%" y="581" width="0.1431%" height="15" fill="rgb(219,200,50)"/><text x="79.9637%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (7 samples, 0.14%)</title><rect x="79.7137%" y="565" width="0.1431%" height="15" fill="rgb(245,200,0)"/><text x="79.9637%" y="575.50"></text></g><g><title>__GI___libc_free (9 samples, 0.18%)</title><rect x="80.0204%" y="581" width="0.1840%" height="15" fill="rgb(245,119,33)"/><text x="80.2704%" y="591.50"></text></g><g><title>_int_free (37 samples, 0.76%)</title><rect x="80.3067%" y="581" width="0.7566%" height="15" fill="rgb(231,125,12)"/><text x="80.5567%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (60 samples, 1.23%)</title><rect x="79.8569%" y="597" width="1.2270%" height="15" fill="rgb(216,96,41)"/><text x="80.1069%" y="607.50"></text></g><g><title>&lt;[u8] as rustc_serialize::hex::ToHex&gt;::to_hex (7 samples, 0.14%)</title><rect x="81.0838%" y="581" width="0.1431%" height="15" fill="rgb(248,43,45)"/><text x="81.3338%" y="591.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (37 samples, 0.76%)</title><rect x="81.2474%" y="581" width="0.7566%" height="15" fill="rgb(217,222,7)"/><text x="81.4974%" y="591.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (32 samples, 0.65%)</title><rect x="81.3497%" y="565" width="0.6544%" height="15" fill="rgb(233,28,6)"/><text x="81.5997%" y="575.50"></text></g><g><title>crypto::sha3::keccak_f (28 samples, 0.57%)</title><rect x="81.4315%" y="549" width="0.5726%" height="15" fill="rgb(231,218,15)"/><text x="81.6815%" y="559.50"></text></g><g><title>crypto::digest::Digest::result_str (46 samples, 0.94%)</title><rect x="81.0838%" y="597" width="0.9407%" height="15" fill="rgb(226,171,48)"/><text x="81.3338%" y="607.50"></text></g><g><title>decor_mem::ghosts_map::answer_rows (6 samples, 0.12%)</title><rect x="82.0245%" y="597" width="0.1227%" height="15" fill="rgb(235,201,9)"/><text x="82.2745%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="82.3108%" y="565" width="0.1227%" height="15" fill="rgb(217,80,15)"/><text x="82.5608%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.31%)</title><rect x="82.1677%" y="581" width="0.3067%" height="15" fill="rgb(219,152,8)"/><text x="82.4177%" y="591.50"></text></g><g><title>decor_mem::graph::EntityGraph::get_children_of_parent (23 samples, 0.47%)</title><rect x="82.1472%" y="597" width="0.4703%" height="15" fill="rgb(243,107,38)"/><text x="82.3972%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="82.5153%" y="581" width="0.1022%" height="15" fill="rgb(231,17,5)"/><text x="82.7653%" y="591.50"></text></g><g><title>decor_mem::helpers::get_ghosted_col_indices_of (7 samples, 0.14%)</title><rect x="82.6176%" y="597" width="0.1431%" height="15" fill="rgb(209,25,54)"/><text x="82.8676%" y="607.50"></text></g><g><title>decor_mem::helpers::get_sensitive_col_indices_of (9 samples, 0.18%)</title><rect x="82.7607%" y="597" width="0.1840%" height="15" fill="rgb(219,0,2)"/><text x="83.0107%" y="607.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="83.4356%" y="581" width="0.1022%" height="15" fill="rgb(246,9,5)"/><text x="83.6856%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.10%)</title><rect x="83.5378%" y="581" width="0.1022%" height="15" fill="rgb(226,159,4)"/><text x="83.7878%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.27%)</title><rect x="83.7423%" y="581" width="0.2658%" height="15" fill="rgb(219,175,34)"/><text x="83.9923%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="83.8855%" y="565" width="0.1227%" height="15" fill="rgb(236,10,46)"/><text x="84.1355%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (5 samples, 0.10%)</title><rect x="84.0082%" y="581" width="0.1022%" height="15" fill="rgb(240,211,16)"/><text x="84.2582%" y="591.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (5 samples, 0.10%)</title><rect x="84.1309%" y="565" width="0.1022%" height="15" fill="rgb(205,3,43)"/><text x="84.3809%" y="575.50"></text></g><g><title>std::time::Instant::duration_since (5 samples, 0.10%)</title><rect x="84.1309%" y="549" width="0.1022%" height="15" fill="rgb(245,7,22)"/><text x="84.3809%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (5 samples, 0.10%)</title><rect x="84.1309%" y="533" width="0.1022%" height="15" fill="rgb(239,132,32)"/><text x="84.3809%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (5 samples, 0.10%)</title><rect x="84.1309%" y="517" width="0.1022%" height="15" fill="rgb(228,202,34)"/><text x="84.3809%" y="527.50"></text></g><g><title>std::time::Instant::elapsed (15 samples, 0.31%)</title><rect x="84.1104%" y="581" width="0.3067%" height="15" fill="rgb(254,200,22)"/><text x="84.3604%" y="591.50"></text></g><g><title>std::time::Instant::now (9 samples, 0.18%)</title><rect x="84.2331%" y="565" width="0.1840%" height="15" fill="rgb(219,10,39)"/><text x="84.4831%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (9 samples, 0.18%)</title><rect x="84.2331%" y="549" width="0.1840%" height="15" fill="rgb(226,210,39)"/><text x="84.4831%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (9 samples, 0.18%)</title><rect x="84.2331%" y="533" width="0.1840%" height="15" fill="rgb(208,219,16)"/><text x="84.4831%" y="543.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (72 samples, 1.47%)</title><rect x="83.0470%" y="597" width="1.4724%" height="15" fill="rgb(216,158,51)"/><text x="83.2970%" y="607.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.10%)</title><rect x="84.4172%" y="581" width="0.1022%" height="15" fill="rgb(233,14,44)"/><text x="84.6672%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (5 samples, 0.10%)</title><rect x="84.4172%" y="565" width="0.1022%" height="15" fill="rgb(237,97,39)"/><text x="84.6672%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::now (5 samples, 0.10%)</title><rect x="84.4172%" y="549" width="0.1022%" height="15" fill="rgb(218,198,43)"/><text x="84.6672%" y="559.50"></text></g><g><title>__clock_gettime_2 (5 samples, 0.10%)</title><rect x="84.4172%" y="533" width="0.1022%" height="15" fill="rgb(231,104,20)"/><text x="84.6672%" y="543.50"></text></g><g><title>__vdso_clock_gettime (5 samples, 0.10%)</title><rect x="84.4172%" y="517" width="0.1022%" height="15" fill="rgb(254,36,13)"/><text x="84.6672%" y="527.50"></text></g><g><title>decor_mem::views::Views::get_view (6 samples, 0.12%)</title><rect x="84.5194%" y="597" width="0.1227%" height="15" fill="rgb(248,14,50)"/><text x="84.7694%" y="607.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.29%)</title><rect x="84.7853%" y="405" width="0.2863%" height="15" fill="rgb(217,107,29)"/><text x="85.0353%" y="415.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="84.9080%" y="389" width="0.1636%" height="15" fill="rgb(251,169,33)"/><text x="85.1580%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.41%)</title><rect x="84.7035%" y="581" width="0.4090%" height="15" fill="rgb(217,108,32)"/><text x="84.9535%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 0.41%)</title><rect x="84.7035%" y="565" width="0.4090%" height="15" fill="rgb(219,66,42)"/><text x="84.9535%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.41%)</title><rect x="84.7035%" y="549" width="0.4090%" height="15" fill="rgb(206,180,7)"/><text x="84.9535%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.41%)</title><rect x="84.7035%" y="533" width="0.4090%" height="15" fill="rgb(208,226,31)"/><text x="84.9535%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 0.37%)</title><rect x="84.7444%" y="517" width="0.3681%" height="15" fill="rgb(218,26,49)"/><text x="84.9944%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (18 samples, 0.37%)</title><rect x="84.7444%" y="501" width="0.3681%" height="15" fill="rgb(233,197,48)"/><text x="84.9944%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.37%)</title><rect x="84.7444%" y="485" width="0.3681%" height="15" fill="rgb(252,181,51)"/><text x="84.9944%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.37%)</title><rect x="84.7444%" y="469" width="0.3681%" height="15" fill="rgb(253,90,19)"/><text x="84.9944%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (18 samples, 0.37%)</title><rect x="84.7444%" y="453" width="0.3681%" height="15" fill="rgb(215,171,30)"/><text x="84.9944%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.37%)</title><rect x="84.7444%" y="437" width="0.3681%" height="15" fill="rgb(214,222,9)"/><text x="84.9944%" y="447.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.37%)</title><rect x="84.7444%" y="421" width="0.3681%" height="15" fill="rgb(223,3,22)"/><text x="84.9944%" y="431.50"></text></g><g><title>decor_mem::views::Views::get_view_columns (29 samples, 0.59%)</title><rect x="84.6421%" y="597" width="0.5930%" height="15" fill="rgb(225,196,46)"/><text x="84.8921%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="85.5010%" y="581" width="0.2249%" height="15" fill="rgb(209,110,37)"/><text x="85.7510%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="85.5010%" y="565" width="0.2249%" height="15" fill="rgb(249,89,12)"/><text x="85.7510%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 0.22%)</title><rect x="85.5010%" y="549" width="0.2249%" height="15" fill="rgb(226,27,33)"/><text x="85.7510%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.22%)</title><rect x="85.5010%" y="533" width="0.2249%" height="15" fill="rgb(213,82,22)"/><text x="85.7510%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.18%)</title><rect x="85.5419%" y="517" width="0.1840%" height="15" fill="rgb(248,140,0)"/><text x="85.7919%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (9 samples, 0.18%)</title><rect x="85.5419%" y="501" width="0.1840%" height="15" fill="rgb(228,106,3)"/><text x="85.7919%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.18%)</title><rect x="85.5419%" y="485" width="0.1840%" height="15" fill="rgb(209,23,37)"/><text x="85.7919%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.18%)</title><rect x="85.5419%" y="469" width="0.1840%" height="15" fill="rgb(241,93,50)"/><text x="85.7919%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (9 samples, 0.18%)</title><rect x="85.5419%" y="453" width="0.1840%" height="15" fill="rgb(253,46,43)"/><text x="85.7919%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.18%)</title><rect x="85.5419%" y="437" width="0.1840%" height="15" fill="rgb(226,206,43)"/><text x="85.7919%" y="447.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.18%)</title><rect x="85.5419%" y="421" width="0.1840%" height="15" fill="rgb(217,54,7)"/><text x="85.7919%" y="431.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="85.5419%" y="405" width="0.1840%" height="15" fill="rgb(223,5,52)"/><text x="85.7919%" y="415.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="85.5419%" y="389" width="0.1840%" height="15" fill="rgb(206,52,46)"/><text x="85.7919%" y="399.50"></text></g><g><title>decor_mem::views::View::insert_row (5 samples, 0.10%)</title><rect x="85.9509%" y="581" width="0.1022%" height="15" fill="rgb(253,136,11)"/><text x="86.2009%" y="591.50"></text></g><g><title>decor_mem::views::Views::insert (41 samples, 0.84%)</title><rect x="85.2352%" y="597" width="0.8384%" height="15" fill="rgb(208,106,33)"/><text x="85.4852%" y="607.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (8 samples, 0.16%)</title><rect x="86.1145%" y="581" width="0.1636%" height="15" fill="rgb(206,54,4)"/><text x="86.3645%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="86.1350%" y="565" width="0.1431%" height="15" fill="rgb(213,3,15)"/><text x="86.3850%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (12 samples, 0.25%)</title><rect x="86.0736%" y="597" width="0.2454%" height="15" fill="rgb(252,211,39)"/><text x="86.3236%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.22%)</title><rect x="86.4826%" y="565" width="0.2249%" height="15" fill="rgb(223,6,36)"/><text x="86.7326%" y="575.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (13 samples, 0.27%)</title><rect x="86.4622%" y="581" width="0.2658%" height="15" fill="rgb(252,169,45)"/><text x="86.7122%" y="591.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (6 samples, 0.12%)</title><rect x="86.9325%" y="549" width="0.1227%" height="15" fill="rgb(212,48,26)"/><text x="87.1825%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="87.1166%" y="549" width="0.1022%" height="15" fill="rgb(251,102,48)"/><text x="87.3666%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (43 samples, 0.88%)</title><rect x="86.3804%" y="597" width="0.8793%" height="15" fill="rgb(243,208,16)"/><text x="86.6304%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (19 samples, 0.39%)</title><rect x="86.8712%" y="581" width="0.3885%" height="15" fill="rgb(219,96,24)"/><text x="87.1212%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (17 samples, 0.35%)</title><rect x="86.9121%" y="565" width="0.3476%" height="15" fill="rgb(219,33,29)"/><text x="87.1621%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (13 samples, 0.27%)</title><rect x="87.2597%" y="597" width="0.2658%" height="15" fill="rgb(223,176,5)"/><text x="87.5097%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (10 samples, 0.20%)</title><rect x="87.3211%" y="581" width="0.2045%" height="15" fill="rgb(228,140,14)"/><text x="87.5711%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="87.4029%" y="565" width="0.1227%" height="15" fill="rgb(217,179,31)"/><text x="87.6529%" y="575.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="87.4029%" y="549" width="0.1227%" height="15" fill="rgb(230,9,30)"/><text x="87.6529%" y="559.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="87.4029%" y="533" width="0.1227%" height="15" fill="rgb(230,136,20)"/><text x="87.6529%" y="543.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="87.4233%" y="517" width="0.1022%" height="15" fill="rgb(215,210,22)"/><text x="87.6733%" y="527.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (709 samples, 14.50%)</title><rect x="73.0675%" y="613" width="14.4990%" height="15" fill="rgb(218,43,5)"/><text x="73.3175%" y="623.50">decor_mem::query_trans..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (715 samples, 14.62%)</title><rect x="73.0266%" y="629" width="14.6217%" height="15" fill="rgb(216,11,5)"/><text x="73.2766%" y="639.50">&lt;decor_mem::Shim as ms..</text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="87.9141%" y="517" width="0.1022%" height="15" fill="rgb(209,82,29)"/><text x="88.1641%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.29%)</title><rect x="87.8119%" y="565" width="0.2863%" height="15" fill="rgb(244,115,12)"/><text x="88.0619%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.29%)</title><rect x="87.8119%" y="549" width="0.2863%" height="15" fill="rgb(222,82,18)"/><text x="88.0619%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.29%)</title><rect x="87.8119%" y="533" width="0.2863%" height="15" fill="rgb(249,227,8)"/><text x="88.0619%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.33%)</title><rect x="87.8119%" y="597" width="0.3272%" height="15" fill="rgb(253,141,45)"/><text x="88.0619%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.33%)</title><rect x="87.8119%" y="581" width="0.3272%" height="15" fill="rgb(234,184,4)"/><text x="88.0619%" y="591.50"></text></g><g><title>do_syscall_64 (8 samples, 0.16%)</title><rect x="88.2413%" y="501" width="0.1636%" height="15" fill="rgb(218,194,23)"/><text x="88.4913%" y="511.50"></text></g><g><title>ksys_write (8 samples, 0.16%)</title><rect x="88.2413%" y="485" width="0.1636%" height="15" fill="rgb(235,66,41)"/><text x="88.4913%" y="495.50"></text></g><g><title>vfs_write (7 samples, 0.14%)</title><rect x="88.2618%" y="469" width="0.1431%" height="15" fill="rgb(245,217,1)"/><text x="88.5118%" y="479.50"></text></g><g><title>new_sync_write (7 samples, 0.14%)</title><rect x="88.2618%" y="453" width="0.1431%" height="15" fill="rgb(229,91,1)"/><text x="88.5118%" y="463.50"></text></g><g><title>ext4_buffered_write_iter (7 samples, 0.14%)</title><rect x="88.2618%" y="437" width="0.1431%" height="15" fill="rgb(207,101,30)"/><text x="88.5118%" y="447.50"></text></g><g><title>generic_perform_write (7 samples, 0.14%)</title><rect x="88.2618%" y="421" width="0.1431%" height="15" fill="rgb(223,82,49)"/><text x="88.5118%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (13 samples, 0.27%)</title><rect x="88.1800%" y="517" width="0.2658%" height="15" fill="rgb(218,167,17)"/><text x="88.4300%" y="527.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (16 samples, 0.33%)</title><rect x="88.1595%" y="581" width="0.3272%" height="15" fill="rgb(208,103,14)"/><text x="88.4095%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::write (16 samples, 0.33%)</title><rect x="88.1595%" y="565" width="0.3272%" height="15" fill="rgb(238,20,8)"/><text x="88.4095%" y="575.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (16 samples, 0.33%)</title><rect x="88.1595%" y="549" width="0.3272%" height="15" fill="rgb(218,80,54)"/><text x="88.4095%" y="559.50"></text></g><g><title>__libc_write (16 samples, 0.33%)</title><rect x="88.1595%" y="533" width="0.3272%" height="15" fill="rgb(240,144,17)"/><text x="88.4095%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (36 samples, 0.74%)</title><rect x="87.7914%" y="629" width="0.7362%" height="15" fill="rgb(245,27,50)"/><text x="88.0414%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (36 samples, 0.74%)</title><rect x="87.7914%" y="613" width="0.7362%" height="15" fill="rgb(251,51,7)"/><text x="88.0414%" y="623.50"></text></g><g><title>decor_mem::stats::print_stats (19 samples, 0.39%)</title><rect x="88.1391%" y="597" width="0.3885%" height="15" fill="rgb(245,217,29)"/><text x="88.3891%" y="607.50"></text></g><g><title>core::str::pattern::StrSearcher::new (5 samples, 0.10%)</title><rect x="88.6503%" y="629" width="0.1022%" height="15" fill="rgb(221,176,29)"/><text x="88.9003%" y="639.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (5 samples, 0.10%)</title><rect x="88.6503%" y="613" width="0.1022%" height="15" fill="rgb(212,180,24)"/><text x="88.9003%" y="623.50"></text></g><g><title>__perf_event_task_sched_out (5 samples, 0.10%)</title><rect x="89.1820%" y="341" width="0.1022%" height="15" fill="rgb(254,24,2)"/><text x="89.4320%" y="351.50"></text></g><g><title>dequeue_task_fair (5 samples, 0.10%)</title><rect x="89.2843%" y="341" width="0.1022%" height="15" fill="rgb(230,100,2)"/><text x="89.5343%" y="351.50"></text></g><g><title>sk_wait_data (33 samples, 0.67%)</title><rect x="88.9775%" y="421" width="0.6748%" height="15" fill="rgb(219,142,25)"/><text x="89.2275%" y="431.50"></text></g><g><title>wait_woken (26 samples, 0.53%)</title><rect x="89.1207%" y="405" width="0.5317%" height="15" fill="rgb(240,73,43)"/><text x="89.3707%" y="415.50"></text></g><g><title>schedule_timeout (26 samples, 0.53%)</title><rect x="89.1207%" y="389" width="0.5317%" height="15" fill="rgb(214,114,15)"/><text x="89.3707%" y="399.50"></text></g><g><title>schedule (26 samples, 0.53%)</title><rect x="89.1207%" y="373" width="0.5317%" height="15" fill="rgb(207,130,4)"/><text x="89.3707%" y="383.50"></text></g><g><title>__schedule (26 samples, 0.53%)</title><rect x="89.1207%" y="357" width="0.5317%" height="15" fill="rgb(221,25,40)"/><text x="89.3707%" y="367.50"></text></g><g><title>uclamp_rq_dec_id (5 samples, 0.10%)</title><rect x="89.5501%" y="341" width="0.1022%" height="15" fill="rgb(241,184,7)"/><text x="89.8001%" y="351.50"></text></g><g><title>inet_recvmsg (45 samples, 0.92%)</title><rect x="88.8548%" y="453" width="0.9202%" height="15" fill="rgb(235,159,4)"/><text x="89.1048%" y="463.50"></text></g><g><title>tcp_recvmsg (45 samples, 0.92%)</title><rect x="88.8548%" y="437" width="0.9202%" height="15" fill="rgb(214,87,48)"/><text x="89.1048%" y="447.50"></text></g><g><title>skb_copy_datagram_iter (6 samples, 0.12%)</title><rect x="89.6524%" y="421" width="0.1227%" height="15" fill="rgb(246,198,24)"/><text x="89.9024%" y="431.50"></text></g><g><title>__skb_datagram_iter (6 samples, 0.12%)</title><rect x="89.6524%" y="405" width="0.1227%" height="15" fill="rgb(209,66,40)"/><text x="89.9024%" y="415.50"></text></g><g><title>__x64_sys_recvfrom (48 samples, 0.98%)</title><rect x="88.8344%" y="485" width="0.9816%" height="15" fill="rgb(233,147,39)"/><text x="89.0844%" y="495.50"></text></g><g><title>__sys_recvfrom (48 samples, 0.98%)</title><rect x="88.8344%" y="469" width="0.9816%" height="15" fill="rgb(231,145,52)"/><text x="89.0844%" y="479.50"></text></g><g><title>do_syscall_64 (51 samples, 1.04%)</title><rect x="88.8139%" y="501" width="1.0429%" height="15" fill="rgb(206,20,26)"/><text x="89.0639%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (56 samples, 1.15%)</title><rect x="88.8139%" y="517" width="1.1452%" height="15" fill="rgb(238,220,4)"/><text x="89.0639%" y="527.50"></text></g><g><title>prepare_exit_to_usermode (5 samples, 0.10%)</title><rect x="89.8569%" y="501" width="0.1022%" height="15" fill="rgb(252,195,42)"/><text x="90.1069%" y="511.50"></text></g><g><title>__libc_recv (58 samples, 1.19%)</title><rect x="88.7935%" y="533" width="1.1861%" height="15" fill="rgb(209,10,6)"/><text x="89.0435%" y="543.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (60 samples, 1.23%)</title><rect x="88.7935%" y="597" width="1.2270%" height="15" fill="rgb(229,3,52)"/><text x="89.0435%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (60 samples, 1.23%)</title><rect x="88.7935%" y="581" width="1.2270%" height="15" fill="rgb(253,49,37)"/><text x="89.0435%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (60 samples, 1.23%)</title><rect x="88.7935%" y="565" width="1.2270%" height="15" fill="rgb(240,103,49)"/><text x="89.0435%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (60 samples, 1.23%)</title><rect x="88.7935%" y="549" width="1.2270%" height="15" fill="rgb(250,182,30)"/><text x="89.0435%" y="559.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (62 samples, 1.27%)</title><rect x="88.7935%" y="613" width="1.2679%" height="15" fill="rgb(248,8,30)"/><text x="89.0435%" y="623.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (69 samples, 1.41%)</title><rect x="88.7526%" y="629" width="1.4110%" height="15" fill="rgb(237,120,30)"/><text x="89.0026%" y="639.50"></text></g><g><title>dev_hard_start_xmit (5 samples, 0.10%)</title><rect x="90.5521%" y="341" width="0.1022%" height="15" fill="rgb(221,146,34)"/><text x="90.8021%" y="351.50"></text></g><g><title>loopback_xmit (5 samples, 0.10%)</title><rect x="90.5521%" y="325" width="0.1022%" height="15" fill="rgb(242,55,13)"/><text x="90.8021%" y="335.50"></text></g><g><title>__dev_queue_xmit (11 samples, 0.22%)</title><rect x="90.5112%" y="357" width="0.2249%" height="15" fill="rgb(242,112,31)"/><text x="90.7612%" y="367.50"></text></g><g><title>psi_task_change (9 samples, 0.18%)</title><rect x="91.3088%" y="53" width="0.1840%" height="15" fill="rgb(249,192,27)"/><text x="91.5588%" y="63.50"></text></g><g><title>psi_group_change (7 samples, 0.14%)</title><rect x="91.3497%" y="37" width="0.1431%" height="15" fill="rgb(208,204,44)"/><text x="91.5997%" y="47.50"></text></g><g><title>enqueue_task (11 samples, 0.22%)</title><rect x="91.3088%" y="69" width="0.2249%" height="15" fill="rgb(208,93,54)"/><text x="91.5588%" y="79.50"></text></g><g><title>enqueue_task_fair (11 samples, 0.22%)</title><rect x="91.5337%" y="69" width="0.2249%" height="15" fill="rgb(242,1,31)"/><text x="91.7837%" y="79.50"></text></g><g><title>enqueue_entity (9 samples, 0.18%)</title><rect x="91.5746%" y="53" width="0.1840%" height="15" fill="rgb(241,83,25)"/><text x="91.8246%" y="63.50"></text></g><g><title>update_load_avg (5 samples, 0.10%)</title><rect x="91.6564%" y="37" width="0.1022%" height="15" fill="rgb(205,169,50)"/><text x="91.9064%" y="47.50"></text></g><g><title>try_to_wake_up (24 samples, 0.49%)</title><rect x="91.3088%" y="85" width="0.4908%" height="15" fill="rgb(239,186,37)"/><text x="91.5588%" y="95.50"></text></g><g><title>sock_def_readable (25 samples, 0.51%)</title><rect x="91.3088%" y="133" width="0.5112%" height="15" fill="rgb(205,221,10)"/><text x="91.5588%" y="143.50"></text></g><g><title>__wake_up_common_lock (25 samples, 0.51%)</title><rect x="91.3088%" y="117" width="0.5112%" height="15" fill="rgb(218,196,15)"/><text x="91.5588%" y="127.50"></text></g><g><title>__wake_up_common (25 samples, 0.51%)</title><rect x="91.3088%" y="101" width="0.5112%" height="15" fill="rgb(218,196,35)"/><text x="91.5588%" y="111.50"></text></g><g><title>tcp_ack (12 samples, 0.25%)</title><rect x="91.8200%" y="133" width="0.2454%" height="15" fill="rgb(233,63,24)"/><text x="92.0700%" y="143.50"></text></g><g><title>tcp_v4_do_rcv (43 samples, 0.88%)</title><rect x="91.2474%" y="165" width="0.8793%" height="15" fill="rgb(225,8,4)"/><text x="91.4974%" y="175.50"></text></g><g><title>tcp_rcv_established (43 samples, 0.88%)</title><rect x="91.2474%" y="149" width="0.8793%" height="15" fill="rgb(234,105,35)"/><text x="91.4974%" y="159.50"></text></g><g><title>ip_local_deliver (54 samples, 1.10%)</title><rect x="91.0429%" y="229" width="1.1043%" height="15" fill="rgb(236,21,32)"/><text x="91.2929%" y="239.50"></text></g><g><title>ip_local_deliver_finish (54 samples, 1.10%)</title><rect x="91.0429%" y="213" width="1.1043%" height="15" fill="rgb(228,109,6)"/><text x="91.2929%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (54 samples, 1.10%)</title><rect x="91.0429%" y="197" width="1.1043%" height="15" fill="rgb(229,215,31)"/><text x="91.2929%" y="207.50"></text></g><g><title>tcp_v4_rcv (52 samples, 1.06%)</title><rect x="91.0838%" y="181" width="1.0634%" height="15" fill="rgb(221,52,54)"/><text x="91.3338%" y="191.50"></text></g><g><title>__netif_receive_skb_one_core (58 samples, 1.19%)</title><rect x="91.0020%" y="261" width="1.1861%" height="15" fill="rgb(252,129,43)"/><text x="91.2520%" y="271.50"></text></g><g><title>ip_rcv (56 samples, 1.15%)</title><rect x="91.0429%" y="245" width="1.1452%" height="15" fill="rgb(248,183,27)"/><text x="91.2929%" y="255.50"></text></g><g><title>do_softirq (70 samples, 1.43%)</title><rect x="90.7771%" y="341" width="1.4315%" height="15" fill="rgb(250,0,22)"/><text x="91.0271%" y="351.50"></text></g><g><title>do_softirq_own_stack (68 samples, 1.39%)</title><rect x="90.8180%" y="325" width="1.3906%" height="15" fill="rgb(213,166,10)"/><text x="91.0680%" y="335.50"></text></g><g><title>__do_softirq (68 samples, 1.39%)</title><rect x="90.8180%" y="309" width="1.3906%" height="15" fill="rgb(207,163,36)"/><text x="91.0680%" y="319.50"></text></g><g><title>net_rx_action (63 samples, 1.29%)</title><rect x="90.9202%" y="293" width="1.2883%" height="15" fill="rgb(208,122,22)"/><text x="91.1702%" y="303.50"></text></g><g><title>process_backlog (60 samples, 1.23%)</title><rect x="90.9816%" y="277" width="1.2270%" height="15" fill="rgb(207,104,49)"/><text x="91.2316%" y="287.50"></text></g><g><title>__local_bh_enable_ip (73 samples, 1.49%)</title><rect x="90.7362%" y="357" width="1.4928%" height="15" fill="rgb(248,211,50)"/><text x="90.9862%" y="367.50"></text></g><g><title>ip_finish_output2 (87 samples, 1.78%)</title><rect x="90.4703%" y="373" width="1.7791%" height="15" fill="rgb(217,13,45)"/><text x="90.7203%" y="383.50">i..</text></g><g><title>__ip_queue_xmit (93 samples, 1.90%)</title><rect x="90.4294%" y="405" width="1.9018%" height="15" fill="rgb(211,216,49)"/><text x="90.6794%" y="415.50">_..</text></g><g><title>ip_output (91 samples, 1.86%)</title><rect x="90.4703%" y="389" width="1.8609%" height="15" fill="rgb(221,58,53)"/><text x="90.7203%" y="399.50">i..</text></g><g><title>__tcp_transmit_skb (97 samples, 1.98%)</title><rect x="90.4294%" y="421" width="1.9836%" height="15" fill="rgb(220,112,41)"/><text x="90.6794%" y="431.50">_..</text></g><g><title>__tcp_push_pending_frames (104 samples, 2.13%)</title><rect x="90.3885%" y="453" width="2.1268%" height="15" fill="rgb(236,38,28)"/><text x="90.6385%" y="463.50">_..</text></g><g><title>tcp_write_xmit (103 samples, 2.11%)</title><rect x="90.4090%" y="437" width="2.1063%" height="15" fill="rgb(227,195,22)"/><text x="90.6590%" y="447.50">t..</text></g><g><title>__kmalloc_node_track_caller (5 samples, 0.10%)</title><rect x="92.5358%" y="421" width="0.1022%" height="15" fill="rgb(214,55,33)"/><text x="92.7858%" y="431.50"></text></g><g><title>sk_stream_alloc_skb (9 samples, 0.18%)</title><rect x="92.5358%" y="453" width="0.1840%" height="15" fill="rgb(248,80,13)"/><text x="92.7858%" y="463.50"></text></g><g><title>__alloc_skb (9 samples, 0.18%)</title><rect x="92.5358%" y="437" width="0.1840%" height="15" fill="rgb(238,52,6)"/><text x="92.7858%" y="447.50"></text></g><g><title>sock_sendmsg (126 samples, 2.58%)</title><rect x="90.2454%" y="501" width="2.5767%" height="15" fill="rgb(224,198,47)"/><text x="90.4954%" y="511.50">so..</text></g><g><title>tcp_sendmsg (126 samples, 2.58%)</title><rect x="90.2454%" y="485" width="2.5767%" height="15" fill="rgb(233,171,20)"/><text x="90.4954%" y="495.50">tc..</text></g><g><title>tcp_sendmsg_locked (122 samples, 2.49%)</title><rect x="90.3272%" y="469" width="2.4949%" height="15" fill="rgb(241,30,25)"/><text x="90.5772%" y="479.50">tc..</text></g><g><title>__x64_sys_sendto (133 samples, 2.72%)</title><rect x="90.2045%" y="533" width="2.7198%" height="15" fill="rgb(207,171,38)"/><text x="90.4545%" y="543.50">__..</text></g><g><title>__sys_sendto (133 samples, 2.72%)</title><rect x="90.2045%" y="517" width="2.7198%" height="15" fill="rgb(234,70,1)"/><text x="90.4545%" y="527.50">__..</text></g><g><title>sockfd_lookup_light (5 samples, 0.10%)</title><rect x="92.8221%" y="501" width="0.1022%" height="15" fill="rgb(232,178,18)"/><text x="93.0721%" y="511.50"></text></g><g><title>do_syscall_64 (136 samples, 2.78%)</title><rect x="90.2045%" y="549" width="2.7812%" height="15" fill="rgb(241,78,40)"/><text x="90.4545%" y="559.50">do..</text></g><g><title>entry_SYSCALL_64 (139 samples, 2.84%)</title><rect x="90.2045%" y="565" width="2.8425%" height="15" fill="rgb(222,35,25)"/><text x="90.4545%" y="575.50">en..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (141 samples, 2.88%)</title><rect x="90.1840%" y="613" width="2.8834%" height="15" fill="rgb(207,92,16)"/><text x="90.4340%" y="623.50">&lt;s..</text></g><g><title>std::sys_common::net::TcpStream::write (141 samples, 2.88%)</title><rect x="90.1840%" y="597" width="2.8834%" height="15" fill="rgb(216,59,51)"/><text x="90.4340%" y="607.50">st..</text></g><g><title>__libc_send (141 samples, 2.88%)</title><rect x="90.1840%" y="581" width="2.8834%" height="15" fill="rgb(213,80,28)"/><text x="90.4340%" y="591.50">__..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (1,116 samples, 22.82%)</title><rect x="70.2658%" y="645" width="22.8221%" height="15" fill="rgb(220,93,7)"/><text x="70.5158%" y="655.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (143 samples, 2.92%)</title><rect x="90.1636%" y="629" width="2.9243%" height="15" fill="rgb(225,24,44)"/><text x="90.4136%" y="639.50">st..</text></g><g><title>decor_mem::Shim::run_on_tcp (1,117 samples, 22.84%)</title><rect x="70.2658%" y="677" width="22.8425%" height="15" fill="rgb(243,74,40)"/><text x="70.5158%" y="687.50">decor_mem::Shim::run_on_tcp</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,117 samples, 22.84%)</title><rect x="70.2658%" y="661" width="22.8425%" height="15" fill="rgb(228,39,7)"/><text x="70.5158%" y="671.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::..</text></g><g><title>__GI___clone (1,126 samples, 23.03%)</title><rect x="70.1022%" y="789" width="23.0266%" height="15" fill="rgb(227,79,8)"/><text x="70.3522%" y="799.50">__GI___clone</text></g><g><title>start_thread (1,126 samples, 23.03%)</title><rect x="70.1022%" y="773" width="23.0266%" height="15" fill="rgb(236,58,11)"/><text x="70.3522%" y="783.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,118 samples, 22.86%)</title><rect x="70.2658%" y="757" width="22.8630%" height="15" fill="rgb(249,63,35)"/><text x="70.5158%" y="767.50">std::sys::unix::thread::Thread::new:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,118 samples, 22.86%)</title><rect x="70.2658%" y="741" width="22.8630%" height="15" fill="rgb(252,114,16)"/><text x="70.5158%" y="751.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,118 samples, 22.86%)</title><rect x="70.2658%" y="725" width="22.8630%" height="15" fill="rgb(254,151,24)"/><text x="70.5158%" y="735.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,118 samples, 22.86%)</title><rect x="70.2658%" y="709" width="22.8630%" height="15" fill="rgb(253,54,39)"/><text x="70.5158%" y="719.50">core::ops::function::FnOnce::call_on..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,118 samples, 22.86%)</title><rect x="70.2658%" y="693" width="22.8630%" height="15" fill="rgb(243,25,45)"/><text x="70.5158%" y="703.50">std::sys_common::backtrace::__rust_b..</text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="93.1493%" y="789" width="0.1022%" height="15" fill="rgb(234,134,9)"/><text x="93.3993%" y="799.50"></text></g><g><title>__vdso_clock_gettime (6 samples, 0.12%)</title><rect x="93.3129%" y="789" width="0.1227%" height="15" fill="rgb(227,166,31)"/><text x="93.5629%" y="799.50"></text></g><g><title>cpu_stop_queue_work (234 samples, 4.79%)</title><rect x="93.7014%" y="405" width="4.7853%" height="15" fill="rgb(245,143,41)"/><text x="93.9514%" y="415.50">cpu_st..</text></g><g><title>preempt_schedule_thunk (234 samples, 4.79%)</title><rect x="93.7014%" y="389" width="4.7853%" height="15" fill="rgb(238,181,32)"/><text x="93.9514%" y="399.50">preemp..</text></g><g><title>preempt_schedule_common (234 samples, 4.79%)</title><rect x="93.7014%" y="373" width="4.7853%" height="15" fill="rgb(224,113,18)"/><text x="93.9514%" y="383.50">preemp..</text></g><g><title>__schedule (234 samples, 4.79%)</title><rect x="93.7014%" y="357" width="4.7853%" height="15" fill="rgb(240,229,28)"/><text x="93.9514%" y="367.50">__sche..</text></g><g><title>finish_task_switch (234 samples, 4.79%)</title><rect x="93.7014%" y="341" width="4.7853%" height="15" fill="rgb(250,185,3)"/><text x="93.9514%" y="351.50">finish..</text></g><g><title>__perf_event_task_sched_in (233 samples, 4.76%)</title><rect x="93.7219%" y="325" width="4.7648%" height="15" fill="rgb(212,59,25)"/><text x="93.9719%" y="335.50">__perf..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (232 samples, 4.74%)</title><rect x="93.7423%" y="309" width="4.7444%" height="15" fill="rgb(221,87,20)"/><text x="93.9923%" y="319.50">__inte..</text></g><g><title>native_write_msr (230 samples, 4.70%)</title><rect x="93.7832%" y="293" width="4.7035%" height="15" fill="rgb(213,74,28)"/><text x="94.0332%" y="303.50">nativ..</text></g><g><title>hwloc::Topology::new (236 samples, 4.83%)</title><rect x="93.6810%" y="613" width="4.8262%" height="15" fill="rgb(224,132,34)"/><text x="93.9310%" y="623.50">hwloc:..</text></g><g><title>hwloc_topology_load (236 samples, 4.83%)</title><rect x="93.6810%" y="597" width="4.8262%" height="15" fill="rgb(222,101,24)"/><text x="93.9310%" y="607.50">hwloc_..</text></g><g><title>[libhwloc.so.15.2.0] (236 samples, 4.83%)</title><rect x="93.6810%" y="581" width="4.8262%" height="15" fill="rgb(254,142,4)"/><text x="93.9310%" y="591.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (236 samples, 4.83%)</title><rect x="93.6810%" y="565" width="4.8262%" height="15" fill="rgb(230,229,49)"/><text x="93.9310%" y="575.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (236 samples, 4.83%)</title><rect x="93.6810%" y="549" width="4.8262%" height="15" fill="rgb(238,70,47)"/><text x="93.9310%" y="559.50">[libhw..</text></g><g><title>hwloc_linux_set_tid_cpubind (235 samples, 4.81%)</title><rect x="93.7014%" y="533" width="4.8057%" height="15" fill="rgb(231,160,17)"/><text x="93.9514%" y="543.50">hwloc_..</text></g><g><title>__GI___sched_setaffinity_new (235 samples, 4.81%)</title><rect x="93.7014%" y="517" width="4.8057%" height="15" fill="rgb(218,68,53)"/><text x="93.9514%" y="527.50">__GI__..</text></g><g><title>entry_SYSCALL_64 (235 samples, 4.81%)</title><rect x="93.7014%" y="501" width="4.8057%" height="15" fill="rgb(236,111,10)"/><text x="93.9514%" y="511.50">entry_..</text></g><g><title>do_syscall_64 (235 samples, 4.81%)</title><rect x="93.7014%" y="485" width="4.8057%" height="15" fill="rgb(224,34,41)"/><text x="93.9514%" y="495.50">do_sys..</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 4.81%)</title><rect x="93.7014%" y="469" width="4.8057%" height="15" fill="rgb(241,118,19)"/><text x="93.9514%" y="479.50">__x64_..</text></g><g><title>sched_setaffinity (235 samples, 4.81%)</title><rect x="93.7014%" y="453" width="4.8057%" height="15" fill="rgb(238,129,25)"/><text x="93.9514%" y="463.50">sched_..</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 4.81%)</title><rect x="93.7014%" y="437" width="4.8057%" height="15" fill="rgb(238,22,31)"/><text x="93.9514%" y="447.50">__set_..</text></g><g><title>stop_one_cpu (235 samples, 4.81%)</title><rect x="93.7014%" y="421" width="4.8057%" height="15" fill="rgb(222,174,48)"/><text x="93.9514%" y="431.50">stop_o..</text></g><g><title>alloc::fmt::format (6 samples, 0.12%)</title><rect x="98.6094%" y="597" width="0.1227%" height="15" fill="rgb(206,152,40)"/><text x="98.8594%" y="607.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (12 samples, 0.25%)</title><rect x="98.5276%" y="613" width="0.2454%" height="15" fill="rgb(218,99,54)"/><text x="98.7776%" y="623.50"></text></g><g><title>__libc_start_main (257 samples, 5.26%)</title><rect x="93.5378%" y="773" width="5.2556%" height="15" fill="rgb(220,174,26)"/><text x="93.7878%" y="783.50">__libc..</text></g><g><title>main (257 samples, 5.26%)</title><rect x="93.5378%" y="757" width="5.2556%" height="15" fill="rgb(245,116,9)"/><text x="93.7878%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (257 samples, 5.26%)</title><rect x="93.5378%" y="741" width="5.2556%" height="15" fill="rgb(209,72,35)"/><text x="93.7878%" y="751.50">std::r..</text></g><g><title>std::panic::catch_unwind (257 samples, 5.26%)</title><rect x="93.5378%" y="725" width="5.2556%" height="15" fill="rgb(226,126,21)"/><text x="93.7878%" y="735.50">std::p..</text></g><g><title>std::panicking::try (257 samples, 5.26%)</title><rect x="93.5378%" y="709" width="5.2556%" height="15" fill="rgb(227,192,1)"/><text x="93.7878%" y="719.50">std::p..</text></g><g><title>std::panicking::try::do_call (257 samples, 5.26%)</title><rect x="93.5378%" y="693" width="5.2556%" height="15" fill="rgb(237,180,29)"/><text x="93.7878%" y="703.50">std::p..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (257 samples, 5.26%)</title><rect x="93.5378%" y="677" width="5.2556%" height="15" fill="rgb(230,197,35)"/><text x="93.7878%" y="687.50">core::..</text></g><g><title>std::rt::lang_start::_{{closure}} (257 samples, 5.26%)</title><rect x="93.5378%" y="661" width="5.2556%" height="15" fill="rgb(246,193,31)"/><text x="93.7878%" y="671.50">std::r..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (257 samples, 5.26%)</title><rect x="93.5378%" y="645" width="5.2556%" height="15" fill="rgb(241,36,4)"/><text x="93.7878%" y="655.50">std::s..</text></g><g><title>lobsters_microbenchmarks::main (257 samples, 5.26%)</title><rect x="93.5378%" y="629" width="5.2556%" height="15" fill="rgb(241,130,17)"/><text x="93.7878%" y="639.50">lobste..</text></g><g><title>_start (258 samples, 5.28%)</title><rect x="93.5378%" y="789" width="5.2761%" height="15" fill="rgb(206,137,32)"/><text x="93.7878%" y="799.50">_start</text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="99.0389%" y="789" width="0.1227%" height="15" fill="rgb(237,228,51)"/><text x="99.2889%" y="799.50"></text></g><g><title>page_fault (24 samples, 0.49%)</title><rect x="99.3047%" y="789" width="0.4908%" height="15" fill="rgb(243,6,42)"/><text x="99.5547%" y="799.50"></text></g><g><title>lobsters-microb (4,884 samples, 99.88%)</title><rect x="0.0000%" y="805" width="99.8773%" height="15" fill="rgb(251,74,28)"/><text x="0.2500%" y="815.50">lobsters-microb</text></g><g><title>all (4,890 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(218,20,49)"/><text x="0.2500%" y="831.50"></text></g><g><title>perf (6 samples, 0.12%)</title><rect x="99.8773%" y="805" width="0.1227%" height="15" fill="rgb(238,28,14)"/><text x="100.1273%" y="815.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="99.8773%" y="789" width="0.1227%" height="15" fill="rgb(229,40,46)"/><text x="100.1273%" y="799.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="99.8773%" y="773" width="0.1227%" height="15" fill="rgb(244,195,20)"/><text x="100.1273%" y="783.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.12%)</title><rect x="99.8773%" y="757" width="0.1227%" height="15" fill="rgb(253,56,35)"/><text x="100.1273%" y="767.50"></text></g><g><title>do_execve (6 samples, 0.12%)</title><rect x="99.8773%" y="741" width="0.1227%" height="15" fill="rgb(210,149,44)"/><text x="100.1273%" y="751.50"></text></g><g><title>__do_execve_file (6 samples, 0.12%)</title><rect x="99.8773%" y="725" width="0.1227%" height="15" fill="rgb(240,135,12)"/><text x="100.1273%" y="735.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.12%)</title><rect x="99.8773%" y="709" width="0.1227%" height="15" fill="rgb(251,24,50)"/><text x="100.1273%" y="719.50"></text></g><g><title>load_elf_binary (6 samples, 0.12%)</title><rect x="99.8773%" y="693" width="0.1227%" height="15" fill="rgb(243,200,47)"/><text x="100.1273%" y="703.50"></text></g><g><title>setup_new_exec (6 samples, 0.12%)</title><rect x="99.8773%" y="677" width="0.1227%" height="15" fill="rgb(224,166,26)"/><text x="100.1273%" y="687.50"></text></g><g><title>perf_event_exec (6 samples, 0.12%)</title><rect x="99.8773%" y="661" width="0.1227%" height="15" fill="rgb(233,0,47)"/><text x="100.1273%" y="671.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.10%)</title><rect x="99.8978%" y="645" width="0.1022%" height="15" fill="rgb(253,80,5)"/><text x="100.1478%" y="655.50"></text></g><g><title>native_write_msr (5 samples, 0.10%)</title><rect x="99.8978%" y="629" width="0.1022%" height="15" fill="rgb(214,133,25)"/><text x="100.1478%" y="639.50"></text></g></svg></svg>