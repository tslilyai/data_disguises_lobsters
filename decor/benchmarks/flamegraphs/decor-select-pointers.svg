<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.39%)</title><rect x="0.1934%" y="773" width="0.3868%" height="15" fill="rgb(227,0,7)"/><text x="0.4434%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="0.5803%" y="773" width="0.2901%" height="15" fill="rgb(217,0,24)"/><text x="0.8303%" y="783.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.19%)</title><rect x="0.9671%" y="773" width="0.1934%" height="15" fill="rgb(221,193,54)"/><text x="1.2171%" y="783.50"></text></g><g><title>_int_free (6 samples, 0.58%)</title><rect x="1.4507%" y="773" width="0.5803%" height="15" fill="rgb(248,212,6)"/><text x="1.7007%" y="783.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.19%)</title><rect x="2.0309%" y="773" width="0.1934%" height="15" fill="rgb(208,68,35)"/><text x="2.2809%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (5 samples, 0.48%)</title><rect x="2.2244%" y="773" width="0.4836%" height="15" fill="rgb(232,128,0)"/><text x="2.4744%" y="783.50"></text></g><g><title>core::num::dec2flt::dec2flt (26 samples, 2.51%)</title><rect x="2.9981%" y="773" width="2.5145%" height="15" fill="rgb(207,160,47)"/><text x="3.2481%" y="783.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_decimal (9 samples, 0.87%)</title><rect x="5.5126%" y="773" width="0.8704%" height="15" fill="rgb(228,23,34)"/><text x="5.7626%" y="783.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (4 samples, 0.39%)</title><rect x="6.3830%" y="773" width="0.3868%" height="15" fill="rgb(218,30,26)"/><text x="6.6330%" y="783.50"></text></g><g><title>decor_mem::select::get_rptrs_matching_constraint (4 samples, 0.39%)</title><rect x="6.7698%" y="773" width="0.3868%" height="15" fill="rgb(220,122,19)"/><text x="7.0198%" y="783.50"></text></g><g><title>decor_mem::select::get_value_for_row_closure::{{closure}} (5 samples, 0.48%)</title><rect x="7.1567%" y="773" width="0.4836%" height="15" fill="rgb(250,228,42)"/><text x="7.4067%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.19%)</title><rect x="7.4468%" y="757" width="0.1934%" height="15" fill="rgb(240,193,28)"/><text x="7.6968%" y="767.50"></text></g><g><title>[anon] (83 samples, 8.03%)</title><rect x="0.1934%" y="789" width="8.0271%" height="15" fill="rgb(216,20,37)"/><text x="0.4434%" y="799.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.19%)</title><rect x="8.0271%" y="773" width="0.1934%" height="15" fill="rgb(206,188,39)"/><text x="8.2771%" y="783.50"></text></g><g><title>[lobsters-microbenchmarks] (3 samples, 0.29%)</title><rect x="8.3172%" y="789" width="0.2901%" height="15" fill="rgb(217,207,13)"/><text x="8.5672%" y="799.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="8.6074%" y="725" width="0.2901%" height="15" fill="rgb(231,73,38)"/><text x="8.8574%" y="735.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="8.6074%" y="709" width="0.2901%" height="15" fill="rgb(225,20,46)"/><text x="8.8574%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="8.6074%" y="693" width="0.2901%" height="15" fill="rgb(210,31,41)"/><text x="8.8574%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="8.6074%" y="677" width="0.2901%" height="15" fill="rgb(221,200,47)"/><text x="8.8574%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="8.6074%" y="661" width="0.2901%" height="15" fill="rgb(226,26,5)"/><text x="8.8574%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="8.6074%" y="645" width="0.2901%" height="15" fill="rgb(249,33,26)"/><text x="8.8574%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="8.6074%" y="629" width="0.2901%" height="15" fill="rgb(235,183,28)"/><text x="8.8574%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.29%)</title><rect x="8.6074%" y="613" width="0.2901%" height="15" fill="rgb(221,5,38)"/><text x="8.8574%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.29%)</title><rect x="8.6074%" y="597" width="0.2901%" height="15" fill="rgb(247,18,42)"/><text x="8.8574%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.29%)</title><rect x="8.6074%" y="581" width="0.2901%" height="15" fill="rgb(241,131,45)"/><text x="8.8574%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.29%)</title><rect x="8.6074%" y="565" width="0.2901%" height="15" fill="rgb(249,31,29)"/><text x="8.8574%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="8.6074%" y="549" width="0.2901%" height="15" fill="rgb(225,111,53)"/><text x="8.8574%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.29%)</title><rect x="8.6074%" y="533" width="0.2901%" height="15" fill="rgb(238,160,17)"/><text x="8.8574%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.29%)</title><rect x="8.6074%" y="517" width="0.2901%" height="15" fill="rgb(214,148,48)"/><text x="8.8574%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.29%)</title><rect x="8.6074%" y="501" width="0.2901%" height="15" fill="rgb(232,36,49)"/><text x="8.8574%" y="511.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.29%)</title><rect x="8.6074%" y="485" width="0.2901%" height="15" fill="rgb(209,103,24)"/><text x="8.8574%" y="495.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.29%)</title><rect x="8.6074%" y="469" width="0.2901%" height="15" fill="rgb(229,88,8)"/><text x="8.8574%" y="479.50"></text></g><g><title>_int_malloc (3 samples, 0.29%)</title><rect x="8.6074%" y="453" width="0.2901%" height="15" fill="rgb(213,181,19)"/><text x="8.8574%" y="463.50"></text></g><g><title>__schedule (3 samples, 0.29%)</title><rect x="9.3810%" y="373" width="0.2901%" height="15" fill="rgb(254,191,54)"/><text x="9.6310%" y="383.50"></text></g><g><title>sk_wait_data (8 samples, 0.77%)</title><rect x="8.9942%" y="437" width="0.7737%" height="15" fill="rgb(241,83,37)"/><text x="9.2442%" y="447.50"></text></g><g><title>wait_woken (6 samples, 0.58%)</title><rect x="9.1876%" y="421" width="0.5803%" height="15" fill="rgb(233,36,39)"/><text x="9.4376%" y="431.50"></text></g><g><title>schedule_timeout (6 samples, 0.58%)</title><rect x="9.1876%" y="405" width="0.5803%" height="15" fill="rgb(226,3,54)"/><text x="9.4376%" y="415.50"></text></g><g><title>schedule (4 samples, 0.39%)</title><rect x="9.3810%" y="389" width="0.3868%" height="15" fill="rgb(245,192,40)"/><text x="9.6310%" y="399.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.97%)</title><rect x="8.9942%" y="629" width="0.9671%" height="15" fill="rgb(238,167,29)"/><text x="9.2442%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (10 samples, 0.97%)</title><rect x="8.9942%" y="613" width="0.9671%" height="15" fill="rgb(232,182,51)"/><text x="9.2442%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (10 samples, 0.97%)</title><rect x="8.9942%" y="597" width="0.9671%" height="15" fill="rgb(231,60,39)"/><text x="9.2442%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (10 samples, 0.97%)</title><rect x="8.9942%" y="581" width="0.9671%" height="15" fill="rgb(208,69,12)"/><text x="9.2442%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (10 samples, 0.97%)</title><rect x="8.9942%" y="565" width="0.9671%" height="15" fill="rgb(235,93,37)"/><text x="9.2442%" y="575.50"></text></g><g><title>__libc_recv (10 samples, 0.97%)</title><rect x="8.9942%" y="549" width="0.9671%" height="15" fill="rgb(213,116,39)"/><text x="9.2442%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (10 samples, 0.97%)</title><rect x="8.9942%" y="533" width="0.9671%" height="15" fill="rgb(222,207,29)"/><text x="9.2442%" y="543.50"></text></g><g><title>do_syscall_64 (10 samples, 0.97%)</title><rect x="8.9942%" y="517" width="0.9671%" height="15" fill="rgb(206,96,30)"/><text x="9.2442%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (10 samples, 0.97%)</title><rect x="8.9942%" y="501" width="0.9671%" height="15" fill="rgb(218,138,4)"/><text x="9.2442%" y="511.50"></text></g><g><title>__sys_recvfrom (10 samples, 0.97%)</title><rect x="8.9942%" y="485" width="0.9671%" height="15" fill="rgb(250,191,14)"/><text x="9.2442%" y="495.50"></text></g><g><title>inet_recvmsg (10 samples, 0.97%)</title><rect x="8.9942%" y="469" width="0.9671%" height="15" fill="rgb(239,60,40)"/><text x="9.2442%" y="479.50"></text></g><g><title>tcp_recvmsg (10 samples, 0.97%)</title><rect x="8.9942%" y="453" width="0.9671%" height="15" fill="rgb(206,27,48)"/><text x="9.2442%" y="463.50"></text></g><g><title>skb_copy_datagram_iter (2 samples, 0.19%)</title><rect x="9.7679%" y="437" width="0.1934%" height="15" fill="rgb(225,35,8)"/><text x="10.0179%" y="447.50"></text></g><g><title>__skb_datagram_iter (2 samples, 0.19%)</title><rect x="9.7679%" y="421" width="0.1934%" height="15" fill="rgb(250,213,24)"/><text x="10.0179%" y="431.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (12 samples, 1.16%)</title><rect x="8.8975%" y="725" width="1.1605%" height="15" fill="rgb(247,123,22)"/><text x="9.1475%" y="735.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (12 samples, 1.16%)</title><rect x="8.8975%" y="709" width="1.1605%" height="15" fill="rgb(231,138,38)"/><text x="9.1475%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (12 samples, 1.16%)</title><rect x="8.8975%" y="693" width="1.1605%" height="15" fill="rgb(231,145,46)"/><text x="9.1475%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (12 samples, 1.16%)</title><rect x="8.8975%" y="677" width="1.1605%" height="15" fill="rgb(251,118,11)"/><text x="9.1475%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (12 samples, 1.16%)</title><rect x="8.8975%" y="661" width="1.1605%" height="15" fill="rgb(217,147,25)"/><text x="9.1475%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 1.16%)</title><rect x="8.8975%" y="645" width="1.1605%" height="15" fill="rgb(247,81,37)"/><text x="9.1475%" y="655.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (12 samples, 1.16%)</title><rect x="11.0251%" y="661" width="1.1605%" height="15" fill="rgb(209,12,38)"/><text x="11.2751%" y="671.50"></text></g><g><title>core::num::dec2flt::dec2flt (11 samples, 1.06%)</title><rect x="11.1219%" y="645" width="1.0638%" height="15" fill="rgb(227,1,9)"/><text x="11.3719%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.19%)</title><rect x="12.2824%" y="597" width="0.1934%" height="15" fill="rgb(248,47,43)"/><text x="12.5324%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2 samples, 0.19%)</title><rect x="12.2824%" y="581" width="0.1934%" height="15" fill="rgb(221,10,30)"/><text x="12.5324%" y="591.50"></text></g><g><title>decor_mem::select::expr_to_col (4 samples, 0.39%)</title><rect x="12.1857%" y="645" width="0.3868%" height="15" fill="rgb(210,229,1)"/><text x="12.4357%" y="655.50"></text></g><g><title>core::fmt::write (4 samples, 0.39%)</title><rect x="12.1857%" y="629" width="0.3868%" height="15" fill="rgb(222,148,37)"/><text x="12.4357%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (4 samples, 0.39%)</title><rect x="12.1857%" y="613" width="0.3868%" height="15" fill="rgb(234,67,33)"/><text x="12.4357%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (4 samples, 0.39%)</title><rect x="12.5725%" y="565" width="0.3868%" height="15" fill="rgb(247,98,35)"/><text x="12.8225%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.19%)</title><rect x="12.7660%" y="549" width="0.1934%" height="15" fill="rgb(247,138,52)"/><text x="13.0160%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.58%)</title><rect x="12.5725%" y="597" width="0.5803%" height="15" fill="rgb(213,79,30)"/><text x="12.8225%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.58%)</title><rect x="12.5725%" y="581" width="0.5803%" height="15" fill="rgb(246,177,23)"/><text x="12.8225%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.19%)</title><rect x="12.9594%" y="565" width="0.1934%" height="15" fill="rgb(230,62,27)"/><text x="13.2094%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.19%)</title><rect x="12.9594%" y="549" width="0.1934%" height="15" fill="rgb(216,154,8)"/><text x="13.2094%" y="559.50"></text></g><g><title>core::fmt::write (7 samples, 0.68%)</title><rect x="12.5725%" y="629" width="0.6770%" height="15" fill="rgb(244,35,45)"/><text x="12.8225%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (7 samples, 0.68%)</title><rect x="12.5725%" y="613" width="0.6770%" height="15" fill="rgb(251,115,12)"/><text x="12.8225%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.19%)</title><rect x="13.2495%" y="549" width="0.1934%" height="15" fill="rgb(240,54,50)"/><text x="13.4995%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.19%)</title><rect x="13.2495%" y="533" width="0.1934%" height="15" fill="rgb(233,84,52)"/><text x="13.4995%" y="543.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.19%)</title><rect x="13.2495%" y="517" width="0.1934%" height="15" fill="rgb(207,117,47)"/><text x="13.4995%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.19%)</title><rect x="13.2495%" y="501" width="0.1934%" height="15" fill="rgb(249,43,39)"/><text x="13.4995%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.19%)</title><rect x="13.2495%" y="485" width="0.1934%" height="15" fill="rgb(209,38,44)"/><text x="13.4995%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.19%)</title><rect x="13.2495%" y="469" width="0.1934%" height="15" fill="rgb(236,212,23)"/><text x="13.4995%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.19%)</title><rect x="13.2495%" y="453" width="0.1934%" height="15" fill="rgb(242,79,21)"/><text x="13.4995%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.19%)</title><rect x="13.2495%" y="437" width="0.1934%" height="15" fill="rgb(211,96,35)"/><text x="13.4995%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.19%)</title><rect x="13.2495%" y="421" width="0.1934%" height="15" fill="rgb(253,215,40)"/><text x="13.4995%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.19%)</title><rect x="13.2495%" y="405" width="0.1934%" height="15" fill="rgb(211,81,21)"/><text x="13.4995%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.19%)</title><rect x="13.2495%" y="389" width="0.1934%" height="15" fill="rgb(208,190,38)"/><text x="13.4995%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (2 samples, 0.19%)</title><rect x="13.2495%" y="373" width="0.1934%" height="15" fill="rgb(235,213,38)"/><text x="13.4995%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.19%)</title><rect x="13.2495%" y="357" width="0.1934%" height="15" fill="rgb(237,122,38)"/><text x="13.4995%" y="367.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.19%)</title><rect x="13.2495%" y="341" width="0.1934%" height="15" fill="rgb(244,218,35)"/><text x="13.4995%" y="351.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.19%)</title><rect x="13.2495%" y="325" width="0.1934%" height="15" fill="rgb(240,68,47)"/><text x="13.4995%" y="335.50"></text></g><g><title>decor_mem::select::get_rptrs_matching_constraint (14 samples, 1.35%)</title><rect x="12.1857%" y="661" width="1.3540%" height="15" fill="rgb(210,16,53)"/><text x="12.4357%" y="671.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (10 samples, 0.97%)</title><rect x="12.5725%" y="645" width="0.9671%" height="15" fill="rgb(235,124,12)"/><text x="12.8225%" y="655.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (3 samples, 0.29%)</title><rect x="13.2495%" y="629" width="0.2901%" height="15" fill="rgb(224,169,11)"/><text x="13.4995%" y="639.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.29%)</title><rect x="13.2495%" y="613" width="0.2901%" height="15" fill="rgb(250,166,2)"/><text x="13.4995%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.29%)</title><rect x="13.2495%" y="597" width="0.2901%" height="15" fill="rgb(242,216,29)"/><text x="13.4995%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.29%)</title><rect x="13.2495%" y="581" width="0.2901%" height="15" fill="rgb(230,116,27)"/><text x="13.4995%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (3 samples, 0.29%)</title><rect x="13.2495%" y="565" width="0.2901%" height="15" fill="rgb(228,99,48)"/><text x="13.4995%" y="575.50"></text></g><g><title>decor_mem::select::get_value_for_row_closure (2 samples, 0.19%)</title><rect x="13.5397%" y="661" width="0.1934%" height="15" fill="rgb(253,11,6)"/><text x="13.7897%" y="671.50"></text></g><g><title>_int_free (3 samples, 0.29%)</title><rect x="13.7331%" y="645" width="0.2901%" height="15" fill="rgb(247,143,39)"/><text x="13.9831%" y="655.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.29%)</title><rect x="14.2166%" y="629" width="0.2901%" height="15" fill="rgb(236,97,10)"/><text x="14.4666%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.19%)</title><rect x="14.9903%" y="581" width="0.1934%" height="15" fill="rgb(233,208,19)"/><text x="15.2403%" y="591.50"></text></g><g><title>core::fmt::write (7 samples, 0.68%)</title><rect x="14.6035%" y="629" width="0.6770%" height="15" fill="rgb(216,164,2)"/><text x="14.8535%" y="639.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (5 samples, 0.48%)</title><rect x="14.7969%" y="613" width="0.4836%" height="15" fill="rgb(220,129,5)"/><text x="15.0469%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (5 samples, 0.48%)</title><rect x="14.7969%" y="597" width="0.4836%" height="15" fill="rgb(242,17,10)"/><text x="15.0469%" y="607.50"></text></g><g><title>core::num::dec2flt::extract_sign (2 samples, 0.19%)</title><rect x="16.2476%" y="613" width="0.1934%" height="15" fill="rgb(242,107,0)"/><text x="16.4976%" y="623.50"></text></g><g><title>decor_mem::helpers::minus_parser_vals (29 samples, 2.80%)</title><rect x="14.0232%" y="645" width="2.8046%" height="15" fill="rgb(251,28,31)"/><text x="14.2732%" y="655.50">de..</text></g><g><title>core::num::dec2flt::dec2flt (16 samples, 1.55%)</title><rect x="15.2805%" y="629" width="1.5474%" height="15" fill="rgb(233,223,10)"/><text x="15.5305%" y="639.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (4 samples, 0.39%)</title><rect x="16.4410%" y="613" width="0.3868%" height="15" fill="rgb(215,21,27)"/><text x="16.6910%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.19%)</title><rect x="17.4081%" y="565" width="0.1934%" height="15" fill="rgb(232,23,21)"/><text x="17.6581%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.19%)</title><rect x="17.4081%" y="549" width="0.1934%" height="15" fill="rgb(244,5,23)"/><text x="17.6581%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.19%)</title><rect x="17.4081%" y="533" width="0.1934%" height="15" fill="rgb(226,81,46)"/><text x="17.6581%" y="543.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.39%)</title><rect x="17.6015%" y="453" width="0.3868%" height="15" fill="rgb(247,70,30)"/><text x="17.8515%" y="463.50"></text></g><g><title>__rdl_alloc (2 samples, 0.19%)</title><rect x="17.9884%" y="453" width="0.1934%" height="15" fill="rgb(212,68,19)"/><text x="18.2384%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.19%)</title><rect x="17.9884%" y="437" width="0.1934%" height="15" fill="rgb(240,187,13)"/><text x="18.2384%" y="447.50"></text></g><g><title>decor_mem::select::get_value_for_row_closure::{{closure}} (47 samples, 4.55%)</title><rect x="13.7331%" y="661" width="4.5455%" height="15" fill="rgb(223,113,26)"/><text x="13.9831%" y="671.50">decor..</text></g><g><title>decor_mem::select::get_value_for_row_closure::{{closure}} (15 samples, 1.45%)</title><rect x="16.8279%" y="645" width="1.4507%" height="15" fill="rgb(206,192,2)"/><text x="17.0779%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.97%)</title><rect x="17.3114%" y="629" width="0.9671%" height="15" fill="rgb(241,108,4)"/><text x="17.5614%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.87%)</title><rect x="17.4081%" y="613" width="0.8704%" height="15" fill="rgb(247,173,49)"/><text x="17.6581%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.87%)</title><rect x="17.4081%" y="597" width="0.8704%" height="15" fill="rgb(224,114,35)"/><text x="17.6581%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.87%)</title><rect x="17.4081%" y="581" width="0.8704%" height="15" fill="rgb(245,159,27)"/><text x="17.6581%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.68%)</title><rect x="17.6015%" y="565" width="0.6770%" height="15" fill="rgb(245,172,44)"/><text x="17.8515%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.68%)</title><rect x="17.6015%" y="549" width="0.6770%" height="15" fill="rgb(236,23,11)"/><text x="17.8515%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.68%)</title><rect x="17.6015%" y="533" width="0.6770%" height="15" fill="rgb(205,117,38)"/><text x="17.8515%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.68%)</title><rect x="17.6015%" y="517" width="0.6770%" height="15" fill="rgb(237,72,25)"/><text x="17.8515%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.68%)</title><rect x="17.6015%" y="501" width="0.6770%" height="15" fill="rgb(244,70,9)"/><text x="17.8515%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.68%)</title><rect x="17.6015%" y="485" width="0.6770%" height="15" fill="rgb(217,125,39)"/><text x="17.8515%" y="495.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.68%)</title><rect x="17.6015%" y="469" width="0.6770%" height="15" fill="rgb(235,36,10)"/><text x="17.8515%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.19%)</title><rect x="18.3752%" y="629" width="0.1934%" height="15" fill="rgb(251,123,47)"/><text x="18.6252%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (2 samples, 0.19%)</title><rect x="18.3752%" y="613" width="0.1934%" height="15" fill="rgb(221,13,13)"/><text x="18.6252%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.19%)</title><rect x="18.3752%" y="597" width="0.1934%" height="15" fill="rgb(238,131,9)"/><text x="18.6252%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2 samples, 0.19%)</title><rect x="18.3752%" y="581" width="0.1934%" height="15" fill="rgb(211,50,8)"/><text x="18.6252%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.19%)</title><rect x="18.3752%" y="565" width="0.1934%" height="15" fill="rgb(245,182,24)"/><text x="18.6252%" y="575.50"></text></g><g><title>decor_mem::select::get_value_for_row_closure (6 samples, 0.58%)</title><rect x="18.2785%" y="661" width="0.5803%" height="15" fill="rgb(242,14,37)"/><text x="18.5285%" y="671.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (5 samples, 0.48%)</title><rect x="18.3752%" y="645" width="0.4836%" height="15" fill="rgb(246,228,12)"/><text x="18.6252%" y="655.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (3 samples, 0.29%)</title><rect x="18.5687%" y="629" width="0.2901%" height="15" fill="rgb(213,55,15)"/><text x="18.8187%" y="639.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.29%)</title><rect x="18.5687%" y="613" width="0.2901%" height="15" fill="rgb(209,9,3)"/><text x="18.8187%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.29%)</title><rect x="18.5687%" y="597" width="0.2901%" height="15" fill="rgb(230,59,30)"/><text x="18.8187%" y="607.50"></text></g><g><title>core::fmt::write (3 samples, 0.29%)</title><rect x="18.5687%" y="581" width="0.2901%" height="15" fill="rgb(209,121,21)"/><text x="18.8187%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (3 samples, 0.29%)</title><rect x="18.5687%" y="565" width="0.2901%" height="15" fill="rgb(220,109,13)"/><text x="18.8187%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.19%)</title><rect x="18.6654%" y="549" width="0.1934%" height="15" fill="rgb(232,18,1)"/><text x="18.9154%" y="559.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2 samples, 0.19%)</title><rect x="18.6654%" y="533" width="0.1934%" height="15" fill="rgb(215,41,42)"/><text x="18.9154%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.19%)</title><rect x="19.0522%" y="645" width="0.1934%" height="15" fill="rgb(224,123,36)"/><text x="19.3022%" y="655.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.19%)</title><rect x="19.0522%" y="629" width="0.1934%" height="15" fill="rgb(240,125,3)"/><text x="19.3022%" y="639.50"></text></g><g><title>_int_realloc (2 samples, 0.19%)</title><rect x="19.0522%" y="613" width="0.1934%" height="15" fill="rgb(205,98,50)"/><text x="19.3022%" y="623.50"></text></g><g><title>_int_malloc (2 samples, 0.19%)</title><rect x="19.0522%" y="597" width="0.1934%" height="15" fill="rgb(205,185,37)"/><text x="19.3022%" y="607.50"></text></g><g><title>core::num::dec2flt::extract_sign (2 samples, 0.19%)</title><rect x="22.0503%" y="581" width="0.1934%" height="15" fill="rgb(238,207,15)"/><text x="22.3003%" y="591.50"></text></g><g><title>alloc::slice::merge_sort (38 samples, 3.68%)</title><rect x="19.2456%" y="645" width="3.6750%" height="15" fill="rgb(213,199,42)"/><text x="19.4956%" y="655.50">allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (36 samples, 3.48%)</title><rect x="19.4391%" y="629" width="3.4816%" height="15" fill="rgb(235,201,11)"/><text x="19.6891%" y="639.50">all..</text></g><g><title>decor_mem::helpers::parser_vals_cmp (33 samples, 3.19%)</title><rect x="19.7292%" y="613" width="3.1915%" height="15" fill="rgb(207,46,11)"/><text x="19.9792%" y="623.50">dec..</text></g><g><title>core::num::dec2flt::dec2flt (32 samples, 3.09%)</title><rect x="19.8259%" y="597" width="3.0948%" height="15" fill="rgb(241,35,35)"/><text x="20.0759%" y="607.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_decimal (7 samples, 0.68%)</title><rect x="22.2437%" y="581" width="0.6770%" height="15" fill="rgb(243,32,47)"/><text x="22.4937%" y="591.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (4 samples, 0.39%)</title><rect x="22.5338%" y="565" width="0.3868%" height="15" fill="rgb(247,202,23)"/><text x="22.7838%" y="575.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (2 samples, 0.19%)</title><rect x="26.9826%" y="597" width="0.1934%" height="15" fill="rgb(219,102,11)"/><text x="27.2326%" y="607.50"></text></g><g><title>decor_mem::select::get_rptrs_matching_constraint (177 samples, 17.12%)</title><rect x="10.1547%" y="677" width="17.1180%" height="15" fill="rgb(243,110,44)"/><text x="10.4047%" y="687.50">decor_mem::select::get_rptr..</text></g><g><title>decor_mem::views::View::intersect_rptrs (87 samples, 8.41%)</title><rect x="18.8588%" y="661" width="8.4139%" height="15" fill="rgb(222,74,54)"/><text x="19.1088%" y="671.50">decor_mem::v..</text></g><g><title>decor_mem::helpers::parser_vals_cmp (45 samples, 4.35%)</title><rect x="22.9207%" y="645" width="4.3520%" height="15" fill="rgb(216,99,12)"/><text x="23.1707%" y="655.50">decor..</text></g><g><title>core::num::dec2flt::dec2flt (42 samples, 4.06%)</title><rect x="23.2108%" y="629" width="4.0619%" height="15" fill="rgb(226,22,26)"/><text x="23.4608%" y="639.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_decimal (4 samples, 0.39%)</title><rect x="26.8859%" y="613" width="0.3868%" height="15" fill="rgb(217,163,10)"/><text x="27.1359%" y="623.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (2 samples, 0.19%)</title><rect x="38.3946%" y="597" width="0.1934%" height="15" fill="rgb(213,25,53)"/><text x="38.6446%" y="607.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (3 samples, 0.29%)</title><rect x="38.5880%" y="597" width="0.2901%" height="15" fill="rgb(252,105,26)"/><text x="38.8380%" y="607.50"></text></g><g><title>core::num::dec2flt::extract_sign (10 samples, 0.97%)</title><rect x="38.8781%" y="597" width="0.9671%" height="15" fill="rgb(220,39,43)"/><text x="39.1281%" y="607.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (12 samples, 1.16%)</title><rect x="40.4255%" y="581" width="1.1605%" height="15" fill="rgb(229,68,48)"/><text x="40.6755%" y="591.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (4 samples, 0.39%)</title><rect x="41.5861%" y="581" width="0.3868%" height="15" fill="rgb(252,8,32)"/><text x="41.8361%" y="591.50"></text></g><g><title>alloc::slice::merge_sort (154 samples, 14.89%)</title><rect x="27.2727%" y="661" width="14.8936%" height="15" fill="rgb(223,20,43)"/><text x="27.5227%" y="671.50">alloc::slice::merge_sort</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (154 samples, 14.89%)</title><rect x="27.2727%" y="645" width="14.8936%" height="15" fill="rgb(229,81,49)"/><text x="27.5227%" y="655.50">alloc::slice::&lt;impl [T]..</text></g><g><title>decor_mem::helpers::parser_vals_cmp (154 samples, 14.89%)</title><rect x="27.2727%" y="629" width="14.8936%" height="15" fill="rgb(236,28,36)"/><text x="27.5227%" y="639.50">decor_mem::helpers::par..</text></g><g><title>core::num::dec2flt::dec2flt (141 samples, 13.64%)</title><rect x="28.5300%" y="613" width="13.6364%" height="15" fill="rgb(249,185,26)"/><text x="28.7800%" y="623.50">core::num::dec2flt::d..</text></g><g><title>core::num::dec2flt::parse::parse_decimal (24 samples, 2.32%)</title><rect x="39.8453%" y="597" width="2.3211%" height="15" fill="rgb(249,174,33)"/><text x="40.0953%" y="607.50">c..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (2 samples, 0.19%)</title><rect x="41.9729%" y="581" width="0.1934%" height="15" fill="rgb(233,201,37)"/><text x="42.2229%" y="591.50"></text></g><g><title>core::num::dec2flt::extract_sign (4 samples, 0.39%)</title><rect x="45.3578%" y="629" width="0.3868%" height="15" fill="rgb(221,78,26)"/><text x="45.6078%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (391 samples, 37.81%)</title><rect x="8.6074%" y="757" width="37.8143%" height="15" fill="rgb(250,127,30)"/><text x="8.8574%" y="767.50">decor_mem::query_transformer::QueryTransformer::query</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (391 samples, 37.81%)</title><rect x="8.6074%" y="741" width="37.8143%" height="15" fill="rgb(230,49,44)"/><text x="8.8574%" y="751.50">decor_mem::query_transformer::QueryTransformer::issue_statement</text></g><g><title>decor_mem::select::get_query_results (376 samples, 36.36%)</title><rect x="10.0580%" y="725" width="36.3636%" height="15" fill="rgb(229,67,23)"/><text x="10.3080%" y="735.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (376 samples, 36.36%)</title><rect x="10.0580%" y="709" width="36.3636%" height="15" fill="rgb(249,83,47)"/><text x="10.3080%" y="719.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::get_rptrs_matching_constraint (375 samples, 36.27%)</title><rect x="10.1547%" y="693" width="36.2669%" height="15" fill="rgb(215,43,3)"/><text x="10.4047%" y="703.50">decor_mem::select::get_rptrs_matching_constraint</text></g><g><title>decor_mem::views::View::intersect_rptrs (198 samples, 19.15%)</title><rect x="27.2727%" y="677" width="19.1489%" height="15" fill="rgb(238,154,13)"/><text x="27.5227%" y="687.50">decor_mem::views::View::inters..</text></g><g><title>decor_mem::helpers::parser_vals_cmp (44 samples, 4.26%)</title><rect x="42.1663%" y="661" width="4.2553%" height="15" fill="rgb(219,56,2)"/><text x="42.4163%" y="671.50">decor..</text></g><g><title>core::num::dec2flt::dec2flt (44 samples, 4.26%)</title><rect x="42.1663%" y="645" width="4.2553%" height="15" fill="rgb(233,0,4)"/><text x="42.4163%" y="655.50">core:..</text></g><g><title>core::num::dec2flt::parse::parse_decimal (7 samples, 0.68%)</title><rect x="45.7447%" y="629" width="0.6770%" height="15" fill="rgb(235,30,7)"/><text x="45.9947%" y="639.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (4 samples, 0.39%)</title><rect x="46.0348%" y="613" width="0.3868%" height="15" fill="rgb(250,79,13)"/><text x="46.2848%" y="623.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (393 samples, 38.01%)</title><rect x="8.6074%" y="773" width="38.0077%" height="15" fill="rgb(211,146,34)"/><text x="8.8574%" y="783.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (2 samples, 0.19%)</title><rect x="46.4217%" y="757" width="0.1934%" height="15" fill="rgb(228,22,38)"/><text x="46.6717%" y="767.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (2 samples, 0.19%)</title><rect x="46.4217%" y="741" width="0.1934%" height="15" fill="rgb(235,168,5)"/><text x="46.6717%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (2 samples, 0.19%)</title><rect x="46.4217%" y="725" width="0.1934%" height="15" fill="rgb(221,155,16)"/><text x="46.6717%" y="735.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (2 samples, 0.19%)</title><rect x="46.6151%" y="773" width="0.1934%" height="15" fill="rgb(215,215,53)"/><text x="46.8651%" y="783.50"></text></g><g><title>_int_free (2 samples, 0.19%)</title><rect x="47.3888%" y="773" width="0.1934%" height="15" fill="rgb(223,4,10)"/><text x="47.6388%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (4 samples, 0.39%)</title><rect x="47.5822%" y="773" width="0.3868%" height="15" fill="rgb(234,103,6)"/><text x="47.8322%" y="783.50"></text></g><g><title>core::num::dec2flt::dec2flt (11 samples, 1.06%)</title><rect x="48.3559%" y="773" width="1.0638%" height="15" fill="rgb(227,97,0)"/><text x="48.6059%" y="783.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (5 samples, 0.48%)</title><rect x="49.8066%" y="773" width="0.4836%" height="15" fill="rgb(234,150,53)"/><text x="50.0566%" y="783.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (5 samples, 0.48%)</title><rect x="49.8066%" y="757" width="0.4836%" height="15" fill="rgb(228,201,54)"/><text x="50.0566%" y="767.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (5 samples, 0.48%)</title><rect x="49.8066%" y="741" width="0.4836%" height="15" fill="rgb(222,22,37)"/><text x="50.0566%" y="751.50"></text></g><g><title>decor_mem::stats::get_qtype (5 samples, 0.48%)</title><rect x="49.8066%" y="725" width="0.4836%" height="15" fill="rgb(237,53,32)"/><text x="50.0566%" y="735.50"></text></g><g><title>sql_parser::parser::parse_statements (5 samples, 0.48%)</title><rect x="49.8066%" y="709" width="0.4836%" height="15" fill="rgb(233,25,53)"/><text x="50.0566%" y="719.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (3 samples, 0.29%)</title><rect x="50.0000%" y="693" width="0.2901%" height="15" fill="rgb(210,40,34)"/><text x="50.2500%" y="703.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (2 samples, 0.19%)</title><rect x="50.2901%" y="773" width="0.1934%" height="15" fill="rgb(241,220,44)"/><text x="50.5401%" y="783.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.19%)</title><rect x="50.6770%" y="757" width="0.1934%" height="15" fill="rgb(235,28,35)"/><text x="50.9270%" y="767.50"></text></g><g><title>&lt;(T1,T2) as mysql_common::row::convert::FromRow&gt;::from_row_opt (2 samples, 0.19%)</title><rect x="51.0638%" y="709" width="0.1934%" height="15" fill="rgb(210,56,17)"/><text x="51.3138%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.19%)</title><rect x="51.4507%" y="645" width="0.1934%" height="15" fill="rgb(224,130,29)"/><text x="51.7007%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="51.6441%" y="645" width="0.1934%" height="15" fill="rgb(235,212,8)"/><text x="51.8941%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (6 samples, 0.58%)</title><rect x="51.3540%" y="661" width="0.5803%" height="15" fill="rgb(223,33,50)"/><text x="51.6040%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (9 samples, 0.87%)</title><rect x="51.2573%" y="693" width="0.8704%" height="15" fill="rgb(219,149,13)"/><text x="51.5073%" y="703.50"></text></g><g><title>mysql::conn::Conn::next_text (9 samples, 0.87%)</title><rect x="51.2573%" y="677" width="0.8704%" height="15" fill="rgb(250,156,29)"/><text x="51.5073%" y="687.50"></text></g><g><title>mysql_common::value::read_text_values (2 samples, 0.19%)</title><rect x="51.9342%" y="661" width="0.1934%" height="15" fill="rgb(216,193,19)"/><text x="52.1842%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 1.26%)</title><rect x="51.2573%" y="709" width="1.2573%" height="15" fill="rgb(216,135,14)"/><text x="51.5073%" y="719.50"></text></g><g><title>mysql_common::row::new_row (4 samples, 0.39%)</title><rect x="52.1277%" y="693" width="0.3868%" height="15" fill="rgb(241,47,5)"/><text x="52.3777%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.19%)</title><rect x="52.3211%" y="677" width="0.1934%" height="15" fill="rgb(233,42,35)"/><text x="52.5711%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 2.03%)</title><rect x="50.8704%" y="725" width="2.0309%" height="15" fill="rgb(231,13,6)"/><text x="51.1204%" y="735.50">&lt;..</text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.29%)</title><rect x="52.6112%" y="709" width="0.2901%" height="15" fill="rgb(207,181,40)"/><text x="52.8612%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (2 samples, 0.19%)</title><rect x="52.7079%" y="693" width="0.1934%" height="15" fill="rgb(254,173,49)"/><text x="52.9579%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (2 samples, 0.19%)</title><rect x="52.7079%" y="677" width="0.1934%" height="15" fill="rgb(221,1,38)"/><text x="52.9579%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.19%)</title><rect x="52.7079%" y="661" width="0.1934%" height="15" fill="rgb(206,124,46)"/><text x="52.9579%" y="671.50"></text></g><g><title>do_syscall_64 (3 samples, 0.29%)</title><rect x="52.9014%" y="549" width="0.2901%" height="15" fill="rgb(249,21,11)"/><text x="53.1514%" y="559.50"></text></g><g><title>__x64_sys_recvfrom (3 samples, 0.29%)</title><rect x="52.9014%" y="533" width="0.2901%" height="15" fill="rgb(222,201,40)"/><text x="53.1514%" y="543.50"></text></g><g><title>__sys_recvfrom (3 samples, 0.29%)</title><rect x="52.9014%" y="517" width="0.2901%" height="15" fill="rgb(235,61,29)"/><text x="53.1514%" y="527.50"></text></g><g><title>inet_recvmsg (3 samples, 0.29%)</title><rect x="52.9014%" y="501" width="0.2901%" height="15" fill="rgb(219,207,3)"/><text x="53.1514%" y="511.50"></text></g><g><title>tcp_recvmsg (3 samples, 0.29%)</title><rect x="52.9014%" y="485" width="0.2901%" height="15" fill="rgb(222,56,46)"/><text x="53.1514%" y="495.50"></text></g><g><title>sk_wait_data (3 samples, 0.29%)</title><rect x="52.9014%" y="469" width="0.2901%" height="15" fill="rgb(239,76,54)"/><text x="53.1514%" y="479.50"></text></g><g><title>wait_woken (3 samples, 0.29%)</title><rect x="52.9014%" y="453" width="0.2901%" height="15" fill="rgb(231,124,27)"/><text x="53.1514%" y="463.50"></text></g><g><title>schedule_timeout (2 samples, 0.19%)</title><rect x="52.9981%" y="437" width="0.1934%" height="15" fill="rgb(249,195,6)"/><text x="53.2481%" y="447.50"></text></g><g><title>schedule (2 samples, 0.19%)</title><rect x="52.9981%" y="421" width="0.1934%" height="15" fill="rgb(237,174,47)"/><text x="53.2481%" y="431.50"></text></g><g><title>__schedule (2 samples, 0.19%)</title><rect x="52.9981%" y="405" width="0.1934%" height="15" fill="rgb(206,201,31)"/><text x="53.2481%" y="415.50"></text></g><g><title>mysql::conn::Conn::read_packet (4 samples, 0.39%)</title><rect x="52.9014%" y="693" width="0.3868%" height="15" fill="rgb(231,57,52)"/><text x="53.1514%" y="703.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.39%)</title><rect x="52.9014%" y="677" width="0.3868%" height="15" fill="rgb(248,177,22)"/><text x="53.1514%" y="687.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 0.39%)</title><rect x="52.9014%" y="661" width="0.3868%" height="15" fill="rgb(215,211,37)"/><text x="53.1514%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 0.39%)</title><rect x="52.9014%" y="645" width="0.3868%" height="15" fill="rgb(241,128,51)"/><text x="53.1514%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (4 samples, 0.39%)</title><rect x="52.9014%" y="629" width="0.3868%" height="15" fill="rgb(227,165,31)"/><text x="53.1514%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::read (4 samples, 0.39%)</title><rect x="52.9014%" y="613" width="0.3868%" height="15" fill="rgb(228,167,24)"/><text x="53.1514%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (4 samples, 0.39%)</title><rect x="52.9014%" y="597" width="0.3868%" height="15" fill="rgb(228,143,12)"/><text x="53.1514%" y="607.50"></text></g><g><title>__libc_recv (4 samples, 0.39%)</title><rect x="52.9014%" y="581" width="0.3868%" height="15" fill="rgb(249,149,8)"/><text x="53.1514%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.39%)</title><rect x="52.9014%" y="565" width="0.3868%" height="15" fill="rgb(243,35,44)"/><text x="53.1514%" y="575.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (6 samples, 0.58%)</title><rect x="52.9014%" y="709" width="0.5803%" height="15" fill="rgb(246,89,9)"/><text x="53.1514%" y="719.50"></text></g><g><title>mysql_common::packets::column_from_payload (2 samples, 0.19%)</title><rect x="53.2882%" y="693" width="0.1934%" height="15" fill="rgb(233,213,13)"/><text x="53.5382%" y="703.50"></text></g><g><title>lobsters_microbenchmarks::main (32 samples, 3.09%)</title><rect x="50.6770%" y="773" width="3.0948%" height="15" fill="rgb(233,141,41)"/><text x="50.9270%" y="783.50">lob..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (30 samples, 2.90%)</title><rect x="50.8704%" y="757" width="2.9014%" height="15" fill="rgb(239,167,4)"/><text x="51.1204%" y="767.50">lo..</text></g><g><title>mysql::conn::queryable::Queryable::query_map (30 samples, 2.90%)</title><rect x="50.8704%" y="741" width="2.9014%" height="15" fill="rgb(209,217,16)"/><text x="51.1204%" y="751.50">my..</text></g><g><title>mysql::conn::Conn::_query (9 samples, 0.87%)</title><rect x="52.9014%" y="725" width="0.8704%" height="15" fill="rgb(219,88,35)"/><text x="53.1514%" y="735.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (3 samples, 0.29%)</title><rect x="53.4816%" y="709" width="0.2901%" height="15" fill="rgb(220,193,23)"/><text x="53.7316%" y="719.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.29%)</title><rect x="53.4816%" y="693" width="0.2901%" height="15" fill="rgb(230,90,52)"/><text x="53.7316%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.29%)</title><rect x="53.4816%" y="677" width="0.2901%" height="15" fill="rgb(252,106,19)"/><text x="53.7316%" y="687.50"></text></g><g><title>std::sys_common::net::TcpStream::write (3 samples, 0.29%)</title><rect x="53.4816%" y="661" width="0.2901%" height="15" fill="rgb(206,74,20)"/><text x="53.7316%" y="671.50"></text></g><g><title>__libc_send (3 samples, 0.29%)</title><rect x="53.4816%" y="645" width="0.2901%" height="15" fill="rgb(230,138,44)"/><text x="53.7316%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.29%)</title><rect x="53.4816%" y="629" width="0.2901%" height="15" fill="rgb(235,182,43)"/><text x="53.7316%" y="639.50"></text></g><g><title>do_syscall_64 (2 samples, 0.19%)</title><rect x="53.5783%" y="613" width="0.1934%" height="15" fill="rgb(242,16,51)"/><text x="53.8283%" y="623.50"></text></g><g><title>__x64_sys_sendto (2 samples, 0.19%)</title><rect x="53.5783%" y="597" width="0.1934%" height="15" fill="rgb(248,9,4)"/><text x="53.8283%" y="607.50"></text></g><g><title>__sys_sendto (2 samples, 0.19%)</title><rect x="53.5783%" y="581" width="0.1934%" height="15" fill="rgb(210,31,22)"/><text x="53.8283%" y="591.50"></text></g><g><title>sock_sendmsg (2 samples, 0.19%)</title><rect x="53.5783%" y="565" width="0.1934%" height="15" fill="rgb(239,54,39)"/><text x="53.8283%" y="575.50"></text></g><g><title>tcp_sendmsg (2 samples, 0.19%)</title><rect x="53.5783%" y="549" width="0.1934%" height="15" fill="rgb(230,99,41)"/><text x="53.8283%" y="559.50"></text></g><g><title>tcp_sendmsg_locked (2 samples, 0.19%)</title><rect x="53.5783%" y="533" width="0.1934%" height="15" fill="rgb(253,106,12)"/><text x="53.8283%" y="543.50"></text></g><g><title>__tcp_push_pending_frames (2 samples, 0.19%)</title><rect x="53.5783%" y="517" width="0.1934%" height="15" fill="rgb(213,46,41)"/><text x="53.8283%" y="527.50"></text></g><g><title>tcp_write_xmit (2 samples, 0.19%)</title><rect x="53.5783%" y="501" width="0.1934%" height="15" fill="rgb(215,133,35)"/><text x="53.8283%" y="511.50"></text></g><g><title>__tcp_transmit_skb (2 samples, 0.19%)</title><rect x="53.5783%" y="485" width="0.1934%" height="15" fill="rgb(213,28,5)"/><text x="53.8283%" y="495.50"></text></g><g><title>__ip_queue_xmit (2 samples, 0.19%)</title><rect x="53.5783%" y="469" width="0.1934%" height="15" fill="rgb(215,77,49)"/><text x="53.8283%" y="479.50"></text></g><g><title>ip_output (2 samples, 0.19%)</title><rect x="53.5783%" y="453" width="0.1934%" height="15" fill="rgb(248,100,22)"/><text x="53.8283%" y="463.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (3 samples, 0.29%)</title><rect x="53.7718%" y="709" width="0.2901%" height="15" fill="rgb(208,67,9)"/><text x="54.0218%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (3 samples, 0.29%)</title><rect x="53.7718%" y="693" width="0.2901%" height="15" fill="rgb(219,133,21)"/><text x="54.0218%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (2 samples, 0.19%)</title><rect x="53.8685%" y="677" width="0.1934%" height="15" fill="rgb(246,46,29)"/><text x="54.1185%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.19%)</title><rect x="53.8685%" y="661" width="0.1934%" height="15" fill="rgb(246,185,52)"/><text x="54.1185%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (4 samples, 0.39%)</title><rect x="53.7718%" y="725" width="0.3868%" height="15" fill="rgb(252,136,11)"/><text x="54.0218%" y="735.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (5 samples, 0.48%)</title><rect x="53.7718%" y="757" width="0.4836%" height="15" fill="rgb(219,138,53)"/><text x="54.0218%" y="767.50"></text></g><g><title>decor_mem::Shim::create_schema (5 samples, 0.48%)</title><rect x="53.7718%" y="741" width="0.4836%" height="15" fill="rgb(211,51,23)"/><text x="54.0218%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (2 samples, 0.19%)</title><rect x="54.3520%" y="645" width="0.1934%" height="15" fill="rgb(247,221,28)"/><text x="54.6020%" y="655.50"></text></g><g><title>page_fault (2 samples, 0.19%)</title><rect x="54.5455%" y="597" width="0.1934%" height="15" fill="rgb(251,222,45)"/><text x="54.7955%" y="607.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.19%)</title><rect x="54.5455%" y="581" width="0.1934%" height="15" fill="rgb(217,162,53)"/><text x="54.7955%" y="591.50"></text></g><g><title>handle_mm_fault (2 samples, 0.19%)</title><rect x="54.5455%" y="565" width="0.1934%" height="15" fill="rgb(229,93,14)"/><text x="54.7955%" y="575.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.19%)</title><rect x="54.5455%" y="549" width="0.1934%" height="15" fill="rgb(209,67,49)"/><text x="54.7955%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (5 samples, 0.48%)</title><rect x="54.3520%" y="709" width="0.4836%" height="15" fill="rgb(213,87,29)"/><text x="54.6020%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (5 samples, 0.48%)</title><rect x="54.3520%" y="693" width="0.4836%" height="15" fill="rgb(205,151,52)"/><text x="54.6020%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.48%)</title><rect x="54.3520%" y="677" width="0.4836%" height="15" fill="rgb(253,215,39)"/><text x="54.6020%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.48%)</title><rect x="54.3520%" y="661" width="0.4836%" height="15" fill="rgb(221,220,41)"/><text x="54.6020%" y="671.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.29%)</title><rect x="54.5455%" y="645" width="0.2901%" height="15" fill="rgb(218,133,21)"/><text x="54.7955%" y="655.50"></text></g><g><title>_int_malloc (3 samples, 0.29%)</title><rect x="54.5455%" y="629" width="0.2901%" height="15" fill="rgb(221,193,43)"/><text x="54.7955%" y="639.50"></text></g><g><title>sysmalloc (3 samples, 0.29%)</title><rect x="54.5455%" y="613" width="0.2901%" height="15" fill="rgb(240,128,52)"/><text x="54.7955%" y="623.50"></text></g><g><title>core::fmt::write (3 samples, 0.29%)</title><rect x="54.9323%" y="709" width="0.2901%" height="15" fill="rgb(253,114,12)"/><text x="55.1823%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (3 samples, 0.29%)</title><rect x="54.9323%" y="693" width="0.2901%" height="15" fill="rgb(215,223,47)"/><text x="55.1823%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (3 samples, 0.29%)</title><rect x="54.9323%" y="677" width="0.2901%" height="15" fill="rgb(248,225,23)"/><text x="55.1823%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (3 samples, 0.29%)</title><rect x="54.9323%" y="661" width="0.2901%" height="15" fill="rgb(250,108,0)"/><text x="55.1823%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.19%)</title><rect x="55.0290%" y="645" width="0.1934%" height="15" fill="rgb(228,208,7)"/><text x="55.2790%" y="655.50"></text></g><g><title>enqueue_task (2 samples, 0.19%)</title><rect x="55.9961%" y="69" width="0.1934%" height="15" fill="rgb(244,45,10)"/><text x="56.2461%" y="79.50"></text></g><g><title>psi_task_change (2 samples, 0.19%)</title><rect x="55.9961%" y="53" width="0.1934%" height="15" fill="rgb(207,125,25)"/><text x="56.2461%" y="63.50"></text></g><g><title>psi_group_change (2 samples, 0.19%)</title><rect x="55.9961%" y="37" width="0.1934%" height="15" fill="rgb(210,195,18)"/><text x="56.2461%" y="47.50"></text></g><g><title>sock_def_readable (3 samples, 0.29%)</title><rect x="55.9961%" y="149" width="0.2901%" height="15" fill="rgb(249,80,12)"/><text x="56.2461%" y="159.50"></text></g><g><title>__wake_up_common_lock (3 samples, 0.29%)</title><rect x="55.9961%" y="133" width="0.2901%" height="15" fill="rgb(221,65,9)"/><text x="56.2461%" y="143.50"></text></g><g><title>__wake_up_common (3 samples, 0.29%)</title><rect x="55.9961%" y="117" width="0.2901%" height="15" fill="rgb(235,49,36)"/><text x="56.2461%" y="127.50"></text></g><g><title>pollwake (3 samples, 0.29%)</title><rect x="55.9961%" y="101" width="0.2901%" height="15" fill="rgb(225,32,20)"/><text x="56.2461%" y="111.50"></text></g><g><title>try_to_wake_up (3 samples, 0.29%)</title><rect x="55.9961%" y="85" width="0.2901%" height="15" fill="rgb(215,141,46)"/><text x="56.2461%" y="95.50"></text></g><g><title>__tcp_transmit_skb (10 samples, 0.97%)</title><rect x="55.5126%" y="437" width="0.9671%" height="15" fill="rgb(250,160,47)"/><text x="55.7626%" y="447.50"></text></g><g><title>__ip_queue_xmit (10 samples, 0.97%)</title><rect x="55.5126%" y="421" width="0.9671%" height="15" fill="rgb(216,222,40)"/><text x="55.7626%" y="431.50"></text></g><g><title>ip_output (8 samples, 0.77%)</title><rect x="55.7060%" y="405" width="0.7737%" height="15" fill="rgb(234,217,39)"/><text x="55.9560%" y="415.50"></text></g><g><title>ip_finish_output2 (7 samples, 0.68%)</title><rect x="55.8027%" y="389" width="0.6770%" height="15" fill="rgb(207,178,40)"/><text x="56.0527%" y="399.50"></text></g><g><title>__local_bh_enable_ip (7 samples, 0.68%)</title><rect x="55.8027%" y="373" width="0.6770%" height="15" fill="rgb(221,136,13)"/><text x="56.0527%" y="383.50"></text></g><g><title>do_softirq (7 samples, 0.68%)</title><rect x="55.8027%" y="357" width="0.6770%" height="15" fill="rgb(249,199,10)"/><text x="56.0527%" y="367.50"></text></g><g><title>do_softirq_own_stack (7 samples, 0.68%)</title><rect x="55.8027%" y="341" width="0.6770%" height="15" fill="rgb(249,222,13)"/><text x="56.0527%" y="351.50"></text></g><g><title>__do_softirq (7 samples, 0.68%)</title><rect x="55.8027%" y="325" width="0.6770%" height="15" fill="rgb(244,185,38)"/><text x="56.0527%" y="335.50"></text></g><g><title>net_rx_action (7 samples, 0.68%)</title><rect x="55.8027%" y="309" width="0.6770%" height="15" fill="rgb(236,202,9)"/><text x="56.0527%" y="319.50"></text></g><g><title>process_backlog (7 samples, 0.68%)</title><rect x="55.8027%" y="293" width="0.6770%" height="15" fill="rgb(250,229,37)"/><text x="56.0527%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (6 samples, 0.58%)</title><rect x="55.8994%" y="277" width="0.5803%" height="15" fill="rgb(206,174,23)"/><text x="56.1494%" y="287.50"></text></g><g><title>ip_rcv (6 samples, 0.58%)</title><rect x="55.8994%" y="261" width="0.5803%" height="15" fill="rgb(211,33,43)"/><text x="56.1494%" y="271.50"></text></g><g><title>ip_local_deliver (6 samples, 0.58%)</title><rect x="55.8994%" y="245" width="0.5803%" height="15" fill="rgb(245,58,50)"/><text x="56.1494%" y="255.50"></text></g><g><title>ip_local_deliver_finish (6 samples, 0.58%)</title><rect x="55.8994%" y="229" width="0.5803%" height="15" fill="rgb(244,68,36)"/><text x="56.1494%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (6 samples, 0.58%)</title><rect x="55.8994%" y="213" width="0.5803%" height="15" fill="rgb(232,229,15)"/><text x="56.1494%" y="223.50"></text></g><g><title>tcp_v4_rcv (6 samples, 0.58%)</title><rect x="55.8994%" y="197" width="0.5803%" height="15" fill="rgb(254,30,23)"/><text x="56.1494%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (5 samples, 0.48%)</title><rect x="55.9961%" y="181" width="0.4836%" height="15" fill="rgb(235,160,14)"/><text x="56.2461%" y="191.50"></text></g><g><title>tcp_rcv_established (5 samples, 0.48%)</title><rect x="55.9961%" y="165" width="0.4836%" height="15" fill="rgb(212,155,44)"/><text x="56.2461%" y="175.50"></text></g><g><title>__tcp_push_pending_frames (11 samples, 1.06%)</title><rect x="55.5126%" y="469" width="1.0638%" height="15" fill="rgb(226,2,50)"/><text x="55.7626%" y="479.50"></text></g><g><title>tcp_write_xmit (11 samples, 1.06%)</title><rect x="55.5126%" y="453" width="1.0638%" height="15" fill="rgb(234,177,6)"/><text x="55.7626%" y="463.50"></text></g><g><title>do_syscall_64 (12 samples, 1.16%)</title><rect x="55.5126%" y="565" width="1.1605%" height="15" fill="rgb(217,24,9)"/><text x="55.7626%" y="575.50"></text></g><g><title>__x64_sys_sendto (12 samples, 1.16%)</title><rect x="55.5126%" y="549" width="1.1605%" height="15" fill="rgb(220,13,46)"/><text x="55.7626%" y="559.50"></text></g><g><title>__sys_sendto (12 samples, 1.16%)</title><rect x="55.5126%" y="533" width="1.1605%" height="15" fill="rgb(239,221,27)"/><text x="55.7626%" y="543.50"></text></g><g><title>sock_sendmsg (12 samples, 1.16%)</title><rect x="55.5126%" y="517" width="1.1605%" height="15" fill="rgb(222,198,25)"/><text x="55.7626%" y="527.50"></text></g><g><title>tcp_sendmsg (12 samples, 1.16%)</title><rect x="55.5126%" y="501" width="1.1605%" height="15" fill="rgb(211,99,13)"/><text x="55.7626%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (12 samples, 1.16%)</title><rect x="55.5126%" y="485" width="1.1605%" height="15" fill="rgb(232,111,31)"/><text x="55.7626%" y="495.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (15 samples, 1.45%)</title><rect x="55.3191%" y="693" width="1.4507%" height="15" fill="rgb(245,82,37)"/><text x="55.5691%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (15 samples, 1.45%)</title><rect x="55.3191%" y="677" width="1.4507%" height="15" fill="rgb(227,149,46)"/><text x="55.5691%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (14 samples, 1.35%)</title><rect x="55.4159%" y="661" width="1.3540%" height="15" fill="rgb(218,36,50)"/><text x="55.6659%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (14 samples, 1.35%)</title><rect x="55.4159%" y="645" width="1.3540%" height="15" fill="rgb(226,80,48)"/><text x="55.6659%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (14 samples, 1.35%)</title><rect x="55.4159%" y="629" width="1.3540%" height="15" fill="rgb(238,224,15)"/><text x="55.6659%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (14 samples, 1.35%)</title><rect x="55.4159%" y="613" width="1.3540%" height="15" fill="rgb(241,136,10)"/><text x="55.6659%" y="623.50"></text></g><g><title>__libc_send (14 samples, 1.35%)</title><rect x="55.4159%" y="597" width="1.3540%" height="15" fill="rgb(208,32,45)"/><text x="55.6659%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (13 samples, 1.26%)</title><rect x="55.5126%" y="581" width="1.2573%" height="15" fill="rgb(207,135,9)"/><text x="55.7626%" y="591.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.19%)</title><rect x="56.7698%" y="693" width="0.1934%" height="15" fill="rgb(206,86,44)"/><text x="57.0198%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.19%)</title><rect x="56.7698%" y="677" width="0.1934%" height="15" fill="rgb(245,177,15)"/><text x="57.0198%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.19%)</title><rect x="56.7698%" y="661" width="0.1934%" height="15" fill="rgb(206,64,50)"/><text x="57.0198%" y="671.50"></text></g><g><title>__GI___mprotect (4 samples, 0.39%)</title><rect x="56.9632%" y="613" width="0.3868%" height="15" fill="rgb(234,36,40)"/><text x="57.2132%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.39%)</title><rect x="56.9632%" y="597" width="0.3868%" height="15" fill="rgb(213,64,8)"/><text x="57.2132%" y="607.50"></text></g><g><title>do_syscall_64 (4 samples, 0.39%)</title><rect x="56.9632%" y="581" width="0.3868%" height="15" fill="rgb(210,75,36)"/><text x="57.2132%" y="591.50"></text></g><g><title>__x64_sys_mprotect (4 samples, 0.39%)</title><rect x="56.9632%" y="565" width="0.3868%" height="15" fill="rgb(229,88,21)"/><text x="57.2132%" y="575.50"></text></g><g><title>do_mprotect_pkey (4 samples, 0.39%)</title><rect x="56.9632%" y="549" width="0.3868%" height="15" fill="rgb(252,204,47)"/><text x="57.2132%" y="559.50"></text></g><g><title>mprotect_fixup (4 samples, 0.39%)</title><rect x="56.9632%" y="533" width="0.3868%" height="15" fill="rgb(208,77,27)"/><text x="57.2132%" y="543.50"></text></g><g><title>perf_event_mmap (3 samples, 0.29%)</title><rect x="57.0600%" y="517" width="0.2901%" height="15" fill="rgb(221,76,26)"/><text x="57.3100%" y="527.50"></text></g><g><title>perf_iterate_sb (3 samples, 0.29%)</title><rect x="57.0600%" y="501" width="0.2901%" height="15" fill="rgb(225,139,18)"/><text x="57.3100%" y="511.50"></text></g><g><title>perf_iterate_ctx (3 samples, 0.29%)</title><rect x="57.0600%" y="485" width="0.2901%" height="15" fill="rgb(230,137,11)"/><text x="57.3100%" y="495.50"></text></g><g><title>mem_cgroup_try_charge_delay (2 samples, 0.19%)</title><rect x="57.3501%" y="549" width="0.1934%" height="15" fill="rgb(212,28,1)"/><text x="57.6001%" y="559.50"></text></g><g><title>mem_cgroup_try_charge (2 samples, 0.19%)</title><rect x="57.3501%" y="533" width="0.1934%" height="15" fill="rgb(248,164,17)"/><text x="57.6001%" y="543.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (25 samples, 2.42%)</title><rect x="55.2224%" y="709" width="2.4178%" height="15" fill="rgb(222,171,42)"/><text x="55.4724%" y="719.50">de..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.68%)</title><rect x="56.9632%" y="693" width="0.6770%" height="15" fill="rgb(243,84,45)"/><text x="57.2132%" y="703.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.68%)</title><rect x="56.9632%" y="677" width="0.6770%" height="15" fill="rgb(252,49,23)"/><text x="57.2132%" y="687.50"></text></g><g><title>_int_realloc (7 samples, 0.68%)</title><rect x="56.9632%" y="661" width="0.6770%" height="15" fill="rgb(215,19,7)"/><text x="57.2132%" y="671.50"></text></g><g><title>_int_malloc (7 samples, 0.68%)</title><rect x="56.9632%" y="645" width="0.6770%" height="15" fill="rgb(238,81,41)"/><text x="57.2132%" y="655.50"></text></g><g><title>sysmalloc (7 samples, 0.68%)</title><rect x="56.9632%" y="629" width="0.6770%" height="15" fill="rgb(210,199,37)"/><text x="57.2132%" y="639.50"></text></g><g><title>page_fault (3 samples, 0.29%)</title><rect x="57.3501%" y="613" width="0.2901%" height="15" fill="rgb(244,192,49)"/><text x="57.6001%" y="623.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.29%)</title><rect x="57.3501%" y="597" width="0.2901%" height="15" fill="rgb(226,211,11)"/><text x="57.6001%" y="607.50"></text></g><g><title>handle_mm_fault (3 samples, 0.29%)</title><rect x="57.3501%" y="581" width="0.2901%" height="15" fill="rgb(236,162,54)"/><text x="57.6001%" y="591.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.29%)</title><rect x="57.3501%" y="565" width="0.2901%" height="15" fill="rgb(220,229,9)"/><text x="57.6001%" y="575.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.19%)</title><rect x="57.8337%" y="661" width="0.1934%" height="15" fill="rgb(250,87,22)"/><text x="58.0837%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.39%)</title><rect x="57.7369%" y="677" width="0.3868%" height="15" fill="rgb(239,43,17)"/><text x="57.9869%" y="687.50"></text></g><g><title>alloc::slice::merge_sort (3 samples, 0.29%)</title><rect x="58.1238%" y="677" width="0.2901%" height="15" fill="rgb(231,177,25)"/><text x="58.3738%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (2 samples, 0.19%)</title><rect x="58.2205%" y="661" width="0.1934%" height="15" fill="rgb(219,179,1)"/><text x="58.4705%" y="671.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (2 samples, 0.19%)</title><rect x="58.2205%" y="645" width="0.1934%" height="15" fill="rgb(238,219,53)"/><text x="58.4705%" y="655.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.19%)</title><rect x="60.0580%" y="629" width="0.1934%" height="15" fill="rgb(232,167,36)"/><text x="60.3080%" y="639.50"></text></g><g><title>alloc::slice::merge_sort (23 samples, 2.22%)</title><rect x="59.1876%" y="645" width="2.2244%" height="15" fill="rgb(244,19,51)"/><text x="59.4376%" y="655.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} (12 samples, 1.16%)</title><rect x="60.2515%" y="629" width="1.1605%" height="15" fill="rgb(224,6,22)"/><text x="60.5015%" y="639.50"></text></g><g><title>decor_mem::select::get_rptrs_matching_constraint (33 samples, 3.19%)</title><rect x="58.5106%" y="677" width="3.1915%" height="15" fill="rgb(224,145,5)"/><text x="58.7606%" y="687.50">dec..</text></g><g><title>decor_mem::views::View::intersect_rptrs (33 samples, 3.19%)</title><rect x="58.5106%" y="661" width="3.1915%" height="15" fill="rgb(234,130,49)"/><text x="58.7606%" y="671.50">dec..</text></g><g><title>decor_mem::helpers::parser_vals_cmp (3 samples, 0.29%)</title><rect x="61.4120%" y="645" width="0.2901%" height="15" fill="rgb(254,6,2)"/><text x="61.6620%" y="655.50"></text></g><g><title>core::fmt::write (3 samples, 0.29%)</title><rect x="61.7021%" y="661" width="0.2901%" height="15" fill="rgb(208,96,46)"/><text x="61.9521%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (3 samples, 0.29%)</title><rect x="61.7021%" y="645" width="0.2901%" height="15" fill="rgb(239,3,39)"/><text x="61.9521%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.19%)</title><rect x="61.7988%" y="629" width="0.1934%" height="15" fill="rgb(233,210,1)"/><text x="62.0488%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2 samples, 0.19%)</title><rect x="61.7988%" y="613" width="0.1934%" height="15" fill="rgb(244,137,37)"/><text x="62.0488%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.19%)</title><rect x="61.7988%" y="597" width="0.1934%" height="15" fill="rgb(240,136,2)"/><text x="62.0488%" y="607.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (5 samples, 0.48%)</title><rect x="61.7021%" y="677" width="0.4836%" height="15" fill="rgb(239,18,37)"/><text x="61.9521%" y="687.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (2 samples, 0.19%)</title><rect x="61.9923%" y="661" width="0.1934%" height="15" fill="rgb(218,185,22)"/><text x="62.2423%" y="671.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.19%)</title><rect x="61.9923%" y="645" width="0.1934%" height="15" fill="rgb(225,218,4)"/><text x="62.2423%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.19%)</title><rect x="61.9923%" y="629" width="0.1934%" height="15" fill="rgb(230,182,32)"/><text x="62.2423%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.19%)</title><rect x="61.9923%" y="613" width="0.1934%" height="15" fill="rgb(242,56,43)"/><text x="62.2423%" y="623.50"></text></g><g><title>decor_mem::select::get_query_results (48 samples, 4.64%)</title><rect x="57.6402%" y="709" width="4.6422%" height="15" fill="rgb(233,99,24)"/><text x="57.8902%" y="719.50">decor..</text></g><g><title>decor_mem::select::get_setexpr_results (47 samples, 4.55%)</title><rect x="57.7369%" y="693" width="4.5455%" height="15" fill="rgb(234,209,42)"/><text x="57.9869%" y="703.50">decor..</text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (3 samples, 0.29%)</title><rect x="63.1528%" y="549" width="0.2901%" height="15" fill="rgb(227,7,12)"/><text x="63.4028%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (10 samples, 0.97%)</title><rect x="62.5725%" y="613" width="0.9671%" height="15" fill="rgb(245,203,43)"/><text x="62.8225%" y="623.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (7 samples, 0.68%)</title><rect x="62.8627%" y="597" width="0.6770%" height="15" fill="rgb(238,205,33)"/><text x="63.1127%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (7 samples, 0.68%)</title><rect x="62.8627%" y="581" width="0.6770%" height="15" fill="rgb(231,56,7)"/><text x="63.1127%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (7 samples, 0.68%)</title><rect x="62.8627%" y="565" width="0.6770%" height="15" fill="rgb(244,186,29)"/><text x="63.1127%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 1.35%)</title><rect x="62.3791%" y="645" width="1.3540%" height="15" fill="rgb(234,111,31)"/><text x="62.6291%" y="655.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (14 samples, 1.35%)</title><rect x="62.3791%" y="629" width="1.3540%" height="15" fill="rgb(241,149,10)"/><text x="62.6291%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.19%)</title><rect x="63.5397%" y="613" width="0.1934%" height="15" fill="rgb(249,206,44)"/><text x="63.7897%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.19%)</title><rect x="63.5397%" y="597" width="0.1934%" height="15" fill="rgb(251,153,30)"/><text x="63.7897%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.19%)</title><rect x="63.5397%" y="581" width="0.1934%" height="15" fill="rgb(239,152,38)"/><text x="63.7897%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (18 samples, 1.74%)</title><rect x="62.3791%" y="661" width="1.7408%" height="15" fill="rgb(249,139,47)"/><text x="62.6291%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (3 samples, 0.29%)</title><rect x="63.8298%" y="645" width="0.2901%" height="15" fill="rgb(244,64,35)"/><text x="64.0798%" y="655.50"></text></g><g><title>core::fmt::write (21 samples, 2.03%)</title><rect x="62.3791%" y="677" width="2.0309%" height="15" fill="rgb(216,46,15)"/><text x="62.6291%" y="687.50">c..</text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.29%)</title><rect x="64.1199%" y="661" width="0.2901%" height="15" fill="rgb(250,74,19)"/><text x="64.3699%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.19%)</title><rect x="64.2166%" y="645" width="0.1934%" height="15" fill="rgb(249,42,33)"/><text x="64.4666%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (107 samples, 10.35%)</title><rect x="54.2553%" y="741" width="10.3482%" height="15" fill="rgb(242,149,17)"/><text x="54.5053%" y="751.50">decor_mem::quer..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (107 samples, 10.35%)</title><rect x="54.2553%" y="725" width="10.3482%" height="15" fill="rgb(244,29,21)"/><text x="54.5053%" y="735.50">decor_mem::quer..</text></g><g><title>decor_mem::views::Views::insert (24 samples, 2.32%)</title><rect x="62.2824%" y="709" width="2.3211%" height="15" fill="rgb(220,130,37)"/><text x="62.5324%" y="719.50">d..</text></g><g><title>decor_mem::views::View::insert_into_index (23 samples, 2.22%)</title><rect x="62.3791%" y="693" width="2.2244%" height="15" fill="rgb(211,67,2)"/><text x="62.6291%" y="703.50">d..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.19%)</title><rect x="64.4101%" y="677" width="0.1934%" height="15" fill="rgb(235,68,52)"/><text x="64.6601%" y="687.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (4 samples, 0.39%)</title><rect x="64.6035%" y="741" width="0.3868%" height="15" fill="rgb(246,142,3)"/><text x="64.8535%" y="751.50"></text></g><g><title>sql_parser::parser::parse_statements (3 samples, 0.29%)</title><rect x="64.7002%" y="725" width="0.2901%" height="15" fill="rgb(241,25,7)"/><text x="64.9502%" y="735.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (2 samples, 0.19%)</title><rect x="64.7969%" y="709" width="0.1934%" height="15" fill="rgb(242,119,39)"/><text x="65.0469%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.19%)</title><rect x="64.9903%" y="693" width="0.1934%" height="15" fill="rgb(241,98,45)"/><text x="65.2403%" y="703.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.19%)</title><rect x="64.9903%" y="677" width="0.1934%" height="15" fill="rgb(254,28,30)"/><text x="65.2403%" y="687.50"></text></g><g><title>_int_realloc (2 samples, 0.19%)</title><rect x="64.9903%" y="661" width="0.1934%" height="15" fill="rgb(241,142,54)"/><text x="65.2403%" y="671.50"></text></g><g><title>_int_malloc (2 samples, 0.19%)</title><rect x="64.9903%" y="645" width="0.1934%" height="15" fill="rgb(222,85,15)"/><text x="65.2403%" y="655.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (126 samples, 12.19%)</title><rect x="53.7718%" y="773" width="12.1857%" height="15" fill="rgb(210,85,47)"/><text x="54.0218%" y="783.50">msql_srv::MysqlInt..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (121 samples, 11.70%)</title><rect x="54.2553%" y="757" width="11.7021%" height="15" fill="rgb(224,206,25)"/><text x="54.5053%" y="767.50">&lt;decor_mem::Shim ..</text></g><g><title>decor_mem::stats::get_qtype (10 samples, 0.97%)</title><rect x="64.9903%" y="741" width="0.9671%" height="15" fill="rgb(243,201,19)"/><text x="65.2403%" y="751.50"></text></g><g><title>sql_parser::parser::parse_statements (10 samples, 0.97%)</title><rect x="64.9903%" y="725" width="0.9671%" height="15" fill="rgb(236,59,4)"/><text x="65.2403%" y="735.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (10 samples, 0.97%)</title><rect x="64.9903%" y="709" width="0.9671%" height="15" fill="rgb(254,179,45)"/><text x="65.2403%" y="719.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (8 samples, 0.77%)</title><rect x="65.1838%" y="693" width="0.7737%" height="15" fill="rgb(226,14,10)"/><text x="65.4338%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (8 samples, 0.77%)</title><rect x="65.1838%" y="677" width="0.7737%" height="15" fill="rgb(244,27,41)"/><text x="65.4338%" y="687.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (3 samples, 0.29%)</title><rect x="65.6673%" y="661" width="0.2901%" height="15" fill="rgb(235,35,32)"/><text x="65.9173%" y="671.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.19%)</title><rect x="65.7640%" y="645" width="0.1934%" height="15" fill="rgb(218,68,31)"/><text x="66.0140%" y="655.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (2 samples, 0.19%)</title><rect x="65.7640%" y="629" width="0.1934%" height="15" fill="rgb(207,120,37)"/><text x="66.0140%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (2 samples, 0.19%)</title><rect x="65.7640%" y="613" width="0.1934%" height="15" fill="rgb(227,98,0)"/><text x="66.0140%" y="623.50"></text></g><g><title>regex::exec::ExecBuilder::build (2 samples, 0.19%)</title><rect x="65.9574%" y="773" width="0.1934%" height="15" fill="rgb(207,7,3)"/><text x="66.2074%" y="783.50"></text></g><g><title>regex::compile::Compiler::compile (2 samples, 0.19%)</title><rect x="65.9574%" y="757" width="0.1934%" height="15" fill="rgb(206,98,19)"/><text x="66.2074%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (30 samples, 2.90%)</title><rect x="66.2476%" y="693" width="2.9014%" height="15" fill="rgb(217,5,26)"/><text x="66.4976%" y="703.50">sq..</text></g><g><title>sql_parser::parser::Parser::expected (28 samples, 2.71%)</title><rect x="66.4410%" y="677" width="2.7079%" height="15" fill="rgb(235,190,38)"/><text x="66.6910%" y="687.50">sq..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (27 samples, 2.61%)</title><rect x="66.5377%" y="661" width="2.6112%" height="15" fill="rgb(247,86,24)"/><text x="66.7877%" y="671.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 2.61%)</title><rect x="66.5377%" y="645" width="2.6112%" height="15" fill="rgb(205,101,16)"/><text x="66.7877%" y="655.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 2.61%)</title><rect x="66.5377%" y="629" width="2.6112%" height="15" fill="rgb(246,168,33)"/><text x="66.7877%" y="639.50">al..</text></g><g><title>alloc::slice::hack::to_vec (27 samples, 2.61%)</title><rect x="66.5377%" y="613" width="2.6112%" height="15" fill="rgb(231,114,1)"/><text x="66.7877%" y="623.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (27 samples, 2.61%)</title><rect x="66.5377%" y="597" width="2.6112%" height="15" fill="rgb(207,184,53)"/><text x="66.7877%" y="607.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (27 samples, 2.61%)</title><rect x="66.5377%" y="581" width="2.6112%" height="15" fill="rgb(224,95,51)"/><text x="66.7877%" y="591.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (27 samples, 2.61%)</title><rect x="66.5377%" y="565" width="2.6112%" height="15" fill="rgb(212,188,45)"/><text x="66.7877%" y="575.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 2.61%)</title><rect x="66.5377%" y="549" width="2.6112%" height="15" fill="rgb(223,154,38)"/><text x="66.7877%" y="559.50">co..</text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 2.61%)</title><rect x="66.5377%" y="533" width="2.6112%" height="15" fill="rgb(251,22,52)"/><text x="66.7877%" y="543.50">__..</text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (33 samples, 3.19%)</title><rect x="66.1509%" y="741" width="3.1915%" height="15" fill="rgb(229,209,22)"/><text x="66.4009%" y="751.50">sql..</text></g><g><title>sql_parser::parser::Parser::check_descent (33 samples, 3.19%)</title><rect x="66.1509%" y="725" width="3.1915%" height="15" fill="rgb(234,138,34)"/><text x="66.4009%" y="735.50">sql..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (33 samples, 3.19%)</title><rect x="66.1509%" y="709" width="3.1915%" height="15" fill="rgb(212,95,11)"/><text x="66.4009%" y="719.50">sql..</text></g><g><title>sql_parser::parser::Parser::parse_infix (4 samples, 0.39%)</title><rect x="69.3424%" y="709" width="0.3868%" height="15" fill="rgb(240,179,47)"/><text x="69.5924%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.48%)</title><rect x="69.3424%" y="725" width="0.4836%" height="15" fill="rgb(240,163,11)"/><text x="69.5924%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (39 samples, 3.77%)</title><rect x="66.1509%" y="773" width="3.7718%" height="15" fill="rgb(236,37,12)"/><text x="66.4009%" y="783.50">sql_..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (39 samples, 3.77%)</title><rect x="66.1509%" y="757" width="3.7718%" height="15" fill="rgb(232,164,16)"/><text x="66.4009%" y="767.50">sql_..</text></g><g><title>sql_parser::parser::Parser::parse_select (6 samples, 0.58%)</title><rect x="69.3424%" y="741" width="0.5803%" height="15" fill="rgb(244,205,15)"/><text x="69.5924%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="69.9226%" y="677" width="0.2901%" height="15" fill="rgb(223,117,47)"/><text x="70.1726%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="69.9226%" y="661" width="0.2901%" height="15" fill="rgb(244,107,35)"/><text x="70.1726%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.29%)</title><rect x="69.9226%" y="645" width="0.2901%" height="15" fill="rgb(205,140,8)"/><text x="70.1726%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.29%)</title><rect x="69.9226%" y="629" width="0.2901%" height="15" fill="rgb(228,84,46)"/><text x="70.1726%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.29%)</title><rect x="69.9226%" y="613" width="0.2901%" height="15" fill="rgb(254,188,9)"/><text x="70.1726%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.29%)</title><rect x="69.9226%" y="597" width="0.2901%" height="15" fill="rgb(206,112,54)"/><text x="70.1726%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="69.9226%" y="581" width="0.2901%" height="15" fill="rgb(216,84,49)"/><text x="70.1726%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.29%)</title><rect x="69.9226%" y="565" width="0.2901%" height="15" fill="rgb(214,194,35)"/><text x="70.1726%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.29%)</title><rect x="69.9226%" y="549" width="0.2901%" height="15" fill="rgb(249,28,3)"/><text x="70.1726%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.29%)</title><rect x="69.9226%" y="533" width="0.2901%" height="15" fill="rgb(222,56,52)"/><text x="70.1726%" y="543.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.29%)</title><rect x="69.9226%" y="517" width="0.2901%" height="15" fill="rgb(245,217,50)"/><text x="70.1726%" y="527.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.29%)</title><rect x="69.9226%" y="501" width="0.2901%" height="15" fill="rgb(213,201,24)"/><text x="70.1726%" y="511.50"></text></g><g><title>_int_malloc (3 samples, 0.29%)</title><rect x="69.9226%" y="485" width="0.2901%" height="15" fill="rgb(248,116,28)"/><text x="70.1726%" y="495.50"></text></g><g><title>sysmalloc (2 samples, 0.19%)</title><rect x="70.0193%" y="469" width="0.1934%" height="15" fill="rgb(219,72,43)"/><text x="70.2693%" y="479.50"></text></g><g><title>__GI___mprotect (2 samples, 0.19%)</title><rect x="70.0193%" y="453" width="0.1934%" height="15" fill="rgb(209,138,14)"/><text x="70.2693%" y="463.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (5 samples, 0.48%)</title><rect x="69.9226%" y="773" width="0.4836%" height="15" fill="rgb(222,18,33)"/><text x="70.1726%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (5 samples, 0.48%)</title><rect x="69.9226%" y="757" width="0.4836%" height="15" fill="rgb(213,199,7)"/><text x="70.1726%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.48%)</title><rect x="69.9226%" y="741" width="0.4836%" height="15" fill="rgb(250,110,10)"/><text x="70.1726%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (5 samples, 0.48%)</title><rect x="69.9226%" y="725" width="0.4836%" height="15" fill="rgb(248,123,6)"/><text x="70.1726%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (5 samples, 0.48%)</title><rect x="69.9226%" y="709" width="0.4836%" height="15" fill="rgb(206,91,31)"/><text x="70.1726%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::expected (5 samples, 0.48%)</title><rect x="69.9226%" y="693" width="0.4836%" height="15" fill="rgb(211,154,13)"/><text x="70.1726%" y="703.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.19%)</title><rect x="70.2128%" y="677" width="0.1934%" height="15" fill="rgb(225,148,7)"/><text x="70.4628%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.19%)</title><rect x="70.2128%" y="661" width="0.1934%" height="15" fill="rgb(220,160,43)"/><text x="70.4628%" y="671.50"></text></g><g><title>core::fmt::write (2 samples, 0.19%)</title><rect x="70.2128%" y="645" width="0.1934%" height="15" fill="rgb(213,52,39)"/><text x="70.4628%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (3 samples, 0.29%)</title><rect x="70.4062%" y="773" width="0.2901%" height="15" fill="rgb(243,137,7)"/><text x="70.6562%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.29%)</title><rect x="70.4062%" y="757" width="0.2901%" height="15" fill="rgb(230,79,13)"/><text x="70.6562%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (3 samples, 0.29%)</title><rect x="70.4062%" y="741" width="0.2901%" height="15" fill="rgb(247,105,23)"/><text x="70.6562%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.29%)</title><rect x="70.4062%" y="725" width="0.2901%" height="15" fill="rgb(223,179,41)"/><text x="70.6562%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (2 samples, 0.19%)</title><rect x="70.5029%" y="709" width="0.1934%" height="15" fill="rgb(218,9,34)"/><text x="70.7529%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (3 samples, 0.29%)</title><rect x="70.7930%" y="725" width="0.2901%" height="15" fill="rgb(222,106,8)"/><text x="71.0430%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (9 samples, 0.87%)</title><rect x="70.6963%" y="773" width="0.8704%" height="15" fill="rgb(211,220,0)"/><text x="70.9463%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (9 samples, 0.87%)</title><rect x="70.6963%" y="757" width="0.8704%" height="15" fill="rgb(229,52,16)"/><text x="70.9463%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (8 samples, 0.77%)</title><rect x="70.7930%" y="741" width="0.7737%" height="15" fill="rgb(212,155,18)"/><text x="71.0430%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (4 samples, 0.39%)</title><rect x="71.1799%" y="725" width="0.3868%" height="15" fill="rgb(242,21,14)"/><text x="71.4299%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (2 samples, 0.19%)</title><rect x="71.3733%" y="709" width="0.1934%" height="15" fill="rgb(222,19,48)"/><text x="71.6233%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (2 samples, 0.19%)</title><rect x="71.5667%" y="773" width="0.1934%" height="15" fill="rgb(232,45,27)"/><text x="71.8167%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (2 samples, 0.19%)</title><rect x="71.5667%" y="757" width="0.1934%" height="15" fill="rgb(249,103,42)"/><text x="71.8167%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (2 samples, 0.19%)</title><rect x="71.5667%" y="741" width="0.1934%" height="15" fill="rgb(246,81,33)"/><text x="71.8167%" y="751.50"></text></g><g><title>_int_free (2 samples, 0.19%)</title><rect x="71.8569%" y="549" width="0.1934%" height="15" fill="rgb(252,33,42)"/><text x="72.1069%" y="559.50"></text></g><g><title>start_thread (5 samples, 0.48%)</title><rect x="71.7602%" y="773" width="0.4836%" height="15" fill="rgb(209,212,41)"/><text x="72.0102%" y="783.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (5 samples, 0.48%)</title><rect x="71.7602%" y="757" width="0.4836%" height="15" fill="rgb(207,154,6)"/><text x="72.0102%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (5 samples, 0.48%)</title><rect x="71.7602%" y="741" width="0.4836%" height="15" fill="rgb(223,64,47)"/><text x="72.0102%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (5 samples, 0.48%)</title><rect x="71.7602%" y="725" width="0.4836%" height="15" fill="rgb(211,161,38)"/><text x="72.0102%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (5 samples, 0.48%)</title><rect x="71.7602%" y="709" width="0.4836%" height="15" fill="rgb(219,138,40)"/><text x="72.0102%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 0.48%)</title><rect x="71.7602%" y="693" width="0.4836%" height="15" fill="rgb(241,228,46)"/><text x="72.0102%" y="703.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (5 samples, 0.48%)</title><rect x="71.7602%" y="677" width="0.4836%" height="15" fill="rgb(223,209,38)"/><text x="72.0102%" y="687.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (5 samples, 0.48%)</title><rect x="71.7602%" y="661" width="0.4836%" height="15" fill="rgb(236,164,45)"/><text x="72.0102%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (5 samples, 0.48%)</title><rect x="71.7602%" y="645" width="0.4836%" height="15" fill="rgb(231,15,5)"/><text x="72.0102%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (5 samples, 0.48%)</title><rect x="71.7602%" y="629" width="0.4836%" height="15" fill="rgb(252,35,15)"/><text x="72.0102%" y="639.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (5 samples, 0.48%)</title><rect x="71.7602%" y="613" width="0.4836%" height="15" fill="rgb(248,181,18)"/><text x="72.0102%" y="623.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (4 samples, 0.39%)</title><rect x="71.8569%" y="597" width="0.3868%" height="15" fill="rgb(233,39,42)"/><text x="72.1069%" y="607.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (4 samples, 0.39%)</title><rect x="71.8569%" y="581" width="0.3868%" height="15" fill="rgb(238,110,33)"/><text x="72.1069%" y="591.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (4 samples, 0.39%)</title><rect x="71.8569%" y="565" width="0.3868%" height="15" fill="rgb(233,195,10)"/><text x="72.1069%" y="575.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.19%)</title><rect x="72.0503%" y="549" width="0.1934%" height="15" fill="rgb(254,105,3)"/><text x="72.3003%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.19%)</title><rect x="72.0503%" y="533" width="0.1934%" height="15" fill="rgb(221,225,9)"/><text x="72.3003%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.19%)</title><rect x="72.0503%" y="517" width="0.1934%" height="15" fill="rgb(224,227,45)"/><text x="72.3003%" y="527.50"></text></g><g><title>__GI___openat (2 samples, 0.19%)</title><rect x="72.2437%" y="565" width="0.1934%" height="15" fill="rgb(229,198,43)"/><text x="72.4937%" y="575.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.29%)</title><rect x="72.2437%" y="773" width="0.2901%" height="15" fill="rgb(206,209,35)"/><text x="72.4937%" y="783.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.29%)</title><rect x="72.2437%" y="757" width="0.2901%" height="15" fill="rgb(245,195,53)"/><text x="72.4937%" y="767.50"></text></g><g><title>std::panicking::try (3 samples, 0.29%)</title><rect x="72.2437%" y="741" width="0.2901%" height="15" fill="rgb(240,92,26)"/><text x="72.4937%" y="751.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.29%)</title><rect x="72.2437%" y="725" width="0.2901%" height="15" fill="rgb(207,40,23)"/><text x="72.4937%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.29%)</title><rect x="72.2437%" y="709" width="0.2901%" height="15" fill="rgb(223,111,35)"/><text x="72.4937%" y="719.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.29%)</title><rect x="72.2437%" y="693" width="0.2901%" height="15" fill="rgb(229,147,28)"/><text x="72.4937%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.29%)</title><rect x="72.2437%" y="677" width="0.2901%" height="15" fill="rgb(211,29,28)"/><text x="72.4937%" y="687.50"></text></g><g><title>lobsters_microbenchmarks::main (3 samples, 0.29%)</title><rect x="72.2437%" y="661" width="0.2901%" height="15" fill="rgb(228,72,33)"/><text x="72.4937%" y="671.50"></text></g><g><title>hwloc::Topology::new (3 samples, 0.29%)</title><rect x="72.2437%" y="645" width="0.2901%" height="15" fill="rgb(205,214,31)"/><text x="72.4937%" y="655.50"></text></g><g><title>hwloc_topology_load (3 samples, 0.29%)</title><rect x="72.2437%" y="629" width="0.2901%" height="15" fill="rgb(224,111,15)"/><text x="72.4937%" y="639.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.29%)</title><rect x="72.2437%" y="613" width="0.2901%" height="15" fill="rgb(253,21,26)"/><text x="72.4937%" y="623.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.29%)</title><rect x="72.2437%" y="597" width="0.2901%" height="15" fill="rgb(245,139,43)"/><text x="72.4937%" y="607.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.29%)</title><rect x="72.2437%" y="581" width="0.2901%" height="15" fill="rgb(252,170,7)"/><text x="72.4937%" y="591.50"></text></g><g><title>[unknown] (662 samples, 64.02%)</title><rect x="8.6074%" y="789" width="64.0232%" height="15" fill="rgb(231,118,14)"/><text x="8.8574%" y="799.50">[unknown]</text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (4 samples, 0.39%)</title><rect x="72.8240%" y="629" width="0.3868%" height="15" fill="rgb(238,83,0)"/><text x="73.0740%" y="639.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (2 samples, 0.19%)</title><rect x="73.0174%" y="613" width="0.1934%" height="15" fill="rgb(221,39,39)"/><text x="73.2674%" y="623.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (9 samples, 0.87%)</title><rect x="72.7273%" y="645" width="0.8704%" height="15" fill="rgb(222,119,46)"/><text x="72.9773%" y="655.50"></text></g><g><title>log::__private_api_log (4 samples, 0.39%)</title><rect x="73.2108%" y="629" width="0.3868%" height="15" fill="rgb(222,165,49)"/><text x="73.4608%" y="639.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (4 samples, 0.39%)</title><rect x="73.2108%" y="613" width="0.3868%" height="15" fill="rgb(219,113,52)"/><text x="73.4608%" y="623.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (4 samples, 0.39%)</title><rect x="73.2108%" y="597" width="0.3868%" height="15" fill="rgb(214,7,15)"/><text x="73.4608%" y="607.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (4 samples, 0.39%)</title><rect x="73.2108%" y="581" width="0.3868%" height="15" fill="rgb(235,32,4)"/><text x="73.4608%" y="591.50"></text></g><g><title>std::io::stdio::_eprint (4 samples, 0.39%)</title><rect x="73.2108%" y="565" width="0.3868%" height="15" fill="rgb(238,90,54)"/><text x="73.4608%" y="575.50"></text></g><g><title>std::io::stdio::print_to (4 samples, 0.39%)</title><rect x="73.2108%" y="549" width="0.3868%" height="15" fill="rgb(213,208,19)"/><text x="73.4608%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (4 samples, 0.39%)</title><rect x="73.2108%" y="533" width="0.3868%" height="15" fill="rgb(233,156,4)"/><text x="73.4608%" y="543.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (4 samples, 0.39%)</title><rect x="73.2108%" y="517" width="0.3868%" height="15" fill="rgb(207,194,5)"/><text x="73.4608%" y="527.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (4 samples, 0.39%)</title><rect x="73.2108%" y="501" width="0.3868%" height="15" fill="rgb(206,111,30)"/><text x="73.4608%" y="511.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (4 samples, 0.39%)</title><rect x="73.2108%" y="485" width="0.3868%" height="15" fill="rgb(243,70,54)"/><text x="73.4608%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.39%)</title><rect x="73.2108%" y="469" width="0.3868%" height="15" fill="rgb(242,28,8)"/><text x="73.4608%" y="479.50"></text></g><g><title>core::fmt::write (4 samples, 0.39%)</title><rect x="73.2108%" y="453" width="0.3868%" height="15" fill="rgb(219,106,18)"/><text x="73.4608%" y="463.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.39%)</title><rect x="73.2108%" y="437" width="0.3868%" height="15" fill="rgb(244,222,10)"/><text x="73.4608%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (4 samples, 0.39%)</title><rect x="73.2108%" y="421" width="0.3868%" height="15" fill="rgb(236,179,52)"/><text x="73.4608%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (4 samples, 0.39%)</title><rect x="73.2108%" y="405" width="0.3868%" height="15" fill="rgb(213,23,39)"/><text x="73.4608%" y="415.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.39%)</title><rect x="73.2108%" y="389" width="0.3868%" height="15" fill="rgb(238,48,10)"/><text x="73.4608%" y="399.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (4 samples, 0.39%)</title><rect x="73.2108%" y="373" width="0.3868%" height="15" fill="rgb(251,196,23)"/><text x="73.4608%" y="383.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (4 samples, 0.39%)</title><rect x="73.2108%" y="357" width="0.3868%" height="15" fill="rgb(250,152,24)"/><text x="73.4608%" y="367.50"></text></g><g><title>__libc_write (4 samples, 0.39%)</title><rect x="73.2108%" y="341" width="0.3868%" height="15" fill="rgb(209,150,17)"/><text x="73.4608%" y="351.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.39%)</title><rect x="73.2108%" y="325" width="0.3868%" height="15" fill="rgb(234,202,34)"/><text x="73.4608%" y="335.50"></text></g><g><title>do_syscall_64 (4 samples, 0.39%)</title><rect x="73.2108%" y="309" width="0.3868%" height="15" fill="rgb(253,148,53)"/><text x="73.4608%" y="319.50"></text></g><g><title>ksys_write (4 samples, 0.39%)</title><rect x="73.2108%" y="293" width="0.3868%" height="15" fill="rgb(218,129,16)"/><text x="73.4608%" y="303.50"></text></g><g><title>vfs_write (4 samples, 0.39%)</title><rect x="73.2108%" y="277" width="0.3868%" height="15" fill="rgb(216,85,19)"/><text x="73.4608%" y="287.50"></text></g><g><title>tty_write (4 samples, 0.39%)</title><rect x="73.2108%" y="261" width="0.3868%" height="15" fill="rgb(235,228,7)"/><text x="73.4608%" y="271.50"></text></g><g><title>n_tty_write (4 samples, 0.39%)</title><rect x="73.2108%" y="245" width="0.3868%" height="15" fill="rgb(245,175,0)"/><text x="73.4608%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.19%)</title><rect x="73.5977%" y="645" width="0.1934%" height="15" fill="rgb(208,168,36)"/><text x="73.8477%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.19%)</title><rect x="73.5977%" y="629" width="0.1934%" height="15" fill="rgb(246,171,24)"/><text x="73.8477%" y="639.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.19%)</title><rect x="73.7911%" y="357" width="0.1934%" height="15" fill="rgb(215,142,24)"/><text x="74.0411%" y="367.50"></text></g><g><title>dequeue_entity (2 samples, 0.19%)</title><rect x="73.7911%" y="341" width="0.1934%" height="15" fill="rgb(250,187,7)"/><text x="74.0411%" y="351.50"></text></g><g><title>update_load_avg (2 samples, 0.19%)</title><rect x="73.7911%" y="325" width="0.1934%" height="15" fill="rgb(228,66,33)"/><text x="74.0411%" y="335.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.29%)</title><rect x="73.7911%" y="629" width="0.2901%" height="15" fill="rgb(234,215,21)"/><text x="74.0411%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.29%)</title><rect x="73.7911%" y="613" width="0.2901%" height="15" fill="rgb(222,191,20)"/><text x="74.0411%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (3 samples, 0.29%)</title><rect x="73.7911%" y="597" width="0.2901%" height="15" fill="rgb(245,79,54)"/><text x="74.0411%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (3 samples, 0.29%)</title><rect x="73.7911%" y="581" width="0.2901%" height="15" fill="rgb(240,10,37)"/><text x="74.0411%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (3 samples, 0.29%)</title><rect x="73.7911%" y="565" width="0.2901%" height="15" fill="rgb(214,192,32)"/><text x="74.0411%" y="575.50"></text></g><g><title>__libc_recv (3 samples, 0.29%)</title><rect x="73.7911%" y="549" width="0.2901%" height="15" fill="rgb(209,36,54)"/><text x="74.0411%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.29%)</title><rect x="73.7911%" y="533" width="0.2901%" height="15" fill="rgb(220,10,11)"/><text x="74.0411%" y="543.50"></text></g><g><title>do_syscall_64 (3 samples, 0.29%)</title><rect x="73.7911%" y="517" width="0.2901%" height="15" fill="rgb(221,106,17)"/><text x="74.0411%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (3 samples, 0.29%)</title><rect x="73.7911%" y="501" width="0.2901%" height="15" fill="rgb(251,142,44)"/><text x="74.0411%" y="511.50"></text></g><g><title>__sys_recvfrom (3 samples, 0.29%)</title><rect x="73.7911%" y="485" width="0.2901%" height="15" fill="rgb(238,13,15)"/><text x="74.0411%" y="495.50"></text></g><g><title>inet_recvmsg (3 samples, 0.29%)</title><rect x="73.7911%" y="469" width="0.2901%" height="15" fill="rgb(208,107,27)"/><text x="74.0411%" y="479.50"></text></g><g><title>tcp_recvmsg (3 samples, 0.29%)</title><rect x="73.7911%" y="453" width="0.2901%" height="15" fill="rgb(205,136,37)"/><text x="74.0411%" y="463.50"></text></g><g><title>sk_wait_data (3 samples, 0.29%)</title><rect x="73.7911%" y="437" width="0.2901%" height="15" fill="rgb(250,205,27)"/><text x="74.0411%" y="447.50"></text></g><g><title>wait_woken (3 samples, 0.29%)</title><rect x="73.7911%" y="421" width="0.2901%" height="15" fill="rgb(210,80,43)"/><text x="74.0411%" y="431.50"></text></g><g><title>schedule_timeout (3 samples, 0.29%)</title><rect x="73.7911%" y="405" width="0.2901%" height="15" fill="rgb(247,160,36)"/><text x="74.0411%" y="415.50"></text></g><g><title>schedule (3 samples, 0.29%)</title><rect x="73.7911%" y="389" width="0.2901%" height="15" fill="rgb(234,13,49)"/><text x="74.0411%" y="399.50"></text></g><g><title>__schedule (3 samples, 0.29%)</title><rect x="73.7911%" y="373" width="0.2901%" height="15" fill="rgb(234,122,0)"/><text x="74.0411%" y="383.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (5 samples, 0.48%)</title><rect x="73.7911%" y="645" width="0.4836%" height="15" fill="rgb(207,146,38)"/><text x="74.0411%" y="655.50"></text></g><g><title>__memset_avx2_erms (2 samples, 0.19%)</title><rect x="74.0812%" y="629" width="0.1934%" height="15" fill="rgb(207,177,25)"/><text x="74.3312%" y="639.50"></text></g><g><title>__dev_queue_xmit (3 samples, 0.29%)</title><rect x="74.4681%" y="373" width="0.2901%" height="15" fill="rgb(211,178,42)"/><text x="74.7181%" y="383.50"></text></g><g><title>dev_hard_start_xmit (2 samples, 0.19%)</title><rect x="74.5648%" y="357" width="0.1934%" height="15" fill="rgb(230,69,54)"/><text x="74.8148%" y="367.50"></text></g><g><title>loopback_xmit (2 samples, 0.19%)</title><rect x="74.5648%" y="341" width="0.1934%" height="15" fill="rgb(214,135,41)"/><text x="74.8148%" y="351.50"></text></g><g><title>enqueue_task (2 samples, 0.19%)</title><rect x="74.7582%" y="85" width="0.1934%" height="15" fill="rgb(237,67,25)"/><text x="75.0082%" y="95.50"></text></g><g><title>ip_local_deliver (3 samples, 0.29%)</title><rect x="74.7582%" y="245" width="0.2901%" height="15" fill="rgb(222,189,50)"/><text x="75.0082%" y="255.50"></text></g><g><title>ip_local_deliver_finish (3 samples, 0.29%)</title><rect x="74.7582%" y="229" width="0.2901%" height="15" fill="rgb(245,148,34)"/><text x="75.0082%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (3 samples, 0.29%)</title><rect x="74.7582%" y="213" width="0.2901%" height="15" fill="rgb(222,29,6)"/><text x="75.0082%" y="223.50"></text></g><g><title>tcp_v4_rcv (3 samples, 0.29%)</title><rect x="74.7582%" y="197" width="0.2901%" height="15" fill="rgb(221,189,43)"/><text x="75.0082%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (3 samples, 0.29%)</title><rect x="74.7582%" y="181" width="0.2901%" height="15" fill="rgb(207,36,27)"/><text x="75.0082%" y="191.50"></text></g><g><title>tcp_rcv_established (3 samples, 0.29%)</title><rect x="74.7582%" y="165" width="0.2901%" height="15" fill="rgb(217,90,24)"/><text x="75.0082%" y="175.50"></text></g><g><title>sock_def_readable (3 samples, 0.29%)</title><rect x="74.7582%" y="149" width="0.2901%" height="15" fill="rgb(224,66,35)"/><text x="75.0082%" y="159.50"></text></g><g><title>__wake_up_common_lock (3 samples, 0.29%)</title><rect x="74.7582%" y="133" width="0.2901%" height="15" fill="rgb(221,13,50)"/><text x="75.0082%" y="143.50"></text></g><g><title>__wake_up_common (3 samples, 0.29%)</title><rect x="74.7582%" y="117" width="0.2901%" height="15" fill="rgb(236,68,49)"/><text x="75.0082%" y="127.50"></text></g><g><title>try_to_wake_up (3 samples, 0.29%)</title><rect x="74.7582%" y="101" width="0.2901%" height="15" fill="rgb(229,146,28)"/><text x="75.0082%" y="111.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (25 samples, 2.42%)</title><rect x="72.7273%" y="661" width="2.4178%" height="15" fill="rgb(225,31,38)"/><text x="72.9773%" y="671.50">ms..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (8 samples, 0.77%)</title><rect x="74.3714%" y="645" width="0.7737%" height="15" fill="rgb(250,208,3)"/><text x="74.6214%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (8 samples, 0.77%)</title><rect x="74.3714%" y="629" width="0.7737%" height="15" fill="rgb(246,54,23)"/><text x="74.6214%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (8 samples, 0.77%)</title><rect x="74.3714%" y="613" width="0.7737%" height="15" fill="rgb(243,76,11)"/><text x="74.6214%" y="623.50"></text></g><g><title>__libc_send (8 samples, 0.77%)</title><rect x="74.3714%" y="597" width="0.7737%" height="15" fill="rgb(245,21,50)"/><text x="74.6214%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.77%)</title><rect x="74.3714%" y="581" width="0.7737%" height="15" fill="rgb(228,9,43)"/><text x="74.6214%" y="591.50"></text></g><g><title>do_syscall_64 (8 samples, 0.77%)</title><rect x="74.3714%" y="565" width="0.7737%" height="15" fill="rgb(208,100,47)"/><text x="74.6214%" y="575.50"></text></g><g><title>__x64_sys_sendto (8 samples, 0.77%)</title><rect x="74.3714%" y="549" width="0.7737%" height="15" fill="rgb(232,26,8)"/><text x="74.6214%" y="559.50"></text></g><g><title>__sys_sendto (8 samples, 0.77%)</title><rect x="74.3714%" y="533" width="0.7737%" height="15" fill="rgb(216,166,38)"/><text x="74.6214%" y="543.50"></text></g><g><title>sock_sendmsg (8 samples, 0.77%)</title><rect x="74.3714%" y="517" width="0.7737%" height="15" fill="rgb(251,202,51)"/><text x="74.6214%" y="527.50"></text></g><g><title>tcp_sendmsg (8 samples, 0.77%)</title><rect x="74.3714%" y="501" width="0.7737%" height="15" fill="rgb(254,216,34)"/><text x="74.6214%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (7 samples, 0.68%)</title><rect x="74.4681%" y="485" width="0.6770%" height="15" fill="rgb(251,32,27)"/><text x="74.7181%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (7 samples, 0.68%)</title><rect x="74.4681%" y="469" width="0.6770%" height="15" fill="rgb(208,127,28)"/><text x="74.7181%" y="479.50"></text></g><g><title>tcp_write_xmit (7 samples, 0.68%)</title><rect x="74.4681%" y="453" width="0.6770%" height="15" fill="rgb(224,137,22)"/><text x="74.7181%" y="463.50"></text></g><g><title>__tcp_transmit_skb (7 samples, 0.68%)</title><rect x="74.4681%" y="437" width="0.6770%" height="15" fill="rgb(254,70,32)"/><text x="74.7181%" y="447.50"></text></g><g><title>__ip_queue_xmit (7 samples, 0.68%)</title><rect x="74.4681%" y="421" width="0.6770%" height="15" fill="rgb(229,75,37)"/><text x="74.7181%" y="431.50"></text></g><g><title>ip_output (7 samples, 0.68%)</title><rect x="74.4681%" y="405" width="0.6770%" height="15" fill="rgb(252,64,23)"/><text x="74.7181%" y="415.50"></text></g><g><title>ip_finish_output2 (7 samples, 0.68%)</title><rect x="74.4681%" y="389" width="0.6770%" height="15" fill="rgb(232,162,48)"/><text x="74.7181%" y="399.50"></text></g><g><title>__local_bh_enable_ip (4 samples, 0.39%)</title><rect x="74.7582%" y="373" width="0.3868%" height="15" fill="rgb(246,160,12)"/><text x="75.0082%" y="383.50"></text></g><g><title>do_softirq (4 samples, 0.39%)</title><rect x="74.7582%" y="357" width="0.3868%" height="15" fill="rgb(247,166,0)"/><text x="75.0082%" y="367.50"></text></g><g><title>do_softirq_own_stack (4 samples, 0.39%)</title><rect x="74.7582%" y="341" width="0.3868%" height="15" fill="rgb(249,219,21)"/><text x="75.0082%" y="351.50"></text></g><g><title>__do_softirq (4 samples, 0.39%)</title><rect x="74.7582%" y="325" width="0.3868%" height="15" fill="rgb(205,209,3)"/><text x="75.0082%" y="335.50"></text></g><g><title>net_rx_action (4 samples, 0.39%)</title><rect x="74.7582%" y="309" width="0.3868%" height="15" fill="rgb(243,44,1)"/><text x="75.0082%" y="319.50"></text></g><g><title>process_backlog (4 samples, 0.39%)</title><rect x="74.7582%" y="293" width="0.3868%" height="15" fill="rgb(206,159,16)"/><text x="75.0082%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (4 samples, 0.39%)</title><rect x="74.7582%" y="277" width="0.3868%" height="15" fill="rgb(244,77,30)"/><text x="75.0082%" y="287.50"></text></g><g><title>ip_rcv (4 samples, 0.39%)</title><rect x="74.7582%" y="261" width="0.3868%" height="15" fill="rgb(218,69,12)"/><text x="75.0082%" y="271.50"></text></g><g><title>__GI___clone (28 samples, 2.71%)</title><rect x="72.6306%" y="789" width="2.7079%" height="15" fill="rgb(212,87,7)"/><text x="72.8806%" y="799.50">__..</text></g><g><title>start_thread (28 samples, 2.71%)</title><rect x="72.6306%" y="773" width="2.7079%" height="15" fill="rgb(245,114,25)"/><text x="72.8806%" y="783.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (27 samples, 2.61%)</title><rect x="72.7273%" y="757" width="2.6112%" height="15" fill="rgb(210,61,42)"/><text x="72.9773%" y="767.50">st..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (27 samples, 2.61%)</title><rect x="72.7273%" y="741" width="2.6112%" height="15" fill="rgb(211,52,33)"/><text x="72.9773%" y="751.50">&lt;a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (27 samples, 2.61%)</title><rect x="72.7273%" y="725" width="2.6112%" height="15" fill="rgb(234,58,33)"/><text x="72.9773%" y="735.50">&lt;a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (27 samples, 2.61%)</title><rect x="72.7273%" y="709" width="2.6112%" height="15" fill="rgb(220,115,36)"/><text x="72.9773%" y="719.50">co..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27 samples, 2.61%)</title><rect x="72.7273%" y="693" width="2.6112%" height="15" fill="rgb(243,153,54)"/><text x="72.9773%" y="703.50">st..</text></g><g><title>decor_mem::Shim::run_on_tcp (27 samples, 2.61%)</title><rect x="72.7273%" y="677" width="2.6112%" height="15" fill="rgb(251,47,18)"/><text x="72.9773%" y="687.50">de..</text></g><g><title>mysql::conn::Conn::new (2 samples, 0.19%)</title><rect x="75.1451%" y="661" width="0.1934%" height="15" fill="rgb(242,102,42)"/><text x="75.3951%" y="671.50"></text></g><g><title>__mmdrop (2 samples, 0.19%)</title><rect x="75.8221%" y="325" width="0.1934%" height="15" fill="rgb(234,31,38)"/><text x="76.0721%" y="335.50"></text></g><g><title>__free_pages_ok (2 samples, 0.19%)</title><rect x="75.8221%" y="309" width="0.1934%" height="15" fill="rgb(221,117,51)"/><text x="76.0721%" y="319.50"></text></g><g><title>__memcg_kmem_uncharge_page (2 samples, 0.19%)</title><rect x="75.8221%" y="293" width="0.1934%" height="15" fill="rgb(212,20,18)"/><text x="76.0721%" y="303.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (230 samples, 22.24%)</title><rect x="76.0155%" y="309" width="22.2437%" height="15" fill="rgb(245,133,36)"/><text x="76.2655%" y="319.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (230 samples, 22.24%)</title><rect x="76.0155%" y="293" width="22.2437%" height="15" fill="rgb(212,6,19)"/><text x="76.2655%" y="303.50">native_write_msr</text></g><g><title>__perf_event_task_sched_in (231 samples, 22.34%)</title><rect x="76.0155%" y="325" width="22.3404%" height="15" fill="rgb(218,1,36)"/><text x="76.2655%" y="335.50">__perf_event_task_sched_in</text></g><g><title>cpu_stop_queue_work (237 samples, 22.92%)</title><rect x="75.5319%" y="405" width="22.9207%" height="15" fill="rgb(246,84,54)"/><text x="75.7819%" y="415.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (237 samples, 22.92%)</title><rect x="75.5319%" y="389" width="22.9207%" height="15" fill="rgb(242,110,6)"/><text x="75.7819%" y="399.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (237 samples, 22.92%)</title><rect x="75.5319%" y="373" width="22.9207%" height="15" fill="rgb(214,47,5)"/><text x="75.7819%" y="383.50">preempt_schedule_common</text></g><g><title>__schedule (237 samples, 22.92%)</title><rect x="75.5319%" y="357" width="22.9207%" height="15" fill="rgb(218,159,25)"/><text x="75.7819%" y="367.50">__schedule</text></g><g><title>finish_task_switch (235 samples, 22.73%)</title><rect x="75.7253%" y="341" width="22.7273%" height="15" fill="rgb(215,211,28)"/><text x="75.9753%" y="351.50">finish_task_switch</text></g><g><title>do_syscall_64 (238 samples, 23.02%)</title><rect x="75.5319%" y="485" width="23.0174%" height="15" fill="rgb(238,59,32)"/><text x="75.7819%" y="495.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (238 samples, 23.02%)</title><rect x="75.5319%" y="469" width="23.0174%" height="15" fill="rgb(226,82,3)"/><text x="75.7819%" y="479.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (238 samples, 23.02%)</title><rect x="75.5319%" y="453" width="23.0174%" height="15" fill="rgb(240,164,32)"/><text x="75.7819%" y="463.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (238 samples, 23.02%)</title><rect x="75.5319%" y="437" width="23.0174%" height="15" fill="rgb(232,46,7)"/><text x="75.7819%" y="447.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (238 samples, 23.02%)</title><rect x="75.5319%" y="421" width="23.0174%" height="15" fill="rgb(229,129,53)"/><text x="75.7819%" y="431.50">stop_one_cpu</text></g><g><title>entry_SYSCALL_64 (239 samples, 23.11%)</title><rect x="75.5319%" y="501" width="23.1141%" height="15" fill="rgb(234,188,29)"/><text x="75.7819%" y="511.50">entry_SYSCALL_64</text></g><g><title>__libc_start_main (242 samples, 23.40%)</title><rect x="75.3385%" y="773" width="23.4043%" height="15" fill="rgb(246,141,4)"/><text x="75.5885%" y="783.50">__libc_start_main</text></g><g><title>main (242 samples, 23.40%)</title><rect x="75.3385%" y="757" width="23.4043%" height="15" fill="rgb(229,23,39)"/><text x="75.5885%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (242 samples, 23.40%)</title><rect x="75.3385%" y="741" width="23.4043%" height="15" fill="rgb(206,12,3)"/><text x="75.5885%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (242 samples, 23.40%)</title><rect x="75.3385%" y="725" width="23.4043%" height="15" fill="rgb(252,226,20)"/><text x="75.5885%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (242 samples, 23.40%)</title><rect x="75.3385%" y="709" width="23.4043%" height="15" fill="rgb(216,123,35)"/><text x="75.5885%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (242 samples, 23.40%)</title><rect x="75.3385%" y="693" width="23.4043%" height="15" fill="rgb(212,68,40)"/><text x="75.5885%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (242 samples, 23.40%)</title><rect x="75.3385%" y="677" width="23.4043%" height="15" fill="rgb(254,125,32)"/><text x="75.5885%" y="687.50">core::ops::function::impls::&lt;impl cor..</text></g><g><title>std::rt::lang_start::_{{closure}} (242 samples, 23.40%)</title><rect x="75.3385%" y="661" width="23.4043%" height="15" fill="rgb(253,97,22)"/><text x="75.5885%" y="671.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (242 samples, 23.40%)</title><rect x="75.3385%" y="645" width="23.4043%" height="15" fill="rgb(241,101,14)"/><text x="75.5885%" y="655.50">std::sys_common::backtrace::__rust_be..</text></g><g><title>lobsters_microbenchmarks::main (242 samples, 23.40%)</title><rect x="75.3385%" y="629" width="23.4043%" height="15" fill="rgb(238,103,29)"/><text x="75.5885%" y="639.50">lobsters_microbenchmarks::main</text></g><g><title>hwloc::Topology::new (241 samples, 23.31%)</title><rect x="75.4352%" y="613" width="23.3075%" height="15" fill="rgb(233,195,47)"/><text x="75.6852%" y="623.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (241 samples, 23.31%)</title><rect x="75.4352%" y="597" width="23.3075%" height="15" fill="rgb(246,218,30)"/><text x="75.6852%" y="607.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (241 samples, 23.31%)</title><rect x="75.4352%" y="581" width="23.3075%" height="15" fill="rgb(219,145,47)"/><text x="75.6852%" y="591.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (241 samples, 23.31%)</title><rect x="75.4352%" y="565" width="23.3075%" height="15" fill="rgb(243,12,26)"/><text x="75.6852%" y="575.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (241 samples, 23.31%)</title><rect x="75.4352%" y="549" width="23.3075%" height="15" fill="rgb(214,87,16)"/><text x="75.6852%" y="559.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (241 samples, 23.31%)</title><rect x="75.4352%" y="533" width="23.3075%" height="15" fill="rgb(208,99,42)"/><text x="75.6852%" y="543.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (241 samples, 23.31%)</title><rect x="75.4352%" y="517" width="23.3075%" height="15" fill="rgb(253,99,2)"/><text x="75.6852%" y="527.50">__GI___sched_setaffinity_new</text></g><g><title>_start (243 samples, 23.50%)</title><rect x="75.3385%" y="789" width="23.5010%" height="15" fill="rgb(220,168,23)"/><text x="75.5885%" y="799.50">_start</text></g><g><title>entry_SYSCALL_64 (2 samples, 0.19%)</title><rect x="99.1296%" y="789" width="0.1934%" height="15" fill="rgb(242,38,24)"/><text x="99.3796%" y="799.50"></text></g><g><title>do_syscall_64 (2 samples, 0.19%)</title><rect x="99.1296%" y="773" width="0.1934%" height="15" fill="rgb(225,182,9)"/><text x="99.3796%" y="783.50"></text></g><g><title>lobsters-microb (1,028 samples, 99.42%)</title><rect x="0.0000%" y="805" width="99.4197%" height="15" fill="rgb(243,178,37)"/><text x="0.2500%" y="815.50">lobsters-microb</text></g><g><title>all (1,034 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(232,139,19)"/><text x="0.2500%" y="831.50"></text></g><g><title>perf (6 samples, 0.58%)</title><rect x="99.4197%" y="805" width="0.5803%" height="15" fill="rgb(225,201,24)"/><text x="99.6697%" y="815.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.58%)</title><rect x="99.4197%" y="789" width="0.5803%" height="15" fill="rgb(221,47,46)"/><text x="99.6697%" y="799.50"></text></g><g><title>do_syscall_64 (6 samples, 0.58%)</title><rect x="99.4197%" y="773" width="0.5803%" height="15" fill="rgb(249,23,13)"/><text x="99.6697%" y="783.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.58%)</title><rect x="99.4197%" y="757" width="0.5803%" height="15" fill="rgb(219,9,5)"/><text x="99.6697%" y="767.50"></text></g><g><title>do_execve (6 samples, 0.58%)</title><rect x="99.4197%" y="741" width="0.5803%" height="15" fill="rgb(254,171,16)"/><text x="99.6697%" y="751.50"></text></g><g><title>__do_execve_file (6 samples, 0.58%)</title><rect x="99.4197%" y="725" width="0.5803%" height="15" fill="rgb(230,171,20)"/><text x="99.6697%" y="735.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.58%)</title><rect x="99.4197%" y="709" width="0.5803%" height="15" fill="rgb(210,71,41)"/><text x="99.6697%" y="719.50"></text></g><g><title>load_elf_binary (6 samples, 0.58%)</title><rect x="99.4197%" y="693" width="0.5803%" height="15" fill="rgb(206,173,20)"/><text x="99.6697%" y="703.50"></text></g><g><title>setup_new_exec (6 samples, 0.58%)</title><rect x="99.4197%" y="677" width="0.5803%" height="15" fill="rgb(233,88,34)"/><text x="99.6697%" y="687.50"></text></g><g><title>perf_event_exec (6 samples, 0.58%)</title><rect x="99.4197%" y="661" width="0.5803%" height="15" fill="rgb(223,209,46)"/><text x="99.6697%" y="671.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.48%)</title><rect x="99.5164%" y="645" width="0.4836%" height="15" fill="rgb(250,43,18)"/><text x="99.7664%" y="655.50"></text></g><g><title>native_write_msr (5 samples, 0.48%)</title><rect x="99.5164%" y="629" width="0.4836%" height="15" fill="rgb(208,13,10)"/><text x="99.7664%" y="639.50"></text></g></svg></svg>