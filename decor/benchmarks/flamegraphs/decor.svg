<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="0.0698%" y="693" width="0.1396%" height="15" fill="rgb(227,0,7)"/><text x="0.3198%" y="703.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="0.2791%" y="693" width="0.2094%" height="15" fill="rgb(217,0,24)"/><text x="0.5291%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.21%)</title><rect x="0.5583%" y="693" width="0.2094%" height="15" fill="rgb(221,193,54)"/><text x="0.8083%" y="703.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (2 samples, 0.14%)</title><rect x="0.7676%" y="693" width="0.1396%" height="15" fill="rgb(248,212,6)"/><text x="1.0176%" y="703.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (3 samples, 0.21%)</title><rect x="0.9072%" y="693" width="0.2094%" height="15" fill="rgb(208,68,35)"/><text x="1.1572%" y="703.50"></text></g><g><title>[[heap]] (16 samples, 1.12%)</title><rect x="0.0698%" y="709" width="1.1165%" height="15" fill="rgb(232,128,0)"/><text x="0.3198%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.21%)</title><rect x="1.1863%" y="693" width="0.2094%" height="15" fill="rgb(207,160,47)"/><text x="1.4363%" y="703.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="1.4655%" y="693" width="0.1396%" height="15" fill="rgb(228,23,34)"/><text x="1.7155%" y="703.50"></text></g><g><title>_int_free (6 samples, 0.42%)</title><rect x="1.6050%" y="693" width="0.4187%" height="15" fill="rgb(218,30,26)"/><text x="1.8550%" y="703.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.14%)</title><rect x="2.1633%" y="693" width="0.1396%" height="15" fill="rgb(220,122,19)"/><text x="2.4133%" y="703.50"></text></g><g><title>mysql::conn::Conn::next_text (7 samples, 0.49%)</title><rect x="2.3726%" y="693" width="0.4885%" height="15" fill="rgb(250,228,42)"/><text x="2.6226%" y="703.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (2 samples, 0.14%)</title><rect x="2.8611%" y="693" width="0.1396%" height="15" fill="rgb(240,193,28)"/><text x="3.1111%" y="703.50"></text></g><g><title>[[stack]] (30 samples, 2.09%)</title><rect x="1.1863%" y="709" width="2.0935%" height="15" fill="rgb(216,20,37)"/><text x="1.4363%" y="719.50">[..</text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (4 samples, 0.28%)</title><rect x="3.0007%" y="693" width="0.2791%" height="15" fill="rgb(206,188,39)"/><text x="3.2507%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.42%)</title><rect x="4.1172%" y="629" width="0.4187%" height="15" fill="rgb(217,207,13)"/><text x="4.3672%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.42%)</title><rect x="4.1172%" y="613" width="0.4187%" height="15" fill="rgb(231,73,38)"/><text x="4.3672%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.42%)</title><rect x="4.1172%" y="597" width="0.4187%" height="15" fill="rgb(225,20,46)"/><text x="4.3672%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.42%)</title><rect x="4.1172%" y="581" width="0.4187%" height="15" fill="rgb(210,31,41)"/><text x="4.3672%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 1.67%)</title><rect x="3.2798%" y="693" width="1.6748%" height="15" fill="rgb(221,200,47)"/><text x="3.5298%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.84%)</title><rect x="4.1172%" y="677" width="0.8374%" height="15" fill="rgb(226,26,5)"/><text x="4.3672%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.84%)</title><rect x="4.1172%" y="661" width="0.8374%" height="15" fill="rgb(249,33,26)"/><text x="4.3672%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.84%)</title><rect x="4.1172%" y="645" width="0.8374%" height="15" fill="rgb(235,183,28)"/><text x="4.3672%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.42%)</title><rect x="4.5359%" y="629" width="0.4187%" height="15" fill="rgb(221,5,38)"/><text x="4.7859%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.42%)</title><rect x="4.5359%" y="613" width="0.4187%" height="15" fill="rgb(247,18,42)"/><text x="4.7859%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.42%)</title><rect x="4.5359%" y="597" width="0.4187%" height="15" fill="rgb(241,131,45)"/><text x="4.7859%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.42%)</title><rect x="4.5359%" y="581" width="0.4187%" height="15" fill="rgb(249,31,29)"/><text x="4.7859%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.42%)</title><rect x="4.5359%" y="565" width="0.4187%" height="15" fill="rgb(225,111,53)"/><text x="4.7859%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.42%)</title><rect x="4.5359%" y="549" width="0.4187%" height="15" fill="rgb(238,160,17)"/><text x="4.7859%" y="559.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.42%)</title><rect x="4.5359%" y="533" width="0.4187%" height="15" fill="rgb(214,148,48)"/><text x="4.7859%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="4.9546%" y="693" width="0.1396%" height="15" fill="rgb(232,36,49)"/><text x="5.2046%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.49%)</title><rect x="5.0942%" y="693" width="0.4885%" height="15" fill="rgb(209,103,24)"/><text x="5.3442%" y="703.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (2 samples, 0.14%)</title><rect x="5.6525%" y="693" width="0.1396%" height="15" fill="rgb(229,88,8)"/><text x="5.9025%" y="703.50"></text></g><g><title>__GI___libc_free (4 samples, 0.28%)</title><rect x="5.9316%" y="693" width="0.2791%" height="15" fill="rgb(213,181,19)"/><text x="6.1816%" y="703.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.63%)</title><rect x="6.2107%" y="693" width="0.6281%" height="15" fill="rgb(254,191,54)"/><text x="6.4607%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.21%)</title><rect x="6.8388%" y="693" width="0.2094%" height="15" fill="rgb(241,83,37)"/><text x="7.0888%" y="703.50"></text></g><g><title>_int_free (5 samples, 0.35%)</title><rect x="7.0482%" y="693" width="0.3489%" height="15" fill="rgb(233,36,39)"/><text x="7.2982%" y="703.50"></text></g><g><title>_int_malloc (6 samples, 0.42%)</title><rect x="7.3971%" y="693" width="0.4187%" height="15" fill="rgb(226,3,54)"/><text x="7.6471%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.35%)</title><rect x="7.8158%" y="693" width="0.3489%" height="15" fill="rgb(245,192,40)"/><text x="8.0658%" y="703.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (3 samples, 0.21%)</title><rect x="8.3740%" y="693" width="0.2094%" height="15" fill="rgb(238,167,29)"/><text x="8.6240%" y="703.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.14%)</title><rect x="8.5834%" y="693" width="0.1396%" height="15" fill="rgb(232,182,51)"/><text x="8.8334%" y="703.50"></text></g><g><title>[anon] (83 samples, 5.79%)</title><rect x="3.2798%" y="709" width="5.7920%" height="15" fill="rgb(231,60,39)"/><text x="3.5298%" y="719.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.28%)</title><rect x="8.7927%" y="693" width="0.2791%" height="15" fill="rgb(208,69,12)"/><text x="9.0427%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.28%)</title><rect x="9.2812%" y="693" width="0.2791%" height="15" fill="rgb(235,93,37)"/><text x="9.5312%" y="703.50"></text></g><g><title>[lobsters-microbenchmarks] (9 samples, 0.63%)</title><rect x="9.0719%" y="709" width="0.6281%" height="15" fill="rgb(213,116,39)"/><text x="9.3219%" y="719.50"></text></g><g><title>mysql_common::value::read_text_value (2 samples, 0.14%)</title><rect x="9.5604%" y="693" width="0.1396%" height="15" fill="rgb(222,207,29)"/><text x="9.8104%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="9.7697%" y="693" width="0.1396%" height="15" fill="rgb(206,96,30)"/><text x="10.0197%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.14%)</title><rect x="9.9093%" y="693" width="0.1396%" height="15" fill="rgb(218,138,4)"/><text x="10.1593%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (3 samples, 0.21%)</title><rect x="10.1884%" y="597" width="0.2094%" height="15" fill="rgb(250,191,14)"/><text x="10.4384%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="10.2582%" y="581" width="0.1396%" height="15" fill="rgb(239,60,40)"/><text x="10.5082%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="10.2582%" y="565" width="0.1396%" height="15" fill="rgb(206,27,48)"/><text x="10.5082%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.14%)</title><rect x="10.2582%" y="549" width="0.1396%" height="15" fill="rgb(225,35,8)"/><text x="10.5082%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.14%)</title><rect x="10.2582%" y="533" width="0.1396%" height="15" fill="rgb(250,213,24)"/><text x="10.5082%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="10.2582%" y="517" width="0.1396%" height="15" fill="rgb(247,123,22)"/><text x="10.5082%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="10.2582%" y="501" width="0.1396%" height="15" fill="rgb(231,138,38)"/><text x="10.5082%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="10.2582%" y="485" width="0.1396%" height="15" fill="rgb(231,145,46)"/><text x="10.5082%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.14%)</title><rect x="10.2582%" y="469" width="0.1396%" height="15" fill="rgb(251,118,11)"/><text x="10.5082%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.14%)</title><rect x="10.2582%" y="453" width="0.1396%" height="15" fill="rgb(217,147,25)"/><text x="10.5082%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="10.2582%" y="437" width="0.1396%" height="15" fill="rgb(247,81,37)"/><text x="10.5082%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="10.2582%" y="421" width="0.1396%" height="15" fill="rgb(209,12,38)"/><text x="10.5082%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.14%)</title><rect x="10.3978%" y="533" width="0.1396%" height="15" fill="rgb(227,1,9)"/><text x="10.6478%" y="543.50"></text></g><g><title>do_syscall_64 (2 samples, 0.14%)</title><rect x="10.3978%" y="517" width="0.1396%" height="15" fill="rgb(248,47,43)"/><text x="10.6478%" y="527.50"></text></g><g><title>__x64_sys_mprotect (2 samples, 0.14%)</title><rect x="10.3978%" y="501" width="0.1396%" height="15" fill="rgb(221,10,30)"/><text x="10.6478%" y="511.50"></text></g><g><title>do_mprotect_pkey (2 samples, 0.14%)</title><rect x="10.3978%" y="485" width="0.1396%" height="15" fill="rgb(210,229,1)"/><text x="10.6478%" y="495.50"></text></g><g><title>mprotect_fixup (2 samples, 0.14%)</title><rect x="10.3978%" y="469" width="0.1396%" height="15" fill="rgb(222,148,37)"/><text x="10.6478%" y="479.50"></text></g><g><title>__GI___mprotect (3 samples, 0.21%)</title><rect x="10.3978%" y="549" width="0.2094%" height="15" fill="rgb(234,67,33)"/><text x="10.6478%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (8 samples, 0.56%)</title><rect x="10.1884%" y="661" width="0.5583%" height="15" fill="rgb(247,98,35)"/><text x="10.4384%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (8 samples, 0.56%)</title><rect x="10.1884%" y="645" width="0.5583%" height="15" fill="rgb(247,138,52)"/><text x="10.4384%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.56%)</title><rect x="10.1884%" y="629" width="0.5583%" height="15" fill="rgb(213,79,30)"/><text x="10.4384%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.56%)</title><rect x="10.1884%" y="613" width="0.5583%" height="15" fill="rgb(246,177,23)"/><text x="10.4384%" y="623.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.35%)</title><rect x="10.3978%" y="597" width="0.3489%" height="15" fill="rgb(230,62,27)"/><text x="10.6478%" y="607.50"></text></g><g><title>_int_malloc (5 samples, 0.35%)</title><rect x="10.3978%" y="581" width="0.3489%" height="15" fill="rgb(216,154,8)"/><text x="10.6478%" y="591.50"></text></g><g><title>sysmalloc (5 samples, 0.35%)</title><rect x="10.3978%" y="565" width="0.3489%" height="15" fill="rgb(244,35,45)"/><text x="10.6478%" y="575.50"></text></g><g><title>page_fault (2 samples, 0.14%)</title><rect x="10.6071%" y="549" width="0.1396%" height="15" fill="rgb(251,115,12)"/><text x="10.8571%" y="559.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.14%)</title><rect x="10.6071%" y="533" width="0.1396%" height="15" fill="rgb(240,54,50)"/><text x="10.8571%" y="543.50"></text></g><g><title>handle_mm_fault (2 samples, 0.14%)</title><rect x="10.6071%" y="517" width="0.1396%" height="15" fill="rgb(233,84,52)"/><text x="10.8571%" y="527.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.14%)</title><rect x="10.6071%" y="501" width="0.1396%" height="15" fill="rgb(207,117,47)"/><text x="10.8571%" y="511.50"></text></g><g><title>__tcp_send_ack.part.0 (2 samples, 0.14%)</title><rect x="10.8165%" y="389" width="0.1396%" height="15" fill="rgb(249,43,39)"/><text x="11.0665%" y="399.50"></text></g><g><title>__tcp_transmit_skb (4 samples, 0.28%)</title><rect x="10.9560%" y="389" width="0.2791%" height="15" fill="rgb(209,38,44)"/><text x="11.2060%" y="399.50"></text></g><g><title>__ip_queue_xmit (4 samples, 0.28%)</title><rect x="10.9560%" y="373" width="0.2791%" height="15" fill="rgb(236,212,23)"/><text x="11.2060%" y="383.50"></text></g><g><title>ip_output (4 samples, 0.28%)</title><rect x="10.9560%" y="357" width="0.2791%" height="15" fill="rgb(242,79,21)"/><text x="11.2060%" y="367.50"></text></g><g><title>ip_finish_output2 (4 samples, 0.28%)</title><rect x="10.9560%" y="341" width="0.2791%" height="15" fill="rgb(211,96,35)"/><text x="11.2060%" y="351.50"></text></g><g><title>__local_bh_enable_ip (3 samples, 0.21%)</title><rect x="11.0258%" y="325" width="0.2094%" height="15" fill="rgb(253,215,40)"/><text x="11.2758%" y="335.50"></text></g><g><title>do_softirq (3 samples, 0.21%)</title><rect x="11.0258%" y="309" width="0.2094%" height="15" fill="rgb(211,81,21)"/><text x="11.2758%" y="319.50"></text></g><g><title>do_softirq_own_stack (3 samples, 0.21%)</title><rect x="11.0258%" y="293" width="0.2094%" height="15" fill="rgb(208,190,38)"/><text x="11.2758%" y="303.50"></text></g><g><title>__do_softirq (3 samples, 0.21%)</title><rect x="11.0258%" y="277" width="0.2094%" height="15" fill="rgb(235,213,38)"/><text x="11.2758%" y="287.50"></text></g><g><title>net_rx_action (3 samples, 0.21%)</title><rect x="11.0258%" y="261" width="0.2094%" height="15" fill="rgb(237,122,38)"/><text x="11.2758%" y="271.50"></text></g><g><title>process_backlog (3 samples, 0.21%)</title><rect x="11.0258%" y="245" width="0.2094%" height="15" fill="rgb(244,218,35)"/><text x="11.2758%" y="255.50"></text></g><g><title>__netif_receive_skb_one_core (3 samples, 0.21%)</title><rect x="11.0258%" y="229" width="0.2094%" height="15" fill="rgb(240,68,47)"/><text x="11.2758%" y="239.50"></text></g><g><title>ip_rcv (3 samples, 0.21%)</title><rect x="11.0258%" y="213" width="0.2094%" height="15" fill="rgb(210,16,53)"/><text x="11.2758%" y="223.50"></text></g><g><title>ip_local_deliver (3 samples, 0.21%)</title><rect x="11.0258%" y="197" width="0.2094%" height="15" fill="rgb(235,124,12)"/><text x="11.2758%" y="207.50"></text></g><g><title>ip_local_deliver_finish (3 samples, 0.21%)</title><rect x="11.0258%" y="181" width="0.2094%" height="15" fill="rgb(224,169,11)"/><text x="11.2758%" y="191.50"></text></g><g><title>ip_protocol_deliver_rcu (3 samples, 0.21%)</title><rect x="11.0258%" y="165" width="0.2094%" height="15" fill="rgb(250,166,2)"/><text x="11.2758%" y="175.50"></text></g><g><title>tcp_v4_rcv (2 samples, 0.14%)</title><rect x="11.0956%" y="149" width="0.1396%" height="15" fill="rgb(242,216,29)"/><text x="11.3456%" y="159.50"></text></g><g><title>tcp_v4_do_rcv (2 samples, 0.14%)</title><rect x="11.0956%" y="133" width="0.1396%" height="15" fill="rgb(230,116,27)"/><text x="11.3456%" y="143.50"></text></g><g><title>tcp_rcv_established (2 samples, 0.14%)</title><rect x="11.0956%" y="117" width="0.1396%" height="15" fill="rgb(228,99,48)"/><text x="11.3456%" y="127.50"></text></g><g><title>tcp_ack (2 samples, 0.14%)</title><rect x="11.0956%" y="101" width="0.1396%" height="15" fill="rgb(253,11,6)"/><text x="11.3456%" y="111.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.14%)</title><rect x="11.3050%" y="373" width="0.1396%" height="15" fill="rgb(247,143,39)"/><text x="11.5550%" y="383.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.14%)</title><rect x="11.4445%" y="309" width="0.1396%" height="15" fill="rgb(236,97,10)"/><text x="11.6945%" y="319.50"></text></g><g><title>dequeue_entity (2 samples, 0.14%)</title><rect x="11.4445%" y="293" width="0.1396%" height="15" fill="rgb(233,208,19)"/><text x="11.6945%" y="303.50"></text></g><g><title>sk_wait_data (6 samples, 0.42%)</title><rect x="11.2352%" y="389" width="0.4187%" height="15" fill="rgb(216,164,2)"/><text x="11.4852%" y="399.50"></text></g><g><title>wait_woken (3 samples, 0.21%)</title><rect x="11.4445%" y="373" width="0.2094%" height="15" fill="rgb(220,129,5)"/><text x="11.6945%" y="383.50"></text></g><g><title>schedule_timeout (3 samples, 0.21%)</title><rect x="11.4445%" y="357" width="0.2094%" height="15" fill="rgb(242,17,10)"/><text x="11.6945%" y="367.50"></text></g><g><title>schedule (3 samples, 0.21%)</title><rect x="11.4445%" y="341" width="0.2094%" height="15" fill="rgb(242,107,0)"/><text x="11.6945%" y="351.50"></text></g><g><title>__schedule (3 samples, 0.21%)</title><rect x="11.4445%" y="325" width="0.2094%" height="15" fill="rgb(251,28,31)"/><text x="11.6945%" y="335.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (15 samples, 1.05%)</title><rect x="10.7467%" y="661" width="1.0468%" height="15" fill="rgb(233,223,10)"/><text x="10.9967%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (15 samples, 1.05%)</title><rect x="10.7467%" y="645" width="1.0468%" height="15" fill="rgb(215,21,27)"/><text x="10.9967%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (15 samples, 1.05%)</title><rect x="10.7467%" y="629" width="1.0468%" height="15" fill="rgb(232,23,21)"/><text x="10.9967%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (14 samples, 0.98%)</title><rect x="10.8165%" y="613" width="0.9770%" height="15" fill="rgb(244,5,23)"/><text x="11.0665%" y="623.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.98%)</title><rect x="10.8165%" y="597" width="0.9770%" height="15" fill="rgb(226,81,46)"/><text x="11.0665%" y="607.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (14 samples, 0.98%)</title><rect x="10.8165%" y="581" width="0.9770%" height="15" fill="rgb(247,70,30)"/><text x="11.0665%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (14 samples, 0.98%)</title><rect x="10.8165%" y="565" width="0.9770%" height="15" fill="rgb(212,68,19)"/><text x="11.0665%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::read (14 samples, 0.98%)</title><rect x="10.8165%" y="549" width="0.9770%" height="15" fill="rgb(240,187,13)"/><text x="11.0665%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::read (14 samples, 0.98%)</title><rect x="10.8165%" y="533" width="0.9770%" height="15" fill="rgb(223,113,26)"/><text x="11.0665%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (14 samples, 0.98%)</title><rect x="10.8165%" y="517" width="0.9770%" height="15" fill="rgb(206,192,2)"/><text x="11.0665%" y="527.50"></text></g><g><title>__libc_recv (14 samples, 0.98%)</title><rect x="10.8165%" y="501" width="0.9770%" height="15" fill="rgb(241,108,4)"/><text x="11.0665%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (14 samples, 0.98%)</title><rect x="10.8165%" y="485" width="0.9770%" height="15" fill="rgb(247,173,49)"/><text x="11.0665%" y="495.50"></text></g><g><title>do_syscall_64 (14 samples, 0.98%)</title><rect x="10.8165%" y="469" width="0.9770%" height="15" fill="rgb(224,114,35)"/><text x="11.0665%" y="479.50"></text></g><g><title>__x64_sys_recvfrom (14 samples, 0.98%)</title><rect x="10.8165%" y="453" width="0.9770%" height="15" fill="rgb(245,159,27)"/><text x="11.0665%" y="463.50"></text></g><g><title>__sys_recvfrom (14 samples, 0.98%)</title><rect x="10.8165%" y="437" width="0.9770%" height="15" fill="rgb(245,172,44)"/><text x="11.0665%" y="447.50"></text></g><g><title>inet_recvmsg (14 samples, 0.98%)</title><rect x="10.8165%" y="421" width="0.9770%" height="15" fill="rgb(236,23,11)"/><text x="11.0665%" y="431.50"></text></g><g><title>tcp_recvmsg (14 samples, 0.98%)</title><rect x="10.8165%" y="405" width="0.9770%" height="15" fill="rgb(205,117,38)"/><text x="11.0665%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.42%)</title><rect x="15.4920%" y="517" width="0.4187%" height="15" fill="rgb(237,72,25)"/><text x="15.7420%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="15.9107%" y="501" width="0.1396%" height="15" fill="rgb(244,70,9)"/><text x="16.1607%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 0.28%)</title><rect x="16.0502%" y="485" width="0.2791%" height="15" fill="rgb(217,125,39)"/><text x="16.3002%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.28%)</title><rect x="16.0502%" y="469" width="0.2791%" height="15" fill="rgb(235,36,10)"/><text x="16.3002%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (4 samples, 0.28%)</title><rect x="16.0502%" y="453" width="0.2791%" height="15" fill="rgb(251,123,47)"/><text x="16.3002%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.28%)</title><rect x="16.0502%" y="437" width="0.2791%" height="15" fill="rgb(221,13,13)"/><text x="16.3002%" y="447.50"></text></g><g><title>__GI___libc_malloc (131 samples, 9.14%)</title><rect x="16.3294%" y="373" width="9.1417%" height="15" fill="rgb(238,131,9)"/><text x="16.5794%" y="383.50">__GI___libc_m..</text></g><g><title>_int_malloc (103 samples, 7.19%)</title><rect x="18.2833%" y="357" width="7.1877%" height="15" fill="rgb(211,50,8)"/><text x="18.5333%" y="367.50">_int_malloc</text></g><g><title>alloc_perturb (2 samples, 0.14%)</title><rect x="25.3315%" y="341" width="0.1396%" height="15" fill="rgb(245,182,24)"/><text x="25.5815%" y="351.50"></text></g><g><title>__rdl_alloc (12 samples, 0.84%)</title><rect x="25.4710%" y="373" width="0.8374%" height="15" fill="rgb(242,14,37)"/><text x="25.7210%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.84%)</title><rect x="25.4710%" y="357" width="0.8374%" height="15" fill="rgb(246,228,12)"/><text x="25.7210%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (211 samples, 14.72%)</title><rect x="12.1424%" y="565" width="14.7244%" height="15" fill="rgb(213,55,15)"/><text x="12.3924%" y="575.50">&lt;core::iter::adapters:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (163 samples, 11.37%)</title><rect x="15.4920%" y="549" width="11.3747%" height="15" fill="rgb(209,9,3)"/><text x="15.7420%" y="559.50">&lt;alloc::string::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (163 samples, 11.37%)</title><rect x="15.4920%" y="533" width="11.3747%" height="15" fill="rgb(230,59,30)"/><text x="15.7420%" y="543.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (157 samples, 10.96%)</title><rect x="15.9107%" y="517" width="10.9560%" height="15" fill="rgb(209,121,21)"/><text x="16.1607%" y="527.50">alloc::slice::&lt;i..</text></g><g><title>alloc::slice::hack::to_vec (155 samples, 10.82%)</title><rect x="16.0502%" y="501" width="10.8165%" height="15" fill="rgb(220,109,13)"/><text x="16.3002%" y="511.50">alloc::slice::ha..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (151 samples, 10.54%)</title><rect x="16.3294%" y="485" width="10.5373%" height="15" fill="rgb(232,18,1)"/><text x="16.5794%" y="495.50">alloc::vec::Vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (151 samples, 10.54%)</title><rect x="16.3294%" y="469" width="10.5373%" height="15" fill="rgb(215,41,42)"/><text x="16.5794%" y="479.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (151 samples, 10.54%)</title><rect x="16.3294%" y="453" width="10.5373%" height="15" fill="rgb(224,123,36)"/><text x="16.5794%" y="463.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (151 samples, 10.54%)</title><rect x="16.3294%" y="437" width="10.5373%" height="15" fill="rgb(240,125,3)"/><text x="16.5794%" y="447.50">alloc::raw_vec:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (151 samples, 10.54%)</title><rect x="16.3294%" y="421" width="10.5373%" height="15" fill="rgb(205,98,50)"/><text x="16.5794%" y="431.50">&lt;alloc::alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (151 samples, 10.54%)</title><rect x="16.3294%" y="405" width="10.5373%" height="15" fill="rgb(205,185,37)"/><text x="16.5794%" y="415.50">alloc::alloc::G..</text></g><g><title>alloc::alloc::alloc (151 samples, 10.54%)</title><rect x="16.3294%" y="389" width="10.5373%" height="15" fill="rgb(238,207,15)"/><text x="16.5794%" y="399.50">alloc::alloc::a..</text></g><g><title>__rust_alloc (8 samples, 0.56%)</title><rect x="26.3084%" y="373" width="0.5583%" height="15" fill="rgb(213,199,42)"/><text x="26.5584%" y="383.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.77%)</title><rect x="26.8667%" y="565" width="0.7676%" height="15" fill="rgb(235,201,11)"/><text x="27.1167%" y="575.50"></text></g><g><title>_int_malloc (7 samples, 0.49%)</title><rect x="27.1458%" y="549" width="0.4885%" height="15" fill="rgb(207,46,11)"/><text x="27.3958%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (224 samples, 15.63%)</title><rect x="12.0726%" y="581" width="15.6315%" height="15" fill="rgb(241,35,35)"/><text x="12.3226%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (228 samples, 15.91%)</title><rect x="11.8632%" y="597" width="15.9107%" height="15" fill="rgb(243,32,47)"/><text x="12.1132%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as c..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="27.7739%" y="581" width="0.1396%" height="15" fill="rgb(247,202,23)"/><text x="28.0239%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="27.7739%" y="565" width="0.1396%" height="15" fill="rgb(219,102,11)"/><text x="28.0239%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.14%)</title><rect x="27.7739%" y="549" width="0.1396%" height="15" fill="rgb(243,110,44)"/><text x="28.0239%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.14%)</title><rect x="27.7739%" y="533" width="0.1396%" height="15" fill="rgb(222,74,54)"/><text x="28.0239%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="27.7739%" y="517" width="0.1396%" height="15" fill="rgb(216,99,12)"/><text x="28.0239%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.14%)</title><rect x="27.7739%" y="501" width="0.1396%" height="15" fill="rgb(226,22,26)"/><text x="28.0239%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.14%)</title><rect x="27.7739%" y="485" width="0.1396%" height="15" fill="rgb(217,163,10)"/><text x="28.0239%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.14%)</title><rect x="27.7739%" y="469" width="0.1396%" height="15" fill="rgb(213,25,53)"/><text x="28.0239%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.14%)</title><rect x="27.7739%" y="453" width="0.1396%" height="15" fill="rgb(252,105,26)"/><text x="28.0239%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="27.7739%" y="437" width="0.1396%" height="15" fill="rgb(220,39,43)"/><text x="28.0239%" y="447.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="27.7739%" y="421" width="0.1396%" height="15" fill="rgb(229,68,48)"/><text x="28.0239%" y="431.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="27.7739%" y="405" width="0.1396%" height="15" fill="rgb(252,8,32)"/><text x="28.0239%" y="415.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="27.7739%" y="389" width="0.1396%" height="15" fill="rgb(223,20,43)"/><text x="28.0239%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.21%)</title><rect x="29.7976%" y="501" width="0.2094%" height="15" fill="rgb(229,81,49)"/><text x="30.0476%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.21%)</title><rect x="29.7976%" y="485" width="0.2094%" height="15" fill="rgb(236,28,36)"/><text x="30.0476%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.21%)</title><rect x="29.7976%" y="469" width="0.2094%" height="15" fill="rgb(249,185,26)"/><text x="30.0476%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.21%)</title><rect x="29.7976%" y="453" width="0.2094%" height="15" fill="rgb(249,174,33)"/><text x="30.0476%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.21%)</title><rect x="29.7976%" y="437" width="0.2094%" height="15" fill="rgb(233,201,37)"/><text x="30.0476%" y="447.50"></text></g><g><title>__GI___libc_malloc (35 samples, 2.44%)</title><rect x="30.0070%" y="389" width="2.4424%" height="15" fill="rgb(221,78,26)"/><text x="30.2570%" y="399.50">__..</text></g><g><title>_int_malloc (26 samples, 1.81%)</title><rect x="30.6350%" y="373" width="1.8144%" height="15" fill="rgb(250,127,30)"/><text x="30.8850%" y="383.50">_..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (43 samples, 3.00%)</title><rect x="29.5883%" y="565" width="3.0007%" height="15" fill="rgb(230,49,44)"/><text x="29.8383%" y="575.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (41 samples, 2.86%)</title><rect x="29.7278%" y="549" width="2.8611%" height="15" fill="rgb(229,67,23)"/><text x="29.9778%" y="559.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (40 samples, 2.79%)</title><rect x="29.7976%" y="533" width="2.7913%" height="15" fill="rgb(249,83,47)"/><text x="30.0476%" y="543.50">al..</text></g><g><title>alloc::slice::hack::to_vec (40 samples, 2.79%)</title><rect x="29.7976%" y="517" width="2.7913%" height="15" fill="rgb(215,43,3)"/><text x="30.0476%" y="527.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (37 samples, 2.58%)</title><rect x="30.0070%" y="501" width="2.5820%" height="15" fill="rgb(238,154,13)"/><text x="30.2570%" y="511.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (37 samples, 2.58%)</title><rect x="30.0070%" y="485" width="2.5820%" height="15" fill="rgb(219,56,2)"/><text x="30.2570%" y="495.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 2.58%)</title><rect x="30.0070%" y="469" width="2.5820%" height="15" fill="rgb(233,0,4)"/><text x="30.2570%" y="479.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 2.58%)</title><rect x="30.0070%" y="453" width="2.5820%" height="15" fill="rgb(235,30,7)"/><text x="30.2570%" y="463.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (37 samples, 2.58%)</title><rect x="30.0070%" y="437" width="2.5820%" height="15" fill="rgb(250,79,13)"/><text x="30.2570%" y="447.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 2.58%)</title><rect x="30.0070%" y="421" width="2.5820%" height="15" fill="rgb(211,146,34)"/><text x="30.2570%" y="431.50">al..</text></g><g><title>alloc::alloc::alloc (37 samples, 2.58%)</title><rect x="30.0070%" y="405" width="2.5820%" height="15" fill="rgb(228,22,38)"/><text x="30.2570%" y="415.50">al..</text></g><g><title>__rdl_alloc (2 samples, 0.14%)</title><rect x="32.4494%" y="389" width="0.1396%" height="15" fill="rgb(235,168,5)"/><text x="32.6994%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.14%)</title><rect x="32.4494%" y="373" width="0.1396%" height="15" fill="rgb(221,155,16)"/><text x="32.6994%" y="383.50"></text></g><g><title>__GI___libc_malloc (24 samples, 1.67%)</title><rect x="32.5890%" y="565" width="1.6748%" height="15" fill="rgb(215,215,53)"/><text x="32.8390%" y="575.50"></text></g><g><title>_int_malloc (11 samples, 0.77%)</title><rect x="33.4962%" y="549" width="0.7676%" height="15" fill="rgb(223,4,10)"/><text x="33.7462%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.63%)</title><rect x="34.2638%" y="565" width="0.6281%" height="15" fill="rgb(234,103,6)"/><text x="34.5138%" y="575.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (357 samples, 24.91%)</title><rect x="10.1884%" y="677" width="24.9128%" height="15" fill="rgb(227,97,0)"/><text x="10.4384%" y="687.50">decor_mem::query_transformer::QueryTrans..</text></g><g><title>decor_mem::select::get_query_results (333 samples, 23.24%)</title><rect x="11.8632%" y="661" width="23.2380%" height="15" fill="rgb(234,150,53)"/><text x="12.1132%" y="671.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (333 samples, 23.24%)</title><rect x="11.8632%" y="645" width="23.2380%" height="15" fill="rgb(228,201,54)"/><text x="12.1132%" y="655.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (333 samples, 23.24%)</title><rect x="11.8632%" y="629" width="23.2380%" height="15" fill="rgb(222,22,37)"/><text x="12.1132%" y="639.50">decor_mem::select::tablewithjoins_to_..</text></g><g><title>&lt;decor_mem::views::View as core::clone::Clone&gt;::clone (333 samples, 23.24%)</title><rect x="11.8632%" y="613" width="23.2380%" height="15" fill="rgb(237,53,32)"/><text x="12.1132%" y="623.50">&lt;decor_mem::views::View as core::clon..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (105 samples, 7.33%)</title><rect x="27.7739%" y="597" width="7.3273%" height="15" fill="rgb(233,25,53)"/><text x="28.0239%" y="607.50">&lt;hashbrown..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (103 samples, 7.19%)</title><rect x="27.9135%" y="581" width="7.1877%" height="15" fill="rgb(210,40,34)"/><text x="28.1635%" y="591.50">&lt;hashbrown..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (359 samples, 25.05%)</title><rect x="10.1884%" y="693" width="25.0523%" height="15" fill="rgb(241,220,44)"/><text x="10.4384%" y="703.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (2 samples, 0.14%)</title><rect x="35.1012%" y="677" width="0.1396%" height="15" fill="rgb(235,28,35)"/><text x="35.3512%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="35.1012%" y="661" width="0.1396%" height="15" fill="rgb(210,56,17)"/><text x="35.3512%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="35.1012%" y="645" width="0.1396%" height="15" fill="rgb(224,130,29)"/><text x="35.3512%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="35.1012%" y="629" width="0.1396%" height="15" fill="rgb(235,212,8)"/><text x="35.3512%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="35.1012%" y="613" width="0.1396%" height="15" fill="rgb(223,33,50)"/><text x="35.3512%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="35.1012%" y="597" width="0.1396%" height="15" fill="rgb(219,149,13)"/><text x="35.3512%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.35%)</title><rect x="35.3105%" y="693" width="0.3489%" height="15" fill="rgb(250,156,29)"/><text x="35.5605%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="35.6595%" y="693" width="0.2094%" height="15" fill="rgb(216,193,19)"/><text x="35.9095%" y="703.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.42%)</title><rect x="35.8688%" y="693" width="0.4187%" height="15" fill="rgb(216,135,14)"/><text x="36.1188%" y="703.50"></text></g><g><title>__GI___libc_free (6 samples, 0.42%)</title><rect x="36.2875%" y="693" width="0.4187%" height="15" fill="rgb(241,47,5)"/><text x="36.5375%" y="703.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="36.7062%" y="693" width="0.2094%" height="15" fill="rgb(233,42,35)"/><text x="36.9562%" y="703.50"></text></g><g><title>_int_free (14 samples, 0.98%)</title><rect x="37.0551%" y="693" width="0.9770%" height="15" fill="rgb(231,13,6)"/><text x="37.3051%" y="703.50"></text></g><g><title>_int_malloc (5 samples, 0.35%)</title><rect x="38.0321%" y="693" width="0.3489%" height="15" fill="rgb(207,181,40)"/><text x="38.2821%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="38.3810%" y="693" width="0.1396%" height="15" fill="rgb(254,173,49)"/><text x="38.6310%" y="703.50"></text></g><g><title>core::fmt::write (2 samples, 0.14%)</title><rect x="38.5904%" y="693" width="0.1396%" height="15" fill="rgb(221,1,38)"/><text x="38.8404%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.21%)</title><rect x="38.7299%" y="693" width="0.2094%" height="15" fill="rgb(206,124,46)"/><text x="38.9799%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="39.1486%" y="597" width="0.1396%" height="15" fill="rgb(249,21,11)"/><text x="39.3986%" y="607.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.14%)</title><rect x="39.1486%" y="581" width="0.1396%" height="15" fill="rgb(222,201,40)"/><text x="39.3986%" y="591.50"></text></g><g><title>_int_realloc (2 samples, 0.14%)</title><rect x="39.1486%" y="565" width="0.1396%" height="15" fill="rgb(235,61,29)"/><text x="39.3986%" y="575.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="39.1486%" y="549" width="0.1396%" height="15" fill="rgb(219,207,3)"/><text x="39.3986%" y="559.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (2 samples, 0.14%)</title><rect x="39.2882%" y="597" width="0.1396%" height="15" fill="rgb(222,56,46)"/><text x="39.5382%" y="607.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (7 samples, 0.49%)</title><rect x="39.0091%" y="693" width="0.4885%" height="15" fill="rgb(239,76,54)"/><text x="39.2591%" y="703.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (7 samples, 0.49%)</title><rect x="39.0091%" y="677" width="0.4885%" height="15" fill="rgb(231,124,27)"/><text x="39.2591%" y="687.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (7 samples, 0.49%)</title><rect x="39.0091%" y="661" width="0.4885%" height="15" fill="rgb(249,195,6)"/><text x="39.2591%" y="671.50"></text></g><g><title>decor_mem::stats::get_qtype (7 samples, 0.49%)</title><rect x="39.0091%" y="645" width="0.4885%" height="15" fill="rgb(237,174,47)"/><text x="39.2591%" y="655.50"></text></g><g><title>sql_parser::parser::parse_statements (7 samples, 0.49%)</title><rect x="39.0091%" y="629" width="0.4885%" height="15" fill="rgb(206,201,31)"/><text x="39.2591%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (5 samples, 0.35%)</title><rect x="39.1486%" y="613" width="0.3489%" height="15" fill="rgb(231,57,52)"/><text x="39.3986%" y="623.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.14%)</title><rect x="39.6371%" y="677" width="0.1396%" height="15" fill="rgb(248,177,22)"/><text x="39.8871%" y="687.50"></text></g><g><title>load_balance (2 samples, 0.14%)</title><rect x="39.8465%" y="277" width="0.1396%" height="15" fill="rgb(215,211,37)"/><text x="40.0965%" y="287.50"></text></g><g><title>find_busiest_group (2 samples, 0.14%)</title><rect x="39.8465%" y="261" width="0.1396%" height="15" fill="rgb(241,128,51)"/><text x="40.0965%" y="271.50"></text></g><g><title>update_sd_lb_stats.constprop.0 (2 samples, 0.14%)</title><rect x="39.8465%" y="245" width="0.1396%" height="15" fill="rgb(227,165,31)"/><text x="40.0965%" y="255.50"></text></g><g><title>sk_wait_data (4 samples, 0.28%)</title><rect x="39.7767%" y="389" width="0.2791%" height="15" fill="rgb(228,167,24)"/><text x="40.0267%" y="399.50"></text></g><g><title>wait_woken (4 samples, 0.28%)</title><rect x="39.7767%" y="373" width="0.2791%" height="15" fill="rgb(228,143,12)"/><text x="40.0267%" y="383.50"></text></g><g><title>schedule_timeout (3 samples, 0.21%)</title><rect x="39.8465%" y="357" width="0.2094%" height="15" fill="rgb(249,149,8)"/><text x="40.0965%" y="367.50"></text></g><g><title>schedule (3 samples, 0.21%)</title><rect x="39.8465%" y="341" width="0.2094%" height="15" fill="rgb(243,35,44)"/><text x="40.0965%" y="351.50"></text></g><g><title>__schedule (3 samples, 0.21%)</title><rect x="39.8465%" y="325" width="0.2094%" height="15" fill="rgb(246,89,9)"/><text x="40.0965%" y="335.50"></text></g><g><title>pick_next_task_fair (3 samples, 0.21%)</title><rect x="39.8465%" y="309" width="0.2094%" height="15" fill="rgb(233,213,13)"/><text x="40.0965%" y="319.50"></text></g><g><title>newidle_balance (3 samples, 0.21%)</title><rect x="39.8465%" y="293" width="0.2094%" height="15" fill="rgb(233,141,41)"/><text x="40.0965%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.56%)</title><rect x="39.7767%" y="485" width="0.5583%" height="15" fill="rgb(239,167,4)"/><text x="40.0267%" y="495.50"></text></g><g><title>do_syscall_64 (8 samples, 0.56%)</title><rect x="39.7767%" y="469" width="0.5583%" height="15" fill="rgb(209,217,16)"/><text x="40.0267%" y="479.50"></text></g><g><title>__x64_sys_recvfrom (8 samples, 0.56%)</title><rect x="39.7767%" y="453" width="0.5583%" height="15" fill="rgb(219,88,35)"/><text x="40.0267%" y="463.50"></text></g><g><title>__sys_recvfrom (8 samples, 0.56%)</title><rect x="39.7767%" y="437" width="0.5583%" height="15" fill="rgb(220,193,23)"/><text x="40.0267%" y="447.50"></text></g><g><title>inet_recvmsg (8 samples, 0.56%)</title><rect x="39.7767%" y="421" width="0.5583%" height="15" fill="rgb(230,90,52)"/><text x="40.0267%" y="431.50"></text></g><g><title>tcp_recvmsg (8 samples, 0.56%)</title><rect x="39.7767%" y="405" width="0.5583%" height="15" fill="rgb(252,106,19)"/><text x="40.0267%" y="415.50"></text></g><g><title>skb_copy_datagram_iter (4 samples, 0.28%)</title><rect x="40.0558%" y="389" width="0.2791%" height="15" fill="rgb(206,74,20)"/><text x="40.3058%" y="399.50"></text></g><g><title>__skb_datagram_iter (4 samples, 0.28%)</title><rect x="40.0558%" y="373" width="0.2791%" height="15" fill="rgb(230,138,44)"/><text x="40.3058%" y="383.50"></text></g><g><title>_copy_to_iter (3 samples, 0.21%)</title><rect x="40.1256%" y="357" width="0.2094%" height="15" fill="rgb(235,182,43)"/><text x="40.3756%" y="367.50"></text></g><g><title>copy_user_enhanced_fast_string (3 samples, 0.21%)</title><rect x="40.1256%" y="341" width="0.2094%" height="15" fill="rgb(242,16,51)"/><text x="40.3756%" y="351.50"></text></g><g><title>page_fault (3 samples, 0.21%)</title><rect x="40.1256%" y="325" width="0.2094%" height="15" fill="rgb(248,9,4)"/><text x="40.3756%" y="335.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.14%)</title><rect x="40.1954%" y="309" width="0.1396%" height="15" fill="rgb(210,31,22)"/><text x="40.4454%" y="319.50"></text></g><g><title>handle_mm_fault (2 samples, 0.14%)</title><rect x="40.1954%" y="293" width="0.1396%" height="15" fill="rgb(239,54,39)"/><text x="40.4454%" y="303.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.14%)</title><rect x="40.1954%" y="277" width="0.1396%" height="15" fill="rgb(230,99,41)"/><text x="40.4454%" y="287.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (9 samples, 0.63%)</title><rect x="39.7767%" y="629" width="0.6281%" height="15" fill="rgb(253,106,12)"/><text x="40.0267%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (9 samples, 0.63%)</title><rect x="39.7767%" y="613" width="0.6281%" height="15" fill="rgb(213,46,41)"/><text x="40.0267%" y="623.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.63%)</title><rect x="39.7767%" y="597" width="0.6281%" height="15" fill="rgb(215,133,35)"/><text x="40.0267%" y="607.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.63%)</title><rect x="39.7767%" y="581" width="0.6281%" height="15" fill="rgb(213,28,5)"/><text x="40.0267%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (9 samples, 0.63%)</title><rect x="39.7767%" y="565" width="0.6281%" height="15" fill="rgb(215,77,49)"/><text x="40.0267%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::read (9 samples, 0.63%)</title><rect x="39.7767%" y="549" width="0.6281%" height="15" fill="rgb(248,100,22)"/><text x="40.0267%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::read (9 samples, 0.63%)</title><rect x="39.7767%" y="533" width="0.6281%" height="15" fill="rgb(208,67,9)"/><text x="40.0267%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (9 samples, 0.63%)</title><rect x="39.7767%" y="517" width="0.6281%" height="15" fill="rgb(219,133,21)"/><text x="40.0267%" y="527.50"></text></g><g><title>__libc_recv (9 samples, 0.63%)</title><rect x="39.7767%" y="501" width="0.6281%" height="15" fill="rgb(246,46,29)"/><text x="40.0267%" y="511.50"></text></g><g><title>do_syscall_64 (3 samples, 0.21%)</title><rect x="40.4047%" y="533" width="0.2094%" height="15" fill="rgb(246,185,52)"/><text x="40.6547%" y="543.50"></text></g><g><title>__x64_sys_sendto (3 samples, 0.21%)</title><rect x="40.4047%" y="517" width="0.2094%" height="15" fill="rgb(252,136,11)"/><text x="40.6547%" y="527.50"></text></g><g><title>__sys_sendto (3 samples, 0.21%)</title><rect x="40.4047%" y="501" width="0.2094%" height="15" fill="rgb(219,138,53)"/><text x="40.6547%" y="511.50"></text></g><g><title>sock_sendmsg (3 samples, 0.21%)</title><rect x="40.4047%" y="485" width="0.2094%" height="15" fill="rgb(211,51,23)"/><text x="40.6547%" y="495.50"></text></g><g><title>tcp_sendmsg (3 samples, 0.21%)</title><rect x="40.4047%" y="469" width="0.2094%" height="15" fill="rgb(247,221,28)"/><text x="40.6547%" y="479.50"></text></g><g><title>tcp_sendmsg_locked (3 samples, 0.21%)</title><rect x="40.4047%" y="453" width="0.2094%" height="15" fill="rgb(251,222,45)"/><text x="40.6547%" y="463.50"></text></g><g><title>__tcp_push_pending_frames (3 samples, 0.21%)</title><rect x="40.4047%" y="437" width="0.2094%" height="15" fill="rgb(217,162,53)"/><text x="40.6547%" y="447.50"></text></g><g><title>tcp_write_xmit (3 samples, 0.21%)</title><rect x="40.4047%" y="421" width="0.2094%" height="15" fill="rgb(229,93,14)"/><text x="40.6547%" y="431.50"></text></g><g><title>__tcp_transmit_skb (3 samples, 0.21%)</title><rect x="40.4047%" y="405" width="0.2094%" height="15" fill="rgb(209,67,49)"/><text x="40.6547%" y="415.50"></text></g><g><title>__ip_queue_xmit (3 samples, 0.21%)</title><rect x="40.4047%" y="389" width="0.2094%" height="15" fill="rgb(213,87,29)"/><text x="40.6547%" y="399.50"></text></g><g><title>ip_output (3 samples, 0.21%)</title><rect x="40.4047%" y="373" width="0.2094%" height="15" fill="rgb(205,151,52)"/><text x="40.6547%" y="383.50"></text></g><g><title>ip_finish_output2 (3 samples, 0.21%)</title><rect x="40.4047%" y="357" width="0.2094%" height="15" fill="rgb(253,215,39)"/><text x="40.6547%" y="367.50"></text></g><g><title>__local_bh_enable_ip (3 samples, 0.21%)</title><rect x="40.4047%" y="341" width="0.2094%" height="15" fill="rgb(221,220,41)"/><text x="40.6547%" y="351.50"></text></g><g><title>do_softirq (3 samples, 0.21%)</title><rect x="40.4047%" y="325" width="0.2094%" height="15" fill="rgb(218,133,21)"/><text x="40.6547%" y="335.50"></text></g><g><title>do_softirq_own_stack (3 samples, 0.21%)</title><rect x="40.4047%" y="309" width="0.2094%" height="15" fill="rgb(221,193,43)"/><text x="40.6547%" y="319.50"></text></g><g><title>__do_softirq (3 samples, 0.21%)</title><rect x="40.4047%" y="293" width="0.2094%" height="15" fill="rgb(240,128,52)"/><text x="40.6547%" y="303.50"></text></g><g><title>net_rx_action (3 samples, 0.21%)</title><rect x="40.4047%" y="277" width="0.2094%" height="15" fill="rgb(253,114,12)"/><text x="40.6547%" y="287.50"></text></g><g><title>process_backlog (3 samples, 0.21%)</title><rect x="40.4047%" y="261" width="0.2094%" height="15" fill="rgb(215,223,47)"/><text x="40.6547%" y="271.50"></text></g><g><title>__netif_receive_skb_one_core (3 samples, 0.21%)</title><rect x="40.4047%" y="245" width="0.2094%" height="15" fill="rgb(248,225,23)"/><text x="40.6547%" y="255.50"></text></g><g><title>ip_rcv (3 samples, 0.21%)</title><rect x="40.4047%" y="229" width="0.2094%" height="15" fill="rgb(250,108,0)"/><text x="40.6547%" y="239.50"></text></g><g><title>ip_local_deliver (3 samples, 0.21%)</title><rect x="40.4047%" y="213" width="0.2094%" height="15" fill="rgb(228,208,7)"/><text x="40.6547%" y="223.50"></text></g><g><title>ip_local_deliver_finish (3 samples, 0.21%)</title><rect x="40.4047%" y="197" width="0.2094%" height="15" fill="rgb(244,45,10)"/><text x="40.6547%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (3 samples, 0.21%)</title><rect x="40.4047%" y="181" width="0.2094%" height="15" fill="rgb(207,125,25)"/><text x="40.6547%" y="191.50"></text></g><g><title>tcp_v4_rcv (3 samples, 0.21%)</title><rect x="40.4047%" y="165" width="0.2094%" height="15" fill="rgb(210,195,18)"/><text x="40.6547%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (2 samples, 0.14%)</title><rect x="40.4745%" y="149" width="0.1396%" height="15" fill="rgb(249,80,12)"/><text x="40.7245%" y="159.50"></text></g><g><title>tcp_rcv_established (2 samples, 0.14%)</title><rect x="40.4745%" y="133" width="0.1396%" height="15" fill="rgb(221,65,9)"/><text x="40.7245%" y="143.50"></text></g><g><title>sock_def_readable (2 samples, 0.14%)</title><rect x="40.4745%" y="117" width="0.1396%" height="15" fill="rgb(235,49,36)"/><text x="40.7245%" y="127.50"></text></g><g><title>__wake_up_common_lock (2 samples, 0.14%)</title><rect x="40.4745%" y="101" width="0.1396%" height="15" fill="rgb(225,32,20)"/><text x="40.7245%" y="111.50"></text></g><g><title>__wake_up_common (2 samples, 0.14%)</title><rect x="40.4745%" y="85" width="0.1396%" height="15" fill="rgb(215,141,46)"/><text x="40.7245%" y="95.50"></text></g><g><title>try_to_wake_up (2 samples, 0.14%)</title><rect x="40.4745%" y="69" width="0.1396%" height="15" fill="rgb(250,160,47)"/><text x="40.7245%" y="79.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (13 samples, 0.91%)</title><rect x="39.7767%" y="661" width="0.9072%" height="15" fill="rgb(216,222,40)"/><text x="40.0267%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (13 samples, 0.91%)</title><rect x="39.7767%" y="645" width="0.9072%" height="15" fill="rgb(234,217,39)"/><text x="40.0267%" y="655.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (4 samples, 0.28%)</title><rect x="40.4047%" y="629" width="0.2791%" height="15" fill="rgb(207,178,40)"/><text x="40.6547%" y="639.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (4 samples, 0.28%)</title><rect x="40.4047%" y="613" width="0.2791%" height="15" fill="rgb(221,136,13)"/><text x="40.6547%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (4 samples, 0.28%)</title><rect x="40.4047%" y="597" width="0.2791%" height="15" fill="rgb(249,199,10)"/><text x="40.6547%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::write (4 samples, 0.28%)</title><rect x="40.4047%" y="581" width="0.2791%" height="15" fill="rgb(249,222,13)"/><text x="40.6547%" y="591.50"></text></g><g><title>__libc_send (4 samples, 0.28%)</title><rect x="40.4047%" y="565" width="0.2791%" height="15" fill="rgb(244,185,38)"/><text x="40.6547%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.28%)</title><rect x="40.4047%" y="549" width="0.2791%" height="15" fill="rgb(236,202,9)"/><text x="40.6547%" y="559.50"></text></g><g><title>_int_free (4 samples, 0.28%)</title><rect x="40.6839%" y="613" width="0.2791%" height="15" fill="rgb(250,229,37)"/><text x="40.9339%" y="623.50"></text></g><g><title>__GI___libc_malloc (16 samples, 1.12%)</title><rect x="41.5911%" y="581" width="1.1165%" height="15" fill="rgb(206,174,23)"/><text x="41.8411%" y="591.50"></text></g><g><title>__rdl_alloc (4 samples, 0.28%)</title><rect x="42.7774%" y="581" width="0.2791%" height="15" fill="rgb(211,33,43)"/><text x="43.0274%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.28%)</title><rect x="42.7774%" y="565" width="0.2791%" height="15" fill="rgb(245,58,50)"/><text x="43.0274%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (26 samples, 1.81%)</title><rect x="41.5213%" y="597" width="1.8144%" height="15" fill="rgb(244,68,36)"/><text x="41.7713%" y="607.50">&lt;..</text></g><g><title>__rust_alloc (4 samples, 0.28%)</title><rect x="43.0565%" y="581" width="0.2791%" height="15" fill="rgb(232,229,15)"/><text x="43.3065%" y="591.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.35%)</title><rect x="44.3824%" y="517" width="0.3489%" height="15" fill="rgb(254,30,23)"/><text x="44.6324%" y="527.50"></text></g><g><title>__rdl_alloc (2 samples, 0.14%)</title><rect x="44.7313%" y="517" width="0.1396%" height="15" fill="rgb(235,160,14)"/><text x="44.9813%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.14%)</title><rect x="44.7313%" y="501" width="0.1396%" height="15" fill="rgb(212,155,44)"/><text x="44.9813%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.77%)</title><rect x="44.1731%" y="533" width="0.7676%" height="15" fill="rgb(226,2,50)"/><text x="44.4231%" y="543.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.21%)</title><rect x="45.6385%" y="517" width="0.2094%" height="15" fill="rgb(234,177,6)"/><text x="45.8885%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.21%)</title><rect x="45.8479%" y="517" width="0.2094%" height="15" fill="rgb(217,24,9)"/><text x="46.0979%" y="527.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.21%)</title><rect x="43.3357%" y="597" width="3.2100%" height="15" fill="rgb(220,13,46)"/><text x="43.5857%" y="607.50">&lt;my..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (42 samples, 2.93%)</title><rect x="43.6148%" y="581" width="2.9309%" height="15" fill="rgb(239,221,27)"/><text x="43.8648%" y="591.50">my..</text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (41 samples, 2.86%)</title><rect x="43.6846%" y="565" width="2.8611%" height="15" fill="rgb(222,198,25)"/><text x="43.9346%" y="575.50">my..</text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (38 samples, 2.65%)</title><rect x="43.8939%" y="549" width="2.6518%" height="15" fill="rgb(211,99,13)"/><text x="44.1439%" y="559.50">my..</text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (23 samples, 1.61%)</title><rect x="44.9407%" y="533" width="1.6050%" height="15" fill="rgb(232,111,31)"/><text x="45.1907%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (6 samples, 0.42%)</title><rect x="46.1270%" y="517" width="0.4187%" height="15" fill="rgb(245,82,37)"/><text x="46.3770%" y="527.50"></text></g><g><title>__GI___libc_free (6 samples, 0.42%)</title><rect x="46.5457%" y="597" width="0.4187%" height="15" fill="rgb(227,149,46)"/><text x="46.7957%" y="607.50"></text></g><g><title>_int_free (11 samples, 0.77%)</title><rect x="47.0342%" y="597" width="0.7676%" height="15" fill="rgb(218,36,50)"/><text x="47.2842%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.14%)</title><rect x="47.8018%" y="597" width="0.1396%" height="15" fill="rgb(226,80,48)"/><text x="48.0518%" y="607.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.28%)</title><rect x="48.0112%" y="501" width="0.2791%" height="15" fill="rgb(238,224,15)"/><text x="48.2612%" y="511.50"></text></g><g><title>mysql::conn::Conn::read_packet (108 samples, 7.54%)</title><rect x="40.9630%" y="613" width="7.5366%" height="15" fill="rgb(241,136,10)"/><text x="41.2130%" y="623.50">mysql::con..</text></g><g><title>std::io::error::Error::_new (8 samples, 0.56%)</title><rect x="47.9414%" y="597" width="0.5583%" height="15" fill="rgb(208,32,45)"/><text x="48.1914%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (8 samples, 0.56%)</title><rect x="47.9414%" y="581" width="0.5583%" height="15" fill="rgb(207,135,9)"/><text x="48.1914%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.49%)</title><rect x="48.0112%" y="565" width="0.4885%" height="15" fill="rgb(206,86,44)"/><text x="48.2612%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.49%)</title><rect x="48.0112%" y="549" width="0.4885%" height="15" fill="rgb(245,177,15)"/><text x="48.2612%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.49%)</title><rect x="48.0112%" y="533" width="0.4885%" height="15" fill="rgb(206,64,50)"/><text x="48.2612%" y="543.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.49%)</title><rect x="48.0112%" y="517" width="0.4885%" height="15" fill="rgb(234,36,40)"/><text x="48.2612%" y="527.50"></text></g><g><title>__rust_alloc (2 samples, 0.14%)</title><rect x="48.3601%" y="501" width="0.1396%" height="15" fill="rgb(213,64,8)"/><text x="48.6101%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 1.26%)</title><rect x="49.0579%" y="597" width="1.2561%" height="15" fill="rgb(210,75,36)"/><text x="49.3079%" y="607.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="50.1745%" y="581" width="0.1396%" height="15" fill="rgb(229,88,21)"/><text x="50.4245%" y="591.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.35%)</title><rect x="50.5234%" y="581" width="0.3489%" height="15" fill="rgb(252,204,47)"/><text x="50.7734%" y="591.50"></text></g><g><title>__rdl_alloc (2 samples, 0.14%)</title><rect x="50.9421%" y="581" width="0.1396%" height="15" fill="rgb(208,77,27)"/><text x="51.1921%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.14%)</title><rect x="50.9421%" y="565" width="0.1396%" height="15" fill="rgb(221,76,26)"/><text x="51.1921%" y="575.50"></text></g><g><title>lobsters_microbenchmarks::main (166 samples, 11.58%)</title><rect x="39.6371%" y="693" width="11.5841%" height="15" fill="rgb(225,139,18)"/><text x="39.8871%" y="703.50">lobsters_microben..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (164 samples, 11.44%)</title><rect x="39.7767%" y="677" width="11.4445%" height="15" fill="rgb(230,137,11)"/><text x="40.0267%" y="687.50">lobsters_microben..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (151 samples, 10.54%)</title><rect x="40.6839%" y="661" width="10.5373%" height="15" fill="rgb(212,28,1)"/><text x="40.9339%" y="671.50">&lt;mysql::conn::q..</text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (151 samples, 10.54%)</title><rect x="40.6839%" y="645" width="10.5373%" height="15" fill="rgb(248,164,17)"/><text x="40.9339%" y="655.50">&lt;mysql::conn::q..</text></g><g><title>mysql::conn::Conn::next_text (151 samples, 10.54%)</title><rect x="40.6839%" y="629" width="10.5373%" height="15" fill="rgb(222,171,42)"/><text x="40.9339%" y="639.50">mysql::conn::Co..</text></g><g><title>mysql_common::value::read_text_values (39 samples, 2.72%)</title><rect x="48.4997%" y="613" width="2.7216%" height="15" fill="rgb(243,84,45)"/><text x="48.7497%" y="623.50">my..</text></g><g><title>mysql_common::value::read_text_value (13 samples, 0.91%)</title><rect x="50.3140%" y="597" width="0.9072%" height="15" fill="rgb(252,49,23)"/><text x="50.5640%" y="607.50"></text></g><g><title>main (17 samples, 1.19%)</title><rect x="51.2212%" y="693" width="1.1863%" height="15" fill="rgb(215,19,7)"/><text x="51.4712%" y="703.50"></text></g><g><title>std::rt::lang_start_internal (17 samples, 1.19%)</title><rect x="51.2212%" y="677" width="1.1863%" height="15" fill="rgb(238,81,41)"/><text x="51.4712%" y="687.50"></text></g><g><title>std::panic::catch_unwind (17 samples, 1.19%)</title><rect x="51.2212%" y="661" width="1.1863%" height="15" fill="rgb(210,199,37)"/><text x="51.4712%" y="671.50"></text></g><g><title>std::panicking::try (17 samples, 1.19%)</title><rect x="51.2212%" y="645" width="1.1863%" height="15" fill="rgb(244,192,49)"/><text x="51.4712%" y="655.50"></text></g><g><title>std::panicking::try::do_call (17 samples, 1.19%)</title><rect x="51.2212%" y="629" width="1.1863%" height="15" fill="rgb(226,211,11)"/><text x="51.4712%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (17 samples, 1.19%)</title><rect x="51.2212%" y="613" width="1.1863%" height="15" fill="rgb(236,162,54)"/><text x="51.4712%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (17 samples, 1.19%)</title><rect x="51.2212%" y="597" width="1.1863%" height="15" fill="rgb(220,229,9)"/><text x="51.4712%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (17 samples, 1.19%)</title><rect x="51.2212%" y="581" width="1.1863%" height="15" fill="rgb(250,87,22)"/><text x="51.4712%" y="591.50"></text></g><g><title>lobsters_microbenchmarks::main (17 samples, 1.19%)</title><rect x="51.2212%" y="565" width="1.1863%" height="15" fill="rgb(239,43,17)"/><text x="51.4712%" y="575.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (17 samples, 1.19%)</title><rect x="51.2212%" y="549" width="1.1863%" height="15" fill="rgb(231,177,25)"/><text x="51.4712%" y="559.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 1.19%)</title><rect x="51.2212%" y="533" width="1.1863%" height="15" fill="rgb(219,179,1)"/><text x="51.4712%" y="543.50"></text></g><g><title>__rust_dealloc (5 samples, 0.35%)</title><rect x="52.0586%" y="517" width="0.3489%" height="15" fill="rgb(238,219,53)"/><text x="52.3086%" y="527.50"></text></g><g><title>core::fmt::write (2 samples, 0.14%)</title><rect x="52.4075%" y="629" width="0.1396%" height="15" fill="rgb(232,167,36)"/><text x="52.6575%" y="639.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (3 samples, 0.21%)</title><rect x="52.4075%" y="677" width="0.2094%" height="15" fill="rgb(244,19,51)"/><text x="52.6575%" y="687.50"></text></g><g><title>decor_mem::Shim::create_schema (3 samples, 0.21%)</title><rect x="52.4075%" y="661" width="0.2094%" height="15" fill="rgb(224,6,22)"/><text x="52.6575%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (3 samples, 0.21%)</title><rect x="52.4075%" y="645" width="0.2094%" height="15" fill="rgb(224,145,5)"/><text x="52.6575%" y="655.50"></text></g><g><title>_int_malloc (2 samples, 0.14%)</title><rect x="52.9658%" y="405" width="0.1396%" height="15" fill="rgb(234,130,49)"/><text x="53.2158%" y="415.50"></text></g><g><title>sysmalloc (2 samples, 0.14%)</title><rect x="52.9658%" y="389" width="0.1396%" height="15" fill="rgb(254,6,2)"/><text x="53.2158%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.49%)</title><rect x="52.6867%" y="613" width="0.4885%" height="15" fill="rgb(208,96,46)"/><text x="52.9367%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.35%)</title><rect x="52.8262%" y="597" width="0.3489%" height="15" fill="rgb(239,3,39)"/><text x="53.0762%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.35%)</title><rect x="52.8262%" y="581" width="0.3489%" height="15" fill="rgb(233,210,1)"/><text x="53.0762%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.28%)</title><rect x="52.8960%" y="565" width="0.2791%" height="15" fill="rgb(244,137,37)"/><text x="53.1460%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.28%)</title><rect x="52.8960%" y="549" width="0.2791%" height="15" fill="rgb(240,136,2)"/><text x="53.1460%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.21%)</title><rect x="52.9658%" y="533" width="0.2094%" height="15" fill="rgb(239,18,37)"/><text x="53.2158%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.21%)</title><rect x="52.9658%" y="517" width="0.2094%" height="15" fill="rgb(218,185,22)"/><text x="53.2158%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.21%)</title><rect x="52.9658%" y="501" width="0.2094%" height="15" fill="rgb(225,218,4)"/><text x="53.2158%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.21%)</title><rect x="52.9658%" y="485" width="0.2094%" height="15" fill="rgb(230,182,32)"/><text x="53.2158%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.21%)</title><rect x="52.9658%" y="469" width="0.2094%" height="15" fill="rgb(242,56,43)"/><text x="53.2158%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.21%)</title><rect x="52.9658%" y="453" width="0.2094%" height="15" fill="rgb(233,99,24)"/><text x="53.2158%" y="463.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.21%)</title><rect x="52.9658%" y="437" width="0.2094%" height="15" fill="rgb(234,209,42)"/><text x="53.2158%" y="447.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="52.9658%" y="421" width="0.2094%" height="15" fill="rgb(227,7,12)"/><text x="53.2158%" y="431.50"></text></g><g><title>__GI___mprotect (3 samples, 0.21%)</title><rect x="53.2449%" y="565" width="0.2094%" height="15" fill="rgb(245,203,43)"/><text x="53.4949%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.21%)</title><rect x="53.2449%" y="549" width="0.2094%" height="15" fill="rgb(238,205,33)"/><text x="53.4949%" y="559.50"></text></g><g><title>prepare_exit_to_usermode (2 samples, 0.14%)</title><rect x="53.3147%" y="533" width="0.1396%" height="15" fill="rgb(231,56,7)"/><text x="53.5647%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.98%)</title><rect x="52.6169%" y="645" width="0.9770%" height="15" fill="rgb(244,186,29)"/><text x="52.8669%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.98%)</title><rect x="52.6169%" y="629" width="0.9770%" height="15" fill="rgb(234,111,31)"/><text x="52.8669%" y="639.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.42%)</title><rect x="53.1752%" y="613" width="0.4187%" height="15" fill="rgb(241,149,10)"/><text x="53.4252%" y="623.50"></text></g><g><title>_int_malloc (5 samples, 0.35%)</title><rect x="53.2449%" y="597" width="0.3489%" height="15" fill="rgb(249,206,44)"/><text x="53.4949%" y="607.50"></text></g><g><title>sysmalloc (5 samples, 0.35%)</title><rect x="53.2449%" y="581" width="0.3489%" height="15" fill="rgb(251,153,30)"/><text x="53.4949%" y="591.50"></text></g><g><title>page_fault (2 samples, 0.14%)</title><rect x="53.4543%" y="565" width="0.1396%" height="15" fill="rgb(239,152,38)"/><text x="53.7043%" y="575.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.14%)</title><rect x="53.4543%" y="549" width="0.1396%" height="15" fill="rgb(249,139,47)"/><text x="53.7043%" y="559.50"></text></g><g><title>handle_mm_fault (2 samples, 0.14%)</title><rect x="53.4543%" y="533" width="0.1396%" height="15" fill="rgb(244,64,35)"/><text x="53.7043%" y="543.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.14%)</title><rect x="53.4543%" y="517" width="0.1396%" height="15" fill="rgb(216,46,15)"/><text x="53.7043%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="53.5939%" y="645" width="0.1396%" height="15" fill="rgb(250,74,19)"/><text x="53.8439%" y="655.50"></text></g><g><title>__dev_queue_xmit (2 samples, 0.14%)</title><rect x="54.3615%" y="325" width="0.1396%" height="15" fill="rgb(249,42,33)"/><text x="54.6115%" y="335.50"></text></g><g><title>ip_local_deliver (5 samples, 0.35%)</title><rect x="54.5708%" y="197" width="0.3489%" height="15" fill="rgb(242,149,17)"/><text x="54.8208%" y="207.50"></text></g><g><title>ip_local_deliver_finish (5 samples, 0.35%)</title><rect x="54.5708%" y="181" width="0.3489%" height="15" fill="rgb(244,29,21)"/><text x="54.8208%" y="191.50"></text></g><g><title>ip_protocol_deliver_rcu (5 samples, 0.35%)</title><rect x="54.5708%" y="165" width="0.3489%" height="15" fill="rgb(220,130,37)"/><text x="54.8208%" y="175.50"></text></g><g><title>tcp_v4_rcv (5 samples, 0.35%)</title><rect x="54.5708%" y="149" width="0.3489%" height="15" fill="rgb(211,67,2)"/><text x="54.8208%" y="159.50"></text></g><g><title>tcp_v4_do_rcv (3 samples, 0.21%)</title><rect x="54.7104%" y="133" width="0.2094%" height="15" fill="rgb(235,68,52)"/><text x="54.9604%" y="143.50"></text></g><g><title>tcp_rcv_established (3 samples, 0.21%)</title><rect x="54.7104%" y="117" width="0.2094%" height="15" fill="rgb(246,142,3)"/><text x="54.9604%" y="127.50"></text></g><g><title>sock_def_readable (3 samples, 0.21%)</title><rect x="54.7104%" y="101" width="0.2094%" height="15" fill="rgb(241,25,7)"/><text x="54.9604%" y="111.50"></text></g><g><title>__wake_up_common_lock (3 samples, 0.21%)</title><rect x="54.7104%" y="85" width="0.2094%" height="15" fill="rgb(242,119,39)"/><text x="54.9604%" y="95.50"></text></g><g><title>__wake_up_common (3 samples, 0.21%)</title><rect x="54.7104%" y="69" width="0.2094%" height="15" fill="rgb(241,98,45)"/><text x="54.9604%" y="79.50"></text></g><g><title>pollwake (3 samples, 0.21%)</title><rect x="54.7104%" y="53" width="0.2094%" height="15" fill="rgb(254,28,30)"/><text x="54.9604%" y="63.50"></text></g><g><title>try_to_wake_up (3 samples, 0.21%)</title><rect x="54.7104%" y="37" width="0.2094%" height="15" fill="rgb(241,142,54)"/><text x="54.9604%" y="47.50"></text></g><g><title>__tcp_push_pending_frames (12 samples, 0.84%)</title><rect x="54.1521%" y="421" width="0.8374%" height="15" fill="rgb(222,85,15)"/><text x="54.4021%" y="431.50"></text></g><g><title>tcp_write_xmit (11 samples, 0.77%)</title><rect x="54.2219%" y="405" width="0.7676%" height="15" fill="rgb(210,85,47)"/><text x="54.4719%" y="415.50"></text></g><g><title>__tcp_transmit_skb (11 samples, 0.77%)</title><rect x="54.2219%" y="389" width="0.7676%" height="15" fill="rgb(224,206,25)"/><text x="54.4719%" y="399.50"></text></g><g><title>__ip_queue_xmit (10 samples, 0.70%)</title><rect x="54.2917%" y="373" width="0.6978%" height="15" fill="rgb(243,201,19)"/><text x="54.5417%" y="383.50"></text></g><g><title>ip_output (10 samples, 0.70%)</title><rect x="54.2917%" y="357" width="0.6978%" height="15" fill="rgb(236,59,4)"/><text x="54.5417%" y="367.50"></text></g><g><title>ip_finish_output2 (9 samples, 0.63%)</title><rect x="54.3615%" y="341" width="0.6281%" height="15" fill="rgb(254,179,45)"/><text x="54.6115%" y="351.50"></text></g><g><title>__local_bh_enable_ip (7 samples, 0.49%)</title><rect x="54.5010%" y="325" width="0.4885%" height="15" fill="rgb(226,14,10)"/><text x="54.7510%" y="335.50"></text></g><g><title>do_softirq (7 samples, 0.49%)</title><rect x="54.5010%" y="309" width="0.4885%" height="15" fill="rgb(244,27,41)"/><text x="54.7510%" y="319.50"></text></g><g><title>do_softirq_own_stack (7 samples, 0.49%)</title><rect x="54.5010%" y="293" width="0.4885%" height="15" fill="rgb(235,35,32)"/><text x="54.7510%" y="303.50"></text></g><g><title>__do_softirq (7 samples, 0.49%)</title><rect x="54.5010%" y="277" width="0.4885%" height="15" fill="rgb(218,68,31)"/><text x="54.7510%" y="287.50"></text></g><g><title>net_rx_action (7 samples, 0.49%)</title><rect x="54.5010%" y="261" width="0.4885%" height="15" fill="rgb(207,120,37)"/><text x="54.7510%" y="271.50"></text></g><g><title>process_backlog (7 samples, 0.49%)</title><rect x="54.5010%" y="245" width="0.4885%" height="15" fill="rgb(227,98,0)"/><text x="54.7510%" y="255.50"></text></g><g><title>__netif_receive_skb_one_core (7 samples, 0.49%)</title><rect x="54.5010%" y="229" width="0.4885%" height="15" fill="rgb(207,7,3)"/><text x="54.7510%" y="239.50"></text></g><g><title>ip_rcv (6 samples, 0.42%)</title><rect x="54.5708%" y="213" width="0.4187%" height="15" fill="rgb(206,98,19)"/><text x="54.8208%" y="223.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (17 samples, 1.19%)</title><rect x="53.8730%" y="645" width="1.1863%" height="15" fill="rgb(217,5,26)"/><text x="54.1230%" y="655.50"></text></g><g><title>mysql::conn::Conn::_query (16 samples, 1.12%)</title><rect x="53.9428%" y="629" width="1.1165%" height="15" fill="rgb(235,190,38)"/><text x="54.1928%" y="639.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (16 samples, 1.12%)</title><rect x="53.9428%" y="613" width="1.1165%" height="15" fill="rgb(247,86,24)"/><text x="54.1928%" y="623.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (16 samples, 1.12%)</title><rect x="53.9428%" y="597" width="1.1165%" height="15" fill="rgb(205,101,16)"/><text x="54.1928%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (15 samples, 1.05%)</title><rect x="54.0126%" y="581" width="1.0468%" height="15" fill="rgb(246,168,33)"/><text x="54.2626%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::write (15 samples, 1.05%)</title><rect x="54.0126%" y="565" width="1.0468%" height="15" fill="rgb(231,114,1)"/><text x="54.2626%" y="575.50"></text></g><g><title>__libc_send (15 samples, 1.05%)</title><rect x="54.0126%" y="549" width="1.0468%" height="15" fill="rgb(207,184,53)"/><text x="54.2626%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (15 samples, 1.05%)</title><rect x="54.0126%" y="533" width="1.0468%" height="15" fill="rgb(224,95,51)"/><text x="54.2626%" y="543.50"></text></g><g><title>do_syscall_64 (15 samples, 1.05%)</title><rect x="54.0126%" y="517" width="1.0468%" height="15" fill="rgb(212,188,45)"/><text x="54.2626%" y="527.50"></text></g><g><title>__x64_sys_sendto (15 samples, 1.05%)</title><rect x="54.0126%" y="501" width="1.0468%" height="15" fill="rgb(223,154,38)"/><text x="54.2626%" y="511.50"></text></g><g><title>__sys_sendto (15 samples, 1.05%)</title><rect x="54.0126%" y="485" width="1.0468%" height="15" fill="rgb(251,22,52)"/><text x="54.2626%" y="495.50"></text></g><g><title>sock_sendmsg (15 samples, 1.05%)</title><rect x="54.0126%" y="469" width="1.0468%" height="15" fill="rgb(229,209,22)"/><text x="54.2626%" y="479.50"></text></g><g><title>tcp_sendmsg (15 samples, 1.05%)</title><rect x="54.0126%" y="453" width="1.0468%" height="15" fill="rgb(234,138,34)"/><text x="54.2626%" y="463.50"></text></g><g><title>tcp_sendmsg_locked (15 samples, 1.05%)</title><rect x="54.0126%" y="437" width="1.0468%" height="15" fill="rgb(212,95,11)"/><text x="54.2626%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.35%)</title><rect x="55.8269%" y="613" width="0.3489%" height="15" fill="rgb(240,179,47)"/><text x="56.0769%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.35%)</title><rect x="55.8269%" y="597" width="0.3489%" height="15" fill="rgb(240,163,11)"/><text x="56.0769%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.35%)</title><rect x="55.8269%" y="581" width="0.3489%" height="15" fill="rgb(236,37,12)"/><text x="56.0769%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.35%)</title><rect x="55.8269%" y="565" width="0.3489%" height="15" fill="rgb(232,164,16)"/><text x="56.0769%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.28%)</title><rect x="55.8967%" y="549" width="0.2791%" height="15" fill="rgb(244,205,15)"/><text x="56.1467%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (4 samples, 0.28%)</title><rect x="55.8967%" y="533" width="0.2791%" height="15" fill="rgb(223,117,47)"/><text x="56.1467%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.28%)</title><rect x="55.8967%" y="517" width="0.2791%" height="15" fill="rgb(244,107,35)"/><text x="56.1467%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.28%)</title><rect x="55.8967%" y="501" width="0.2791%" height="15" fill="rgb(205,140,8)"/><text x="56.1467%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.28%)</title><rect x="55.8967%" y="485" width="0.2791%" height="15" fill="rgb(228,84,46)"/><text x="56.1467%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.28%)</title><rect x="55.8967%" y="469" width="0.2791%" height="15" fill="rgb(254,188,9)"/><text x="56.1467%" y="479.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.28%)</title><rect x="55.8967%" y="453" width="0.2791%" height="15" fill="rgb(206,112,54)"/><text x="56.1467%" y="463.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.21%)</title><rect x="55.9665%" y="437" width="0.2094%" height="15" fill="rgb(216,84,49)"/><text x="56.2165%" y="447.50"></text></g><g><title>__GI___libc_free (7 samples, 0.49%)</title><rect x="56.5248%" y="581" width="0.4885%" height="15" fill="rgb(214,194,35)"/><text x="56.7748%" y="591.50"></text></g><g><title>__rust_dealloc (2 samples, 0.14%)</title><rect x="57.0133%" y="581" width="0.1396%" height="15" fill="rgb(249,28,3)"/><text x="57.2633%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 2.23%)</title><rect x="56.1759%" y="597" width="2.2331%" height="15" fill="rgb(222,56,52)"/><text x="56.4259%" y="607.50">&lt;..</text></g><g><title>_int_free (18 samples, 1.26%)</title><rect x="57.1528%" y="581" width="1.2561%" height="15" fill="rgb(245,217,50)"/><text x="57.4028%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 2.93%)</title><rect x="56.1759%" y="613" width="2.9309%" height="15" fill="rgb(213,201,24)"/><text x="56.4259%" y="623.50">&lt;h..</text></g><g><title>_int_free (10 samples, 0.70%)</title><rect x="58.4089%" y="597" width="0.6978%" height="15" fill="rgb(248,116,28)"/><text x="58.6589%" y="607.50"></text></g><g><title>malloc_consolidate (10 samples, 0.70%)</title><rect x="58.4089%" y="581" width="0.6978%" height="15" fill="rgb(219,72,43)"/><text x="58.6589%" y="591.50"></text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.28%)</title><rect x="58.8276%" y="565" width="0.2791%" height="15" fill="rgb(209,138,14)"/><text x="59.0776%" y="575.50"></text></g><g><title>__GI___libc_free (11 samples, 0.77%)</title><rect x="59.1068%" y="613" width="0.7676%" height="15" fill="rgb(222,18,33)"/><text x="59.3568%" y="623.50"></text></g><g><title>__GI___libc_malloc (29 samples, 2.02%)</title><rect x="59.8744%" y="613" width="2.0237%" height="15" fill="rgb(213,199,7)"/><text x="60.1244%" y="623.50">_..</text></g><g><title>_int_malloc (23 samples, 1.61%)</title><rect x="60.2931%" y="597" width="1.6050%" height="15" fill="rgb(250,110,10)"/><text x="60.5431%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.21%)</title><rect x="61.6888%" y="581" width="0.2094%" height="15" fill="rgb(248,123,6)"/><text x="61.9388%" y="591.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.21%)</title><rect x="61.9679%" y="613" width="0.2094%" height="15" fill="rgb(206,91,31)"/><text x="62.2179%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.21%)</title><rect x="61.9679%" y="597" width="0.2094%" height="15" fill="rgb(211,154,13)"/><text x="62.2179%" y="607.50"></text></g><g><title>__rust_dealloc (4 samples, 0.28%)</title><rect x="62.2470%" y="613" width="0.2791%" height="15" fill="rgb(225,148,7)"/><text x="62.4970%" y="623.50"></text></g><g><title>_int_free (32 samples, 2.23%)</title><rect x="62.5262%" y="613" width="2.2331%" height="15" fill="rgb(220,160,43)"/><text x="62.7762%" y="623.50">_..</text></g><g><title>decor_mem::select::get_query_results (153 samples, 10.68%)</title><rect x="55.0593%" y="645" width="10.6769%" height="15" fill="rgb(213,52,39)"/><text x="55.3093%" y="655.50">decor_mem::selec..</text></g><g><title>decor_mem::select::get_setexpr_results (153 samples, 10.68%)</title><rect x="55.0593%" y="629" width="10.6769%" height="15" fill="rgb(243,137,7)"/><text x="55.3093%" y="639.50">decor_mem::selec..</text></g><g><title>core::ptr::drop_in_place (13 samples, 0.91%)</title><rect x="64.8290%" y="613" width="0.9072%" height="15" fill="rgb(230,79,13)"/><text x="65.0790%" y="623.50"></text></g><g><title>core::fmt::write (5 samples, 0.35%)</title><rect x="65.8060%" y="613" width="0.3489%" height="15" fill="rgb(247,105,23)"/><text x="66.0560%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.28%)</title><rect x="65.8758%" y="597" width="0.2791%" height="15" fill="rgb(223,179,41)"/><text x="66.1258%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (3 samples, 0.21%)</title><rect x="65.9456%" y="581" width="0.2094%" height="15" fill="rgb(218,9,34)"/><text x="66.1956%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (195 samples, 13.61%)</title><rect x="52.6169%" y="661" width="13.6078%" height="15" fill="rgb(222,106,8)"/><text x="52.8669%" y="671.50">decor_mem::query_tran..</text></g><g><title>decor_mem::views::Views::insert (7 samples, 0.49%)</title><rect x="65.7362%" y="645" width="0.4885%" height="15" fill="rgb(211,220,0)"/><text x="65.9862%" y="655.50"></text></g><g><title>decor_mem::views::View::insert_into_index (6 samples, 0.42%)</title><rect x="65.8060%" y="629" width="0.4187%" height="15" fill="rgb(229,52,16)"/><text x="66.0560%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="66.2945%" y="613" width="0.1396%" height="15" fill="rgb(212,155,18)"/><text x="66.5445%" y="623.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.14%)</title><rect x="66.2945%" y="597" width="0.1396%" height="15" fill="rgb(242,21,14)"/><text x="66.5445%" y="607.50"></text></g><g><title>_int_realloc (2 samples, 0.14%)</title><rect x="66.2945%" y="581" width="0.1396%" height="15" fill="rgb(222,19,48)"/><text x="66.5445%" y="591.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (203 samples, 14.17%)</title><rect x="52.4075%" y="693" width="14.1661%" height="15" fill="rgb(232,45,27)"/><text x="52.6575%" y="703.50">msql_srv::MysqlInterme..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (200 samples, 13.96%)</title><rect x="52.6169%" y="677" width="13.9567%" height="15" fill="rgb(249,103,42)"/><text x="52.8669%" y="687.50">&lt;decor_mem::Shim as m..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (5 samples, 0.35%)</title><rect x="66.2247%" y="661" width="0.3489%" height="15" fill="rgb(246,81,33)"/><text x="66.4747%" y="671.50"></text></g><g><title>sql_parser::parser::parse_statements (5 samples, 0.35%)</title><rect x="66.2247%" y="645" width="0.3489%" height="15" fill="rgb(252,33,42)"/><text x="66.4747%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (5 samples, 0.35%)</title><rect x="66.2247%" y="629" width="0.3489%" height="15" fill="rgb(209,212,41)"/><text x="66.4747%" y="639.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::end_row (2 samples, 0.14%)</title><rect x="66.5736%" y="693" width="0.1396%" height="15" fill="rgb(207,154,6)"/><text x="66.8236%" y="703.50"></text></g><g><title>mysql::conn::Conn::next_text (2 samples, 0.14%)</title><rect x="66.7132%" y="693" width="0.1396%" height="15" fill="rgb(223,64,47)"/><text x="66.9632%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (6 samples, 0.42%)</title><rect x="66.8528%" y="693" width="0.4187%" height="15" fill="rgb(211,161,38)"/><text x="67.1028%" y="703.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (5 samples, 0.35%)</title><rect x="67.2715%" y="693" width="0.3489%" height="15" fill="rgb(219,138,40)"/><text x="67.5215%" y="703.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="67.8995%" y="613" width="0.1396%" height="15" fill="rgb(241,228,46)"/><text x="68.1495%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="67.8995%" y="597" width="0.1396%" height="15" fill="rgb(223,209,38)"/><text x="68.1495%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.14%)</title><rect x="67.8995%" y="581" width="0.1396%" height="15" fill="rgb(236,164,45)"/><text x="68.1495%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.14%)</title><rect x="67.8995%" y="565" width="0.1396%" height="15" fill="rgb(231,15,5)"/><text x="68.1495%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.14%)</title><rect x="67.8995%" y="549" width="0.1396%" height="15" fill="rgb(252,35,15)"/><text x="68.1495%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (22 samples, 1.54%)</title><rect x="68.1786%" y="581" width="1.5352%" height="15" fill="rgb(248,181,18)"/><text x="68.4286%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 1.54%)</title><rect x="68.1786%" y="565" width="1.5352%" height="15" fill="rgb(233,39,42)"/><text x="68.4286%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 1.54%)</title><rect x="68.1786%" y="549" width="1.5352%" height="15" fill="rgb(238,110,33)"/><text x="68.4286%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 1.54%)</title><rect x="68.1786%" y="533" width="1.5352%" height="15" fill="rgb(233,195,10)"/><text x="68.4286%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (22 samples, 1.54%)</title><rect x="68.1786%" y="517" width="1.5352%" height="15" fill="rgb(254,105,3)"/><text x="68.4286%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (22 samples, 1.54%)</title><rect x="68.1786%" y="501" width="1.5352%" height="15" fill="rgb(221,225,9)"/><text x="68.4286%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (22 samples, 1.54%)</title><rect x="68.1786%" y="485" width="1.5352%" height="15" fill="rgb(224,227,45)"/><text x="68.4286%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 1.54%)</title><rect x="68.1786%" y="469" width="1.5352%" height="15" fill="rgb(229,198,43)"/><text x="68.4286%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 1.54%)</title><rect x="68.1786%" y="453" width="1.5352%" height="15" fill="rgb(206,209,35)"/><text x="68.4286%" y="463.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (26 samples, 1.81%)</title><rect x="68.0391%" y="613" width="1.8144%" height="15" fill="rgb(245,195,53)"/><text x="68.2891%" y="623.50">s..</text></g><g><title>sql_parser::parser::Parser::expected (25 samples, 1.74%)</title><rect x="68.1089%" y="597" width="1.7446%" height="15" fill="rgb(240,92,26)"/><text x="68.3589%" y="607.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (32 samples, 2.23%)</title><rect x="67.7599%" y="661" width="2.2331%" height="15" fill="rgb(207,40,23)"/><text x="68.0099%" y="671.50">s..</text></g><g><title>sql_parser::parser::Parser::check_descent (32 samples, 2.23%)</title><rect x="67.7599%" y="645" width="2.2331%" height="15" fill="rgb(223,111,35)"/><text x="68.0099%" y="655.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (32 samples, 2.23%)</title><rect x="67.7599%" y="629" width="2.2331%" height="15" fill="rgb(229,147,28)"/><text x="68.0099%" y="639.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_value (2 samples, 0.14%)</title><rect x="69.8535%" y="613" width="0.1396%" height="15" fill="rgb(211,29,28)"/><text x="70.1035%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (35 samples, 2.44%)</title><rect x="67.7599%" y="693" width="2.4424%" height="15" fill="rgb(228,72,33)"/><text x="68.0099%" y="703.50">sq..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (35 samples, 2.44%)</title><rect x="67.7599%" y="677" width="2.4424%" height="15" fill="rgb(205,214,31)"/><text x="68.0099%" y="687.50">sq..</text></g><g><title>sql_parser::parser::Parser::parse_select (3 samples, 0.21%)</title><rect x="69.9930%" y="661" width="0.2094%" height="15" fill="rgb(224,111,15)"/><text x="70.2430%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (2 samples, 0.14%)</title><rect x="70.0628%" y="645" width="0.1396%" height="15" fill="rgb(253,21,26)"/><text x="70.3128%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (2 samples, 0.14%)</title><rect x="70.0628%" y="629" width="0.1396%" height="15" fill="rgb(245,139,43)"/><text x="70.3128%" y="639.50"></text></g><g><title>malloc_consolidate (2 samples, 0.14%)</title><rect x="70.2722%" y="389" width="0.1396%" height="15" fill="rgb(252,170,7)"/><text x="70.5222%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.28%)</title><rect x="70.2024%" y="597" width="0.2791%" height="15" fill="rgb(231,118,14)"/><text x="70.4524%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.28%)</title><rect x="70.2024%" y="581" width="0.2791%" height="15" fill="rgb(238,83,0)"/><text x="70.4524%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.28%)</title><rect x="70.2024%" y="565" width="0.2791%" height="15" fill="rgb(221,39,39)"/><text x="70.4524%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.28%)</title><rect x="70.2024%" y="549" width="0.2791%" height="15" fill="rgb(222,119,46)"/><text x="70.4524%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.28%)</title><rect x="70.2024%" y="533" width="0.2791%" height="15" fill="rgb(222,165,49)"/><text x="70.4524%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (4 samples, 0.28%)</title><rect x="70.2024%" y="517" width="0.2791%" height="15" fill="rgb(219,113,52)"/><text x="70.4524%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.28%)</title><rect x="70.2024%" y="501" width="0.2791%" height="15" fill="rgb(214,7,15)"/><text x="70.4524%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.28%)</title><rect x="70.2024%" y="485" width="0.2791%" height="15" fill="rgb(235,32,4)"/><text x="70.4524%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.28%)</title><rect x="70.2024%" y="469" width="0.2791%" height="15" fill="rgb(238,90,54)"/><text x="70.4524%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.28%)</title><rect x="70.2024%" y="453" width="0.2791%" height="15" fill="rgb(213,208,19)"/><text x="70.4524%" y="463.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.28%)</title><rect x="70.2024%" y="437" width="0.2791%" height="15" fill="rgb(233,156,4)"/><text x="70.4524%" y="447.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.28%)</title><rect x="70.2024%" y="421" width="0.2791%" height="15" fill="rgb(207,194,5)"/><text x="70.4524%" y="431.50"></text></g><g><title>_int_malloc (4 samples, 0.28%)</title><rect x="70.2024%" y="405" width="0.2791%" height="15" fill="rgb(206,111,30)"/><text x="70.4524%" y="415.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (5 samples, 0.35%)</title><rect x="70.2024%" y="693" width="0.3489%" height="15" fill="rgb(243,70,54)"/><text x="70.4524%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (5 samples, 0.35%)</title><rect x="70.2024%" y="677" width="0.3489%" height="15" fill="rgb(242,28,8)"/><text x="70.4524%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.35%)</title><rect x="70.2024%" y="661" width="0.3489%" height="15" fill="rgb(219,106,18)"/><text x="70.4524%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (5 samples, 0.35%)</title><rect x="70.2024%" y="645" width="0.3489%" height="15" fill="rgb(244,222,10)"/><text x="70.4524%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (5 samples, 0.35%)</title><rect x="70.2024%" y="629" width="0.3489%" height="15" fill="rgb(236,179,52)"/><text x="70.4524%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::expected (5 samples, 0.35%)</title><rect x="70.2024%" y="613" width="0.3489%" height="15" fill="rgb(213,23,39)"/><text x="70.4524%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (3 samples, 0.21%)</title><rect x="70.5513%" y="693" width="0.2094%" height="15" fill="rgb(238,48,10)"/><text x="70.8013%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.21%)</title><rect x="70.5513%" y="677" width="0.2094%" height="15" fill="rgb(251,196,23)"/><text x="70.8013%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (3 samples, 0.21%)</title><rect x="70.5513%" y="661" width="0.2094%" height="15" fill="rgb(250,152,24)"/><text x="70.8013%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (2 samples, 0.14%)</title><rect x="70.6211%" y="645" width="0.1396%" height="15" fill="rgb(209,150,17)"/><text x="70.8711%" y="655.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (6 samples, 0.42%)</title><rect x="70.9002%" y="533" width="0.4187%" height="15" fill="rgb(234,202,34)"/><text x="71.1502%" y="543.50"></text></g><g><title>mysql::conn::Conn::next_text (6 samples, 0.42%)</title><rect x="70.9002%" y="517" width="0.4187%" height="15" fill="rgb(253,148,53)"/><text x="71.1502%" y="527.50"></text></g><g><title>__GI___libc_free (6 samples, 0.42%)</title><rect x="71.3189%" y="533" width="0.4187%" height="15" fill="rgb(218,129,16)"/><text x="71.5689%" y="543.50"></text></g><g><title>_int_free (6 samples, 0.42%)</title><rect x="71.7376%" y="533" width="0.4187%" height="15" fill="rgb(216,85,19)"/><text x="71.9876%" y="543.50"></text></g><g><title>std::rt::lang_start_internal (38 samples, 2.65%)</title><rect x="70.8304%" y="693" width="2.6518%" height="15" fill="rgb(235,228,7)"/><text x="71.0804%" y="703.50">st..</text></g><g><title>std::panic::catch_unwind (38 samples, 2.65%)</title><rect x="70.8304%" y="677" width="2.6518%" height="15" fill="rgb(245,175,0)"/><text x="71.0804%" y="687.50">st..</text></g><g><title>std::panicking::try (38 samples, 2.65%)</title><rect x="70.8304%" y="661" width="2.6518%" height="15" fill="rgb(208,168,36)"/><text x="71.0804%" y="671.50">st..</text></g><g><title>std::panicking::try::do_call (38 samples, 2.65%)</title><rect x="70.8304%" y="645" width="2.6518%" height="15" fill="rgb(246,171,24)"/><text x="71.0804%" y="655.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (38 samples, 2.65%)</title><rect x="70.8304%" y="629" width="2.6518%" height="15" fill="rgb(215,142,24)"/><text x="71.0804%" y="639.50">co..</text></g><g><title>std::rt::lang_start::_{{closure}} (38 samples, 2.65%)</title><rect x="70.8304%" y="613" width="2.6518%" height="15" fill="rgb(250,187,7)"/><text x="71.0804%" y="623.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38 samples, 2.65%)</title><rect x="70.8304%" y="597" width="2.6518%" height="15" fill="rgb(228,66,33)"/><text x="71.0804%" y="607.50">st..</text></g><g><title>lobsters_microbenchmarks::main (38 samples, 2.65%)</title><rect x="70.8304%" y="581" width="2.6518%" height="15" fill="rgb(234,215,21)"/><text x="71.0804%" y="591.50">lo..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (37 samples, 2.58%)</title><rect x="70.9002%" y="565" width="2.5820%" height="15" fill="rgb(222,191,20)"/><text x="71.1502%" y="575.50">lo..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 2.58%)</title><rect x="70.9002%" y="549" width="2.5820%" height="15" fill="rgb(245,79,54)"/><text x="71.1502%" y="559.50">&lt;m..</text></g><g><title>mysql_common::row::new_row (18 samples, 1.26%)</title><rect x="72.2261%" y="533" width="1.2561%" height="15" fill="rgb(240,10,37)"/><text x="72.4761%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.91%)</title><rect x="72.5750%" y="517" width="0.9072%" height="15" fill="rgb(214,192,32)"/><text x="72.8250%" y="527.50"></text></g><g><title>__GI___libc_free (3 samples, 0.21%)</title><rect x="73.5520%" y="597" width="0.2094%" height="15" fill="rgb(209,36,54)"/><text x="73.8020%" y="607.50"></text></g><g><title>[unknown] (919 samples, 64.13%)</title><rect x="9.6999%" y="709" width="64.1312%" height="15" fill="rgb(220,10,11)"/><text x="9.9499%" y="719.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 0.35%)</title><rect x="73.4822%" y="693" width="0.3489%" height="15" fill="rgb(221,106,17)"/><text x="73.7322%" y="703.50"></text></g><g><title>lobsters_microbenchmarks::main (4 samples, 0.28%)</title><rect x="73.5520%" y="677" width="0.2791%" height="15" fill="rgb(251,142,44)"/><text x="73.8020%" y="687.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (4 samples, 0.28%)</title><rect x="73.5520%" y="661" width="0.2791%" height="15" fill="rgb(238,13,15)"/><text x="73.8020%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.28%)</title><rect x="73.5520%" y="645" width="0.2791%" height="15" fill="rgb(208,107,27)"/><text x="73.8020%" y="655.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (4 samples, 0.28%)</title><rect x="73.5520%" y="629" width="0.2791%" height="15" fill="rgb(205,136,37)"/><text x="73.8020%" y="639.50"></text></g><g><title>mysql::conn::Conn::next_text (4 samples, 0.28%)</title><rect x="73.5520%" y="613" width="0.2791%" height="15" fill="rgb(250,205,27)"/><text x="73.8020%" y="623.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.14%)</title><rect x="74.3894%" y="533" width="0.1396%" height="15" fill="rgb(210,80,43)"/><text x="74.6394%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.14%)</title><rect x="74.3894%" y="517" width="0.1396%" height="15" fill="rgb(247,160,36)"/><text x="74.6394%" y="527.50"></text></g><g><title>__rust_dealloc (3 samples, 0.21%)</title><rect x="74.5290%" y="533" width="0.2094%" height="15" fill="rgb(234,13,49)"/><text x="74.7790%" y="543.50"></text></g><g><title>_int_free (46 samples, 3.21%)</title><rect x="74.7383%" y="533" width="3.2100%" height="15" fill="rgb(234,122,0)"/><text x="74.9883%" y="543.50">_in..</text></g><g><title>malloc_consolidate (37 samples, 2.58%)</title><rect x="75.3664%" y="517" width="2.5820%" height="15" fill="rgb(207,146,38)"/><text x="75.6164%" y="527.50">ma..</text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.77%)</title><rect x="77.1807%" y="501" width="0.7676%" height="15" fill="rgb(207,177,25)"/><text x="77.4307%" y="511.50"></text></g><g><title>decor_mem::helpers::parser_val_to_common_val (8 samples, 0.56%)</title><rect x="77.9484%" y="533" width="0.5583%" height="15" fill="rgb(211,178,42)"/><text x="78.1984%" y="543.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (3 samples, 0.21%)</title><rect x="78.2973%" y="517" width="0.2094%" height="15" fill="rgb(230,69,54)"/><text x="78.5473%" y="527.50"></text></g><g><title>core::num::from_str_radix (2 samples, 0.14%)</title><rect x="78.3671%" y="501" width="0.1396%" height="15" fill="rgb(214,135,41)"/><text x="78.6171%" y="511.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::end_row (3 samples, 0.21%)</title><rect x="78.5066%" y="533" width="0.2094%" height="15" fill="rgb(237,67,25)"/><text x="78.7566%" y="543.50"></text></g><g><title>msql_srv::packet::PacketWriter&lt;W&gt;::maybe_end_packet (3 samples, 0.21%)</title><rect x="78.5066%" y="517" width="0.2094%" height="15" fill="rgb(222,189,50)"/><text x="78.7566%" y="527.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (2 samples, 0.14%)</title><rect x="78.9951%" y="469" width="0.1396%" height="15" fill="rgb(245,148,34)"/><text x="79.2451%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.14%)</title><rect x="78.9951%" y="453" width="0.1396%" height="15" fill="rgb(222,29,6)"/><text x="79.2451%" y="463.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.14%)</title><rect x="78.9951%" y="437" width="0.1396%" height="15" fill="rgb(221,189,43)"/><text x="79.2451%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.14%)</title><rect x="78.9951%" y="421" width="0.1396%" height="15" fill="rgb(207,36,27)"/><text x="79.2451%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.14%)</title><rect x="78.9951%" y="405" width="0.1396%" height="15" fill="rgb(217,90,24)"/><text x="79.2451%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.14%)</title><rect x="79.3440%" y="341" width="0.1396%" height="15" fill="rgb(224,66,35)"/><text x="79.5940%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.14%)</title><rect x="79.3440%" y="325" width="0.1396%" height="15" fill="rgb(221,13,50)"/><text x="79.5940%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.14%)</title><rect x="79.3440%" y="309" width="0.1396%" height="15" fill="rgb(236,68,49)"/><text x="79.5940%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="79.3440%" y="437" width="0.2094%" height="15" fill="rgb(229,146,28)"/><text x="79.5940%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="79.3440%" y="421" width="0.2094%" height="15" fill="rgb(225,31,38)"/><text x="79.5940%" y="431.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.21%)</title><rect x="79.3440%" y="405" width="0.2094%" height="15" fill="rgb(250,208,3)"/><text x="79.5940%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.21%)</title><rect x="79.3440%" y="389" width="0.2094%" height="15" fill="rgb(246,54,23)"/><text x="79.5940%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.21%)</title><rect x="79.3440%" y="373" width="0.2094%" height="15" fill="rgb(243,76,11)"/><text x="79.5940%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.21%)</title><rect x="79.3440%" y="357" width="0.2094%" height="15" fill="rgb(245,21,50)"/><text x="79.5940%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.14%)</title><rect x="79.7627%" y="229" width="0.1396%" height="15" fill="rgb(228,9,43)"/><text x="80.0127%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.14%)</title><rect x="79.7627%" y="213" width="0.1396%" height="15" fill="rgb(208,100,47)"/><text x="80.0127%" y="223.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.14%)</title><rect x="79.7627%" y="197" width="0.1396%" height="15" fill="rgb(232,26,8)"/><text x="80.0127%" y="207.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.14%)</title><rect x="79.7627%" y="181" width="0.1396%" height="15" fill="rgb(216,166,38)"/><text x="80.0127%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.28%)</title><rect x="79.6930%" y="405" width="0.2791%" height="15" fill="rgb(251,202,51)"/><text x="79.9430%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.28%)</title><rect x="79.6930%" y="389" width="0.2791%" height="15" fill="rgb(254,216,34)"/><text x="79.9430%" y="399.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.28%)</title><rect x="79.6930%" y="373" width="0.2791%" height="15" fill="rgb(251,32,27)"/><text x="79.9430%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 0.28%)</title><rect x="79.6930%" y="357" width="0.2791%" height="15" fill="rgb(208,127,28)"/><text x="79.9430%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.28%)</title><rect x="79.6930%" y="341" width="0.2791%" height="15" fill="rgb(224,137,22)"/><text x="79.9430%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (4 samples, 0.28%)</title><rect x="79.6930%" y="325" width="0.2791%" height="15" fill="rgb(254,70,32)"/><text x="79.9430%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.21%)</title><rect x="79.7627%" y="309" width="0.2094%" height="15" fill="rgb(229,75,37)"/><text x="80.0127%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.21%)</title><rect x="79.7627%" y="293" width="0.2094%" height="15" fill="rgb(252,64,23)"/><text x="80.0127%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.21%)</title><rect x="79.7627%" y="277" width="0.2094%" height="15" fill="rgb(232,162,48)"/><text x="80.0127%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.21%)</title><rect x="79.7627%" y="261" width="0.2094%" height="15" fill="rgb(246,160,12)"/><text x="80.0127%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.21%)</title><rect x="79.7627%" y="245" width="0.2094%" height="15" fill="rgb(247,166,0)"/><text x="80.0127%" y="255.50"></text></g><g><title>alloc::fmt::format (15 samples, 1.05%)</title><rect x="78.9951%" y="485" width="1.0468%" height="15" fill="rgb(249,219,21)"/><text x="79.2451%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (13 samples, 0.91%)</title><rect x="79.1347%" y="469" width="0.9072%" height="15" fill="rgb(205,209,3)"/><text x="79.3847%" y="479.50"></text></g><g><title>core::fmt::write (12 samples, 0.84%)</title><rect x="79.2045%" y="453" width="0.8374%" height="15" fill="rgb(243,44,1)"/><text x="79.4545%" y="463.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (7 samples, 0.49%)</title><rect x="79.5534%" y="437" width="0.4885%" height="15" fill="rgb(206,159,16)"/><text x="79.8034%" y="447.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (5 samples, 0.35%)</title><rect x="79.6930%" y="421" width="0.3489%" height="15" fill="rgb(244,77,30)"/><text x="79.9430%" y="431.50"></text></g><g><title>mysql_common::io::WriteMysqlExt::write_lenenc_int (2 samples, 0.14%)</title><rect x="80.0419%" y="485" width="0.1396%" height="15" fill="rgb(218,69,12)"/><text x="80.2919%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.14%)</title><rect x="80.0419%" y="469" width="0.1396%" height="15" fill="rgb(212,87,7)"/><text x="80.2919%" y="479.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (94 samples, 6.56%)</title><rect x="73.9009%" y="549" width="6.5597%" height="15" fill="rgb(245,114,25)"/><text x="74.1509%" y="559.50">decor_mem..</text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (25 samples, 1.74%)</title><rect x="78.7160%" y="533" width="1.7446%" height="15" fill="rgb(210,61,42)"/><text x="78.9660%" y="543.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (23 samples, 1.61%)</title><rect x="78.8555%" y="517" width="1.6050%" height="15" fill="rgb(211,52,33)"/><text x="79.1055%" y="527.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (23 samples, 1.61%)</title><rect x="78.8555%" y="501" width="1.6050%" height="15" fill="rgb(234,58,33)"/><text x="79.1055%" y="511.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.28%)</title><rect x="80.1814%" y="485" width="0.2791%" height="15" fill="rgb(220,115,36)"/><text x="80.4314%" y="495.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (100 samples, 6.98%)</title><rect x="73.8311%" y="565" width="6.9784%" height="15" fill="rgb(243,153,54)"/><text x="74.0811%" y="575.50">&lt;decor_me..</text></g><g><title>log::__private_api_log (4 samples, 0.28%)</title><rect x="80.5304%" y="549" width="0.2791%" height="15" fill="rgb(251,47,18)"/><text x="80.7804%" y="559.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (4 samples, 0.28%)</title><rect x="80.5304%" y="533" width="0.2791%" height="15" fill="rgb(242,102,42)"/><text x="80.7804%" y="543.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (4 samples, 0.28%)</title><rect x="80.5304%" y="517" width="0.2791%" height="15" fill="rgb(234,31,38)"/><text x="80.7804%" y="527.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (3 samples, 0.21%)</title><rect x="80.6001%" y="501" width="0.2094%" height="15" fill="rgb(221,117,51)"/><text x="80.8501%" y="511.50"></text></g><g><title>std::io::stdio::_eprint (3 samples, 0.21%)</title><rect x="80.6001%" y="485" width="0.2094%" height="15" fill="rgb(212,20,18)"/><text x="80.8501%" y="495.50"></text></g><g><title>std::io::stdio::print_to (3 samples, 0.21%)</title><rect x="80.6001%" y="469" width="0.2094%" height="15" fill="rgb(245,133,36)"/><text x="80.8501%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (3 samples, 0.21%)</title><rect x="80.6001%" y="453" width="0.2094%" height="15" fill="rgb(212,6,19)"/><text x="80.8501%" y="463.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (3 samples, 0.21%)</title><rect x="80.6001%" y="437" width="0.2094%" height="15" fill="rgb(218,1,36)"/><text x="80.8501%" y="447.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (3 samples, 0.21%)</title><rect x="80.6001%" y="421" width="0.2094%" height="15" fill="rgb(246,84,54)"/><text x="80.8501%" y="431.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (3 samples, 0.21%)</title><rect x="80.6001%" y="405" width="0.2094%" height="15" fill="rgb(242,110,6)"/><text x="80.8501%" y="415.50"></text></g><g><title>std::io::Write::write_fmt (3 samples, 0.21%)</title><rect x="80.6001%" y="389" width="0.2094%" height="15" fill="rgb(214,47,5)"/><text x="80.8501%" y="399.50"></text></g><g><title>core::fmt::write (3 samples, 0.21%)</title><rect x="80.6001%" y="373" width="0.2094%" height="15" fill="rgb(218,159,25)"/><text x="80.8501%" y="383.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.21%)</title><rect x="80.6001%" y="357" width="0.2094%" height="15" fill="rgb(215,211,28)"/><text x="80.8501%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (3 samples, 0.21%)</title><rect x="80.6001%" y="341" width="0.2094%" height="15" fill="rgb(238,59,32)"/><text x="80.8501%" y="351.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (3 samples, 0.21%)</title><rect x="80.6001%" y="325" width="0.2094%" height="15" fill="rgb(226,82,3)"/><text x="80.8501%" y="335.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.21%)</title><rect x="80.6001%" y="309" width="0.2094%" height="15" fill="rgb(240,164,32)"/><text x="80.8501%" y="319.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (3 samples, 0.21%)</title><rect x="80.6001%" y="293" width="0.2094%" height="15" fill="rgb(232,46,7)"/><text x="80.8501%" y="303.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.21%)</title><rect x="80.6001%" y="277" width="0.2094%" height="15" fill="rgb(229,129,53)"/><text x="80.8501%" y="287.50"></text></g><g><title>__libc_write (3 samples, 0.21%)</title><rect x="80.6001%" y="261" width="0.2094%" height="15" fill="rgb(234,188,29)"/><text x="80.8501%" y="271.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.21%)</title><rect x="80.6001%" y="245" width="0.2094%" height="15" fill="rgb(246,141,4)"/><text x="80.8501%" y="255.50"></text></g><g><title>do_syscall_64 (3 samples, 0.21%)</title><rect x="80.6001%" y="229" width="0.2094%" height="15" fill="rgb(229,23,39)"/><text x="80.8501%" y="239.50"></text></g><g><title>ksys_write (3 samples, 0.21%)</title><rect x="80.6001%" y="213" width="0.2094%" height="15" fill="rgb(206,12,3)"/><text x="80.8501%" y="223.50"></text></g><g><title>vfs_write (3 samples, 0.21%)</title><rect x="80.6001%" y="197" width="0.2094%" height="15" fill="rgb(252,226,20)"/><text x="80.8501%" y="207.50"></text></g><g><title>tty_write (3 samples, 0.21%)</title><rect x="80.6001%" y="181" width="0.2094%" height="15" fill="rgb(216,123,35)"/><text x="80.8501%" y="191.50"></text></g><g><title>n_tty_write (3 samples, 0.21%)</title><rect x="80.6001%" y="165" width="0.2094%" height="15" fill="rgb(212,68,40)"/><text x="80.8501%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.14%)</title><rect x="80.8095%" y="565" width="0.1396%" height="15" fill="rgb(254,125,32)"/><text x="81.0595%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.14%)</title><rect x="80.8095%" y="549" width="0.1396%" height="15" fill="rgb(253,97,22)"/><text x="81.0595%" y="559.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (2 samples, 0.14%)</title><rect x="80.9491%" y="565" width="0.1396%" height="15" fill="rgb(241,101,14)"/><text x="81.1991%" y="575.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="80.9491%" y="549" width="0.1396%" height="15" fill="rgb(238,103,29)"/><text x="81.1991%" y="559.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.14%)</title><rect x="80.9491%" y="533" width="0.1396%" height="15" fill="rgb(233,195,47)"/><text x="81.1991%" y="543.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.14%)</title><rect x="80.9491%" y="517" width="0.1396%" height="15" fill="rgb(246,218,30)"/><text x="81.1991%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::read (2 samples, 0.14%)</title><rect x="80.9491%" y="501" width="0.1396%" height="15" fill="rgb(219,145,47)"/><text x="81.1991%" y="511.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2 samples, 0.14%)</title><rect x="80.9491%" y="485" width="0.1396%" height="15" fill="rgb(243,12,26)"/><text x="81.1991%" y="495.50"></text></g><g><title>__libc_recv (2 samples, 0.14%)</title><rect x="80.9491%" y="469" width="0.1396%" height="15" fill="rgb(214,87,16)"/><text x="81.1991%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.14%)</title><rect x="80.9491%" y="453" width="0.1396%" height="15" fill="rgb(208,99,42)"/><text x="81.1991%" y="463.50"></text></g><g><title>do_syscall_64 (2 samples, 0.14%)</title><rect x="80.9491%" y="437" width="0.1396%" height="15" fill="rgb(253,99,2)"/><text x="81.1991%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (2 samples, 0.14%)</title><rect x="80.9491%" y="421" width="0.1396%" height="15" fill="rgb(220,168,23)"/><text x="81.1991%" y="431.50"></text></g><g><title>__sys_recvfrom (2 samples, 0.14%)</title><rect x="80.9491%" y="405" width="0.1396%" height="15" fill="rgb(242,38,24)"/><text x="81.1991%" y="415.50"></text></g><g><title>inet_recvmsg (2 samples, 0.14%)</title><rect x="80.9491%" y="389" width="0.1396%" height="15" fill="rgb(225,182,9)"/><text x="81.1991%" y="399.50"></text></g><g><title>tcp_recvmsg (2 samples, 0.14%)</title><rect x="80.9491%" y="373" width="0.1396%" height="15" fill="rgb(243,178,37)"/><text x="81.1991%" y="383.50"></text></g><g><title>__tcp_push_pending_frames (2 samples, 0.14%)</title><rect x="81.0886%" y="389" width="0.1396%" height="15" fill="rgb(232,139,19)"/><text x="81.3386%" y="399.50"></text></g><g><title>tcp_write_xmit (2 samples, 0.14%)</title><rect x="81.0886%" y="373" width="0.1396%" height="15" fill="rgb(225,201,24)"/><text x="81.3386%" y="383.50"></text></g><g><title>__tcp_transmit_skb (2 samples, 0.14%)</title><rect x="81.0886%" y="357" width="0.1396%" height="15" fill="rgb(221,47,46)"/><text x="81.3386%" y="367.50"></text></g><g><title>__ip_queue_xmit (2 samples, 0.14%)</title><rect x="81.0886%" y="341" width="0.1396%" height="15" fill="rgb(249,23,13)"/><text x="81.3386%" y="351.50"></text></g><g><title>ip_output (2 samples, 0.14%)</title><rect x="81.0886%" y="325" width="0.1396%" height="15" fill="rgb(219,9,5)"/><text x="81.3386%" y="335.50"></text></g><g><title>ip_finish_output2 (2 samples, 0.14%)</title><rect x="81.0886%" y="309" width="0.1396%" height="15" fill="rgb(254,171,16)"/><text x="81.3386%" y="319.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (107 samples, 7.47%)</title><rect x="73.8311%" y="581" width="7.4669%" height="15" fill="rgb(230,171,20)"/><text x="74.0811%" y="591.50">msql_srv::..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.21%)</title><rect x="81.0886%" y="565" width="0.2094%" height="15" fill="rgb(210,71,41)"/><text x="81.3386%" y="575.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (3 samples, 0.21%)</title><rect x="81.0886%" y="549" width="0.2094%" height="15" fill="rgb(206,173,20)"/><text x="81.3386%" y="559.50"></text></g><g><title>std::sys_common::net::TcpStream::write (3 samples, 0.21%)</title><rect x="81.0886%" y="533" width="0.2094%" height="15" fill="rgb(233,88,34)"/><text x="81.3386%" y="543.50"></text></g><g><title>__libc_send (3 samples, 0.21%)</title><rect x="81.0886%" y="517" width="0.2094%" height="15" fill="rgb(223,209,46)"/><text x="81.3386%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.21%)</title><rect x="81.0886%" y="501" width="0.2094%" height="15" fill="rgb(250,43,18)"/><text x="81.3386%" y="511.50"></text></g><g><title>do_syscall_64 (3 samples, 0.21%)</title><rect x="81.0886%" y="485" width="0.2094%" height="15" fill="rgb(208,13,10)"/><text x="81.3386%" y="495.50"></text></g><g><title>__x64_sys_sendto (3 samples, 0.21%)</title><rect x="81.0886%" y="469" width="0.2094%" height="15" fill="rgb(212,200,36)"/><text x="81.3386%" y="479.50"></text></g><g><title>__sys_sendto (3 samples, 0.21%)</title><rect x="81.0886%" y="453" width="0.2094%" height="15" fill="rgb(225,90,30)"/><text x="81.3386%" y="463.50"></text></g><g><title>sock_sendmsg (3 samples, 0.21%)</title><rect x="81.0886%" y="437" width="0.2094%" height="15" fill="rgb(236,182,39)"/><text x="81.3386%" y="447.50"></text></g><g><title>tcp_sendmsg (3 samples, 0.21%)</title><rect x="81.0886%" y="421" width="0.2094%" height="15" fill="rgb(212,144,35)"/><text x="81.3386%" y="431.50"></text></g><g><title>tcp_sendmsg_locked (3 samples, 0.21%)</title><rect x="81.0886%" y="405" width="0.2094%" height="15" fill="rgb(228,63,44)"/><text x="81.3386%" y="415.50"></text></g><g><title>__GI___clone (109 samples, 7.61%)</title><rect x="73.8311%" y="709" width="7.6064%" height="15" fill="rgb(228,109,6)"/><text x="74.0811%" y="719.50">__GI___clo..</text></g><g><title>start_thread (109 samples, 7.61%)</title><rect x="73.8311%" y="693" width="7.6064%" height="15" fill="rgb(238,117,24)"/><text x="74.0811%" y="703.50">start_thre..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (109 samples, 7.61%)</title><rect x="73.8311%" y="677" width="7.6064%" height="15" fill="rgb(242,26,26)"/><text x="74.0811%" y="687.50">std::sys::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (109 samples, 7.61%)</title><rect x="73.8311%" y="661" width="7.6064%" height="15" fill="rgb(221,92,48)"/><text x="74.0811%" y="671.50">&lt;alloc::bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (109 samples, 7.61%)</title><rect x="73.8311%" y="645" width="7.6064%" height="15" fill="rgb(209,209,32)"/><text x="74.0811%" y="655.50">&lt;alloc::bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (109 samples, 7.61%)</title><rect x="73.8311%" y="629" width="7.6064%" height="15" fill="rgb(221,70,22)"/><text x="74.0811%" y="639.50">core::ops:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (109 samples, 7.61%)</title><rect x="73.8311%" y="613" width="7.6064%" height="15" fill="rgb(248,145,5)"/><text x="74.0811%" y="623.50">std::sys_c..</text></g><g><title>decor_mem::Shim::run_on_tcp (109 samples, 7.61%)</title><rect x="73.8311%" y="597" width="7.6064%" height="15" fill="rgb(226,116,26)"/><text x="74.0811%" y="607.50">decor_mem:..</text></g><g><title>_int_free (5 samples, 0.35%)</title><rect x="81.5073%" y="709" width="0.3489%" height="15" fill="rgb(244,5,17)"/><text x="81.7573%" y="719.50"></text></g><g><title>__perf_event_task_sched_in (230 samples, 16.05%)</title><rect x="82.4145%" y="245" width="16.0502%" height="15" fill="rgb(252,159,33)"/><text x="82.6645%" y="255.50">__perf_event_task_sched_in</text></g><g><title>__intel_pmu_enable_all.constprop.0 (230 samples, 16.05%)</title><rect x="82.4145%" y="229" width="16.0502%" height="15" fill="rgb(206,71,0)"/><text x="82.6645%" y="239.50">__intel_pmu_enable_all.co..</text></g><g><title>native_write_msr (230 samples, 16.05%)</title><rect x="82.4145%" y="213" width="16.0502%" height="15" fill="rgb(233,118,54)"/><text x="82.6645%" y="223.50">native_write_msr</text></g><g><title>cpu_stop_queue_work (233 samples, 16.26%)</title><rect x="82.2749%" y="325" width="16.2596%" height="15" fill="rgb(234,83,48)"/><text x="82.5249%" y="335.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (233 samples, 16.26%)</title><rect x="82.2749%" y="309" width="16.2596%" height="15" fill="rgb(228,3,54)"/><text x="82.5249%" y="319.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (233 samples, 16.26%)</title><rect x="82.2749%" y="293" width="16.2596%" height="15" fill="rgb(226,155,13)"/><text x="82.5249%" y="303.50">preempt_schedule_common</text></g><g><title>__schedule (233 samples, 16.26%)</title><rect x="82.2749%" y="277" width="16.2596%" height="15" fill="rgb(241,28,37)"/><text x="82.5249%" y="287.50">__schedule</text></g><g><title>finish_task_switch (233 samples, 16.26%)</title><rect x="82.2749%" y="261" width="16.2596%" height="15" fill="rgb(233,93,10)"/><text x="82.5249%" y="271.50">finish_task_switch</text></g><g><title>entry_SYSCALL_64 (234 samples, 16.33%)</title><rect x="82.2749%" y="421" width="16.3294%" height="15" fill="rgb(225,113,19)"/><text x="82.5249%" y="431.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (234 samples, 16.33%)</title><rect x="82.2749%" y="405" width="16.3294%" height="15" fill="rgb(241,2,18)"/><text x="82.5249%" y="415.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 16.33%)</title><rect x="82.2749%" y="389" width="16.3294%" height="15" fill="rgb(228,207,21)"/><text x="82.5249%" y="399.50">__x64_sys_sched_setaffini..</text></g><g><title>sched_setaffinity (234 samples, 16.33%)</title><rect x="82.2749%" y="373" width="16.3294%" height="15" fill="rgb(213,211,35)"/><text x="82.5249%" y="383.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 16.33%)</title><rect x="82.2749%" y="357" width="16.3294%" height="15" fill="rgb(209,83,10)"/><text x="82.5249%" y="367.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (234 samples, 16.33%)</title><rect x="82.2749%" y="341" width="16.3294%" height="15" fill="rgb(209,164,1)"/><text x="82.5249%" y="351.50">stop_one_cpu</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 16.61%)</title><rect x="82.0656%" y="469" width="16.6085%" height="15" fill="rgb(213,184,43)"/><text x="82.3156%" y="479.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (237 samples, 16.54%)</title><rect x="82.1354%" y="453" width="16.5387%" height="15" fill="rgb(231,61,34)"/><text x="82.3854%" y="463.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (236 samples, 16.47%)</title><rect x="82.2052%" y="437" width="16.4689%" height="15" fill="rgb(235,75,3)"/><text x="82.4552%" y="447.50">__GI___sched_setaffinity_..</text></g><g><title>hwloc::Topology::new (239 samples, 16.68%)</title><rect x="82.0656%" y="533" width="16.6783%" height="15" fill="rgb(220,106,47)"/><text x="82.3156%" y="543.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (239 samples, 16.68%)</title><rect x="82.0656%" y="517" width="16.6783%" height="15" fill="rgb(210,196,33)"/><text x="82.3156%" y="527.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (239 samples, 16.68%)</title><rect x="82.0656%" y="501" width="16.6783%" height="15" fill="rgb(229,154,42)"/><text x="82.3156%" y="511.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (239 samples, 16.68%)</title><rect x="82.0656%" y="485" width="16.6783%" height="15" fill="rgb(228,114,26)"/><text x="82.3156%" y="495.50">[libhwloc.so.15.2.0]</text></g><g><title>__libc_start_main (244 samples, 17.03%)</title><rect x="81.8562%" y="693" width="17.0272%" height="15" fill="rgb(208,144,1)"/><text x="82.1062%" y="703.50">__libc_start_main</text></g><g><title>main (244 samples, 17.03%)</title><rect x="81.8562%" y="677" width="17.0272%" height="15" fill="rgb(239,112,37)"/><text x="82.1062%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (244 samples, 17.03%)</title><rect x="81.8562%" y="661" width="17.0272%" height="15" fill="rgb(210,96,50)"/><text x="82.1062%" y="671.50">std::rt::lang_start_intern..</text></g><g><title>std::panic::catch_unwind (244 samples, 17.03%)</title><rect x="81.8562%" y="645" width="17.0272%" height="15" fill="rgb(222,178,2)"/><text x="82.1062%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (244 samples, 17.03%)</title><rect x="81.8562%" y="629" width="17.0272%" height="15" fill="rgb(226,74,18)"/><text x="82.1062%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (244 samples, 17.03%)</title><rect x="81.8562%" y="613" width="17.0272%" height="15" fill="rgb(225,67,54)"/><text x="82.1062%" y="623.50">std::panicking::try::do_ca..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (244 samples, 17.03%)</title><rect x="81.8562%" y="597" width="17.0272%" height="15" fill="rgb(251,92,32)"/><text x="82.1062%" y="607.50">core::ops::function::impls..</text></g><g><title>std::rt::lang_start::_{{closure}} (244 samples, 17.03%)</title><rect x="81.8562%" y="581" width="17.0272%" height="15" fill="rgb(228,149,22)"/><text x="82.1062%" y="591.50">std::rt::lang_start::_{{cl..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (244 samples, 17.03%)</title><rect x="81.8562%" y="565" width="17.0272%" height="15" fill="rgb(243,54,13)"/><text x="82.1062%" y="575.50">std::sys_common::backtrace..</text></g><g><title>lobsters_microbenchmarks::main (244 samples, 17.03%)</title><rect x="81.8562%" y="549" width="17.0272%" height="15" fill="rgb(243,180,28)"/><text x="82.1062%" y="559.50">lobsters_microbenchmarks::..</text></g><g><title>_start (245 samples, 17.10%)</title><rect x="81.8562%" y="709" width="17.0970%" height="15" fill="rgb(208,167,24)"/><text x="82.1062%" y="719.50">_start</text></g><g><title>[vmlinux] (2 samples, 0.14%)</title><rect x="99.0928%" y="677" width="0.1396%" height="15" fill="rgb(245,73,45)"/><text x="99.3428%" y="687.50"></text></g><g><title>do_group_exit (2 samples, 0.14%)</title><rect x="99.0928%" y="661" width="0.1396%" height="15" fill="rgb(237,203,48)"/><text x="99.3428%" y="671.50"></text></g><g><title>do_exit (2 samples, 0.14%)</title><rect x="99.0928%" y="645" width="0.1396%" height="15" fill="rgb(211,197,16)"/><text x="99.3428%" y="655.50"></text></g><g><title>mmput (2 samples, 0.14%)</title><rect x="99.0928%" y="629" width="0.1396%" height="15" fill="rgb(243,99,51)"/><text x="99.3428%" y="639.50"></text></g><g><title>exit_mmap (2 samples, 0.14%)</title><rect x="99.0928%" y="613" width="0.1396%" height="15" fill="rgb(215,123,29)"/><text x="99.3428%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.28%)</title><rect x="99.0230%" y="709" width="0.2791%" height="15" fill="rgb(239,186,37)"/><text x="99.2730%" y="719.50"></text></g><g><title>do_syscall_64 (3 samples, 0.21%)</title><rect x="99.0928%" y="693" width="0.2094%" height="15" fill="rgb(252,136,39)"/><text x="99.3428%" y="703.50"></text></g><g><title>malloc_consolidate (3 samples, 0.21%)</title><rect x="99.3022%" y="709" width="0.2094%" height="15" fill="rgb(223,213,32)"/><text x="99.5522%" y="719.50"></text></g><g><title>lobsters-microb (1,427 samples, 99.58%)</title><rect x="0.0000%" y="725" width="99.5813%" height="15" fill="rgb(233,115,5)"/><text x="0.2500%" y="735.50">lobsters-microb</text></g><g><title>all (1,433 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(207,226,44)"/><text x="0.2500%" y="751.50"></text></g><g><title>perf (6 samples, 0.42%)</title><rect x="99.5813%" y="725" width="0.4187%" height="15" fill="rgb(208,126,0)"/><text x="99.8313%" y="735.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.42%)</title><rect x="99.5813%" y="709" width="0.4187%" height="15" fill="rgb(244,66,21)"/><text x="99.8313%" y="719.50"></text></g><g><title>do_syscall_64 (6 samples, 0.42%)</title><rect x="99.5813%" y="693" width="0.4187%" height="15" fill="rgb(222,97,12)"/><text x="99.8313%" y="703.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.42%)</title><rect x="99.5813%" y="677" width="0.4187%" height="15" fill="rgb(219,213,19)"/><text x="99.8313%" y="687.50"></text></g><g><title>do_execve (6 samples, 0.42%)</title><rect x="99.5813%" y="661" width="0.4187%" height="15" fill="rgb(252,169,30)"/><text x="99.8313%" y="671.50"></text></g><g><title>__do_execve_file (6 samples, 0.42%)</title><rect x="99.5813%" y="645" width="0.4187%" height="15" fill="rgb(206,32,51)"/><text x="99.8313%" y="655.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.42%)</title><rect x="99.5813%" y="629" width="0.4187%" height="15" fill="rgb(250,172,42)"/><text x="99.8313%" y="639.50"></text></g><g><title>load_elf_binary (6 samples, 0.42%)</title><rect x="99.5813%" y="613" width="0.4187%" height="15" fill="rgb(209,34,43)"/><text x="99.8313%" y="623.50"></text></g><g><title>setup_new_exec (6 samples, 0.42%)</title><rect x="99.5813%" y="597" width="0.4187%" height="15" fill="rgb(223,11,35)"/><text x="99.8313%" y="607.50"></text></g><g><title>perf_event_exec (6 samples, 0.42%)</title><rect x="99.5813%" y="581" width="0.4187%" height="15" fill="rgb(251,219,26)"/><text x="99.8313%" y="591.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.35%)</title><rect x="99.6511%" y="565" width="0.3489%" height="15" fill="rgb(231,119,3)"/><text x="99.9011%" y="575.50"></text></g><g><title>native_write_msr (5 samples, 0.35%)</title><rect x="99.6511%" y="549" width="0.3489%" height="15" fill="rgb(216,97,11)"/><text x="99.9011%" y="559.50"></text></g></svg></svg>