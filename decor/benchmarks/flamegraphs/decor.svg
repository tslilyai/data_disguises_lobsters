<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="805.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="805.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (7 samples, 0.11%)</title><rect x="0.0625%" y="741" width="0.1094%" height="15" fill="rgb(227,0,7)"/><text x="0.3125%" y="751.50"></text></g><g><title>[[stack]] (13 samples, 0.20%)</title><rect x="0.1719%" y="741" width="0.2032%" height="15" fill="rgb(217,0,24)"/><text x="0.4219%" y="751.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.19%)</title><rect x="0.3751%" y="725" width="0.1875%" height="15" fill="rgb(221,193,54)"/><text x="0.6251%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (26 samples, 0.41%)</title><rect x="2.1566%" y="661" width="0.4063%" height="15" fill="rgb(248,212,6)"/><text x="2.4066%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 0.41%)</title><rect x="2.1566%" y="645" width="0.4063%" height="15" fill="rgb(208,68,35)"/><text x="2.4066%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (26 samples, 0.41%)</title><rect x="2.1566%" y="629" width="0.4063%" height="15" fill="rgb(232,128,0)"/><text x="2.4066%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.41%)</title><rect x="2.1566%" y="613" width="0.4063%" height="15" fill="rgb(207,160,47)"/><text x="2.4066%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (150 samples, 2.34%)</title><rect x="0.5626%" y="725" width="2.3441%" height="15" fill="rgb(228,23,34)"/><text x="0.8126%" y="735.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (48 samples, 0.75%)</title><rect x="2.1566%" y="709" width="0.7501%" height="15" fill="rgb(218,30,26)"/><text x="2.4066%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (48 samples, 0.75%)</title><rect x="2.1566%" y="693" width="0.7501%" height="15" fill="rgb(220,122,19)"/><text x="2.4066%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (48 samples, 0.75%)</title><rect x="2.1566%" y="677" width="0.7501%" height="15" fill="rgb(250,228,42)"/><text x="2.4066%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (22 samples, 0.34%)</title><rect x="2.5629%" y="661" width="0.3438%" height="15" fill="rgb(240,193,28)"/><text x="2.8129%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (22 samples, 0.34%)</title><rect x="2.5629%" y="645" width="0.3438%" height="15" fill="rgb(216,20,37)"/><text x="2.8129%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.34%)</title><rect x="2.5629%" y="629" width="0.3438%" height="15" fill="rgb(206,188,39)"/><text x="2.8129%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.34%)</title><rect x="2.5629%" y="613" width="0.3438%" height="15" fill="rgb(217,207,13)"/><text x="2.8129%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (22 samples, 0.34%)</title><rect x="2.5629%" y="597" width="0.3438%" height="15" fill="rgb(231,73,38)"/><text x="2.8129%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.34%)</title><rect x="2.5629%" y="581" width="0.3438%" height="15" fill="rgb(225,20,46)"/><text x="2.8129%" y="591.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.34%)</title><rect x="2.5629%" y="565" width="0.3438%" height="15" fill="rgb(210,31,41)"/><text x="2.8129%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.16%)</title><rect x="2.9067%" y="725" width="0.1563%" height="15" fill="rgb(221,200,47)"/><text x="3.1567%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.52%)</title><rect x="3.0630%" y="725" width="0.5157%" height="15" fill="rgb(226,26,5)"/><text x="3.3130%" y="735.50"></text></g><g><title>__GI___libc_free (39 samples, 0.61%)</title><rect x="3.7506%" y="725" width="0.6095%" height="15" fill="rgb(249,33,26)"/><text x="4.0006%" y="735.50"></text></g><g><title>__GI___libc_malloc (64 samples, 1.00%)</title><rect x="4.3601%" y="725" width="1.0002%" height="15" fill="rgb(235,183,28)"/><text x="4.6101%" y="735.50"></text></g><g><title>_int_free (84 samples, 1.31%)</title><rect x="5.6728%" y="725" width="1.3127%" height="15" fill="rgb(221,5,38)"/><text x="5.9228%" y="735.50"></text></g><g><title>_int_malloc (68 samples, 1.06%)</title><rect x="6.9855%" y="725" width="1.0627%" height="15" fill="rgb(247,18,42)"/><text x="7.2355%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.23%)</title><rect x="8.0638%" y="725" width="0.2344%" height="15" fill="rgb(241,131,45)"/><text x="8.3138%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.17%)</title><rect x="8.6263%" y="725" width="0.1719%" height="15" fill="rgb(249,31,29)"/><text x="8.8763%" y="735.50"></text></g><g><title>[anon] (624 samples, 9.75%)</title><rect x="0.3751%" y="741" width="9.7515%" height="15" fill="rgb(225,111,53)"/><text x="0.6251%" y="751.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (56 samples, 0.88%)</title><rect x="9.2514%" y="725" width="0.8751%" height="15" fill="rgb(238,160,17)"/><text x="9.5014%" y="735.50"></text></g><g><title>_int_free (40 samples, 0.63%)</title><rect x="10.2516%" y="725" width="0.6251%" height="15" fill="rgb(214,148,48)"/><text x="10.5016%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.14%)</title><rect x="10.9548%" y="725" width="0.1406%" height="15" fill="rgb(232,36,49)"/><text x="11.2048%" y="735.50"></text></g><g><title>[lobsters-microbenchmarks] (64 samples, 1.00%)</title><rect x="10.1578%" y="741" width="1.0002%" height="15" fill="rgb(209,103,24)"/><text x="10.4078%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.11%)</title><rect x="11.2049%" y="725" width="0.1094%" height="15" fill="rgb(229,88,8)"/><text x="11.4549%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.14%)</title><rect x="11.4393%" y="645" width="0.1406%" height="15" fill="rgb(213,181,19)"/><text x="11.6893%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (10 samples, 0.16%)</title><rect x="11.4393%" y="693" width="0.1563%" height="15" fill="rgb(254,191,54)"/><text x="11.6893%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (10 samples, 0.16%)</title><rect x="11.4393%" y="677" width="0.1563%" height="15" fill="rgb(241,83,37)"/><text x="11.6893%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.16%)</title><rect x="11.4393%" y="661" width="0.1563%" height="15" fill="rgb(233,36,39)"/><text x="11.6893%" y="671.50"></text></g><g><title>do_syscall_64 (7 samples, 0.11%)</title><rect x="11.6737%" y="501" width="0.1094%" height="15" fill="rgb(226,3,54)"/><text x="11.9237%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (7 samples, 0.11%)</title><rect x="11.6737%" y="485" width="0.1094%" height="15" fill="rgb(245,192,40)"/><text x="11.9237%" y="495.50"></text></g><g><title>__sys_recvfrom (7 samples, 0.11%)</title><rect x="11.6737%" y="469" width="0.1094%" height="15" fill="rgb(238,167,29)"/><text x="11.9237%" y="479.50"></text></g><g><title>inet_recvmsg (7 samples, 0.11%)</title><rect x="11.6737%" y="453" width="0.1094%" height="15" fill="rgb(232,182,51)"/><text x="11.9237%" y="463.50"></text></g><g><title>tcp_recvmsg (7 samples, 0.11%)</title><rect x="11.6737%" y="437" width="0.1094%" height="15" fill="rgb(231,60,39)"/><text x="11.9237%" y="447.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.17%)</title><rect x="11.6268%" y="629" width="0.1719%" height="15" fill="rgb(208,69,12)"/><text x="11.8768%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.14%)</title><rect x="11.6581%" y="613" width="0.1406%" height="15" fill="rgb(235,93,37)"/><text x="11.9081%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (9 samples, 0.14%)</title><rect x="11.6581%" y="597" width="0.1406%" height="15" fill="rgb(213,116,39)"/><text x="11.9081%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (9 samples, 0.14%)</title><rect x="11.6581%" y="581" width="0.1406%" height="15" fill="rgb(222,207,29)"/><text x="11.9081%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (9 samples, 0.14%)</title><rect x="11.6581%" y="565" width="0.1406%" height="15" fill="rgb(206,96,30)"/><text x="11.9081%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (9 samples, 0.14%)</title><rect x="11.6581%" y="549" width="0.1406%" height="15" fill="rgb(218,138,4)"/><text x="11.9081%" y="559.50"></text></g><g><title>__libc_recv (9 samples, 0.14%)</title><rect x="11.6581%" y="533" width="0.1406%" height="15" fill="rgb(250,191,14)"/><text x="11.9081%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.13%)</title><rect x="11.6737%" y="517" width="0.1250%" height="15" fill="rgb(239,60,40)"/><text x="11.9237%" y="527.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (14 samples, 0.22%)</title><rect x="11.5956%" y="693" width="0.2188%" height="15" fill="rgb(206,27,48)"/><text x="11.8456%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (14 samples, 0.22%)</title><rect x="11.5956%" y="677" width="0.2188%" height="15" fill="rgb(225,35,8)"/><text x="11.8456%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (14 samples, 0.22%)</title><rect x="11.5956%" y="661" width="0.2188%" height="15" fill="rgb(250,213,24)"/><text x="11.8456%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (14 samples, 0.22%)</title><rect x="11.5956%" y="645" width="0.2188%" height="15" fill="rgb(247,123,22)"/><text x="11.8456%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.36%)</title><rect x="11.8300%" y="661" width="0.3594%" height="15" fill="rgb(231,138,38)"/><text x="12.0800%" y="671.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.36%)</title><rect x="11.8300%" y="645" width="0.3594%" height="15" fill="rgb(231,145,46)"/><text x="12.0800%" y="655.50"></text></g><g><title>_int_realloc (23 samples, 0.36%)</title><rect x="11.8300%" y="629" width="0.3594%" height="15" fill="rgb(251,118,11)"/><text x="12.0800%" y="639.50"></text></g><g><title>_int_malloc (23 samples, 0.36%)</title><rect x="11.8300%" y="613" width="0.3594%" height="15" fill="rgb(217,147,25)"/><text x="12.0800%" y="623.50"></text></g><g><title>__GI___libc_free (8 samples, 0.13%)</title><rect x="12.3613%" y="645" width="0.1250%" height="15" fill="rgb(247,81,37)"/><text x="12.6113%" y="655.50"></text></g><g><title>_int_free (30 samples, 0.47%)</title><rect x="12.5020%" y="645" width="0.4688%" height="15" fill="rgb(209,12,38)"/><text x="12.7520%" y="655.50"></text></g><g><title>malloc_consolidate (15 samples, 0.23%)</title><rect x="12.7364%" y="629" width="0.2344%" height="15" fill="rgb(227,1,9)"/><text x="12.9864%" y="639.50"></text></g><g><title>decor_mem::select::get_value_for_rows (17 samples, 0.27%)</title><rect x="13.2364%" y="613" width="0.2657%" height="15" fill="rgb(248,47,43)"/><text x="13.4864%" y="623.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (23 samples, 0.36%)</title><rect x="13.1583%" y="629" width="0.3594%" height="15" fill="rgb(221,10,30)"/><text x="13.4083%" y="639.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (44 samples, 0.69%)</title><rect x="13.1114%" y="645" width="0.6876%" height="15" fill="rgb(210,229,1)"/><text x="13.3614%" y="655.50"></text></g><g><title>decor_mem::select::get_value_for_rows (18 samples, 0.28%)</title><rect x="13.5177%" y="629" width="0.2813%" height="15" fill="rgb(222,148,37)"/><text x="13.7677%" y="639.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (8 samples, 0.13%)</title><rect x="13.6740%" y="613" width="0.1250%" height="15" fill="rgb(234,67,33)"/><text x="13.9240%" y="623.50"></text></g><g><title>__GI___libc_malloc (50 samples, 0.78%)</title><rect x="14.1741%" y="453" width="0.7814%" height="15" fill="rgb(247,98,35)"/><text x="14.4241%" y="463.50"></text></g><g><title>_int_malloc (34 samples, 0.53%)</title><rect x="14.4241%" y="437" width="0.5313%" height="15" fill="rgb(247,138,52)"/><text x="14.6741%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (62 samples, 0.97%)</title><rect x="14.0647%" y="629" width="0.9689%" height="15" fill="rgb(213,79,30)"/><text x="14.3147%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (60 samples, 0.94%)</title><rect x="14.0960%" y="613" width="0.9376%" height="15" fill="rgb(246,177,23)"/><text x="14.3460%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (60 samples, 0.94%)</title><rect x="14.0960%" y="597" width="0.9376%" height="15" fill="rgb(230,62,27)"/><text x="14.3460%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (57 samples, 0.89%)</title><rect x="14.1428%" y="581" width="0.8908%" height="15" fill="rgb(216,154,8)"/><text x="14.3928%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (56 samples, 0.88%)</title><rect x="14.1585%" y="565" width="0.8751%" height="15" fill="rgb(244,35,45)"/><text x="14.4085%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (56 samples, 0.88%)</title><rect x="14.1585%" y="549" width="0.8751%" height="15" fill="rgb(251,115,12)"/><text x="14.4085%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (56 samples, 0.88%)</title><rect x="14.1585%" y="533" width="0.8751%" height="15" fill="rgb(240,54,50)"/><text x="14.4085%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (56 samples, 0.88%)</title><rect x="14.1585%" y="517" width="0.8751%" height="15" fill="rgb(233,84,52)"/><text x="14.4085%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (56 samples, 0.88%)</title><rect x="14.1585%" y="501" width="0.8751%" height="15" fill="rgb(207,117,47)"/><text x="14.4085%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.88%)</title><rect x="14.1585%" y="485" width="0.8751%" height="15" fill="rgb(249,43,39)"/><text x="14.4085%" y="495.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.86%)</title><rect x="14.1741%" y="469" width="0.8595%" height="15" fill="rgb(209,38,44)"/><text x="14.4241%" y="479.50"></text></g><g><title>malloc_consolidate (8 samples, 0.13%)</title><rect x="15.1430%" y="565" width="0.1250%" height="15" fill="rgb(236,212,23)"/><text x="15.3930%" y="575.50"></text></g><g><title>_int_malloc (13 samples, 0.20%)</title><rect x="15.0805%" y="581" width="0.2032%" height="15" fill="rgb(242,79,21)"/><text x="15.3305%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.33%)</title><rect x="15.0336%" y="629" width="0.3282%" height="15" fill="rgb(211,96,35)"/><text x="15.2836%" y="639.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.33%)</title><rect x="15.0336%" y="613" width="0.3282%" height="15" fill="rgb(253,215,40)"/><text x="15.2836%" y="623.50"></text></g><g><title>_int_realloc (21 samples, 0.33%)</title><rect x="15.0336%" y="597" width="0.3282%" height="15" fill="rgb(211,81,21)"/><text x="15.2836%" y="607.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (15 samples, 0.23%)</title><rect x="15.4555%" y="629" width="0.2344%" height="15" fill="rgb(208,190,38)"/><text x="15.7055%" y="639.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (9 samples, 0.14%)</title><rect x="15.5493%" y="613" width="0.1406%" height="15" fill="rgb(235,213,38)"/><text x="15.7993%" y="623.50"></text></g><g><title>alloc::fmt::format (9 samples, 0.14%)</title><rect x="15.5493%" y="597" width="0.1406%" height="15" fill="rgb(237,122,38)"/><text x="15.7993%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (9 samples, 0.14%)</title><rect x="15.5493%" y="581" width="0.1406%" height="15" fill="rgb(244,218,35)"/><text x="15.7993%" y="591.50"></text></g><g><title>core::fmt::write (9 samples, 0.14%)</title><rect x="15.5493%" y="565" width="0.1406%" height="15" fill="rgb(240,68,47)"/><text x="15.7993%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.14%)</title><rect x="15.5493%" y="549" width="0.1406%" height="15" fill="rgb(210,16,53)"/><text x="15.7993%" y="559.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (220 samples, 3.44%)</title><rect x="12.2988%" y="661" width="3.4380%" height="15" fill="rgb(235,124,12)"/><text x="12.5488%" y="671.50">dec..</text></g><g><title>decor_mem::select::get_value_for_rows (124 samples, 1.94%)</title><rect x="13.7990%" y="645" width="1.9378%" height="15" fill="rgb(224,169,11)"/><text x="14.0490%" y="655.50">d..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.33%)</title><rect x="15.8619%" y="645" width="0.3282%" height="15" fill="rgb(250,166,2)"/><text x="16.1119%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (21 samples, 0.33%)</title><rect x="15.8619%" y="629" width="0.3282%" height="15" fill="rgb(242,216,29)"/><text x="16.1119%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.33%)</title><rect x="15.8619%" y="613" width="0.3282%" height="15" fill="rgb(230,116,27)"/><text x="16.1119%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.33%)</title><rect x="15.8619%" y="597" width="0.3282%" height="15" fill="rgb(228,99,48)"/><text x="16.1119%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.30%)</title><rect x="15.8931%" y="581" width="0.2969%" height="15" fill="rgb(253,11,6)"/><text x="16.1431%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (19 samples, 0.30%)</title><rect x="15.8931%" y="565" width="0.2969%" height="15" fill="rgb(247,143,39)"/><text x="16.1431%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.30%)</title><rect x="15.8931%" y="549" width="0.2969%" height="15" fill="rgb(236,97,10)"/><text x="16.1431%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.30%)</title><rect x="15.8931%" y="533" width="0.2969%" height="15" fill="rgb(233,208,19)"/><text x="16.1431%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (19 samples, 0.30%)</title><rect x="15.8931%" y="517" width="0.2969%" height="15" fill="rgb(216,164,2)"/><text x="16.1431%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.30%)</title><rect x="15.8931%" y="501" width="0.2969%" height="15" fill="rgb(220,129,5)"/><text x="16.1431%" y="511.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.30%)</title><rect x="15.8931%" y="485" width="0.2969%" height="15" fill="rgb(242,17,10)"/><text x="16.1431%" y="495.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.30%)</title><rect x="15.8931%" y="469" width="0.2969%" height="15" fill="rgb(242,107,0)"/><text x="16.1431%" y="479.50"></text></g><g><title>_int_malloc (10 samples, 0.16%)</title><rect x="16.0338%" y="453" width="0.1563%" height="15" fill="rgb(251,28,31)"/><text x="16.2838%" y="463.50"></text></g><g><title>_int_free (7 samples, 0.11%)</title><rect x="16.2057%" y="645" width="0.1094%" height="15" fill="rgb(233,223,10)"/><text x="16.4557%" y="655.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (8 samples, 0.13%)</title><rect x="16.5651%" y="613" width="0.1250%" height="15" fill="rgb(215,21,27)"/><text x="16.8151%" y="623.50"></text></g><g><title>core::fmt::write (12 samples, 0.19%)</title><rect x="16.5182%" y="629" width="0.1875%" height="15" fill="rgb(232,23,21)"/><text x="16.7682%" y="639.50"></text></g><g><title>decor_mem::helpers::minus_parser_vals (30 samples, 0.47%)</title><rect x="16.3463%" y="645" width="0.4688%" height="15" fill="rgb(244,5,23)"/><text x="16.5963%" y="655.50"></text></g><g><title>core::num::dec2flt::dec2flt (7 samples, 0.11%)</title><rect x="16.7057%" y="629" width="0.1094%" height="15" fill="rgb(226,81,46)"/><text x="16.9557%" y="639.50"></text></g><g><title>decor_mem::select::get_value_for_rows (78 samples, 1.22%)</title><rect x="15.7368%" y="661" width="1.2189%" height="15" fill="rgb(247,70,30)"/><text x="15.9868%" y="671.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (9 samples, 0.14%)</title><rect x="16.8151%" y="645" width="0.1406%" height="15" fill="rgb(212,68,19)"/><text x="17.0651%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (8 samples, 0.13%)</title><rect x="16.9558%" y="613" width="0.1250%" height="15" fill="rgb(240,187,13)"/><text x="17.2058%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (8 samples, 0.13%)</title><rect x="16.9558%" y="597" width="0.1250%" height="15" fill="rgb(223,113,26)"/><text x="17.2058%" y="607.50"></text></g><g><title>core::fmt::write (9 samples, 0.14%)</title><rect x="16.9558%" y="645" width="0.1406%" height="15" fill="rgb(206,192,2)"/><text x="17.2058%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.14%)</title><rect x="16.9558%" y="629" width="0.1406%" height="15" fill="rgb(241,108,4)"/><text x="17.2058%" y="639.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (29 samples, 0.45%)</title><rect x="16.9558%" y="661" width="0.4532%" height="15" fill="rgb(247,173,49)"/><text x="17.2058%" y="671.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (20 samples, 0.31%)</title><rect x="17.0964%" y="645" width="0.3125%" height="15" fill="rgb(224,114,35)"/><text x="17.3464%" y="655.50"></text></g><g><title>alloc::fmt::format (20 samples, 0.31%)</title><rect x="17.0964%" y="629" width="0.3125%" height="15" fill="rgb(245,159,27)"/><text x="17.3464%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (19 samples, 0.30%)</title><rect x="17.1120%" y="613" width="0.2969%" height="15" fill="rgb(245,172,44)"/><text x="17.3620%" y="623.50"></text></g><g><title>core::fmt::write (19 samples, 0.30%)</title><rect x="17.1120%" y="597" width="0.2969%" height="15" fill="rgb(236,23,11)"/><text x="17.3620%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (19 samples, 0.30%)</title><rect x="17.1120%" y="581" width="0.2969%" height="15" fill="rgb(205,117,38)"/><text x="17.3620%" y="591.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (11 samples, 0.17%)</title><rect x="17.2371%" y="565" width="0.1719%" height="15" fill="rgb(237,72,25)"/><text x="17.4871%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.17%)</title><rect x="17.2371%" y="549" width="0.1719%" height="15" fill="rgb(244,70,9)"/><text x="17.4871%" y="559.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.17%)</title><rect x="17.2371%" y="533" width="0.1719%" height="15" fill="rgb(217,125,39)"/><text x="17.4871%" y="543.50"></text></g><g><title>_int_malloc (11 samples, 0.17%)</title><rect x="17.2371%" y="517" width="0.1719%" height="15" fill="rgb(235,36,10)"/><text x="17.4871%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.63%)</title><rect x="17.4715%" y="629" width="0.6251%" height="15" fill="rgb(251,123,47)"/><text x="17.7215%" y="639.50"></text></g><g><title>_int_free (28 samples, 0.44%)</title><rect x="17.6590%" y="613" width="0.4376%" height="15" fill="rgb(221,13,13)"/><text x="17.9090%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 1.45%)</title><rect x="17.4715%" y="645" width="1.4534%" height="15" fill="rgb(238,131,9)"/><text x="17.7215%" y="655.50"></text></g><g><title>_int_free (53 samples, 0.83%)</title><rect x="18.0966%" y="629" width="0.8283%" height="15" fill="rgb(211,50,8)"/><text x="18.3466%" y="639.50"></text></g><g><title>malloc_consolidate (53 samples, 0.83%)</title><rect x="18.0966%" y="613" width="0.8283%" height="15" fill="rgb(245,182,24)"/><text x="18.3466%" y="623.50"></text></g><g><title>unlink_chunk.constprop.0 (9 samples, 0.14%)</title><rect x="18.7842%" y="597" width="0.1406%" height="15" fill="rgb(242,14,37)"/><text x="19.0342%" y="607.50"></text></g><g><title>__GI___libc_free (18 samples, 0.28%)</title><rect x="18.9873%" y="613" width="0.2813%" height="15" fill="rgb(246,228,12)"/><text x="19.2373%" y="623.50"></text></g><g><title>_int_free (51 samples, 0.80%)</title><rect x="19.3155%" y="613" width="0.7970%" height="15" fill="rgb(213,55,15)"/><text x="19.5655%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (84 samples, 1.31%)</title><rect x="18.9248%" y="645" width="1.3127%" height="15" fill="rgb(209,9,3)"/><text x="19.1748%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (84 samples, 1.31%)</title><rect x="18.9248%" y="629" width="1.3127%" height="15" fill="rgb(230,59,30)"/><text x="19.1748%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.13%)</title><rect x="20.1125%" y="613" width="0.1250%" height="15" fill="rgb(209,121,21)"/><text x="20.3625%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.42%)</title><rect x="24.3632%" y="533" width="0.4219%" height="15" fill="rgb(220,109,13)"/><text x="24.6132%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (20 samples, 0.31%)</title><rect x="24.4726%" y="517" width="0.3125%" height="15" fill="rgb(232,18,1)"/><text x="24.7226%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.23%)</title><rect x="24.7851%" y="517" width="0.2344%" height="15" fill="rgb(215,41,42)"/><text x="25.0351%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (30 samples, 0.47%)</title><rect x="25.0195%" y="501" width="0.4688%" height="15" fill="rgb(224,123,36)"/><text x="25.2695%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (30 samples, 0.47%)</title><rect x="25.0195%" y="485" width="0.4688%" height="15" fill="rgb(240,125,3)"/><text x="25.2695%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (30 samples, 0.47%)</title><rect x="25.0195%" y="469" width="0.4688%" height="15" fill="rgb(205,98,50)"/><text x="25.2695%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.47%)</title><rect x="25.0195%" y="453" width="0.4688%" height="15" fill="rgb(205,185,37)"/><text x="25.2695%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.34%)</title><rect x="25.1446%" y="437" width="0.3438%" height="15" fill="rgb(238,207,15)"/><text x="25.3946%" y="447.50"></text></g><g><title>_int_malloc (512 samples, 8.00%)</title><rect x="29.1296%" y="373" width="8.0013%" height="15" fill="rgb(213,199,42)"/><text x="29.3796%" y="383.50">_int_malloc</text></g><g><title>__GI___libc_malloc (731 samples, 11.42%)</title><rect x="25.7384%" y="389" width="11.4237%" height="15" fill="rgb(235,201,11)"/><text x="25.9884%" y="399.50">__GI___libc_malloc</text></g><g><title>__rdl_alloc (46 samples, 0.72%)</title><rect x="37.1621%" y="389" width="0.7189%" height="15" fill="rgb(207,46,11)"/><text x="37.4121%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46 samples, 0.72%)</title><rect x="37.1621%" y="373" width="0.7189%" height="15" fill="rgb(241,35,35)"/><text x="37.4121%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (891 samples, 13.92%)</title><rect x="24.1131%" y="565" width="13.9241%" height="15" fill="rgb(243,32,47)"/><text x="24.3631%" y="575.50">&lt;alloc::string::Strin..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (875 samples, 13.67%)</title><rect x="24.3632%" y="549" width="13.6740%" height="15" fill="rgb(247,202,23)"/><text x="24.6132%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (848 samples, 13.25%)</title><rect x="24.7851%" y="533" width="13.2521%" height="15" fill="rgb(219,102,11)"/><text x="25.0351%" y="543.50">alloc::slice::&lt;impl ..</text></g><g><title>alloc::slice::hack::to_vec (833 samples, 13.02%)</title><rect x="25.0195%" y="517" width="13.0177%" height="15" fill="rgb(243,110,44)"/><text x="25.2695%" y="527.50">alloc::slice::hack::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (803 samples, 12.55%)</title><rect x="25.4884%" y="501" width="12.5488%" height="15" fill="rgb(222,74,54)"/><text x="25.7384%" y="511.50">alloc::vec::Vec&lt;T&gt;:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (803 samples, 12.55%)</title><rect x="25.4884%" y="485" width="12.5488%" height="15" fill="rgb(216,99,12)"/><text x="25.7384%" y="495.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (803 samples, 12.55%)</title><rect x="25.4884%" y="469" width="12.5488%" height="15" fill="rgb(226,22,26)"/><text x="25.7384%" y="479.50">alloc::raw_vec::Raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (803 samples, 12.55%)</title><rect x="25.4884%" y="453" width="12.5488%" height="15" fill="rgb(217,163,10)"/><text x="25.7384%" y="463.50">alloc::raw_vec::Raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (803 samples, 12.55%)</title><rect x="25.4884%" y="437" width="12.5488%" height="15" fill="rgb(213,25,53)"/><text x="25.7384%" y="447.50">&lt;alloc::alloc::Glob..</text></g><g><title>alloc::alloc::Global::alloc_impl (803 samples, 12.55%)</title><rect x="25.4884%" y="421" width="12.5488%" height="15" fill="rgb(252,105,26)"/><text x="25.7384%" y="431.50">alloc::alloc::Globa..</text></g><g><title>alloc::alloc::alloc (801 samples, 12.52%)</title><rect x="25.5196%" y="405" width="12.5176%" height="15" fill="rgb(220,39,43)"/><text x="25.7696%" y="415.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (10 samples, 0.16%)</title><rect x="37.8809%" y="389" width="0.1563%" height="15" fill="rgb(229,68,48)"/><text x="38.1309%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,116 samples, 17.44%)</title><rect x="20.6126%" y="581" width="17.4402%" height="15" fill="rgb(252,8,32)"/><text x="20.8626%" y="591.50">&lt;core::iter::adapters::Clon..</text></g><g><title>__GI___libc_malloc (95 samples, 1.48%)</title><rect x="38.0528%" y="581" width="1.4846%" height="15" fill="rgb(223,20,43)"/><text x="38.3028%" y="591.50"></text></g><g><title>_int_malloc (58 samples, 0.91%)</title><rect x="38.6310%" y="565" width="0.9064%" height="15" fill="rgb(229,81,49)"/><text x="38.8810%" y="575.50"></text></g><g><title>unlink_chunk.constprop.0 (7 samples, 0.11%)</title><rect x="39.4280%" y="549" width="0.1094%" height="15" fill="rgb(236,28,36)"/><text x="39.6780%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,228 samples, 19.19%)</title><rect x="20.3938%" y="597" width="19.1905%" height="15" fill="rgb(249,185,26)"/><text x="20.6438%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as core::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,239 samples, 19.36%)</title><rect x="20.3313%" y="613" width="19.3624%" height="15" fill="rgb(249,174,33)"/><text x="20.5813%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as core::c..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.14%)</title><rect x="40.7876%" y="517" width="0.1406%" height="15" fill="rgb(233,201,37)"/><text x="41.0376%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.14%)</title><rect x="40.7876%" y="501" width="0.1406%" height="15" fill="rgb(221,78,26)"/><text x="41.0376%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.14%)</title><rect x="40.7876%" y="485" width="0.1406%" height="15" fill="rgb(250,127,30)"/><text x="41.0376%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.14%)</title><rect x="40.7876%" y="469" width="0.1406%" height="15" fill="rgb(230,49,44)"/><text x="41.0376%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.13%)</title><rect x="40.8033%" y="453" width="0.1250%" height="15" fill="rgb(229,67,23)"/><text x="41.0533%" y="463.50"></text></g><g><title>_int_malloc (82 samples, 1.28%)</title><rect x="41.6940%" y="389" width="1.2815%" height="15" fill="rgb(249,83,47)"/><text x="41.9440%" y="399.50"></text></g><g><title>__GI___libc_malloc (129 samples, 2.02%)</title><rect x="40.9752%" y="405" width="2.0159%" height="15" fill="rgb(215,43,3)"/><text x="41.2252%" y="415.50">_..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (150 samples, 2.34%)</title><rect x="40.7095%" y="581" width="2.3441%" height="15" fill="rgb(238,154,13)"/><text x="40.9595%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (146 samples, 2.28%)</title><rect x="40.7720%" y="565" width="2.2816%" height="15" fill="rgb(219,56,2)"/><text x="41.0220%" y="575.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (146 samples, 2.28%)</title><rect x="40.7720%" y="549" width="2.2816%" height="15" fill="rgb(233,0,4)"/><text x="41.0220%" y="559.50">a..</text></g><g><title>alloc::slice::hack::to_vec (145 samples, 2.27%)</title><rect x="40.7876%" y="533" width="2.2660%" height="15" fill="rgb(235,30,7)"/><text x="41.0376%" y="543.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (136 samples, 2.13%)</title><rect x="40.9283%" y="517" width="2.1253%" height="15" fill="rgb(250,79,13)"/><text x="41.1783%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (136 samples, 2.13%)</title><rect x="40.9283%" y="501" width="2.1253%" height="15" fill="rgb(211,146,34)"/><text x="41.1783%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (136 samples, 2.13%)</title><rect x="40.9283%" y="485" width="2.1253%" height="15" fill="rgb(228,22,38)"/><text x="41.1783%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (136 samples, 2.13%)</title><rect x="40.9283%" y="469" width="2.1253%" height="15" fill="rgb(235,168,5)"/><text x="41.1783%" y="479.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (136 samples, 2.13%)</title><rect x="40.9283%" y="453" width="2.1253%" height="15" fill="rgb(221,155,16)"/><text x="41.1783%" y="463.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (136 samples, 2.13%)</title><rect x="40.9283%" y="437" width="2.1253%" height="15" fill="rgb(215,215,53)"/><text x="41.1783%" y="447.50">a..</text></g><g><title>alloc::alloc::alloc (136 samples, 2.13%)</title><rect x="40.9283%" y="421" width="2.1253%" height="15" fill="rgb(223,4,10)"/><text x="41.1783%" y="431.50">a..</text></g><g><title>_int_malloc (101 samples, 1.58%)</title><rect x="43.8506%" y="565" width="1.5784%" height="15" fill="rgb(234,103,6)"/><text x="44.1006%" y="575.50"></text></g><g><title>__GI___libc_malloc (153 samples, 2.39%)</title><rect x="43.0536%" y="581" width="2.3910%" height="15" fill="rgb(227,97,0)"/><text x="43.3036%" y="591.50">__..</text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.16%)</title><rect x="45.4446%" y="581" width="0.1563%" height="15" fill="rgb(234,150,53)"/><text x="45.6946%" y="591.50"></text></g><g><title>__rdl_alloc (8 samples, 0.13%)</title><rect x="45.6009%" y="581" width="0.1250%" height="15" fill="rgb(228,201,54)"/><text x="45.8509%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.13%)</title><rect x="45.6009%" y="565" width="0.1250%" height="15" fill="rgb(222,22,37)"/><text x="45.8509%" y="575.50"></text></g><g><title>&lt;decor_mem::views::View as core::clone::Clone&gt;::clone (1,632 samples, 25.50%)</title><rect x="20.3157%" y="629" width="25.5040%" height="15" fill="rgb(237,53,32)"/><text x="20.5657%" y="639.50">&lt;decor_mem::views::View as core::clone::C..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (392 samples, 6.13%)</title><rect x="39.6937%" y="613" width="6.1260%" height="15" fill="rgb(233,25,53)"/><text x="39.9437%" y="623.50">&lt;hashbro..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (390 samples, 6.09%)</title><rect x="39.7250%" y="597" width="6.0947%" height="15" fill="rgb(210,40,34)"/><text x="39.9750%" y="607.50">&lt;hashbro..</text></g><g><title>decor_mem::select::tablefactor_to_view (1,639 samples, 25.61%)</title><rect x="20.3000%" y="645" width="25.6134%" height="15" fill="rgb(241,220,44)"/><text x="20.5500%" y="655.50">decor_mem::select::tablefactor_to_view</text></g><g><title>__GI___libc_realloc (10 samples, 0.16%)</title><rect x="46.1166%" y="629" width="0.1563%" height="15" fill="rgb(235,28,35)"/><text x="46.3666%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (9 samples, 0.14%)</title><rect x="46.8042%" y="533" width="0.1406%" height="15" fill="rgb(210,56,17)"/><text x="47.0542%" y="543.50"></text></g><g><title>alloc::string::String::push (13 samples, 0.20%)</title><rect x="46.8042%" y="549" width="0.2032%" height="15" fill="rgb(224,130,29)"/><text x="47.0542%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (69 samples, 1.08%)</title><rect x="46.6323%" y="565" width="1.0783%" height="15" fill="rgb(235,212,8)"/><text x="46.8823%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (44 samples, 0.69%)</title><rect x="47.0230%" y="549" width="0.6876%" height="15" fill="rgb(223,33,50)"/><text x="47.2730%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (35 samples, 0.55%)</title><rect x="47.1636%" y="533" width="0.5470%" height="15" fill="rgb(219,149,13)"/><text x="47.4136%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (35 samples, 0.55%)</title><rect x="47.1636%" y="517" width="0.5470%" height="15" fill="rgb(250,156,29)"/><text x="47.4136%" y="527.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (13 samples, 0.20%)</title><rect x="47.5074%" y="501" width="0.2032%" height="15" fill="rgb(216,193,19)"/><text x="47.7574%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (87 samples, 1.36%)</title><rect x="46.4604%" y="597" width="1.3596%" height="15" fill="rgb(216,135,14)"/><text x="46.7104%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (87 samples, 1.36%)</title><rect x="46.4604%" y="581" width="1.3596%" height="15" fill="rgb(241,47,5)"/><text x="46.7104%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.11%)</title><rect x="47.9919%" y="565" width="0.1094%" height="15" fill="rgb(233,42,35)"/><text x="48.2419%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (113 samples, 1.77%)</title><rect x="46.3979%" y="613" width="1.7659%" height="15" fill="rgb(231,13,6)"/><text x="46.6479%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (20 samples, 0.31%)</title><rect x="47.8512%" y="597" width="0.3125%" height="15" fill="rgb(207,181,40)"/><text x="48.1012%" y="607.50"></text></g><g><title>core::fmt::write (11 samples, 0.17%)</title><rect x="47.9919%" y="581" width="0.1719%" height="15" fill="rgb(254,173,49)"/><text x="48.2419%" y="591.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.11%)</title><rect x="48.3513%" y="581" width="0.1094%" height="15" fill="rgb(221,1,38)"/><text x="48.6013%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (35 samples, 0.55%)</title><rect x="48.1638%" y="613" width="0.5470%" height="15" fill="rgb(206,124,46)"/><text x="48.4138%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (25 samples, 0.39%)</title><rect x="48.3201%" y="597" width="0.3907%" height="15" fill="rgb(249,21,11)"/><text x="48.5701%" y="607.50"></text></g><g><title>core::fmt::write (12 samples, 0.19%)</title><rect x="48.5232%" y="581" width="0.1875%" height="15" fill="rgb(222,201,40)"/><text x="48.7732%" y="591.50"></text></g><g><title>core::fmt::write (154 samples, 2.41%)</title><rect x="46.3510%" y="629" width="2.4066%" height="15" fill="rgb(235,61,29)"/><text x="46.6010%" y="639.50">co..</text></g><g><title>decor_mem::select::get_query_results (2,379 samples, 37.18%)</title><rect x="11.8143%" y="693" width="37.1777%" height="15" fill="rgb(219,207,3)"/><text x="12.0643%" y="703.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (2,379 samples, 37.18%)</title><rect x="11.8143%" y="677" width="37.1777%" height="15" fill="rgb(222,56,46)"/><text x="12.0643%" y="687.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (2,021 samples, 31.58%)</title><rect x="17.4090%" y="661" width="31.5831%" height="15" fill="rgb(239,76,54)"/><text x="17.6590%" y="671.50">decor_mem::select::tablewithjoins_to_view</text></g><g><title>decor_mem::views::View::get_rows_of_col (197 samples, 3.08%)</title><rect x="45.9134%" y="645" width="3.0786%" height="15" fill="rgb(231,124,27)"/><text x="46.1634%" y="655.50">dec..</text></g><g><title>hashbrown::map::make_hash (15 samples, 0.23%)</title><rect x="48.7576%" y="629" width="0.2344%" height="15" fill="rgb(249,195,6)"/><text x="49.0076%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (2,415 samples, 37.74%)</title><rect x="11.3612%" y="709" width="37.7403%" height="15" fill="rgb(237,174,47)"/><text x="11.6112%" y="719.50">decor_mem::query_transformer::QueryTransformer::issue_stateme..</text></g><g><title>decor_mem::views::Views::update (7 samples, 0.11%)</title><rect x="48.9920%" y="693" width="0.1094%" height="15" fill="rgb(206,201,31)"/><text x="49.2420%" y="703.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (7 samples, 0.11%)</title><rect x="49.1014%" y="709" width="0.1094%" height="15" fill="rgb(231,57,52)"/><text x="49.3514%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (7 samples, 0.11%)</title><rect x="49.1014%" y="693" width="0.1094%" height="15" fill="rgb(248,177,22)"/><text x="49.3514%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (7 samples, 0.11%)</title><rect x="49.1014%" y="677" width="0.1094%" height="15" fill="rgb(215,211,37)"/><text x="49.3514%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (7 samples, 0.11%)</title><rect x="49.1014%" y="661" width="0.1094%" height="15" fill="rgb(241,128,51)"/><text x="49.3514%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (2,428 samples, 37.94%)</title><rect x="11.3612%" y="725" width="37.9434%" height="15" fill="rgb(227,165,31)"/><text x="11.6112%" y="735.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.30%)</title><rect x="49.3046%" y="725" width="0.2969%" height="15" fill="rgb(228,167,24)"/><text x="49.5546%" y="735.50"></text></g><g><title>__GI___libc_free (10 samples, 0.16%)</title><rect x="49.7734%" y="725" width="0.1563%" height="15" fill="rgb(228,143,12)"/><text x="50.0234%" y="735.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.23%)</title><rect x="49.9297%" y="725" width="0.2344%" height="15" fill="rgb(249,149,8)"/><text x="50.1797%" y="735.50"></text></g><g><title>__libc_start_main (7 samples, 0.11%)</title><rect x="50.2266%" y="725" width="0.1094%" height="15" fill="rgb(243,35,44)"/><text x="50.4766%" y="735.50"></text></g><g><title>main (7 samples, 0.11%)</title><rect x="50.2266%" y="709" width="0.1094%" height="15" fill="rgb(246,89,9)"/><text x="50.4766%" y="719.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.11%)</title><rect x="50.2266%" y="693" width="0.1094%" height="15" fill="rgb(233,213,13)"/><text x="50.4766%" y="703.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.11%)</title><rect x="50.2266%" y="677" width="0.1094%" height="15" fill="rgb(233,141,41)"/><text x="50.4766%" y="687.50"></text></g><g><title>std::panicking::try (7 samples, 0.11%)</title><rect x="50.2266%" y="661" width="0.1094%" height="15" fill="rgb(239,167,4)"/><text x="50.4766%" y="671.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.11%)</title><rect x="50.2266%" y="645" width="0.1094%" height="15" fill="rgb(209,217,16)"/><text x="50.4766%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7 samples, 0.11%)</title><rect x="50.2266%" y="629" width="0.1094%" height="15" fill="rgb(219,88,35)"/><text x="50.4766%" y="639.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 0.11%)</title><rect x="50.2266%" y="613" width="0.1094%" height="15" fill="rgb(220,193,23)"/><text x="50.4766%" y="623.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.11%)</title><rect x="50.2266%" y="597" width="0.1094%" height="15" fill="rgb(230,90,52)"/><text x="50.4766%" y="607.50"></text></g><g><title>lobsters_microbenchmarks::main (7 samples, 0.11%)</title><rect x="50.2266%" y="581" width="0.1094%" height="15" fill="rgb(252,106,19)"/><text x="50.4766%" y="591.50"></text></g><g><title>_int_free (34 samples, 0.53%)</title><rect x="50.3829%" y="725" width="0.5313%" height="15" fill="rgb(206,74,20)"/><text x="50.6329%" y="735.50"></text></g><g><title>_int_malloc (30 samples, 0.47%)</title><rect x="50.9142%" y="725" width="0.4688%" height="15" fill="rgb(230,138,44)"/><text x="51.1642%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.11%)</title><rect x="51.4768%" y="725" width="0.1094%" height="15" fill="rgb(235,182,43)"/><text x="51.7268%" y="735.50"></text></g><g><title>alloc_perturb (7 samples, 0.11%)</title><rect x="51.6643%" y="725" width="0.1094%" height="15" fill="rgb(242,16,51)"/><text x="51.9143%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (81 samples, 1.27%)</title><rect x="52.1800%" y="629" width="1.2658%" height="15" fill="rgb(248,9,4)"/><text x="52.4300%" y="639.50"></text></g><g><title>__GI___libc_realloc (81 samples, 1.27%)</title><rect x="52.1800%" y="613" width="1.2658%" height="15" fill="rgb(210,31,22)"/><text x="52.4300%" y="623.50"></text></g><g><title>_int_realloc (81 samples, 1.27%)</title><rect x="52.1800%" y="597" width="1.2658%" height="15" fill="rgb(239,54,39)"/><text x="52.4300%" y="607.50"></text></g><g><title>_int_malloc (81 samples, 1.27%)</title><rect x="52.1800%" y="581" width="1.2658%" height="15" fill="rgb(230,99,41)"/><text x="52.4300%" y="591.50"></text></g><g><title>malloc_consolidate (53 samples, 0.83%)</title><rect x="52.6176%" y="565" width="0.8283%" height="15" fill="rgb(253,106,12)"/><text x="52.8676%" y="575.50"></text></g><g><title>unlink_chunk.constprop.0 (13 samples, 0.20%)</title><rect x="53.2427%" y="549" width="0.2032%" height="15" fill="rgb(213,46,41)"/><text x="53.4927%" y="559.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (17 samples, 0.27%)</title><rect x="53.5240%" y="613" width="0.2657%" height="15" fill="rgb(215,133,35)"/><text x="53.7740%" y="623.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (124 samples, 1.94%)</title><rect x="51.8987%" y="725" width="1.9378%" height="15" fill="rgb(213,28,5)"/><text x="52.1487%" y="735.50">d..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (124 samples, 1.94%)</title><rect x="51.8987%" y="709" width="1.9378%" height="15" fill="rgb(215,77,49)"/><text x="52.1487%" y="719.50">m..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (124 samples, 1.94%)</title><rect x="51.8987%" y="693" width="1.9378%" height="15" fill="rgb(248,100,22)"/><text x="52.1487%" y="703.50">&lt;..</text></g><g><title>decor_mem::stats::get_qtype (123 samples, 1.92%)</title><rect x="51.9144%" y="677" width="1.9222%" height="15" fill="rgb(208,67,9)"/><text x="52.1644%" y="687.50">d..</text></g><g><title>sql_parser::parser::parse_statements (123 samples, 1.92%)</title><rect x="51.9144%" y="661" width="1.9222%" height="15" fill="rgb(219,133,21)"/><text x="52.1644%" y="671.50">s..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (110 samples, 1.72%)</title><rect x="52.1175%" y="645" width="1.7190%" height="15" fill="rgb(246,46,29)"/><text x="52.3675%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (25 samples, 0.39%)</title><rect x="53.4459%" y="629" width="0.3907%" height="15" fill="rgb(246,185,52)"/><text x="53.6959%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (10 samples, 0.16%)</title><rect x="53.8834%" y="725" width="0.1563%" height="15" fill="rgb(252,136,11)"/><text x="54.1334%" y="735.50"></text></g><g><title>decor_mem::select::get_query_results (9 samples, 0.14%)</title><rect x="53.8990%" y="709" width="0.1406%" height="15" fill="rgb(219,138,53)"/><text x="54.1490%" y="719.50"></text></g><g><title>decor_mem::select::get_setexpr_results (9 samples, 0.14%)</title><rect x="53.8990%" y="693" width="0.1406%" height="15" fill="rgb(211,51,23)"/><text x="54.1490%" y="703.50"></text></g><g><title>decor_mem::select::tablewithjoins_to_view (7 samples, 0.11%)</title><rect x="53.9303%" y="677" width="0.1094%" height="15" fill="rgb(247,221,28)"/><text x="54.1803%" y="687.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (8 samples, 0.13%)</title><rect x="54.1178%" y="725" width="0.1250%" height="15" fill="rgb(251,222,45)"/><text x="54.3678%" y="735.50"></text></g><g><title>sql_parser::parser::parse_statements (8 samples, 0.13%)</title><rect x="54.1178%" y="709" width="0.1250%" height="15" fill="rgb(217,162,53)"/><text x="54.3678%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (8 samples, 0.13%)</title><rect x="54.1178%" y="693" width="0.1250%" height="15" fill="rgb(229,93,14)"/><text x="54.3678%" y="703.50"></text></g><g><title>sk_wait_data (8 samples, 0.13%)</title><rect x="54.3835%" y="421" width="0.1250%" height="15" fill="rgb(209,67,49)"/><text x="54.6335%" y="431.50"></text></g><g><title>wait_woken (7 samples, 0.11%)</title><rect x="54.3991%" y="405" width="0.1094%" height="15" fill="rgb(213,87,29)"/><text x="54.6491%" y="415.50"></text></g><g><title>schedule_timeout (7 samples, 0.11%)</title><rect x="54.3991%" y="389" width="0.1094%" height="15" fill="rgb(205,151,52)"/><text x="54.6491%" y="399.50"></text></g><g><title>schedule (7 samples, 0.11%)</title><rect x="54.3991%" y="373" width="0.1094%" height="15" fill="rgb(253,215,39)"/><text x="54.6491%" y="383.50"></text></g><g><title>__schedule (7 samples, 0.11%)</title><rect x="54.3991%" y="357" width="0.1094%" height="15" fill="rgb(221,220,41)"/><text x="54.6491%" y="367.50"></text></g><g><title>do_syscall_64 (12 samples, 0.19%)</title><rect x="54.3366%" y="501" width="0.1875%" height="15" fill="rgb(218,133,21)"/><text x="54.5866%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (12 samples, 0.19%)</title><rect x="54.3366%" y="485" width="0.1875%" height="15" fill="rgb(221,193,43)"/><text x="54.5866%" y="495.50"></text></g><g><title>__sys_recvfrom (12 samples, 0.19%)</title><rect x="54.3366%" y="469" width="0.1875%" height="15" fill="rgb(240,128,52)"/><text x="54.5866%" y="479.50"></text></g><g><title>inet_recvmsg (12 samples, 0.19%)</title><rect x="54.3366%" y="453" width="0.1875%" height="15" fill="rgb(253,114,12)"/><text x="54.5866%" y="463.50"></text></g><g><title>tcp_recvmsg (11 samples, 0.17%)</title><rect x="54.3522%" y="437" width="0.1719%" height="15" fill="rgb(215,223,47)"/><text x="54.6022%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (14 samples, 0.22%)</title><rect x="54.3210%" y="613" width="0.2188%" height="15" fill="rgb(248,225,23)"/><text x="54.5710%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (14 samples, 0.22%)</title><rect x="54.3210%" y="597" width="0.2188%" height="15" fill="rgb(250,108,0)"/><text x="54.5710%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (14 samples, 0.22%)</title><rect x="54.3210%" y="581" width="0.2188%" height="15" fill="rgb(228,208,7)"/><text x="54.5710%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (14 samples, 0.22%)</title><rect x="54.3210%" y="565" width="0.2188%" height="15" fill="rgb(244,45,10)"/><text x="54.5710%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (14 samples, 0.22%)</title><rect x="54.3210%" y="549" width="0.2188%" height="15" fill="rgb(207,125,25)"/><text x="54.5710%" y="559.50"></text></g><g><title>__libc_recv (14 samples, 0.22%)</title><rect x="54.3210%" y="533" width="0.2188%" height="15" fill="rgb(210,195,18)"/><text x="54.5710%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (13 samples, 0.20%)</title><rect x="54.3366%" y="517" width="0.2032%" height="15" fill="rgb(249,80,12)"/><text x="54.5866%" y="527.50"></text></g><g><title>mysql::conn::Conn::read_packet (16 samples, 0.25%)</title><rect x="54.3054%" y="645" width="0.2500%" height="15" fill="rgb(221,65,9)"/><text x="54.5554%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.25%)</title><rect x="54.3054%" y="629" width="0.2500%" height="15" fill="rgb(235,49,36)"/><text x="54.5554%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (17 samples, 0.27%)</title><rect x="54.3054%" y="661" width="0.2657%" height="15" fill="rgb(225,32,20)"/><text x="54.5554%" y="671.50"></text></g><g><title>ip_local_deliver (8 samples, 0.13%)</title><rect x="54.6960%" y="245" width="0.1250%" height="15" fill="rgb(215,141,46)"/><text x="54.9460%" y="255.50"></text></g><g><title>ip_local_deliver_finish (8 samples, 0.13%)</title><rect x="54.6960%" y="229" width="0.1250%" height="15" fill="rgb(250,160,47)"/><text x="54.9460%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (8 samples, 0.13%)</title><rect x="54.6960%" y="213" width="0.1250%" height="15" fill="rgb(216,222,40)"/><text x="54.9460%" y="223.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.13%)</title><rect x="54.6960%" y="197" width="0.1250%" height="15" fill="rgb(234,217,39)"/><text x="54.9460%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (8 samples, 0.13%)</title><rect x="54.6960%" y="181" width="0.1250%" height="15" fill="rgb(207,178,40)"/><text x="54.9460%" y="191.50"></text></g><g><title>tcp_rcv_established (8 samples, 0.13%)</title><rect x="54.6960%" y="165" width="0.1250%" height="15" fill="rgb(221,136,13)"/><text x="54.9460%" y="175.50"></text></g><g><title>__tcp_push_pending_frames (14 samples, 0.22%)</title><rect x="54.6179%" y="469" width="0.2188%" height="15" fill="rgb(249,199,10)"/><text x="54.8679%" y="479.50"></text></g><g><title>tcp_write_xmit (14 samples, 0.22%)</title><rect x="54.6179%" y="453" width="0.2188%" height="15" fill="rgb(249,222,13)"/><text x="54.8679%" y="463.50"></text></g><g><title>__tcp_transmit_skb (14 samples, 0.22%)</title><rect x="54.6179%" y="437" width="0.2188%" height="15" fill="rgb(244,185,38)"/><text x="54.8679%" y="447.50"></text></g><g><title>__ip_queue_xmit (14 samples, 0.22%)</title><rect x="54.6179%" y="421" width="0.2188%" height="15" fill="rgb(236,202,9)"/><text x="54.8679%" y="431.50"></text></g><g><title>ip_output (13 samples, 0.20%)</title><rect x="54.6335%" y="405" width="0.2032%" height="15" fill="rgb(250,229,37)"/><text x="54.8835%" y="415.50"></text></g><g><title>ip_finish_output2 (13 samples, 0.20%)</title><rect x="54.6335%" y="389" width="0.2032%" height="15" fill="rgb(206,174,23)"/><text x="54.8835%" y="399.50"></text></g><g><title>__local_bh_enable_ip (10 samples, 0.16%)</title><rect x="54.6804%" y="373" width="0.1563%" height="15" fill="rgb(211,33,43)"/><text x="54.9304%" y="383.50"></text></g><g><title>do_softirq (10 samples, 0.16%)</title><rect x="54.6804%" y="357" width="0.1563%" height="15" fill="rgb(245,58,50)"/><text x="54.9304%" y="367.50"></text></g><g><title>do_softirq_own_stack (10 samples, 0.16%)</title><rect x="54.6804%" y="341" width="0.1563%" height="15" fill="rgb(244,68,36)"/><text x="54.9304%" y="351.50"></text></g><g><title>__do_softirq (10 samples, 0.16%)</title><rect x="54.6804%" y="325" width="0.1563%" height="15" fill="rgb(232,229,15)"/><text x="54.9304%" y="335.50"></text></g><g><title>net_rx_action (10 samples, 0.16%)</title><rect x="54.6804%" y="309" width="0.1563%" height="15" fill="rgb(254,30,23)"/><text x="54.9304%" y="319.50"></text></g><g><title>process_backlog (9 samples, 0.14%)</title><rect x="54.6960%" y="293" width="0.1406%" height="15" fill="rgb(235,160,14)"/><text x="54.9460%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (9 samples, 0.14%)</title><rect x="54.6960%" y="277" width="0.1406%" height="15" fill="rgb(212,155,44)"/><text x="54.9460%" y="287.50"></text></g><g><title>ip_rcv (9 samples, 0.14%)</title><rect x="54.6960%" y="261" width="0.1406%" height="15" fill="rgb(226,2,50)"/><text x="54.9460%" y="271.50"></text></g><g><title>sock_sendmsg (18 samples, 0.28%)</title><rect x="54.5867%" y="517" width="0.2813%" height="15" fill="rgb(234,177,6)"/><text x="54.8367%" y="527.50"></text></g><g><title>tcp_sendmsg (18 samples, 0.28%)</title><rect x="54.5867%" y="501" width="0.2813%" height="15" fill="rgb(217,24,9)"/><text x="54.8367%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (18 samples, 0.28%)</title><rect x="54.5867%" y="485" width="0.2813%" height="15" fill="rgb(220,13,46)"/><text x="54.8367%" y="495.50"></text></g><g><title>__x64_sys_sendto (20 samples, 0.31%)</title><rect x="54.5867%" y="549" width="0.3125%" height="15" fill="rgb(239,221,27)"/><text x="54.8367%" y="559.50"></text></g><g><title>__sys_sendto (20 samples, 0.31%)</title><rect x="54.5867%" y="533" width="0.3125%" height="15" fill="rgb(222,198,25)"/><text x="54.8367%" y="543.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (39 samples, 0.61%)</title><rect x="54.3054%" y="693" width="0.6095%" height="15" fill="rgb(211,99,13)"/><text x="54.5554%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (39 samples, 0.61%)</title><rect x="54.3054%" y="677" width="0.6095%" height="15" fill="rgb(232,111,31)"/><text x="54.5554%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (22 samples, 0.34%)</title><rect x="54.5710%" y="661" width="0.3438%" height="15" fill="rgb(245,82,37)"/><text x="54.8210%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (22 samples, 0.34%)</title><rect x="54.5710%" y="645" width="0.3438%" height="15" fill="rgb(227,149,46)"/><text x="54.8210%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (22 samples, 0.34%)</title><rect x="54.5710%" y="629" width="0.3438%" height="15" fill="rgb(218,36,50)"/><text x="54.8210%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (22 samples, 0.34%)</title><rect x="54.5710%" y="613" width="0.3438%" height="15" fill="rgb(226,80,48)"/><text x="54.8210%" y="623.50"></text></g><g><title>__libc_send (22 samples, 0.34%)</title><rect x="54.5710%" y="597" width="0.3438%" height="15" fill="rgb(238,224,15)"/><text x="54.8210%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (21 samples, 0.33%)</title><rect x="54.5867%" y="581" width="0.3282%" height="15" fill="rgb(241,136,10)"/><text x="54.8367%" y="591.50"></text></g><g><title>do_syscall_64 (21 samples, 0.33%)</title><rect x="54.5867%" y="565" width="0.3282%" height="15" fill="rgb(208,32,45)"/><text x="54.8367%" y="575.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.23%)</title><rect x="55.2118%" y="613" width="0.2344%" height="15" fill="rgb(207,135,9)"/><text x="55.4618%" y="623.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (13 samples, 0.20%)</title><rect x="55.2430%" y="597" width="0.2032%" height="15" fill="rgb(206,86,44)"/><text x="55.4930%" y="607.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (12 samples, 0.19%)</title><rect x="55.2586%" y="581" width="0.1875%" height="15" fill="rgb(245,177,15)"/><text x="55.5086%" y="591.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (12 samples, 0.19%)</title><rect x="55.2586%" y="565" width="0.1875%" height="15" fill="rgb(206,64,50)"/><text x="55.5086%" y="575.50"></text></g><g><title>mysql::conn::Conn::read_packet (34 samples, 0.53%)</title><rect x="55.0867%" y="629" width="0.5313%" height="15" fill="rgb(234,36,40)"/><text x="55.3367%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.11%)</title><rect x="55.6493%" y="613" width="0.1094%" height="15" fill="rgb(213,64,8)"/><text x="55.8993%" y="623.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (62 samples, 0.97%)</title><rect x="54.9148%" y="661" width="0.9689%" height="15" fill="rgb(210,75,36)"/><text x="55.1648%" y="671.50"></text></g><g><title>mysql::conn::Conn::next_text (62 samples, 0.97%)</title><rect x="54.9148%" y="645" width="0.9689%" height="15" fill="rgb(229,88,21)"/><text x="55.1648%" y="655.50"></text></g><g><title>mysql_common::value::read_text_values (17 samples, 0.27%)</title><rect x="55.6181%" y="629" width="0.2657%" height="15" fill="rgb(252,204,47)"/><text x="55.8681%" y="639.50"></text></g><g><title>mysql_common::value::read_text_value (8 samples, 0.13%)</title><rect x="55.7587%" y="613" width="0.1250%" height="15" fill="rgb(208,77,27)"/><text x="56.0087%" y="623.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 1.03%)</title><rect x="54.9148%" y="693" width="1.0314%" height="15" fill="rgb(221,76,26)"/><text x="55.1648%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 1.03%)</title><rect x="54.9148%" y="677" width="1.0314%" height="15" fill="rgb(225,139,18)"/><text x="55.1648%" y="687.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (10 samples, 0.16%)</title><rect x="56.0400%" y="677" width="0.1563%" height="15" fill="rgb(230,137,11)"/><text x="56.2900%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (10 samples, 0.16%)</title><rect x="56.0400%" y="661" width="0.1563%" height="15" fill="rgb(212,28,1)"/><text x="56.2900%" y="671.50"></text></g><g><title>lobsters_microbenchmarks::main (123 samples, 1.92%)</title><rect x="54.2897%" y="725" width="1.9222%" height="15" fill="rgb(248,164,17)"/><text x="54.5397%" y="735.50">l..</text></g><g><title>lobsters_microbenchmarks::queriers::comment::post_comment (122 samples, 1.91%)</title><rect x="54.3054%" y="709" width="1.9065%" height="15" fill="rgb(222,171,42)"/><text x="54.5554%" y="719.50">l..</text></g><g><title>mysql::conn::queryable::Queryable::query_first (12 samples, 0.19%)</title><rect x="56.0244%" y="693" width="0.1875%" height="15" fill="rgb(243,84,45)"/><text x="56.2744%" y="703.50"></text></g><g><title>__tcp_push_pending_frames (9 samples, 0.14%)</title><rect x="56.4463%" y="453" width="0.1406%" height="15" fill="rgb(252,49,23)"/><text x="56.6963%" y="463.50"></text></g><g><title>tcp_write_xmit (9 samples, 0.14%)</title><rect x="56.4463%" y="437" width="0.1406%" height="15" fill="rgb(215,19,7)"/><text x="56.6963%" y="447.50"></text></g><g><title>__tcp_transmit_skb (8 samples, 0.13%)</title><rect x="56.4619%" y="421" width="0.1250%" height="15" fill="rgb(238,81,41)"/><text x="56.7119%" y="431.50"></text></g><g><title>__ip_queue_xmit (7 samples, 0.11%)</title><rect x="56.4776%" y="405" width="0.1094%" height="15" fill="rgb(210,199,37)"/><text x="56.7276%" y="415.50"></text></g><g><title>ip_output (7 samples, 0.11%)</title><rect x="56.4776%" y="389" width="0.1094%" height="15" fill="rgb(244,192,49)"/><text x="56.7276%" y="399.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (15 samples, 0.23%)</title><rect x="56.3682%" y="677" width="0.2344%" height="15" fill="rgb(226,211,11)"/><text x="56.6182%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (15 samples, 0.23%)</title><rect x="56.3682%" y="661" width="0.2344%" height="15" fill="rgb(236,162,54)"/><text x="56.6182%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (14 samples, 0.22%)</title><rect x="56.3838%" y="645" width="0.2188%" height="15" fill="rgb(220,229,9)"/><text x="56.6338%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (13 samples, 0.20%)</title><rect x="56.3994%" y="629" width="0.2032%" height="15" fill="rgb(250,87,22)"/><text x="56.6494%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (13 samples, 0.20%)</title><rect x="56.3994%" y="613" width="0.2032%" height="15" fill="rgb(239,43,17)"/><text x="56.6494%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (13 samples, 0.20%)</title><rect x="56.3994%" y="597" width="0.2032%" height="15" fill="rgb(231,177,25)"/><text x="56.6494%" y="607.50"></text></g><g><title>__libc_send (13 samples, 0.20%)</title><rect x="56.3994%" y="581" width="0.2032%" height="15" fill="rgb(219,179,1)"/><text x="56.6494%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (12 samples, 0.19%)</title><rect x="56.4151%" y="565" width="0.1875%" height="15" fill="rgb(238,219,53)"/><text x="56.6651%" y="575.50"></text></g><g><title>do_syscall_64 (12 samples, 0.19%)</title><rect x="56.4151%" y="549" width="0.1875%" height="15" fill="rgb(232,167,36)"/><text x="56.6651%" y="559.50"></text></g><g><title>__x64_sys_sendto (12 samples, 0.19%)</title><rect x="56.4151%" y="533" width="0.1875%" height="15" fill="rgb(244,19,51)"/><text x="56.6651%" y="543.50"></text></g><g><title>__sys_sendto (11 samples, 0.17%)</title><rect x="56.4307%" y="517" width="0.1719%" height="15" fill="rgb(224,6,22)"/><text x="56.6807%" y="527.50"></text></g><g><title>sock_sendmsg (11 samples, 0.17%)</title><rect x="56.4307%" y="501" width="0.1719%" height="15" fill="rgb(224,145,5)"/><text x="56.6807%" y="511.50"></text></g><g><title>tcp_sendmsg (11 samples, 0.17%)</title><rect x="56.4307%" y="485" width="0.1719%" height="15" fill="rgb(234,130,49)"/><text x="56.6807%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (10 samples, 0.16%)</title><rect x="56.4463%" y="469" width="0.1563%" height="15" fill="rgb(254,6,2)"/><text x="56.6963%" y="479.50"></text></g><g><title>core::fmt::write (17 samples, 0.27%)</title><rect x="56.6338%" y="677" width="0.2657%" height="15" fill="rgb(208,96,46)"/><text x="56.8838%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (12 samples, 0.19%)</title><rect x="56.7120%" y="661" width="0.1875%" height="15" fill="rgb(239,3,39)"/><text x="56.9620%" y="671.50"></text></g><g><title>sock_def_readable (7 samples, 0.11%)</title><rect x="57.1496%" y="133" width="0.1094%" height="15" fill="rgb(233,210,1)"/><text x="57.3996%" y="143.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.11%)</title><rect x="57.1496%" y="117" width="0.1094%" height="15" fill="rgb(244,137,37)"/><text x="57.3996%" y="127.50"></text></g><g><title>__tcp_push_pending_frames (19 samples, 0.30%)</title><rect x="57.0089%" y="453" width="0.2969%" height="15" fill="rgb(240,136,2)"/><text x="57.2589%" y="463.50"></text></g><g><title>tcp_write_xmit (19 samples, 0.30%)</title><rect x="57.0089%" y="437" width="0.2969%" height="15" fill="rgb(239,18,37)"/><text x="57.2589%" y="447.50"></text></g><g><title>__tcp_transmit_skb (18 samples, 0.28%)</title><rect x="57.0245%" y="421" width="0.2813%" height="15" fill="rgb(218,185,22)"/><text x="57.2745%" y="431.50"></text></g><g><title>__ip_queue_xmit (17 samples, 0.27%)</title><rect x="57.0402%" y="405" width="0.2657%" height="15" fill="rgb(225,218,4)"/><text x="57.2902%" y="415.50"></text></g><g><title>ip_output (15 samples, 0.23%)</title><rect x="57.0714%" y="389" width="0.2344%" height="15" fill="rgb(230,182,32)"/><text x="57.3214%" y="399.50"></text></g><g><title>ip_finish_output2 (14 samples, 0.22%)</title><rect x="57.0870%" y="373" width="0.2188%" height="15" fill="rgb(242,56,43)"/><text x="57.3370%" y="383.50"></text></g><g><title>__local_bh_enable_ip (14 samples, 0.22%)</title><rect x="57.0870%" y="357" width="0.2188%" height="15" fill="rgb(233,99,24)"/><text x="57.3370%" y="367.50"></text></g><g><title>do_softirq (14 samples, 0.22%)</title><rect x="57.0870%" y="341" width="0.2188%" height="15" fill="rgb(234,209,42)"/><text x="57.3370%" y="351.50"></text></g><g><title>do_softirq_own_stack (14 samples, 0.22%)</title><rect x="57.0870%" y="325" width="0.2188%" height="15" fill="rgb(227,7,12)"/><text x="57.3370%" y="335.50"></text></g><g><title>__do_softirq (14 samples, 0.22%)</title><rect x="57.0870%" y="309" width="0.2188%" height="15" fill="rgb(245,203,43)"/><text x="57.3370%" y="319.50"></text></g><g><title>net_rx_action (13 samples, 0.20%)</title><rect x="57.1027%" y="293" width="0.2032%" height="15" fill="rgb(238,205,33)"/><text x="57.3527%" y="303.50"></text></g><g><title>process_backlog (13 samples, 0.20%)</title><rect x="57.1027%" y="277" width="0.2032%" height="15" fill="rgb(231,56,7)"/><text x="57.3527%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (12 samples, 0.19%)</title><rect x="57.1183%" y="261" width="0.1875%" height="15" fill="rgb(244,186,29)"/><text x="57.3683%" y="271.50"></text></g><g><title>ip_rcv (12 samples, 0.19%)</title><rect x="57.1183%" y="245" width="0.1875%" height="15" fill="rgb(234,111,31)"/><text x="57.3683%" y="255.50"></text></g><g><title>ip_local_deliver (12 samples, 0.19%)</title><rect x="57.1183%" y="229" width="0.1875%" height="15" fill="rgb(241,149,10)"/><text x="57.3683%" y="239.50"></text></g><g><title>ip_local_deliver_finish (12 samples, 0.19%)</title><rect x="57.1183%" y="213" width="0.1875%" height="15" fill="rgb(249,206,44)"/><text x="57.3683%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (12 samples, 0.19%)</title><rect x="57.1183%" y="197" width="0.1875%" height="15" fill="rgb(251,153,30)"/><text x="57.3683%" y="207.50"></text></g><g><title>tcp_v4_rcv (12 samples, 0.19%)</title><rect x="57.1183%" y="181" width="0.1875%" height="15" fill="rgb(239,152,38)"/><text x="57.3683%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (10 samples, 0.16%)</title><rect x="57.1496%" y="165" width="0.1563%" height="15" fill="rgb(249,139,47)"/><text x="57.3996%" y="175.50"></text></g><g><title>tcp_rcv_established (10 samples, 0.16%)</title><rect x="57.1496%" y="149" width="0.1563%" height="15" fill="rgb(244,64,35)"/><text x="57.3996%" y="159.50"></text></g><g><title>sock_sendmsg (21 samples, 0.33%)</title><rect x="57.0089%" y="501" width="0.3282%" height="15" fill="rgb(216,46,15)"/><text x="57.2589%" y="511.50"></text></g><g><title>tcp_sendmsg (21 samples, 0.33%)</title><rect x="57.0089%" y="485" width="0.3282%" height="15" fill="rgb(250,74,19)"/><text x="57.2589%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (21 samples, 0.33%)</title><rect x="57.0089%" y="469" width="0.3282%" height="15" fill="rgb(249,42,33)"/><text x="57.2589%" y="479.50"></text></g><g><title>__x64_sys_sendto (23 samples, 0.36%)</title><rect x="57.0089%" y="533" width="0.3594%" height="15" fill="rgb(242,149,17)"/><text x="57.2589%" y="543.50"></text></g><g><title>__sys_sendto (23 samples, 0.36%)</title><rect x="57.0089%" y="517" width="0.3594%" height="15" fill="rgb(244,29,21)"/><text x="57.2589%" y="527.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (31 samples, 0.48%)</title><rect x="56.9308%" y="677" width="0.4845%" height="15" fill="rgb(220,130,37)"/><text x="57.1808%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (29 samples, 0.45%)</title><rect x="56.9620%" y="661" width="0.4532%" height="15" fill="rgb(211,67,2)"/><text x="57.2120%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (29 samples, 0.45%)</title><rect x="56.9620%" y="645" width="0.4532%" height="15" fill="rgb(235,68,52)"/><text x="57.2120%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (26 samples, 0.41%)</title><rect x="57.0089%" y="629" width="0.4063%" height="15" fill="rgb(246,142,3)"/><text x="57.2589%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (26 samples, 0.41%)</title><rect x="57.0089%" y="613" width="0.4063%" height="15" fill="rgb(241,25,7)"/><text x="57.2589%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (26 samples, 0.41%)</title><rect x="57.0089%" y="597" width="0.4063%" height="15" fill="rgb(242,119,39)"/><text x="57.2589%" y="607.50"></text></g><g><title>__libc_send (26 samples, 0.41%)</title><rect x="57.0089%" y="581" width="0.4063%" height="15" fill="rgb(241,98,45)"/><text x="57.2589%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (26 samples, 0.41%)</title><rect x="57.0089%" y="565" width="0.4063%" height="15" fill="rgb(254,28,30)"/><text x="57.2589%" y="575.50"></text></g><g><title>do_syscall_64 (26 samples, 0.41%)</title><rect x="57.0089%" y="549" width="0.4063%" height="15" fill="rgb(241,142,54)"/><text x="57.2589%" y="559.50"></text></g><g><title>__GI___libc_malloc (36 samples, 0.56%)</title><rect x="57.8372%" y="469" width="0.5626%" height="15" fill="rgb(222,85,15)"/><text x="58.0872%" y="479.50"></text></g><g><title>_int_malloc (29 samples, 0.45%)</title><rect x="57.9466%" y="453" width="0.4532%" height="15" fill="rgb(210,85,47)"/><text x="58.1966%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (44 samples, 0.69%)</title><rect x="57.7590%" y="645" width="0.6876%" height="15" fill="rgb(224,206,25)"/><text x="58.0090%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (41 samples, 0.64%)</title><rect x="57.8059%" y="629" width="0.6407%" height="15" fill="rgb(243,201,19)"/><text x="58.0559%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (41 samples, 0.64%)</title><rect x="57.8059%" y="613" width="0.6407%" height="15" fill="rgb(236,59,4)"/><text x="58.0559%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.63%)</title><rect x="57.8215%" y="597" width="0.6251%" height="15" fill="rgb(254,179,45)"/><text x="58.0715%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (39 samples, 0.61%)</title><rect x="57.8372%" y="581" width="0.6095%" height="15" fill="rgb(226,14,10)"/><text x="58.0872%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (39 samples, 0.61%)</title><rect x="57.8372%" y="565" width="0.6095%" height="15" fill="rgb(244,27,41)"/><text x="58.0872%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.61%)</title><rect x="57.8372%" y="549" width="0.6095%" height="15" fill="rgb(235,35,32)"/><text x="58.0872%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.61%)</title><rect x="57.8372%" y="533" width="0.6095%" height="15" fill="rgb(218,68,31)"/><text x="58.0872%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (39 samples, 0.61%)</title><rect x="57.8372%" y="517" width="0.6095%" height="15" fill="rgb(207,120,37)"/><text x="58.0872%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.61%)</title><rect x="57.8372%" y="501" width="0.6095%" height="15" fill="rgb(227,98,0)"/><text x="58.0872%" y="511.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.61%)</title><rect x="57.8372%" y="485" width="0.6095%" height="15" fill="rgb(207,7,3)"/><text x="58.0872%" y="495.50"></text></g><g><title>__GI___libc_free (19 samples, 0.30%)</title><rect x="58.6810%" y="613" width="0.2969%" height="15" fill="rgb(206,98,19)"/><text x="58.9310%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 1.63%)</title><rect x="58.4623%" y="629" width="1.6253%" height="15" fill="rgb(217,5,26)"/><text x="58.7123%" y="639.50"></text></g><g><title>_int_free (68 samples, 1.06%)</title><rect x="59.0248%" y="613" width="1.0627%" height="15" fill="rgb(235,190,38)"/><text x="59.2748%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 2.25%)</title><rect x="58.4466%" y="645" width="2.2504%" height="15" fill="rgb(247,86,24)"/><text x="58.6966%" y="655.50">&lt;..</text></g><g><title>_int_free (38 samples, 0.59%)</title><rect x="60.1031%" y="629" width="0.5938%" height="15" fill="rgb(205,101,16)"/><text x="60.3531%" y="639.50"></text></g><g><title>malloc_consolidate (38 samples, 0.59%)</title><rect x="60.1031%" y="613" width="0.5938%" height="15" fill="rgb(246,168,33)"/><text x="60.3531%" y="623.50"></text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.17%)</title><rect x="60.5251%" y="597" width="0.1719%" height="15" fill="rgb(231,114,1)"/><text x="60.7751%" y="607.50"></text></g><g><title>__GI___libc_free (17 samples, 0.27%)</title><rect x="60.6970%" y="645" width="0.2657%" height="15" fill="rgb(207,184,53)"/><text x="60.9470%" y="655.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.36%)</title><rect x="60.9627%" y="645" width="0.3594%" height="15" fill="rgb(224,95,51)"/><text x="61.2127%" y="655.50"></text></g><g><title>_int_malloc (18 samples, 0.28%)</title><rect x="61.0408%" y="629" width="0.2813%" height="15" fill="rgb(212,188,45)"/><text x="61.2908%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.11%)</title><rect x="61.3377%" y="645" width="0.1094%" height="15" fill="rgb(223,154,38)"/><text x="61.5877%" y="655.50"></text></g><g><title>malloc_consolidate (34 samples, 0.53%)</title><rect x="62.2597%" y="629" width="0.5313%" height="15" fill="rgb(251,22,52)"/><text x="62.5097%" y="639.50"></text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.17%)</title><rect x="62.6192%" y="613" width="0.1719%" height="15" fill="rgb(229,209,22)"/><text x="62.8692%" y="623.50"></text></g><g><title>_int_free (82 samples, 1.28%)</title><rect x="61.5252%" y="645" width="1.2815%" height="15" fill="rgb(234,138,34)"/><text x="61.7752%" y="655.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.16%)</title><rect x="62.8536%" y="629" width="0.1563%" height="15" fill="rgb(212,95,11)"/><text x="63.1036%" y="639.50"></text></g><g><title>_int_malloc (8 samples, 0.13%)</title><rect x="62.8848%" y="613" width="0.1250%" height="15" fill="rgb(240,179,47)"/><text x="63.1348%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.16%)</title><rect x="63.3224%" y="597" width="0.1563%" height="15" fill="rgb(240,163,11)"/><text x="63.5724%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (51 samples, 0.80%)</title><rect x="62.8067%" y="645" width="0.7970%" height="15" fill="rgb(236,37,12)"/><text x="63.0567%" y="655.50"></text></g><g><title>__GI___libc_realloc (38 samples, 0.59%)</title><rect x="63.0098%" y="629" width="0.5938%" height="15" fill="rgb(232,164,16)"/><text x="63.2598%" y="639.50"></text></g><g><title>_int_realloc (21 samples, 0.33%)</title><rect x="63.2755%" y="613" width="0.3282%" height="15" fill="rgb(244,205,15)"/><text x="63.5255%" y="623.50"></text></g><g><title>_int_free (8 samples, 0.13%)</title><rect x="63.4787%" y="597" width="0.1250%" height="15" fill="rgb(223,117,47)"/><text x="63.7287%" y="607.50"></text></g><g><title>__GI___libc_free (46 samples, 0.72%)</title><rect x="64.0569%" y="629" width="0.7189%" height="15" fill="rgb(244,107,35)"/><text x="64.3069%" y="639.50"></text></g><g><title>__rust_dealloc (9 samples, 0.14%)</title><rect x="64.8695%" y="629" width="0.1406%" height="15" fill="rgb(205,140,8)"/><text x="65.1195%" y="639.50"></text></g><g><title>malloc_consolidate (45 samples, 0.70%)</title><rect x="66.8229%" y="613" width="0.7032%" height="15" fill="rgb(228,84,46)"/><text x="67.0729%" y="623.50"></text></g><g><title>unlink_chunk.constprop.0 (8 samples, 0.13%)</title><rect x="67.4012%" y="597" width="0.1250%" height="15" fill="rgb(254,188,9)"/><text x="67.6512%" y="607.50"></text></g><g><title>_int_free (162 samples, 2.53%)</title><rect x="65.0102%" y="629" width="2.5316%" height="15" fill="rgb(206,112,54)"/><text x="65.2602%" y="639.50">_i..</text></g><g><title>core::ptr::drop_in_place (278 samples, 4.34%)</title><rect x="63.6037%" y="645" width="4.3444%" height="15" fill="rgb(216,84,49)"/><text x="63.8537%" y="655.50">core:..</text></g><g><title>core::ptr::drop_in_place (26 samples, 0.41%)</title><rect x="67.5418%" y="629" width="0.4063%" height="15" fill="rgb(214,194,35)"/><text x="67.7918%" y="639.50"></text></g><g><title>decor_mem::select::get_query_results (672 samples, 10.50%)</title><rect x="57.4777%" y="677" width="10.5016%" height="15" fill="rgb(249,28,3)"/><text x="57.7277%" y="687.50">decor_mem::sele..</text></g><g><title>decor_mem::select::get_setexpr_results (671 samples, 10.49%)</title><rect x="57.4934%" y="661" width="10.4860%" height="15" fill="rgb(222,56,52)"/><text x="57.7434%" y="671.50">decor_mem::sele..</text></g><g><title>core::fmt::write (7 samples, 0.11%)</title><rect x="68.0106%" y="645" width="0.1094%" height="15" fill="rgb(245,217,50)"/><text x="68.2606%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (7 samples, 0.11%)</title><rect x="68.0106%" y="629" width="0.1094%" height="15" fill="rgb(213,201,24)"/><text x="68.2606%" y="639.50"></text></g><g><title>decor_mem::views::Views::insert (11 samples, 0.17%)</title><rect x="67.9794%" y="677" width="0.1719%" height="15" fill="rgb(248,116,28)"/><text x="68.2294%" y="687.50"></text></g><g><title>decor_mem::views::View::insert_into_index (9 samples, 0.14%)</title><rect x="68.0106%" y="661" width="0.1406%" height="15" fill="rgb(219,72,43)"/><text x="68.2606%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.16%)</title><rect x="70.2766%" y="565" width="0.1563%" height="15" fill="rgb(209,138,14)"/><text x="70.5266%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.11%)</title><rect x="70.4329%" y="549" width="0.1094%" height="15" fill="rgb(222,18,33)"/><text x="70.6829%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (25 samples, 0.39%)</title><rect x="70.5423%" y="533" width="0.3907%" height="15" fill="rgb(213,199,7)"/><text x="70.7923%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.39%)</title><rect x="70.5423%" y="517" width="0.3907%" height="15" fill="rgb(250,110,10)"/><text x="70.7923%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (25 samples, 0.39%)</title><rect x="70.5423%" y="501" width="0.3907%" height="15" fill="rgb(248,123,6)"/><text x="70.7923%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.39%)</title><rect x="70.5423%" y="485" width="0.3907%" height="15" fill="rgb(206,91,31)"/><text x="70.7923%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (17 samples, 0.27%)</title><rect x="70.6673%" y="469" width="0.2657%" height="15" fill="rgb(211,154,13)"/><text x="70.9173%" y="479.50"></text></g><g><title>_int_malloc (253 samples, 3.95%)</title><rect x="72.3707%" y="405" width="3.9537%" height="15" fill="rgb(225,148,7)"/><text x="72.6207%" y="415.50">_int..</text></g><g><title>__GI___libc_malloc (344 samples, 5.38%)</title><rect x="70.9642%" y="421" width="5.3758%" height="15" fill="rgb(220,160,43)"/><text x="71.2142%" y="431.50">__GI___..</text></g><g><title>__rdl_alloc (22 samples, 0.34%)</title><rect x="76.3401%" y="421" width="0.3438%" height="15" fill="rgb(213,52,39)"/><text x="76.5901%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (22 samples, 0.34%)</title><rect x="76.3401%" y="405" width="0.3438%" height="15" fill="rgb(243,137,7)"/><text x="76.5901%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (550 samples, 8.60%)</title><rect x="68.4013%" y="613" width="8.5951%" height="15" fill="rgb(230,79,13)"/><text x="68.6513%" y="623.50">&lt;core::iter:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (438 samples, 6.84%)</title><rect x="70.1516%" y="597" width="6.8448%" height="15" fill="rgb(247,105,23)"/><text x="70.4016%" y="607.50">&lt;alloc::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (430 samples, 6.72%)</title><rect x="70.2766%" y="581" width="6.7198%" height="15" fill="rgb(223,179,41)"/><text x="70.5266%" y="591.50">&lt;alloc::v..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (420 samples, 6.56%)</title><rect x="70.4329%" y="565" width="6.5635%" height="15" fill="rgb(218,9,34)"/><text x="70.6829%" y="575.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (413 samples, 6.45%)</title><rect x="70.5423%" y="549" width="6.4541%" height="15" fill="rgb(222,106,8)"/><text x="70.7923%" y="559.50">alloc::s..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (388 samples, 6.06%)</title><rect x="70.9330%" y="533" width="6.0634%" height="15" fill="rgb(211,220,0)"/><text x="71.1830%" y="543.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (388 samples, 6.06%)</title><rect x="70.9330%" y="517" width="6.0634%" height="15" fill="rgb(229,52,16)"/><text x="71.1830%" y="527.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (388 samples, 6.06%)</title><rect x="70.9330%" y="501" width="6.0634%" height="15" fill="rgb(212,155,18)"/><text x="71.1830%" y="511.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (388 samples, 6.06%)</title><rect x="70.9330%" y="485" width="6.0634%" height="15" fill="rgb(242,21,14)"/><text x="71.1830%" y="495.50">alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (388 samples, 6.06%)</title><rect x="70.9330%" y="469" width="6.0634%" height="15" fill="rgb(222,19,48)"/><text x="71.1830%" y="479.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (388 samples, 6.06%)</title><rect x="70.9330%" y="453" width="6.0634%" height="15" fill="rgb(232,45,27)"/><text x="71.1830%" y="463.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (388 samples, 6.06%)</title><rect x="70.9330%" y="437" width="6.0634%" height="15" fill="rgb(249,103,42)"/><text x="71.1830%" y="447.50">alloc::a..</text></g><g><title>__rust_alloc (20 samples, 0.31%)</title><rect x="76.6839%" y="421" width="0.3125%" height="15" fill="rgb(246,81,33)"/><text x="76.9339%" y="431.50"></text></g><g><title>__GI___libc_malloc (62 samples, 0.97%)</title><rect x="76.9964%" y="613" width="0.9689%" height="15" fill="rgb(252,33,42)"/><text x="77.2464%" y="623.50"></text></g><g><title>_int_malloc (34 samples, 0.53%)</title><rect x="77.4340%" y="597" width="0.5313%" height="15" fill="rgb(209,212,41)"/><text x="77.6840%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (7 samples, 0.11%)</title><rect x="77.8559%" y="581" width="0.1094%" height="15" fill="rgb(207,154,6)"/><text x="78.1059%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (618 samples, 9.66%)</title><rect x="68.3232%" y="629" width="9.6578%" height="15" fill="rgb(223,64,47)"/><text x="68.5732%" y="639.50">&lt;alloc::vec::V..</text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (8 samples, 0.13%)</title><rect x="77.9809%" y="629" width="0.1250%" height="15" fill="rgb(211,161,38)"/><text x="78.2309%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (636 samples, 9.94%)</title><rect x="68.1825%" y="645" width="9.9391%" height="15" fill="rgb(219,138,40)"/><text x="68.4325%" y="655.50">&lt;alloc::vec::V..</text></g><g><title>_int_malloc (54 samples, 0.84%)</title><rect x="79.1686%" y="421" width="0.8439%" height="15" fill="rgb(241,228,46)"/><text x="79.4186%" y="431.50"></text></g><g><title>__GI___libc_malloc (81 samples, 1.27%)</title><rect x="78.7623%" y="437" width="1.2658%" height="15" fill="rgb(223,209,38)"/><text x="79.0123%" y="447.50"></text></g><g><title>__rdl_alloc (7 samples, 0.11%)</title><rect x="80.0281%" y="437" width="0.1094%" height="15" fill="rgb(236,164,45)"/><text x="80.2781%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.11%)</title><rect x="80.0281%" y="421" width="0.1094%" height="15" fill="rgb(231,15,5)"/><text x="80.2781%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (105 samples, 1.64%)</title><rect x="78.5123%" y="613" width="1.6409%" height="15" fill="rgb(252,35,15)"/><text x="78.7623%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (99 samples, 1.55%)</title><rect x="78.6060%" y="597" width="1.5471%" height="15" fill="rgb(248,181,18)"/><text x="78.8560%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (99 samples, 1.55%)</title><rect x="78.6060%" y="581" width="1.5471%" height="15" fill="rgb(233,39,42)"/><text x="78.8560%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (97 samples, 1.52%)</title><rect x="78.6373%" y="565" width="1.5159%" height="15" fill="rgb(238,110,33)"/><text x="78.8873%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (92 samples, 1.44%)</title><rect x="78.7154%" y="549" width="1.4377%" height="15" fill="rgb(233,195,10)"/><text x="78.9654%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (92 samples, 1.44%)</title><rect x="78.7154%" y="533" width="1.4377%" height="15" fill="rgb(254,105,3)"/><text x="78.9654%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (92 samples, 1.44%)</title><rect x="78.7154%" y="517" width="1.4377%" height="15" fill="rgb(221,225,9)"/><text x="78.9654%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (92 samples, 1.44%)</title><rect x="78.7154%" y="501" width="1.4377%" height="15" fill="rgb(224,227,45)"/><text x="78.9654%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (92 samples, 1.44%)</title><rect x="78.7154%" y="485" width="1.4377%" height="15" fill="rgb(229,198,43)"/><text x="78.9654%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (92 samples, 1.44%)</title><rect x="78.7154%" y="469" width="1.4377%" height="15" fill="rgb(206,209,35)"/><text x="78.9654%" y="479.50"></text></g><g><title>alloc::alloc::alloc (92 samples, 1.44%)</title><rect x="78.7154%" y="453" width="1.4377%" height="15" fill="rgb(245,195,53)"/><text x="78.9654%" y="463.50"></text></g><g><title>__GI___libc_malloc (97 samples, 1.52%)</title><rect x="80.1531%" y="613" width="1.5159%" height="15" fill="rgb(240,92,26)"/><text x="80.4031%" y="623.50"></text></g><g><title>_int_malloc (61 samples, 0.95%)</title><rect x="80.7157%" y="597" width="0.9533%" height="15" fill="rgb(207,40,23)"/><text x="80.9657%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (873 samples, 13.64%)</title><rect x="68.1513%" y="661" width="13.6428%" height="15" fill="rgb(223,111,35)"/><text x="68.4013%" y="671.50">&lt;hashbrown::raw::RawT..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (235 samples, 3.67%)</title><rect x="78.1216%" y="645" width="3.6724%" height="15" fill="rgb(229,147,28)"/><text x="78.3716%" y="655.50">&lt;has..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (233 samples, 3.64%)</title><rect x="78.1528%" y="629" width="3.6412%" height="15" fill="rgb(211,29,28)"/><text x="78.4028%" y="639.50">&lt;has..</text></g><g><title>__GI___libc_free (11 samples, 0.17%)</title><rect x="81.9816%" y="613" width="0.1719%" height="15" fill="rgb(228,72,33)"/><text x="82.2316%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 1.20%)</title><rect x="81.7940%" y="629" width="1.2033%" height="15" fill="rgb(205,214,31)"/><text x="82.0440%" y="639.50"></text></g><g><title>_int_free (49 samples, 0.77%)</title><rect x="82.2316%" y="613" width="0.7657%" height="15" fill="rgb(224,111,15)"/><text x="82.4816%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (174 samples, 2.72%)</title><rect x="81.7940%" y="645" width="2.7192%" height="15" fill="rgb(253,21,26)"/><text x="82.0440%" y="655.50">&lt;h..</text></g><g><title>_int_free (97 samples, 1.52%)</title><rect x="82.9973%" y="629" width="1.5159%" height="15" fill="rgb(245,139,43)"/><text x="83.2473%" y="639.50"></text></g><g><title>malloc_consolidate (97 samples, 1.52%)</title><rect x="82.9973%" y="613" width="1.5159%" height="15" fill="rgb(252,170,7)"/><text x="83.2473%" y="623.50"></text></g><g><title>unlink_chunk.constprop.0 (30 samples, 0.47%)</title><rect x="84.0444%" y="597" width="0.4688%" height="15" fill="rgb(231,118,14)"/><text x="84.2944%" y="607.50"></text></g><g><title>__GI___libc_free (38 samples, 0.59%)</title><rect x="84.8414%" y="613" width="0.5938%" height="15" fill="rgb(238,83,0)"/><text x="85.0914%" y="623.50"></text></g><g><title>_int_free (111 samples, 1.73%)</title><rect x="85.5134%" y="613" width="1.7346%" height="15" fill="rgb(221,39,39)"/><text x="85.7634%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (379 samples, 5.92%)</title><rect x="81.7940%" y="661" width="5.9228%" height="15" fill="rgb(222,119,46)"/><text x="82.0440%" y="671.50">&lt;hashbro..</text></g><g><title>core::ptr::drop_in_place (202 samples, 3.16%)</title><rect x="84.5601%" y="645" width="3.1567%" height="15" fill="rgb(222,165,49)"/><text x="84.8101%" y="655.50">cor..</text></g><g><title>core::ptr::drop_in_place (199 samples, 3.11%)</title><rect x="84.6070%" y="629" width="3.1099%" height="15" fill="rgb(219,113,52)"/><text x="84.8570%" y="639.50">cor..</text></g><g><title>core::ptr::drop_in_place (30 samples, 0.47%)</title><rect x="87.2480%" y="613" width="0.4688%" height="15" fill="rgb(214,7,15)"/><text x="87.4980%" y="623.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (15 samples, 0.23%)</title><rect x="87.7481%" y="661" width="0.2344%" height="15" fill="rgb(235,32,4)"/><text x="87.9981%" y="671.50"></text></g><g><title>decor_mem::select::get_value_for_rows (10 samples, 0.16%)</title><rect x="87.8262%" y="645" width="0.1563%" height="15" fill="rgb(238,90,54)"/><text x="88.0762%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.13%)</title><rect x="87.8575%" y="629" width="0.1250%" height="15" fill="rgb(213,208,19)"/><text x="88.1075%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.11%)</title><rect x="87.8731%" y="613" width="0.1094%" height="15" fill="rgb(233,156,4)"/><text x="88.1231%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.11%)</title><rect x="87.8731%" y="597" width="0.1094%" height="15" fill="rgb(207,194,5)"/><text x="88.1231%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.11%)</title><rect x="87.8731%" y="581" width="0.1094%" height="15" fill="rgb(206,111,30)"/><text x="88.1231%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (2,031 samples, 31.74%)</title><rect x="56.3213%" y="693" width="31.7393%" height="15" fill="rgb(243,70,54)"/><text x="56.5713%" y="703.50">decor_mem::query_transformer::QueryTransformer::iss..</text></g><g><title>decor_mem::views::Views::update (1,274 samples, 19.91%)</title><rect x="68.1513%" y="677" width="19.9094%" height="15" fill="rgb(242,28,8)"/><text x="68.4013%" y="687.50">decor_mem::views::Views::update</text></g><g><title>sql_parser::tokenizer::Token::make_word (20 samples, 0.31%)</title><rect x="88.4357%" y="629" width="0.3125%" height="15" fill="rgb(219,106,18)"/><text x="88.6857%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.11%)</title><rect x="88.6388%" y="613" width="0.1094%" height="15" fill="rgb(244,222,10)"/><text x="88.8888%" y="623.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (26 samples, 0.41%)</title><rect x="88.3732%" y="645" width="0.4063%" height="15" fill="rgb(236,179,52)"/><text x="88.6232%" y="655.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (48 samples, 0.75%)</title><rect x="88.0606%" y="693" width="0.7501%" height="15" fill="rgb(213,23,39)"/><text x="88.3106%" y="703.50"></text></g><g><title>sql_parser::parser::parse_statements (42 samples, 0.66%)</title><rect x="88.1544%" y="677" width="0.6564%" height="15" fill="rgb(238,48,10)"/><text x="88.4044%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (34 samples, 0.53%)</title><rect x="88.2794%" y="661" width="0.5313%" height="15" fill="rgb(251,196,23)"/><text x="88.5294%" y="671.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (2,086 samples, 32.60%)</title><rect x="56.2588%" y="725" width="32.5988%" height="15" fill="rgb(250,152,24)"/><text x="56.5088%" y="735.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (2,082 samples, 32.54%)</title><rect x="56.3213%" y="709" width="32.5363%" height="15" fill="rgb(209,150,17)"/><text x="56.5713%" y="719.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>sql_parser::parser::Parser::parse_infix (7 samples, 0.11%)</title><rect x="88.9670%" y="709" width="0.1094%" height="15" fill="rgb(234,202,34)"/><text x="89.2170%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (7 samples, 0.11%)</title><rect x="88.9670%" y="693" width="0.1094%" height="15" fill="rgb(253,148,53)"/><text x="89.2170%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (27 samples, 0.42%)</title><rect x="89.1702%" y="549" width="0.4219%" height="15" fill="rgb(218,129,16)"/><text x="89.4202%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (27 samples, 0.42%)</title><rect x="89.1702%" y="533" width="0.4219%" height="15" fill="rgb(216,85,19)"/><text x="89.4202%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (27 samples, 0.42%)</title><rect x="89.1702%" y="517" width="0.4219%" height="15" fill="rgb(235,228,7)"/><text x="89.4202%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.42%)</title><rect x="89.1702%" y="501" width="0.4219%" height="15" fill="rgb(245,175,0)"/><text x="89.4202%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.42%)</title><rect x="89.1702%" y="485" width="0.4219%" height="15" fill="rgb(208,168,36)"/><text x="89.4202%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 0.44%)</title><rect x="89.1702%" y="613" width="0.4376%" height="15" fill="rgb(246,171,24)"/><text x="89.4202%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.44%)</title><rect x="89.1702%" y="597" width="0.4376%" height="15" fill="rgb(215,142,24)"/><text x="89.4202%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.44%)</title><rect x="89.1702%" y="581" width="0.4376%" height="15" fill="rgb(250,187,7)"/><text x="89.4202%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.44%)</title><rect x="89.1702%" y="565" width="0.4376%" height="15" fill="rgb(228,66,33)"/><text x="89.4202%" y="575.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (30 samples, 0.47%)</title><rect x="89.1702%" y="645" width="0.4688%" height="15" fill="rgb(234,215,21)"/><text x="89.4202%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::expected (30 samples, 0.47%)</title><rect x="89.1702%" y="629" width="0.4688%" height="15" fill="rgb(222,191,20)"/><text x="89.4202%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (36 samples, 0.56%)</title><rect x="89.1233%" y="693" width="0.5626%" height="15" fill="rgb(245,79,54)"/><text x="89.3733%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 0.56%)</title><rect x="89.1233%" y="677" width="0.5626%" height="15" fill="rgb(240,10,37)"/><text x="89.3733%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (36 samples, 0.56%)</title><rect x="89.1233%" y="661" width="0.5626%" height="15" fill="rgb(214,192,32)"/><text x="89.3733%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (22 samples, 0.34%)</title><rect x="89.6859%" y="677" width="0.3438%" height="15" fill="rgb(209,36,54)"/><text x="89.9359%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (17 samples, 0.27%)</title><rect x="89.7640%" y="661" width="0.2657%" height="15" fill="rgb(220,10,11)"/><text x="90.0140%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (80 samples, 1.25%)</title><rect x="88.9670%" y="725" width="1.2502%" height="15" fill="rgb(221,106,17)"/><text x="89.2170%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (70 samples, 1.09%)</title><rect x="89.1233%" y="709" width="1.0939%" height="15" fill="rgb(251,142,44)"/><text x="89.3733%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (34 samples, 0.53%)</title><rect x="89.6859%" y="693" width="0.5313%" height="15" fill="rgb(238,13,15)"/><text x="89.9359%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (12 samples, 0.19%)</title><rect x="90.0297%" y="677" width="0.1875%" height="15" fill="rgb(208,107,27)"/><text x="90.2797%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (11 samples, 0.17%)</title><rect x="90.0453%" y="661" width="0.1719%" height="15" fill="rgb(205,136,37)"/><text x="90.2953%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (9 samples, 0.14%)</title><rect x="90.2797%" y="709" width="0.1406%" height="15" fill="rgb(250,205,27)"/><text x="90.5297%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (9 samples, 0.14%)</title><rect x="90.2797%" y="693" width="0.1406%" height="15" fill="rgb(210,80,43)"/><text x="90.5297%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (9 samples, 0.14%)</title><rect x="90.2797%" y="677" width="0.1406%" height="15" fill="rgb(247,160,36)"/><text x="90.5297%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (9 samples, 0.14%)</title><rect x="90.2797%" y="661" width="0.1406%" height="15" fill="rgb(234,13,49)"/><text x="90.5297%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::expected (9 samples, 0.14%)</title><rect x="90.2797%" y="645" width="0.1406%" height="15" fill="rgb(234,122,0)"/><text x="90.5297%" y="655.50"></text></g><g><title>alloc::fmt::format (7 samples, 0.11%)</title><rect x="90.3110%" y="629" width="0.1094%" height="15" fill="rgb(207,146,38)"/><text x="90.5610%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.11%)</title><rect x="90.3110%" y="613" width="0.1094%" height="15" fill="rgb(207,177,25)"/><text x="90.5610%" y="623.50"></text></g><g><title>core::fmt::write (7 samples, 0.11%)</title><rect x="90.3110%" y="597" width="0.1094%" height="15" fill="rgb(211,178,42)"/><text x="90.5610%" y="607.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (15 samples, 0.23%)</title><rect x="90.2797%" y="725" width="0.2344%" height="15" fill="rgb(230,69,54)"/><text x="90.5297%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (12 samples, 0.19%)</title><rect x="90.6704%" y="677" width="0.1875%" height="15" fill="rgb(214,135,41)"/><text x="90.9204%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (13 samples, 0.20%)</title><rect x="91.0767%" y="661" width="0.2032%" height="15" fill="rgb(237,67,25)"/><text x="91.3267%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (52 samples, 0.81%)</title><rect x="90.5610%" y="725" width="0.8126%" height="15" fill="rgb(222,189,50)"/><text x="90.8110%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (52 samples, 0.81%)</title><rect x="90.5610%" y="709" width="0.8126%" height="15" fill="rgb(245,148,34)"/><text x="90.8110%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (49 samples, 0.77%)</title><rect x="90.6079%" y="693" width="0.7657%" height="15" fill="rgb(222,29,6)"/><text x="90.8579%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (33 samples, 0.52%)</title><rect x="90.8579%" y="677" width="0.5157%" height="15" fill="rgb(221,189,43)"/><text x="91.1079%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (13 samples, 0.20%)</title><rect x="91.4674%" y="677" width="0.2032%" height="15" fill="rgb(207,36,27)"/><text x="91.7174%" y="687.50"></text></g><g><title>sql_parser::parser::parse_statements (20 samples, 0.31%)</title><rect x="91.3737%" y="725" width="0.3125%" height="15" fill="rgb(217,90,24)"/><text x="91.6237%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (20 samples, 0.31%)</title><rect x="91.3737%" y="709" width="0.3125%" height="15" fill="rgb(224,66,35)"/><text x="91.6237%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (20 samples, 0.31%)</title><rect x="91.3737%" y="693" width="0.3125%" height="15" fill="rgb(221,13,50)"/><text x="91.6237%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.11%)</title><rect x="91.8425%" y="581" width="0.1094%" height="15" fill="rgb(236,68,49)"/><text x="92.0925%" y="591.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 0.17%)</title><rect x="91.7956%" y="725" width="0.1719%" height="15" fill="rgb(229,146,28)"/><text x="92.0456%" y="735.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 0.17%)</title><rect x="91.7956%" y="709" width="0.1719%" height="15" fill="rgb(225,31,38)"/><text x="92.0456%" y="719.50"></text></g><g><title>std::panicking::try (11 samples, 0.17%)</title><rect x="91.7956%" y="693" width="0.1719%" height="15" fill="rgb(250,208,3)"/><text x="92.0456%" y="703.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 0.17%)</title><rect x="91.7956%" y="677" width="0.1719%" height="15" fill="rgb(246,54,23)"/><text x="92.0456%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 0.17%)</title><rect x="91.7956%" y="661" width="0.1719%" height="15" fill="rgb(243,76,11)"/><text x="92.0456%" y="671.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11 samples, 0.17%)</title><rect x="91.7956%" y="645" width="0.1719%" height="15" fill="rgb(245,21,50)"/><text x="92.0456%" y="655.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 0.17%)</title><rect x="91.7956%" y="629" width="0.1719%" height="15" fill="rgb(228,9,43)"/><text x="92.0456%" y="639.50"></text></g><g><title>lobsters_microbenchmarks::main (11 samples, 0.17%)</title><rect x="91.7956%" y="613" width="0.1719%" height="15" fill="rgb(208,100,47)"/><text x="92.0456%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::queriers::comment::post_comment (8 samples, 0.13%)</title><rect x="91.8425%" y="597" width="0.1250%" height="15" fill="rgb(232,26,8)"/><text x="92.0925%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.11%)</title><rect x="91.9675%" y="725" width="0.1094%" height="15" fill="rgb(216,166,38)"/><text x="92.2175%" y="735.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (7 samples, 0.11%)</title><rect x="91.9675%" y="709" width="0.1094%" height="15" fill="rgb(251,202,51)"/><text x="92.2175%" y="719.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (7 samples, 0.11%)</title><rect x="91.9675%" y="693" width="0.1094%" height="15" fill="rgb(254,216,34)"/><text x="92.2175%" y="703.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (7 samples, 0.11%)</title><rect x="91.9675%" y="677" width="0.1094%" height="15" fill="rgb(251,32,27)"/><text x="92.2175%" y="687.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (7 samples, 0.11%)</title><rect x="91.9675%" y="661" width="0.1094%" height="15" fill="rgb(208,127,28)"/><text x="92.2175%" y="671.50"></text></g><g><title>[unknown] (5,183 samples, 81.00%)</title><rect x="11.1580%" y="741" width="80.9970%" height="15" fill="rgb(224,137,22)"/><text x="11.4080%" y="751.50">[unknown]</text></g><g><title>_int_free (41 samples, 0.64%)</title><rect x="92.5301%" y="565" width="0.6407%" height="15" fill="rgb(254,70,32)"/><text x="92.7801%" y="575.50"></text></g><g><title>malloc_consolidate (35 samples, 0.55%)</title><rect x="92.6238%" y="549" width="0.5470%" height="15" fill="rgb(229,75,37)"/><text x="92.8738%" y="559.50"></text></g><g><title>unlink_chunk.constprop.0 (8 samples, 0.13%)</title><rect x="93.0458%" y="533" width="0.1250%" height="15" fill="rgb(252,64,23)"/><text x="93.2958%" y="543.50"></text></g><g><title>decor_mem::helpers::parser_val_to_common_val (12 samples, 0.19%)</title><rect x="93.1708%" y="565" width="0.1875%" height="15" fill="rgb(232,162,48)"/><text x="93.4208%" y="575.50"></text></g><g><title>msql_srv::resultset::QueryResultWriter&lt;W&gt;::start (7 samples, 0.11%)</title><rect x="93.3583%" y="565" width="0.1094%" height="15" fill="rgb(246,160,12)"/><text x="93.6083%" y="575.50"></text></g><g><title>alloc::fmt::format (13 samples, 0.20%)</title><rect x="93.6396%" y="517" width="0.2032%" height="15" fill="rgb(247,166,0)"/><text x="93.8896%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (12 samples, 0.19%)</title><rect x="93.6553%" y="501" width="0.1875%" height="15" fill="rgb(249,219,21)"/><text x="93.9053%" y="511.50"></text></g><g><title>core::fmt::write (10 samples, 0.16%)</title><rect x="93.6865%" y="485" width="0.1563%" height="15" fill="rgb(205,209,3)"/><text x="93.9365%" y="495.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (7 samples, 0.11%)</title><rect x="93.7334%" y="469" width="0.1094%" height="15" fill="rgb(243,44,1)"/><text x="93.9834%" y="479.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (109 samples, 1.70%)</title><rect x="92.2957%" y="581" width="1.7034%" height="15" fill="rgb(206,159,16)"/><text x="92.5457%" y="591.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (30 samples, 0.47%)</title><rect x="93.5302%" y="565" width="0.4688%" height="15" fill="rgb(244,77,30)"/><text x="93.7802%" y="575.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (30 samples, 0.47%)</title><rect x="93.5302%" y="549" width="0.4688%" height="15" fill="rgb(218,69,12)"/><text x="93.7802%" y="559.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (28 samples, 0.44%)</title><rect x="93.5615%" y="533" width="0.4376%" height="15" fill="rgb(212,87,7)"/><text x="93.8115%" y="543.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (117 samples, 1.83%)</title><rect x="92.2019%" y="597" width="1.8284%" height="15" fill="rgb(245,114,25)"/><text x="92.4519%" y="607.50">&lt;..</text></g><g><title>core::ptr::drop_in_place (13 samples, 0.20%)</title><rect x="94.0303%" y="597" width="0.2032%" height="15" fill="rgb(210,61,42)"/><text x="94.2803%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.20%)</title><rect x="94.0303%" y="581" width="0.2032%" height="15" fill="rgb(211,52,33)"/><text x="94.2803%" y="591.50"></text></g><g><title>sk_wait_data (18 samples, 0.28%)</title><rect x="94.4366%" y="389" width="0.2813%" height="15" fill="rgb(234,58,33)"/><text x="94.6866%" y="399.50"></text></g><g><title>wait_woken (17 samples, 0.27%)</title><rect x="94.4523%" y="373" width="0.2657%" height="15" fill="rgb(220,115,36)"/><text x="94.7023%" y="383.50"></text></g><g><title>schedule_timeout (16 samples, 0.25%)</title><rect x="94.4679%" y="357" width="0.2500%" height="15" fill="rgb(243,153,54)"/><text x="94.7179%" y="367.50"></text></g><g><title>schedule (16 samples, 0.25%)</title><rect x="94.4679%" y="341" width="0.2500%" height="15" fill="rgb(251,47,18)"/><text x="94.7179%" y="351.50"></text></g><g><title>__schedule (16 samples, 0.25%)</title><rect x="94.4679%" y="325" width="0.2500%" height="15" fill="rgb(242,102,42)"/><text x="94.7179%" y="335.50"></text></g><g><title>do_syscall_64 (30 samples, 0.47%)</title><rect x="94.2647%" y="469" width="0.4688%" height="15" fill="rgb(234,31,38)"/><text x="94.5147%" y="479.50"></text></g><g><title>__x64_sys_recvfrom (30 samples, 0.47%)</title><rect x="94.2647%" y="453" width="0.4688%" height="15" fill="rgb(221,117,51)"/><text x="94.5147%" y="463.50"></text></g><g><title>__sys_recvfrom (30 samples, 0.47%)</title><rect x="94.2647%" y="437" width="0.4688%" height="15" fill="rgb(212,20,18)"/><text x="94.5147%" y="447.50"></text></g><g><title>inet_recvmsg (29 samples, 0.45%)</title><rect x="94.2804%" y="421" width="0.4532%" height="15" fill="rgb(245,133,36)"/><text x="94.5304%" y="431.50"></text></g><g><title>tcp_recvmsg (29 samples, 0.45%)</title><rect x="94.2804%" y="405" width="0.4532%" height="15" fill="rgb(212,6,19)"/><text x="94.5304%" y="415.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (33 samples, 0.52%)</title><rect x="94.2335%" y="597" width="0.5157%" height="15" fill="rgb(218,1,36)"/><text x="94.4835%" y="607.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (33 samples, 0.52%)</title><rect x="94.2335%" y="581" width="0.5157%" height="15" fill="rgb(246,84,54)"/><text x="94.4835%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (33 samples, 0.52%)</title><rect x="94.2335%" y="565" width="0.5157%" height="15" fill="rgb(242,110,6)"/><text x="94.4835%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::read (33 samples, 0.52%)</title><rect x="94.2335%" y="549" width="0.5157%" height="15" fill="rgb(214,47,5)"/><text x="94.4835%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::read (33 samples, 0.52%)</title><rect x="94.2335%" y="533" width="0.5157%" height="15" fill="rgb(218,159,25)"/><text x="94.4835%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (33 samples, 0.52%)</title><rect x="94.2335%" y="517" width="0.5157%" height="15" fill="rgb(215,211,28)"/><text x="94.4835%" y="527.50"></text></g><g><title>__libc_recv (33 samples, 0.52%)</title><rect x="94.2335%" y="501" width="0.5157%" height="15" fill="rgb(238,59,32)"/><text x="94.4835%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (33 samples, 0.52%)</title><rect x="94.2335%" y="485" width="0.5157%" height="15" fill="rgb(226,82,3)"/><text x="94.4835%" y="495.50"></text></g><g><title>enqueue_task (7 samples, 0.11%)</title><rect x="95.1242%" y="37" width="0.1094%" height="15" fill="rgb(240,164,32)"/><text x="95.3742%" y="47.50"></text></g><g><title>sock_def_readable (14 samples, 0.22%)</title><rect x="95.0930%" y="101" width="0.2188%" height="15" fill="rgb(232,46,7)"/><text x="95.3430%" y="111.50"></text></g><g><title>__wake_up_common_lock (14 samples, 0.22%)</title><rect x="95.0930%" y="85" width="0.2188%" height="15" fill="rgb(229,129,53)"/><text x="95.3430%" y="95.50"></text></g><g><title>__wake_up_common (14 samples, 0.22%)</title><rect x="95.0930%" y="69" width="0.2188%" height="15" fill="rgb(234,188,29)"/><text x="95.3430%" y="79.50"></text></g><g><title>try_to_wake_up (12 samples, 0.19%)</title><rect x="95.1242%" y="53" width="0.1875%" height="15" fill="rgb(246,141,4)"/><text x="95.3742%" y="63.50"></text></g><g><title>__ip_queue_xmit (35 samples, 0.55%)</title><rect x="94.8586%" y="373" width="0.5470%" height="15" fill="rgb(229,23,39)"/><text x="95.1086%" y="383.50"></text></g><g><title>ip_output (35 samples, 0.55%)</title><rect x="94.8586%" y="357" width="0.5470%" height="15" fill="rgb(206,12,3)"/><text x="95.1086%" y="367.50"></text></g><g><title>ip_finish_output2 (35 samples, 0.55%)</title><rect x="94.8586%" y="341" width="0.5470%" height="15" fill="rgb(252,226,20)"/><text x="95.1086%" y="351.50"></text></g><g><title>__local_bh_enable_ip (29 samples, 0.45%)</title><rect x="94.9523%" y="325" width="0.4532%" height="15" fill="rgb(216,123,35)"/><text x="95.2023%" y="335.50"></text></g><g><title>do_softirq (29 samples, 0.45%)</title><rect x="94.9523%" y="309" width="0.4532%" height="15" fill="rgb(212,68,40)"/><text x="95.2023%" y="319.50"></text></g><g><title>do_softirq_own_stack (28 samples, 0.44%)</title><rect x="94.9680%" y="293" width="0.4376%" height="15" fill="rgb(254,125,32)"/><text x="95.2180%" y="303.50"></text></g><g><title>__do_softirq (28 samples, 0.44%)</title><rect x="94.9680%" y="277" width="0.4376%" height="15" fill="rgb(253,97,22)"/><text x="95.2180%" y="287.50"></text></g><g><title>net_rx_action (28 samples, 0.44%)</title><rect x="94.9680%" y="261" width="0.4376%" height="15" fill="rgb(241,101,14)"/><text x="95.2180%" y="271.50"></text></g><g><title>process_backlog (28 samples, 0.44%)</title><rect x="94.9680%" y="245" width="0.4376%" height="15" fill="rgb(238,103,29)"/><text x="95.2180%" y="255.50"></text></g><g><title>__netif_receive_skb_one_core (26 samples, 0.41%)</title><rect x="94.9992%" y="229" width="0.4063%" height="15" fill="rgb(233,195,47)"/><text x="95.2492%" y="239.50"></text></g><g><title>ip_rcv (23 samples, 0.36%)</title><rect x="95.0461%" y="213" width="0.3594%" height="15" fill="rgb(246,218,30)"/><text x="95.2961%" y="223.50"></text></g><g><title>ip_local_deliver (23 samples, 0.36%)</title><rect x="95.0461%" y="197" width="0.3594%" height="15" fill="rgb(219,145,47)"/><text x="95.2961%" y="207.50"></text></g><g><title>ip_local_deliver_finish (23 samples, 0.36%)</title><rect x="95.0461%" y="181" width="0.3594%" height="15" fill="rgb(243,12,26)"/><text x="95.2961%" y="191.50"></text></g><g><title>ip_protocol_deliver_rcu (23 samples, 0.36%)</title><rect x="95.0461%" y="165" width="0.3594%" height="15" fill="rgb(214,87,16)"/><text x="95.2961%" y="175.50"></text></g><g><title>tcp_v4_rcv (23 samples, 0.36%)</title><rect x="95.0461%" y="149" width="0.3594%" height="15" fill="rgb(208,99,42)"/><text x="95.2961%" y="159.50"></text></g><g><title>tcp_v4_do_rcv (21 samples, 0.33%)</title><rect x="95.0774%" y="133" width="0.3282%" height="15" fill="rgb(253,99,2)"/><text x="95.3274%" y="143.50"></text></g><g><title>tcp_rcv_established (21 samples, 0.33%)</title><rect x="95.0774%" y="117" width="0.3282%" height="15" fill="rgb(220,168,23)"/><text x="95.3274%" y="127.50"></text></g><g><title>__tcp_transmit_skb (38 samples, 0.59%)</title><rect x="94.8429%" y="389" width="0.5938%" height="15" fill="rgb(242,38,24)"/><text x="95.0929%" y="399.50"></text></g><g><title>__tcp_push_pending_frames (40 samples, 0.63%)</title><rect x="94.8429%" y="421" width="0.6251%" height="15" fill="rgb(225,182,9)"/><text x="95.0929%" y="431.50"></text></g><g><title>tcp_write_xmit (40 samples, 0.63%)</title><rect x="94.8429%" y="405" width="0.6251%" height="15" fill="rgb(243,178,37)"/><text x="95.0929%" y="415.50"></text></g><g><title>do_syscall_64 (45 samples, 0.70%)</title><rect x="94.7804%" y="517" width="0.7032%" height="15" fill="rgb(232,139,19)"/><text x="95.0304%" y="527.50"></text></g><g><title>__x64_sys_sendto (44 samples, 0.69%)</title><rect x="94.7961%" y="501" width="0.6876%" height="15" fill="rgb(225,201,24)"/><text x="95.0461%" y="511.50"></text></g><g><title>__sys_sendto (44 samples, 0.69%)</title><rect x="94.7961%" y="485" width="0.6876%" height="15" fill="rgb(221,47,46)"/><text x="95.0461%" y="495.50"></text></g><g><title>sock_sendmsg (44 samples, 0.69%)</title><rect x="94.7961%" y="469" width="0.6876%" height="15" fill="rgb(249,23,13)"/><text x="95.0461%" y="479.50"></text></g><g><title>tcp_sendmsg (44 samples, 0.69%)</title><rect x="94.7961%" y="453" width="0.6876%" height="15" fill="rgb(219,9,5)"/><text x="95.0461%" y="463.50"></text></g><g><title>tcp_sendmsg_locked (43 samples, 0.67%)</title><rect x="94.8117%" y="437" width="0.6720%" height="15" fill="rgb(254,171,16)"/><text x="95.0617%" y="447.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (50 samples, 0.78%)</title><rect x="94.7648%" y="581" width="0.7814%" height="15" fill="rgb(230,171,20)"/><text x="95.0148%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::write (50 samples, 0.78%)</title><rect x="94.7648%" y="565" width="0.7814%" height="15" fill="rgb(210,71,41)"/><text x="95.0148%" y="575.50"></text></g><g><title>__libc_send (50 samples, 0.78%)</title><rect x="94.7648%" y="549" width="0.7814%" height="15" fill="rgb(206,173,20)"/><text x="95.0148%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (50 samples, 0.78%)</title><rect x="94.7648%" y="533" width="0.7814%" height="15" fill="rgb(233,88,34)"/><text x="95.0148%" y="543.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (217 samples, 3.39%)</title><rect x="92.1707%" y="613" width="3.3912%" height="15" fill="rgb(223,209,46)"/><text x="92.4207%" y="623.50">msq..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (52 samples, 0.81%)</title><rect x="94.7492%" y="597" width="0.8126%" height="15" fill="rgb(250,43,18)"/><text x="94.9992%" y="607.50"></text></g><g><title>__GI___clone (220 samples, 3.44%)</title><rect x="92.1550%" y="741" width="3.4380%" height="15" fill="rgb(208,13,10)"/><text x="92.4050%" y="751.50">__G..</text></g><g><title>start_thread (220 samples, 3.44%)</title><rect x="92.1550%" y="725" width="3.4380%" height="15" fill="rgb(212,200,36)"/><text x="92.4050%" y="735.50">sta..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (219 samples, 3.42%)</title><rect x="92.1707%" y="709" width="3.4224%" height="15" fill="rgb(225,90,30)"/><text x="92.4207%" y="719.50">std..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (219 samples, 3.42%)</title><rect x="92.1707%" y="693" width="3.4224%" height="15" fill="rgb(236,182,39)"/><text x="92.4207%" y="703.50">&lt;al..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (219 samples, 3.42%)</title><rect x="92.1707%" y="677" width="3.4224%" height="15" fill="rgb(212,144,35)"/><text x="92.4207%" y="687.50">&lt;al..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (219 samples, 3.42%)</title><rect x="92.1707%" y="661" width="3.4224%" height="15" fill="rgb(228,63,44)"/><text x="92.4207%" y="671.50">cor..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (219 samples, 3.42%)</title><rect x="92.1707%" y="645" width="3.4224%" height="15" fill="rgb(228,109,6)"/><text x="92.4207%" y="655.50">std..</text></g><g><title>decor_mem::Shim::run_on_tcp (219 samples, 3.42%)</title><rect x="92.1707%" y="629" width="3.4224%" height="15" fill="rgb(238,117,24)"/><text x="92.4207%" y="639.50">dec..</text></g><g><title>do_syscall_64 (235 samples, 3.67%)</title><rect x="95.7650%" y="437" width="3.6724%" height="15" fill="rgb(242,26,26)"/><text x="96.0150%" y="447.50">do_s..</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 3.67%)</title><rect x="95.7650%" y="421" width="3.6724%" height="15" fill="rgb(221,92,48)"/><text x="96.0150%" y="431.50">__x6..</text></g><g><title>sched_setaffinity (235 samples, 3.67%)</title><rect x="95.7650%" y="405" width="3.6724%" height="15" fill="rgb(209,209,32)"/><text x="96.0150%" y="415.50">sche..</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 3.66%)</title><rect x="95.7806%" y="389" width="3.6568%" height="15" fill="rgb(221,70,22)"/><text x="96.0306%" y="399.50">__se..</text></g><g><title>stop_one_cpu (234 samples, 3.66%)</title><rect x="95.7806%" y="373" width="3.6568%" height="15" fill="rgb(248,145,5)"/><text x="96.0306%" y="383.50">stop..</text></g><g><title>cpu_stop_queue_work (234 samples, 3.66%)</title><rect x="95.7806%" y="357" width="3.6568%" height="15" fill="rgb(226,116,26)"/><text x="96.0306%" y="367.50">cpu_..</text></g><g><title>preempt_schedule_thunk (234 samples, 3.66%)</title><rect x="95.7806%" y="341" width="3.6568%" height="15" fill="rgb(244,5,17)"/><text x="96.0306%" y="351.50">pree..</text></g><g><title>preempt_schedule_common (234 samples, 3.66%)</title><rect x="95.7806%" y="325" width="3.6568%" height="15" fill="rgb(252,159,33)"/><text x="96.0306%" y="335.50">pree..</text></g><g><title>__schedule (234 samples, 3.66%)</title><rect x="95.7806%" y="309" width="3.6568%" height="15" fill="rgb(206,71,0)"/><text x="96.0306%" y="319.50">__sc..</text></g><g><title>finish_task_switch (234 samples, 3.66%)</title><rect x="95.7806%" y="293" width="3.6568%" height="15" fill="rgb(233,118,54)"/><text x="96.0306%" y="303.50">fini..</text></g><g><title>__perf_event_task_sched_in (234 samples, 3.66%)</title><rect x="95.7806%" y="277" width="3.6568%" height="15" fill="rgb(234,83,48)"/><text x="96.0306%" y="287.50">__pe..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (233 samples, 3.64%)</title><rect x="95.7962%" y="261" width="3.6412%" height="15" fill="rgb(228,3,54)"/><text x="96.0462%" y="271.50">__in..</text></g><g><title>native_write_msr (233 samples, 3.64%)</title><rect x="95.7962%" y="245" width="3.6412%" height="15" fill="rgb(226,155,13)"/><text x="96.0462%" y="255.50">nati..</text></g><g><title>__libc_start_main (238 samples, 3.72%)</title><rect x="95.7337%" y="725" width="3.7193%" height="15" fill="rgb(241,28,37)"/><text x="95.9837%" y="735.50">__li..</text></g><g><title>main (238 samples, 3.72%)</title><rect x="95.7337%" y="709" width="3.7193%" height="15" fill="rgb(233,93,10)"/><text x="95.9837%" y="719.50">main</text></g><g><title>std::rt::lang_start_internal (238 samples, 3.72%)</title><rect x="95.7337%" y="693" width="3.7193%" height="15" fill="rgb(225,113,19)"/><text x="95.9837%" y="703.50">std:..</text></g><g><title>std::panic::catch_unwind (238 samples, 3.72%)</title><rect x="95.7337%" y="677" width="3.7193%" height="15" fill="rgb(241,2,18)"/><text x="95.9837%" y="687.50">std:..</text></g><g><title>std::panicking::try (238 samples, 3.72%)</title><rect x="95.7337%" y="661" width="3.7193%" height="15" fill="rgb(228,207,21)"/><text x="95.9837%" y="671.50">std:..</text></g><g><title>std::panicking::try::do_call (238 samples, 3.72%)</title><rect x="95.7337%" y="645" width="3.7193%" height="15" fill="rgb(213,211,35)"/><text x="95.9837%" y="655.50">std:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (238 samples, 3.72%)</title><rect x="95.7337%" y="629" width="3.7193%" height="15" fill="rgb(209,83,10)"/><text x="95.9837%" y="639.50">core..</text></g><g><title>std::rt::lang_start::_{{closure}} (238 samples, 3.72%)</title><rect x="95.7337%" y="613" width="3.7193%" height="15" fill="rgb(209,164,1)"/><text x="95.9837%" y="623.50">std:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (238 samples, 3.72%)</title><rect x="95.7337%" y="597" width="3.7193%" height="15" fill="rgb(213,184,43)"/><text x="95.9837%" y="607.50">std:..</text></g><g><title>lobsters_microbenchmarks::main (238 samples, 3.72%)</title><rect x="95.7337%" y="581" width="3.7193%" height="15" fill="rgb(231,61,34)"/><text x="95.9837%" y="591.50">lobs..</text></g><g><title>hwloc::Topology::new (238 samples, 3.72%)</title><rect x="95.7337%" y="565" width="3.7193%" height="15" fill="rgb(235,75,3)"/><text x="95.9837%" y="575.50">hwlo..</text></g><g><title>hwloc_topology_load (238 samples, 3.72%)</title><rect x="95.7337%" y="549" width="3.7193%" height="15" fill="rgb(220,106,47)"/><text x="95.9837%" y="559.50">hwlo..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 3.72%)</title><rect x="95.7337%" y="533" width="3.7193%" height="15" fill="rgb(210,196,33)"/><text x="95.9837%" y="543.50">[lib..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 3.72%)</title><rect x="95.7337%" y="517" width="3.7193%" height="15" fill="rgb(229,154,42)"/><text x="95.9837%" y="527.50">[lib..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 3.72%)</title><rect x="95.7337%" y="501" width="3.7193%" height="15" fill="rgb(228,114,26)"/><text x="95.9837%" y="511.50">[lib..</text></g><g><title>hwloc_linux_set_tid_cpubind (238 samples, 3.72%)</title><rect x="95.7337%" y="485" width="3.7193%" height="15" fill="rgb(208,144,1)"/><text x="95.9837%" y="495.50">hwlo..</text></g><g><title>__GI___sched_setaffinity_new (236 samples, 3.69%)</title><rect x="95.7650%" y="469" width="3.6881%" height="15" fill="rgb(239,112,37)"/><text x="96.0150%" y="479.50">__GI..</text></g><g><title>entry_SYSCALL_64 (236 samples, 3.69%)</title><rect x="95.7650%" y="453" width="3.6881%" height="15" fill="rgb(210,96,50)"/><text x="96.0150%" y="463.50">entr..</text></g><g><title>_start (239 samples, 3.73%)</title><rect x="95.7337%" y="741" width="3.7350%" height="15" fill="rgb(222,178,2)"/><text x="95.9837%" y="751.50">_sta..</text></g><g><title>malloc_consolidate (16 samples, 0.25%)</title><rect x="99.5937%" y="741" width="0.2500%" height="15" fill="rgb(226,74,18)"/><text x="99.8437%" y="751.50"></text></g><g><title>lobsters-microb (6,393 samples, 99.91%)</title><rect x="0.0000%" y="757" width="99.9062%" height="15" fill="rgb(225,67,54)"/><text x="0.2500%" y="767.50">lobsters-microb</text></g><g><title>all (6,399 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(251,92,32)"/><text x="0.2500%" y="783.50"></text></g></svg></svg>