<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (1 samples, 0.28%)</title><rect x="0.0000%" y="757" width="0.2801%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="767.50"></text></g><g><title>__GI__IO_getline_info (1 samples, 0.28%)</title><rect x="0.0000%" y="741" width="0.2801%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (2 samples, 0.56%)</title><rect x="0.2801%" y="741" width="0.5602%" height="15" fill="rgb(221,193,54)"/><text x="0.5301%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="0.8403%" y="741" width="0.2801%" height="15" fill="rgb(248,212,6)"/><text x="1.0903%" y="751.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="1.1204%" y="741" width="0.2801%" height="15" fill="rgb(208,68,35)"/><text x="1.3704%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.28%)</title><rect x="1.4006%" y="741" width="0.2801%" height="15" fill="rgb(232,128,0)"/><text x="1.6506%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="1.6807%" y="741" width="0.2801%" height="15" fill="rgb(207,160,47)"/><text x="1.9307%" y="751.50"></text></g><g><title>[anon] (7 samples, 1.96%)</title><rect x="0.2801%" y="757" width="1.9608%" height="15" fill="rgb(228,23,34)"/><text x="0.5301%" y="767.50">[..</text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.28%)</title><rect x="1.9608%" y="741" width="0.2801%" height="15" fill="rgb(218,30,26)"/><text x="2.2108%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="2.2409%" y="661" width="0.2801%" height="15" fill="rgb(220,122,19)"/><text x="2.4909%" y="671.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.28%)</title><rect x="2.2409%" y="645" width="0.2801%" height="15" fill="rgb(250,228,42)"/><text x="2.4909%" y="655.50"></text></g><g><title>_int_realloc (1 samples, 0.28%)</title><rect x="2.2409%" y="629" width="0.2801%" height="15" fill="rgb(240,193,28)"/><text x="2.4909%" y="639.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="2.2409%" y="613" width="0.2801%" height="15" fill="rgb(216,20,37)"/><text x="2.4909%" y="623.50"></text></g><g><title>malloc_consolidate (1 samples, 0.28%)</title><rect x="2.2409%" y="597" width="0.2801%" height="15" fill="rgb(206,188,39)"/><text x="2.4909%" y="607.50"></text></g><g><title>&lt;decor_mysql::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (2 samples, 0.56%)</title><rect x="2.2409%" y="741" width="0.5602%" height="15" fill="rgb(217,207,13)"/><text x="2.4909%" y="751.50"></text></g><g><title>decor_mysql::Shim::create_schema (2 samples, 0.56%)</title><rect x="2.2409%" y="725" width="0.5602%" height="15" fill="rgb(231,73,38)"/><text x="2.4909%" y="735.50"></text></g><g><title>decor_mysql::sqlparser_cache::ParserCache::get_single_parsed_stmt (2 samples, 0.56%)</title><rect x="2.2409%" y="709" width="0.5602%" height="15" fill="rgb(225,20,46)"/><text x="2.4909%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (2 samples, 0.56%)</title><rect x="2.2409%" y="693" width="0.5602%" height="15" fill="rgb(210,31,41)"/><text x="2.4909%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (2 samples, 0.56%)</title><rect x="2.2409%" y="677" width="0.5602%" height="15" fill="rgb(221,200,47)"/><text x="2.4909%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (1 samples, 0.28%)</title><rect x="2.5210%" y="661" width="0.2801%" height="15" fill="rgb(226,26,5)"/><text x="2.7710%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (1 samples, 0.28%)</title><rect x="2.5210%" y="645" width="0.2801%" height="15" fill="rgb(249,33,26)"/><text x="2.7710%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="2.5210%" y="629" width="0.2801%" height="15" fill="rgb(235,183,28)"/><text x="2.7710%" y="639.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.28%)</title><rect x="2.5210%" y="613" width="0.2801%" height="15" fill="rgb(221,5,38)"/><text x="2.7710%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="2.8011%" y="629" width="0.2801%" height="15" fill="rgb(247,18,42)"/><text x="3.0511%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="2.8011%" y="613" width="0.2801%" height="15" fill="rgb(241,131,45)"/><text x="3.0511%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="2.8011%" y="597" width="0.2801%" height="15" fill="rgb(249,31,29)"/><text x="3.0511%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.28%)</title><rect x="2.8011%" y="581" width="0.2801%" height="15" fill="rgb(225,111,53)"/><text x="3.0511%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.28%)</title><rect x="2.8011%" y="565" width="0.2801%" height="15" fill="rgb(238,160,17)"/><text x="3.0511%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="2.8011%" y="549" width="0.2801%" height="15" fill="rgb(214,148,48)"/><text x="3.0511%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="2.8011%" y="533" width="0.2801%" height="15" fill="rgb(232,36,49)"/><text x="3.0511%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.28%)</title><rect x="2.8011%" y="517" width="0.2801%" height="15" fill="rgb(209,103,24)"/><text x="3.0511%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.28%)</title><rect x="2.8011%" y="501" width="0.2801%" height="15" fill="rgb(229,88,8)"/><text x="3.0511%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.28%)</title><rect x="2.8011%" y="485" width="0.2801%" height="15" fill="rgb(213,181,19)"/><text x="3.0511%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.28%)</title><rect x="2.8011%" y="469" width="0.2801%" height="15" fill="rgb(254,191,54)"/><text x="3.0511%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.28%)</title><rect x="2.8011%" y="453" width="0.2801%" height="15" fill="rgb(241,83,37)"/><text x="3.0511%" y="463.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.28%)</title><rect x="2.8011%" y="437" width="0.2801%" height="15" fill="rgb(233,36,39)"/><text x="3.0511%" y="447.50"></text></g><g><title>page_fault (1 samples, 0.28%)</title><rect x="3.0812%" y="581" width="0.2801%" height="15" fill="rgb(226,3,54)"/><text x="3.3312%" y="591.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.28%)</title><rect x="3.0812%" y="565" width="0.2801%" height="15" fill="rgb(245,192,40)"/><text x="3.3312%" y="575.50"></text></g><g><title>handle_mm_fault (1 samples, 0.28%)</title><rect x="3.0812%" y="549" width="0.2801%" height="15" fill="rgb(238,167,29)"/><text x="3.3312%" y="559.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.28%)</title><rect x="3.0812%" y="533" width="0.2801%" height="15" fill="rgb(232,182,51)"/><text x="3.3312%" y="543.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.28%)</title><rect x="3.0812%" y="517" width="0.2801%" height="15" fill="rgb(231,60,39)"/><text x="3.3312%" y="527.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.28%)</title><rect x="3.0812%" y="501" width="0.2801%" height="15" fill="rgb(208,69,12)"/><text x="3.3312%" y="511.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.28%)</title><rect x="3.0812%" y="485" width="0.2801%" height="15" fill="rgb(235,93,37)"/><text x="3.3312%" y="495.50"></text></g><g><title>prep_new_page (1 samples, 0.28%)</title><rect x="3.0812%" y="469" width="0.2801%" height="15" fill="rgb(213,116,39)"/><text x="3.3312%" y="479.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.28%)</title><rect x="3.0812%" y="453" width="0.2801%" height="15" fill="rgb(222,207,29)"/><text x="3.3312%" y="463.50"></text></g><g><title>clear_page_erms (1 samples, 0.28%)</title><rect x="3.0812%" y="437" width="0.2801%" height="15" fill="rgb(206,96,30)"/><text x="3.3312%" y="447.50"></text></g><g><title>&lt;decor_mysql::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (3 samples, 0.84%)</title><rect x="2.8011%" y="741" width="0.8403%" height="15" fill="rgb(218,138,4)"/><text x="3.0511%" y="751.50"></text></g><g><title>decor_mysql::sqlparser_cache::ParserCache::get_single_parsed_stmt (3 samples, 0.84%)</title><rect x="2.8011%" y="725" width="0.8403%" height="15" fill="rgb(250,191,14)"/><text x="3.0511%" y="735.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (3 samples, 0.84%)</title><rect x="2.8011%" y="709" width="0.8403%" height="15" fill="rgb(239,60,40)"/><text x="3.0511%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (3 samples, 0.84%)</title><rect x="2.8011%" y="693" width="0.8403%" height="15" fill="rgb(206,27,48)"/><text x="3.0511%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (3 samples, 0.84%)</title><rect x="2.8011%" y="677" width="0.8403%" height="15" fill="rgb(225,35,8)"/><text x="3.0511%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.84%)</title><rect x="2.8011%" y="661" width="0.8403%" height="15" fill="rgb(250,213,24)"/><text x="3.0511%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.84%)</title><rect x="2.8011%" y="645" width="0.8403%" height="15" fill="rgb(247,123,22)"/><text x="3.0511%" y="655.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.56%)</title><rect x="3.0812%" y="629" width="0.5602%" height="15" fill="rgb(231,138,38)"/><text x="3.3312%" y="639.50"></text></g><g><title>_int_malloc (2 samples, 0.56%)</title><rect x="3.0812%" y="613" width="0.5602%" height="15" fill="rgb(231,145,46)"/><text x="3.3312%" y="623.50"></text></g><g><title>sysmalloc (2 samples, 0.56%)</title><rect x="3.0812%" y="597" width="0.5602%" height="15" fill="rgb(251,118,11)"/><text x="3.3312%" y="607.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.28%)</title><rect x="3.3613%" y="581" width="0.2801%" height="15" fill="rgb(217,147,25)"/><text x="3.6113%" y="591.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="3.3613%" y="565" width="0.2801%" height="15" fill="rgb(247,81,37)"/><text x="3.6113%" y="575.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="3.6415%" y="741" width="0.2801%" height="15" fill="rgb(209,12,38)"/><text x="3.8915%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.28%)</title><rect x="3.9216%" y="709" width="0.2801%" height="15" fill="rgb(227,1,9)"/><text x="4.1716%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="3.9216%" y="693" width="0.2801%" height="15" fill="rgb(248,47,43)"/><text x="4.1716%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (3 samples, 0.84%)</title><rect x="4.2017%" y="645" width="0.8403%" height="15" fill="rgb(221,10,30)"/><text x="4.4517%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.56%)</title><rect x="4.4818%" y="629" width="0.5602%" height="15" fill="rgb(210,229,1)"/><text x="4.7318%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.56%)</title><rect x="4.4818%" y="613" width="0.5602%" height="15" fill="rgb(222,148,37)"/><text x="4.7318%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.56%)</title><rect x="4.4818%" y="597" width="0.5602%" height="15" fill="rgb(234,67,33)"/><text x="4.7318%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.56%)</title><rect x="4.4818%" y="581" width="0.5602%" height="15" fill="rgb(247,98,35)"/><text x="4.7318%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.56%)</title><rect x="4.4818%" y="565" width="0.5602%" height="15" fill="rgb(247,138,52)"/><text x="4.7318%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.56%)</title><rect x="4.4818%" y="549" width="0.5602%" height="15" fill="rgb(213,79,30)"/><text x="4.7318%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.56%)</title><rect x="4.4818%" y="533" width="0.5602%" height="15" fill="rgb(246,177,23)"/><text x="4.7318%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.56%)</title><rect x="4.4818%" y="517" width="0.5602%" height="15" fill="rgb(230,62,27)"/><text x="4.7318%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.56%)</title><rect x="4.4818%" y="501" width="0.5602%" height="15" fill="rgb(216,154,8)"/><text x="4.7318%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.56%)</title><rect x="4.4818%" y="485" width="0.5602%" height="15" fill="rgb(244,35,45)"/><text x="4.7318%" y="495.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.56%)</title><rect x="4.4818%" y="469" width="0.5602%" height="15" fill="rgb(251,115,12)"/><text x="4.7318%" y="479.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.56%)</title><rect x="4.4818%" y="453" width="0.5602%" height="15" fill="rgb(240,54,50)"/><text x="4.7318%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="4.7619%" y="437" width="0.2801%" height="15" fill="rgb(233,84,52)"/><text x="5.0119%" y="447.50"></text></g><g><title>__GI___mprotect (1 samples, 0.28%)</title><rect x="5.0420%" y="597" width="0.2801%" height="15" fill="rgb(207,117,47)"/><text x="5.2920%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="5.0420%" y="581" width="0.2801%" height="15" fill="rgb(249,43,39)"/><text x="5.2920%" y="591.50"></text></g><g><title>do_syscall_64 (1 samples, 0.28%)</title><rect x="5.0420%" y="565" width="0.2801%" height="15" fill="rgb(209,38,44)"/><text x="5.2920%" y="575.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.28%)</title><rect x="5.0420%" y="549" width="0.2801%" height="15" fill="rgb(236,212,23)"/><text x="5.2920%" y="559.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.28%)</title><rect x="5.0420%" y="533" width="0.2801%" height="15" fill="rgb(242,79,21)"/><text x="5.2920%" y="543.50"></text></g><g><title>mprotect_fixup (1 samples, 0.28%)</title><rect x="5.0420%" y="517" width="0.2801%" height="15" fill="rgb(211,96,35)"/><text x="5.2920%" y="527.50"></text></g><g><title>change_protection (1 samples, 0.28%)</title><rect x="5.0420%" y="501" width="0.2801%" height="15" fill="rgb(253,215,40)"/><text x="5.2920%" y="511.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.28%)</title><rect x="5.3221%" y="533" width="0.2801%" height="15" fill="rgb(211,81,21)"/><text x="5.5721%" y="543.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.28%)</title><rect x="5.3221%" y="517" width="0.2801%" height="15" fill="rgb(208,190,38)"/><text x="5.5721%" y="527.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.28%)</title><rect x="5.3221%" y="501" width="0.2801%" height="15" fill="rgb(235,213,38)"/><text x="5.5721%" y="511.50"></text></g><g><title>prep_new_page (1 samples, 0.28%)</title><rect x="5.3221%" y="485" width="0.2801%" height="15" fill="rgb(237,122,38)"/><text x="5.5721%" y="495.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.28%)</title><rect x="5.3221%" y="469" width="0.2801%" height="15" fill="rgb(244,218,35)"/><text x="5.5721%" y="479.50"></text></g><g><title>preempt_count_sub (1 samples, 0.28%)</title><rect x="5.3221%" y="453" width="0.2801%" height="15" fill="rgb(240,68,47)"/><text x="5.5721%" y="463.50"></text></g><g><title>mem_cgroup_commit_charge (1 samples, 0.28%)</title><rect x="5.6022%" y="533" width="0.2801%" height="15" fill="rgb(210,16,53)"/><text x="5.8522%" y="543.50"></text></g><g><title>__GI___libc_malloc (4 samples, 1.12%)</title><rect x="5.0420%" y="645" width="1.1204%" height="15" fill="rgb(235,124,12)"/><text x="5.2920%" y="655.50"></text></g><g><title>_int_malloc (4 samples, 1.12%)</title><rect x="5.0420%" y="629" width="1.1204%" height="15" fill="rgb(224,169,11)"/><text x="5.2920%" y="639.50"></text></g><g><title>sysmalloc (4 samples, 1.12%)</title><rect x="5.0420%" y="613" width="1.1204%" height="15" fill="rgb(250,166,2)"/><text x="5.2920%" y="623.50"></text></g><g><title>page_fault (3 samples, 0.84%)</title><rect x="5.3221%" y="597" width="0.8403%" height="15" fill="rgb(242,216,29)"/><text x="5.5721%" y="607.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.84%)</title><rect x="5.3221%" y="581" width="0.8403%" height="15" fill="rgb(230,116,27)"/><text x="5.5721%" y="591.50"></text></g><g><title>handle_mm_fault (3 samples, 0.84%)</title><rect x="5.3221%" y="565" width="0.8403%" height="15" fill="rgb(228,99,48)"/><text x="5.5721%" y="575.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.84%)</title><rect x="5.3221%" y="549" width="0.8403%" height="15" fill="rgb(253,11,6)"/><text x="5.5721%" y="559.50"></text></g><g><title>mem_cgroup_try_charge_delay (1 samples, 0.28%)</title><rect x="5.8824%" y="533" width="0.2801%" height="15" fill="rgb(247,143,39)"/><text x="6.1324%" y="543.50"></text></g><g><title>mem_cgroup_try_charge (1 samples, 0.28%)</title><rect x="5.8824%" y="517" width="0.2801%" height="15" fill="rgb(236,97,10)"/><text x="6.1324%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (8 samples, 2.24%)</title><rect x="4.2017%" y="709" width="2.2409%" height="15" fill="rgb(233,208,19)"/><text x="4.4517%" y="719.50">&lt;..</text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (8 samples, 2.24%)</title><rect x="4.2017%" y="693" width="2.2409%" height="15" fill="rgb(216,164,2)"/><text x="4.4517%" y="703.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 2.24%)</title><rect x="4.2017%" y="677" width="2.2409%" height="15" fill="rgb(220,129,5)"/><text x="4.4517%" y="687.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 2.24%)</title><rect x="4.2017%" y="661" width="2.2409%" height="15" fill="rgb(242,17,10)"/><text x="4.4517%" y="671.50">&lt;..</text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="6.1625%" y="645" width="0.2801%" height="15" fill="rgb(242,107,0)"/><text x="6.4125%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="6.4426%" y="709" width="0.2801%" height="15" fill="rgb(251,28,31)"/><text x="6.6926%" y="719.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.28%)</title><rect x="6.4426%" y="693" width="0.2801%" height="15" fill="rgb(233,223,10)"/><text x="6.6926%" y="703.50"></text></g><g><title>_int_realloc (1 samples, 0.28%)</title><rect x="6.4426%" y="677" width="0.2801%" height="15" fill="rgb(215,21,27)"/><text x="6.6926%" y="687.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="6.4426%" y="661" width="0.2801%" height="15" fill="rgb(232,23,21)"/><text x="6.6926%" y="671.50"></text></g><g><title>sysmalloc (1 samples, 0.28%)</title><rect x="6.4426%" y="645" width="0.2801%" height="15" fill="rgb(244,5,23)"/><text x="6.6926%" y="655.50"></text></g><g><title>__GI___mprotect (1 samples, 0.28%)</title><rect x="6.4426%" y="629" width="0.2801%" height="15" fill="rgb(226,81,46)"/><text x="6.6926%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="6.4426%" y="613" width="0.2801%" height="15" fill="rgb(247,70,30)"/><text x="6.6926%" y="623.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="6.4426%" y="597" width="0.2801%" height="15" fill="rgb(212,68,19)"/><text x="6.6926%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="6.7227%" y="677" width="0.2801%" height="15" fill="rgb(240,187,13)"/><text x="6.9727%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="6.7227%" y="661" width="0.2801%" height="15" fill="rgb(223,113,26)"/><text x="6.9727%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="6.7227%" y="645" width="0.2801%" height="15" fill="rgb(206,192,2)"/><text x="6.9727%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.28%)</title><rect x="6.7227%" y="629" width="0.2801%" height="15" fill="rgb(241,108,4)"/><text x="6.9727%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.28%)</title><rect x="6.7227%" y="613" width="0.2801%" height="15" fill="rgb(247,173,49)"/><text x="6.9727%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.28%)</title><rect x="6.7227%" y="597" width="0.2801%" height="15" fill="rgb(224,114,35)"/><text x="6.9727%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.28%)</title><rect x="6.7227%" y="581" width="0.2801%" height="15" fill="rgb(245,159,27)"/><text x="6.9727%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.28%)</title><rect x="6.7227%" y="565" width="0.2801%" height="15" fill="rgb(245,172,44)"/><text x="6.9727%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.28%)</title><rect x="6.7227%" y="549" width="0.2801%" height="15" fill="rgb(236,23,11)"/><text x="6.9727%" y="559.50"></text></g><g><title>__GI___mprotect (1 samples, 0.28%)</title><rect x="7.0028%" y="629" width="0.2801%" height="15" fill="rgb(205,117,38)"/><text x="7.2528%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="7.0028%" y="613" width="0.2801%" height="15" fill="rgb(237,72,25)"/><text x="7.2528%" y="623.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="7.0028%" y="597" width="0.2801%" height="15" fill="rgb(244,70,9)"/><text x="7.2528%" y="607.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.56%)</title><rect x="7.0028%" y="677" width="0.5602%" height="15" fill="rgb(217,125,39)"/><text x="7.2528%" y="687.50"></text></g><g><title>_int_malloc (2 samples, 0.56%)</title><rect x="7.0028%" y="661" width="0.5602%" height="15" fill="rgb(235,36,10)"/><text x="7.2528%" y="671.50"></text></g><g><title>sysmalloc (2 samples, 0.56%)</title><rect x="7.0028%" y="645" width="0.5602%" height="15" fill="rgb(251,123,47)"/><text x="7.2528%" y="655.50"></text></g><g><title>page_fault (1 samples, 0.28%)</title><rect x="7.2829%" y="629" width="0.2801%" height="15" fill="rgb(221,13,13)"/><text x="7.5329%" y="639.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.28%)</title><rect x="7.2829%" y="613" width="0.2801%" height="15" fill="rgb(238,131,9)"/><text x="7.5329%" y="623.50"></text></g><g><title>handle_mm_fault (1 samples, 0.28%)</title><rect x="7.2829%" y="597" width="0.2801%" height="15" fill="rgb(211,50,8)"/><text x="7.5329%" y="607.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.28%)</title><rect x="7.2829%" y="581" width="0.2801%" height="15" fill="rgb(245,182,24)"/><text x="7.5329%" y="591.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.28%)</title><rect x="7.2829%" y="565" width="0.2801%" height="15" fill="rgb(242,14,37)"/><text x="7.5329%" y="575.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.28%)</title><rect x="7.2829%" y="549" width="0.2801%" height="15" fill="rgb(246,228,12)"/><text x="7.5329%" y="559.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.28%)</title><rect x="7.2829%" y="533" width="0.2801%" height="15" fill="rgb(213,55,15)"/><text x="7.5329%" y="543.50"></text></g><g><title>prep_new_page (1 samples, 0.28%)</title><rect x="7.2829%" y="517" width="0.2801%" height="15" fill="rgb(209,9,3)"/><text x="7.5329%" y="527.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.28%)</title><rect x="7.2829%" y="501" width="0.2801%" height="15" fill="rgb(230,59,30)"/><text x="7.5329%" y="511.50"></text></g><g><title>clear_page_erms (1 samples, 0.28%)</title><rect x="7.2829%" y="485" width="0.2801%" height="15" fill="rgb(209,121,21)"/><text x="7.5329%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 1.12%)</title><rect x="6.7227%" y="709" width="1.1204%" height="15" fill="rgb(220,109,13)"/><text x="6.9727%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 1.12%)</title><rect x="6.7227%" y="693" width="1.1204%" height="15" fill="rgb(232,18,1)"/><text x="6.9727%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="7.5630%" y="677" width="0.2801%" height="15" fill="rgb(215,41,42)"/><text x="7.8130%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.28%)</title><rect x="7.8431%" y="709" width="0.2801%" height="15" fill="rgb(224,123,36)"/><text x="8.0931%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (1 samples, 0.28%)</title><rect x="7.8431%" y="693" width="0.2801%" height="15" fill="rgb(240,125,3)"/><text x="8.0931%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="7.8431%" y="677" width="0.2801%" height="15" fill="rgb(205,98,50)"/><text x="8.0931%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="7.8431%" y="661" width="0.2801%" height="15" fill="rgb(205,185,37)"/><text x="8.0931%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="7.8431%" y="645" width="0.2801%" height="15" fill="rgb(238,207,15)"/><text x="8.0931%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="7.8431%" y="629" width="0.2801%" height="15" fill="rgb(213,199,42)"/><text x="8.0931%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (1 samples, 0.28%)</title><rect x="7.8431%" y="613" width="0.2801%" height="15" fill="rgb(235,201,11)"/><text x="8.0931%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="7.8431%" y="597" width="0.2801%" height="15" fill="rgb(207,46,11)"/><text x="8.0931%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="8.1232%" y="709" width="0.2801%" height="15" fill="rgb(241,35,35)"/><text x="8.3732%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.28%)</title><rect x="8.1232%" y="693" width="0.2801%" height="15" fill="rgb(243,32,47)"/><text x="8.3732%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_ok (1 samples, 0.28%)</title><rect x="8.4034%" y="645" width="0.2801%" height="15" fill="rgb(247,202,23)"/><text x="8.6534%" y="655.50"></text></g><g><title>do_syscall_64 (2 samples, 0.56%)</title><rect x="8.9636%" y="501" width="0.5602%" height="15" fill="rgb(219,102,11)"/><text x="9.2136%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (2 samples, 0.56%)</title><rect x="8.9636%" y="485" width="0.5602%" height="15" fill="rgb(243,110,44)"/><text x="9.2136%" y="495.50"></text></g><g><title>__sys_recvfrom (2 samples, 0.56%)</title><rect x="8.9636%" y="469" width="0.5602%" height="15" fill="rgb(222,74,54)"/><text x="9.2136%" y="479.50"></text></g><g><title>inet_recvmsg (1 samples, 0.28%)</title><rect x="9.2437%" y="453" width="0.2801%" height="15" fill="rgb(216,99,12)"/><text x="9.4937%" y="463.50"></text></g><g><title>tcp_recvmsg (1 samples, 0.28%)</title><rect x="9.2437%" y="437" width="0.2801%" height="15" fill="rgb(226,22,26)"/><text x="9.4937%" y="447.50"></text></g><g><title>__kfree_skb (1 samples, 0.28%)</title><rect x="9.2437%" y="421" width="0.2801%" height="15" fill="rgb(217,163,10)"/><text x="9.4937%" y="431.50"></text></g><g><title>skb_release_head_state (1 samples, 0.28%)</title><rect x="9.2437%" y="405" width="0.2801%" height="15" fill="rgb(213,25,53)"/><text x="9.4937%" y="415.50"></text></g><g><title>sock_rfree (1 samples, 0.28%)</title><rect x="9.2437%" y="389" width="0.2801%" height="15" fill="rgb(252,105,26)"/><text x="9.4937%" y="399.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (4 samples, 1.12%)</title><rect x="8.6835%" y="613" width="1.1204%" height="15" fill="rgb(220,39,43)"/><text x="8.9335%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 1.12%)</title><rect x="8.6835%" y="597" width="1.1204%" height="15" fill="rgb(229,68,48)"/><text x="8.9335%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (4 samples, 1.12%)</title><rect x="8.6835%" y="581" width="1.1204%" height="15" fill="rgb(252,8,32)"/><text x="8.9335%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (4 samples, 1.12%)</title><rect x="8.6835%" y="565" width="1.1204%" height="15" fill="rgb(223,20,43)"/><text x="8.9335%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (4 samples, 1.12%)</title><rect x="8.6835%" y="549" width="1.1204%" height="15" fill="rgb(229,81,49)"/><text x="8.9335%" y="559.50"></text></g><g><title>__libc_recv (4 samples, 1.12%)</title><rect x="8.6835%" y="533" width="1.1204%" height="15" fill="rgb(236,28,36)"/><text x="8.9335%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 1.12%)</title><rect x="8.6835%" y="517" width="1.1204%" height="15" fill="rgb(249,185,26)"/><text x="8.9335%" y="527.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="9.5238%" y="501" width="0.2801%" height="15" fill="rgb(249,174,33)"/><text x="9.7738%" y="511.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (6 samples, 1.68%)</title><rect x="8.4034%" y="661" width="1.6807%" height="15" fill="rgb(233,201,37)"/><text x="8.6534%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (5 samples, 1.40%)</title><rect x="8.6835%" y="645" width="1.4006%" height="15" fill="rgb(221,78,26)"/><text x="8.9335%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.40%)</title><rect x="8.6835%" y="629" width="1.4006%" height="15" fill="rgb(250,127,30)"/><text x="8.9335%" y="639.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.28%)</title><rect x="9.8039%" y="613" width="0.2801%" height="15" fill="rgb(230,49,44)"/><text x="10.0539%" y="623.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.28%)</title><rect x="9.8039%" y="597" width="0.2801%" height="15" fill="rgb(229,67,23)"/><text x="10.0539%" y="607.50"></text></g><g><title>release_sock (1 samples, 0.28%)</title><rect x="10.3641%" y="485" width="0.2801%" height="15" fill="rgb(249,83,47)"/><text x="10.6141%" y="495.50"></text></g><g><title>__sk_dst_check (1 samples, 0.28%)</title><rect x="10.6443%" y="405" width="0.2801%" height="15" fill="rgb(215,43,3)"/><text x="10.8943%" y="415.50"></text></g><g><title>ipv4_dst_check (1 samples, 0.28%)</title><rect x="10.6443%" y="389" width="0.2801%" height="15" fill="rgb(238,154,13)"/><text x="10.8943%" y="399.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.28%)</title><rect x="11.7647%" y="69" width="0.2801%" height="15" fill="rgb(219,56,2)"/><text x="12.0147%" y="79.50"></text></g><g><title>psi_task_change (1 samples, 0.28%)</title><rect x="12.0448%" y="53" width="0.2801%" height="15" fill="rgb(233,0,4)"/><text x="12.2948%" y="63.50"></text></g><g><title>psi_flags_change (1 samples, 0.28%)</title><rect x="12.0448%" y="37" width="0.2801%" height="15" fill="rgb(235,30,7)"/><text x="12.2948%" y="47.50"></text></g><g><title>enqueue_task (2 samples, 0.56%)</title><rect x="12.0448%" y="69" width="0.5602%" height="15" fill="rgb(250,79,13)"/><text x="12.2948%" y="79.50"></text></g><g><title>uclamp_rq_inc_id (1 samples, 0.28%)</title><rect x="12.3249%" y="53" width="0.2801%" height="15" fill="rgb(211,146,34)"/><text x="12.5749%" y="63.50"></text></g><g><title>do_syscall_64 (9 samples, 2.52%)</title><rect x="10.3641%" y="565" width="2.5210%" height="15" fill="rgb(228,22,38)"/><text x="10.6141%" y="575.50">do..</text></g><g><title>__x64_sys_sendto (9 samples, 2.52%)</title><rect x="10.3641%" y="549" width="2.5210%" height="15" fill="rgb(235,168,5)"/><text x="10.6141%" y="559.50">__..</text></g><g><title>__sys_sendto (9 samples, 2.52%)</title><rect x="10.3641%" y="533" width="2.5210%" height="15" fill="rgb(221,155,16)"/><text x="10.6141%" y="543.50">__..</text></g><g><title>sock_sendmsg (9 samples, 2.52%)</title><rect x="10.3641%" y="517" width="2.5210%" height="15" fill="rgb(215,215,53)"/><text x="10.6141%" y="527.50">so..</text></g><g><title>tcp_sendmsg (9 samples, 2.52%)</title><rect x="10.3641%" y="501" width="2.5210%" height="15" fill="rgb(223,4,10)"/><text x="10.6141%" y="511.50">tc..</text></g><g><title>tcp_sendmsg_locked (8 samples, 2.24%)</title><rect x="10.6443%" y="485" width="2.2409%" height="15" fill="rgb(234,103,6)"/><text x="10.8943%" y="495.50">t..</text></g><g><title>__tcp_push_pending_frames (8 samples, 2.24%)</title><rect x="10.6443%" y="469" width="2.2409%" height="15" fill="rgb(227,97,0)"/><text x="10.8943%" y="479.50">_..</text></g><g><title>tcp_write_xmit (8 samples, 2.24%)</title><rect x="10.6443%" y="453" width="2.2409%" height="15" fill="rgb(234,150,53)"/><text x="10.8943%" y="463.50">t..</text></g><g><title>__tcp_transmit_skb (8 samples, 2.24%)</title><rect x="10.6443%" y="437" width="2.2409%" height="15" fill="rgb(228,201,54)"/><text x="10.8943%" y="447.50">_..</text></g><g><title>__ip_queue_xmit (8 samples, 2.24%)</title><rect x="10.6443%" y="421" width="2.2409%" height="15" fill="rgb(222,22,37)"/><text x="10.8943%" y="431.50">_..</text></g><g><title>ip_output (7 samples, 1.96%)</title><rect x="10.9244%" y="405" width="1.9608%" height="15" fill="rgb(237,53,32)"/><text x="11.1744%" y="415.50">i..</text></g><g><title>ip_finish_output2 (7 samples, 1.96%)</title><rect x="10.9244%" y="389" width="1.9608%" height="15" fill="rgb(233,25,53)"/><text x="11.1744%" y="399.50">i..</text></g><g><title>__local_bh_enable_ip (7 samples, 1.96%)</title><rect x="10.9244%" y="373" width="1.9608%" height="15" fill="rgb(210,40,34)"/><text x="11.1744%" y="383.50">_..</text></g><g><title>do_softirq (7 samples, 1.96%)</title><rect x="10.9244%" y="357" width="1.9608%" height="15" fill="rgb(241,220,44)"/><text x="11.1744%" y="367.50">d..</text></g><g><title>do_softirq_own_stack (7 samples, 1.96%)</title><rect x="10.9244%" y="341" width="1.9608%" height="15" fill="rgb(235,28,35)"/><text x="11.1744%" y="351.50">d..</text></g><g><title>__do_softirq (7 samples, 1.96%)</title><rect x="10.9244%" y="325" width="1.9608%" height="15" fill="rgb(210,56,17)"/><text x="11.1744%" y="335.50">_..</text></g><g><title>net_rx_action (7 samples, 1.96%)</title><rect x="10.9244%" y="309" width="1.9608%" height="15" fill="rgb(224,130,29)"/><text x="11.1744%" y="319.50">n..</text></g><g><title>process_backlog (7 samples, 1.96%)</title><rect x="10.9244%" y="293" width="1.9608%" height="15" fill="rgb(235,212,8)"/><text x="11.1744%" y="303.50">p..</text></g><g><title>__netif_receive_skb_one_core (7 samples, 1.96%)</title><rect x="10.9244%" y="277" width="1.9608%" height="15" fill="rgb(223,33,50)"/><text x="11.1744%" y="287.50">_..</text></g><g><title>ip_rcv (7 samples, 1.96%)</title><rect x="10.9244%" y="261" width="1.9608%" height="15" fill="rgb(219,149,13)"/><text x="11.1744%" y="271.50">i..</text></g><g><title>ip_local_deliver (7 samples, 1.96%)</title><rect x="10.9244%" y="245" width="1.9608%" height="15" fill="rgb(250,156,29)"/><text x="11.1744%" y="255.50">i..</text></g><g><title>ip_local_deliver_finish (7 samples, 1.96%)</title><rect x="10.9244%" y="229" width="1.9608%" height="15" fill="rgb(216,193,19)"/><text x="11.1744%" y="239.50">i..</text></g><g><title>ip_protocol_deliver_rcu (7 samples, 1.96%)</title><rect x="10.9244%" y="213" width="1.9608%" height="15" fill="rgb(216,135,14)"/><text x="11.1744%" y="223.50">i..</text></g><g><title>tcp_v4_rcv (7 samples, 1.96%)</title><rect x="10.9244%" y="197" width="1.9608%" height="15" fill="rgb(241,47,5)"/><text x="11.1744%" y="207.50">t..</text></g><g><title>tcp_v4_do_rcv (6 samples, 1.68%)</title><rect x="11.2045%" y="181" width="1.6807%" height="15" fill="rgb(233,42,35)"/><text x="11.4545%" y="191.50"></text></g><g><title>tcp_rcv_established (6 samples, 1.68%)</title><rect x="11.2045%" y="165" width="1.6807%" height="15" fill="rgb(231,13,6)"/><text x="11.4545%" y="175.50"></text></g><g><title>sock_def_readable (6 samples, 1.68%)</title><rect x="11.2045%" y="149" width="1.6807%" height="15" fill="rgb(207,181,40)"/><text x="11.4545%" y="159.50"></text></g><g><title>__wake_up_common_lock (6 samples, 1.68%)</title><rect x="11.2045%" y="133" width="1.6807%" height="15" fill="rgb(254,173,49)"/><text x="11.4545%" y="143.50"></text></g><g><title>__wake_up_common (6 samples, 1.68%)</title><rect x="11.2045%" y="117" width="1.6807%" height="15" fill="rgb(221,1,38)"/><text x="11.4545%" y="127.50"></text></g><g><title>pollwake (5 samples, 1.40%)</title><rect x="11.4846%" y="101" width="1.4006%" height="15" fill="rgb(206,124,46)"/><text x="11.7346%" y="111.50"></text></g><g><title>try_to_wake_up (4 samples, 1.12%)</title><rect x="11.7647%" y="85" width="1.1204%" height="15" fill="rgb(249,21,11)"/><text x="12.0147%" y="95.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.28%)</title><rect x="12.6050%" y="69" width="0.2801%" height="15" fill="rgb(222,201,40)"/><text x="12.8550%" y="79.50"></text></g><g><title>enqueue_entity (1 samples, 0.28%)</title><rect x="12.6050%" y="53" width="0.2801%" height="15" fill="rgb(235,61,29)"/><text x="12.8550%" y="63.50"></text></g><g><title>update_load_avg (1 samples, 0.28%)</title><rect x="12.6050%" y="37" width="0.2801%" height="15" fill="rgb(219,207,3)"/><text x="12.8550%" y="47.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (17 samples, 4.76%)</title><rect x="8.4034%" y="693" width="4.7619%" height="15" fill="rgb(222,56,46)"/><text x="8.6534%" y="703.50">&lt;mysql..</text></g><g><title>mysql::conn::Conn::_query (17 samples, 4.76%)</title><rect x="8.4034%" y="677" width="4.7619%" height="15" fill="rgb(239,76,54)"/><text x="8.6534%" y="687.50">mysql:..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (11 samples, 3.08%)</title><rect x="10.0840%" y="661" width="3.0812%" height="15" fill="rgb(231,124,27)"/><text x="10.3340%" y="671.50">mys..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (11 samples, 3.08%)</title><rect x="10.0840%" y="645" width="3.0812%" height="15" fill="rgb(249,195,6)"/><text x="10.3340%" y="655.50">std..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (11 samples, 3.08%)</title><rect x="10.0840%" y="629" width="3.0812%" height="15" fill="rgb(237,174,47)"/><text x="10.3340%" y="639.50">&lt;st..</text></g><g><title>std::sys_common::net::TcpStream::write (11 samples, 3.08%)</title><rect x="10.0840%" y="613" width="3.0812%" height="15" fill="rgb(206,201,31)"/><text x="10.3340%" y="623.50">std..</text></g><g><title>__libc_send (11 samples, 3.08%)</title><rect x="10.0840%" y="597" width="3.0812%" height="15" fill="rgb(231,57,52)"/><text x="10.3340%" y="607.50">__l..</text></g><g><title>entry_SYSCALL_64 (11 samples, 3.08%)</title><rect x="10.0840%" y="581" width="3.0812%" height="15" fill="rgb(248,177,22)"/><text x="10.3340%" y="591.50">ent..</text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="12.8852%" y="565" width="0.2801%" height="15" fill="rgb(215,211,37)"/><text x="13.1352%" y="575.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.28%)</title><rect x="13.1653%" y="693" width="0.2801%" height="15" fill="rgb(241,128,51)"/><text x="13.4153%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="13.4454%" y="693" width="0.2801%" height="15" fill="rgb(227,165,31)"/><text x="13.6954%" y="703.50"></text></g><g><title>decor_mysql::query_transformer::QueryTransformer::query (36 samples, 10.08%)</title><rect x="3.9216%" y="741" width="10.0840%" height="15" fill="rgb(228,167,24)"/><text x="4.1716%" y="751.50">decor_mysql::qu..</text></g><g><title>decor_mysql::query_transformer::QueryTransformer::issue_to_dt_and_get_mv_stmt (36 samples, 10.08%)</title><rect x="3.9216%" y="725" width="10.0840%" height="15" fill="rgb(228,143,12)"/><text x="4.1716%" y="735.50">decor_mysql::qu..</text></g><g><title>decor_mysql::ghosts_cache::GhostsCache::insert_uid2gids_for_values (20 samples, 5.60%)</title><rect x="8.4034%" y="709" width="5.6022%" height="15" fill="rgb(249,149,8)"/><text x="8.6534%" y="719.50">decor_m..</text></g><g><title>decor_mysql::ghosts_cache::GhostsCache::insert_gid_into_caches (1 samples, 0.28%)</title><rect x="13.7255%" y="693" width="0.2801%" height="15" fill="rgb(243,35,44)"/><text x="13.9755%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.28%)</title><rect x="13.7255%" y="677" width="0.2801%" height="15" fill="rgb(246,89,9)"/><text x="13.9755%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.28%)</title><rect x="13.7255%" y="661" width="0.2801%" height="15" fill="rgb(233,213,13)"/><text x="13.9755%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (1 samples, 0.28%)</title><rect x="13.7255%" y="645" width="0.2801%" height="15" fill="rgb(233,141,41)"/><text x="13.9755%" y="655.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.28%)</title><rect x="13.7255%" y="629" width="0.2801%" height="15" fill="rgb(239,167,4)"/><text x="13.9755%" y="639.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="13.7255%" y="613" width="0.2801%" height="15" fill="rgb(209,217,16)"/><text x="13.9755%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::DropObjectsStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="14.0056%" y="677" width="0.2801%" height="15" fill="rgb(219,88,35)"/><text x="14.2556%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="14.0056%" y="661" width="0.2801%" height="15" fill="rgb(220,193,23)"/><text x="14.2556%" y="671.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (1 samples, 0.28%)</title><rect x="14.0056%" y="645" width="0.2801%" height="15" fill="rgb(230,90,52)"/><text x="14.2556%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.56%)</title><rect x="14.0056%" y="709" width="0.5602%" height="15" fill="rgb(252,106,19)"/><text x="14.2556%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (2 samples, 0.56%)</title><rect x="14.0056%" y="693" width="0.5602%" height="15" fill="rgb(206,74,20)"/><text x="14.2556%" y="703.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (1 samples, 0.28%)</title><rect x="14.2857%" y="677" width="0.2801%" height="15" fill="rgb(230,138,44)"/><text x="14.5357%" y="687.50"></text></g><g><title>decor_mysql::query_transformer::QueryTransformer::query_drop (3 samples, 0.84%)</title><rect x="14.0056%" y="741" width="0.8403%" height="15" fill="rgb(235,182,43)"/><text x="14.2556%" y="751.50"></text></g><g><title>decor_mysql::query_transformer::QueryTransformer::issue_to_dt_and_get_mv_stmt (3 samples, 0.84%)</title><rect x="14.0056%" y="725" width="0.8403%" height="15" fill="rgb(242,16,51)"/><text x="14.2556%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="14.5658%" y="709" width="0.2801%" height="15" fill="rgb(248,9,4)"/><text x="14.8158%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="14.5658%" y="693" width="0.2801%" height="15" fill="rgb(210,31,22)"/><text x="14.8158%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="14.5658%" y="677" width="0.2801%" height="15" fill="rgb(239,54,39)"/><text x="14.8158%" y="687.50"></text></g><g><title>lobsters_microbenchmarks::main (1 samples, 0.28%)</title><rect x="14.8459%" y="741" width="0.2801%" height="15" fill="rgb(230,99,41)"/><text x="15.0959%" y="751.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.28%)</title><rect x="14.8459%" y="725" width="0.2801%" height="15" fill="rgb(253,106,12)"/><text x="15.0959%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.28%)</title><rect x="14.8459%" y="709" width="0.2801%" height="15" fill="rgb(213,46,41)"/><text x="15.0959%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.28%)</title><rect x="14.8459%" y="693" width="0.2801%" height="15" fill="rgb(215,133,35)"/><text x="15.0959%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.28%)</title><rect x="14.8459%" y="677" width="0.2801%" height="15" fill="rgb(213,28,5)"/><text x="15.0959%" y="687.50"></text></g><g><title>dlopen (1 samples, 0.28%)</title><rect x="14.8459%" y="661" width="0.2801%" height="15" fill="rgb(215,77,49)"/><text x="15.0959%" y="671.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.28%)</title><rect x="14.8459%" y="645" width="0.2801%" height="15" fill="rgb(248,100,22)"/><text x="15.0959%" y="655.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.28%)</title><rect x="14.8459%" y="629" width="0.2801%" height="15" fill="rgb(208,67,9)"/><text x="15.0959%" y="639.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.28%)</title><rect x="14.8459%" y="613" width="0.2801%" height="15" fill="rgb(219,133,21)"/><text x="15.0959%" y="623.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.28%)</title><rect x="14.8459%" y="597" width="0.2801%" height="15" fill="rgb(246,46,29)"/><text x="15.0959%" y="607.50"></text></g><g><title>_dl_open (1 samples, 0.28%)</title><rect x="14.8459%" y="581" width="0.2801%" height="15" fill="rgb(246,185,52)"/><text x="15.0959%" y="591.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.28%)</title><rect x="14.8459%" y="565" width="0.2801%" height="15" fill="rgb(252,136,11)"/><text x="15.0959%" y="575.50"></text></g><g><title>dl_open_worker (1 samples, 0.28%)</title><rect x="14.8459%" y="549" width="0.2801%" height="15" fill="rgb(219,138,53)"/><text x="15.0959%" y="559.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.28%)</title><rect x="14.8459%" y="533" width="0.2801%" height="15" fill="rgb(211,51,23)"/><text x="15.0959%" y="543.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.28%)</title><rect x="14.8459%" y="517" width="0.2801%" height="15" fill="rgb(247,221,28)"/><text x="15.0959%" y="527.50"></text></g><g><title>do_lookup_x (1 samples, 0.28%)</title><rect x="14.8459%" y="501" width="0.2801%" height="15" fill="rgb(251,222,45)"/><text x="15.0959%" y="511.50"></text></g><g><title>&lt;decor_mysql::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (1 samples, 0.28%)</title><rect x="15.1261%" y="725" width="0.2801%" height="15" fill="rgb(217,162,53)"/><text x="15.3761%" y="735.50"></text></g><g><title>decor_mysql::Shim::create_schema (1 samples, 0.28%)</title><rect x="15.1261%" y="709" width="0.2801%" height="15" fill="rgb(229,93,14)"/><text x="15.3761%" y="719.50"></text></g><g><title>decor_mysql::query_transformer::QueryTransformer::query_drop (1 samples, 0.28%)</title><rect x="15.1261%" y="693" width="0.2801%" height="15" fill="rgb(209,67,49)"/><text x="15.3761%" y="703.50"></text></g><g><title>mysql::conn::transaction::Transaction::commit (1 samples, 0.28%)</title><rect x="15.1261%" y="677" width="0.2801%" height="15" fill="rgb(213,87,29)"/><text x="15.3761%" y="687.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.28%)</title><rect x="15.1261%" y="661" width="0.2801%" height="15" fill="rgb(205,151,52)"/><text x="15.3761%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.28%)</title><rect x="15.1261%" y="645" width="0.2801%" height="15" fill="rgb(253,215,39)"/><text x="15.3761%" y="655.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.28%)</title><rect x="15.1261%" y="629" width="0.2801%" height="15" fill="rgb(221,220,41)"/><text x="15.3761%" y="639.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.28%)</title><rect x="15.1261%" y="613" width="0.2801%" height="15" fill="rgb(218,133,21)"/><text x="15.3761%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.28%)</title><rect x="15.1261%" y="597" width="0.2801%" height="15" fill="rgb(221,193,43)"/><text x="15.3761%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.28%)</title><rect x="15.1261%" y="581" width="0.2801%" height="15" fill="rgb(240,128,52)"/><text x="15.3761%" y="591.50"></text></g><g><title>__libc_send (1 samples, 0.28%)</title><rect x="15.1261%" y="565" width="0.2801%" height="15" fill="rgb(253,114,12)"/><text x="15.3761%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="15.1261%" y="549" width="0.2801%" height="15" fill="rgb(215,223,47)"/><text x="15.3761%" y="559.50"></text></g><g><title>do_syscall_64 (1 samples, 0.28%)</title><rect x="15.1261%" y="533" width="0.2801%" height="15" fill="rgb(248,225,23)"/><text x="15.3761%" y="543.50"></text></g><g><title>__x64_sys_sendto (1 samples, 0.28%)</title><rect x="15.1261%" y="517" width="0.2801%" height="15" fill="rgb(250,108,0)"/><text x="15.3761%" y="527.50"></text></g><g><title>__sys_sendto (1 samples, 0.28%)</title><rect x="15.1261%" y="501" width="0.2801%" height="15" fill="rgb(228,208,7)"/><text x="15.3761%" y="511.50"></text></g><g><title>import_single_range (1 samples, 0.28%)</title><rect x="15.1261%" y="485" width="0.2801%" height="15" fill="rgb(244,45,10)"/><text x="15.3761%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="15.4062%" y="629" width="0.2801%" height="15" fill="rgb(207,125,25)"/><text x="15.6562%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (1 samples, 0.28%)</title><rect x="15.4062%" y="613" width="0.2801%" height="15" fill="rgb(210,195,18)"/><text x="15.6562%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (1 samples, 0.28%)</title><rect x="15.4062%" y="597" width="0.2801%" height="15" fill="rgb(249,80,12)"/><text x="15.6562%" y="607.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="15.6863%" y="613" width="0.2801%" height="15" fill="rgb(221,65,9)"/><text x="15.9363%" y="623.50"></text></g><g><title>core::fmt::write (3 samples, 0.84%)</title><rect x="15.4062%" y="693" width="0.8403%" height="15" fill="rgb(235,49,36)"/><text x="15.6562%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (3 samples, 0.84%)</title><rect x="15.4062%" y="677" width="0.8403%" height="15" fill="rgb(225,32,20)"/><text x="15.6562%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (3 samples, 0.84%)</title><rect x="15.4062%" y="661" width="0.8403%" height="15" fill="rgb(215,141,46)"/><text x="15.6562%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (3 samples, 0.84%)</title><rect x="15.4062%" y="645" width="0.8403%" height="15" fill="rgb(250,160,47)"/><text x="15.6562%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.56%)</title><rect x="15.6863%" y="629" width="0.5602%" height="15" fill="rgb(216,222,40)"/><text x="15.9363%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.28%)</title><rect x="15.9664%" y="613" width="0.2801%" height="15" fill="rgb(234,217,39)"/><text x="16.2164%" y="623.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.28%)</title><rect x="15.9664%" y="597" width="0.2801%" height="15" fill="rgb(207,178,40)"/><text x="16.2164%" y="607.50"></text></g><g><title>decor_mysql::query_transformer::QueryTransformer::query (4 samples, 1.12%)</title><rect x="15.4062%" y="709" width="1.1204%" height="15" fill="rgb(221,136,13)"/><text x="15.6562%" y="719.50"></text></g><g><title>mysql::conn::transaction::Transaction::commit (1 samples, 0.28%)</title><rect x="16.2465%" y="693" width="0.2801%" height="15" fill="rgb(249,199,10)"/><text x="16.4965%" y="703.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.28%)</title><rect x="16.2465%" y="677" width="0.2801%" height="15" fill="rgb(249,222,13)"/><text x="16.4965%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.28%)</title><rect x="16.2465%" y="661" width="0.2801%" height="15" fill="rgb(244,185,38)"/><text x="16.4965%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.28%)</title><rect x="16.2465%" y="645" width="0.2801%" height="15" fill="rgb(236,202,9)"/><text x="16.4965%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.28%)</title><rect x="16.2465%" y="629" width="0.2801%" height="15" fill="rgb(250,229,37)"/><text x="16.4965%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.28%)</title><rect x="16.2465%" y="613" width="0.2801%" height="15" fill="rgb(206,174,23)"/><text x="16.4965%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.28%)</title><rect x="16.2465%" y="597" width="0.2801%" height="15" fill="rgb(211,33,43)"/><text x="16.4965%" y="607.50"></text></g><g><title>__libc_send (1 samples, 0.28%)</title><rect x="16.2465%" y="581" width="0.2801%" height="15" fill="rgb(245,58,50)"/><text x="16.4965%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="16.2465%" y="565" width="0.2801%" height="15" fill="rgb(244,68,36)"/><text x="16.4965%" y="575.50"></text></g><g><title>do_syscall_64 (1 samples, 0.28%)</title><rect x="16.2465%" y="549" width="0.2801%" height="15" fill="rgb(232,229,15)"/><text x="16.4965%" y="559.50"></text></g><g><title>__x64_sys_sendto (1 samples, 0.28%)</title><rect x="16.2465%" y="533" width="0.2801%" height="15" fill="rgb(254,30,23)"/><text x="16.4965%" y="543.50"></text></g><g><title>__sys_sendto (1 samples, 0.28%)</title><rect x="16.2465%" y="517" width="0.2801%" height="15" fill="rgb(235,160,14)"/><text x="16.4965%" y="527.50"></text></g><g><title>sock_sendmsg (1 samples, 0.28%)</title><rect x="16.2465%" y="501" width="0.2801%" height="15" fill="rgb(212,155,44)"/><text x="16.4965%" y="511.50"></text></g><g><title>tcp_sendmsg (1 samples, 0.28%)</title><rect x="16.2465%" y="485" width="0.2801%" height="15" fill="rgb(226,2,50)"/><text x="16.4965%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (1 samples, 0.28%)</title><rect x="16.2465%" y="469" width="0.2801%" height="15" fill="rgb(234,177,6)"/><text x="16.4965%" y="479.50"></text></g><g><title>__tcp_push_pending_frames (1 samples, 0.28%)</title><rect x="16.2465%" y="453" width="0.2801%" height="15" fill="rgb(217,24,9)"/><text x="16.4965%" y="463.50"></text></g><g><title>tcp_write_xmit (1 samples, 0.28%)</title><rect x="16.2465%" y="437" width="0.2801%" height="15" fill="rgb(220,13,46)"/><text x="16.4965%" y="447.50"></text></g><g><title>tcp_event_new_data_sent (1 samples, 0.28%)</title><rect x="16.2465%" y="421" width="0.2801%" height="15" fill="rgb(239,221,27)"/><text x="16.4965%" y="431.50"></text></g><g><title>decor_mysql::query_transformer::QueryTransformer::record_query_stats (2 samples, 0.56%)</title><rect x="16.5266%" y="709" width="0.5602%" height="15" fill="rgb(222,198,25)"/><text x="16.7766%" y="719.50"></text></g><g><title>decor_mysql::stats::get_qtype (2 samples, 0.56%)</title><rect x="16.5266%" y="693" width="0.5602%" height="15" fill="rgb(211,99,13)"/><text x="16.7766%" y="703.50"></text></g><g><title>sql_parser::parser::parse_statements (2 samples, 0.56%)</title><rect x="16.5266%" y="677" width="0.5602%" height="15" fill="rgb(232,111,31)"/><text x="16.7766%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (2 samples, 0.56%)</title><rect x="16.5266%" y="661" width="0.5602%" height="15" fill="rgb(245,82,37)"/><text x="16.7766%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (2 samples, 0.56%)</title><rect x="16.5266%" y="645" width="0.5602%" height="15" fill="rgb(227,149,46)"/><text x="16.7766%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_string (1 samples, 0.28%)</title><rect x="16.8067%" y="629" width="0.2801%" height="15" fill="rgb(218,36,50)"/><text x="17.0567%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="16.8067%" y="613" width="0.2801%" height="15" fill="rgb(226,80,48)"/><text x="17.0567%" y="623.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.28%)</title><rect x="16.8067%" y="597" width="0.2801%" height="15" fill="rgb(238,224,15)"/><text x="17.0567%" y="607.50"></text></g><g><title>_int_realloc (1 samples, 0.28%)</title><rect x="16.8067%" y="581" width="0.2801%" height="15" fill="rgb(241,136,10)"/><text x="17.0567%" y="591.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="16.8067%" y="565" width="0.2801%" height="15" fill="rgb(208,32,45)"/><text x="17.0567%" y="575.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.28%)</title><rect x="17.0868%" y="597" width="0.2801%" height="15" fill="rgb(207,135,9)"/><text x="17.3368%" y="607.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.28%)</title><rect x="17.0868%" y="581" width="0.2801%" height="15" fill="rgb(206,86,44)"/><text x="17.3368%" y="591.50"></text></g><g><title>page_fault (2 samples, 0.56%)</title><rect x="17.0868%" y="661" width="0.5602%" height="15" fill="rgb(245,177,15)"/><text x="17.3368%" y="671.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.56%)</title><rect x="17.0868%" y="645" width="0.5602%" height="15" fill="rgb(206,64,50)"/><text x="17.3368%" y="655.50"></text></g><g><title>handle_mm_fault (2 samples, 0.56%)</title><rect x="17.0868%" y="629" width="0.5602%" height="15" fill="rgb(234,36,40)"/><text x="17.3368%" y="639.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.56%)</title><rect x="17.0868%" y="613" width="0.5602%" height="15" fill="rgb(213,64,8)"/><text x="17.3368%" y="623.50"></text></g><g><title>mem_cgroup_try_charge_delay (1 samples, 0.28%)</title><rect x="17.3669%" y="597" width="0.2801%" height="15" fill="rgb(210,75,36)"/><text x="17.6169%" y="607.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (10 samples, 2.80%)</title><rect x="15.1261%" y="741" width="2.8011%" height="15" fill="rgb(229,88,21)"/><text x="15.3761%" y="751.50">ms..</text></g><g><title>&lt;decor_mysql::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (9 samples, 2.52%)</title><rect x="15.4062%" y="725" width="2.5210%" height="15" fill="rgb(252,204,47)"/><text x="15.6562%" y="735.50">&lt;d..</text></g><g><title>decor_mysql::sqlparser_cache::ParserCache::get_single_parsed_stmt (3 samples, 0.84%)</title><rect x="17.0868%" y="709" width="0.8403%" height="15" fill="rgb(208,77,27)"/><text x="17.3368%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (3 samples, 0.84%)</title><rect x="17.0868%" y="693" width="0.8403%" height="15" fill="rgb(221,76,26)"/><text x="17.3368%" y="703.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (3 samples, 0.84%)</title><rect x="17.0868%" y="677" width="0.8403%" height="15" fill="rgb(225,139,18)"/><text x="17.3368%" y="687.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (1 samples, 0.28%)</title><rect x="17.6471%" y="661" width="0.2801%" height="15" fill="rgb(230,137,11)"/><text x="17.8971%" y="671.50"></text></g><g><title>sql_parser::tokenizer::PeekableChars::next (1 samples, 0.28%)</title><rect x="17.6471%" y="645" width="0.2801%" height="15" fill="rgb(212,28,1)"/><text x="17.8971%" y="655.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.28%)</title><rect x="17.9272%" y="741" width="0.2801%" height="15" fill="rgb(248,164,17)"/><text x="18.1772%" y="751.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.28%)</title><rect x="17.9272%" y="725" width="0.2801%" height="15" fill="rgb(222,171,42)"/><text x="18.1772%" y="735.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.28%)</title><rect x="17.9272%" y="709" width="0.2801%" height="15" fill="rgb(243,84,45)"/><text x="18.1772%" y="719.50"></text></g><g><title>regex::compile::Compiler::c_repeat_range (1 samples, 0.28%)</title><rect x="17.9272%" y="693" width="0.2801%" height="15" fill="rgb(252,49,23)"/><text x="18.1772%" y="703.50"></text></g><g><title>regex::compile::Compiler::c_class (1 samples, 0.28%)</title><rect x="17.9272%" y="677" width="0.2801%" height="15" fill="rgb(215,19,7)"/><text x="18.1772%" y="687.50"></text></g><g><title>regex::compile::CompileClass::c_utf8_seq (1 samples, 0.28%)</title><rect x="17.9272%" y="661" width="0.2801%" height="15" fill="rgb(238,81,41)"/><text x="18.1772%" y="671.50"></text></g><g><title>page_fault (1 samples, 0.28%)</title><rect x="17.9272%" y="645" width="0.2801%" height="15" fill="rgb(210,199,37)"/><text x="18.1772%" y="655.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.28%)</title><rect x="17.9272%" y="629" width="0.2801%" height="15" fill="rgb(244,192,49)"/><text x="18.1772%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="18.4874%" y="661" width="0.2801%" height="15" fill="rgb(226,211,11)"/><text x="18.7374%" y="671.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="18.7675%" y="661" width="0.2801%" height="15" fill="rgb(236,162,54)"/><text x="19.0175%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="19.0476%" y="645" width="0.2801%" height="15" fill="rgb(220,229,9)"/><text x="19.2976%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (29 samples, 8.12%)</title><rect x="19.0476%" y="661" width="8.1232%" height="15" fill="rgb(250,87,22)"/><text x="19.2976%" y="671.50">sql_parser:..</text></g><g><title>sql_parser::parser::Parser::expected (28 samples, 7.84%)</title><rect x="19.3277%" y="645" width="7.8431%" height="15" fill="rgb(239,43,17)"/><text x="19.5777%" y="655.50">sql_parser:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 7.84%)</title><rect x="19.3277%" y="629" width="7.8431%" height="15" fill="rgb(231,177,25)"/><text x="19.5777%" y="639.50">&lt;alloc::str..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 7.84%)</title><rect x="19.3277%" y="613" width="7.8431%" height="15" fill="rgb(219,179,1)"/><text x="19.5777%" y="623.50">&lt;alloc::vec..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 7.84%)</title><rect x="19.3277%" y="597" width="7.8431%" height="15" fill="rgb(238,219,53)"/><text x="19.5777%" y="607.50">alloc::slic..</text></g><g><title>alloc::slice::hack::to_vec (28 samples, 7.84%)</title><rect x="19.3277%" y="581" width="7.8431%" height="15" fill="rgb(232,167,36)"/><text x="19.5777%" y="591.50">alloc::slic..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (28 samples, 7.84%)</title><rect x="19.3277%" y="565" width="7.8431%" height="15" fill="rgb(244,19,51)"/><text x="19.5777%" y="575.50">alloc::vec:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 7.84%)</title><rect x="19.3277%" y="549" width="7.8431%" height="15" fill="rgb(224,6,22)"/><text x="19.5777%" y="559.50">&lt;alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (28 samples, 7.84%)</title><rect x="19.3277%" y="533" width="7.8431%" height="15" fill="rgb(224,145,5)"/><text x="19.5777%" y="543.50">alloc::vec:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 7.84%)</title><rect x="19.3277%" y="517" width="7.8431%" height="15" fill="rgb(234,130,49)"/><text x="19.5777%" y="527.50">core::intri..</text></g><g><title>__memmove_avx_unaligned_erms (28 samples, 7.84%)</title><rect x="19.3277%" y="501" width="7.8431%" height="15" fill="rgb(254,6,2)"/><text x="19.5777%" y="511.50">__memmove_a..</text></g><g><title>sql_parser::parser::Parser::parse_keyword (1 samples, 0.28%)</title><rect x="27.1709%" y="661" width="0.2801%" height="15" fill="rgb(208,96,46)"/><text x="27.4209%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.28%)</title><rect x="27.1709%" y="645" width="0.2801%" height="15" fill="rgb(239,3,39)"/><text x="27.4209%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="27.7311%" y="645" width="0.2801%" height="15" fill="rgb(233,210,1)"/><text x="27.9811%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="27.7311%" y="629" width="0.2801%" height="15" fill="rgb(244,137,37)"/><text x="27.9811%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.28%)</title><rect x="27.7311%" y="613" width="0.2801%" height="15" fill="rgb(240,136,2)"/><text x="27.9811%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.28%)</title><rect x="27.7311%" y="597" width="0.2801%" height="15" fill="rgb(239,18,37)"/><text x="27.9811%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="27.7311%" y="581" width="0.2801%" height="15" fill="rgb(218,185,22)"/><text x="27.9811%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="27.7311%" y="565" width="0.2801%" height="15" fill="rgb(225,218,4)"/><text x="27.9811%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.28%)</title><rect x="27.7311%" y="549" width="0.2801%" height="15" fill="rgb(230,182,32)"/><text x="27.9811%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.28%)</title><rect x="27.7311%" y="533" width="0.2801%" height="15" fill="rgb(242,56,43)"/><text x="27.9811%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.28%)</title><rect x="27.7311%" y="517" width="0.2801%" height="15" fill="rgb(233,99,24)"/><text x="27.9811%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.28%)</title><rect x="27.7311%" y="501" width="0.2801%" height="15" fill="rgb(234,209,42)"/><text x="27.9811%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.28%)</title><rect x="27.7311%" y="485" width="0.2801%" height="15" fill="rgb(227,7,12)"/><text x="27.9811%" y="495.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.28%)</title><rect x="27.7311%" y="469" width="0.2801%" height="15" fill="rgb(245,203,43)"/><text x="27.9811%" y="479.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="27.7311%" y="453" width="0.2801%" height="15" fill="rgb(238,205,33)"/><text x="27.9811%" y="463.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 10.08%)</title><rect x="18.2073%" y="741" width="10.0840%" height="15" fill="rgb(231,56,7)"/><text x="18.4573%" y="751.50">sql_parser::par..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (36 samples, 10.08%)</title><rect x="18.2073%" y="725" width="10.0840%" height="15" fill="rgb(244,186,29)"/><text x="18.4573%" y="735.50">sql_parser::par..</text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (36 samples, 10.08%)</title><rect x="18.2073%" y="709" width="10.0840%" height="15" fill="rgb(234,111,31)"/><text x="18.4573%" y="719.50">sql_parser::par..</text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 10.08%)</title><rect x="18.2073%" y="693" width="10.0840%" height="15" fill="rgb(241,149,10)"/><text x="18.4573%" y="703.50">sql_parser::par..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (36 samples, 10.08%)</title><rect x="18.2073%" y="677" width="10.0840%" height="15" fill="rgb(249,206,44)"/><text x="18.4573%" y="687.50">sql_parser::par..</text></g><g><title>sql_parser::parser::Parser::parse_value (3 samples, 0.84%)</title><rect x="27.4510%" y="661" width="0.8403%" height="15" fill="rgb(251,153,30)"/><text x="27.7010%" y="671.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="28.0112%" y="645" width="0.2801%" height="15" fill="rgb(239,152,38)"/><text x="28.2612%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (1 samples, 0.28%)</title><rect x="28.2913%" y="741" width="0.2801%" height="15" fill="rgb(249,139,47)"/><text x="28.5413%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (1 samples, 0.28%)</title><rect x="28.2913%" y="725" width="0.2801%" height="15" fill="rgb(244,64,35)"/><text x="28.5413%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (1 samples, 0.28%)</title><rect x="28.2913%" y="709" width="0.2801%" height="15" fill="rgb(216,46,15)"/><text x="28.5413%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (1 samples, 0.28%)</title><rect x="28.2913%" y="693" width="0.2801%" height="15" fill="rgb(250,74,19)"/><text x="28.5413%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (1 samples, 0.28%)</title><rect x="28.2913%" y="677" width="0.2801%" height="15" fill="rgb(249,42,33)"/><text x="28.5413%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (1 samples, 0.28%)</title><rect x="28.2913%" y="661" width="0.2801%" height="15" fill="rgb(242,149,17)"/><text x="28.5413%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="28.2913%" y="645" width="0.2801%" height="15" fill="rgb(244,29,21)"/><text x="28.5413%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="28.2913%" y="629" width="0.2801%" height="15" fill="rgb(220,130,37)"/><text x="28.5413%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.28%)</title><rect x="28.2913%" y="613" width="0.2801%" height="15" fill="rgb(211,67,2)"/><text x="28.5413%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.28%)</title><rect x="28.2913%" y="597" width="0.2801%" height="15" fill="rgb(235,68,52)"/><text x="28.5413%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="28.2913%" y="581" width="0.2801%" height="15" fill="rgb(246,142,3)"/><text x="28.5413%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="28.2913%" y="565" width="0.2801%" height="15" fill="rgb(241,25,7)"/><text x="28.5413%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.28%)</title><rect x="28.2913%" y="549" width="0.2801%" height="15" fill="rgb(242,119,39)"/><text x="28.5413%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.28%)</title><rect x="28.2913%" y="533" width="0.2801%" height="15" fill="rgb(241,98,45)"/><text x="28.5413%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.28%)</title><rect x="28.2913%" y="517" width="0.2801%" height="15" fill="rgb(254,28,30)"/><text x="28.5413%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.28%)</title><rect x="28.2913%" y="501" width="0.2801%" height="15" fill="rgb(241,142,54)"/><text x="28.5413%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.28%)</title><rect x="28.2913%" y="485" width="0.2801%" height="15" fill="rgb(222,85,15)"/><text x="28.5413%" y="495.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.28%)</title><rect x="28.2913%" y="469" width="0.2801%" height="15" fill="rgb(210,85,47)"/><text x="28.5413%" y="479.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="28.2913%" y="453" width="0.2801%" height="15" fill="rgb(224,206,25)"/><text x="28.5413%" y="463.50"></text></g><g><title>sysmalloc (1 samples, 0.28%)</title><rect x="28.2913%" y="437" width="0.2801%" height="15" fill="rgb(243,201,19)"/><text x="28.5413%" y="447.50"></text></g><g><title>__GI___mprotect (1 samples, 0.28%)</title><rect x="28.2913%" y="421" width="0.2801%" height="15" fill="rgb(236,59,4)"/><text x="28.5413%" y="431.50"></text></g><g><title>error_entry (1 samples, 0.28%)</title><rect x="28.2913%" y="405" width="0.2801%" height="15" fill="rgb(254,179,45)"/><text x="28.5413%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.28%)</title><rect x="28.5714%" y="677" width="0.2801%" height="15" fill="rgb(226,14,10)"/><text x="28.8214%" y="687.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.28%)</title><rect x="28.5714%" y="661" width="0.2801%" height="15" fill="rgb(244,27,41)"/><text x="28.8214%" y="671.50"></text></g><g><title>_int_realloc (1 samples, 0.28%)</title><rect x="28.5714%" y="645" width="0.2801%" height="15" fill="rgb(235,35,32)"/><text x="28.8214%" y="655.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="28.5714%" y="629" width="0.2801%" height="15" fill="rgb(218,68,31)"/><text x="28.8214%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (2 samples, 0.56%)</title><rect x="28.5714%" y="741" width="0.5602%" height="15" fill="rgb(207,120,37)"/><text x="28.8214%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (2 samples, 0.56%)</title><rect x="28.5714%" y="725" width="0.5602%" height="15" fill="rgb(227,98,0)"/><text x="28.8214%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (2 samples, 0.56%)</title><rect x="28.5714%" y="709" width="0.5602%" height="15" fill="rgb(207,7,3)"/><text x="28.8214%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (2 samples, 0.56%)</title><rect x="28.5714%" y="693" width="0.5602%" height="15" fill="rgb(206,98,19)"/><text x="28.8214%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (1 samples, 0.28%)</title><rect x="28.8515%" y="677" width="0.2801%" height="15" fill="rgb(217,5,26)"/><text x="29.1015%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="28.8515%" y="661" width="0.2801%" height="15" fill="rgb(235,190,38)"/><text x="29.1015%" y="671.50"></text></g><g><title>sql_parser::parser::parse_statements (2 samples, 0.56%)</title><rect x="29.1317%" y="741" width="0.5602%" height="15" fill="rgb(247,86,24)"/><text x="29.3817%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (2 samples, 0.56%)</title><rect x="29.1317%" y="725" width="0.5602%" height="15" fill="rgb(205,101,16)"/><text x="29.3817%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_columns (2 samples, 0.56%)</title><rect x="29.1317%" y="709" width="0.5602%" height="15" fill="rgb(246,168,33)"/><text x="29.3817%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (2 samples, 0.56%)</title><rect x="29.1317%" y="693" width="0.5602%" height="15" fill="rgb(231,114,1)"/><text x="29.3817%" y="703.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="29.4118%" y="677" width="0.2801%" height="15" fill="rgb(207,184,53)"/><text x="29.6618%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="29.4118%" y="661" width="0.2801%" height="15" fill="rgb(224,95,51)"/><text x="29.6618%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.28%)</title><rect x="29.4118%" y="645" width="0.2801%" height="15" fill="rgb(212,188,45)"/><text x="29.6618%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.28%)</title><rect x="29.4118%" y="629" width="0.2801%" height="15" fill="rgb(223,154,38)"/><text x="29.6618%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.28%)</title><rect x="29.4118%" y="613" width="0.2801%" height="15" fill="rgb(251,22,52)"/><text x="29.6618%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="29.4118%" y="597" width="0.2801%" height="15" fill="rgb(229,209,22)"/><text x="29.6618%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.28%)</title><rect x="29.4118%" y="581" width="0.2801%" height="15" fill="rgb(234,138,34)"/><text x="29.6618%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.28%)</title><rect x="29.4118%" y="565" width="0.2801%" height="15" fill="rgb(212,95,11)"/><text x="29.6618%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.28%)</title><rect x="29.4118%" y="549" width="0.2801%" height="15" fill="rgb(240,179,47)"/><text x="29.6618%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.28%)</title><rect x="29.4118%" y="533" width="0.2801%" height="15" fill="rgb(240,163,11)"/><text x="29.6618%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.28%)</title><rect x="29.4118%" y="517" width="0.2801%" height="15" fill="rgb(236,37,12)"/><text x="29.6618%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.28%)</title><rect x="29.4118%" y="501" width="0.2801%" height="15" fill="rgb(232,164,16)"/><text x="29.6618%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.28%)</title><rect x="29.4118%" y="485" width="0.2801%" height="15" fill="rgb(244,205,15)"/><text x="29.6618%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.28%)</title><rect x="29.4118%" y="469" width="0.2801%" height="15" fill="rgb(223,117,47)"/><text x="29.6618%" y="479.50"></text></g><g><title>__GI___openat (1 samples, 0.28%)</title><rect x="29.6919%" y="533" width="0.2801%" height="15" fill="rgb(244,107,35)"/><text x="29.9419%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="29.6919%" y="517" width="0.2801%" height="15" fill="rgb(205,140,8)"/><text x="29.9419%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.28%)</title><rect x="29.6919%" y="501" width="0.2801%" height="15" fill="rgb(228,84,46)"/><text x="29.9419%" y="511.50"></text></g><g><title>__x64_sys_openat (1 samples, 0.28%)</title><rect x="29.6919%" y="485" width="0.2801%" height="15" fill="rgb(254,188,9)"/><text x="29.9419%" y="495.50"></text></g><g><title>do_sys_openat2 (1 samples, 0.28%)</title><rect x="29.6919%" y="469" width="0.2801%" height="15" fill="rgb(206,112,54)"/><text x="29.9419%" y="479.50"></text></g><g><title>do_filp_open (1 samples, 0.28%)</title><rect x="29.6919%" y="453" width="0.2801%" height="15" fill="rgb(216,84,49)"/><text x="29.9419%" y="463.50"></text></g><g><title>path_openat (1 samples, 0.28%)</title><rect x="29.6919%" y="437" width="0.2801%" height="15" fill="rgb(214,194,35)"/><text x="29.9419%" y="447.50"></text></g><g><title>alloc_empty_file (1 samples, 0.28%)</title><rect x="29.6919%" y="421" width="0.2801%" height="15" fill="rgb(249,28,3)"/><text x="29.9419%" y="431.50"></text></g><g><title>__alloc_file (1 samples, 0.28%)</title><rect x="29.6919%" y="405" width="0.2801%" height="15" fill="rgb(222,56,52)"/><text x="29.9419%" y="415.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.28%)</title><rect x="29.6919%" y="389" width="0.2801%" height="15" fill="rgb(245,217,50)"/><text x="29.9419%" y="399.50"></text></g><g><title>[unknown] (100 samples, 28.01%)</title><rect x="2.2409%" y="757" width="28.0112%" height="15" fill="rgb(213,201,24)"/><text x="2.4909%" y="767.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (2 samples, 0.56%)</title><rect x="29.6919%" y="741" width="0.5602%" height="15" fill="rgb(248,116,28)"/><text x="29.9419%" y="751.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.56%)</title><rect x="29.6919%" y="725" width="0.5602%" height="15" fill="rgb(219,72,43)"/><text x="29.9419%" y="735.50"></text></g><g><title>std::panicking::try (2 samples, 0.56%)</title><rect x="29.6919%" y="709" width="0.5602%" height="15" fill="rgb(209,138,14)"/><text x="29.9419%" y="719.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.56%)</title><rect x="29.6919%" y="693" width="0.5602%" height="15" fill="rgb(222,18,33)"/><text x="29.9419%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 0.56%)</title><rect x="29.6919%" y="677" width="0.5602%" height="15" fill="rgb(213,199,7)"/><text x="29.9419%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (2 samples, 0.56%)</title><rect x="29.6919%" y="661" width="0.5602%" height="15" fill="rgb(250,110,10)"/><text x="29.9419%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.56%)</title><rect x="29.6919%" y="645" width="0.5602%" height="15" fill="rgb(248,123,6)"/><text x="29.9419%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (2 samples, 0.56%)</title><rect x="29.6919%" y="629" width="0.5602%" height="15" fill="rgb(206,91,31)"/><text x="29.9419%" y="639.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.56%)</title><rect x="29.6919%" y="613" width="0.5602%" height="15" fill="rgb(211,154,13)"/><text x="29.9419%" y="623.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.56%)</title><rect x="29.6919%" y="597" width="0.5602%" height="15" fill="rgb(225,148,7)"/><text x="29.9419%" y="607.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.56%)</title><rect x="29.6919%" y="581" width="0.5602%" height="15" fill="rgb(220,160,43)"/><text x="29.9419%" y="591.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.56%)</title><rect x="29.6919%" y="565" width="0.5602%" height="15" fill="rgb(213,52,39)"/><text x="29.9419%" y="575.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.56%)</title><rect x="29.6919%" y="549" width="0.5602%" height="15" fill="rgb(243,137,7)"/><text x="29.9419%" y="559.50"></text></g><g><title>__libc_close (1 samples, 0.28%)</title><rect x="29.9720%" y="533" width="0.2801%" height="15" fill="rgb(230,79,13)"/><text x="30.2220%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="29.9720%" y="517" width="0.2801%" height="15" fill="rgb(247,105,23)"/><text x="30.2220%" y="527.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="29.9720%" y="501" width="0.2801%" height="15" fill="rgb(223,179,41)"/><text x="30.2220%" y="511.50"></text></g><g><title>task_work_run (1 samples, 0.28%)</title><rect x="29.9720%" y="485" width="0.2801%" height="15" fill="rgb(218,9,34)"/><text x="30.2220%" y="495.50"></text></g><g><title>__fput (1 samples, 0.28%)</title><rect x="29.9720%" y="469" width="0.2801%" height="15" fill="rgb(222,106,8)"/><text x="30.2220%" y="479.50"></text></g><g><title>kernfs_fop_release (1 samples, 0.28%)</title><rect x="29.9720%" y="453" width="0.2801%" height="15" fill="rgb(211,220,0)"/><text x="30.2220%" y="463.50"></text></g><g><title>kfree (1 samples, 0.28%)</title><rect x="29.9720%" y="437" width="0.2801%" height="15" fill="rgb(229,52,16)"/><text x="30.2220%" y="447.50"></text></g><g><title>slab_free_freelist_hook (1 samples, 0.28%)</title><rect x="29.9720%" y="421" width="0.2801%" height="15" fill="rgb(212,155,18)"/><text x="30.2220%" y="431.50"></text></g><g><title>mysql::conn::Conn::new (1 samples, 0.28%)</title><rect x="30.2521%" y="629" width="0.2801%" height="15" fill="rgb(242,21,14)"/><text x="30.5021%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="30.2521%" y="613" width="0.2801%" height="15" fill="rgb(222,19,48)"/><text x="30.5021%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="30.2521%" y="597" width="0.2801%" height="15" fill="rgb(232,45,27)"/><text x="30.5021%" y="607.50"></text></g><g><title>__libc_close (1 samples, 0.28%)</title><rect x="30.2521%" y="581" width="0.2801%" height="15" fill="rgb(249,103,42)"/><text x="30.5021%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="30.2521%" y="565" width="0.2801%" height="15" fill="rgb(246,81,33)"/><text x="30.5021%" y="575.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.28%)</title><rect x="30.2521%" y="549" width="0.2801%" height="15" fill="rgb(252,33,42)"/><text x="30.5021%" y="559.50"></text></g><g><title>task_work_run (1 samples, 0.28%)</title><rect x="30.2521%" y="533" width="0.2801%" height="15" fill="rgb(209,212,41)"/><text x="30.5021%" y="543.50"></text></g><g><title>__fput (1 samples, 0.28%)</title><rect x="30.2521%" y="517" width="0.2801%" height="15" fill="rgb(207,154,6)"/><text x="30.5021%" y="527.50"></text></g><g><title>sock_close (1 samples, 0.28%)</title><rect x="30.2521%" y="501" width="0.2801%" height="15" fill="rgb(223,64,47)"/><text x="30.5021%" y="511.50"></text></g><g><title>__sock_release (1 samples, 0.28%)</title><rect x="30.2521%" y="485" width="0.2801%" height="15" fill="rgb(211,161,38)"/><text x="30.5021%" y="495.50"></text></g><g><title>unix_release (1 samples, 0.28%)</title><rect x="30.2521%" y="469" width="0.2801%" height="15" fill="rgb(219,138,40)"/><text x="30.5021%" y="479.50"></text></g><g><title>unix_release_sock (1 samples, 0.28%)</title><rect x="30.2521%" y="453" width="0.2801%" height="15" fill="rgb(241,228,46)"/><text x="30.5021%" y="463.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.28%)</title><rect x="30.2521%" y="437" width="0.2801%" height="15" fill="rgb(223,209,38)"/><text x="30.5021%" y="447.50"></text></g><g><title>__GI___clone (2 samples, 0.56%)</title><rect x="30.2521%" y="757" width="0.5602%" height="15" fill="rgb(236,164,45)"/><text x="30.5021%" y="767.50"></text></g><g><title>start_thread (2 samples, 0.56%)</title><rect x="30.2521%" y="741" width="0.5602%" height="15" fill="rgb(231,15,5)"/><text x="30.5021%" y="751.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.56%)</title><rect x="30.2521%" y="725" width="0.5602%" height="15" fill="rgb(252,35,15)"/><text x="30.5021%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2 samples, 0.56%)</title><rect x="30.2521%" y="709" width="0.5602%" height="15" fill="rgb(248,181,18)"/><text x="30.5021%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2 samples, 0.56%)</title><rect x="30.2521%" y="693" width="0.5602%" height="15" fill="rgb(233,39,42)"/><text x="30.5021%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (2 samples, 0.56%)</title><rect x="30.2521%" y="677" width="0.5602%" height="15" fill="rgb(238,110,33)"/><text x="30.5021%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.56%)</title><rect x="30.2521%" y="661" width="0.5602%" height="15" fill="rgb(233,195,10)"/><text x="30.5021%" y="671.50"></text></g><g><title>decor_mysql::Shim::run_on_tcp (2 samples, 0.56%)</title><rect x="30.2521%" y="645" width="0.5602%" height="15" fill="rgb(254,105,3)"/><text x="30.5021%" y="655.50"></text></g><g><title>page_fault (1 samples, 0.28%)</title><rect x="30.5322%" y="629" width="0.2801%" height="15" fill="rgb(221,225,9)"/><text x="30.7822%" y="639.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.28%)</title><rect x="30.5322%" y="613" width="0.2801%" height="15" fill="rgb(224,227,45)"/><text x="30.7822%" y="623.50"></text></g><g><title>handle_mm_fault (1 samples, 0.28%)</title><rect x="30.5322%" y="597" width="0.2801%" height="15" fill="rgb(229,198,43)"/><text x="30.7822%" y="607.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.28%)</title><rect x="30.5322%" y="581" width="0.2801%" height="15" fill="rgb(206,209,35)"/><text x="30.7822%" y="591.50"></text></g><g><title>filemap_map_pages (1 samples, 0.28%)</title><rect x="30.5322%" y="565" width="0.2801%" height="15" fill="rgb(245,195,53)"/><text x="30.7822%" y="575.50"></text></g><g><title>xas_find (1 samples, 0.28%)</title><rect x="30.5322%" y="549" width="0.2801%" height="15" fill="rgb(240,92,26)"/><text x="30.7822%" y="559.50"></text></g><g><title>xas_load (1 samples, 0.28%)</title><rect x="30.5322%" y="533" width="0.2801%" height="15" fill="rgb(207,40,23)"/><text x="30.7822%" y="543.50"></text></g><g><title>xas_start (1 samples, 0.28%)</title><rect x="30.5322%" y="517" width="0.2801%" height="15" fill="rgb(223,111,35)"/><text x="30.7822%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="30.8123%" y="581" width="0.2801%" height="15" fill="rgb(229,147,28)"/><text x="31.0623%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="30.8123%" y="565" width="0.2801%" height="15" fill="rgb(211,29,28)"/><text x="31.0623%" y="575.50"></text></g><g><title>__GI_munmap (1 samples, 0.28%)</title><rect x="30.8123%" y="549" width="0.2801%" height="15" fill="rgb(228,72,33)"/><text x="31.0623%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.28%)</title><rect x="30.8123%" y="533" width="0.2801%" height="15" fill="rgb(205,214,31)"/><text x="31.0623%" y="543.50"></text></g><g><title>do_syscall_64 (1 samples, 0.28%)</title><rect x="30.8123%" y="517" width="0.2801%" height="15" fill="rgb(224,111,15)"/><text x="31.0623%" y="527.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.28%)</title><rect x="30.8123%" y="501" width="0.2801%" height="15" fill="rgb(253,21,26)"/><text x="31.0623%" y="511.50"></text></g><g><title>__vm_munmap (1 samples, 0.28%)</title><rect x="30.8123%" y="485" width="0.2801%" height="15" fill="rgb(245,139,43)"/><text x="31.0623%" y="495.50"></text></g><g><title>__do_munmap (1 samples, 0.28%)</title><rect x="30.8123%" y="469" width="0.2801%" height="15" fill="rgb(252,170,7)"/><text x="31.0623%" y="479.50"></text></g><g><title>unmap_region (1 samples, 0.28%)</title><rect x="30.8123%" y="453" width="0.2801%" height="15" fill="rgb(231,118,14)"/><text x="31.0623%" y="463.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.28%)</title><rect x="30.8123%" y="437" width="0.2801%" height="15" fill="rgb(238,83,0)"/><text x="31.0623%" y="447.50"></text></g><g><title>release_pages (1 samples, 0.28%)</title><rect x="30.8123%" y="421" width="0.2801%" height="15" fill="rgb(221,39,39)"/><text x="31.0623%" y="431.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.28%)</title><rect x="31.0924%" y="501" width="0.2801%" height="15" fill="rgb(222,119,46)"/><text x="31.3424%" y="511.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.28%)</title><rect x="31.0924%" y="485" width="0.2801%" height="15" fill="rgb(222,165,49)"/><text x="31.3424%" y="495.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.28%)</title><rect x="31.0924%" y="469" width="0.2801%" height="15" fill="rgb(219,113,52)"/><text x="31.3424%" y="479.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.28%)</title><rect x="31.0924%" y="453" width="0.2801%" height="15" fill="rgb(214,7,15)"/><text x="31.3424%" y="463.50"></text></g><g><title>hwloc_bitmap_alloc (1 samples, 0.28%)</title><rect x="31.0924%" y="437" width="0.2801%" height="15" fill="rgb(235,32,4)"/><text x="31.3424%" y="447.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.28%)</title><rect x="31.0924%" y="421" width="0.2801%" height="15" fill="rgb(238,90,54)"/><text x="31.3424%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="31.0924%" y="405" width="0.2801%" height="15" fill="rgb(213,208,19)"/><text x="31.3424%" y="415.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (229 samples, 64.15%)</title><rect x="31.9328%" y="277" width="64.1457%" height="15" fill="rgb(233,156,4)"/><text x="32.1828%" y="287.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (229 samples, 64.15%)</title><rect x="31.9328%" y="261" width="64.1457%" height="15" fill="rgb(207,194,5)"/><text x="32.1828%" y="271.50">native_write_msr</text></g><g><title>hwloc::Topology::new (235 samples, 65.83%)</title><rect x="31.0924%" y="581" width="65.8263%" height="15" fill="rgb(206,111,30)"/><text x="31.3424%" y="591.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (235 samples, 65.83%)</title><rect x="31.0924%" y="565" width="65.8263%" height="15" fill="rgb(243,70,54)"/><text x="31.3424%" y="575.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (235 samples, 65.83%)</title><rect x="31.0924%" y="549" width="65.8263%" height="15" fill="rgb(242,28,8)"/><text x="31.3424%" y="559.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (235 samples, 65.83%)</title><rect x="31.0924%" y="533" width="65.8263%" height="15" fill="rgb(219,106,18)"/><text x="31.3424%" y="543.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (235 samples, 65.83%)</title><rect x="31.0924%" y="517" width="65.8263%" height="15" fill="rgb(244,222,10)"/><text x="31.3424%" y="527.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (234 samples, 65.55%)</title><rect x="31.3725%" y="501" width="65.5462%" height="15" fill="rgb(236,179,52)"/><text x="31.6225%" y="511.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (234 samples, 65.55%)</title><rect x="31.3725%" y="485" width="65.5462%" height="15" fill="rgb(213,23,39)"/><text x="31.6225%" y="495.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (234 samples, 65.55%)</title><rect x="31.3725%" y="469" width="65.5462%" height="15" fill="rgb(238,48,10)"/><text x="31.6225%" y="479.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (234 samples, 65.55%)</title><rect x="31.3725%" y="453" width="65.5462%" height="15" fill="rgb(251,196,23)"/><text x="31.6225%" y="463.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 65.55%)</title><rect x="31.3725%" y="437" width="65.5462%" height="15" fill="rgb(250,152,24)"/><text x="31.6225%" y="447.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (234 samples, 65.55%)</title><rect x="31.3725%" y="421" width="65.5462%" height="15" fill="rgb(209,150,17)"/><text x="31.6225%" y="431.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 65.55%)</title><rect x="31.3725%" y="405" width="65.5462%" height="15" fill="rgb(234,202,34)"/><text x="31.6225%" y="415.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (234 samples, 65.55%)</title><rect x="31.3725%" y="389" width="65.5462%" height="15" fill="rgb(253,148,53)"/><text x="31.6225%" y="399.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (234 samples, 65.55%)</title><rect x="31.3725%" y="373" width="65.5462%" height="15" fill="rgb(218,129,16)"/><text x="31.6225%" y="383.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (234 samples, 65.55%)</title><rect x="31.3725%" y="357" width="65.5462%" height="15" fill="rgb(216,85,19)"/><text x="31.6225%" y="367.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (234 samples, 65.55%)</title><rect x="31.3725%" y="341" width="65.5462%" height="15" fill="rgb(235,228,7)"/><text x="31.6225%" y="351.50">preempt_schedule_common</text></g><g><title>__schedule (234 samples, 65.55%)</title><rect x="31.3725%" y="325" width="65.5462%" height="15" fill="rgb(245,175,0)"/><text x="31.6225%" y="335.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 65.55%)</title><rect x="31.3725%" y="309" width="65.5462%" height="15" fill="rgb(208,168,36)"/><text x="31.6225%" y="319.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (233 samples, 65.27%)</title><rect x="31.6527%" y="293" width="65.2661%" height="15" fill="rgb(246,171,24)"/><text x="31.9027%" y="303.50">__perf_event_task_sched_in</text></g><g><title>_raw_spin_unlock (3 samples, 0.84%)</title><rect x="96.0784%" y="277" width="0.8403%" height="15" fill="rgb(215,142,24)"/><text x="96.3284%" y="287.50"></text></g><g><title>preempt_count_sub (1 samples, 0.28%)</title><rect x="96.6387%" y="261" width="0.2801%" height="15" fill="rgb(250,187,7)"/><text x="96.8887%" y="271.50"></text></g><g><title>__libc_start_main (237 samples, 66.39%)</title><rect x="30.8123%" y="741" width="66.3866%" height="15" fill="rgb(228,66,33)"/><text x="31.0623%" y="751.50">__libc_start_main</text></g><g><title>main (237 samples, 66.39%)</title><rect x="30.8123%" y="725" width="66.3866%" height="15" fill="rgb(234,215,21)"/><text x="31.0623%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (237 samples, 66.39%)</title><rect x="30.8123%" y="709" width="66.3866%" height="15" fill="rgb(222,191,20)"/><text x="31.0623%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (237 samples, 66.39%)</title><rect x="30.8123%" y="693" width="66.3866%" height="15" fill="rgb(245,79,54)"/><text x="31.0623%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (237 samples, 66.39%)</title><rect x="30.8123%" y="677" width="66.3866%" height="15" fill="rgb(240,10,37)"/><text x="31.0623%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (237 samples, 66.39%)</title><rect x="30.8123%" y="661" width="66.3866%" height="15" fill="rgb(214,192,32)"/><text x="31.0623%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (237 samples, 66.39%)</title><rect x="30.8123%" y="645" width="66.3866%" height="15" fill="rgb(209,36,54)"/><text x="31.0623%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (237 samples, 66.39%)</title><rect x="30.8123%" y="629" width="66.3866%" height="15" fill="rgb(220,10,11)"/><text x="31.0623%" y="639.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (237 samples, 66.39%)</title><rect x="30.8123%" y="613" width="66.3866%" height="15" fill="rgb(221,106,17)"/><text x="31.0623%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters_microbenchmarks::main (237 samples, 66.39%)</title><rect x="30.8123%" y="597" width="66.3866%" height="15" fill="rgb(251,142,44)"/><text x="31.0623%" y="607.50">lobsters_microbenchmarks::main</text></g><g><title>std::net::each_addr (1 samples, 0.28%)</title><rect x="96.9188%" y="581" width="0.2801%" height="15" fill="rgb(238,13,15)"/><text x="97.1688%" y="591.50"></text></g><g><title>std::sys_common::net::TcpListener::bind (1 samples, 0.28%)</title><rect x="96.9188%" y="565" width="0.2801%" height="15" fill="rgb(208,107,27)"/><text x="97.1688%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::new (1 samples, 0.28%)</title><rect x="96.9188%" y="549" width="0.2801%" height="15" fill="rgb(205,136,37)"/><text x="97.1688%" y="559.50"></text></g><g><title>__GI___socket (1 samples, 0.28%)</title><rect x="96.9188%" y="533" width="0.2801%" height="15" fill="rgb(250,205,27)"/><text x="97.1688%" y="543.50"></text></g><g><title>_start (238 samples, 66.67%)</title><rect x="30.8123%" y="757" width="66.6667%" height="15" fill="rgb(210,80,43)"/><text x="31.0623%" y="767.50">_start</text></g><g><title>_dl_start (1 samples, 0.28%)</title><rect x="97.1989%" y="741" width="0.2801%" height="15" fill="rgb(247,160,36)"/><text x="97.4489%" y="751.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.28%)</title><rect x="97.1989%" y="725" width="0.2801%" height="15" fill="rgb(234,13,49)"/><text x="97.4489%" y="735.50"></text></g><g><title>dl_main (1 samples, 0.28%)</title><rect x="97.1989%" y="709" width="0.2801%" height="15" fill="rgb(234,122,0)"/><text x="97.4489%" y="719.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.28%)</title><rect x="97.1989%" y="693" width="0.2801%" height="15" fill="rgb(207,146,38)"/><text x="97.4489%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.28%)</title><rect x="97.1989%" y="677" width="0.2801%" height="15" fill="rgb(207,177,25)"/><text x="97.4489%" y="687.50"></text></g><g><title>openaux (1 samples, 0.28%)</title><rect x="97.1989%" y="661" width="0.2801%" height="15" fill="rgb(211,178,42)"/><text x="97.4489%" y="671.50"></text></g><g><title>_dl_map_object (1 samples, 0.28%)</title><rect x="97.1989%" y="645" width="0.2801%" height="15" fill="rgb(230,69,54)"/><text x="97.4489%" y="655.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.28%)</title><rect x="97.1989%" y="629" width="0.2801%" height="15" fill="rgb(214,135,41)"/><text x="97.4489%" y="639.50"></text></g><g><title>memset (1 samples, 0.28%)</title><rect x="97.1989%" y="613" width="0.2801%" height="15" fill="rgb(237,67,25)"/><text x="97.4489%" y="623.50"></text></g><g><title>page_fault (1 samples, 0.28%)</title><rect x="97.1989%" y="597" width="0.2801%" height="15" fill="rgb(222,189,50)"/><text x="97.4489%" y="607.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.28%)</title><rect x="97.1989%" y="581" width="0.2801%" height="15" fill="rgb(245,148,34)"/><text x="97.4489%" y="591.50"></text></g><g><title>handle_mm_fault (1 samples, 0.28%)</title><rect x="97.1989%" y="565" width="0.2801%" height="15" fill="rgb(222,29,6)"/><text x="97.4489%" y="575.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.28%)</title><rect x="97.1989%" y="549" width="0.2801%" height="15" fill="rgb(221,189,43)"/><text x="97.4489%" y="559.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.28%)</title><rect x="97.1989%" y="533" width="0.2801%" height="15" fill="rgb(207,36,27)"/><text x="97.4489%" y="543.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.28%)</title><rect x="97.1989%" y="517" width="0.2801%" height="15" fill="rgb(217,90,24)"/><text x="97.4489%" y="527.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.28%)</title><rect x="97.1989%" y="501" width="0.2801%" height="15" fill="rgb(224,66,35)"/><text x="97.4489%" y="511.50"></text></g><g><title>prep_new_page (1 samples, 0.28%)</title><rect x="97.1989%" y="485" width="0.2801%" height="15" fill="rgb(221,13,50)"/><text x="97.4489%" y="495.50"></text></g><g><title>anon.104d96932434c7180728e43e416fde44.6.llvm.5462248678662701129 (1 samples, 0.28%)</title><rect x="97.4790%" y="757" width="0.2801%" height="15" fill="rgb(236,68,49)"/><text x="97.7290%" y="767.50"></text></g><g><title>core::fmt::write (1 samples, 0.28%)</title><rect x="97.4790%" y="741" width="0.2801%" height="15" fill="rgb(229,146,28)"/><text x="97.7290%" y="751.50"></text></g><g><title>[vmlinux] (1 samples, 0.28%)</title><rect x="97.7591%" y="725" width="0.2801%" height="15" fill="rgb(225,31,38)"/><text x="98.0091%" y="735.50"></text></g><g><title>do_group_exit (1 samples, 0.28%)</title><rect x="97.7591%" y="709" width="0.2801%" height="15" fill="rgb(250,208,3)"/><text x="98.0091%" y="719.50"></text></g><g><title>do_exit (1 samples, 0.28%)</title><rect x="97.7591%" y="693" width="0.2801%" height="15" fill="rgb(246,54,23)"/><text x="98.0091%" y="703.50"></text></g><g><title>mmput (1 samples, 0.28%)</title><rect x="97.7591%" y="677" width="0.2801%" height="15" fill="rgb(243,76,11)"/><text x="98.0091%" y="687.50"></text></g><g><title>exit_mmap (1 samples, 0.28%)</title><rect x="97.7591%" y="661" width="0.2801%" height="15" fill="rgb(245,21,50)"/><text x="98.0091%" y="671.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.28%)</title><rect x="97.7591%" y="645" width="0.2801%" height="15" fill="rgb(228,9,43)"/><text x="98.0091%" y="655.50"></text></g><g><title>release_pages (1 samples, 0.28%)</title><rect x="97.7591%" y="629" width="0.2801%" height="15" fill="rgb(208,100,47)"/><text x="98.0091%" y="639.50"></text></g><g><title>free_unref_page_list (1 samples, 0.28%)</title><rect x="97.7591%" y="613" width="0.2801%" height="15" fill="rgb(232,26,8)"/><text x="98.0091%" y="623.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.28%)</title><rect x="97.7591%" y="597" width="0.2801%" height="15" fill="rgb(216,166,38)"/><text x="98.0091%" y="607.50"></text></g><g><title>__free_one_page (1 samples, 0.28%)</title><rect x="97.7591%" y="581" width="0.2801%" height="15" fill="rgb(251,202,51)"/><text x="98.0091%" y="591.50"></text></g><g><title>lobsters-microb (351 samples, 98.32%)</title><rect x="0.0000%" y="773" width="98.3193%" height="15" fill="rgb(254,216,34)"/><text x="0.2500%" y="783.50">lobsters-microb</text></g><g><title>entry_SYSCALL_64 (2 samples, 0.56%)</title><rect x="97.7591%" y="757" width="0.5602%" height="15" fill="rgb(251,32,27)"/><text x="98.0091%" y="767.50"></text></g><g><title>do_syscall_64 (2 samples, 0.56%)</title><rect x="97.7591%" y="741" width="0.5602%" height="15" fill="rgb(208,127,28)"/><text x="98.0091%" y="751.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.28%)</title><rect x="98.0392%" y="725" width="0.2801%" height="15" fill="rgb(224,137,22)"/><text x="98.2892%" y="735.50"></text></g><g><title>do_execve (1 samples, 0.28%)</title><rect x="98.0392%" y="709" width="0.2801%" height="15" fill="rgb(254,70,32)"/><text x="98.2892%" y="719.50"></text></g><g><title>__do_execve_file (1 samples, 0.28%)</title><rect x="98.0392%" y="693" width="0.2801%" height="15" fill="rgb(229,75,37)"/><text x="98.2892%" y="703.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.28%)</title><rect x="98.0392%" y="677" width="0.2801%" height="15" fill="rgb(252,64,23)"/><text x="98.2892%" y="687.50"></text></g><g><title>load_elf_binary (1 samples, 0.28%)</title><rect x="98.0392%" y="661" width="0.2801%" height="15" fill="rgb(232,162,48)"/><text x="98.2892%" y="671.50"></text></g><g><title>elf_map (1 samples, 0.28%)</title><rect x="98.0392%" y="645" width="0.2801%" height="15" fill="rgb(246,160,12)"/><text x="98.2892%" y="655.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.28%)</title><rect x="98.0392%" y="629" width="0.2801%" height="15" fill="rgb(247,166,0)"/><text x="98.2892%" y="639.50"></text></g><g><title>do_mmap (1 samples, 0.28%)</title><rect x="98.0392%" y="613" width="0.2801%" height="15" fill="rgb(249,219,21)"/><text x="98.2892%" y="623.50"></text></g><g><title>mmap_region (1 samples, 0.28%)</title><rect x="98.0392%" y="597" width="0.2801%" height="15" fill="rgb(205,209,3)"/><text x="98.2892%" y="607.50"></text></g><g><title>perf_event_mmap (1 samples, 0.28%)</title><rect x="98.0392%" y="581" width="0.2801%" height="15" fill="rgb(243,44,1)"/><text x="98.2892%" y="591.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.28%)</title><rect x="98.0392%" y="565" width="0.2801%" height="15" fill="rgb(206,159,16)"/><text x="98.2892%" y="575.50"></text></g><g><title>__perf_addr_filters_adjust (1 samples, 0.28%)</title><rect x="98.0392%" y="549" width="0.2801%" height="15" fill="rgb(244,77,30)"/><text x="98.2892%" y="559.50"></text></g><g><title>all (357 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(218,69,12)"/><text x="0.2500%" y="799.50"></text></g><g><title>perf (6 samples, 1.68%)</title><rect x="98.3193%" y="773" width="1.6807%" height="15" fill="rgb(212,87,7)"/><text x="98.5693%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 1.68%)</title><rect x="98.3193%" y="757" width="1.6807%" height="15" fill="rgb(245,114,25)"/><text x="98.5693%" y="767.50"></text></g><g><title>do_syscall_64 (6 samples, 1.68%)</title><rect x="98.3193%" y="741" width="1.6807%" height="15" fill="rgb(210,61,42)"/><text x="98.5693%" y="751.50"></text></g><g><title>__x64_sys_execve (6 samples, 1.68%)</title><rect x="98.3193%" y="725" width="1.6807%" height="15" fill="rgb(211,52,33)"/><text x="98.5693%" y="735.50"></text></g><g><title>do_execve (6 samples, 1.68%)</title><rect x="98.3193%" y="709" width="1.6807%" height="15" fill="rgb(234,58,33)"/><text x="98.5693%" y="719.50"></text></g><g><title>__do_execve_file (6 samples, 1.68%)</title><rect x="98.3193%" y="693" width="1.6807%" height="15" fill="rgb(220,115,36)"/><text x="98.5693%" y="703.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 1.68%)</title><rect x="98.3193%" y="677" width="1.6807%" height="15" fill="rgb(243,153,54)"/><text x="98.5693%" y="687.50"></text></g><g><title>load_elf_binary (6 samples, 1.68%)</title><rect x="98.3193%" y="661" width="1.6807%" height="15" fill="rgb(251,47,18)"/><text x="98.5693%" y="671.50"></text></g><g><title>setup_new_exec (6 samples, 1.68%)</title><rect x="98.3193%" y="645" width="1.6807%" height="15" fill="rgb(242,102,42)"/><text x="98.5693%" y="655.50"></text></g><g><title>perf_event_exec (6 samples, 1.68%)</title><rect x="98.3193%" y="629" width="1.6807%" height="15" fill="rgb(234,31,38)"/><text x="98.5693%" y="639.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 1.40%)</title><rect x="98.5994%" y="613" width="1.4006%" height="15" fill="rgb(221,117,51)"/><text x="98.8494%" y="623.50"></text></g><g><title>native_write_msr (5 samples, 1.40%)</title><rect x="98.5994%" y="597" width="1.4006%" height="15" fill="rgb(212,20,18)"/><text x="98.8494%" y="607.50"></text></g></svg></svg>