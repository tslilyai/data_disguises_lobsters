<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180"><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.12%)</title><rect x="0.2165%" y="709" width="0.1237%" height="15" fill="rgb(227,0,7)"/><text x="0.4665%" y="719.50"></text></g><g><title>[[heap]] (7 samples, 0.22%)</title><rect x="0.1546%" y="725" width="0.2165%" height="15" fill="rgb(217,0,24)"/><text x="0.4046%" y="735.50"></text></g><g><title>[[stack]] (13 samples, 0.40%)</title><rect x="0.3711%" y="725" width="0.4020%" height="15" fill="rgb(221,193,54)"/><text x="0.6211%" y="735.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.19%)</title><rect x="0.7730%" y="709" width="0.1855%" height="15" fill="rgb(248,212,6)"/><text x="1.0230%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.28%)</title><rect x="1.9481%" y="645" width="0.2783%" height="15" fill="rgb(208,68,35)"/><text x="2.1981%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.28%)</title><rect x="1.9481%" y="629" width="0.2783%" height="15" fill="rgb(232,128,0)"/><text x="2.1981%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.28%)</title><rect x="1.9481%" y="613" width="0.2783%" height="15" fill="rgb(207,160,47)"/><text x="2.1981%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.28%)</title><rect x="1.9481%" y="597" width="0.2783%" height="15" fill="rgb(228,23,34)"/><text x="2.1981%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (61 samples, 1.89%)</title><rect x="0.9586%" y="709" width="1.8862%" height="15" fill="rgb(218,30,26)"/><text x="1.2086%" y="719.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 0.90%)</title><rect x="1.9481%" y="693" width="0.8967%" height="15" fill="rgb(220,122,19)"/><text x="2.1981%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (29 samples, 0.90%)</title><rect x="1.9481%" y="677" width="0.8967%" height="15" fill="rgb(250,228,42)"/><text x="2.1981%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.90%)</title><rect x="1.9481%" y="661" width="0.8967%" height="15" fill="rgb(240,193,28)"/><text x="2.1981%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.62%)</title><rect x="2.2263%" y="645" width="0.6184%" height="15" fill="rgb(216,20,37)"/><text x="2.4763%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (20 samples, 0.62%)</title><rect x="2.2263%" y="629" width="0.6184%" height="15" fill="rgb(206,188,39)"/><text x="2.4763%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.62%)</title><rect x="2.2263%" y="613" width="0.6184%" height="15" fill="rgb(217,207,13)"/><text x="2.4763%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.62%)</title><rect x="2.2263%" y="597" width="0.6184%" height="15" fill="rgb(231,73,38)"/><text x="2.4763%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (20 samples, 0.62%)</title><rect x="2.2263%" y="581" width="0.6184%" height="15" fill="rgb(225,20,46)"/><text x="2.4763%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.62%)</title><rect x="2.2263%" y="565" width="0.6184%" height="15" fill="rgb(210,31,41)"/><text x="2.4763%" y="575.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.62%)</title><rect x="2.2263%" y="549" width="0.6184%" height="15" fill="rgb(221,200,47)"/><text x="2.4763%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.25%)</title><rect x="2.8448%" y="709" width="0.2474%" height="15" fill="rgb(226,26,5)"/><text x="3.0948%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26 samples, 0.80%)</title><rect x="3.0921%" y="709" width="0.8040%" height="15" fill="rgb(249,33,26)"/><text x="3.3421%" y="719.50"></text></g><g><title>__GI___libc_free (19 samples, 0.59%)</title><rect x="4.2362%" y="709" width="0.5875%" height="15" fill="rgb(235,183,28)"/><text x="4.4862%" y="719.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.99%)</title><rect x="4.8237%" y="709" width="0.9895%" height="15" fill="rgb(221,5,38)"/><text x="5.0737%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.25%)</title><rect x="5.9060%" y="709" width="0.2474%" height="15" fill="rgb(247,18,42)"/><text x="6.1560%" y="719.50"></text></g><g><title>__rdl_realloc (6 samples, 0.19%)</title><rect x="6.1843%" y="709" width="0.1855%" height="15" fill="rgb(241,131,45)"/><text x="6.4343%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (5 samples, 0.15%)</title><rect x="6.2152%" y="693" width="0.1546%" height="15" fill="rgb(249,31,29)"/><text x="6.4652%" y="703.50"></text></g><g><title>_int_free (34 samples, 1.05%)</title><rect x="6.3698%" y="709" width="1.0513%" height="15" fill="rgb(225,111,53)"/><text x="6.6198%" y="719.50"></text></g><g><title>_int_malloc (24 samples, 0.74%)</title><rect x="7.4212%" y="709" width="0.7421%" height="15" fill="rgb(238,160,17)"/><text x="7.6712%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.28%)</title><rect x="8.1942%" y="709" width="0.2783%" height="15" fill="rgb(214,148,48)"/><text x="8.4442%" y="719.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (10 samples, 0.31%)</title><rect x="8.4725%" y="709" width="0.3092%" height="15" fill="rgb(232,36,49)"/><text x="8.7225%" y="719.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.12%)</title><rect x="8.7817%" y="709" width="0.1237%" height="15" fill="rgb(209,103,24)"/><text x="9.0317%" y="719.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (6 samples, 0.19%)</title><rect x="9.5238%" y="709" width="0.1855%" height="15" fill="rgb(229,88,8)"/><text x="9.7738%" y="719.50"></text></g><g><title>[anon] (312 samples, 9.65%)</title><rect x="0.7730%" y="725" width="9.6475%" height="15" fill="rgb(213,181,19)"/><text x="1.0230%" y="735.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (13 samples, 0.40%)</title><rect x="10.0186%" y="709" width="0.4020%" height="15" fill="rgb(254,191,54)"/><text x="10.2686%" y="719.50"></text></g><g><title>_int_free (8 samples, 0.25%)</title><rect x="10.5133%" y="709" width="0.2474%" height="15" fill="rgb(241,83,37)"/><text x="10.7633%" y="719.50"></text></g><g><title>[lobsters-microbenchmarks] (17 samples, 0.53%)</title><rect x="10.4515%" y="725" width="0.5257%" height="15" fill="rgb(233,36,39)"/><text x="10.7015%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.15%)</title><rect x="11.0390%" y="709" width="0.1546%" height="15" fill="rgb(226,3,54)"/><text x="11.2890%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (4 samples, 0.12%)</title><rect x="11.2863%" y="677" width="0.1237%" height="15" fill="rgb(245,192,40)"/><text x="11.5363%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (4 samples, 0.12%)</title><rect x="11.2863%" y="661" width="0.1237%" height="15" fill="rgb(238,167,29)"/><text x="11.5363%" y="671.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (4 samples, 0.12%)</title><rect x="11.2863%" y="645" width="0.1237%" height="15" fill="rgb(232,182,51)"/><text x="11.5363%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (4 samples, 0.12%)</title><rect x="11.2863%" y="629" width="0.1237%" height="15" fill="rgb(231,60,39)"/><text x="11.5363%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="11.2863%" y="613" width="0.1237%" height="15" fill="rgb(208,69,12)"/><text x="11.5363%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (5 samples, 0.15%)</title><rect x="11.4100%" y="677" width="0.1546%" height="15" fill="rgb(235,93,37)"/><text x="11.6600%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (5 samples, 0.15%)</title><rect x="11.4100%" y="661" width="0.1546%" height="15" fill="rgb(213,116,39)"/><text x="11.6600%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.15%)</title><rect x="11.4100%" y="645" width="0.1546%" height="15" fill="rgb(222,207,29)"/><text x="11.6600%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.15%)</title><rect x="11.4100%" y="629" width="0.1546%" height="15" fill="rgb(206,96,30)"/><text x="11.6600%" y="639.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.12%)</title><rect x="11.4409%" y="613" width="0.1237%" height="15" fill="rgb(218,138,4)"/><text x="11.6909%" y="623.50"></text></g><g><title>_int_malloc (4 samples, 0.12%)</title><rect x="11.4409%" y="597" width="0.1237%" height="15" fill="rgb(250,191,14)"/><text x="11.6909%" y="607.50"></text></g><g><title>sysmalloc (4 samples, 0.12%)</title><rect x="11.4409%" y="581" width="0.1237%" height="15" fill="rgb(239,60,40)"/><text x="11.6909%" y="591.50"></text></g><g><title>page_fault (4 samples, 0.12%)</title><rect x="11.4409%" y="565" width="0.1237%" height="15" fill="rgb(206,27,48)"/><text x="11.6909%" y="575.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.12%)</title><rect x="11.4409%" y="549" width="0.1237%" height="15" fill="rgb(225,35,8)"/><text x="11.6909%" y="559.50"></text></g><g><title>handle_mm_fault (4 samples, 0.12%)</title><rect x="11.4409%" y="533" width="0.1237%" height="15" fill="rgb(250,213,24)"/><text x="11.6909%" y="543.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.12%)</title><rect x="11.4409%" y="517" width="0.1237%" height="15" fill="rgb(247,123,22)"/><text x="11.6909%" y="527.50"></text></g><g><title>sk_wait_data (4 samples, 0.12%)</title><rect x="11.5955%" y="405" width="0.1237%" height="15" fill="rgb(231,138,38)"/><text x="11.8455%" y="415.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (6 samples, 0.19%)</title><rect x="11.5646%" y="677" width="0.1855%" height="15" fill="rgb(231,145,46)"/><text x="11.8146%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (6 samples, 0.19%)</title><rect x="11.5646%" y="661" width="0.1855%" height="15" fill="rgb(251,118,11)"/><text x="11.8146%" y="671.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (6 samples, 0.19%)</title><rect x="11.5646%" y="645" width="0.1855%" height="15" fill="rgb(217,147,25)"/><text x="11.8146%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (5 samples, 0.15%)</title><rect x="11.5955%" y="629" width="0.1546%" height="15" fill="rgb(247,81,37)"/><text x="11.8455%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.15%)</title><rect x="11.5955%" y="613" width="0.1546%" height="15" fill="rgb(209,12,38)"/><text x="11.8455%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (5 samples, 0.15%)</title><rect x="11.5955%" y="597" width="0.1546%" height="15" fill="rgb(227,1,9)"/><text x="11.8455%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (5 samples, 0.15%)</title><rect x="11.5955%" y="581" width="0.1546%" height="15" fill="rgb(248,47,43)"/><text x="11.8455%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (5 samples, 0.15%)</title><rect x="11.5955%" y="565" width="0.1546%" height="15" fill="rgb(221,10,30)"/><text x="11.8455%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (5 samples, 0.15%)</title><rect x="11.5955%" y="549" width="0.1546%" height="15" fill="rgb(210,229,1)"/><text x="11.8455%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (5 samples, 0.15%)</title><rect x="11.5955%" y="533" width="0.1546%" height="15" fill="rgb(222,148,37)"/><text x="11.8455%" y="543.50"></text></g><g><title>__libc_recv (5 samples, 0.15%)</title><rect x="11.5955%" y="517" width="0.1546%" height="15" fill="rgb(234,67,33)"/><text x="11.8455%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.15%)</title><rect x="11.5955%" y="501" width="0.1546%" height="15" fill="rgb(247,98,35)"/><text x="11.8455%" y="511.50"></text></g><g><title>do_syscall_64 (5 samples, 0.15%)</title><rect x="11.5955%" y="485" width="0.1546%" height="15" fill="rgb(247,138,52)"/><text x="11.8455%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (5 samples, 0.15%)</title><rect x="11.5955%" y="469" width="0.1546%" height="15" fill="rgb(213,79,30)"/><text x="11.8455%" y="479.50"></text></g><g><title>__sys_recvfrom (5 samples, 0.15%)</title><rect x="11.5955%" y="453" width="0.1546%" height="15" fill="rgb(246,177,23)"/><text x="11.8455%" y="463.50"></text></g><g><title>inet_recvmsg (5 samples, 0.15%)</title><rect x="11.5955%" y="437" width="0.1546%" height="15" fill="rgb(230,62,27)"/><text x="11.8455%" y="447.50"></text></g><g><title>tcp_recvmsg (5 samples, 0.15%)</title><rect x="11.5955%" y="421" width="0.1546%" height="15" fill="rgb(216,154,8)"/><text x="11.8455%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.46%)</title><rect x="11.8429%" y="645" width="0.4638%" height="15" fill="rgb(244,35,45)"/><text x="12.0929%" y="655.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.46%)</title><rect x="11.8429%" y="629" width="0.4638%" height="15" fill="rgb(251,115,12)"/><text x="12.0929%" y="639.50"></text></g><g><title>_int_realloc (15 samples, 0.46%)</title><rect x="11.8429%" y="613" width="0.4638%" height="15" fill="rgb(240,54,50)"/><text x="12.0929%" y="623.50"></text></g><g><title>_int_malloc (15 samples, 0.46%)</title><rect x="11.8429%" y="597" width="0.4638%" height="15" fill="rgb(233,84,52)"/><text x="12.0929%" y="607.50"></text></g><g><title>decor_mem::select::expr_to_col (4 samples, 0.12%)</title><rect x="12.3067%" y="645" width="0.1237%" height="15" fill="rgb(207,117,47)"/><text x="12.5567%" y="655.50"></text></g><g><title>core::fmt::write (4 samples, 0.12%)</title><rect x="12.3067%" y="629" width="0.1237%" height="15" fill="rgb(249,43,39)"/><text x="12.5567%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (4 samples, 0.12%)</title><rect x="12.3067%" y="613" width="0.1237%" height="15" fill="rgb(209,38,44)"/><text x="12.5567%" y="623.50"></text></g><g><title>_int_free (8 samples, 0.25%)</title><rect x="12.5541%" y="629" width="0.2474%" height="15" fill="rgb(236,212,23)"/><text x="12.8041%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (4 samples, 0.12%)</title><rect x="13.4818%" y="549" width="0.1237%" height="15" fill="rgb(242,79,21)"/><text x="13.7318%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.12%)</title><rect x="13.4818%" y="533" width="0.1237%" height="15" fill="rgb(211,96,35)"/><text x="13.7318%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (4 samples, 0.12%)</title><rect x="13.4818%" y="517" width="0.1237%" height="15" fill="rgb(253,215,40)"/><text x="13.7318%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.12%)</title><rect x="13.4818%" y="501" width="0.1237%" height="15" fill="rgb(211,81,21)"/><text x="13.7318%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.12%)</title><rect x="13.4818%" y="485" width="0.1237%" height="15" fill="rgb(208,190,38)"/><text x="13.7318%" y="495.50"></text></g><g><title>__GI___libc_malloc (33 samples, 1.02%)</title><rect x="13.6054%" y="437" width="1.0204%" height="15" fill="rgb(235,213,38)"/><text x="13.8554%" y="447.50"></text></g><g><title>_int_malloc (21 samples, 0.65%)</title><rect x="13.9765%" y="421" width="0.6494%" height="15" fill="rgb(237,122,38)"/><text x="14.2265%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (40 samples, 1.24%)</title><rect x="13.4199%" y="613" width="1.2369%" height="15" fill="rgb(244,218,35)"/><text x="13.6699%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 1.18%)</title><rect x="13.4818%" y="597" width="1.1750%" height="15" fill="rgb(240,68,47)"/><text x="13.7318%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (38 samples, 1.18%)</title><rect x="13.4818%" y="581" width="1.1750%" height="15" fill="rgb(210,16,53)"/><text x="13.7318%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (38 samples, 1.18%)</title><rect x="13.4818%" y="565" width="1.1750%" height="15" fill="rgb(235,124,12)"/><text x="13.7318%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (34 samples, 1.05%)</title><rect x="13.6054%" y="549" width="1.0513%" height="15" fill="rgb(224,169,11)"/><text x="13.8554%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (34 samples, 1.05%)</title><rect x="13.6054%" y="533" width="1.0513%" height="15" fill="rgb(250,166,2)"/><text x="13.8554%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 1.05%)</title><rect x="13.6054%" y="517" width="1.0513%" height="15" fill="rgb(242,216,29)"/><text x="13.8554%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 1.05%)</title><rect x="13.6054%" y="501" width="1.0513%" height="15" fill="rgb(230,116,27)"/><text x="13.8554%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (34 samples, 1.05%)</title><rect x="13.6054%" y="485" width="1.0513%" height="15" fill="rgb(228,99,48)"/><text x="13.8554%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 1.05%)</title><rect x="13.6054%" y="469" width="1.0513%" height="15" fill="rgb(253,11,6)"/><text x="13.8554%" y="479.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 1.05%)</title><rect x="13.6054%" y="453" width="1.0513%" height="15" fill="rgb(247,143,39)"/><text x="13.8554%" y="463.50"></text></g><g><title>_int_malloc (6 samples, 0.19%)</title><rect x="14.6877%" y="565" width="0.1855%" height="15" fill="rgb(236,97,10)"/><text x="14.9377%" y="575.50"></text></g><g><title>malloc_consolidate (6 samples, 0.19%)</title><rect x="14.6877%" y="549" width="0.1855%" height="15" fill="rgb(233,208,19)"/><text x="14.9377%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.25%)</title><rect x="14.6568%" y="613" width="0.2474%" height="15" fill="rgb(216,164,2)"/><text x="14.9068%" y="623.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.22%)</title><rect x="14.6877%" y="597" width="0.2165%" height="15" fill="rgb(220,129,5)"/><text x="14.9377%" y="607.50"></text></g><g><title>_int_realloc (7 samples, 0.22%)</title><rect x="14.6877%" y="581" width="0.2165%" height="15" fill="rgb(242,17,10)"/><text x="14.9377%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.22%)</title><rect x="14.9041%" y="565" width="0.2165%" height="15" fill="rgb(242,107,0)"/><text x="15.1541%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (7 samples, 0.22%)</title><rect x="14.9041%" y="549" width="0.2165%" height="15" fill="rgb(251,28,31)"/><text x="15.1541%" y="559.50"></text></g><g><title>core::fmt::write (8 samples, 0.25%)</title><rect x="14.9041%" y="597" width="0.2474%" height="15" fill="rgb(233,223,10)"/><text x="15.1541%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.25%)</title><rect x="14.9041%" y="581" width="0.2474%" height="15" fill="rgb(215,21,27)"/><text x="15.1541%" y="591.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (13 samples, 0.40%)</title><rect x="14.9041%" y="613" width="0.4020%" height="15" fill="rgb(232,23,21)"/><text x="15.1541%" y="623.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (5 samples, 0.15%)</title><rect x="15.1515%" y="597" width="0.1546%" height="15" fill="rgb(244,5,23)"/><text x="15.4015%" y="607.50"></text></g><g><title>alloc::fmt::format (5 samples, 0.15%)</title><rect x="15.1515%" y="581" width="0.1546%" height="15" fill="rgb(226,81,46)"/><text x="15.4015%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.15%)</title><rect x="15.1515%" y="565" width="0.1546%" height="15" fill="rgb(247,70,30)"/><text x="15.4015%" y="575.50"></text></g><g><title>core::fmt::write (5 samples, 0.15%)</title><rect x="15.1515%" y="549" width="0.1546%" height="15" fill="rgb(212,68,19)"/><text x="15.4015%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (4 samples, 0.12%)</title><rect x="15.1824%" y="533" width="0.1237%" height="15" fill="rgb(240,187,13)"/><text x="15.4324%" y="543.50"></text></g><g><title>decor_mem::select::get_value_for_rows (78 samples, 2.41%)</title><rect x="12.9561%" y="629" width="2.4119%" height="15" fill="rgb(223,113,26)"/><text x="13.2061%" y="639.50">de..</text></g><g><title>decor_mem::select::get_rows_matching_constraint (96 samples, 2.97%)</title><rect x="12.4304%" y="645" width="2.9685%" height="15" fill="rgb(206,192,2)"/><text x="12.6804%" y="655.50">dec..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.53%)</title><rect x="15.5226%" y="629" width="0.5257%" height="15" fill="rgb(241,108,4)"/><text x="15.7726%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.53%)</title><rect x="15.5226%" y="613" width="0.5257%" height="15" fill="rgb(247,173,49)"/><text x="15.7726%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.53%)</title><rect x="15.5226%" y="597" width="0.5257%" height="15" fill="rgb(224,114,35)"/><text x="15.7726%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.53%)</title><rect x="15.5226%" y="581" width="0.5257%" height="15" fill="rgb(245,159,27)"/><text x="15.7726%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14 samples, 0.43%)</title><rect x="15.6153%" y="565" width="0.4329%" height="15" fill="rgb(245,172,44)"/><text x="15.8653%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (14 samples, 0.43%)</title><rect x="15.6153%" y="549" width="0.4329%" height="15" fill="rgb(236,23,11)"/><text x="15.8653%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.43%)</title><rect x="15.6153%" y="533" width="0.4329%" height="15" fill="rgb(205,117,38)"/><text x="15.8653%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.43%)</title><rect x="15.6153%" y="517" width="0.4329%" height="15" fill="rgb(237,72,25)"/><text x="15.8653%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (14 samples, 0.43%)</title><rect x="15.6153%" y="501" width="0.4329%" height="15" fill="rgb(244,70,9)"/><text x="15.8653%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.43%)</title><rect x="15.6153%" y="485" width="0.4329%" height="15" fill="rgb(217,125,39)"/><text x="15.8653%" y="495.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.43%)</title><rect x="15.6153%" y="469" width="0.4329%" height="15" fill="rgb(235,36,10)"/><text x="15.8653%" y="479.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.43%)</title><rect x="15.6153%" y="453" width="0.4329%" height="15" fill="rgb(251,123,47)"/><text x="15.8653%" y="463.50"></text></g><g><title>_int_malloc (12 samples, 0.37%)</title><rect x="15.6772%" y="437" width="0.3711%" height="15" fill="rgb(221,13,13)"/><text x="15.9272%" y="447.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.19%)</title><rect x="16.2956%" y="613" width="0.1855%" height="15" fill="rgb(238,131,9)"/><text x="16.5456%" y="623.50"></text></g><g><title>core::fmt::write (6 samples, 0.19%)</title><rect x="16.4811%" y="613" width="0.1855%" height="15" fill="rgb(211,50,8)"/><text x="16.7311%" y="623.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (5 samples, 0.15%)</title><rect x="16.5121%" y="597" width="0.1546%" height="15" fill="rgb(245,182,24)"/><text x="16.7621%" y="607.50"></text></g><g><title>decor_mem::helpers::minus_parser_vals (26 samples, 0.80%)</title><rect x="16.2028%" y="629" width="0.8040%" height="15" fill="rgb(242,14,37)"/><text x="16.4528%" y="639.50"></text></g><g><title>core::num::dec2flt::dec2flt (11 samples, 0.34%)</title><rect x="16.6667%" y="613" width="0.3401%" height="15" fill="rgb(246,228,12)"/><text x="16.9167%" y="623.50"></text></g><g><title>decor_mem::select::get_value_for_rows (60 samples, 1.86%)</title><rect x="15.3989%" y="645" width="1.8553%" height="15" fill="rgb(213,55,15)"/><text x="15.6489%" y="655.50">d..</text></g><g><title>decor_mem::select::tablecolumn_matches_col (8 samples, 0.25%)</title><rect x="17.0068%" y="629" width="0.2474%" height="15" fill="rgb(209,9,3)"/><text x="17.2568%" y="639.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (5 samples, 0.15%)</title><rect x="17.0996%" y="613" width="0.1546%" height="15" fill="rgb(230,59,30)"/><text x="17.3496%" y="623.50"></text></g><g><title>alloc::fmt::format (5 samples, 0.15%)</title><rect x="17.0996%" y="597" width="0.1546%" height="15" fill="rgb(209,121,21)"/><text x="17.3496%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.15%)</title><rect x="17.0996%" y="581" width="0.1546%" height="15" fill="rgb(220,109,13)"/><text x="17.3496%" y="591.50"></text></g><g><title>core::fmt::write (5 samples, 0.15%)</title><rect x="17.0996%" y="565" width="0.1546%" height="15" fill="rgb(232,18,1)"/><text x="17.3496%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (4 samples, 0.12%)</title><rect x="17.1305%" y="549" width="0.1237%" height="15" fill="rgb(215,41,42)"/><text x="17.3805%" y="559.50"></text></g><g><title>core::fmt::write (7 samples, 0.22%)</title><rect x="17.2542%" y="629" width="0.2165%" height="15" fill="rgb(224,123,36)"/><text x="17.5042%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (7 samples, 0.22%)</title><rect x="17.2542%" y="613" width="0.2165%" height="15" fill="rgb(240,125,3)"/><text x="17.5042%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (12 samples, 0.37%)</title><rect x="17.5015%" y="549" width="0.3711%" height="15" fill="rgb(205,98,50)"/><text x="17.7515%" y="559.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (12 samples, 0.37%)</title><rect x="17.5015%" y="533" width="0.3711%" height="15" fill="rgb(205,185,37)"/><text x="17.7515%" y="543.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (11 samples, 0.34%)</title><rect x="17.5325%" y="517" width="0.3401%" height="15" fill="rgb(238,207,15)"/><text x="17.7825%" y="527.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (8 samples, 0.25%)</title><rect x="17.6252%" y="501" width="0.2474%" height="15" fill="rgb(213,199,42)"/><text x="17.8752%" y="511.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (6 samples, 0.19%)</title><rect x="17.6871%" y="485" width="0.1855%" height="15" fill="rgb(235,201,11)"/><text x="17.9371%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (6 samples, 0.19%)</title><rect x="17.6871%" y="469" width="0.1855%" height="15" fill="rgb(207,46,11)"/><text x="17.9371%" y="479.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (22 samples, 0.68%)</title><rect x="17.2542%" y="645" width="0.6803%" height="15" fill="rgb(241,35,35)"/><text x="17.5042%" y="655.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (15 samples, 0.46%)</title><rect x="17.4706%" y="629" width="0.4638%" height="15" fill="rgb(243,32,47)"/><text x="17.7206%" y="639.50"></text></g><g><title>alloc::fmt::format (15 samples, 0.46%)</title><rect x="17.4706%" y="613" width="0.4638%" height="15" fill="rgb(247,202,23)"/><text x="17.7206%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (15 samples, 0.46%)</title><rect x="17.4706%" y="597" width="0.4638%" height="15" fill="rgb(219,102,11)"/><text x="17.7206%" y="607.50"></text></g><g><title>core::fmt::write (15 samples, 0.46%)</title><rect x="17.4706%" y="581" width="0.4638%" height="15" fill="rgb(243,110,44)"/><text x="17.7206%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (14 samples, 0.43%)</title><rect x="17.5015%" y="565" width="0.4329%" height="15" fill="rgb(222,74,54)"/><text x="17.7515%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.22%)</title><rect x="22.4799%" y="533" width="0.2165%" height="15" fill="rgb(216,99,12)"/><text x="22.7299%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.22%)</title><rect x="22.6964%" y="517" width="0.2165%" height="15" fill="rgb(226,22,26)"/><text x="22.9464%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (25 samples, 0.77%)</title><rect x="22.9128%" y="501" width="0.7730%" height="15" fill="rgb(217,163,10)"/><text x="23.1628%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.77%)</title><rect x="22.9128%" y="485" width="0.7730%" height="15" fill="rgb(213,25,53)"/><text x="23.1628%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (25 samples, 0.77%)</title><rect x="22.9128%" y="469" width="0.7730%" height="15" fill="rgb(252,105,26)"/><text x="23.1628%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.77%)</title><rect x="22.9128%" y="453" width="0.7730%" height="15" fill="rgb(220,39,43)"/><text x="23.1628%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (17 samples, 0.53%)</title><rect x="23.1602%" y="437" width="0.5257%" height="15" fill="rgb(229,68,48)"/><text x="23.4102%" y="447.50"></text></g><g><title>__GI___libc_malloc (406 samples, 12.55%)</title><rect x="23.7477%" y="389" width="12.5541%" height="15" fill="rgb(252,8,32)"/><text x="23.9977%" y="399.50">__GI___libc_malloc</text></g><g><title>_int_malloc (292 samples, 9.03%)</title><rect x="27.2727%" y="373" width="9.0291%" height="15" fill="rgb(223,20,43)"/><text x="27.5227%" y="383.50">_int_malloc</text></g><g><title>unlink_chunk.constprop.0 (4 samples, 0.12%)</title><rect x="36.1781%" y="357" width="0.1237%" height="15" fill="rgb(229,81,49)"/><text x="36.4281%" y="367.50"></text></g><g><title>__rdl_alloc (18 samples, 0.56%)</title><rect x="36.3018%" y="389" width="0.5566%" height="15" fill="rgb(236,28,36)"/><text x="36.5518%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.56%)</title><rect x="36.3018%" y="373" width="0.5566%" height="15" fill="rgb(249,185,26)"/><text x="36.5518%" y="383.50"></text></g><g><title>alloc::alloc::alloc (442 samples, 13.67%)</title><rect x="23.6858%" y="405" width="13.6673%" height="15" fill="rgb(249,174,33)"/><text x="23.9358%" y="415.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (16 samples, 0.49%)</title><rect x="36.8584%" y="389" width="0.4947%" height="15" fill="rgb(233,201,37)"/><text x="37.1084%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (620 samples, 19.17%)</title><rect x="18.2127%" y="581" width="19.1713%" height="15" fill="rgb(221,78,26)"/><text x="18.4627%" y="591.50">&lt;core::iter::adapters::Cloned&lt;..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (494 samples, 15.28%)</title><rect x="22.1088%" y="565" width="15.2752%" height="15" fill="rgb(250,127,30)"/><text x="22.3588%" y="575.50">&lt;alloc::string::String ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (482 samples, 14.90%)</title><rect x="22.4799%" y="549" width="14.9041%" height="15" fill="rgb(230,49,44)"/><text x="22.7299%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (475 samples, 14.69%)</title><rect x="22.6964%" y="533" width="14.6877%" height="15" fill="rgb(229,67,23)"/><text x="22.9464%" y="543.50">alloc::slice::&lt;impl [T..</text></g><g><title>alloc::slice::hack::to_vec (468 samples, 14.47%)</title><rect x="22.9128%" y="517" width="14.4712%" height="15" fill="rgb(249,83,47)"/><text x="23.1628%" y="527.50">alloc::slice::hack::to..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (443 samples, 13.70%)</title><rect x="23.6858%" y="501" width="13.6982%" height="15" fill="rgb(215,43,3)"/><text x="23.9358%" y="511.50">alloc::vec::Vec&lt;T&gt;::w..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (443 samples, 13.70%)</title><rect x="23.6858%" y="485" width="13.6982%" height="15" fill="rgb(238,154,13)"/><text x="23.9358%" y="495.50">alloc::raw_vec::RawVe..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (443 samples, 13.70%)</title><rect x="23.6858%" y="469" width="13.6982%" height="15" fill="rgb(219,56,2)"/><text x="23.9358%" y="479.50">alloc::raw_vec::RawVe..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (443 samples, 13.70%)</title><rect x="23.6858%" y="453" width="13.6982%" height="15" fill="rgb(233,0,4)"/><text x="23.9358%" y="463.50">alloc::raw_vec::RawVe..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (443 samples, 13.70%)</title><rect x="23.6858%" y="437" width="13.6982%" height="15" fill="rgb(235,30,7)"/><text x="23.9358%" y="447.50">&lt;alloc::alloc::Global..</text></g><g><title>alloc::alloc::Global::alloc_impl (443 samples, 13.70%)</title><rect x="23.6858%" y="421" width="13.6982%" height="15" fill="rgb(250,79,13)"/><text x="23.9358%" y="431.50">alloc::alloc::Global:..</text></g><g><title>__GI___libc_malloc (50 samples, 1.55%)</title><rect x="37.3840%" y="581" width="1.5461%" height="15" fill="rgb(211,146,34)"/><text x="37.6340%" y="591.50"></text></g><g><title>_int_malloc (36 samples, 1.11%)</title><rect x="37.8169%" y="565" width="1.1132%" height="15" fill="rgb(228,22,38)"/><text x="38.0669%" y="575.50"></text></g><g><title>unlink_chunk.constprop.0 (7 samples, 0.22%)</title><rect x="38.7137%" y="549" width="0.2165%" height="15" fill="rgb(235,168,5)"/><text x="38.9637%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (677 samples, 20.93%)</title><rect x="18.0272%" y="597" width="20.9338%" height="15" fill="rgb(221,155,16)"/><text x="18.2772%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as core::clon..</text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (5 samples, 0.15%)</title><rect x="38.9610%" y="597" width="0.1546%" height="15" fill="rgb(215,215,53)"/><text x="39.2110%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (683 samples, 21.12%)</title><rect x="18.0272%" y="613" width="21.1194%" height="15" fill="rgb(223,4,10)"/><text x="18.2772%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as core::clon..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.25%)</title><rect x="40.4453%" y="517" width="0.2474%" height="15" fill="rgb(234,103,6)"/><text x="40.6953%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.25%)</title><rect x="40.4453%" y="501" width="0.2474%" height="15" fill="rgb(227,97,0)"/><text x="40.6953%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.25%)</title><rect x="40.4453%" y="485" width="0.2474%" height="15" fill="rgb(234,150,53)"/><text x="40.6953%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.25%)</title><rect x="40.4453%" y="469" width="0.2474%" height="15" fill="rgb(228,201,54)"/><text x="40.6953%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.15%)</title><rect x="40.5380%" y="453" width="0.1546%" height="15" fill="rgb(222,22,37)"/><text x="40.7880%" y="463.50"></text></g><g><title>_int_malloc (82 samples, 2.54%)</title><rect x="41.3420%" y="389" width="2.5356%" height="15" fill="rgb(237,53,32)"/><text x="41.5920%" y="399.50">_i..</text></g><g><title>__GI___libc_malloc (100 samples, 3.09%)</title><rect x="40.8163%" y="405" width="3.0921%" height="15" fill="rgb(233,25,53)"/><text x="41.0663%" y="415.50">__G..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (119 samples, 3.68%)</title><rect x="40.3525%" y="581" width="3.6797%" height="15" fill="rgb(210,40,34)"/><text x="40.6025%" y="591.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (117 samples, 3.62%)</title><rect x="40.4143%" y="565" width="3.6178%" height="15" fill="rgb(241,220,44)"/><text x="40.6643%" y="575.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (117 samples, 3.62%)</title><rect x="40.4143%" y="549" width="3.6178%" height="15" fill="rgb(235,28,35)"/><text x="40.6643%" y="559.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (116 samples, 3.59%)</title><rect x="40.4453%" y="533" width="3.5869%" height="15" fill="rgb(210,56,17)"/><text x="40.6953%" y="543.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (108 samples, 3.34%)</title><rect x="40.6926%" y="517" width="3.3395%" height="15" fill="rgb(224,130,29)"/><text x="40.9426%" y="527.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (108 samples, 3.34%)</title><rect x="40.6926%" y="501" width="3.3395%" height="15" fill="rgb(235,212,8)"/><text x="40.9426%" y="511.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (108 samples, 3.34%)</title><rect x="40.6926%" y="485" width="3.3395%" height="15" fill="rgb(223,33,50)"/><text x="40.9426%" y="495.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (108 samples, 3.34%)</title><rect x="40.6926%" y="469" width="3.3395%" height="15" fill="rgb(219,149,13)"/><text x="40.9426%" y="479.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (108 samples, 3.34%)</title><rect x="40.6926%" y="453" width="3.3395%" height="15" fill="rgb(250,156,29)"/><text x="40.9426%" y="463.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (108 samples, 3.34%)</title><rect x="40.6926%" y="437" width="3.3395%" height="15" fill="rgb(216,193,19)"/><text x="40.9426%" y="447.50">all..</text></g><g><title>alloc::alloc::alloc (108 samples, 3.34%)</title><rect x="40.6926%" y="421" width="3.3395%" height="15" fill="rgb(216,135,14)"/><text x="40.9426%" y="431.50">all..</text></g><g><title>__GI___libc_malloc (107 samples, 3.31%)</title><rect x="44.0322%" y="581" width="3.3086%" height="15" fill="rgb(241,47,5)"/><text x="44.2822%" y="591.50">__G..</text></g><g><title>_int_malloc (72 samples, 2.23%)</title><rect x="45.1144%" y="565" width="2.2263%" height="15" fill="rgb(233,42,35)"/><text x="45.3644%" y="575.50">_..</text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.31%)</title><rect x="47.3408%" y="581" width="0.3092%" height="15" fill="rgb(231,13,6)"/><text x="47.5908%" y="591.50"></text></g><g><title>__rdl_alloc (5 samples, 0.15%)</title><rect x="47.6500%" y="581" width="0.1546%" height="15" fill="rgb(207,181,40)"/><text x="47.9000%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.15%)</title><rect x="47.6500%" y="565" width="0.1546%" height="15" fill="rgb(254,173,49)"/><text x="47.9000%" y="575.50"></text></g><g><title>&lt;decor_mem::views::View as core::clone::Clone&gt;::clone (964 samples, 29.81%)</title><rect x="18.0272%" y="629" width="29.8083%" height="15" fill="rgb(221,1,38)"/><text x="18.2772%" y="639.50">&lt;decor_mem::views::View as core::clone::Clone&gt;::..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (281 samples, 8.69%)</title><rect x="39.1466%" y="613" width="8.6889%" height="15" fill="rgb(206,124,46)"/><text x="39.3966%" y="623.50">&lt;hashbrown::..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (280 samples, 8.66%)</title><rect x="39.1775%" y="597" width="8.6580%" height="15" fill="rgb(249,21,11)"/><text x="39.4275%" y="607.50">&lt;hashbrown::..</text></g><g><title>__GI___libc_free (6 samples, 0.19%)</title><rect x="47.9592%" y="597" width="0.1855%" height="15" fill="rgb(222,201,40)"/><text x="48.2092%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.87%)</title><rect x="47.8355%" y="613" width="0.8658%" height="15" fill="rgb(235,61,29)"/><text x="48.0855%" y="623.50"></text></g><g><title>_int_free (16 samples, 0.49%)</title><rect x="48.2066%" y="597" width="0.4947%" height="15" fill="rgb(219,207,3)"/><text x="48.4566%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 2.44%)</title><rect x="47.8355%" y="629" width="2.4428%" height="15" fill="rgb(222,56,46)"/><text x="48.0855%" y="639.50">&lt;h..</text></g><g><title>_int_free (51 samples, 1.58%)</title><rect x="48.7013%" y="613" width="1.5770%" height="15" fill="rgb(239,76,54)"/><text x="48.9513%" y="623.50"></text></g><g><title>malloc_consolidate (51 samples, 1.58%)</title><rect x="48.7013%" y="597" width="1.5770%" height="15" fill="rgb(231,124,27)"/><text x="48.9513%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (15 samples, 0.46%)</title><rect x="49.8145%" y="581" width="0.4638%" height="15" fill="rgb(249,195,6)"/><text x="50.0645%" y="591.50"></text></g><g><title>__GI___libc_free (8 samples, 0.25%)</title><rect x="50.3092%" y="597" width="0.2474%" height="15" fill="rgb(237,174,47)"/><text x="50.5592%" y="607.50"></text></g><g><title>_int_free (22 samples, 0.68%)</title><rect x="50.5566%" y="597" width="0.6803%" height="15" fill="rgb(206,201,31)"/><text x="50.8066%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (35 samples, 1.08%)</title><rect x="50.2783%" y="629" width="1.0823%" height="15" fill="rgb(231,57,52)"/><text x="50.5283%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (35 samples, 1.08%)</title><rect x="50.2783%" y="613" width="1.0823%" height="15" fill="rgb(248,177,22)"/><text x="50.5283%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.12%)</title><rect x="51.2369%" y="597" width="0.1237%" height="15" fill="rgb(215,211,37)"/><text x="51.4869%" y="607.50"></text></g><g><title>decor_mem::select::get_join_on_col_indices (4 samples, 0.12%)</title><rect x="51.3605%" y="629" width="0.1237%" height="15" fill="rgb(241,128,51)"/><text x="51.6105%" y="639.50"></text></g><g><title>decor_mem::select::get_binop_indices (4 samples, 0.12%)</title><rect x="51.3605%" y="613" width="0.1237%" height="15" fill="rgb(227,165,31)"/><text x="51.6105%" y="623.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (4 samples, 0.12%)</title><rect x="51.3605%" y="597" width="0.1237%" height="15" fill="rgb(228,167,24)"/><text x="51.6105%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (4 samples, 0.12%)</title><rect x="51.5461%" y="581" width="0.1237%" height="15" fill="rgb(228,143,12)"/><text x="51.7961%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (4 samples, 0.12%)</title><rect x="51.5461%" y="565" width="0.1237%" height="15" fill="rgb(249,149,8)"/><text x="51.7961%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (4 samples, 0.12%)</title><rect x="51.5461%" y="549" width="0.1237%" height="15" fill="rgb(243,35,44)"/><text x="51.7961%" y="559.50"></text></g><g><title>decor_mem::select::tablefactor_to_view (7 samples, 0.22%)</title><rect x="51.4842%" y="629" width="0.2165%" height="15" fill="rgb(246,89,9)"/><text x="51.7342%" y="639.50"></text></g><g><title>core::fmt::write (5 samples, 0.15%)</title><rect x="51.5461%" y="613" width="0.1546%" height="15" fill="rgb(233,213,13)"/><text x="51.7961%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::ObjectName as core::fmt::Display&gt;::fmt (5 samples, 0.15%)</title><rect x="51.5461%" y="597" width="0.1546%" height="15" fill="rgb(233,141,41)"/><text x="51.7961%" y="607.50"></text></g><g><title>_int_realloc (6 samples, 0.19%)</title><rect x="52.2882%" y="597" width="0.1855%" height="15" fill="rgb(239,167,4)"/><text x="52.5382%" y="607.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.34%)</title><rect x="52.1645%" y="613" width="0.3401%" height="15" fill="rgb(209,217,16)"/><text x="52.4145%" y="623.50"></text></g><g><title>_int_free (7 samples, 0.22%)</title><rect x="52.5356%" y="613" width="0.2165%" height="15" fill="rgb(219,88,35)"/><text x="52.7856%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.25%)</title><rect x="52.8448%" y="581" width="0.2474%" height="15" fill="rgb(220,193,23)"/><text x="53.0948%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.22%)</title><rect x="52.8757%" y="565" width="0.2165%" height="15" fill="rgb(230,90,52)"/><text x="53.1257%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (7 samples, 0.22%)</title><rect x="53.6797%" y="517" width="0.2165%" height="15" fill="rgb(252,106,19)"/><text x="53.9297%" y="527.50"></text></g><g><title>alloc::string::String::push (8 samples, 0.25%)</title><rect x="53.6797%" y="533" width="0.2474%" height="15" fill="rgb(206,74,20)"/><text x="53.9297%" y="543.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (22 samples, 0.68%)</title><rect x="54.3290%" y="485" width="0.6803%" height="15" fill="rgb(230,138,44)"/><text x="54.5790%" y="495.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (55 samples, 1.70%)</title><rect x="53.3395%" y="549" width="1.7007%" height="15" fill="rgb(235,182,43)"/><text x="53.5895%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (35 samples, 1.08%)</title><rect x="53.9579%" y="533" width="1.0823%" height="15" fill="rgb(242,16,51)"/><text x="54.2079%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (33 samples, 1.02%)</title><rect x="54.0198%" y="517" width="1.0204%" height="15" fill="rgb(248,9,4)"/><text x="54.2698%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (33 samples, 1.02%)</title><rect x="54.0198%" y="501" width="1.0204%" height="15" fill="rgb(210,31,22)"/><text x="54.2698%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (69 samples, 2.13%)</title><rect x="53.0921%" y="581" width="2.1336%" height="15" fill="rgb(239,54,39)"/><text x="53.3421%" y="591.50">&lt;..</text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (69 samples, 2.13%)</title><rect x="53.0921%" y="565" width="2.1336%" height="15" fill="rgb(230,99,41)"/><text x="53.3421%" y="575.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (6 samples, 0.19%)</title><rect x="55.0402%" y="549" width="0.1855%" height="15" fill="rgb(253,106,12)"/><text x="55.2902%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.15%)</title><rect x="55.0711%" y="533" width="0.1546%" height="15" fill="rgb(213,46,41)"/><text x="55.3211%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.12%)</title><rect x="55.7823%" y="549" width="0.1237%" height="15" fill="rgb(215,133,35)"/><text x="56.0323%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (100 samples, 3.09%)</title><rect x="52.8448%" y="597" width="3.0921%" height="15" fill="rgb(213,28,5)"/><text x="53.0948%" y="607.50">&lt;sq..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (21 samples, 0.65%)</title><rect x="55.2876%" y="581" width="0.6494%" height="15" fill="rgb(215,77,49)"/><text x="55.5376%" y="591.50"></text></g><g><title>core::fmt::write (7 samples, 0.22%)</title><rect x="55.7205%" y="565" width="0.2165%" height="15" fill="rgb(248,100,22)"/><text x="55.9705%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.15%)</title><rect x="55.9678%" y="581" width="0.1546%" height="15" fill="rgb(208,67,9)"/><text x="56.2178%" y="591.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.40%)</title><rect x="56.2771%" y="565" width="0.4020%" height="15" fill="rgb(219,133,21)"/><text x="56.5271%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.15%)</title><rect x="56.7718%" y="565" width="0.1546%" height="15" fill="rgb(246,46,29)"/><text x="57.0218%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.12%)</title><rect x="56.9573%" y="549" width="0.1237%" height="15" fill="rgb(246,185,52)"/><text x="57.2073%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (39 samples, 1.21%)</title><rect x="55.9369%" y="597" width="1.2059%" height="15" fill="rgb(252,136,11)"/><text x="56.1869%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (32 samples, 0.99%)</title><rect x="56.1534%" y="581" width="0.9895%" height="15" fill="rgb(219,138,53)"/><text x="56.4034%" y="591.50"></text></g><g><title>core::fmt::write (7 samples, 0.22%)</title><rect x="56.9264%" y="565" width="0.2165%" height="15" fill="rgb(211,51,23)"/><text x="57.1764%" y="575.50"></text></g><g><title>core::fmt::write (143 samples, 4.42%)</title><rect x="52.7520%" y="613" width="4.4218%" height="15" fill="rgb(247,221,28)"/><text x="53.0020%" y="623.50">core:..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (1,499 samples, 46.35%)</title><rect x="11.2863%" y="693" width="46.3513%" height="15" fill="rgb(251,222,45)"/><text x="11.5363%" y="703.50">decor_mem::query_transformer::QueryTransformer::issue_statement</text></g><g><title>decor_mem::select::get_query_results (1,484 samples, 45.89%)</title><rect x="11.7502%" y="677" width="45.8874%" height="15" fill="rgb(217,162,53)"/><text x="12.0002%" y="687.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (1,484 samples, 45.89%)</title><rect x="11.7502%" y="661" width="45.8874%" height="15" fill="rgb(229,93,14)"/><text x="12.0002%" y="671.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (1,284 samples, 39.70%)</title><rect x="17.9344%" y="645" width="39.7032%" height="15" fill="rgb(209,67,49)"/><text x="18.1844%" y="655.50">decor_mem::select::tablewithjoins_to_view</text></g><g><title>decor_mem::views::View::get_rows_of_col (192 samples, 5.94%)</title><rect x="51.7007%" y="629" width="5.9369%" height="15" fill="rgb(213,87,29)"/><text x="51.9507%" y="639.50">decor_me..</text></g><g><title>hashbrown::map::make_hash (15 samples, 0.46%)</title><rect x="57.1738%" y="613" width="0.4638%" height="15" fill="rgb(205,151,52)"/><text x="57.4238%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.25%)</title><rect x="57.3902%" y="597" width="0.2474%" height="15" fill="rgb(253,215,39)"/><text x="57.6402%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.12%)</title><rect x="57.6685%" y="613" width="0.1237%" height="15" fill="rgb(221,220,41)"/><text x="57.9185%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.12%)</title><rect x="57.7922%" y="613" width="0.1237%" height="15" fill="rgb(218,133,21)"/><text x="58.0422%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.31%)</title><rect x="57.6376%" y="629" width="0.3092%" height="15" fill="rgb(221,193,43)"/><text x="57.8876%" y="639.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (11 samples, 0.34%)</title><rect x="57.6376%" y="693" width="0.3401%" height="15" fill="rgb(240,128,52)"/><text x="57.8876%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (11 samples, 0.34%)</title><rect x="57.6376%" y="677" width="0.3401%" height="15" fill="rgb(253,114,12)"/><text x="57.8876%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (11 samples, 0.34%)</title><rect x="57.6376%" y="661" width="0.3401%" height="15" fill="rgb(215,223,47)"/><text x="57.8876%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (11 samples, 0.34%)</title><rect x="57.6376%" y="645" width="0.3401%" height="15" fill="rgb(248,225,23)"/><text x="57.8876%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (1,515 samples, 46.85%)</title><rect x="11.2863%" y="709" width="46.8460%" height="15" fill="rgb(250,108,0)"/><text x="11.5363%" y="719.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>decor_mem::stats::get_qtype (5 samples, 0.15%)</title><rect x="57.9777%" y="693" width="0.1546%" height="15" fill="rgb(228,208,7)"/><text x="58.2277%" y="703.50"></text></g><g><title>sql_parser::parser::parse_statements (5 samples, 0.15%)</title><rect x="57.9777%" y="677" width="0.1546%" height="15" fill="rgb(244,45,10)"/><text x="58.2277%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (5 samples, 0.15%)</title><rect x="57.9777%" y="661" width="0.1546%" height="15" fill="rgb(207,125,25)"/><text x="58.2277%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.19%)</title><rect x="58.1323%" y="709" width="0.1855%" height="15" fill="rgb(210,195,18)"/><text x="58.3823%" y="719.50"></text></g><g><title>_int_free (4 samples, 0.12%)</title><rect x="58.5343%" y="693" width="0.1237%" height="15" fill="rgb(249,80,12)"/><text x="58.7843%" y="703.50"></text></g><g><title>[lobsters-microbenchmarks] (5 samples, 0.15%)</title><rect x="58.5343%" y="709" width="0.1546%" height="15" fill="rgb(221,65,9)"/><text x="58.7843%" y="719.50"></text></g><g><title>__GI___libc_free (9 samples, 0.28%)</title><rect x="58.6889%" y="709" width="0.2783%" height="15" fill="rgb(235,49,36)"/><text x="58.9389%" y="719.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.15%)</title><rect x="58.9672%" y="709" width="0.1546%" height="15" fill="rgb(225,32,20)"/><text x="59.2172%" y="719.50"></text></g><g><title>hwloc::Topology::new (4 samples, 0.12%)</title><rect x="59.1837%" y="549" width="0.1237%" height="15" fill="rgb(215,141,46)"/><text x="59.4337%" y="559.50"></text></g><g><title>hwloc_topology_load (4 samples, 0.12%)</title><rect x="59.1837%" y="533" width="0.1237%" height="15" fill="rgb(250,160,47)"/><text x="59.4337%" y="543.50"></text></g><g><title>[libhwloc.so.15.2.0] (4 samples, 0.12%)</title><rect x="59.1837%" y="517" width="0.1237%" height="15" fill="rgb(216,222,40)"/><text x="59.4337%" y="527.50"></text></g><g><title>[libhwloc.so.15.2.0] (4 samples, 0.12%)</title><rect x="59.1837%" y="501" width="0.1237%" height="15" fill="rgb(234,217,39)"/><text x="59.4337%" y="511.50"></text></g><g><title>__libc_start_main (5 samples, 0.15%)</title><rect x="59.1837%" y="709" width="0.1546%" height="15" fill="rgb(207,178,40)"/><text x="59.4337%" y="719.50"></text></g><g><title>main (5 samples, 0.15%)</title><rect x="59.1837%" y="693" width="0.1546%" height="15" fill="rgb(221,136,13)"/><text x="59.4337%" y="703.50"></text></g><g><title>std::rt::lang_start_internal (5 samples, 0.15%)</title><rect x="59.1837%" y="677" width="0.1546%" height="15" fill="rgb(249,199,10)"/><text x="59.4337%" y="687.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.15%)</title><rect x="59.1837%" y="661" width="0.1546%" height="15" fill="rgb(249,222,13)"/><text x="59.4337%" y="671.50"></text></g><g><title>std::panicking::try (5 samples, 0.15%)</title><rect x="59.1837%" y="645" width="0.1546%" height="15" fill="rgb(244,185,38)"/><text x="59.4337%" y="655.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.15%)</title><rect x="59.1837%" y="629" width="0.1546%" height="15" fill="rgb(236,202,9)"/><text x="59.4337%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5 samples, 0.15%)</title><rect x="59.1837%" y="613" width="0.1546%" height="15" fill="rgb(250,229,37)"/><text x="59.4337%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (5 samples, 0.15%)</title><rect x="59.1837%" y="597" width="0.1546%" height="15" fill="rgb(206,174,23)"/><text x="59.4337%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 0.15%)</title><rect x="59.1837%" y="581" width="0.1546%" height="15" fill="rgb(211,33,43)"/><text x="59.4337%" y="591.50"></text></g><g><title>lobsters_microbenchmarks::main (5 samples, 0.15%)</title><rect x="59.1837%" y="565" width="0.1546%" height="15" fill="rgb(245,58,50)"/><text x="59.4337%" y="575.50"></text></g><g><title>_int_free (17 samples, 0.53%)</title><rect x="59.4001%" y="709" width="0.5257%" height="15" fill="rgb(244,68,36)"/><text x="59.6501%" y="719.50"></text></g><g><title>_int_malloc (16 samples, 0.49%)</title><rect x="59.9258%" y="709" width="0.4947%" height="15" fill="rgb(232,229,15)"/><text x="60.1758%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.15%)</title><rect x="60.5133%" y="709" width="0.1546%" height="15" fill="rgb(254,30,23)"/><text x="60.7633%" y="719.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.12%)</title><rect x="60.6988%" y="709" width="0.1237%" height="15" fill="rgb(235,160,14)"/><text x="60.9488%" y="719.50"></text></g><g><title>malloc_consolidate (32 samples, 0.99%)</title><rect x="61.7502%" y="549" width="0.9895%" height="15" fill="rgb(212,155,44)"/><text x="62.0002%" y="559.50"></text></g><g><title>unlink_chunk.constprop.0 (6 samples, 0.19%)</title><rect x="62.5541%" y="533" width="0.1855%" height="15" fill="rgb(226,2,50)"/><text x="62.8041%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (47 samples, 1.45%)</title><rect x="61.3173%" y="613" width="1.4533%" height="15" fill="rgb(234,177,6)"/><text x="61.5673%" y="623.50"></text></g><g><title>__GI___libc_realloc (47 samples, 1.45%)</title><rect x="61.3173%" y="597" width="1.4533%" height="15" fill="rgb(217,24,9)"/><text x="61.5673%" y="607.50"></text></g><g><title>_int_realloc (47 samples, 1.45%)</title><rect x="61.3173%" y="581" width="1.4533%" height="15" fill="rgb(220,13,46)"/><text x="61.5673%" y="591.50"></text></g><g><title>_int_malloc (46 samples, 1.42%)</title><rect x="61.3482%" y="565" width="1.4224%" height="15" fill="rgb(239,221,27)"/><text x="61.5982%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (18 samples, 0.56%)</title><rect x="62.9252%" y="597" width="0.5566%" height="15" fill="rgb(222,198,25)"/><text x="63.1752%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (9 samples, 0.28%)</title><rect x="63.2035%" y="581" width="0.2783%" height="15" fill="rgb(211,99,13)"/><text x="63.4535%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.19%)</title><rect x="63.2962%" y="565" width="0.1855%" height="15" fill="rgb(232,111,31)"/><text x="63.5462%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (4 samples, 0.12%)</title><rect x="63.3581%" y="549" width="0.1237%" height="15" fill="rgb(245,82,37)"/><text x="63.6081%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (4 samples, 0.12%)</title><rect x="63.3581%" y="533" width="0.1237%" height="15" fill="rgb(227,149,46)"/><text x="63.6081%" y="543.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (24 samples, 0.74%)</title><rect x="62.7706%" y="613" width="0.7421%" height="15" fill="rgb(218,36,50)"/><text x="63.0206%" y="623.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (79 samples, 2.44%)</title><rect x="61.1008%" y="709" width="2.4428%" height="15" fill="rgb(226,80,48)"/><text x="61.3508%" y="719.50">de..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (79 samples, 2.44%)</title><rect x="61.1008%" y="693" width="2.4428%" height="15" fill="rgb(238,224,15)"/><text x="61.3508%" y="703.50">ms..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (79 samples, 2.44%)</title><rect x="61.1008%" y="677" width="2.4428%" height="15" fill="rgb(241,136,10)"/><text x="61.3508%" y="687.50">&lt;d..</text></g><g><title>decor_mem::stats::get_qtype (78 samples, 2.41%)</title><rect x="61.1317%" y="661" width="2.4119%" height="15" fill="rgb(208,32,45)"/><text x="61.3817%" y="671.50">de..</text></g><g><title>sql_parser::parser::parse_statements (78 samples, 2.41%)</title><rect x="61.1317%" y="645" width="2.4119%" height="15" fill="rgb(207,135,9)"/><text x="61.3817%" y="655.50">sq..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (73 samples, 2.26%)</title><rect x="61.2863%" y="629" width="2.2573%" height="15" fill="rgb(206,86,44)"/><text x="61.5363%" y="639.50">s..</text></g><g><title>decor_mem::views::View::get_rows_of_col (4 samples, 0.12%)</title><rect x="63.6982%" y="709" width="0.1237%" height="15" fill="rgb(245,177,15)"/><text x="63.9482%" y="719.50"></text></g><g><title>sk_wait_data (4 samples, 0.12%)</title><rect x="63.9147%" y="405" width="0.1237%" height="15" fill="rgb(206,64,50)"/><text x="64.1647%" y="415.50"></text></g><g><title>wait_woken (4 samples, 0.12%)</title><rect x="63.9147%" y="389" width="0.1237%" height="15" fill="rgb(234,36,40)"/><text x="64.1647%" y="399.50"></text></g><g><title>schedule_timeout (4 samples, 0.12%)</title><rect x="63.9147%" y="373" width="0.1237%" height="15" fill="rgb(213,64,8)"/><text x="64.1647%" y="383.50"></text></g><g><title>schedule (4 samples, 0.12%)</title><rect x="63.9147%" y="357" width="0.1237%" height="15" fill="rgb(210,75,36)"/><text x="64.1647%" y="367.50"></text></g><g><title>__schedule (4 samples, 0.12%)</title><rect x="63.9147%" y="341" width="0.1237%" height="15" fill="rgb(229,88,21)"/><text x="64.1647%" y="351.50"></text></g><g><title>__x64_sys_recvfrom (7 samples, 0.22%)</title><rect x="63.9147%" y="469" width="0.2165%" height="15" fill="rgb(252,204,47)"/><text x="64.1647%" y="479.50"></text></g><g><title>__sys_recvfrom (7 samples, 0.22%)</title><rect x="63.9147%" y="453" width="0.2165%" height="15" fill="rgb(208,77,27)"/><text x="64.1647%" y="463.50"></text></g><g><title>inet_recvmsg (7 samples, 0.22%)</title><rect x="63.9147%" y="437" width="0.2165%" height="15" fill="rgb(221,76,26)"/><text x="64.1647%" y="447.50"></text></g><g><title>tcp_recvmsg (7 samples, 0.22%)</title><rect x="63.9147%" y="421" width="0.2165%" height="15" fill="rgb(225,139,18)"/><text x="64.1647%" y="431.50"></text></g><g><title>mysql::conn::Conn::read_packet (8 samples, 0.25%)</title><rect x="63.9147%" y="629" width="0.2474%" height="15" fill="rgb(230,137,11)"/><text x="64.1647%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.25%)</title><rect x="63.9147%" y="613" width="0.2474%" height="15" fill="rgb(212,28,1)"/><text x="64.1647%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.25%)</title><rect x="63.9147%" y="597" width="0.2474%" height="15" fill="rgb(248,164,17)"/><text x="64.1647%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (8 samples, 0.25%)</title><rect x="63.9147%" y="581" width="0.2474%" height="15" fill="rgb(222,171,42)"/><text x="64.1647%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (8 samples, 0.25%)</title><rect x="63.9147%" y="565" width="0.2474%" height="15" fill="rgb(243,84,45)"/><text x="64.1647%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (8 samples, 0.25%)</title><rect x="63.9147%" y="549" width="0.2474%" height="15" fill="rgb(252,49,23)"/><text x="64.1647%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (8 samples, 0.25%)</title><rect x="63.9147%" y="533" width="0.2474%" height="15" fill="rgb(215,19,7)"/><text x="64.1647%" y="543.50"></text></g><g><title>__libc_recv (8 samples, 0.25%)</title><rect x="63.9147%" y="517" width="0.2474%" height="15" fill="rgb(238,81,41)"/><text x="64.1647%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.25%)</title><rect x="63.9147%" y="501" width="0.2474%" height="15" fill="rgb(210,199,37)"/><text x="64.1647%" y="511.50"></text></g><g><title>do_syscall_64 (8 samples, 0.25%)</title><rect x="63.9147%" y="485" width="0.2474%" height="15" fill="rgb(244,192,49)"/><text x="64.1647%" y="495.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (10 samples, 0.31%)</title><rect x="63.9147%" y="645" width="0.3092%" height="15" fill="rgb(226,211,11)"/><text x="64.1647%" y="655.50"></text></g><g><title>__tcp_push_pending_frames (10 samples, 0.31%)</title><rect x="64.4094%" y="453" width="0.3092%" height="15" fill="rgb(236,162,54)"/><text x="64.6594%" y="463.50"></text></g><g><title>tcp_write_xmit (10 samples, 0.31%)</title><rect x="64.4094%" y="437" width="0.3092%" height="15" fill="rgb(220,229,9)"/><text x="64.6594%" y="447.50"></text></g><g><title>__tcp_transmit_skb (9 samples, 0.28%)</title><rect x="64.4403%" y="421" width="0.2783%" height="15" fill="rgb(250,87,22)"/><text x="64.6903%" y="431.50"></text></g><g><title>__ip_queue_xmit (9 samples, 0.28%)</title><rect x="64.4403%" y="405" width="0.2783%" height="15" fill="rgb(239,43,17)"/><text x="64.6903%" y="415.50"></text></g><g><title>ip_output (9 samples, 0.28%)</title><rect x="64.4403%" y="389" width="0.2783%" height="15" fill="rgb(231,177,25)"/><text x="64.6903%" y="399.50"></text></g><g><title>ip_finish_output2 (9 samples, 0.28%)</title><rect x="64.4403%" y="373" width="0.2783%" height="15" fill="rgb(219,179,1)"/><text x="64.6903%" y="383.50"></text></g><g><title>__local_bh_enable_ip (8 samples, 0.25%)</title><rect x="64.4712%" y="357" width="0.2474%" height="15" fill="rgb(238,219,53)"/><text x="64.7212%" y="367.50"></text></g><g><title>do_softirq (8 samples, 0.25%)</title><rect x="64.4712%" y="341" width="0.2474%" height="15" fill="rgb(232,167,36)"/><text x="64.7212%" y="351.50"></text></g><g><title>do_softirq_own_stack (8 samples, 0.25%)</title><rect x="64.4712%" y="325" width="0.2474%" height="15" fill="rgb(244,19,51)"/><text x="64.7212%" y="335.50"></text></g><g><title>__do_softirq (8 samples, 0.25%)</title><rect x="64.4712%" y="309" width="0.2474%" height="15" fill="rgb(224,6,22)"/><text x="64.7212%" y="319.50"></text></g><g><title>net_rx_action (7 samples, 0.22%)</title><rect x="64.5022%" y="293" width="0.2165%" height="15" fill="rgb(224,145,5)"/><text x="64.7522%" y="303.50"></text></g><g><title>process_backlog (7 samples, 0.22%)</title><rect x="64.5022%" y="277" width="0.2165%" height="15" fill="rgb(234,130,49)"/><text x="64.7522%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (7 samples, 0.22%)</title><rect x="64.5022%" y="261" width="0.2165%" height="15" fill="rgb(254,6,2)"/><text x="64.7522%" y="271.50"></text></g><g><title>ip_rcv (6 samples, 0.19%)</title><rect x="64.5331%" y="245" width="0.1855%" height="15" fill="rgb(208,96,46)"/><text x="64.7831%" y="255.50"></text></g><g><title>ip_local_deliver (6 samples, 0.19%)</title><rect x="64.5331%" y="229" width="0.1855%" height="15" fill="rgb(239,3,39)"/><text x="64.7831%" y="239.50"></text></g><g><title>ip_local_deliver_finish (6 samples, 0.19%)</title><rect x="64.5331%" y="213" width="0.1855%" height="15" fill="rgb(233,210,1)"/><text x="64.7831%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (6 samples, 0.19%)</title><rect x="64.5331%" y="197" width="0.1855%" height="15" fill="rgb(244,137,37)"/><text x="64.7831%" y="207.50"></text></g><g><title>tcp_v4_rcv (6 samples, 0.19%)</title><rect x="64.5331%" y="181" width="0.1855%" height="15" fill="rgb(240,136,2)"/><text x="64.7831%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (5 samples, 0.15%)</title><rect x="64.5640%" y="165" width="0.1546%" height="15" fill="rgb(239,18,37)"/><text x="64.8140%" y="175.50"></text></g><g><title>tcp_rcv_established (5 samples, 0.15%)</title><rect x="64.5640%" y="149" width="0.1546%" height="15" fill="rgb(218,185,22)"/><text x="64.8140%" y="159.50"></text></g><g><title>sock_def_readable (4 samples, 0.12%)</title><rect x="64.5949%" y="133" width="0.1237%" height="15" fill="rgb(225,218,4)"/><text x="64.8449%" y="143.50"></text></g><g><title>__wake_up_common_lock (4 samples, 0.12%)</title><rect x="64.5949%" y="117" width="0.1237%" height="15" fill="rgb(230,182,32)"/><text x="64.8449%" y="127.50"></text></g><g><title>__wake_up_common (4 samples, 0.12%)</title><rect x="64.5949%" y="101" width="0.1237%" height="15" fill="rgb(242,56,43)"/><text x="64.8449%" y="111.50"></text></g><g><title>try_to_wake_up (4 samples, 0.12%)</title><rect x="64.5949%" y="85" width="0.1237%" height="15" fill="rgb(233,99,24)"/><text x="64.8449%" y="95.50"></text></g><g><title>sock_sendmsg (13 samples, 0.40%)</title><rect x="64.3476%" y="501" width="0.4020%" height="15" fill="rgb(234,209,42)"/><text x="64.5976%" y="511.50"></text></g><g><title>tcp_sendmsg (13 samples, 0.40%)</title><rect x="64.3476%" y="485" width="0.4020%" height="15" fill="rgb(227,7,12)"/><text x="64.5976%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (12 samples, 0.37%)</title><rect x="64.3785%" y="469" width="0.3711%" height="15" fill="rgb(245,203,43)"/><text x="64.6285%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (16 samples, 0.49%)</title><rect x="64.2857%" y="565" width="0.4947%" height="15" fill="rgb(238,205,33)"/><text x="64.5357%" y="575.50"></text></g><g><title>do_syscall_64 (16 samples, 0.49%)</title><rect x="64.2857%" y="549" width="0.4947%" height="15" fill="rgb(231,56,7)"/><text x="64.5357%" y="559.50"></text></g><g><title>__x64_sys_sendto (16 samples, 0.49%)</title><rect x="64.2857%" y="533" width="0.4947%" height="15" fill="rgb(244,186,29)"/><text x="64.5357%" y="543.50"></text></g><g><title>__sys_sendto (16 samples, 0.49%)</title><rect x="64.2857%" y="517" width="0.4947%" height="15" fill="rgb(234,111,31)"/><text x="64.5357%" y="527.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (29 samples, 0.90%)</title><rect x="63.9147%" y="677" width="0.8967%" height="15" fill="rgb(241,149,10)"/><text x="64.1647%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (29 samples, 0.90%)</title><rect x="63.9147%" y="661" width="0.8967%" height="15" fill="rgb(249,206,44)"/><text x="64.1647%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (19 samples, 0.59%)</title><rect x="64.2239%" y="645" width="0.5875%" height="15" fill="rgb(251,153,30)"/><text x="64.4739%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (18 samples, 0.56%)</title><rect x="64.2548%" y="629" width="0.5566%" height="15" fill="rgb(239,152,38)"/><text x="64.5048%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (17 samples, 0.53%)</title><rect x="64.2857%" y="613" width="0.5257%" height="15" fill="rgb(249,139,47)"/><text x="64.5357%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (17 samples, 0.53%)</title><rect x="64.2857%" y="597" width="0.5257%" height="15" fill="rgb(244,64,35)"/><text x="64.5357%" y="607.50"></text></g><g><title>__libc_send (17 samples, 0.53%)</title><rect x="64.2857%" y="581" width="0.5257%" height="15" fill="rgb(216,46,15)"/><text x="64.5357%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5 samples, 0.15%)</title><rect x="65.1515%" y="597" width="0.1546%" height="15" fill="rgb(250,74,19)"/><text x="65.4015%" y="607.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.53%)</title><rect x="65.3061%" y="597" width="0.5257%" height="15" fill="rgb(249,42,33)"/><text x="65.5561%" y="607.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (16 samples, 0.49%)</title><rect x="65.3370%" y="581" width="0.4947%" height="15" fill="rgb(242,149,17)"/><text x="65.5870%" y="591.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (16 samples, 0.49%)</title><rect x="65.3370%" y="565" width="0.4947%" height="15" fill="rgb(244,29,21)"/><text x="65.5870%" y="575.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (14 samples, 0.43%)</title><rect x="65.3989%" y="549" width="0.4329%" height="15" fill="rgb(220,130,37)"/><text x="65.6489%" y="559.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (11 samples, 0.34%)</title><rect x="65.4917%" y="533" width="0.3401%" height="15" fill="rgb(211,67,2)"/><text x="65.7417%" y="543.50"></text></g><g><title>_int_free (6 samples, 0.19%)</title><rect x="65.9246%" y="597" width="0.1855%" height="15" fill="rgb(235,68,52)"/><text x="66.1746%" y="607.50"></text></g><g><title>mysql::conn::Conn::read_packet (35 samples, 1.08%)</title><rect x="65.0588%" y="613" width="1.0823%" height="15" fill="rgb(246,142,3)"/><text x="65.3088%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.12%)</title><rect x="66.3884%" y="597" width="0.1237%" height="15" fill="rgb(241,25,7)"/><text x="66.6384%" y="607.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (62 samples, 1.92%)</title><rect x="64.8114%" y="645" width="1.9171%" height="15" fill="rgb(242,119,39)"/><text x="65.0614%" y="655.50">&lt;..</text></g><g><title>mysql::conn::Conn::next_text (62 samples, 1.92%)</title><rect x="64.8114%" y="629" width="1.9171%" height="15" fill="rgb(241,98,45)"/><text x="65.0614%" y="639.50">m..</text></g><g><title>mysql_common::value::read_text_values (19 samples, 0.59%)</title><rect x="66.1410%" y="613" width="0.5875%" height="15" fill="rgb(254,28,30)"/><text x="66.3910%" y="623.50"></text></g><g><title>mysql_common::value::read_text_value (7 samples, 0.22%)</title><rect x="66.5121%" y="597" width="0.2165%" height="15" fill="rgb(241,142,54)"/><text x="66.7621%" y="607.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 1.95%)</title><rect x="64.8114%" y="677" width="1.9481%" height="15" fill="rgb(222,85,15)"/><text x="65.0614%" y="687.50">&lt;..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 1.95%)</title><rect x="64.8114%" y="661" width="1.9481%" height="15" fill="rgb(210,85,47)"/><text x="65.0614%" y="671.50">&lt;..</text></g><g><title>mysql::conn::queryable::Queryable::query (8 samples, 0.25%)</title><rect x="66.7594%" y="677" width="0.2474%" height="15" fill="rgb(224,206,25)"/><text x="67.0094%" y="687.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (6 samples, 0.19%)</title><rect x="66.8213%" y="661" width="0.1855%" height="15" fill="rgb(243,201,19)"/><text x="67.0713%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (6 samples, 0.19%)</title><rect x="66.8213%" y="645" width="0.1855%" height="15" fill="rgb(236,59,4)"/><text x="67.0713%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (4 samples, 0.12%)</title><rect x="67.0377%" y="629" width="0.1237%" height="15" fill="rgb(254,179,45)"/><text x="67.2877%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (4 samples, 0.12%)</title><rect x="67.0377%" y="613" width="0.1237%" height="15" fill="rgb(226,14,10)"/><text x="67.2877%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::main (110 samples, 3.40%)</title><rect x="63.8837%" y="709" width="3.4014%" height="15" fill="rgb(244,27,41)"/><text x="64.1337%" y="719.50">lob..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (109 samples, 3.37%)</title><rect x="63.9147%" y="693" width="3.3704%" height="15" fill="rgb(235,35,32)"/><text x="64.1647%" y="703.50">lob..</text></g><g><title>mysql::conn::queryable::Queryable::query_first (9 samples, 0.28%)</title><rect x="67.0068%" y="677" width="0.2783%" height="15" fill="rgb(218,68,31)"/><text x="67.2568%" y="687.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (9 samples, 0.28%)</title><rect x="67.0068%" y="661" width="0.2783%" height="15" fill="rgb(207,120,37)"/><text x="67.2568%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (8 samples, 0.25%)</title><rect x="67.0377%" y="645" width="0.2474%" height="15" fill="rgb(227,98,0)"/><text x="67.2877%" y="655.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (4 samples, 0.12%)</title><rect x="67.1614%" y="629" width="0.1237%" height="15" fill="rgb(207,7,3)"/><text x="67.4114%" y="639.50"></text></g><g><title>malloc_consolidate (4 samples, 0.12%)</title><rect x="67.2851%" y="709" width="0.1237%" height="15" fill="rgb(206,98,19)"/><text x="67.5351%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (4 samples, 0.12%)</title><rect x="67.5325%" y="661" width="0.1237%" height="15" fill="rgb(217,5,26)"/><text x="67.7825%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (4 samples, 0.12%)</title><rect x="67.5325%" y="645" width="0.1237%" height="15" fill="rgb(235,190,38)"/><text x="67.7825%" y="655.50"></text></g><g><title>core::fmt::write (4 samples, 0.12%)</title><rect x="67.7489%" y="661" width="0.1237%" height="15" fill="rgb(247,86,24)"/><text x="67.9989%" y="671.50"></text></g><g><title>sock_def_readable (5 samples, 0.15%)</title><rect x="67.9654%" y="117" width="0.1546%" height="15" fill="rgb(205,101,16)"/><text x="68.2154%" y="127.50"></text></g><g><title>__wake_up_common_lock (5 samples, 0.15%)</title><rect x="67.9654%" y="101" width="0.1546%" height="15" fill="rgb(246,168,33)"/><text x="68.2154%" y="111.50"></text></g><g><title>__wake_up_common (5 samples, 0.15%)</title><rect x="67.9654%" y="85" width="0.1546%" height="15" fill="rgb(231,114,1)"/><text x="68.2154%" y="95.50"></text></g><g><title>pollwake (5 samples, 0.15%)</title><rect x="67.9654%" y="69" width="0.1546%" height="15" fill="rgb(207,184,53)"/><text x="68.2154%" y="79.50"></text></g><g><title>try_to_wake_up (5 samples, 0.15%)</title><rect x="67.9654%" y="53" width="0.1546%" height="15" fill="rgb(224,95,51)"/><text x="68.2154%" y="63.50"></text></g><g><title>ip_finish_output2 (9 samples, 0.28%)</title><rect x="67.9344%" y="357" width="0.2783%" height="15" fill="rgb(212,188,45)"/><text x="68.1844%" y="367.50"></text></g><g><title>__local_bh_enable_ip (8 samples, 0.25%)</title><rect x="67.9654%" y="341" width="0.2474%" height="15" fill="rgb(223,154,38)"/><text x="68.2154%" y="351.50"></text></g><g><title>do_softirq (8 samples, 0.25%)</title><rect x="67.9654%" y="325" width="0.2474%" height="15" fill="rgb(251,22,52)"/><text x="68.2154%" y="335.50"></text></g><g><title>do_softirq_own_stack (8 samples, 0.25%)</title><rect x="67.9654%" y="309" width="0.2474%" height="15" fill="rgb(229,209,22)"/><text x="68.2154%" y="319.50"></text></g><g><title>__do_softirq (8 samples, 0.25%)</title><rect x="67.9654%" y="293" width="0.2474%" height="15" fill="rgb(234,138,34)"/><text x="68.2154%" y="303.50"></text></g><g><title>net_rx_action (8 samples, 0.25%)</title><rect x="67.9654%" y="277" width="0.2474%" height="15" fill="rgb(212,95,11)"/><text x="68.2154%" y="287.50"></text></g><g><title>process_backlog (8 samples, 0.25%)</title><rect x="67.9654%" y="261" width="0.2474%" height="15" fill="rgb(240,179,47)"/><text x="68.2154%" y="271.50"></text></g><g><title>__netif_receive_skb_one_core (8 samples, 0.25%)</title><rect x="67.9654%" y="245" width="0.2474%" height="15" fill="rgb(240,163,11)"/><text x="68.2154%" y="255.50"></text></g><g><title>ip_rcv (8 samples, 0.25%)</title><rect x="67.9654%" y="229" width="0.2474%" height="15" fill="rgb(236,37,12)"/><text x="68.2154%" y="239.50"></text></g><g><title>ip_local_deliver (8 samples, 0.25%)</title><rect x="67.9654%" y="213" width="0.2474%" height="15" fill="rgb(232,164,16)"/><text x="68.2154%" y="223.50"></text></g><g><title>ip_local_deliver_finish (8 samples, 0.25%)</title><rect x="67.9654%" y="197" width="0.2474%" height="15" fill="rgb(244,205,15)"/><text x="68.2154%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (8 samples, 0.25%)</title><rect x="67.9654%" y="181" width="0.2474%" height="15" fill="rgb(223,117,47)"/><text x="68.2154%" y="191.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.25%)</title><rect x="67.9654%" y="165" width="0.2474%" height="15" fill="rgb(244,107,35)"/><text x="68.2154%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (8 samples, 0.25%)</title><rect x="67.9654%" y="149" width="0.2474%" height="15" fill="rgb(205,140,8)"/><text x="68.2154%" y="159.50"></text></g><g><title>tcp_rcv_established (8 samples, 0.25%)</title><rect x="67.9654%" y="133" width="0.2474%" height="15" fill="rgb(228,84,46)"/><text x="68.2154%" y="143.50"></text></g><g><title>__ip_queue_xmit (10 samples, 0.31%)</title><rect x="67.9344%" y="389" width="0.3092%" height="15" fill="rgb(254,188,9)"/><text x="68.1844%" y="399.50"></text></g><g><title>ip_output (10 samples, 0.31%)</title><rect x="67.9344%" y="373" width="0.3092%" height="15" fill="rgb(206,112,54)"/><text x="68.1844%" y="383.50"></text></g><g><title>__tcp_push_pending_frames (11 samples, 0.34%)</title><rect x="67.9344%" y="437" width="0.3401%" height="15" fill="rgb(216,84,49)"/><text x="68.1844%" y="447.50"></text></g><g><title>tcp_write_xmit (11 samples, 0.34%)</title><rect x="67.9344%" y="421" width="0.3401%" height="15" fill="rgb(214,194,35)"/><text x="68.1844%" y="431.50"></text></g><g><title>__tcp_transmit_skb (11 samples, 0.34%)</title><rect x="67.9344%" y="405" width="0.3401%" height="15" fill="rgb(249,28,3)"/><text x="68.1844%" y="415.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (13 samples, 0.40%)</title><rect x="67.9035%" y="661" width="0.4020%" height="15" fill="rgb(222,56,52)"/><text x="68.1535%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (12 samples, 0.37%)</title><rect x="67.9344%" y="645" width="0.3711%" height="15" fill="rgb(245,217,50)"/><text x="68.1844%" y="655.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (12 samples, 0.37%)</title><rect x="67.9344%" y="629" width="0.3711%" height="15" fill="rgb(213,201,24)"/><text x="68.1844%" y="639.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (12 samples, 0.37%)</title><rect x="67.9344%" y="613" width="0.3711%" height="15" fill="rgb(248,116,28)"/><text x="68.1844%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (12 samples, 0.37%)</title><rect x="67.9344%" y="597" width="0.3711%" height="15" fill="rgb(219,72,43)"/><text x="68.1844%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::write (12 samples, 0.37%)</title><rect x="67.9344%" y="581" width="0.3711%" height="15" fill="rgb(209,138,14)"/><text x="68.1844%" y="591.50"></text></g><g><title>__libc_send (12 samples, 0.37%)</title><rect x="67.9344%" y="565" width="0.3711%" height="15" fill="rgb(222,18,33)"/><text x="68.1844%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (12 samples, 0.37%)</title><rect x="67.9344%" y="549" width="0.3711%" height="15" fill="rgb(213,199,7)"/><text x="68.1844%" y="559.50"></text></g><g><title>do_syscall_64 (12 samples, 0.37%)</title><rect x="67.9344%" y="533" width="0.3711%" height="15" fill="rgb(250,110,10)"/><text x="68.1844%" y="543.50"></text></g><g><title>__x64_sys_sendto (12 samples, 0.37%)</title><rect x="67.9344%" y="517" width="0.3711%" height="15" fill="rgb(248,123,6)"/><text x="68.1844%" y="527.50"></text></g><g><title>__sys_sendto (12 samples, 0.37%)</title><rect x="67.9344%" y="501" width="0.3711%" height="15" fill="rgb(206,91,31)"/><text x="68.1844%" y="511.50"></text></g><g><title>sock_sendmsg (12 samples, 0.37%)</title><rect x="67.9344%" y="485" width="0.3711%" height="15" fill="rgb(211,154,13)"/><text x="68.1844%" y="495.50"></text></g><g><title>tcp_sendmsg (12 samples, 0.37%)</title><rect x="67.9344%" y="469" width="0.3711%" height="15" fill="rgb(225,148,7)"/><text x="68.1844%" y="479.50"></text></g><g><title>tcp_sendmsg_locked (12 samples, 0.37%)</title><rect x="67.9344%" y="453" width="0.3711%" height="15" fill="rgb(220,160,43)"/><text x="68.1844%" y="463.50"></text></g><g><title>__GI___libc_malloc (31 samples, 0.96%)</title><rect x="68.8930%" y="453" width="0.9586%" height="15" fill="rgb(213,52,39)"/><text x="69.1430%" y="463.50"></text></g><g><title>_int_malloc (22 samples, 0.68%)</title><rect x="69.1713%" y="437" width="0.6803%" height="15" fill="rgb(243,137,7)"/><text x="69.4213%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (36 samples, 1.11%)</title><rect x="68.8312%" y="629" width="1.1132%" height="15" fill="rgb(230,79,13)"/><text x="69.0812%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (36 samples, 1.11%)</title><rect x="68.8312%" y="613" width="1.1132%" height="15" fill="rgb(247,105,23)"/><text x="69.0812%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36 samples, 1.11%)</title><rect x="68.8312%" y="597" width="1.1132%" height="15" fill="rgb(223,179,41)"/><text x="69.0812%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (36 samples, 1.11%)</title><rect x="68.8312%" y="581" width="1.1132%" height="15" fill="rgb(218,9,34)"/><text x="69.0812%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (34 samples, 1.05%)</title><rect x="68.8930%" y="565" width="1.0513%" height="15" fill="rgb(222,106,8)"/><text x="69.1430%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (34 samples, 1.05%)</title><rect x="68.8930%" y="549" width="1.0513%" height="15" fill="rgb(211,220,0)"/><text x="69.1430%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 1.05%)</title><rect x="68.8930%" y="533" width="1.0513%" height="15" fill="rgb(229,52,16)"/><text x="69.1430%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 1.05%)</title><rect x="68.8930%" y="517" width="1.0513%" height="15" fill="rgb(212,155,18)"/><text x="69.1430%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (34 samples, 1.05%)</title><rect x="68.8930%" y="501" width="1.0513%" height="15" fill="rgb(242,21,14)"/><text x="69.1430%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 1.05%)</title><rect x="68.8930%" y="485" width="1.0513%" height="15" fill="rgb(222,19,48)"/><text x="69.1430%" y="495.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 1.05%)</title><rect x="68.8930%" y="469" width="1.0513%" height="15" fill="rgb(232,45,27)"/><text x="69.1430%" y="479.50"></text></g><g><title>__GI___libc_free (9 samples, 0.28%)</title><rect x="70.2536%" y="597" width="0.2783%" height="15" fill="rgb(249,103,42)"/><text x="70.5036%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 1.58%)</title><rect x="70.0062%" y="613" width="1.5770%" height="15" fill="rgb(246,81,33)"/><text x="70.2562%" y="623.50"></text></g><g><title>_int_free (34 samples, 1.05%)</title><rect x="70.5318%" y="597" width="1.0513%" height="15" fill="rgb(252,33,42)"/><text x="70.7818%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 1.92%)</title><rect x="70.0062%" y="629" width="1.9171%" height="15" fill="rgb(209,212,41)"/><text x="70.2562%" y="639.50">&lt;..</text></g><g><title>_int_free (11 samples, 0.34%)</title><rect x="71.5832%" y="613" width="0.3401%" height="15" fill="rgb(207,154,6)"/><text x="71.8332%" y="623.50"></text></g><g><title>malloc_consolidate (10 samples, 0.31%)</title><rect x="71.6141%" y="597" width="0.3092%" height="15" fill="rgb(223,64,47)"/><text x="71.8641%" y="607.50"></text></g><g><title>__GI___libc_free (15 samples, 0.46%)</title><rect x="71.9233%" y="629" width="0.4638%" height="15" fill="rgb(211,161,38)"/><text x="72.1733%" y="639.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.53%)</title><rect x="72.3871%" y="629" width="0.5257%" height="15" fill="rgb(219,138,40)"/><text x="72.6371%" y="639.50"></text></g><g><title>_int_malloc (12 samples, 0.37%)</title><rect x="72.5417%" y="613" width="0.3711%" height="15" fill="rgb(241,228,46)"/><text x="72.7917%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.12%)</title><rect x="72.9128%" y="629" width="0.1237%" height="15" fill="rgb(223,209,38)"/><text x="73.1628%" y="639.50"></text></g><g><title>_int_free (25 samples, 0.77%)</title><rect x="73.1602%" y="629" width="0.7730%" height="15" fill="rgb(236,164,45)"/><text x="73.4102%" y="639.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.15%)</title><rect x="73.9641%" y="613" width="0.1546%" height="15" fill="rgb(231,15,5)"/><text x="74.2141%" y="623.50"></text></g><g><title>_int_malloc (5 samples, 0.15%)</title><rect x="73.9641%" y="597" width="0.1546%" height="15" fill="rgb(252,35,15)"/><text x="74.2141%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.68%)</title><rect x="74.7990%" y="581" width="0.6803%" height="15" fill="rgb(248,181,18)"/><text x="75.0490%" y="591.50"></text></g><g><title>__GI___libc_realloc (48 samples, 1.48%)</title><rect x="74.1187%" y="613" width="1.4842%" height="15" fill="rgb(233,39,42)"/><text x="74.3687%" y="623.50"></text></g><g><title>_int_realloc (32 samples, 0.99%)</title><rect x="74.6135%" y="597" width="0.9895%" height="15" fill="rgb(238,110,33)"/><text x="74.8635%" y="607.50"></text></g><g><title>_int_free (4 samples, 0.12%)</title><rect x="75.4793%" y="581" width="0.1237%" height="15" fill="rgb(233,195,10)"/><text x="75.7293%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (56 samples, 1.73%)</title><rect x="73.9332%" y="629" width="1.7316%" height="15" fill="rgb(254,105,3)"/><text x="74.1832%" y="639.50"></text></g><g><title>__GI___libc_free (21 samples, 0.65%)</title><rect x="76.1286%" y="613" width="0.6494%" height="15" fill="rgb(221,225,9)"/><text x="76.3786%" y="623.50"></text></g><g><title>__rust_dealloc (9 samples, 0.28%)</title><rect x="76.7780%" y="613" width="0.2783%" height="15" fill="rgb(224,227,45)"/><text x="77.0280%" y="623.50"></text></g><g><title>_int_free (73 samples, 2.26%)</title><rect x="77.0563%" y="613" width="2.2573%" height="15" fill="rgb(229,198,43)"/><text x="77.3063%" y="623.50">_..</text></g><g><title>malloc_consolidate (31 samples, 0.96%)</title><rect x="78.3550%" y="597" width="0.9586%" height="15" fill="rgb(206,209,35)"/><text x="78.6050%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (8 samples, 0.25%)</title><rect x="79.0662%" y="581" width="0.2474%" height="15" fill="rgb(245,195,53)"/><text x="79.3162%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (127 samples, 3.93%)</title><rect x="75.6648%" y="629" width="3.9270%" height="15" fill="rgb(240,92,26)"/><text x="75.9148%" y="639.50">core..</text></g><g><title>core::ptr::drop_in_place (9 samples, 0.28%)</title><rect x="79.3135%" y="613" width="0.2783%" height="15" fill="rgb(207,40,23)"/><text x="79.5635%" y="623.50"></text></g><g><title>decor_mem::select::get_query_results (365 samples, 11.29%)</title><rect x="68.3364%" y="661" width="11.2863%" height="15" fill="rgb(223,111,35)"/><text x="68.5864%" y="671.50">decor_mem::select..</text></g><g><title>decor_mem::select::get_setexpr_results (365 samples, 11.29%)</title><rect x="68.3364%" y="645" width="11.2863%" height="15" fill="rgb(229,147,28)"/><text x="68.5864%" y="655.50">decor_mem::select..</text></g><g><title>decor_mem::views::Views::insert (6 samples, 0.19%)</title><rect x="79.6228%" y="661" width="0.1855%" height="15" fill="rgb(211,29,28)"/><text x="79.8728%" y="671.50"></text></g><g><title>decor_mem::views::View::insert_into_index (5 samples, 0.15%)</title><rect x="79.6537%" y="645" width="0.1546%" height="15" fill="rgb(228,72,33)"/><text x="79.9037%" y="655.50"></text></g><g><title>core::fmt::write (4 samples, 0.12%)</title><rect x="79.6846%" y="629" width="0.1237%" height="15" fill="rgb(205,214,31)"/><text x="79.9346%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.12%)</title><rect x="79.9011%" y="613" width="0.1237%" height="15" fill="rgb(224,111,15)"/><text x="80.1511%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.12%)</title><rect x="79.9011%" y="597" width="0.1237%" height="15" fill="rgb(253,21,26)"/><text x="80.1511%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.12%)</title><rect x="79.9011%" y="581" width="0.1237%" height="15" fill="rgb(245,139,43)"/><text x="80.1511%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.12%)</title><rect x="79.9011%" y="565" width="0.1237%" height="15" fill="rgb(252,170,7)"/><text x="80.1511%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.12%)</title><rect x="79.9011%" y="549" width="0.1237%" height="15" fill="rgb(231,118,14)"/><text x="80.1511%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (4 samples, 0.12%)</title><rect x="79.9011%" y="533" width="0.1237%" height="15" fill="rgb(238,83,0)"/><text x="80.1511%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="79.9011%" y="517" width="0.1237%" height="15" fill="rgb(221,39,39)"/><text x="80.1511%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.12%)</title><rect x="79.9011%" y="501" width="0.1237%" height="15" fill="rgb(222,119,46)"/><text x="80.1511%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.12%)</title><rect x="79.9011%" y="485" width="0.1237%" height="15" fill="rgb(222,165,49)"/><text x="80.1511%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.12%)</title><rect x="79.9011%" y="469" width="0.1237%" height="15" fill="rgb(219,113,52)"/><text x="80.1511%" y="479.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.12%)</title><rect x="79.9011%" y="453" width="0.1237%" height="15" fill="rgb(214,7,15)"/><text x="80.1511%" y="463.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (411 samples, 12.71%)</title><rect x="67.4088%" y="677" width="12.7087%" height="15" fill="rgb(235,32,4)"/><text x="67.6588%" y="687.50">decor_mem::query_tr..</text></g><g><title>decor_mem::views::Views::update (10 samples, 0.31%)</title><rect x="79.8083%" y="661" width="0.3092%" height="15" fill="rgb(238,90,54)"/><text x="80.0583%" y="671.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (10 samples, 0.31%)</title><rect x="79.8083%" y="645" width="0.3092%" height="15" fill="rgb(213,208,19)"/><text x="80.0583%" y="655.50"></text></g><g><title>decor_mem::select::get_value_for_rows (8 samples, 0.25%)</title><rect x="79.8701%" y="629" width="0.2474%" height="15" fill="rgb(233,156,4)"/><text x="80.1201%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (5 samples, 0.15%)</title><rect x="80.2721%" y="629" width="0.1546%" height="15" fill="rgb(207,194,5)"/><text x="80.5221%" y="639.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (11 samples, 0.34%)</title><rect x="80.1175%" y="677" width="0.3401%" height="15" fill="rgb(206,111,30)"/><text x="80.3675%" y="687.50"></text></g><g><title>sql_parser::parser::parse_statements (11 samples, 0.34%)</title><rect x="80.1175%" y="661" width="0.3401%" height="15" fill="rgb(243,70,54)"/><text x="80.3675%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (10 samples, 0.31%)</title><rect x="80.1484%" y="645" width="0.3092%" height="15" fill="rgb(242,28,8)"/><text x="80.3984%" y="655.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (424 samples, 13.11%)</title><rect x="67.4088%" y="709" width="13.1107%" height="15" fill="rgb(219,106,18)"/><text x="67.6588%" y="719.50">msql_srv::MysqlInter..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (424 samples, 13.11%)</title><rect x="67.4088%" y="693" width="13.1107%" height="15" fill="rgb(244,222,10)"/><text x="67.6588%" y="703.50">&lt;decor_mem::Shim as ..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 0.74%)</title><rect x="80.7978%" y="597" width="0.7421%" height="15" fill="rgb(236,179,52)"/><text x="81.0478%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (24 samples, 0.74%)</title><rect x="80.7978%" y="581" width="0.7421%" height="15" fill="rgb(213,23,39)"/><text x="81.0478%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.74%)</title><rect x="80.7978%" y="565" width="0.7421%" height="15" fill="rgb(238,48,10)"/><text x="81.0478%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.74%)</title><rect x="80.7978%" y="549" width="0.7421%" height="15" fill="rgb(251,196,23)"/><text x="81.0478%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (24 samples, 0.74%)</title><rect x="80.7978%" y="533" width="0.7421%" height="15" fill="rgb(250,152,24)"/><text x="81.0478%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (24 samples, 0.74%)</title><rect x="80.7978%" y="517" width="0.7421%" height="15" fill="rgb(209,150,17)"/><text x="81.0478%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (24 samples, 0.74%)</title><rect x="80.7978%" y="501" width="0.7421%" height="15" fill="rgb(234,202,34)"/><text x="81.0478%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.74%)</title><rect x="80.7978%" y="485" width="0.7421%" height="15" fill="rgb(253,148,53)"/><text x="81.0478%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (24 samples, 0.74%)</title><rect x="80.7978%" y="469" width="0.7421%" height="15" fill="rgb(218,129,16)"/><text x="81.0478%" y="479.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (26 samples, 0.80%)</title><rect x="80.7669%" y="629" width="0.8040%" height="15" fill="rgb(216,85,19)"/><text x="81.0169%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::expected (26 samples, 0.80%)</title><rect x="80.7669%" y="613" width="0.8040%" height="15" fill="rgb(235,228,7)"/><text x="81.0169%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (31 samples, 0.96%)</title><rect x="80.7050%" y="677" width="0.9586%" height="15" fill="rgb(245,175,0)"/><text x="80.9550%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (31 samples, 0.96%)</title><rect x="80.7050%" y="661" width="0.9586%" height="15" fill="rgb(208,168,36)"/><text x="80.9550%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (31 samples, 0.96%)</title><rect x="80.7050%" y="645" width="0.9586%" height="15" fill="rgb(246,171,24)"/><text x="80.9550%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (6 samples, 0.19%)</title><rect x="81.6636%" y="645" width="0.1855%" height="15" fill="rgb(215,142,24)"/><text x="81.9136%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (4 samples, 0.12%)</title><rect x="81.7254%" y="629" width="0.1237%" height="15" fill="rgb(250,187,7)"/><text x="81.9754%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (14 samples, 0.43%)</title><rect x="81.6636%" y="661" width="0.4329%" height="15" fill="rgb(228,66,33)"/><text x="81.9136%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (8 samples, 0.25%)</title><rect x="81.8491%" y="645" width="0.2474%" height="15" fill="rgb(234,215,21)"/><text x="82.0991%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (6 samples, 0.19%)</title><rect x="82.1583%" y="629" width="0.1855%" height="15" fill="rgb(222,191,20)"/><text x="82.4083%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (59 samples, 1.82%)</title><rect x="80.6432%" y="709" width="1.8244%" height="15" fill="rgb(245,79,54)"/><text x="80.8932%" y="719.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (57 samples, 1.76%)</title><rect x="80.7050%" y="693" width="1.7625%" height="15" fill="rgb(240,10,37)"/><text x="80.9550%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (26 samples, 0.80%)</title><rect x="81.6636%" y="677" width="0.8040%" height="15" fill="rgb(214,192,32)"/><text x="81.9136%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (12 samples, 0.37%)</title><rect x="82.0965%" y="661" width="0.3711%" height="15" fill="rgb(209,36,54)"/><text x="82.3465%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (11 samples, 0.34%)</title><rect x="82.1274%" y="645" width="0.3401%" height="15" fill="rgb(220,10,11)"/><text x="82.3774%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (10 samples, 0.31%)</title><rect x="82.5603%" y="677" width="0.3092%" height="15" fill="rgb(221,106,17)"/><text x="82.8103%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (8 samples, 0.25%)</title><rect x="82.6221%" y="661" width="0.2474%" height="15" fill="rgb(251,142,44)"/><text x="82.8721%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (5 samples, 0.15%)</title><rect x="82.7149%" y="645" width="0.1546%" height="15" fill="rgb(238,13,15)"/><text x="82.9649%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (13 samples, 0.40%)</title><rect x="82.4985%" y="709" width="0.4020%" height="15" fill="rgb(208,107,27)"/><text x="82.7485%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (11 samples, 0.34%)</title><rect x="82.5603%" y="693" width="0.3401%" height="15" fill="rgb(205,136,37)"/><text x="82.8103%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (4 samples, 0.12%)</title><rect x="82.9004%" y="709" width="0.1237%" height="15" fill="rgb(250,205,27)"/><text x="83.1504%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (9 samples, 0.28%)</title><rect x="83.3952%" y="645" width="0.2783%" height="15" fill="rgb(210,80,43)"/><text x="83.6452%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.12%)</title><rect x="83.5498%" y="629" width="0.1237%" height="15" fill="rgb(247,160,36)"/><text x="83.7998%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (26 samples, 0.80%)</title><rect x="83.0241%" y="709" width="0.8040%" height="15" fill="rgb(234,13,49)"/><text x="83.2741%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (26 samples, 0.80%)</title><rect x="83.0241%" y="693" width="0.8040%" height="15" fill="rgb(234,122,0)"/><text x="83.2741%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (23 samples, 0.71%)</title><rect x="83.1169%" y="677" width="0.7112%" height="15" fill="rgb(207,146,38)"/><text x="83.3669%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (17 samples, 0.53%)</title><rect x="83.3024%" y="661" width="0.5257%" height="15" fill="rgb(207,177,25)"/><text x="83.5524%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (5 samples, 0.15%)</title><rect x="83.6735%" y="645" width="0.1546%" height="15" fill="rgb(211,178,42)"/><text x="83.9235%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (14 samples, 0.43%)</title><rect x="83.8590%" y="677" width="0.4329%" height="15" fill="rgb(230,69,54)"/><text x="84.1090%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (14 samples, 0.43%)</title><rect x="83.8590%" y="661" width="0.4329%" height="15" fill="rgb(214,135,41)"/><text x="84.1090%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.19%)</title><rect x="84.1064%" y="645" width="0.1855%" height="15" fill="rgb(237,67,25)"/><text x="84.3564%" y="655.50"></text></g><g><title>sql_parser::parser::parse_statements (16 samples, 0.49%)</title><rect x="83.8590%" y="709" width="0.4947%" height="15" fill="rgb(222,189,50)"/><text x="84.1090%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (16 samples, 0.49%)</title><rect x="83.8590%" y="693" width="0.4947%" height="15" fill="rgb(245,148,34)"/><text x="84.1090%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.59%)</title><rect x="84.5393%" y="549" width="0.5875%" height="15" fill="rgb(222,29,6)"/><text x="84.7893%" y="559.50"></text></g><g><title>mysql_common::row::new_row (11 samples, 0.34%)</title><rect x="84.7866%" y="533" width="0.3401%" height="15" fill="rgb(221,189,43)"/><text x="85.0366%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.25%)</title><rect x="84.8794%" y="517" width="0.2474%" height="15" fill="rgb(207,36,27)"/><text x="85.1294%" y="527.50"></text></g><g><title>std::rt::lang_start_internal (30 samples, 0.93%)</title><rect x="84.4465%" y="709" width="0.9276%" height="15" fill="rgb(217,90,24)"/><text x="84.6965%" y="719.50"></text></g><g><title>std::panic::catch_unwind (30 samples, 0.93%)</title><rect x="84.4465%" y="693" width="0.9276%" height="15" fill="rgb(224,66,35)"/><text x="84.6965%" y="703.50"></text></g><g><title>std::panicking::try (30 samples, 0.93%)</title><rect x="84.4465%" y="677" width="0.9276%" height="15" fill="rgb(221,13,50)"/><text x="84.6965%" y="687.50"></text></g><g><title>std::panicking::try::do_call (30 samples, 0.93%)</title><rect x="84.4465%" y="661" width="0.9276%" height="15" fill="rgb(236,68,49)"/><text x="84.6965%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (30 samples, 0.93%)</title><rect x="84.4465%" y="645" width="0.9276%" height="15" fill="rgb(229,146,28)"/><text x="84.6965%" y="655.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (30 samples, 0.93%)</title><rect x="84.4465%" y="629" width="0.9276%" height="15" fill="rgb(225,31,38)"/><text x="84.6965%" y="639.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (30 samples, 0.93%)</title><rect x="84.4465%" y="613" width="0.9276%" height="15" fill="rgb(250,208,3)"/><text x="84.6965%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::main (30 samples, 0.93%)</title><rect x="84.4465%" y="597" width="0.9276%" height="15" fill="rgb(246,54,23)"/><text x="84.6965%" y="607.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (27 samples, 0.83%)</title><rect x="84.5393%" y="581" width="0.8349%" height="15" fill="rgb(243,76,11)"/><text x="84.7893%" y="591.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.83%)</title><rect x="84.5393%" y="565" width="0.8349%" height="15" fill="rgb(245,21,50)"/><text x="84.7893%" y="575.50"></text></g><g><title>_int_free (4 samples, 0.12%)</title><rect x="85.2505%" y="549" width="0.1237%" height="15" fill="rgb(228,9,43)"/><text x="85.5005%" y="559.50"></text></g><g><title>[unknown] (2,411 samples, 74.55%)</title><rect x="10.9771%" y="725" width="74.5516%" height="15" fill="rgb(208,100,47)"/><text x="11.2271%" y="735.50">[unknown]</text></g><g><title>_int_free (26 samples, 0.80%)</title><rect x="86.0235%" y="549" width="0.8040%" height="15" fill="rgb(232,26,8)"/><text x="86.2735%" y="559.50"></text></g><g><title>malloc_consolidate (23 samples, 0.71%)</title><rect x="86.1163%" y="533" width="0.7112%" height="15" fill="rgb(216,166,38)"/><text x="86.3663%" y="543.50"></text></g><g><title>unlink_chunk.constprop.0 (5 samples, 0.15%)</title><rect x="86.6729%" y="517" width="0.1546%" height="15" fill="rgb(251,202,51)"/><text x="86.9229%" y="527.50"></text></g><g><title>decor_mem::helpers::parser_val_to_common_val (9 samples, 0.28%)</title><rect x="86.8584%" y="549" width="0.2783%" height="15" fill="rgb(254,216,34)"/><text x="87.1084%" y="559.50"></text></g><g><title>msql_srv::resultset::QueryResultWriter&lt;W&gt;::start (4 samples, 0.12%)</title><rect x="87.1367%" y="549" width="0.1237%" height="15" fill="rgb(251,32,27)"/><text x="87.3867%" y="559.50"></text></g><g><title>msql_srv::writers::column_definitions (4 samples, 0.12%)</title><rect x="87.1367%" y="533" width="0.1237%" height="15" fill="rgb(208,127,28)"/><text x="87.3867%" y="543.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::end_row (5 samples, 0.15%)</title><rect x="87.2604%" y="549" width="0.1546%" height="15" fill="rgb(224,137,22)"/><text x="87.5104%" y="559.50"></text></g><g><title>msql_srv::packet::PacketWriter&lt;W&gt;::maybe_end_packet (4 samples, 0.12%)</title><rect x="87.2913%" y="533" width="0.1237%" height="15" fill="rgb(254,70,32)"/><text x="87.5413%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="87.8479%" y="261" width="0.1237%" height="15" fill="rgb(229,75,37)"/><text x="88.0979%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.12%)</title><rect x="87.8479%" y="245" width="0.1237%" height="15" fill="rgb(252,64,23)"/><text x="88.0979%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.12%)</title><rect x="87.8479%" y="229" width="0.1237%" height="15" fill="rgb(232,162,48)"/><text x="88.0979%" y="239.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.12%)</title><rect x="87.8479%" y="213" width="0.1237%" height="15" fill="rgb(246,160,12)"/><text x="88.0979%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.15%)</title><rect x="87.8479%" y="325" width="0.1546%" height="15" fill="rgb(247,166,0)"/><text x="88.0979%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.15%)</title><rect x="87.8479%" y="309" width="0.1546%" height="15" fill="rgb(249,219,21)"/><text x="88.0979%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.15%)</title><rect x="87.8479%" y="293" width="0.1546%" height="15" fill="rgb(205,209,3)"/><text x="88.0979%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.15%)</title><rect x="87.8479%" y="277" width="0.1546%" height="15" fill="rgb(243,44,1)"/><text x="88.0979%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.19%)</title><rect x="87.8479%" y="421" width="0.1855%" height="15" fill="rgb(206,159,16)"/><text x="88.0979%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.19%)</title><rect x="87.8479%" y="405" width="0.1855%" height="15" fill="rgb(244,77,30)"/><text x="88.0979%" y="415.50"></text></g><g><title>alloc::string::String::push_str (6 samples, 0.19%)</title><rect x="87.8479%" y="389" width="0.1855%" height="15" fill="rgb(218,69,12)"/><text x="88.0979%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.19%)</title><rect x="87.8479%" y="373" width="0.1855%" height="15" fill="rgb(212,87,7)"/><text x="88.0979%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.19%)</title><rect x="87.8479%" y="357" width="0.1855%" height="15" fill="rgb(245,114,25)"/><text x="88.0979%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.19%)</title><rect x="87.8479%" y="341" width="0.1855%" height="15" fill="rgb(210,61,42)"/><text x="88.0979%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (10 samples, 0.31%)</title><rect x="87.7860%" y="453" width="0.3092%" height="15" fill="rgb(211,52,33)"/><text x="88.0360%" y="463.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (9 samples, 0.28%)</title><rect x="87.8169%" y="437" width="0.2783%" height="15" fill="rgb(234,58,33)"/><text x="88.0669%" y="447.50"></text></g><g><title>alloc::fmt::format (15 samples, 0.46%)</title><rect x="87.6623%" y="501" width="0.4638%" height="15" fill="rgb(220,115,36)"/><text x="87.9123%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (14 samples, 0.43%)</title><rect x="87.6933%" y="485" width="0.4329%" height="15" fill="rgb(243,153,54)"/><text x="87.9433%" y="495.50"></text></g><g><title>core::fmt::write (13 samples, 0.40%)</title><rect x="87.7242%" y="469" width="0.4020%" height="15" fill="rgb(251,47,18)"/><text x="87.9742%" y="479.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (84 samples, 2.60%)</title><rect x="85.7143%" y="565" width="2.5974%" height="15" fill="rgb(242,102,42)"/><text x="85.9643%" y="575.50">de..</text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (29 samples, 0.90%)</title><rect x="87.4150%" y="549" width="0.8967%" height="15" fill="rgb(234,31,38)"/><text x="87.6650%" y="559.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (29 samples, 0.90%)</title><rect x="87.4150%" y="533" width="0.8967%" height="15" fill="rgb(221,117,51)"/><text x="87.6650%" y="543.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (25 samples, 0.77%)</title><rect x="87.5387%" y="517" width="0.7730%" height="15" fill="rgb(212,20,18)"/><text x="87.7887%" y="527.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.19%)</title><rect x="88.1262%" y="501" width="0.1855%" height="15" fill="rgb(245,133,36)"/><text x="88.3762%" y="511.50"></text></g><g><title>pty_write (4 samples, 0.12%)</title><rect x="88.6518%" y="165" width="0.1237%" height="15" fill="rgb(212,6,19)"/><text x="88.9018%" y="175.50"></text></g><g><title>queue_work_on (4 samples, 0.12%)</title><rect x="88.6518%" y="149" width="0.1237%" height="15" fill="rgb(218,1,36)"/><text x="88.9018%" y="159.50"></text></g><g><title>__queue_work (4 samples, 0.12%)</title><rect x="88.6518%" y="133" width="0.1237%" height="15" fill="rgb(246,84,54)"/><text x="88.9018%" y="143.50"></text></g><g><title>try_to_wake_up (4 samples, 0.12%)</title><rect x="88.6518%" y="117" width="0.1237%" height="15" fill="rgb(242,110,6)"/><text x="88.9018%" y="127.50"></text></g><g><title>ksys_write (10 samples, 0.31%)</title><rect x="88.4972%" y="229" width="0.3092%" height="15" fill="rgb(214,47,5)"/><text x="88.7472%" y="239.50"></text></g><g><title>vfs_write (10 samples, 0.31%)</title><rect x="88.4972%" y="213" width="0.3092%" height="15" fill="rgb(218,159,25)"/><text x="88.7472%" y="223.50"></text></g><g><title>tty_write (10 samples, 0.31%)</title><rect x="88.4972%" y="197" width="0.3092%" height="15" fill="rgb(215,211,28)"/><text x="88.7472%" y="207.50"></text></g><g><title>n_tty_write (9 samples, 0.28%)</title><rect x="88.5281%" y="181" width="0.2783%" height="15" fill="rgb(238,59,32)"/><text x="88.7781%" y="191.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (15 samples, 0.46%)</title><rect x="88.3735%" y="533" width="0.4638%" height="15" fill="rgb(226,82,3)"/><text x="88.6235%" y="543.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (14 samples, 0.43%)</title><rect x="88.4045%" y="517" width="0.4329%" height="15" fill="rgb(240,164,32)"/><text x="88.6545%" y="527.50"></text></g><g><title>std::io::stdio::_eprint (14 samples, 0.43%)</title><rect x="88.4045%" y="501" width="0.4329%" height="15" fill="rgb(232,46,7)"/><text x="88.6545%" y="511.50"></text></g><g><title>std::io::stdio::print_to (14 samples, 0.43%)</title><rect x="88.4045%" y="485" width="0.4329%" height="15" fill="rgb(229,129,53)"/><text x="88.6545%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (14 samples, 0.43%)</title><rect x="88.4045%" y="469" width="0.4329%" height="15" fill="rgb(234,188,29)"/><text x="88.6545%" y="479.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (14 samples, 0.43%)</title><rect x="88.4045%" y="453" width="0.4329%" height="15" fill="rgb(246,141,4)"/><text x="88.6545%" y="463.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (14 samples, 0.43%)</title><rect x="88.4045%" y="437" width="0.4329%" height="15" fill="rgb(229,23,39)"/><text x="88.6545%" y="447.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (14 samples, 0.43%)</title><rect x="88.4045%" y="421" width="0.4329%" height="15" fill="rgb(206,12,3)"/><text x="88.6545%" y="431.50"></text></g><g><title>std::io::Write::write_fmt (14 samples, 0.43%)</title><rect x="88.4045%" y="405" width="0.4329%" height="15" fill="rgb(252,226,20)"/><text x="88.6545%" y="415.50"></text></g><g><title>core::fmt::write (14 samples, 0.43%)</title><rect x="88.4045%" y="389" width="0.4329%" height="15" fill="rgb(216,123,35)"/><text x="88.6545%" y="399.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (14 samples, 0.43%)</title><rect x="88.4045%" y="373" width="0.4329%" height="15" fill="rgb(212,68,40)"/><text x="88.6545%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (14 samples, 0.43%)</title><rect x="88.4045%" y="357" width="0.4329%" height="15" fill="rgb(254,125,32)"/><text x="88.6545%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (14 samples, 0.43%)</title><rect x="88.4045%" y="341" width="0.4329%" height="15" fill="rgb(253,97,22)"/><text x="88.6545%" y="351.50"></text></g><g><title>std::io::Write::write_all (14 samples, 0.43%)</title><rect x="88.4045%" y="325" width="0.4329%" height="15" fill="rgb(241,101,14)"/><text x="88.6545%" y="335.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (14 samples, 0.43%)</title><rect x="88.4045%" y="309" width="0.4329%" height="15" fill="rgb(238,103,29)"/><text x="88.6545%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (14 samples, 0.43%)</title><rect x="88.4045%" y="293" width="0.4329%" height="15" fill="rgb(233,195,47)"/><text x="88.6545%" y="303.50"></text></g><g><title>__libc_write (14 samples, 0.43%)</title><rect x="88.4045%" y="277" width="0.4329%" height="15" fill="rgb(246,218,30)"/><text x="88.6545%" y="287.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.34%)</title><rect x="88.4972%" y="261" width="0.3401%" height="15" fill="rgb(219,145,47)"/><text x="88.7472%" y="271.50"></text></g><g><title>do_syscall_64 (11 samples, 0.34%)</title><rect x="88.4972%" y="245" width="0.3401%" height="15" fill="rgb(243,12,26)"/><text x="88.7472%" y="255.50"></text></g><g><title>log::__private_api_log (16 samples, 0.49%)</title><rect x="88.3735%" y="565" width="0.4947%" height="15" fill="rgb(214,87,16)"/><text x="88.6235%" y="575.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (16 samples, 0.49%)</title><rect x="88.3735%" y="549" width="0.4947%" height="15" fill="rgb(208,99,42)"/><text x="88.6235%" y="559.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (108 samples, 3.34%)</title><rect x="85.5906%" y="581" width="3.3395%" height="15" fill="rgb(253,99,2)"/><text x="85.8406%" y="591.50">&lt;de..</text></g><g><title>core::ptr::drop_in_place (6 samples, 0.19%)</title><rect x="88.9301%" y="581" width="0.1855%" height="15" fill="rgb(220,168,23)"/><text x="89.1801%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.19%)</title><rect x="88.9301%" y="565" width="0.1855%" height="15" fill="rgb(242,38,24)"/><text x="89.1801%" y="575.50"></text></g><g><title>decor_mem::stats::print_stats (5 samples, 0.15%)</title><rect x="88.9610%" y="549" width="0.1546%" height="15" fill="rgb(225,182,9)"/><text x="89.2110%" y="559.50"></text></g><g><title>dequeue_task_fair (6 samples, 0.19%)</title><rect x="89.3939%" y="293" width="0.1855%" height="15" fill="rgb(243,178,37)"/><text x="89.6439%" y="303.50"></text></g><g><title>dequeue_entity (5 samples, 0.15%)</title><rect x="89.4249%" y="277" width="0.1546%" height="15" fill="rgb(232,139,19)"/><text x="89.6749%" y="287.50"></text></g><g><title>sk_wait_data (16 samples, 0.49%)</title><rect x="89.2393%" y="373" width="0.4947%" height="15" fill="rgb(225,201,24)"/><text x="89.4893%" y="383.50"></text></g><g><title>wait_woken (16 samples, 0.49%)</title><rect x="89.2393%" y="357" width="0.4947%" height="15" fill="rgb(221,47,46)"/><text x="89.4893%" y="367.50"></text></g><g><title>schedule_timeout (15 samples, 0.46%)</title><rect x="89.2703%" y="341" width="0.4638%" height="15" fill="rgb(249,23,13)"/><text x="89.5203%" y="351.50"></text></g><g><title>schedule (15 samples, 0.46%)</title><rect x="89.2703%" y="325" width="0.4638%" height="15" fill="rgb(219,9,5)"/><text x="89.5203%" y="335.50"></text></g><g><title>__schedule (14 samples, 0.43%)</title><rect x="89.3012%" y="309" width="0.4329%" height="15" fill="rgb(254,171,16)"/><text x="89.5512%" y="319.50"></text></g><g><title>__x64_sys_recvfrom (20 samples, 0.62%)</title><rect x="89.1775%" y="437" width="0.6184%" height="15" fill="rgb(230,171,20)"/><text x="89.4275%" y="447.50"></text></g><g><title>__sys_recvfrom (20 samples, 0.62%)</title><rect x="89.1775%" y="421" width="0.6184%" height="15" fill="rgb(210,71,41)"/><text x="89.4275%" y="431.50"></text></g><g><title>inet_recvmsg (20 samples, 0.62%)</title><rect x="89.1775%" y="405" width="0.6184%" height="15" fill="rgb(206,173,20)"/><text x="89.4275%" y="415.50"></text></g><g><title>tcp_recvmsg (20 samples, 0.62%)</title><rect x="89.1775%" y="389" width="0.6184%" height="15" fill="rgb(233,88,34)"/><text x="89.4275%" y="399.50"></text></g><g><title>do_syscall_64 (22 samples, 0.68%)</title><rect x="89.1466%" y="453" width="0.6803%" height="15" fill="rgb(223,209,46)"/><text x="89.3966%" y="463.50"></text></g><g><title>__libc_recv (23 samples, 0.71%)</title><rect x="89.1466%" y="485" width="0.7112%" height="15" fill="rgb(250,43,18)"/><text x="89.3966%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (23 samples, 0.71%)</title><rect x="89.1466%" y="469" width="0.7112%" height="15" fill="rgb(208,13,10)"/><text x="89.3966%" y="479.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (24 samples, 0.74%)</title><rect x="89.1466%" y="581" width="0.7421%" height="15" fill="rgb(212,200,36)"/><text x="89.3966%" y="591.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (24 samples, 0.74%)</title><rect x="89.1466%" y="565" width="0.7421%" height="15" fill="rgb(225,90,30)"/><text x="89.3966%" y="575.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (24 samples, 0.74%)</title><rect x="89.1466%" y="549" width="0.7421%" height="15" fill="rgb(236,182,39)"/><text x="89.3966%" y="559.50"></text></g><g><title>std::sys_common::net::TcpStream::read (24 samples, 0.74%)</title><rect x="89.1466%" y="533" width="0.7421%" height="15" fill="rgb(212,144,35)"/><text x="89.3966%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::read (24 samples, 0.74%)</title><rect x="89.1466%" y="517" width="0.7421%" height="15" fill="rgb(228,63,44)"/><text x="89.3966%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (24 samples, 0.74%)</title><rect x="89.1466%" y="501" width="0.7421%" height="15" fill="rgb(228,109,6)"/><text x="89.3966%" y="511.50"></text></g><g><title>__dev_queue_xmit (4 samples, 0.12%)</title><rect x="90.1979%" y="309" width="0.1237%" height="15" fill="rgb(238,117,24)"/><text x="90.4479%" y="319.50"></text></g><g><title>sock_def_readable (12 samples, 0.37%)</title><rect x="90.5380%" y="85" width="0.3711%" height="15" fill="rgb(242,26,26)"/><text x="90.7880%" y="95.50"></text></g><g><title>__wake_up_common_lock (12 samples, 0.37%)</title><rect x="90.5380%" y="69" width="0.3711%" height="15" fill="rgb(221,92,48)"/><text x="90.7880%" y="79.50"></text></g><g><title>__wake_up_common (12 samples, 0.37%)</title><rect x="90.5380%" y="53" width="0.3711%" height="15" fill="rgb(209,209,32)"/><text x="90.7880%" y="63.50"></text></g><g><title>try_to_wake_up (10 samples, 0.31%)</title><rect x="90.5999%" y="37" width="0.3092%" height="15" fill="rgb(221,70,22)"/><text x="90.8499%" y="47.50"></text></g><g><title>__ip_queue_xmit (29 samples, 0.90%)</title><rect x="90.1051%" y="357" width="0.8967%" height="15" fill="rgb(248,145,5)"/><text x="90.3551%" y="367.50"></text></g><g><title>ip_output (28 samples, 0.87%)</title><rect x="90.1361%" y="341" width="0.8658%" height="15" fill="rgb(226,116,26)"/><text x="90.3861%" y="351.50"></text></g><g><title>ip_finish_output2 (27 samples, 0.83%)</title><rect x="90.1670%" y="325" width="0.8349%" height="15" fill="rgb(244,5,17)"/><text x="90.4170%" y="335.50"></text></g><g><title>__local_bh_enable_ip (22 samples, 0.68%)</title><rect x="90.3216%" y="309" width="0.6803%" height="15" fill="rgb(252,159,33)"/><text x="90.5716%" y="319.50"></text></g><g><title>do_softirq (22 samples, 0.68%)</title><rect x="90.3216%" y="293" width="0.6803%" height="15" fill="rgb(206,71,0)"/><text x="90.5716%" y="303.50"></text></g><g><title>do_softirq_own_stack (22 samples, 0.68%)</title><rect x="90.3216%" y="277" width="0.6803%" height="15" fill="rgb(233,118,54)"/><text x="90.5716%" y="287.50"></text></g><g><title>__do_softirq (22 samples, 0.68%)</title><rect x="90.3216%" y="261" width="0.6803%" height="15" fill="rgb(234,83,48)"/><text x="90.5716%" y="271.50"></text></g><g><title>net_rx_action (21 samples, 0.65%)</title><rect x="90.3525%" y="245" width="0.6494%" height="15" fill="rgb(228,3,54)"/><text x="90.6025%" y="255.50"></text></g><g><title>process_backlog (19 samples, 0.59%)</title><rect x="90.4143%" y="229" width="0.5875%" height="15" fill="rgb(226,155,13)"/><text x="90.6643%" y="239.50"></text></g><g><title>__netif_receive_skb_one_core (19 samples, 0.59%)</title><rect x="90.4143%" y="213" width="0.5875%" height="15" fill="rgb(241,28,37)"/><text x="90.6643%" y="223.50"></text></g><g><title>ip_rcv (18 samples, 0.56%)</title><rect x="90.4453%" y="197" width="0.5566%" height="15" fill="rgb(233,93,10)"/><text x="90.6953%" y="207.50"></text></g><g><title>ip_local_deliver (18 samples, 0.56%)</title><rect x="90.4453%" y="181" width="0.5566%" height="15" fill="rgb(225,113,19)"/><text x="90.6953%" y="191.50"></text></g><g><title>ip_local_deliver_finish (18 samples, 0.56%)</title><rect x="90.4453%" y="165" width="0.5566%" height="15" fill="rgb(241,2,18)"/><text x="90.6953%" y="175.50"></text></g><g><title>ip_protocol_deliver_rcu (18 samples, 0.56%)</title><rect x="90.4453%" y="149" width="0.5566%" height="15" fill="rgb(228,207,21)"/><text x="90.6953%" y="159.50"></text></g><g><title>tcp_v4_rcv (18 samples, 0.56%)</title><rect x="90.4453%" y="133" width="0.5566%" height="15" fill="rgb(213,211,35)"/><text x="90.6953%" y="143.50"></text></g><g><title>tcp_v4_do_rcv (16 samples, 0.49%)</title><rect x="90.5071%" y="117" width="0.4947%" height="15" fill="rgb(209,83,10)"/><text x="90.7571%" y="127.50"></text></g><g><title>tcp_rcv_established (15 samples, 0.46%)</title><rect x="90.5380%" y="101" width="0.4638%" height="15" fill="rgb(209,164,1)"/><text x="90.7880%" y="111.50"></text></g><g><title>__tcp_push_pending_frames (31 samples, 0.96%)</title><rect x="90.0742%" y="405" width="0.9586%" height="15" fill="rgb(213,184,43)"/><text x="90.3242%" y="415.50"></text></g><g><title>tcp_write_xmit (30 samples, 0.93%)</title><rect x="90.1051%" y="389" width="0.9276%" height="15" fill="rgb(231,61,34)"/><text x="90.3551%" y="399.50"></text></g><g><title>__tcp_transmit_skb (30 samples, 0.93%)</title><rect x="90.1051%" y="373" width="0.9276%" height="15" fill="rgb(235,75,3)"/><text x="90.3551%" y="383.50"></text></g><g><title>__x64_sys_sendto (40 samples, 1.24%)</title><rect x="89.9196%" y="485" width="1.2369%" height="15" fill="rgb(220,106,47)"/><text x="90.1696%" y="495.50"></text></g><g><title>__sys_sendto (39 samples, 1.21%)</title><rect x="89.9505%" y="469" width="1.2059%" height="15" fill="rgb(210,196,33)"/><text x="90.2005%" y="479.50"></text></g><g><title>sock_sendmsg (39 samples, 1.21%)</title><rect x="89.9505%" y="453" width="1.2059%" height="15" fill="rgb(229,154,42)"/><text x="90.2005%" y="463.50"></text></g><g><title>tcp_sendmsg (38 samples, 1.18%)</title><rect x="89.9814%" y="437" width="1.1750%" height="15" fill="rgb(228,114,26)"/><text x="90.2314%" y="447.50"></text></g><g><title>tcp_sendmsg_locked (36 samples, 1.11%)</title><rect x="90.0433%" y="421" width="1.1132%" height="15" fill="rgb(208,144,1)"/><text x="90.2933%" y="431.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (182 samples, 5.63%)</title><rect x="85.5597%" y="597" width="5.6277%" height="15" fill="rgb(239,112,37)"/><text x="85.8097%" y="607.50">msql_sr..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (41 samples, 1.27%)</title><rect x="89.9196%" y="581" width="1.2678%" height="15" fill="rgb(210,96,50)"/><text x="90.1696%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (41 samples, 1.27%)</title><rect x="89.9196%" y="565" width="1.2678%" height="15" fill="rgb(222,178,2)"/><text x="90.1696%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::write (41 samples, 1.27%)</title><rect x="89.9196%" y="549" width="1.2678%" height="15" fill="rgb(226,74,18)"/><text x="90.1696%" y="559.50"></text></g><g><title>__libc_send (41 samples, 1.27%)</title><rect x="89.9196%" y="533" width="1.2678%" height="15" fill="rgb(225,67,54)"/><text x="90.1696%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (41 samples, 1.27%)</title><rect x="89.9196%" y="517" width="1.2678%" height="15" fill="rgb(251,92,32)"/><text x="90.1696%" y="527.50"></text></g><g><title>do_syscall_64 (41 samples, 1.27%)</title><rect x="89.9196%" y="501" width="1.2678%" height="15" fill="rgb(228,149,22)"/><text x="90.1696%" y="511.50"></text></g><g><title>__GI___clone (184 samples, 5.69%)</title><rect x="85.5288%" y="725" width="5.6895%" height="15" fill="rgb(243,54,13)"/><text x="85.7788%" y="735.50">__GI___..</text></g><g><title>start_thread (184 samples, 5.69%)</title><rect x="85.5288%" y="709" width="5.6895%" height="15" fill="rgb(243,180,28)"/><text x="85.7788%" y="719.50">start_t..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (183 samples, 5.66%)</title><rect x="85.5597%" y="693" width="5.6586%" height="15" fill="rgb(208,167,24)"/><text x="85.8097%" y="703.50">std::sy..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (183 samples, 5.66%)</title><rect x="85.5597%" y="677" width="5.6586%" height="15" fill="rgb(245,73,45)"/><text x="85.8097%" y="687.50">&lt;alloc:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (183 samples, 5.66%)</title><rect x="85.5597%" y="661" width="5.6586%" height="15" fill="rgb(237,203,48)"/><text x="85.8097%" y="671.50">&lt;alloc:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (183 samples, 5.66%)</title><rect x="85.5597%" y="645" width="5.6586%" height="15" fill="rgb(211,197,16)"/><text x="85.8097%" y="655.50">core::o..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (183 samples, 5.66%)</title><rect x="85.5597%" y="629" width="5.6586%" height="15" fill="rgb(243,99,51)"/><text x="85.8097%" y="639.50">std::sy..</text></g><g><title>decor_mem::Shim::run_on_tcp (183 samples, 5.66%)</title><rect x="85.5597%" y="613" width="5.6586%" height="15" fill="rgb(215,123,29)"/><text x="85.8097%" y="623.50">decor_m..</text></g><g><title>_int_free (7 samples, 0.22%)</title><rect x="91.2492%" y="725" width="0.2165%" height="15" fill="rgb(239,186,37)"/><text x="91.4992%" y="735.50"></text></g><g><title>__perf_event_task_sched_in (233 samples, 7.20%)</title><rect x="91.6512%" y="261" width="7.2047%" height="15" fill="rgb(252,136,39)"/><text x="91.9012%" y="271.50">__perf_eve..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (232 samples, 7.17%)</title><rect x="91.6821%" y="245" width="7.1738%" height="15" fill="rgb(223,213,32)"/><text x="91.9321%" y="255.50">__intel_pm..</text></g><g><title>native_write_msr (231 samples, 7.14%)</title><rect x="91.7130%" y="229" width="7.1429%" height="15" fill="rgb(233,115,5)"/><text x="91.9630%" y="239.50">native_wri..</text></g><g><title>cpu_stop_queue_work (234 samples, 7.24%)</title><rect x="91.6512%" y="341" width="7.2356%" height="15" fill="rgb(207,226,44)"/><text x="91.9012%" y="351.50">cpu_stop_q..</text></g><g><title>preempt_schedule_thunk (234 samples, 7.24%)</title><rect x="91.6512%" y="325" width="7.2356%" height="15" fill="rgb(208,126,0)"/><text x="91.9012%" y="335.50">preempt_sc..</text></g><g><title>preempt_schedule_common (234 samples, 7.24%)</title><rect x="91.6512%" y="309" width="7.2356%" height="15" fill="rgb(244,66,21)"/><text x="91.9012%" y="319.50">preempt_sc..</text></g><g><title>__schedule (234 samples, 7.24%)</title><rect x="91.6512%" y="293" width="7.2356%" height="15" fill="rgb(222,97,12)"/><text x="91.9012%" y="303.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 7.24%)</title><rect x="91.6512%" y="277" width="7.2356%" height="15" fill="rgb(219,213,19)"/><text x="91.9012%" y="287.50">finish_tas..</text></g><g><title>do_syscall_64 (235 samples, 7.27%)</title><rect x="91.6512%" y="421" width="7.2665%" height="15" fill="rgb(252,169,30)"/><text x="91.9012%" y="431.50">do_syscall..</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 7.27%)</title><rect x="91.6512%" y="405" width="7.2665%" height="15" fill="rgb(206,32,51)"/><text x="91.9012%" y="415.50">__x64_sys_..</text></g><g><title>sched_setaffinity (235 samples, 7.27%)</title><rect x="91.6512%" y="389" width="7.2665%" height="15" fill="rgb(250,172,42)"/><text x="91.9012%" y="399.50">sched_seta..</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 7.27%)</title><rect x="91.6512%" y="373" width="7.2665%" height="15" fill="rgb(209,34,43)"/><text x="91.9012%" y="383.50">__set_cpus..</text></g><g><title>stop_one_cpu (235 samples, 7.27%)</title><rect x="91.6512%" y="357" width="7.2665%" height="15" fill="rgb(223,11,35)"/><text x="91.9012%" y="367.50">stop_one_c..</text></g><g><title>entry_SYSCALL_64 (236 samples, 7.30%)</title><rect x="91.6512%" y="437" width="7.2975%" height="15" fill="rgb(251,219,26)"/><text x="91.9012%" y="447.50">entry_SYSC..</text></g><g><title>hwloc::Topology::new (240 samples, 7.42%)</title><rect x="91.5584%" y="549" width="7.4212%" height="15" fill="rgb(231,119,3)"/><text x="91.8084%" y="559.50">hwloc::Top..</text></g><g><title>hwloc_topology_load (240 samples, 7.42%)</title><rect x="91.5584%" y="533" width="7.4212%" height="15" fill="rgb(216,97,11)"/><text x="91.8084%" y="543.50">hwloc_topo..</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 7.42%)</title><rect x="91.5584%" y="517" width="7.4212%" height="15" fill="rgb(223,59,9)"/><text x="91.8084%" y="527.50">[libhwloc...</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 7.42%)</title><rect x="91.5584%" y="501" width="7.4212%" height="15" fill="rgb(233,93,31)"/><text x="91.8084%" y="511.50">[libhwloc...</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 7.42%)</title><rect x="91.5584%" y="485" width="7.4212%" height="15" fill="rgb(239,81,33)"/><text x="91.8084%" y="495.50">[libhwloc...</text></g><g><title>hwloc_linux_set_tid_cpubind (239 samples, 7.39%)</title><rect x="91.5894%" y="469" width="7.3902%" height="15" fill="rgb(213,120,34)"/><text x="91.8394%" y="479.50">hwloc_linu..</text></g><g><title>__GI___sched_setaffinity_new (237 samples, 7.33%)</title><rect x="91.6512%" y="453" width="7.3284%" height="15" fill="rgb(243,49,53)"/><text x="91.9012%" y="463.50">__GI___sch..</text></g><g><title>__libc_start_main (245 samples, 7.58%)</title><rect x="91.5275%" y="709" width="7.5758%" height="15" fill="rgb(247,216,33)"/><text x="91.7775%" y="719.50">__libc_sta..</text></g><g><title>main (245 samples, 7.58%)</title><rect x="91.5275%" y="693" width="7.5758%" height="15" fill="rgb(226,26,14)"/><text x="91.7775%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (245 samples, 7.58%)</title><rect x="91.5275%" y="677" width="7.5758%" height="15" fill="rgb(215,49,53)"/><text x="91.7775%" y="687.50">std::rt::l..</text></g><g><title>std::panic::catch_unwind (245 samples, 7.58%)</title><rect x="91.5275%" y="661" width="7.5758%" height="15" fill="rgb(245,162,40)"/><text x="91.7775%" y="671.50">std::panic..</text></g><g><title>std::panicking::try (245 samples, 7.58%)</title><rect x="91.5275%" y="645" width="7.5758%" height="15" fill="rgb(229,68,17)"/><text x="91.7775%" y="655.50">std::panic..</text></g><g><title>std::panicking::try::do_call (245 samples, 7.58%)</title><rect x="91.5275%" y="629" width="7.5758%" height="15" fill="rgb(213,182,10)"/><text x="91.7775%" y="639.50">std::panic..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (245 samples, 7.58%)</title><rect x="91.5275%" y="613" width="7.5758%" height="15" fill="rgb(245,125,30)"/><text x="91.7775%" y="623.50">core::ops:..</text></g><g><title>std::rt::lang_start::_{{closure}} (245 samples, 7.58%)</title><rect x="91.5275%" y="597" width="7.5758%" height="15" fill="rgb(232,202,2)"/><text x="91.7775%" y="607.50">std::rt::l..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (245 samples, 7.58%)</title><rect x="91.5275%" y="581" width="7.5758%" height="15" fill="rgb(237,140,51)"/><text x="91.7775%" y="591.50">std::sys_c..</text></g><g><title>lobsters_microbenchmarks::main (245 samples, 7.58%)</title><rect x="91.5275%" y="565" width="7.5758%" height="15" fill="rgb(236,157,25)"/><text x="91.7775%" y="575.50">lobsters_m..</text></g><g><title>_start (246 samples, 7.61%)</title><rect x="91.5275%" y="725" width="7.6067%" height="15" fill="rgb(219,209,0)"/><text x="91.7775%" y="735.50">_start</text></g><g><title>decor_mem::select::get_rows_matching_constraint (4 samples, 0.12%)</title><rect x="99.2888%" y="725" width="0.1237%" height="15" fill="rgb(240,116,54)"/><text x="99.5388%" y="735.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.12%)</title><rect x="99.4125%" y="725" width="0.1237%" height="15" fill="rgb(216,10,36)"/><text x="99.6625%" y="735.50"></text></g><g><title>lobsters-microb (3,228 samples, 99.81%)</title><rect x="0.0000%" y="741" width="99.8145%" height="15" fill="rgb(222,72,44)"/><text x="0.2500%" y="751.50">lobsters-microb</text></g><g><title>malloc_consolidate (9 samples, 0.28%)</title><rect x="99.5362%" y="725" width="0.2783%" height="15" fill="rgb(232,159,9)"/><text x="99.7862%" y="735.50"></text></g><g><title>all (3,234 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(210,39,32)"/><text x="0.2500%" y="767.50"></text></g><g><title>perf (6 samples, 0.19%)</title><rect x="99.8145%" y="741" width="0.1855%" height="15" fill="rgb(216,194,45)"/><text x="100.0645%" y="751.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.19%)</title><rect x="99.8145%" y="725" width="0.1855%" height="15" fill="rgb(218,18,35)"/><text x="100.0645%" y="735.50"></text></g><g><title>do_syscall_64 (6 samples, 0.19%)</title><rect x="99.8145%" y="709" width="0.1855%" height="15" fill="rgb(207,83,51)"/><text x="100.0645%" y="719.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.19%)</title><rect x="99.8145%" y="693" width="0.1855%" height="15" fill="rgb(225,63,43)"/><text x="100.0645%" y="703.50"></text></g><g><title>do_execve (6 samples, 0.19%)</title><rect x="99.8145%" y="677" width="0.1855%" height="15" fill="rgb(207,57,36)"/><text x="100.0645%" y="687.50"></text></g><g><title>__do_execve_file (6 samples, 0.19%)</title><rect x="99.8145%" y="661" width="0.1855%" height="15" fill="rgb(216,99,33)"/><text x="100.0645%" y="671.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.19%)</title><rect x="99.8145%" y="645" width="0.1855%" height="15" fill="rgb(225,42,16)"/><text x="100.0645%" y="655.50"></text></g><g><title>load_elf_binary (6 samples, 0.19%)</title><rect x="99.8145%" y="629" width="0.1855%" height="15" fill="rgb(220,201,45)"/><text x="100.0645%" y="639.50"></text></g><g><title>setup_new_exec (6 samples, 0.19%)</title><rect x="99.8145%" y="613" width="0.1855%" height="15" fill="rgb(225,33,4)"/><text x="100.0645%" y="623.50"></text></g><g><title>perf_event_exec (6 samples, 0.19%)</title><rect x="99.8145%" y="597" width="0.1855%" height="15" fill="rgb(224,33,50)"/><text x="100.0645%" y="607.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.15%)</title><rect x="99.8454%" y="581" width="0.1546%" height="15" fill="rgb(246,198,51)"/><text x="100.0954%" y="591.50"></text></g><g><title>native_write_msr (5 samples, 0.15%)</title><rect x="99.8454%" y="565" width="0.1546%" height="15" fill="rgb(205,22,4)"/><text x="100.0954%" y="575.50"></text></g></svg></svg>