<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180"><g><title>__GI___libc_malloc (7 samples, 0.47%)</title><rect x="0.0670%" y="709" width="0.4692%" height="15" fill="rgb(227,0,7)"/><text x="0.3170%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.13%)</title><rect x="0.6032%" y="709" width="0.1340%" height="15" fill="rgb(217,0,24)"/><text x="0.8532%" y="719.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (2 samples, 0.13%)</title><rect x="0.8713%" y="709" width="0.1340%" height="15" fill="rgb(221,193,54)"/><text x="1.1213%" y="719.50"></text></g><g><title>[[heap]] (16 samples, 1.07%)</title><rect x="0.0000%" y="725" width="1.0724%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.20%)</title><rect x="1.0724%" y="709" width="0.2011%" height="15" fill="rgb(208,68,35)"/><text x="1.3224%" y="719.50"></text></g><g><title>&lt;mysql::conn::ConnMut as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.13%)</title><rect x="1.2735%" y="709" width="0.1340%" height="15" fill="rgb(232,128,0)"/><text x="1.5235%" y="719.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.13%)</title><rect x="1.5416%" y="709" width="0.1340%" height="15" fill="rgb(207,160,47)"/><text x="1.7916%" y="719.50"></text></g><g><title>_int_free (4 samples, 0.27%)</title><rect x="1.6756%" y="709" width="0.2681%" height="15" fill="rgb(228,23,34)"/><text x="1.9256%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.20%)</title><rect x="1.9437%" y="709" width="0.2011%" height="15" fill="rgb(218,30,26)"/><text x="2.1937%" y="719.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (3 samples, 0.20%)</title><rect x="2.1448%" y="709" width="0.2011%" height="15" fill="rgb(220,122,19)"/><text x="2.3948%" y="719.50"></text></g><g><title>mysql::conn::Conn::next_text (5 samples, 0.34%)</title><rect x="2.4129%" y="709" width="0.3351%" height="15" fill="rgb(250,228,42)"/><text x="2.6629%" y="719.50"></text></g><g><title>[[stack]] (29 samples, 1.94%)</title><rect x="1.0724%" y="725" width="1.9437%" height="15" fill="rgb(240,193,28)"/><text x="1.3224%" y="735.50">[..</text></g><g><title>mysql_common::row::new_row (2 samples, 0.13%)</title><rect x="2.8820%" y="709" width="0.1340%" height="15" fill="rgb(216,20,37)"/><text x="3.1320%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 1.07%)</title><rect x="3.0831%" y="709" width="1.0724%" height="15" fill="rgb(206,188,39)"/><text x="3.3331%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.47%)</title><rect x="3.6863%" y="693" width="0.4692%" height="15" fill="rgb(217,207,13)"/><text x="3.9363%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.47%)</title><rect x="3.6863%" y="677" width="0.4692%" height="15" fill="rgb(231,73,38)"/><text x="3.9363%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.47%)</title><rect x="3.6863%" y="661" width="0.4692%" height="15" fill="rgb(225,20,46)"/><text x="3.9363%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.47%)</title><rect x="3.6863%" y="645" width="0.4692%" height="15" fill="rgb(210,31,41)"/><text x="3.9363%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.47%)</title><rect x="3.6863%" y="629" width="0.4692%" height="15" fill="rgb(221,200,47)"/><text x="3.9363%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.47%)</title><rect x="3.6863%" y="613" width="0.4692%" height="15" fill="rgb(226,26,5)"/><text x="3.9363%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.47%)</title><rect x="3.6863%" y="597" width="0.4692%" height="15" fill="rgb(249,33,26)"/><text x="3.9363%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.47%)</title><rect x="3.6863%" y="581" width="0.4692%" height="15" fill="rgb(235,183,28)"/><text x="3.9363%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.47%)</title><rect x="3.6863%" y="565" width="0.4692%" height="15" fill="rgb(221,5,38)"/><text x="3.9363%" y="575.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.47%)</title><rect x="3.6863%" y="549" width="0.4692%" height="15" fill="rgb(247,18,42)"/><text x="3.9363%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.20%)</title><rect x="4.1555%" y="709" width="0.2011%" height="15" fill="rgb(241,131,45)"/><text x="4.4055%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.13%)</title><rect x="4.3566%" y="709" width="0.1340%" height="15" fill="rgb(249,31,29)"/><text x="4.6066%" y="719.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (2 samples, 0.13%)</title><rect x="4.5576%" y="709" width="0.1340%" height="15" fill="rgb(225,111,53)"/><text x="4.8076%" y="719.50"></text></g><g><title>__GI___libc_free (2 samples, 0.13%)</title><rect x="4.6917%" y="709" width="0.1340%" height="15" fill="rgb(238,160,17)"/><text x="4.9417%" y="719.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.94%)</title><rect x="4.8257%" y="709" width="0.9383%" height="15" fill="rgb(214,148,48)"/><text x="5.0757%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.13%)</title><rect x="5.7641%" y="709" width="0.1340%" height="15" fill="rgb(232,36,49)"/><text x="6.0141%" y="719.50"></text></g><g><title>_int_free (8 samples, 0.54%)</title><rect x="5.8981%" y="709" width="0.5362%" height="15" fill="rgb(209,103,24)"/><text x="6.1481%" y="719.50"></text></g><g><title>_int_malloc (6 samples, 0.40%)</title><rect x="6.4343%" y="709" width="0.4021%" height="15" fill="rgb(229,88,8)"/><text x="6.6843%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.13%)</title><rect x="6.8365%" y="709" width="0.1340%" height="15" fill="rgb(213,181,19)"/><text x="7.0865%" y="719.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (2 samples, 0.13%)</title><rect x="7.1716%" y="709" width="0.1340%" height="15" fill="rgb(254,191,54)"/><text x="7.4216%" y="719.50"></text></g><g><title>decor_mem::select::get_setexpr_results (3 samples, 0.20%)</title><rect x="7.3056%" y="709" width="0.2011%" height="15" fill="rgb(241,83,37)"/><text x="7.5556%" y="719.50"></text></g><g><title>[anon] (78 samples, 5.23%)</title><rect x="3.0161%" y="725" width="5.2279%" height="15" fill="rgb(233,36,39)"/><text x="3.2661%" y="735.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (7 samples, 0.47%)</title><rect x="7.7748%" y="709" width="0.4692%" height="15" fill="rgb(226,3,54)"/><text x="8.0248%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.34%)</title><rect x="8.3110%" y="709" width="0.3351%" height="15" fill="rgb(245,192,40)"/><text x="8.5610%" y="719.50"></text></g><g><title>[lobsters-microbenchmarks] (11 samples, 0.74%)</title><rect x="8.3110%" y="725" width="0.7373%" height="15" fill="rgb(238,167,29)"/><text x="8.5610%" y="735.50"></text></g><g><title>mysql_common::value::read_text_value (5 samples, 0.34%)</title><rect x="8.7131%" y="709" width="0.3351%" height="15" fill="rgb(232,182,51)"/><text x="8.9631%" y="719.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.27%)</title><rect x="9.0483%" y="709" width="0.2681%" height="15" fill="rgb(231,60,39)"/><text x="9.2983%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.27%)</title><rect x="9.3164%" y="709" width="0.2681%" height="15" fill="rgb(208,69,12)"/><text x="9.5664%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.20%)</title><rect x="9.5845%" y="709" width="0.2011%" height="15" fill="rgb(235,93,37)"/><text x="9.8345%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (3 samples, 0.20%)</title><rect x="9.8525%" y="677" width="0.2011%" height="15" fill="rgb(213,116,39)"/><text x="10.1025%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (3 samples, 0.20%)</title><rect x="9.8525%" y="661" width="0.2011%" height="15" fill="rgb(222,207,29)"/><text x="10.1025%" y="671.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (3 samples, 0.20%)</title><rect x="9.8525%" y="645" width="0.2011%" height="15" fill="rgb(206,96,30)"/><text x="10.1025%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (3 samples, 0.20%)</title><rect x="9.8525%" y="629" width="0.2011%" height="15" fill="rgb(218,138,4)"/><text x="10.1025%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.20%)</title><rect x="9.8525%" y="613" width="0.2011%" height="15" fill="rgb(250,191,14)"/><text x="10.1025%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="9.8525%" y="597" width="0.2011%" height="15" fill="rgb(239,60,40)"/><text x="10.1025%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.20%)</title><rect x="9.8525%" y="581" width="0.2011%" height="15" fill="rgb(206,27,48)"/><text x="10.1025%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (3 samples, 0.20%)</title><rect x="9.8525%" y="565" width="0.2011%" height="15" fill="rgb(225,35,8)"/><text x="10.1025%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (3 samples, 0.20%)</title><rect x="9.8525%" y="549" width="0.2011%" height="15" fill="rgb(250,213,24)"/><text x="10.1025%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (3 samples, 0.20%)</title><rect x="9.8525%" y="533" width="0.2011%" height="15" fill="rgb(247,123,22)"/><text x="10.1025%" y="543.50"></text></g><g><title>__libc_recv (3 samples, 0.20%)</title><rect x="9.8525%" y="517" width="0.2011%" height="15" fill="rgb(231,138,38)"/><text x="10.1025%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.20%)</title><rect x="9.8525%" y="501" width="0.2011%" height="15" fill="rgb(231,145,46)"/><text x="10.1025%" y="511.50"></text></g><g><title>do_syscall_64 (3 samples, 0.20%)</title><rect x="9.8525%" y="485" width="0.2011%" height="15" fill="rgb(251,118,11)"/><text x="10.1025%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (3 samples, 0.20%)</title><rect x="9.8525%" y="469" width="0.2011%" height="15" fill="rgb(217,147,25)"/><text x="10.1025%" y="479.50"></text></g><g><title>__sys_recvfrom (3 samples, 0.20%)</title><rect x="9.8525%" y="453" width="0.2011%" height="15" fill="rgb(247,81,37)"/><text x="10.1025%" y="463.50"></text></g><g><title>inet_recvmsg (3 samples, 0.20%)</title><rect x="9.8525%" y="437" width="0.2011%" height="15" fill="rgb(209,12,38)"/><text x="10.1025%" y="447.50"></text></g><g><title>tcp_recvmsg (3 samples, 0.20%)</title><rect x="9.8525%" y="421" width="0.2011%" height="15" fill="rgb(227,1,9)"/><text x="10.1025%" y="431.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (5 samples, 0.34%)</title><rect x="10.0536%" y="677" width="0.3351%" height="15" fill="rgb(248,47,43)"/><text x="10.3036%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (5 samples, 0.34%)</title><rect x="10.0536%" y="661" width="0.3351%" height="15" fill="rgb(221,10,30)"/><text x="10.3036%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.34%)</title><rect x="10.0536%" y="645" width="0.3351%" height="15" fill="rgb(210,229,1)"/><text x="10.3036%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.34%)</title><rect x="10.0536%" y="629" width="0.3351%" height="15" fill="rgb(222,148,37)"/><text x="10.3036%" y="639.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.34%)</title><rect x="10.0536%" y="613" width="0.3351%" height="15" fill="rgb(234,67,33)"/><text x="10.3036%" y="623.50"></text></g><g><title>_int_malloc (5 samples, 0.34%)</title><rect x="10.0536%" y="597" width="0.3351%" height="15" fill="rgb(247,98,35)"/><text x="10.3036%" y="607.50"></text></g><g><title>sysmalloc (5 samples, 0.34%)</title><rect x="10.0536%" y="581" width="0.3351%" height="15" fill="rgb(247,138,52)"/><text x="10.3036%" y="591.50"></text></g><g><title>page_fault (4 samples, 0.27%)</title><rect x="10.1206%" y="565" width="0.2681%" height="15" fill="rgb(213,79,30)"/><text x="10.3706%" y="575.50"></text></g><g><title>do_user_addr_fault (4 samples, 0.27%)</title><rect x="10.1206%" y="549" width="0.2681%" height="15" fill="rgb(246,177,23)"/><text x="10.3706%" y="559.50"></text></g><g><title>handle_mm_fault (4 samples, 0.27%)</title><rect x="10.1206%" y="533" width="0.2681%" height="15" fill="rgb(230,62,27)"/><text x="10.3706%" y="543.50"></text></g><g><title>__handle_mm_fault (4 samples, 0.27%)</title><rect x="10.1206%" y="517" width="0.2681%" height="15" fill="rgb(216,154,8)"/><text x="10.3706%" y="527.50"></text></g><g><title>sk_wait_data (2 samples, 0.13%)</title><rect x="10.5228%" y="405" width="0.1340%" height="15" fill="rgb(244,35,45)"/><text x="10.7728%" y="415.50"></text></g><g><title>do_syscall_64 (4 samples, 0.27%)</title><rect x="10.5228%" y="485" width="0.2681%" height="15" fill="rgb(251,115,12)"/><text x="10.7728%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (4 samples, 0.27%)</title><rect x="10.5228%" y="469" width="0.2681%" height="15" fill="rgb(240,54,50)"/><text x="10.7728%" y="479.50"></text></g><g><title>__sys_recvfrom (4 samples, 0.27%)</title><rect x="10.5228%" y="453" width="0.2681%" height="15" fill="rgb(233,84,52)"/><text x="10.7728%" y="463.50"></text></g><g><title>inet_recvmsg (4 samples, 0.27%)</title><rect x="10.5228%" y="437" width="0.2681%" height="15" fill="rgb(207,117,47)"/><text x="10.7728%" y="447.50"></text></g><g><title>tcp_recvmsg (4 samples, 0.27%)</title><rect x="10.5228%" y="421" width="0.2681%" height="15" fill="rgb(249,43,39)"/><text x="10.7728%" y="431.50"></text></g><g><title>skb_copy_datagram_iter (2 samples, 0.13%)</title><rect x="10.6568%" y="405" width="0.1340%" height="15" fill="rgb(209,38,44)"/><text x="10.9068%" y="415.50"></text></g><g><title>__skb_datagram_iter (2 samples, 0.13%)</title><rect x="10.6568%" y="389" width="0.1340%" height="15" fill="rgb(236,212,23)"/><text x="10.9068%" y="399.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (7 samples, 0.47%)</title><rect x="10.3887%" y="677" width="0.4692%" height="15" fill="rgb(242,79,21)"/><text x="10.6387%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (7 samples, 0.47%)</title><rect x="10.3887%" y="661" width="0.4692%" height="15" fill="rgb(211,96,35)"/><text x="10.6387%" y="671.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (7 samples, 0.47%)</title><rect x="10.3887%" y="645" width="0.4692%" height="15" fill="rgb(253,215,40)"/><text x="10.6387%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (6 samples, 0.40%)</title><rect x="10.4558%" y="629" width="0.4021%" height="15" fill="rgb(211,81,21)"/><text x="10.7058%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.40%)</title><rect x="10.4558%" y="613" width="0.4021%" height="15" fill="rgb(208,190,38)"/><text x="10.7058%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (6 samples, 0.40%)</title><rect x="10.4558%" y="597" width="0.4021%" height="15" fill="rgb(235,213,38)"/><text x="10.7058%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (6 samples, 0.40%)</title><rect x="10.4558%" y="581" width="0.4021%" height="15" fill="rgb(237,122,38)"/><text x="10.7058%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (6 samples, 0.40%)</title><rect x="10.4558%" y="565" width="0.4021%" height="15" fill="rgb(244,218,35)"/><text x="10.7058%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (6 samples, 0.40%)</title><rect x="10.4558%" y="549" width="0.4021%" height="15" fill="rgb(240,68,47)"/><text x="10.7058%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (6 samples, 0.40%)</title><rect x="10.4558%" y="533" width="0.4021%" height="15" fill="rgb(210,16,53)"/><text x="10.7058%" y="543.50"></text></g><g><title>__libc_recv (6 samples, 0.40%)</title><rect x="10.4558%" y="517" width="0.4021%" height="15" fill="rgb(235,124,12)"/><text x="10.7058%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.40%)</title><rect x="10.4558%" y="501" width="0.4021%" height="15" fill="rgb(224,169,11)"/><text x="10.7058%" y="511.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::expr_to_value_expr (2 samples, 0.13%)</title><rect x="10.8579%" y="677" width="0.1340%" height="15" fill="rgb(250,166,2)"/><text x="11.1079%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (2 samples, 0.13%)</title><rect x="10.8579%" y="661" width="0.1340%" height="15" fill="rgb(242,216,29)"/><text x="11.1079%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.34%)</title><rect x="15.0804%" y="533" width="0.3351%" height="15" fill="rgb(230,116,27)"/><text x="15.3304%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (3 samples, 0.20%)</title><rect x="15.4826%" y="501" width="0.2011%" height="15" fill="rgb(228,99,48)"/><text x="15.7326%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.20%)</title><rect x="15.4826%" y="485" width="0.2011%" height="15" fill="rgb(253,11,6)"/><text x="15.7326%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (3 samples, 0.20%)</title><rect x="15.4826%" y="469" width="0.2011%" height="15" fill="rgb(247,143,39)"/><text x="15.7326%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.20%)</title><rect x="15.4826%" y="453" width="0.2011%" height="15" fill="rgb(236,97,10)"/><text x="15.7326%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.20%)</title><rect x="15.4826%" y="437" width="0.2011%" height="15" fill="rgb(233,208,19)"/><text x="15.7326%" y="447.50"></text></g><g><title>__GI___libc_malloc (142 samples, 9.52%)</title><rect x="15.6836%" y="389" width="9.5174%" height="15" fill="rgb(216,164,2)"/><text x="15.9336%" y="399.50">__GI___libc_ma..</text></g><g><title>_int_malloc (96 samples, 6.43%)</title><rect x="18.7668%" y="373" width="6.4343%" height="15" fill="rgb(220,129,5)"/><text x="19.0168%" y="383.50">_int_mal..</text></g><g><title>__rdl_alloc (10 samples, 0.67%)</title><rect x="25.2011%" y="389" width="0.6702%" height="15" fill="rgb(242,17,10)"/><text x="25.4511%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.67%)</title><rect x="25.2011%" y="373" width="0.6702%" height="15" fill="rgb(242,107,0)"/><text x="25.4511%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (229 samples, 15.35%)</title><rect x="11.2601%" y="581" width="15.3485%" height="15" fill="rgb(251,28,31)"/><text x="11.5101%" y="591.50">&lt;core::iter::adapters::C..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (173 samples, 11.60%)</title><rect x="15.0134%" y="565" width="11.5952%" height="15" fill="rgb(233,223,10)"/><text x="15.2634%" y="575.50">&lt;alloc::string::S..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (172 samples, 11.53%)</title><rect x="15.0804%" y="549" width="11.5282%" height="15" fill="rgb(215,21,27)"/><text x="15.3304%" y="559.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (167 samples, 11.19%)</title><rect x="15.4155%" y="533" width="11.1930%" height="15" fill="rgb(232,23,21)"/><text x="15.6655%" y="543.50">alloc::slice::&lt;i..</text></g><g><title>alloc::slice::hack::to_vec (166 samples, 11.13%)</title><rect x="15.4826%" y="517" width="11.1260%" height="15" fill="rgb(244,5,23)"/><text x="15.7326%" y="527.50">alloc::slice::ha..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (163 samples, 10.92%)</title><rect x="15.6836%" y="501" width="10.9249%" height="15" fill="rgb(226,81,46)"/><text x="15.9336%" y="511.50">alloc::vec::Vec&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (163 samples, 10.92%)</title><rect x="15.6836%" y="485" width="10.9249%" height="15" fill="rgb(247,70,30)"/><text x="15.9336%" y="495.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (163 samples, 10.92%)</title><rect x="15.6836%" y="469" width="10.9249%" height="15" fill="rgb(212,68,19)"/><text x="15.9336%" y="479.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (163 samples, 10.92%)</title><rect x="15.6836%" y="453" width="10.9249%" height="15" fill="rgb(240,187,13)"/><text x="15.9336%" y="463.50">alloc::raw_vec::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (163 samples, 10.92%)</title><rect x="15.6836%" y="437" width="10.9249%" height="15" fill="rgb(223,113,26)"/><text x="15.9336%" y="447.50">&lt;alloc::alloc::G..</text></g><g><title>alloc::alloc::Global::alloc_impl (163 samples, 10.92%)</title><rect x="15.6836%" y="421" width="10.9249%" height="15" fill="rgb(206,192,2)"/><text x="15.9336%" y="431.50">alloc::alloc::Gl..</text></g><g><title>alloc::alloc::alloc (163 samples, 10.92%)</title><rect x="15.6836%" y="405" width="10.9249%" height="15" fill="rgb(241,108,4)"/><text x="15.9336%" y="415.50">alloc::alloc::al..</text></g><g><title>__rust_alloc (11 samples, 0.74%)</title><rect x="25.8713%" y="389" width="0.7373%" height="15" fill="rgb(247,173,49)"/><text x="26.1213%" y="399.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.47%)</title><rect x="26.6086%" y="581" width="0.4692%" height="15" fill="rgb(224,114,35)"/><text x="26.8586%" y="591.50"></text></g><g><title>_int_malloc (4 samples, 0.27%)</title><rect x="26.8097%" y="565" width="0.2681%" height="15" fill="rgb(245,159,27)"/><text x="27.0597%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (239 samples, 16.02%)</title><rect x="11.1260%" y="597" width="16.0188%" height="15" fill="rgb(245,172,44)"/><text x="11.3760%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (242 samples, 16.22%)</title><rect x="10.9920%" y="613" width="16.2198%" height="15" fill="rgb(236,23,11)"/><text x="11.2420%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as co..</text></g><g><title>__GI___libc_malloc (39 samples, 2.61%)</title><rect x="28.3512%" y="405" width="2.6139%" height="15" fill="rgb(205,117,38)"/><text x="28.6012%" y="415.50">__..</text></g><g><title>_int_malloc (29 samples, 1.94%)</title><rect x="29.0214%" y="389" width="1.9437%" height="15" fill="rgb(237,72,25)"/><text x="29.2714%" y="399.50">_..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (46 samples, 3.08%)</title><rect x="28.1501%" y="581" width="3.0831%" height="15" fill="rgb(244,70,9)"/><text x="28.4001%" y="591.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (46 samples, 3.08%)</title><rect x="28.1501%" y="565" width="3.0831%" height="15" fill="rgb(217,125,39)"/><text x="28.4001%" y="575.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (45 samples, 3.02%)</title><rect x="28.2172%" y="549" width="3.0161%" height="15" fill="rgb(235,36,10)"/><text x="28.4672%" y="559.50">all..</text></g><g><title>alloc::slice::hack::to_vec (45 samples, 3.02%)</title><rect x="28.2172%" y="533" width="3.0161%" height="15" fill="rgb(251,123,47)"/><text x="28.4672%" y="543.50">all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (44 samples, 2.95%)</title><rect x="28.2842%" y="517" width="2.9491%" height="15" fill="rgb(221,13,13)"/><text x="28.5342%" y="527.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (44 samples, 2.95%)</title><rect x="28.2842%" y="501" width="2.9491%" height="15" fill="rgb(238,131,9)"/><text x="28.5342%" y="511.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (44 samples, 2.95%)</title><rect x="28.2842%" y="485" width="2.9491%" height="15" fill="rgb(211,50,8)"/><text x="28.5342%" y="495.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (44 samples, 2.95%)</title><rect x="28.2842%" y="469" width="2.9491%" height="15" fill="rgb(245,182,24)"/><text x="28.5342%" y="479.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (44 samples, 2.95%)</title><rect x="28.2842%" y="453" width="2.9491%" height="15" fill="rgb(242,14,37)"/><text x="28.5342%" y="463.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 2.95%)</title><rect x="28.2842%" y="437" width="2.9491%" height="15" fill="rgb(246,228,12)"/><text x="28.5342%" y="447.50">al..</text></g><g><title>alloc::alloc::alloc (44 samples, 2.95%)</title><rect x="28.2842%" y="421" width="2.9491%" height="15" fill="rgb(213,55,15)"/><text x="28.5342%" y="431.50">al..</text></g><g><title>__rdl_alloc (4 samples, 0.27%)</title><rect x="30.9651%" y="405" width="0.2681%" height="15" fill="rgb(209,9,3)"/><text x="31.2151%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.27%)</title><rect x="30.9651%" y="389" width="0.2681%" height="15" fill="rgb(230,59,30)"/><text x="31.2151%" y="399.50"></text></g><g><title>__GI___libc_malloc (29 samples, 1.94%)</title><rect x="31.7024%" y="565" width="1.9437%" height="15" fill="rgb(209,121,21)"/><text x="31.9524%" y="575.50">_..</text></g><g><title>_int_malloc (27 samples, 1.81%)</title><rect x="31.8365%" y="549" width="1.8097%" height="15" fill="rgb(220,109,13)"/><text x="32.0865%" y="559.50">_..</text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.20%)</title><rect x="33.6461%" y="565" width="0.2011%" height="15" fill="rgb(232,18,1)"/><text x="33.8961%" y="575.50"></text></g><g><title>&lt;decor_mem::views::View as core::clone::Clone&gt;::clone (343 samples, 22.99%)</title><rect x="10.9920%" y="629" width="22.9893%" height="15" fill="rgb(215,41,42)"/><text x="11.2420%" y="639.50">&lt;decor_mem::views::View as core::clo..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (101 samples, 6.77%)</title><rect x="27.2118%" y="613" width="6.7694%" height="15" fill="rgb(224,123,36)"/><text x="27.4618%" y="623.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (101 samples, 6.77%)</title><rect x="27.2118%" y="597" width="6.7694%" height="15" fill="rgb(240,125,3)"/><text x="27.4618%" y="607.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (41 samples, 2.75%)</title><rect x="31.2332%" y="581" width="2.7480%" height="15" fill="rgb(205,98,50)"/><text x="31.4832%" y="591.50">&lt;h..</text></g><g><title>__rdl_alloc (2 samples, 0.13%)</title><rect x="33.8472%" y="565" width="0.1340%" height="15" fill="rgb(205,185,37)"/><text x="34.0972%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.13%)</title><rect x="33.8472%" y="549" width="0.1340%" height="15" fill="rgb(238,207,15)"/><text x="34.0972%" y="559.50"></text></g><g><title>decor_mem::select::get_query_results (344 samples, 23.06%)</title><rect x="10.9920%" y="677" width="23.0563%" height="15" fill="rgb(213,199,42)"/><text x="11.2420%" y="687.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (344 samples, 23.06%)</title><rect x="10.9920%" y="661" width="23.0563%" height="15" fill="rgb(235,201,11)"/><text x="11.2420%" y="671.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (344 samples, 23.06%)</title><rect x="10.9920%" y="645" width="23.0563%" height="15" fill="rgb(207,46,11)"/><text x="11.2420%" y="655.50">decor_mem::select::tablewithjoins_to_..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (362 samples, 24.26%)</title><rect x="9.8525%" y="693" width="24.2627%" height="15" fill="rgb(241,35,35)"/><text x="10.1025%" y="703.50">decor_mem::query_transformer::QueryTran..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (364 samples, 24.40%)</title><rect x="9.8525%" y="709" width="24.3968%" height="15" fill="rgb(243,32,47)"/><text x="10.1025%" y="719.50">&lt;decor_mem::Shim as msql_srv::MysqlShim..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.27%)</title><rect x="34.2493%" y="709" width="0.2681%" height="15" fill="rgb(247,202,23)"/><text x="34.4993%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.20%)</title><rect x="34.5174%" y="709" width="0.2011%" height="15" fill="rgb(219,102,11)"/><text x="34.7674%" y="719.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.27%)</title><rect x="34.7185%" y="709" width="0.2681%" height="15" fill="rgb(243,110,44)"/><text x="34.9685%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.13%)</title><rect x="35.0536%" y="485" width="0.1340%" height="15" fill="rgb(222,74,54)"/><text x="35.3036%" y="495.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.13%)</title><rect x="35.0536%" y="469" width="0.1340%" height="15" fill="rgb(216,99,12)"/><text x="35.3036%" y="479.50"></text></g><g><title>__libc_start_main (3 samples, 0.20%)</title><rect x="35.0536%" y="709" width="0.2011%" height="15" fill="rgb(226,22,26)"/><text x="35.3036%" y="719.50"></text></g><g><title>main (3 samples, 0.20%)</title><rect x="35.0536%" y="693" width="0.2011%" height="15" fill="rgb(217,163,10)"/><text x="35.3036%" y="703.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.20%)</title><rect x="35.0536%" y="677" width="0.2011%" height="15" fill="rgb(213,25,53)"/><text x="35.3036%" y="687.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.20%)</title><rect x="35.0536%" y="661" width="0.2011%" height="15" fill="rgb(252,105,26)"/><text x="35.3036%" y="671.50"></text></g><g><title>std::panicking::try (3 samples, 0.20%)</title><rect x="35.0536%" y="645" width="0.2011%" height="15" fill="rgb(220,39,43)"/><text x="35.3036%" y="655.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.20%)</title><rect x="35.0536%" y="629" width="0.2011%" height="15" fill="rgb(229,68,48)"/><text x="35.3036%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.20%)</title><rect x="35.0536%" y="613" width="0.2011%" height="15" fill="rgb(252,8,32)"/><text x="35.3036%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.20%)</title><rect x="35.0536%" y="597" width="0.2011%" height="15" fill="rgb(223,20,43)"/><text x="35.3036%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.20%)</title><rect x="35.0536%" y="581" width="0.2011%" height="15" fill="rgb(229,81,49)"/><text x="35.3036%" y="591.50"></text></g><g><title>lobsters_microbenchmarks::main (3 samples, 0.20%)</title><rect x="35.0536%" y="565" width="0.2011%" height="15" fill="rgb(236,28,36)"/><text x="35.3036%" y="575.50"></text></g><g><title>hwloc::Topology::new (3 samples, 0.20%)</title><rect x="35.0536%" y="549" width="0.2011%" height="15" fill="rgb(249,185,26)"/><text x="35.3036%" y="559.50"></text></g><g><title>hwloc_topology_load (3 samples, 0.20%)</title><rect x="35.0536%" y="533" width="0.2011%" height="15" fill="rgb(249,174,33)"/><text x="35.3036%" y="543.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.20%)</title><rect x="35.0536%" y="517" width="0.2011%" height="15" fill="rgb(233,201,37)"/><text x="35.3036%" y="527.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.20%)</title><rect x="35.0536%" y="501" width="0.2011%" height="15" fill="rgb(221,78,26)"/><text x="35.3036%" y="511.50"></text></g><g><title>_int_free (14 samples, 0.94%)</title><rect x="35.2547%" y="709" width="0.9383%" height="15" fill="rgb(250,127,30)"/><text x="35.5047%" y="719.50"></text></g><g><title>_int_malloc (2 samples, 0.13%)</title><rect x="36.1930%" y="709" width="0.1340%" height="15" fill="rgb(230,49,44)"/><text x="36.4430%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.13%)</title><rect x="36.5282%" y="709" width="0.1340%" height="15" fill="rgb(229,67,23)"/><text x="36.7782%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.54%)</title><rect x="36.7962%" y="613" width="0.5362%" height="15" fill="rgb(249,83,47)"/><text x="37.0462%" y="623.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.54%)</title><rect x="36.7962%" y="597" width="0.5362%" height="15" fill="rgb(215,43,3)"/><text x="37.0462%" y="607.50"></text></g><g><title>_int_realloc (7 samples, 0.47%)</title><rect x="36.8633%" y="581" width="0.4692%" height="15" fill="rgb(238,154,13)"/><text x="37.1133%" y="591.50"></text></g><g><title>_int_malloc (7 samples, 0.47%)</title><rect x="36.8633%" y="565" width="0.4692%" height="15" fill="rgb(219,56,2)"/><text x="37.1133%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (4 samples, 0.27%)</title><rect x="37.3324%" y="597" width="0.2681%" height="15" fill="rgb(233,0,4)"/><text x="37.5824%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.13%)</title><rect x="37.4665%" y="581" width="0.1340%" height="15" fill="rgb(235,30,7)"/><text x="37.7165%" y="591.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (15 samples, 1.01%)</title><rect x="36.6622%" y="709" width="1.0054%" height="15" fill="rgb(250,79,13)"/><text x="36.9122%" y="719.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (15 samples, 1.01%)</title><rect x="36.6622%" y="693" width="1.0054%" height="15" fill="rgb(211,146,34)"/><text x="36.9122%" y="703.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (15 samples, 1.01%)</title><rect x="36.6622%" y="677" width="1.0054%" height="15" fill="rgb(228,22,38)"/><text x="36.9122%" y="687.50"></text></g><g><title>decor_mem::stats::get_qtype (15 samples, 1.01%)</title><rect x="36.6622%" y="661" width="1.0054%" height="15" fill="rgb(235,168,5)"/><text x="36.9122%" y="671.50"></text></g><g><title>sql_parser::parser::parse_statements (15 samples, 1.01%)</title><rect x="36.6622%" y="645" width="1.0054%" height="15" fill="rgb(221,155,16)"/><text x="36.9122%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (14 samples, 0.94%)</title><rect x="36.7292%" y="629" width="0.9383%" height="15" fill="rgb(215,215,53)"/><text x="36.9792%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (5 samples, 0.34%)</title><rect x="37.3324%" y="613" width="0.3351%" height="15" fill="rgb(223,4,10)"/><text x="37.5824%" y="623.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.13%)</title><rect x="38.2708%" y="325" width="0.1340%" height="15" fill="rgb(234,103,6)"/><text x="38.5208%" y="335.50"></text></g><g><title>dequeue_entity (2 samples, 0.13%)</title><rect x="38.2708%" y="309" width="0.1340%" height="15" fill="rgb(227,97,0)"/><text x="38.5208%" y="319.50"></text></g><g><title>update_load_avg (2 samples, 0.13%)</title><rect x="38.2708%" y="293" width="0.1340%" height="15" fill="rgb(234,150,53)"/><text x="38.5208%" y="303.50"></text></g><g><title>__update_load_avg_se (2 samples, 0.13%)</title><rect x="38.2708%" y="277" width="0.1340%" height="15" fill="rgb(228,201,54)"/><text x="38.5208%" y="287.50"></text></g><g><title>sk_wait_data (5 samples, 0.34%)</title><rect x="38.2038%" y="405" width="0.3351%" height="15" fill="rgb(222,22,37)"/><text x="38.4538%" y="415.50"></text></g><g><title>wait_woken (5 samples, 0.34%)</title><rect x="38.2038%" y="389" width="0.3351%" height="15" fill="rgb(237,53,32)"/><text x="38.4538%" y="399.50"></text></g><g><title>schedule_timeout (5 samples, 0.34%)</title><rect x="38.2038%" y="373" width="0.3351%" height="15" fill="rgb(233,25,53)"/><text x="38.4538%" y="383.50"></text></g><g><title>schedule (5 samples, 0.34%)</title><rect x="38.2038%" y="357" width="0.3351%" height="15" fill="rgb(210,40,34)"/><text x="38.4538%" y="367.50"></text></g><g><title>__schedule (5 samples, 0.34%)</title><rect x="38.2038%" y="341" width="0.3351%" height="15" fill="rgb(241,220,44)"/><text x="38.4538%" y="351.50"></text></g><g><title>__x64_sys_recvfrom (9 samples, 0.60%)</title><rect x="38.1367%" y="469" width="0.6032%" height="15" fill="rgb(235,28,35)"/><text x="38.3867%" y="479.50"></text></g><g><title>__sys_recvfrom (9 samples, 0.60%)</title><rect x="38.1367%" y="453" width="0.6032%" height="15" fill="rgb(210,56,17)"/><text x="38.3867%" y="463.50"></text></g><g><title>inet_recvmsg (8 samples, 0.54%)</title><rect x="38.2038%" y="437" width="0.5362%" height="15" fill="rgb(224,130,29)"/><text x="38.4538%" y="447.50"></text></g><g><title>tcp_recvmsg (8 samples, 0.54%)</title><rect x="38.2038%" y="421" width="0.5362%" height="15" fill="rgb(235,212,8)"/><text x="38.4538%" y="431.50"></text></g><g><title>skb_copy_datagram_iter (3 samples, 0.20%)</title><rect x="38.5389%" y="405" width="0.2011%" height="15" fill="rgb(223,33,50)"/><text x="38.7889%" y="415.50"></text></g><g><title>__skb_datagram_iter (3 samples, 0.20%)</title><rect x="38.5389%" y="389" width="0.2011%" height="15" fill="rgb(219,149,13)"/><text x="38.7889%" y="399.50"></text></g><g><title>_copy_to_iter (3 samples, 0.20%)</title><rect x="38.5389%" y="373" width="0.2011%" height="15" fill="rgb(250,156,29)"/><text x="38.7889%" y="383.50"></text></g><g><title>copy_user_enhanced_fast_string (3 samples, 0.20%)</title><rect x="38.5389%" y="357" width="0.2011%" height="15" fill="rgb(216,193,19)"/><text x="38.7889%" y="367.50"></text></g><g><title>page_fault (3 samples, 0.20%)</title><rect x="38.5389%" y="341" width="0.2011%" height="15" fill="rgb(216,135,14)"/><text x="38.7889%" y="351.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.20%)</title><rect x="38.5389%" y="325" width="0.2011%" height="15" fill="rgb(241,47,5)"/><text x="38.7889%" y="335.50"></text></g><g><title>handle_mm_fault (3 samples, 0.20%)</title><rect x="38.5389%" y="309" width="0.2011%" height="15" fill="rgb(233,42,35)"/><text x="38.7889%" y="319.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.20%)</title><rect x="38.5389%" y="293" width="0.2011%" height="15" fill="rgb(231,13,6)"/><text x="38.7889%" y="303.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.13%)</title><rect x="38.6059%" y="277" width="0.1340%" height="15" fill="rgb(207,181,40)"/><text x="38.8559%" y="287.50"></text></g><g><title>do_syscall_64 (10 samples, 0.67%)</title><rect x="38.1367%" y="485" width="0.6702%" height="15" fill="rgb(254,173,49)"/><text x="38.3867%" y="495.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (13 samples, 0.87%)</title><rect x="38.0027%" y="645" width="0.8713%" height="15" fill="rgb(221,1,38)"/><text x="38.2527%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (12 samples, 0.80%)</title><rect x="38.0697%" y="629" width="0.8043%" height="15" fill="rgb(206,124,46)"/><text x="38.3197%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.74%)</title><rect x="38.1367%" y="613" width="0.7373%" height="15" fill="rgb(249,21,11)"/><text x="38.3867%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (11 samples, 0.74%)</title><rect x="38.1367%" y="597" width="0.7373%" height="15" fill="rgb(222,201,40)"/><text x="38.3867%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (11 samples, 0.74%)</title><rect x="38.1367%" y="581" width="0.7373%" height="15" fill="rgb(235,61,29)"/><text x="38.3867%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (11 samples, 0.74%)</title><rect x="38.1367%" y="565" width="0.7373%" height="15" fill="rgb(219,207,3)"/><text x="38.3867%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (11 samples, 0.74%)</title><rect x="38.1367%" y="549" width="0.7373%" height="15" fill="rgb(222,56,46)"/><text x="38.3867%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (11 samples, 0.74%)</title><rect x="38.1367%" y="533" width="0.7373%" height="15" fill="rgb(239,76,54)"/><text x="38.3867%" y="543.50"></text></g><g><title>__libc_recv (11 samples, 0.74%)</title><rect x="38.1367%" y="517" width="0.7373%" height="15" fill="rgb(231,124,27)"/><text x="38.3867%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.74%)</title><rect x="38.1367%" y="501" width="0.7373%" height="15" fill="rgb(249,195,6)"/><text x="38.3867%" y="511.50"></text></g><g><title>__tcp_push_pending_frames (9 samples, 0.60%)</title><rect x="38.8740%" y="453" width="0.6032%" height="15" fill="rgb(237,174,47)"/><text x="39.1240%" y="463.50"></text></g><g><title>tcp_write_xmit (9 samples, 0.60%)</title><rect x="38.8740%" y="437" width="0.6032%" height="15" fill="rgb(206,201,31)"/><text x="39.1240%" y="447.50"></text></g><g><title>__tcp_transmit_skb (9 samples, 0.60%)</title><rect x="38.8740%" y="421" width="0.6032%" height="15" fill="rgb(231,57,52)"/><text x="39.1240%" y="431.50"></text></g><g><title>__ip_queue_xmit (9 samples, 0.60%)</title><rect x="38.8740%" y="405" width="0.6032%" height="15" fill="rgb(248,177,22)"/><text x="39.1240%" y="415.50"></text></g><g><title>ip_output (8 samples, 0.54%)</title><rect x="38.9410%" y="389" width="0.5362%" height="15" fill="rgb(215,211,37)"/><text x="39.1910%" y="399.50"></text></g><g><title>ip_finish_output2 (7 samples, 0.47%)</title><rect x="39.0080%" y="373" width="0.4692%" height="15" fill="rgb(241,128,51)"/><text x="39.2580%" y="383.50"></text></g><g><title>__local_bh_enable_ip (6 samples, 0.40%)</title><rect x="39.0751%" y="357" width="0.4021%" height="15" fill="rgb(227,165,31)"/><text x="39.3251%" y="367.50"></text></g><g><title>do_softirq (6 samples, 0.40%)</title><rect x="39.0751%" y="341" width="0.4021%" height="15" fill="rgb(228,167,24)"/><text x="39.3251%" y="351.50"></text></g><g><title>do_softirq_own_stack (6 samples, 0.40%)</title><rect x="39.0751%" y="325" width="0.4021%" height="15" fill="rgb(228,143,12)"/><text x="39.3251%" y="335.50"></text></g><g><title>__do_softirq (6 samples, 0.40%)</title><rect x="39.0751%" y="309" width="0.4021%" height="15" fill="rgb(249,149,8)"/><text x="39.3251%" y="319.50"></text></g><g><title>net_rx_action (6 samples, 0.40%)</title><rect x="39.0751%" y="293" width="0.4021%" height="15" fill="rgb(243,35,44)"/><text x="39.3251%" y="303.50"></text></g><g><title>process_backlog (6 samples, 0.40%)</title><rect x="39.0751%" y="277" width="0.4021%" height="15" fill="rgb(246,89,9)"/><text x="39.3251%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (6 samples, 0.40%)</title><rect x="39.0751%" y="261" width="0.4021%" height="15" fill="rgb(233,213,13)"/><text x="39.3251%" y="271.50"></text></g><g><title>ip_rcv (5 samples, 0.34%)</title><rect x="39.1421%" y="245" width="0.3351%" height="15" fill="rgb(233,141,41)"/><text x="39.3921%" y="255.50"></text></g><g><title>ip_local_deliver (5 samples, 0.34%)</title><rect x="39.1421%" y="229" width="0.3351%" height="15" fill="rgb(239,167,4)"/><text x="39.3921%" y="239.50"></text></g><g><title>ip_local_deliver_finish (5 samples, 0.34%)</title><rect x="39.1421%" y="213" width="0.3351%" height="15" fill="rgb(209,217,16)"/><text x="39.3921%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (5 samples, 0.34%)</title><rect x="39.1421%" y="197" width="0.3351%" height="15" fill="rgb(219,88,35)"/><text x="39.3921%" y="207.50"></text></g><g><title>tcp_v4_rcv (5 samples, 0.34%)</title><rect x="39.1421%" y="181" width="0.3351%" height="15" fill="rgb(220,193,23)"/><text x="39.3921%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (4 samples, 0.27%)</title><rect x="39.2091%" y="165" width="0.2681%" height="15" fill="rgb(230,90,52)"/><text x="39.4591%" y="175.50"></text></g><g><title>tcp_rcv_established (4 samples, 0.27%)</title><rect x="39.2091%" y="149" width="0.2681%" height="15" fill="rgb(252,106,19)"/><text x="39.4591%" y="159.50"></text></g><g><title>do_syscall_64 (10 samples, 0.67%)</title><rect x="38.8740%" y="549" width="0.6702%" height="15" fill="rgb(206,74,20)"/><text x="39.1240%" y="559.50"></text></g><g><title>__x64_sys_sendto (10 samples, 0.67%)</title><rect x="38.8740%" y="533" width="0.6702%" height="15" fill="rgb(230,138,44)"/><text x="39.1240%" y="543.50"></text></g><g><title>__sys_sendto (10 samples, 0.67%)</title><rect x="38.8740%" y="517" width="0.6702%" height="15" fill="rgb(235,182,43)"/><text x="39.1240%" y="527.50"></text></g><g><title>sock_sendmsg (10 samples, 0.67%)</title><rect x="38.8740%" y="501" width="0.6702%" height="15" fill="rgb(242,16,51)"/><text x="39.1240%" y="511.50"></text></g><g><title>tcp_sendmsg (10 samples, 0.67%)</title><rect x="38.8740%" y="485" width="0.6702%" height="15" fill="rgb(248,9,4)"/><text x="39.1240%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (10 samples, 0.67%)</title><rect x="38.8740%" y="469" width="0.6702%" height="15" fill="rgb(210,31,22)"/><text x="39.1240%" y="479.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (24 samples, 1.61%)</title><rect x="38.0027%" y="677" width="1.6086%" height="15" fill="rgb(239,54,39)"/><text x="38.2527%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (24 samples, 1.61%)</title><rect x="38.0027%" y="661" width="1.6086%" height="15" fill="rgb(230,99,41)"/><text x="38.2527%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (11 samples, 0.74%)</title><rect x="38.8740%" y="645" width="0.7373%" height="15" fill="rgb(253,106,12)"/><text x="39.1240%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (11 samples, 0.74%)</title><rect x="38.8740%" y="629" width="0.7373%" height="15" fill="rgb(213,46,41)"/><text x="39.1240%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (11 samples, 0.74%)</title><rect x="38.8740%" y="613" width="0.7373%" height="15" fill="rgb(215,133,35)"/><text x="39.1240%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (11 samples, 0.74%)</title><rect x="38.8740%" y="597" width="0.7373%" height="15" fill="rgb(213,28,5)"/><text x="39.1240%" y="607.50"></text></g><g><title>__libc_send (11 samples, 0.74%)</title><rect x="38.8740%" y="581" width="0.7373%" height="15" fill="rgb(215,77,49)"/><text x="39.1240%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.74%)</title><rect x="38.8740%" y="565" width="0.7373%" height="15" fill="rgb(248,100,22)"/><text x="39.1240%" y="575.50"></text></g><g><title>__GI___libc_free (4 samples, 0.27%)</title><rect x="39.6113%" y="629" width="0.2681%" height="15" fill="rgb(208,67,9)"/><text x="39.8613%" y="639.50"></text></g><g><title>_int_free (5 samples, 0.34%)</title><rect x="39.8794%" y="629" width="0.3351%" height="15" fill="rgb(219,133,21)"/><text x="40.1294%" y="639.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.47%)</title><rect x="40.8847%" y="597" width="0.4692%" height="15" fill="rgb(246,46,29)"/><text x="41.1347%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (9 samples, 0.60%)</title><rect x="40.8847%" y="613" width="0.6032%" height="15" fill="rgb(246,185,52)"/><text x="41.1347%" y="623.50"></text></g><g><title>__rdl_alloc (2 samples, 0.13%)</title><rect x="41.3539%" y="597" width="0.1340%" height="15" fill="rgb(252,136,11)"/><text x="41.6039%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.13%)</title><rect x="41.3539%" y="581" width="0.1340%" height="15" fill="rgb(219,138,53)"/><text x="41.6039%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.60%)</title><rect x="42.6273%" y="549" width="0.6032%" height="15" fill="rgb(211,51,23)"/><text x="42.8773%" y="559.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.27%)</title><rect x="42.9625%" y="533" width="0.2681%" height="15" fill="rgb(247,221,28)"/><text x="43.2125%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.20%)</title><rect x="44.1019%" y="533" width="0.2011%" height="15" fill="rgb(251,222,45)"/><text x="44.3519%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (2 samples, 0.13%)</title><rect x="44.3700%" y="533" width="0.1340%" height="15" fill="rgb(217,162,53)"/><text x="44.6200%" y="543.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 3.62%)</title><rect x="41.4879%" y="613" width="3.6193%" height="15" fill="rgb(229,93,14)"/><text x="41.7379%" y="623.50">&lt;mys..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (49 samples, 3.28%)</title><rect x="41.8231%" y="597" width="3.2842%" height="15" fill="rgb(209,67,49)"/><text x="42.0731%" y="607.50">mys..</text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (44 samples, 2.95%)</title><rect x="42.1582%" y="581" width="2.9491%" height="15" fill="rgb(213,87,29)"/><text x="42.4082%" y="591.50">my..</text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (42 samples, 2.82%)</title><rect x="42.2922%" y="565" width="2.8150%" height="15" fill="rgb(205,151,52)"/><text x="42.5422%" y="575.50">my..</text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (28 samples, 1.88%)</title><rect x="43.2306%" y="549" width="1.8767%" height="15" fill="rgb(253,215,39)"/><text x="43.4806%" y="559.50">m..</text></g><g><title>bytes::bytes_mut::BytesMut::split_to (9 samples, 0.60%)</title><rect x="44.5040%" y="533" width="0.6032%" height="15" fill="rgb(221,220,41)"/><text x="44.7540%" y="543.50"></text></g><g><title>__GI___libc_free (4 samples, 0.27%)</title><rect x="45.1072%" y="613" width="0.2681%" height="15" fill="rgb(218,133,21)"/><text x="45.3572%" y="623.50"></text></g><g><title>_int_free (10 samples, 0.67%)</title><rect x="45.4424%" y="613" width="0.6702%" height="15" fill="rgb(221,193,43)"/><text x="45.6924%" y="623.50"></text></g><g><title>mysql::conn::Conn::read_packet (92 samples, 6.17%)</title><rect x="40.2145%" y="629" width="6.1662%" height="15" fill="rgb(240,128,52)"/><text x="40.4645%" y="639.50">mysql::c..</text></g><g><title>std::io::error::Error::_new (3 samples, 0.20%)</title><rect x="46.1796%" y="613" width="0.2011%" height="15" fill="rgb(253,114,12)"/><text x="46.4296%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.20%)</title><rect x="46.1796%" y="597" width="0.2011%" height="15" fill="rgb(215,223,47)"/><text x="46.4296%" y="607.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.34%)</title><rect x="48.1233%" y="597" width="0.3351%" height="15" fill="rgb(248,225,23)"/><text x="48.3733%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 1.27%)</title><rect x="47.3861%" y="613" width="1.2735%" height="15" fill="rgb(250,108,0)"/><text x="47.6361%" y="623.50"></text></g><g><title>__rdl_alloc (3 samples, 0.20%)</title><rect x="48.4584%" y="597" width="0.2011%" height="15" fill="rgb(228,208,7)"/><text x="48.7084%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.20%)</title><rect x="48.4584%" y="581" width="0.2011%" height="15" fill="rgb(244,45,10)"/><text x="48.7084%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.20%)</title><rect x="48.9946%" y="597" width="0.2011%" height="15" fill="rgb(207,125,25)"/><text x="49.2446%" y="607.50"></text></g><g><title>lobsters_microbenchmarks::main (173 samples, 11.60%)</title><rect x="37.8686%" y="709" width="11.5952%" height="15" fill="rgb(210,195,18)"/><text x="38.1186%" y="719.50">lobsters_microben..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (171 samples, 11.46%)</title><rect x="38.0027%" y="693" width="11.4611%" height="15" fill="rgb(249,80,12)"/><text x="38.2527%" y="703.50">lobsters_microben..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (147 samples, 9.85%)</title><rect x="39.6113%" y="677" width="9.8525%" height="15" fill="rgb(221,65,9)"/><text x="39.8613%" y="687.50">&lt;mysql::conn::..</text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (147 samples, 9.85%)</title><rect x="39.6113%" y="661" width="9.8525%" height="15" fill="rgb(235,49,36)"/><text x="39.8613%" y="671.50">&lt;mysql::conn::..</text></g><g><title>mysql::conn::Conn::next_text (147 samples, 9.85%)</title><rect x="39.6113%" y="645" width="9.8525%" height="15" fill="rgb(225,32,20)"/><text x="39.8613%" y="655.50">mysql::conn::C..</text></g><g><title>mysql_common::value::read_text_values (46 samples, 3.08%)</title><rect x="46.3807%" y="629" width="3.0831%" height="15" fill="rgb(215,141,46)"/><text x="46.6307%" y="639.50">mys..</text></g><g><title>mysql_common::value::read_text_value (12 samples, 0.80%)</title><rect x="48.6595%" y="613" width="0.8043%" height="15" fill="rgb(250,160,47)"/><text x="48.9095%" y="623.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (4 samples, 0.27%)</title><rect x="49.1957%" y="597" width="0.2681%" height="15" fill="rgb(216,222,40)"/><text x="49.4457%" y="607.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (2 samples, 0.13%)</title><rect x="49.4638%" y="693" width="0.1340%" height="15" fill="rgb(234,217,39)"/><text x="49.7138%" y="703.50"></text></g><g><title>decor_mem::Shim::create_schema (2 samples, 0.13%)</title><rect x="49.4638%" y="677" width="0.1340%" height="15" fill="rgb(207,178,40)"/><text x="49.7138%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.20%)</title><rect x="49.6649%" y="661" width="0.2011%" height="15" fill="rgb(221,136,13)"/><text x="49.9149%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.20%)</title><rect x="49.6649%" y="645" width="0.2011%" height="15" fill="rgb(249,199,10)"/><text x="49.9149%" y="655.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.20%)</title><rect x="49.6649%" y="629" width="0.2011%" height="15" fill="rgb(249,222,13)"/><text x="49.9149%" y="639.50"></text></g><g><title>_int_malloc (3 samples, 0.20%)</title><rect x="49.6649%" y="613" width="0.2011%" height="15" fill="rgb(244,185,38)"/><text x="49.9149%" y="623.50"></text></g><g><title>sysmalloc (3 samples, 0.20%)</title><rect x="49.6649%" y="597" width="0.2011%" height="15" fill="rgb(236,202,9)"/><text x="49.9149%" y="607.50"></text></g><g><title>page_fault (2 samples, 0.13%)</title><rect x="49.7319%" y="581" width="0.1340%" height="15" fill="rgb(250,229,37)"/><text x="49.9819%" y="591.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.13%)</title><rect x="49.7319%" y="565" width="0.1340%" height="15" fill="rgb(206,174,23)"/><text x="49.9819%" y="575.50"></text></g><g><title>handle_mm_fault (2 samples, 0.13%)</title><rect x="49.7319%" y="549" width="0.1340%" height="15" fill="rgb(211,33,43)"/><text x="49.9819%" y="559.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.13%)</title><rect x="49.7319%" y="533" width="0.1340%" height="15" fill="rgb(245,58,50)"/><text x="49.9819%" y="543.50"></text></g><g><title>__ip_queue_xmit (3 samples, 0.20%)</title><rect x="49.9330%" y="389" width="0.2011%" height="15" fill="rgb(244,68,36)"/><text x="50.1830%" y="399.50"></text></g><g><title>ip_output (3 samples, 0.20%)</title><rect x="49.9330%" y="373" width="0.2011%" height="15" fill="rgb(232,229,15)"/><text x="50.1830%" y="383.50"></text></g><g><title>ip_finish_output2 (3 samples, 0.20%)</title><rect x="49.9330%" y="357" width="0.2011%" height="15" fill="rgb(254,30,23)"/><text x="50.1830%" y="367.50"></text></g><g><title>__local_bh_enable_ip (3 samples, 0.20%)</title><rect x="49.9330%" y="341" width="0.2011%" height="15" fill="rgb(235,160,14)"/><text x="50.1830%" y="351.50"></text></g><g><title>do_softirq (3 samples, 0.20%)</title><rect x="49.9330%" y="325" width="0.2011%" height="15" fill="rgb(212,155,44)"/><text x="50.1830%" y="335.50"></text></g><g><title>do_softirq_own_stack (3 samples, 0.20%)</title><rect x="49.9330%" y="309" width="0.2011%" height="15" fill="rgb(226,2,50)"/><text x="50.1830%" y="319.50"></text></g><g><title>__do_softirq (3 samples, 0.20%)</title><rect x="49.9330%" y="293" width="0.2011%" height="15" fill="rgb(234,177,6)"/><text x="50.1830%" y="303.50"></text></g><g><title>net_rx_action (3 samples, 0.20%)</title><rect x="49.9330%" y="277" width="0.2011%" height="15" fill="rgb(217,24,9)"/><text x="50.1830%" y="287.50"></text></g><g><title>process_backlog (3 samples, 0.20%)</title><rect x="49.9330%" y="261" width="0.2011%" height="15" fill="rgb(220,13,46)"/><text x="50.1830%" y="271.50"></text></g><g><title>__netif_receive_skb_one_core (3 samples, 0.20%)</title><rect x="49.9330%" y="245" width="0.2011%" height="15" fill="rgb(239,221,27)"/><text x="50.1830%" y="255.50"></text></g><g><title>ip_rcv (3 samples, 0.20%)</title><rect x="49.9330%" y="229" width="0.2011%" height="15" fill="rgb(222,198,25)"/><text x="50.1830%" y="239.50"></text></g><g><title>ip_local_deliver (3 samples, 0.20%)</title><rect x="49.9330%" y="213" width="0.2011%" height="15" fill="rgb(211,99,13)"/><text x="50.1830%" y="223.50"></text></g><g><title>ip_local_deliver_finish (3 samples, 0.20%)</title><rect x="49.9330%" y="197" width="0.2011%" height="15" fill="rgb(232,111,31)"/><text x="50.1830%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (3 samples, 0.20%)</title><rect x="49.9330%" y="181" width="0.2011%" height="15" fill="rgb(245,82,37)"/><text x="50.1830%" y="191.50"></text></g><g><title>tcp_v4_rcv (3 samples, 0.20%)</title><rect x="49.9330%" y="165" width="0.2011%" height="15" fill="rgb(227,149,46)"/><text x="50.1830%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (2 samples, 0.13%)</title><rect x="50.0000%" y="149" width="0.1340%" height="15" fill="rgb(218,36,50)"/><text x="50.2500%" y="159.50"></text></g><g><title>tcp_rcv_established (2 samples, 0.13%)</title><rect x="50.0000%" y="133" width="0.1340%" height="15" fill="rgb(226,80,48)"/><text x="50.2500%" y="143.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (5 samples, 0.34%)</title><rect x="49.8660%" y="661" width="0.3351%" height="15" fill="rgb(238,224,15)"/><text x="50.1160%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (5 samples, 0.34%)</title><rect x="49.8660%" y="645" width="0.3351%" height="15" fill="rgb(241,136,10)"/><text x="50.1160%" y="655.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (4 samples, 0.27%)</title><rect x="49.9330%" y="629" width="0.2681%" height="15" fill="rgb(208,32,45)"/><text x="50.1830%" y="639.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (4 samples, 0.27%)</title><rect x="49.9330%" y="613" width="0.2681%" height="15" fill="rgb(207,135,9)"/><text x="50.1830%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (4 samples, 0.27%)</title><rect x="49.9330%" y="597" width="0.2681%" height="15" fill="rgb(206,86,44)"/><text x="50.1830%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::write (4 samples, 0.27%)</title><rect x="49.9330%" y="581" width="0.2681%" height="15" fill="rgb(245,177,15)"/><text x="50.1830%" y="591.50"></text></g><g><title>__libc_send (4 samples, 0.27%)</title><rect x="49.9330%" y="565" width="0.2681%" height="15" fill="rgb(206,64,50)"/><text x="50.1830%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.27%)</title><rect x="49.9330%" y="549" width="0.2681%" height="15" fill="rgb(234,36,40)"/><text x="50.1830%" y="559.50"></text></g><g><title>do_syscall_64 (4 samples, 0.27%)</title><rect x="49.9330%" y="533" width="0.2681%" height="15" fill="rgb(213,64,8)"/><text x="50.1830%" y="543.50"></text></g><g><title>__x64_sys_sendto (4 samples, 0.27%)</title><rect x="49.9330%" y="517" width="0.2681%" height="15" fill="rgb(210,75,36)"/><text x="50.1830%" y="527.50"></text></g><g><title>__sys_sendto (4 samples, 0.27%)</title><rect x="49.9330%" y="501" width="0.2681%" height="15" fill="rgb(229,88,21)"/><text x="50.1830%" y="511.50"></text></g><g><title>sock_sendmsg (4 samples, 0.27%)</title><rect x="49.9330%" y="485" width="0.2681%" height="15" fill="rgb(252,204,47)"/><text x="50.1830%" y="495.50"></text></g><g><title>tcp_sendmsg (4 samples, 0.27%)</title><rect x="49.9330%" y="469" width="0.2681%" height="15" fill="rgb(208,77,27)"/><text x="50.1830%" y="479.50"></text></g><g><title>tcp_sendmsg_locked (4 samples, 0.27%)</title><rect x="49.9330%" y="453" width="0.2681%" height="15" fill="rgb(221,76,26)"/><text x="50.1830%" y="463.50"></text></g><g><title>__tcp_push_pending_frames (4 samples, 0.27%)</title><rect x="49.9330%" y="437" width="0.2681%" height="15" fill="rgb(225,139,18)"/><text x="50.1830%" y="447.50"></text></g><g><title>tcp_write_xmit (4 samples, 0.27%)</title><rect x="49.9330%" y="421" width="0.2681%" height="15" fill="rgb(230,137,11)"/><text x="50.1830%" y="431.50"></text></g><g><title>__tcp_transmit_skb (4 samples, 0.27%)</title><rect x="49.9330%" y="405" width="0.2681%" height="15" fill="rgb(212,28,1)"/><text x="50.1830%" y="415.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (2 samples, 0.13%)</title><rect x="50.3351%" y="645" width="0.1340%" height="15" fill="rgb(248,164,17)"/><text x="50.5851%" y="655.50"></text></g><g><title>core::fmt::write (4 samples, 0.27%)</title><rect x="50.3351%" y="661" width="0.2681%" height="15" fill="rgb(222,171,42)"/><text x="50.5851%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (2 samples, 0.13%)</title><rect x="50.4692%" y="645" width="0.1340%" height="15" fill="rgb(243,84,45)"/><text x="50.7192%" y="655.50"></text></g><g><title>sock_def_readable (4 samples, 0.27%)</title><rect x="51.1394%" y="117" width="0.2681%" height="15" fill="rgb(252,49,23)"/><text x="51.3894%" y="127.50"></text></g><g><title>__wake_up_common_lock (4 samples, 0.27%)</title><rect x="51.1394%" y="101" width="0.2681%" height="15" fill="rgb(215,19,7)"/><text x="51.3894%" y="111.50"></text></g><g><title>__wake_up_common (4 samples, 0.27%)</title><rect x="51.1394%" y="85" width="0.2681%" height="15" fill="rgb(238,81,41)"/><text x="51.3894%" y="95.50"></text></g><g><title>pollwake (4 samples, 0.27%)</title><rect x="51.1394%" y="69" width="0.2681%" height="15" fill="rgb(210,199,37)"/><text x="51.3894%" y="79.50"></text></g><g><title>try_to_wake_up (4 samples, 0.27%)</title><rect x="51.1394%" y="53" width="0.2681%" height="15" fill="rgb(244,192,49)"/><text x="51.3894%" y="63.50"></text></g><g><title>__netif_receive_skb_one_core (7 samples, 0.47%)</title><rect x="51.0054%" y="245" width="0.4692%" height="15" fill="rgb(226,211,11)"/><text x="51.2554%" y="255.50"></text></g><g><title>ip_rcv (7 samples, 0.47%)</title><rect x="51.0054%" y="229" width="0.4692%" height="15" fill="rgb(236,162,54)"/><text x="51.2554%" y="239.50"></text></g><g><title>ip_local_deliver (7 samples, 0.47%)</title><rect x="51.0054%" y="213" width="0.4692%" height="15" fill="rgb(220,229,9)"/><text x="51.2554%" y="223.50"></text></g><g><title>ip_local_deliver_finish (7 samples, 0.47%)</title><rect x="51.0054%" y="197" width="0.4692%" height="15" fill="rgb(250,87,22)"/><text x="51.2554%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (7 samples, 0.47%)</title><rect x="51.0054%" y="181" width="0.4692%" height="15" fill="rgb(239,43,17)"/><text x="51.2554%" y="191.50"></text></g><g><title>tcp_v4_rcv (7 samples, 0.47%)</title><rect x="51.0054%" y="165" width="0.4692%" height="15" fill="rgb(231,177,25)"/><text x="51.2554%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (6 samples, 0.40%)</title><rect x="51.0724%" y="149" width="0.4021%" height="15" fill="rgb(219,179,1)"/><text x="51.3224%" y="159.50"></text></g><g><title>tcp_rcv_established (6 samples, 0.40%)</title><rect x="51.0724%" y="133" width="0.4021%" height="15" fill="rgb(238,219,53)"/><text x="51.3224%" y="143.50"></text></g><g><title>sock_sendmsg (11 samples, 0.74%)</title><rect x="50.8043%" y="485" width="0.7373%" height="15" fill="rgb(232,167,36)"/><text x="51.0543%" y="495.50"></text></g><g><title>tcp_sendmsg (11 samples, 0.74%)</title><rect x="50.8043%" y="469" width="0.7373%" height="15" fill="rgb(244,19,51)"/><text x="51.0543%" y="479.50"></text></g><g><title>tcp_sendmsg_locked (10 samples, 0.67%)</title><rect x="50.8713%" y="453" width="0.6702%" height="15" fill="rgb(224,6,22)"/><text x="51.1213%" y="463.50"></text></g><g><title>__tcp_push_pending_frames (9 samples, 0.60%)</title><rect x="50.9383%" y="437" width="0.6032%" height="15" fill="rgb(224,145,5)"/><text x="51.1883%" y="447.50"></text></g><g><title>tcp_write_xmit (9 samples, 0.60%)</title><rect x="50.9383%" y="421" width="0.6032%" height="15" fill="rgb(234,130,49)"/><text x="51.1883%" y="431.50"></text></g><g><title>__tcp_transmit_skb (9 samples, 0.60%)</title><rect x="50.9383%" y="405" width="0.6032%" height="15" fill="rgb(254,6,2)"/><text x="51.1883%" y="415.50"></text></g><g><title>__ip_queue_xmit (9 samples, 0.60%)</title><rect x="50.9383%" y="389" width="0.6032%" height="15" fill="rgb(208,96,46)"/><text x="51.1883%" y="399.50"></text></g><g><title>ip_output (9 samples, 0.60%)</title><rect x="50.9383%" y="373" width="0.6032%" height="15" fill="rgb(239,3,39)"/><text x="51.1883%" y="383.50"></text></g><g><title>ip_finish_output2 (9 samples, 0.60%)</title><rect x="50.9383%" y="357" width="0.6032%" height="15" fill="rgb(233,210,1)"/><text x="51.1883%" y="367.50"></text></g><g><title>__local_bh_enable_ip (9 samples, 0.60%)</title><rect x="50.9383%" y="341" width="0.6032%" height="15" fill="rgb(244,137,37)"/><text x="51.1883%" y="351.50"></text></g><g><title>do_softirq (9 samples, 0.60%)</title><rect x="50.9383%" y="325" width="0.6032%" height="15" fill="rgb(240,136,2)"/><text x="51.1883%" y="335.50"></text></g><g><title>do_softirq_own_stack (9 samples, 0.60%)</title><rect x="50.9383%" y="309" width="0.6032%" height="15" fill="rgb(239,18,37)"/><text x="51.1883%" y="319.50"></text></g><g><title>__do_softirq (9 samples, 0.60%)</title><rect x="50.9383%" y="293" width="0.6032%" height="15" fill="rgb(218,185,22)"/><text x="51.1883%" y="303.50"></text></g><g><title>net_rx_action (9 samples, 0.60%)</title><rect x="50.9383%" y="277" width="0.6032%" height="15" fill="rgb(225,218,4)"/><text x="51.1883%" y="287.50"></text></g><g><title>process_backlog (9 samples, 0.60%)</title><rect x="50.9383%" y="261" width="0.6032%" height="15" fill="rgb(230,182,32)"/><text x="51.1883%" y="271.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (15 samples, 1.01%)</title><rect x="50.6032%" y="661" width="1.0054%" height="15" fill="rgb(242,56,43)"/><text x="50.8532%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (14 samples, 0.94%)</title><rect x="50.6702%" y="645" width="0.9383%" height="15" fill="rgb(233,99,24)"/><text x="50.9202%" y="655.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (13 samples, 0.87%)</title><rect x="50.7373%" y="629" width="0.8713%" height="15" fill="rgb(234,209,42)"/><text x="50.9873%" y="639.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (12 samples, 0.80%)</title><rect x="50.8043%" y="613" width="0.8043%" height="15" fill="rgb(227,7,12)"/><text x="51.0543%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (12 samples, 0.80%)</title><rect x="50.8043%" y="597" width="0.8043%" height="15" fill="rgb(245,203,43)"/><text x="51.0543%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::write (12 samples, 0.80%)</title><rect x="50.8043%" y="581" width="0.8043%" height="15" fill="rgb(238,205,33)"/><text x="51.0543%" y="591.50"></text></g><g><title>__libc_send (12 samples, 0.80%)</title><rect x="50.8043%" y="565" width="0.8043%" height="15" fill="rgb(231,56,7)"/><text x="51.0543%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (12 samples, 0.80%)</title><rect x="50.8043%" y="549" width="0.8043%" height="15" fill="rgb(244,186,29)"/><text x="51.0543%" y="559.50"></text></g><g><title>do_syscall_64 (12 samples, 0.80%)</title><rect x="50.8043%" y="533" width="0.8043%" height="15" fill="rgb(234,111,31)"/><text x="51.0543%" y="543.50"></text></g><g><title>__x64_sys_sendto (12 samples, 0.80%)</title><rect x="50.8043%" y="517" width="0.8043%" height="15" fill="rgb(241,149,10)"/><text x="51.0543%" y="527.50"></text></g><g><title>__sys_sendto (12 samples, 0.80%)</title><rect x="50.8043%" y="501" width="0.8043%" height="15" fill="rgb(249,206,44)"/><text x="51.0543%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.13%)</title><rect x="52.1448%" y="517" width="0.1340%" height="15" fill="rgb(251,153,30)"/><text x="52.3948%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.13%)</title><rect x="52.1448%" y="501" width="0.1340%" height="15" fill="rgb(239,152,38)"/><text x="52.3948%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.13%)</title><rect x="52.1448%" y="485" width="0.1340%" height="15" fill="rgb(249,139,47)"/><text x="52.3948%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.13%)</title><rect x="52.1448%" y="469" width="0.1340%" height="15" fill="rgb(244,64,35)"/><text x="52.3948%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.34%)</title><rect x="52.1448%" y="565" width="0.3351%" height="15" fill="rgb(216,46,15)"/><text x="52.3948%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.34%)</title><rect x="52.1448%" y="549" width="0.3351%" height="15" fill="rgb(250,74,19)"/><text x="52.3948%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.34%)</title><rect x="52.1448%" y="533" width="0.3351%" height="15" fill="rgb(249,42,33)"/><text x="52.3948%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.20%)</title><rect x="52.2788%" y="517" width="0.2011%" height="15" fill="rgb(242,149,17)"/><text x="52.5288%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.13%)</title><rect x="52.3458%" y="501" width="0.1340%" height="15" fill="rgb(244,29,21)"/><text x="52.5958%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.40%)</title><rect x="52.1448%" y="629" width="0.4021%" height="15" fill="rgb(220,130,37)"/><text x="52.3948%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.40%)</title><rect x="52.1448%" y="613" width="0.4021%" height="15" fill="rgb(211,67,2)"/><text x="52.3948%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.40%)</title><rect x="52.1448%" y="597" width="0.4021%" height="15" fill="rgb(235,68,52)"/><text x="52.3948%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.40%)</title><rect x="52.1448%" y="581" width="0.4021%" height="15" fill="rgb(246,142,3)"/><text x="52.3948%" y="591.50"></text></g><g><title>__GI___libc_free (6 samples, 0.40%)</title><rect x="53.4853%" y="597" width="0.4021%" height="15" fill="rgb(241,25,7)"/><text x="53.7353%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 2.82%)</title><rect x="52.5469%" y="613" width="2.8150%" height="15" fill="rgb(242,119,39)"/><text x="52.7969%" y="623.50">&lt;h..</text></g><g><title>_int_free (20 samples, 1.34%)</title><rect x="54.0214%" y="597" width="1.3405%" height="15" fill="rgb(241,98,45)"/><text x="54.2714%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 3.69%)</title><rect x="52.5469%" y="629" width="3.6863%" height="15" fill="rgb(254,28,30)"/><text x="52.7969%" y="639.50">&lt;has..</text></g><g><title>_int_free (13 samples, 0.87%)</title><rect x="55.3619%" y="613" width="0.8713%" height="15" fill="rgb(241,142,54)"/><text x="55.6119%" y="623.50"></text></g><g><title>malloc_consolidate (13 samples, 0.87%)</title><rect x="55.3619%" y="597" width="0.8713%" height="15" fill="rgb(222,85,15)"/><text x="55.6119%" y="607.50"></text></g><g><title>__GI___libc_free (17 samples, 1.14%)</title><rect x="56.2332%" y="629" width="1.1394%" height="15" fill="rgb(210,85,47)"/><text x="56.4832%" y="639.50"></text></g><g><title>_int_malloc (13 samples, 0.87%)</title><rect x="57.7078%" y="613" width="0.8713%" height="15" fill="rgb(224,206,25)"/><text x="57.9578%" y="623.50"></text></g><g><title>__GI___libc_malloc (19 samples, 1.27%)</title><rect x="57.3727%" y="629" width="1.2735%" height="15" fill="rgb(243,201,19)"/><text x="57.6227%" y="639.50"></text></g><g><title>__rust_dealloc (3 samples, 0.20%)</title><rect x="58.7802%" y="629" width="0.2011%" height="15" fill="rgb(236,59,4)"/><text x="59.0302%" y="639.50"></text></g><g><title>_int_free (35 samples, 2.35%)</title><rect x="58.9812%" y="629" width="2.3458%" height="15" fill="rgb(254,179,45)"/><text x="59.2312%" y="639.50">_..</text></g><g><title>decor_mem::select::get_query_results (159 samples, 10.66%)</title><rect x="51.6086%" y="661" width="10.6568%" height="15" fill="rgb(226,14,10)"/><text x="51.8586%" y="671.50">decor_mem::selec..</text></g><g><title>decor_mem::select::get_setexpr_results (159 samples, 10.66%)</title><rect x="51.6086%" y="645" width="10.6568%" height="15" fill="rgb(244,27,41)"/><text x="51.8586%" y="655.50">decor_mem::selec..</text></g><g><title>core::ptr::drop_in_place (14 samples, 0.94%)</title><rect x="61.3271%" y="629" width="0.9383%" height="15" fill="rgb(235,35,32)"/><text x="61.5771%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (2 samples, 0.13%)</title><rect x="62.5335%" y="613" width="0.1340%" height="15" fill="rgb(218,68,31)"/><text x="62.7835%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.13%)</title><rect x="62.5335%" y="597" width="0.1340%" height="15" fill="rgb(207,120,37)"/><text x="62.7835%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2 samples, 0.13%)</title><rect x="62.5335%" y="581" width="0.1340%" height="15" fill="rgb(227,98,0)"/><text x="62.7835%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.13%)</title><rect x="62.5335%" y="565" width="0.1340%" height="15" fill="rgb(207,7,3)"/><text x="62.7835%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.13%)</title><rect x="62.5335%" y="549" width="0.1340%" height="15" fill="rgb(206,98,19)"/><text x="62.7835%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.13%)</title><rect x="62.6676%" y="597" width="0.1340%" height="15" fill="rgb(217,5,26)"/><text x="62.9176%" y="607.50"></text></g><g><title>decor_mem::views::Views::insert (9 samples, 0.60%)</title><rect x="62.2654%" y="661" width="0.6032%" height="15" fill="rgb(235,190,38)"/><text x="62.5154%" y="671.50"></text></g><g><title>decor_mem::views::View::insert_into_index (7 samples, 0.47%)</title><rect x="62.3995%" y="645" width="0.4692%" height="15" fill="rgb(247,86,24)"/><text x="62.6495%" y="655.50"></text></g><g><title>core::fmt::write (5 samples, 0.34%)</title><rect x="62.5335%" y="629" width="0.3351%" height="15" fill="rgb(205,101,16)"/><text x="62.7835%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.20%)</title><rect x="62.6676%" y="613" width="0.2011%" height="15" fill="rgb(246,168,33)"/><text x="62.9176%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.20%)</title><rect x="62.9357%" y="613" width="0.2011%" height="15" fill="rgb(231,114,1)"/><text x="63.1857%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.20%)</title><rect x="62.9357%" y="597" width="0.2011%" height="15" fill="rgb(207,184,53)"/><text x="63.1857%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.20%)</title><rect x="62.9357%" y="581" width="0.2011%" height="15" fill="rgb(224,95,51)"/><text x="63.1857%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.20%)</title><rect x="62.9357%" y="565" width="0.2011%" height="15" fill="rgb(212,188,45)"/><text x="63.1857%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.20%)</title><rect x="62.9357%" y="549" width="0.2011%" height="15" fill="rgb(223,154,38)"/><text x="63.1857%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.20%)</title><rect x="62.9357%" y="533" width="0.2011%" height="15" fill="rgb(251,22,52)"/><text x="63.1857%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.20%)</title><rect x="62.9357%" y="517" width="0.2011%" height="15" fill="rgb(229,209,22)"/><text x="63.1857%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.20%)</title><rect x="62.9357%" y="501" width="0.2011%" height="15" fill="rgb(234,138,34)"/><text x="63.1857%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.20%)</title><rect x="62.9357%" y="485" width="0.2011%" height="15" fill="rgb(212,95,11)"/><text x="63.1857%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.20%)</title><rect x="62.9357%" y="469" width="0.2011%" height="15" fill="rgb(240,179,47)"/><text x="63.1857%" y="479.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.20%)</title><rect x="62.9357%" y="453" width="0.2011%" height="15" fill="rgb(240,163,11)"/><text x="63.1857%" y="463.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.20%)</title><rect x="62.9357%" y="437" width="0.2011%" height="15" fill="rgb(236,37,12)"/><text x="63.1857%" y="447.50"></text></g><g><title>_int_malloc (3 samples, 0.20%)</title><rect x="62.9357%" y="421" width="0.2011%" height="15" fill="rgb(232,164,16)"/><text x="63.1857%" y="431.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (6 samples, 0.40%)</title><rect x="62.8686%" y="645" width="0.4021%" height="15" fill="rgb(244,205,15)"/><text x="63.1186%" y="655.50"></text></g><g><title>decor_mem::select::get_value_for_rows (6 samples, 0.40%)</title><rect x="62.8686%" y="629" width="0.4021%" height="15" fill="rgb(223,117,47)"/><text x="63.1186%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.13%)</title><rect x="63.1367%" y="613" width="0.1340%" height="15" fill="rgb(244,107,35)"/><text x="63.3867%" y="623.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.13%)</title><rect x="63.1367%" y="597" width="0.1340%" height="15" fill="rgb(205,140,8)"/><text x="63.3867%" y="607.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (208 samples, 13.94%)</title><rect x="49.5979%" y="677" width="13.9410%" height="15" fill="rgb(228,84,46)"/><text x="49.8479%" y="687.50">decor_mem::query_tran..</text></g><g><title>decor_mem::views::Views::update (10 samples, 0.67%)</title><rect x="62.8686%" y="661" width="0.6702%" height="15" fill="rgb(254,188,9)"/><text x="63.1186%" y="671.50"></text></g><g><title>decor_mem::select::get_value_for_rows (4 samples, 0.27%)</title><rect x="63.2708%" y="645" width="0.2681%" height="15" fill="rgb(206,112,54)"/><text x="63.5208%" y="655.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (3 samples, 0.20%)</title><rect x="63.3378%" y="629" width="0.2011%" height="15" fill="rgb(216,84,49)"/><text x="63.5878%" y="639.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (3 samples, 0.20%)</title><rect x="63.3378%" y="613" width="0.2011%" height="15" fill="rgb(214,194,35)"/><text x="63.5878%" y="623.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.20%)</title><rect x="63.3378%" y="597" width="0.2011%" height="15" fill="rgb(249,28,3)"/><text x="63.5878%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.20%)</title><rect x="63.3378%" y="581" width="0.2011%" height="15" fill="rgb(222,56,52)"/><text x="63.5878%" y="591.50"></text></g><g><title>core::fmt::write (3 samples, 0.20%)</title><rect x="63.3378%" y="565" width="0.2011%" height="15" fill="rgb(245,217,50)"/><text x="63.5878%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (3 samples, 0.20%)</title><rect x="63.3378%" y="549" width="0.2011%" height="15" fill="rgb(213,201,24)"/><text x="63.5878%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.13%)</title><rect x="63.4048%" y="533" width="0.1340%" height="15" fill="rgb(248,116,28)"/><text x="63.6548%" y="543.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2 samples, 0.13%)</title><rect x="63.4048%" y="517" width="0.1340%" height="15" fill="rgb(219,72,43)"/><text x="63.6548%" y="527.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.13%)</title><rect x="63.4048%" y="501" width="0.1340%" height="15" fill="rgb(209,138,14)"/><text x="63.6548%" y="511.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.13%)</title><rect x="63.4048%" y="485" width="0.1340%" height="15" fill="rgb(222,18,33)"/><text x="63.6548%" y="495.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (215 samples, 14.41%)</title><rect x="49.4638%" y="709" width="14.4102%" height="15" fill="rgb(213,199,7)"/><text x="49.7138%" y="719.50">msql_srv::MysqlInterme..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (213 samples, 14.28%)</title><rect x="49.5979%" y="693" width="14.2761%" height="15" fill="rgb(250,110,10)"/><text x="49.8479%" y="703.50">&lt;decor_mem::Shim as ms..</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (5 samples, 0.34%)</title><rect x="63.5389%" y="677" width="0.3351%" height="15" fill="rgb(248,123,6)"/><text x="63.7889%" y="687.50"></text></g><g><title>sql_parser::parser::parse_statements (5 samples, 0.34%)</title><rect x="63.5389%" y="661" width="0.3351%" height="15" fill="rgb(206,91,31)"/><text x="63.7889%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (5 samples, 0.34%)</title><rect x="63.5389%" y="645" width="0.3351%" height="15" fill="rgb(211,154,13)"/><text x="63.7889%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (4 samples, 0.27%)</title><rect x="63.6059%" y="629" width="0.2681%" height="15" fill="rgb(225,148,7)"/><text x="63.8559%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (3 samples, 0.20%)</title><rect x="63.6729%" y="613" width="0.2011%" height="15" fill="rgb(220,160,43)"/><text x="63.9229%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.13%)</title><rect x="63.7399%" y="597" width="0.1340%" height="15" fill="rgb(213,52,39)"/><text x="63.9899%" y="607.50"></text></g><g><title>mysql::conn::Conn::read_packet (7 samples, 0.47%)</title><rect x="63.8740%" y="709" width="0.4692%" height="15" fill="rgb(243,137,7)"/><text x="64.1240%" y="719.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (6 samples, 0.40%)</title><rect x="64.3432%" y="709" width="0.4021%" height="15" fill="rgb(230,79,13)"/><text x="64.5932%" y="719.50"></text></g><g><title>mysql_common::value::read_text_value (2 samples, 0.13%)</title><rect x="64.8123%" y="709" width="0.1340%" height="15" fill="rgb(247,105,23)"/><text x="65.0623%" y="719.50"></text></g><g><title>mysql_common::value::read_text_values (3 samples, 0.20%)</title><rect x="64.9464%" y="709" width="0.2011%" height="15" fill="rgb(223,179,41)"/><text x="65.1964%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (28 samples, 1.88%)</title><rect x="65.2815%" y="533" width="1.8767%" height="15" fill="rgb(218,9,34)"/><text x="65.5315%" y="543.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 1.88%)</title><rect x="65.2815%" y="517" width="1.8767%" height="15" fill="rgb(222,106,8)"/><text x="65.5315%" y="527.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (28 samples, 1.88%)</title><rect x="65.2815%" y="501" width="1.8767%" height="15" fill="rgb(211,220,0)"/><text x="65.5315%" y="511.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 1.88%)</title><rect x="65.2815%" y="485" width="1.8767%" height="15" fill="rgb(229,52,16)"/><text x="65.5315%" y="495.50">c..</text></g><g><title>__memmove_avx_unaligned_erms (28 samples, 1.88%)</title><rect x="65.2815%" y="469" width="1.8767%" height="15" fill="rgb(212,155,18)"/><text x="65.5315%" y="479.50">_..</text></g><g><title>sql_parser::parser::Parser::parse_data_type (30 samples, 2.01%)</title><rect x="65.2145%" y="629" width="2.0107%" height="15" fill="rgb(242,21,14)"/><text x="65.4645%" y="639.50">s..</text></g><g><title>sql_parser::parser::Parser::expected (29 samples, 1.94%)</title><rect x="65.2815%" y="613" width="1.9437%" height="15" fill="rgb(222,19,48)"/><text x="65.5315%" y="623.50">s..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 1.94%)</title><rect x="65.2815%" y="597" width="1.9437%" height="15" fill="rgb(232,45,27)"/><text x="65.5315%" y="607.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 1.94%)</title><rect x="65.2815%" y="581" width="1.9437%" height="15" fill="rgb(249,103,42)"/><text x="65.5315%" y="591.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (29 samples, 1.94%)</title><rect x="65.2815%" y="565" width="1.9437%" height="15" fill="rgb(246,81,33)"/><text x="65.5315%" y="575.50">a..</text></g><g><title>alloc::slice::hack::to_vec (29 samples, 1.94%)</title><rect x="65.2815%" y="549" width="1.9437%" height="15" fill="rgb(252,33,42)"/><text x="65.5315%" y="559.50">a..</text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (32 samples, 2.14%)</title><rect x="65.1475%" y="677" width="2.1448%" height="15" fill="rgb(209,212,41)"/><text x="65.3975%" y="687.50">s..</text></g><g><title>sql_parser::parser::Parser::check_descent (32 samples, 2.14%)</title><rect x="65.1475%" y="661" width="2.1448%" height="15" fill="rgb(207,154,6)"/><text x="65.3975%" y="671.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (32 samples, 2.14%)</title><rect x="65.1475%" y="645" width="2.1448%" height="15" fill="rgb(223,64,47)"/><text x="65.3975%" y="655.50">s..</text></g><g><title>sql_parser::parser::Parser::check_descent (34 samples, 2.28%)</title><rect x="65.1475%" y="709" width="2.2788%" height="15" fill="rgb(211,161,38)"/><text x="65.3975%" y="719.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (34 samples, 2.28%)</title><rect x="65.1475%" y="693" width="2.2788%" height="15" fill="rgb(219,138,40)"/><text x="65.3975%" y="703.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_select (2 samples, 0.13%)</title><rect x="67.2922%" y="677" width="0.1340%" height="15" fill="rgb(241,228,46)"/><text x="67.5422%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.20%)</title><rect x="67.4263%" y="613" width="0.2011%" height="15" fill="rgb(223,209,38)"/><text x="67.6763%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.20%)</title><rect x="67.4263%" y="597" width="0.2011%" height="15" fill="rgb(236,164,45)"/><text x="67.6763%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.20%)</title><rect x="67.4263%" y="581" width="0.2011%" height="15" fill="rgb(231,15,5)"/><text x="67.6763%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.20%)</title><rect x="67.4263%" y="565" width="0.2011%" height="15" fill="rgb(252,35,15)"/><text x="67.6763%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.20%)</title><rect x="67.4263%" y="549" width="0.2011%" height="15" fill="rgb(248,181,18)"/><text x="67.6763%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.20%)</title><rect x="67.4263%" y="533" width="0.2011%" height="15" fill="rgb(233,39,42)"/><text x="67.6763%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.20%)</title><rect x="67.4263%" y="517" width="0.2011%" height="15" fill="rgb(238,110,33)"/><text x="67.6763%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.20%)</title><rect x="67.4263%" y="501" width="0.2011%" height="15" fill="rgb(233,195,10)"/><text x="67.6763%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.20%)</title><rect x="67.4263%" y="485" width="0.2011%" height="15" fill="rgb(254,105,3)"/><text x="67.6763%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.20%)</title><rect x="67.4263%" y="469" width="0.2011%" height="15" fill="rgb(221,225,9)"/><text x="67.6763%" y="479.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.20%)</title><rect x="67.4263%" y="453" width="0.2011%" height="15" fill="rgb(224,227,45)"/><text x="67.6763%" y="463.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.20%)</title><rect x="67.4263%" y="437" width="0.2011%" height="15" fill="rgb(229,198,43)"/><text x="67.6763%" y="447.50"></text></g><g><title>_int_malloc (3 samples, 0.20%)</title><rect x="67.4263%" y="421" width="0.2011%" height="15" fill="rgb(206,209,35)"/><text x="67.6763%" y="431.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (4 samples, 0.27%)</title><rect x="67.4263%" y="693" width="0.2681%" height="15" fill="rgb(245,195,53)"/><text x="67.6763%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (4 samples, 0.27%)</title><rect x="67.4263%" y="677" width="0.2681%" height="15" fill="rgb(240,92,26)"/><text x="67.6763%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (4 samples, 0.27%)</title><rect x="67.4263%" y="661" width="0.2681%" height="15" fill="rgb(207,40,23)"/><text x="67.6763%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (4 samples, 0.27%)</title><rect x="67.4263%" y="645" width="0.2681%" height="15" fill="rgb(223,111,35)"/><text x="67.6763%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::expected (4 samples, 0.27%)</title><rect x="67.4263%" y="629" width="0.2681%" height="15" fill="rgb(229,147,28)"/><text x="67.6763%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (5 samples, 0.34%)</title><rect x="67.4263%" y="709" width="0.3351%" height="15" fill="rgb(211,29,28)"/><text x="67.6763%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.13%)</title><rect x="67.8284%" y="645" width="0.1340%" height="15" fill="rgb(228,72,33)"/><text x="68.0784%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (5 samples, 0.34%)</title><rect x="67.7614%" y="709" width="0.3351%" height="15" fill="rgb(205,214,31)"/><text x="68.0114%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.34%)</title><rect x="67.7614%" y="693" width="0.3351%" height="15" fill="rgb(224,111,15)"/><text x="68.0114%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (5 samples, 0.34%)</title><rect x="67.7614%" y="677" width="0.3351%" height="15" fill="rgb(253,21,26)"/><text x="68.0114%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (4 samples, 0.27%)</title><rect x="67.8284%" y="661" width="0.2681%" height="15" fill="rgb(245,139,43)"/><text x="68.0784%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (2 samples, 0.13%)</title><rect x="68.1635%" y="661" width="0.1340%" height="15" fill="rgb(252,170,7)"/><text x="68.4135%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (5 samples, 0.34%)</title><rect x="68.0965%" y="677" width="0.3351%" height="15" fill="rgb(231,118,14)"/><text x="68.3465%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (2 samples, 0.13%)</title><rect x="68.2976%" y="661" width="0.1340%" height="15" fill="rgb(238,83,0)"/><text x="68.5476%" y="671.50"></text></g><g><title>sql_parser::parser::parse_statements (8 samples, 0.54%)</title><rect x="68.0965%" y="709" width="0.5362%" height="15" fill="rgb(221,39,39)"/><text x="68.3465%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (8 samples, 0.54%)</title><rect x="68.0965%" y="693" width="0.5362%" height="15" fill="rgb(222,119,46)"/><text x="68.3465%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_columns (3 samples, 0.20%)</title><rect x="68.4316%" y="677" width="0.2011%" height="15" fill="rgb(222,165,49)"/><text x="68.6816%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (2 samples, 0.13%)</title><rect x="68.4987%" y="661" width="0.1340%" height="15" fill="rgb(219,113,52)"/><text x="68.7487%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.13%)</title><rect x="68.6327%" y="709" width="0.1340%" height="15" fill="rgb(214,7,15)"/><text x="68.8827%" y="719.50"></text></g><g><title>do_filp_open (3 samples, 0.20%)</title><rect x="68.9008%" y="421" width="0.2011%" height="15" fill="rgb(235,32,4)"/><text x="69.1508%" y="431.50"></text></g><g><title>path_openat (3 samples, 0.20%)</title><rect x="68.9008%" y="405" width="0.2011%" height="15" fill="rgb(238,90,54)"/><text x="69.1508%" y="415.50"></text></g><g><title>link_path_walk (3 samples, 0.20%)</title><rect x="68.9008%" y="389" width="0.2011%" height="15" fill="rgb(213,208,19)"/><text x="69.1508%" y="399.50"></text></g><g><title>walk_component (3 samples, 0.20%)</title><rect x="68.9008%" y="373" width="0.2011%" height="15" fill="rgb(233,156,4)"/><text x="69.1508%" y="383.50"></text></g><g><title>step_into (3 samples, 0.20%)</title><rect x="68.9008%" y="357" width="0.2011%" height="15" fill="rgb(207,194,5)"/><text x="69.1508%" y="367.50"></text></g><g><title>hwloc::Topology::new (6 samples, 0.40%)</title><rect x="68.7668%" y="581" width="0.4021%" height="15" fill="rgb(206,111,30)"/><text x="69.0168%" y="591.50"></text></g><g><title>hwloc_topology_load (6 samples, 0.40%)</title><rect x="68.7668%" y="565" width="0.4021%" height="15" fill="rgb(243,70,54)"/><text x="69.0168%" y="575.50"></text></g><g><title>[libhwloc.so.15.2.0] (6 samples, 0.40%)</title><rect x="68.7668%" y="549" width="0.4021%" height="15" fill="rgb(242,28,8)"/><text x="69.0168%" y="559.50"></text></g><g><title>[libhwloc.so.15.2.0] (6 samples, 0.40%)</title><rect x="68.7668%" y="533" width="0.4021%" height="15" fill="rgb(219,106,18)"/><text x="69.0168%" y="543.50"></text></g><g><title>[libhwloc.so.15.2.0] (6 samples, 0.40%)</title><rect x="68.7668%" y="517" width="0.4021%" height="15" fill="rgb(244,222,10)"/><text x="69.0168%" y="527.50"></text></g><g><title>__GI___openat (6 samples, 0.40%)</title><rect x="68.7668%" y="501" width="0.4021%" height="15" fill="rgb(236,179,52)"/><text x="69.0168%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.34%)</title><rect x="68.8338%" y="485" width="0.3351%" height="15" fill="rgb(213,23,39)"/><text x="69.0838%" y="495.50"></text></g><g><title>do_syscall_64 (5 samples, 0.34%)</title><rect x="68.8338%" y="469" width="0.3351%" height="15" fill="rgb(238,48,10)"/><text x="69.0838%" y="479.50"></text></g><g><title>__x64_sys_openat (5 samples, 0.34%)</title><rect x="68.8338%" y="453" width="0.3351%" height="15" fill="rgb(251,196,23)"/><text x="69.0838%" y="463.50"></text></g><g><title>do_sys_openat2 (5 samples, 0.34%)</title><rect x="68.8338%" y="437" width="0.3351%" height="15" fill="rgb(250,152,24)"/><text x="69.0838%" y="447.50"></text></g><g><title>__GI___libc_free (7 samples, 0.47%)</title><rect x="70.8445%" y="549" width="0.4692%" height="15" fill="rgb(209,150,17)"/><text x="71.0945%" y="559.50"></text></g><g><title>_int_free (10 samples, 0.67%)</title><rect x="71.4477%" y="549" width="0.6702%" height="15" fill="rgb(234,202,34)"/><text x="71.6977%" y="559.50"></text></g><g><title>std::rt::lang_start_internal (63 samples, 4.22%)</title><rect x="68.7668%" y="709" width="4.2225%" height="15" fill="rgb(253,148,53)"/><text x="69.0168%" y="719.50">std::..</text></g><g><title>std::panic::catch_unwind (63 samples, 4.22%)</title><rect x="68.7668%" y="693" width="4.2225%" height="15" fill="rgb(218,129,16)"/><text x="69.0168%" y="703.50">std::..</text></g><g><title>std::panicking::try (63 samples, 4.22%)</title><rect x="68.7668%" y="677" width="4.2225%" height="15" fill="rgb(216,85,19)"/><text x="69.0168%" y="687.50">std::..</text></g><g><title>std::panicking::try::do_call (63 samples, 4.22%)</title><rect x="68.7668%" y="661" width="4.2225%" height="15" fill="rgb(235,228,7)"/><text x="69.0168%" y="671.50">std::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (63 samples, 4.22%)</title><rect x="68.7668%" y="645" width="4.2225%" height="15" fill="rgb(245,175,0)"/><text x="69.0168%" y="655.50">core:..</text></g><g><title>std::rt::lang_start::_{{closure}} (63 samples, 4.22%)</title><rect x="68.7668%" y="629" width="4.2225%" height="15" fill="rgb(208,168,36)"/><text x="69.0168%" y="639.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (63 samples, 4.22%)</title><rect x="68.7668%" y="613" width="4.2225%" height="15" fill="rgb(246,171,24)"/><text x="69.0168%" y="623.50">std::..</text></g><g><title>lobsters_microbenchmarks::main (63 samples, 4.22%)</title><rect x="68.7668%" y="597" width="4.2225%" height="15" fill="rgb(215,142,24)"/><text x="69.0168%" y="607.50">lobst..</text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (57 samples, 3.82%)</title><rect x="69.1689%" y="581" width="3.8204%" height="15" fill="rgb(250,187,7)"/><text x="69.4189%" y="591.50">lobs..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 3.75%)</title><rect x="69.2359%" y="565" width="3.7534%" height="15" fill="rgb(228,66,33)"/><text x="69.4859%" y="575.50">&lt;mys..</text></g><g><title>mysql_common::row::new_row (12 samples, 0.80%)</title><rect x="72.1850%" y="549" width="0.8043%" height="15" fill="rgb(234,215,21)"/><text x="72.4350%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.40%)</title><rect x="72.5871%" y="533" width="0.4021%" height="15" fill="rgb(222,191,20)"/><text x="72.8371%" y="543.50"></text></g><g><title>[unknown] (967 samples, 64.81%)</title><rect x="9.0483%" y="725" width="64.8123%" height="15" fill="rgb(245,79,54)"/><text x="9.2983%" y="735.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.87%)</title><rect x="72.9893%" y="709" width="0.8713%" height="15" fill="rgb(240,10,37)"/><text x="73.2393%" y="719.50"></text></g><g><title>lobsters_microbenchmarks::main (13 samples, 0.87%)</title><rect x="72.9893%" y="693" width="0.8713%" height="15" fill="rgb(214,192,32)"/><text x="73.2393%" y="703.50"></text></g><g><title>lobsters_microbenchmarks::queriers::expensive_queries::post_comment (13 samples, 0.87%)</title><rect x="72.9893%" y="677" width="0.8713%" height="15" fill="rgb(209,36,54)"/><text x="73.2393%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.87%)</title><rect x="72.9893%" y="661" width="0.8713%" height="15" fill="rgb(220,10,11)"/><text x="73.2393%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (13 samples, 0.87%)</title><rect x="72.9893%" y="645" width="0.8713%" height="15" fill="rgb(221,106,17)"/><text x="73.2393%" y="655.50"></text></g><g><title>mysql::conn::Conn::next_text (13 samples, 0.87%)</title><rect x="72.9893%" y="629" width="0.8713%" height="15" fill="rgb(251,142,44)"/><text x="73.2393%" y="639.50"></text></g><g><title>__GI___libc_free (3 samples, 0.20%)</title><rect x="74.5308%" y="549" width="0.2011%" height="15" fill="rgb(238,13,15)"/><text x="74.7808%" y="559.50"></text></g><g><title>_int_free (45 samples, 3.02%)</title><rect x="74.7319%" y="549" width="3.0161%" height="15" fill="rgb(208,107,27)"/><text x="74.9819%" y="559.50">_in..</text></g><g><title>malloc_consolidate (39 samples, 2.61%)</title><rect x="75.1340%" y="533" width="2.6139%" height="15" fill="rgb(205,136,37)"/><text x="75.3840%" y="543.50">ma..</text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.74%)</title><rect x="77.0107%" y="517" width="0.7373%" height="15" fill="rgb(250,205,27)"/><text x="77.2607%" y="527.50"></text></g><g><title>decor_mem::helpers::parser_val_to_common_val (5 samples, 0.34%)</title><rect x="77.7480%" y="549" width="0.3351%" height="15" fill="rgb(210,80,43)"/><text x="77.9980%" y="559.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for i64&gt;::from_str (2 samples, 0.13%)</title><rect x="77.9491%" y="533" width="0.1340%" height="15" fill="rgb(247,160,36)"/><text x="78.1991%" y="543.50"></text></g><g><title>core::num::from_str_radix (2 samples, 0.13%)</title><rect x="77.9491%" y="517" width="0.1340%" height="15" fill="rgb(234,13,49)"/><text x="78.1991%" y="527.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::end_row (8 samples, 0.54%)</title><rect x="78.0831%" y="549" width="0.5362%" height="15" fill="rgb(234,122,0)"/><text x="78.3331%" y="559.50"></text></g><g><title>msql_srv::packet::PacketWriter&lt;W&gt;::maybe_end_packet (7 samples, 0.47%)</title><rect x="78.1501%" y="533" width="0.4692%" height="15" fill="rgb(207,146,38)"/><text x="78.4001%" y="543.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.34%)</title><rect x="78.2842%" y="517" width="0.3351%" height="15" fill="rgb(207,177,25)"/><text x="78.5342%" y="527.50"></text></g><g><title>__GI___libc_free (2 samples, 0.13%)</title><rect x="78.8204%" y="501" width="0.1340%" height="15" fill="rgb(211,178,42)"/><text x="79.0704%" y="511.50"></text></g><g><title>_int_free (2 samples, 0.13%)</title><rect x="78.9544%" y="501" width="0.1340%" height="15" fill="rgb(230,69,54)"/><text x="79.2044%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.13%)</title><rect x="79.2895%" y="453" width="0.1340%" height="15" fill="rgb(214,135,41)"/><text x="79.5395%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.13%)</title><rect x="79.2895%" y="437" width="0.1340%" height="15" fill="rgb(237,67,25)"/><text x="79.5395%" y="447.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.13%)</title><rect x="79.2895%" y="421" width="0.1340%" height="15" fill="rgb(222,189,50)"/><text x="79.5395%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.13%)</title><rect x="79.2895%" y="405" width="0.1340%" height="15" fill="rgb(245,148,34)"/><text x="79.5395%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="79.2895%" y="389" width="0.1340%" height="15" fill="rgb(222,29,6)"/><text x="79.5395%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.13%)</title><rect x="79.2895%" y="373" width="0.1340%" height="15" fill="rgb(221,189,43)"/><text x="79.5395%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (2 samples, 0.13%)</title><rect x="79.4236%" y="453" width="0.1340%" height="15" fill="rgb(207,36,27)"/><text x="79.6736%" y="463.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.13%)</title><rect x="79.4236%" y="437" width="0.1340%" height="15" fill="rgb(217,90,24)"/><text x="79.6736%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.13%)</title><rect x="79.4236%" y="421" width="0.1340%" height="15" fill="rgb(224,66,35)"/><text x="79.6736%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.13%)</title><rect x="79.4236%" y="405" width="0.1340%" height="15" fill="rgb(221,13,50)"/><text x="79.6736%" y="415.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.13%)</title><rect x="79.4236%" y="389" width="0.1340%" height="15" fill="rgb(236,68,49)"/><text x="79.6736%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.13%)</title><rect x="79.4236%" y="373" width="0.1340%" height="15" fill="rgb(229,146,28)"/><text x="79.6736%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.13%)</title><rect x="79.4236%" y="357" width="0.1340%" height="15" fill="rgb(225,31,38)"/><text x="79.6736%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.13%)</title><rect x="79.4236%" y="341" width="0.1340%" height="15" fill="rgb(250,208,3)"/><text x="79.6736%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.13%)</title><rect x="79.4236%" y="325" width="0.1340%" height="15" fill="rgb(246,54,23)"/><text x="79.6736%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.13%)</title><rect x="79.4236%" y="309" width="0.1340%" height="15" fill="rgb(243,76,11)"/><text x="79.6736%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.13%)</title><rect x="79.4236%" y="293" width="0.1340%" height="15" fill="rgb(245,21,50)"/><text x="79.6736%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.13%)</title><rect x="79.4236%" y="277" width="0.1340%" height="15" fill="rgb(228,9,43)"/><text x="79.6736%" y="287.50"></text></g><g><title>alloc::fmt::format (8 samples, 0.54%)</title><rect x="79.0885%" y="501" width="0.5362%" height="15" fill="rgb(208,100,47)"/><text x="79.3385%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.47%)</title><rect x="79.1555%" y="485" width="0.4692%" height="15" fill="rgb(232,26,8)"/><text x="79.4055%" y="495.50"></text></g><g><title>core::fmt::write (6 samples, 0.40%)</title><rect x="79.2225%" y="469" width="0.4021%" height="15" fill="rgb(216,166,38)"/><text x="79.4725%" y="479.50"></text></g><g><title>mysql_common::io::WriteMysqlExt::write_lenenc_int (2 samples, 0.13%)</title><rect x="79.6247%" y="501" width="0.1340%" height="15" fill="rgb(251,202,51)"/><text x="79.8747%" y="511.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (89 samples, 5.97%)</title><rect x="73.8606%" y="565" width="5.9651%" height="15" fill="rgb(254,216,34)"/><text x="74.1106%" y="575.50">decor_me..</text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (18 samples, 1.21%)</title><rect x="78.6193%" y="549" width="1.2064%" height="15" fill="rgb(251,32,27)"/><text x="78.8693%" y="559.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (17 samples, 1.14%)</title><rect x="78.6863%" y="533" width="1.1394%" height="15" fill="rgb(208,127,28)"/><text x="78.9363%" y="543.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (16 samples, 1.07%)</title><rect x="78.7534%" y="517" width="1.0724%" height="15" fill="rgb(224,137,22)"/><text x="79.0034%" y="527.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Debug&gt;::fmt (2 samples, 0.13%)</title><rect x="79.9598%" y="485" width="0.1340%" height="15" fill="rgb(254,70,32)"/><text x="80.2098%" y="495.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (2 samples, 0.13%)</title><rect x="79.9598%" y="469" width="0.1340%" height="15" fill="rgb(229,75,37)"/><text x="80.2098%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.13%)</title><rect x="79.9598%" y="453" width="0.1340%" height="15" fill="rgb(252,64,23)"/><text x="80.2098%" y="463.50"></text></g><g><title>env_logger::fmt::Builder::build::_{{closure}} (4 samples, 0.27%)</title><rect x="79.8928%" y="517" width="0.2681%" height="15" fill="rgb(232,162,48)"/><text x="80.1428%" y="527.50"></text></g><g><title>core::fmt::write (3 samples, 0.20%)</title><rect x="79.9598%" y="501" width="0.2011%" height="15" fill="rgb(246,160,12)"/><text x="80.2098%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (3 samples, 0.20%)</title><rect x="80.2279%" y="341" width="0.2011%" height="15" fill="rgb(247,166,0)"/><text x="80.4779%" y="351.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.20%)</title><rect x="80.2279%" y="325" width="0.2011%" height="15" fill="rgb(249,219,21)"/><text x="80.4779%" y="335.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (3 samples, 0.20%)</title><rect x="80.2279%" y="309" width="0.2011%" height="15" fill="rgb(205,209,3)"/><text x="80.4779%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.20%)</title><rect x="80.2279%" y="293" width="0.2011%" height="15" fill="rgb(243,44,1)"/><text x="80.4779%" y="303.50"></text></g><g><title>__libc_write (3 samples, 0.20%)</title><rect x="80.2279%" y="277" width="0.2011%" height="15" fill="rgb(206,159,16)"/><text x="80.4779%" y="287.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.13%)</title><rect x="80.2949%" y="261" width="0.1340%" height="15" fill="rgb(244,77,30)"/><text x="80.5449%" y="271.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (99 samples, 6.64%)</title><rect x="73.8606%" y="581" width="6.6354%" height="15" fill="rgb(218,69,12)"/><text x="74.1106%" y="591.50">&lt;decor_me..</text></g><g><title>log::__private_api_log (9 samples, 0.60%)</title><rect x="79.8928%" y="565" width="0.6032%" height="15" fill="rgb(212,87,7)"/><text x="80.1428%" y="575.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (9 samples, 0.60%)</title><rect x="79.8928%" y="549" width="0.6032%" height="15" fill="rgb(245,114,25)"/><text x="80.1428%" y="559.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (9 samples, 0.60%)</title><rect x="79.8928%" y="533" width="0.6032%" height="15" fill="rgb(210,61,42)"/><text x="80.1428%" y="543.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (5 samples, 0.34%)</title><rect x="80.1609%" y="517" width="0.3351%" height="15" fill="rgb(211,52,33)"/><text x="80.4109%" y="527.50"></text></g><g><title>std::io::stdio::_eprint (5 samples, 0.34%)</title><rect x="80.1609%" y="501" width="0.3351%" height="15" fill="rgb(234,58,33)"/><text x="80.4109%" y="511.50"></text></g><g><title>std::io::stdio::print_to (5 samples, 0.34%)</title><rect x="80.1609%" y="485" width="0.3351%" height="15" fill="rgb(220,115,36)"/><text x="80.4109%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (5 samples, 0.34%)</title><rect x="80.1609%" y="469" width="0.3351%" height="15" fill="rgb(243,153,54)"/><text x="80.4109%" y="479.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (5 samples, 0.34%)</title><rect x="80.1609%" y="453" width="0.3351%" height="15" fill="rgb(251,47,18)"/><text x="80.4109%" y="463.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (5 samples, 0.34%)</title><rect x="80.1609%" y="437" width="0.3351%" height="15" fill="rgb(242,102,42)"/><text x="80.4109%" y="447.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (5 samples, 0.34%)</title><rect x="80.1609%" y="421" width="0.3351%" height="15" fill="rgb(234,31,38)"/><text x="80.4109%" y="431.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.27%)</title><rect x="80.2279%" y="405" width="0.2681%" height="15" fill="rgb(221,117,51)"/><text x="80.4779%" y="415.50"></text></g><g><title>core::fmt::write (4 samples, 0.27%)</title><rect x="80.2279%" y="389" width="0.2681%" height="15" fill="rgb(212,20,18)"/><text x="80.4779%" y="399.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.27%)</title><rect x="80.2279%" y="373" width="0.2681%" height="15" fill="rgb(245,133,36)"/><text x="80.4779%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (4 samples, 0.27%)</title><rect x="80.2279%" y="357" width="0.2681%" height="15" fill="rgb(212,6,19)"/><text x="80.4779%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.20%)</title><rect x="80.4960%" y="581" width="0.2011%" height="15" fill="rgb(218,1,36)"/><text x="80.7460%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.20%)</title><rect x="80.4960%" y="565" width="0.2011%" height="15" fill="rgb(246,84,54)"/><text x="80.7460%" y="575.50"></text></g><g><title>__dev_queue_xmit (2 samples, 0.13%)</title><rect x="81.0322%" y="309" width="0.1340%" height="15" fill="rgb(242,110,6)"/><text x="81.2822%" y="319.50"></text></g><g><title>__tcp_push_pending_frames (9 samples, 0.60%)</title><rect x="80.8981%" y="405" width="0.6032%" height="15" fill="rgb(214,47,5)"/><text x="81.1481%" y="415.50"></text></g><g><title>tcp_write_xmit (9 samples, 0.60%)</title><rect x="80.8981%" y="389" width="0.6032%" height="15" fill="rgb(218,159,25)"/><text x="81.1481%" y="399.50"></text></g><g><title>__tcp_transmit_skb (9 samples, 0.60%)</title><rect x="80.8981%" y="373" width="0.6032%" height="15" fill="rgb(215,211,28)"/><text x="81.1481%" y="383.50"></text></g><g><title>__ip_queue_xmit (9 samples, 0.60%)</title><rect x="80.8981%" y="357" width="0.6032%" height="15" fill="rgb(238,59,32)"/><text x="81.1481%" y="367.50"></text></g><g><title>ip_output (8 samples, 0.54%)</title><rect x="80.9651%" y="341" width="0.5362%" height="15" fill="rgb(226,82,3)"/><text x="81.2151%" y="351.50"></text></g><g><title>ip_finish_output2 (8 samples, 0.54%)</title><rect x="80.9651%" y="325" width="0.5362%" height="15" fill="rgb(240,164,32)"/><text x="81.2151%" y="335.50"></text></g><g><title>__local_bh_enable_ip (5 samples, 0.34%)</title><rect x="81.1662%" y="309" width="0.3351%" height="15" fill="rgb(232,46,7)"/><text x="81.4162%" y="319.50"></text></g><g><title>do_softirq (5 samples, 0.34%)</title><rect x="81.1662%" y="293" width="0.3351%" height="15" fill="rgb(229,129,53)"/><text x="81.4162%" y="303.50"></text></g><g><title>do_softirq_own_stack (5 samples, 0.34%)</title><rect x="81.1662%" y="277" width="0.3351%" height="15" fill="rgb(234,188,29)"/><text x="81.4162%" y="287.50"></text></g><g><title>__do_softirq (5 samples, 0.34%)</title><rect x="81.1662%" y="261" width="0.3351%" height="15" fill="rgb(246,141,4)"/><text x="81.4162%" y="271.50"></text></g><g><title>net_rx_action (5 samples, 0.34%)</title><rect x="81.1662%" y="245" width="0.3351%" height="15" fill="rgb(229,23,39)"/><text x="81.4162%" y="255.50"></text></g><g><title>process_backlog (5 samples, 0.34%)</title><rect x="81.1662%" y="229" width="0.3351%" height="15" fill="rgb(206,12,3)"/><text x="81.4162%" y="239.50"></text></g><g><title>__netif_receive_skb_one_core (5 samples, 0.34%)</title><rect x="81.1662%" y="213" width="0.3351%" height="15" fill="rgb(252,226,20)"/><text x="81.4162%" y="223.50"></text></g><g><title>ip_rcv (5 samples, 0.34%)</title><rect x="81.1662%" y="197" width="0.3351%" height="15" fill="rgb(216,123,35)"/><text x="81.4162%" y="207.50"></text></g><g><title>ip_local_deliver (5 samples, 0.34%)</title><rect x="81.1662%" y="181" width="0.3351%" height="15" fill="rgb(212,68,40)"/><text x="81.4162%" y="191.50"></text></g><g><title>ip_local_deliver_finish (5 samples, 0.34%)</title><rect x="81.1662%" y="165" width="0.3351%" height="15" fill="rgb(254,125,32)"/><text x="81.4162%" y="175.50"></text></g><g><title>ip_protocol_deliver_rcu (5 samples, 0.34%)</title><rect x="81.1662%" y="149" width="0.3351%" height="15" fill="rgb(253,97,22)"/><text x="81.4162%" y="159.50"></text></g><g><title>tcp_v4_rcv (5 samples, 0.34%)</title><rect x="81.1662%" y="133" width="0.3351%" height="15" fill="rgb(241,101,14)"/><text x="81.4162%" y="143.50"></text></g><g><title>tcp_v4_do_rcv (5 samples, 0.34%)</title><rect x="81.1662%" y="117" width="0.3351%" height="15" fill="rgb(238,103,29)"/><text x="81.4162%" y="127.50"></text></g><g><title>tcp_rcv_established (5 samples, 0.34%)</title><rect x="81.1662%" y="101" width="0.3351%" height="15" fill="rgb(233,195,47)"/><text x="81.4162%" y="111.50"></text></g><g><title>sock_def_readable (5 samples, 0.34%)</title><rect x="81.1662%" y="85" width="0.3351%" height="15" fill="rgb(246,218,30)"/><text x="81.4162%" y="95.50"></text></g><g><title>__wake_up_common_lock (5 samples, 0.34%)</title><rect x="81.1662%" y="69" width="0.3351%" height="15" fill="rgb(219,145,47)"/><text x="81.4162%" y="79.50"></text></g><g><title>__wake_up_common (5 samples, 0.34%)</title><rect x="81.1662%" y="53" width="0.3351%" height="15" fill="rgb(243,12,26)"/><text x="81.4162%" y="63.50"></text></g><g><title>try_to_wake_up (4 samples, 0.27%)</title><rect x="81.2332%" y="37" width="0.2681%" height="15" fill="rgb(214,87,16)"/><text x="81.4832%" y="47.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (115 samples, 7.71%)</title><rect x="73.8606%" y="597" width="7.7078%" height="15" fill="rgb(208,99,42)"/><text x="74.1106%" y="607.50">msql_srv::M..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (12 samples, 0.80%)</title><rect x="80.7641%" y="581" width="0.8043%" height="15" fill="rgb(253,99,2)"/><text x="81.0141%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (11 samples, 0.74%)</title><rect x="80.8311%" y="565" width="0.7373%" height="15" fill="rgb(220,168,23)"/><text x="81.0811%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::write (11 samples, 0.74%)</title><rect x="80.8311%" y="549" width="0.7373%" height="15" fill="rgb(242,38,24)"/><text x="81.0811%" y="559.50"></text></g><g><title>__libc_send (11 samples, 0.74%)</title><rect x="80.8311%" y="533" width="0.7373%" height="15" fill="rgb(225,182,9)"/><text x="81.0811%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.74%)</title><rect x="80.8311%" y="517" width="0.7373%" height="15" fill="rgb(243,178,37)"/><text x="81.0811%" y="527.50"></text></g><g><title>do_syscall_64 (11 samples, 0.74%)</title><rect x="80.8311%" y="501" width="0.7373%" height="15" fill="rgb(232,139,19)"/><text x="81.0811%" y="511.50"></text></g><g><title>__x64_sys_sendto (11 samples, 0.74%)</title><rect x="80.8311%" y="485" width="0.7373%" height="15" fill="rgb(225,201,24)"/><text x="81.0811%" y="495.50"></text></g><g><title>__sys_sendto (11 samples, 0.74%)</title><rect x="80.8311%" y="469" width="0.7373%" height="15" fill="rgb(221,47,46)"/><text x="81.0811%" y="479.50"></text></g><g><title>sock_sendmsg (10 samples, 0.67%)</title><rect x="80.8981%" y="453" width="0.6702%" height="15" fill="rgb(249,23,13)"/><text x="81.1481%" y="463.50"></text></g><g><title>tcp_sendmsg (10 samples, 0.67%)</title><rect x="80.8981%" y="437" width="0.6702%" height="15" fill="rgb(219,9,5)"/><text x="81.1481%" y="447.50"></text></g><g><title>tcp_sendmsg_locked (10 samples, 0.67%)</title><rect x="80.8981%" y="421" width="0.6702%" height="15" fill="rgb(254,171,16)"/><text x="81.1481%" y="431.50"></text></g><g><title>__GI___clone (116 samples, 7.77%)</title><rect x="73.8606%" y="725" width="7.7748%" height="15" fill="rgb(230,171,20)"/><text x="74.1106%" y="735.50">__GI___clone</text></g><g><title>start_thread (116 samples, 7.77%)</title><rect x="73.8606%" y="709" width="7.7748%" height="15" fill="rgb(210,71,41)"/><text x="74.1106%" y="719.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (116 samples, 7.77%)</title><rect x="73.8606%" y="693" width="7.7748%" height="15" fill="rgb(206,173,20)"/><text x="74.1106%" y="703.50">std::sys::u..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (116 samples, 7.77%)</title><rect x="73.8606%" y="677" width="7.7748%" height="15" fill="rgb(233,88,34)"/><text x="74.1106%" y="687.50">&lt;alloc::box..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (116 samples, 7.77%)</title><rect x="73.8606%" y="661" width="7.7748%" height="15" fill="rgb(223,209,46)"/><text x="74.1106%" y="671.50">&lt;alloc::box..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (116 samples, 7.77%)</title><rect x="73.8606%" y="645" width="7.7748%" height="15" fill="rgb(250,43,18)"/><text x="74.1106%" y="655.50">core::ops::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (116 samples, 7.77%)</title><rect x="73.8606%" y="629" width="7.7748%" height="15" fill="rgb(208,13,10)"/><text x="74.1106%" y="639.50">std::sys_co..</text></g><g><title>decor_mem::Shim::run_on_tcp (116 samples, 7.77%)</title><rect x="73.8606%" y="613" width="7.7748%" height="15" fill="rgb(212,200,36)"/><text x="74.1106%" y="623.50">decor_mem::..</text></g><g><title>_int_free (9 samples, 0.60%)</title><rect x="81.6354%" y="725" width="0.6032%" height="15" fill="rgb(225,90,30)"/><text x="81.8854%" y="735.50"></text></g><g><title>__GI___openat (7 samples, 0.47%)</title><rect x="82.4397%" y="469" width="0.4692%" height="15" fill="rgb(236,182,39)"/><text x="82.6897%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (7 samples, 0.47%)</title><rect x="82.4397%" y="453" width="0.4692%" height="15" fill="rgb(212,144,35)"/><text x="82.6897%" y="463.50"></text></g><g><title>do_syscall_64 (7 samples, 0.47%)</title><rect x="82.4397%" y="437" width="0.4692%" height="15" fill="rgb(228,63,44)"/><text x="82.6897%" y="447.50"></text></g><g><title>__x64_sys_openat (7 samples, 0.47%)</title><rect x="82.4397%" y="421" width="0.4692%" height="15" fill="rgb(228,109,6)"/><text x="82.6897%" y="431.50"></text></g><g><title>do_sys_openat2 (7 samples, 0.47%)</title><rect x="82.4397%" y="405" width="0.4692%" height="15" fill="rgb(238,117,24)"/><text x="82.6897%" y="415.50"></text></g><g><title>do_filp_open (7 samples, 0.47%)</title><rect x="82.4397%" y="389" width="0.4692%" height="15" fill="rgb(242,26,26)"/><text x="82.6897%" y="399.50"></text></g><g><title>path_openat (7 samples, 0.47%)</title><rect x="82.4397%" y="373" width="0.4692%" height="15" fill="rgb(221,92,48)"/><text x="82.6897%" y="383.50"></text></g><g><title>do_dentry_open (7 samples, 0.47%)</title><rect x="82.4397%" y="357" width="0.4692%" height="15" fill="rgb(209,209,32)"/><text x="82.6897%" y="367.50"></text></g><g><title>cpuinfo_open (7 samples, 0.47%)</title><rect x="82.4397%" y="341" width="0.4692%" height="15" fill="rgb(221,70,22)"/><text x="82.6897%" y="351.50"></text></g><g><title>msleep (7 samples, 0.47%)</title><rect x="82.4397%" y="325" width="0.4692%" height="15" fill="rgb(248,145,5)"/><text x="82.6897%" y="335.50"></text></g><g><title>schedule_timeout (7 samples, 0.47%)</title><rect x="82.4397%" y="309" width="0.4692%" height="15" fill="rgb(226,116,26)"/><text x="82.6897%" y="319.50"></text></g><g><title>schedule (7 samples, 0.47%)</title><rect x="82.4397%" y="293" width="0.4692%" height="15" fill="rgb(244,5,17)"/><text x="82.6897%" y="303.50"></text></g><g><title>__schedule (7 samples, 0.47%)</title><rect x="82.4397%" y="277" width="0.4692%" height="15" fill="rgb(252,159,33)"/><text x="82.6897%" y="287.50"></text></g><g><title>finish_task_switch (7 samples, 0.47%)</title><rect x="82.4397%" y="261" width="0.4692%" height="15" fill="rgb(206,71,0)"/><text x="82.6897%" y="271.50"></text></g><g><title>__perf_event_task_sched_in (6 samples, 0.40%)</title><rect x="82.5067%" y="245" width="0.4021%" height="15" fill="rgb(233,118,54)"/><text x="82.7567%" y="255.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (6 samples, 0.40%)</title><rect x="82.5067%" y="229" width="0.4021%" height="15" fill="rgb(234,83,48)"/><text x="82.7567%" y="239.50"></text></g><g><title>native_write_msr (6 samples, 0.40%)</title><rect x="82.5067%" y="213" width="0.4021%" height="15" fill="rgb(228,3,54)"/><text x="82.7567%" y="223.50"></text></g><g><title>cpu_stop_queue_work (228 samples, 15.28%)</title><rect x="82.9088%" y="341" width="15.2815%" height="15" fill="rgb(226,155,13)"/><text x="83.1588%" y="351.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (228 samples, 15.28%)</title><rect x="82.9088%" y="325" width="15.2815%" height="15" fill="rgb(241,28,37)"/><text x="83.1588%" y="335.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (228 samples, 15.28%)</title><rect x="82.9088%" y="309" width="15.2815%" height="15" fill="rgb(233,93,10)"/><text x="83.1588%" y="319.50">preempt_schedule_common</text></g><g><title>__schedule (228 samples, 15.28%)</title><rect x="82.9088%" y="293" width="15.2815%" height="15" fill="rgb(225,113,19)"/><text x="83.1588%" y="303.50">__schedule</text></g><g><title>finish_task_switch (228 samples, 15.28%)</title><rect x="82.9088%" y="277" width="15.2815%" height="15" fill="rgb(241,2,18)"/><text x="83.1588%" y="287.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (228 samples, 15.28%)</title><rect x="82.9088%" y="261" width="15.2815%" height="15" fill="rgb(228,207,21)"/><text x="83.1588%" y="271.50">__perf_event_task_sched..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (228 samples, 15.28%)</title><rect x="82.9088%" y="245" width="15.2815%" height="15" fill="rgb(213,211,35)"/><text x="83.1588%" y="255.50">__intel_pmu_enable_all...</text></g><g><title>native_write_msr (228 samples, 15.28%)</title><rect x="82.9088%" y="229" width="15.2815%" height="15" fill="rgb(209,83,10)"/><text x="83.1588%" y="239.50">native_write_msr</text></g><g><title>__set_cpus_allowed_ptr (229 samples, 15.35%)</title><rect x="82.9088%" y="373" width="15.3485%" height="15" fill="rgb(209,164,1)"/><text x="83.1588%" y="383.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (229 samples, 15.35%)</title><rect x="82.9088%" y="357" width="15.3485%" height="15" fill="rgb(213,184,43)"/><text x="83.1588%" y="367.50">stop_one_cpu</text></g><g><title>__x64_sys_sched_setaffinity (230 samples, 15.42%)</title><rect x="82.9088%" y="405" width="15.4155%" height="15" fill="rgb(231,61,34)"/><text x="83.1588%" y="415.50">__x64_sys_sched_setaffin..</text></g><g><title>sched_setaffinity (230 samples, 15.42%)</title><rect x="82.9088%" y="389" width="15.4155%" height="15" fill="rgb(235,75,3)"/><text x="83.1588%" y="399.50">sched_setaffinity</text></g><g><title>do_syscall_64 (231 samples, 15.48%)</title><rect x="82.9088%" y="421" width="15.4826%" height="15" fill="rgb(220,106,47)"/><text x="83.1588%" y="431.50">do_syscall_64</text></g><g><title>entry_SYSCALL_64 (232 samples, 15.55%)</title><rect x="82.9088%" y="437" width="15.5496%" height="15" fill="rgb(210,196,33)"/><text x="83.1588%" y="447.50">entry_SYSCALL_64</text></g><g><title>__GI___sched_setaffinity_new (233 samples, 15.62%)</title><rect x="82.9088%" y="453" width="15.6166%" height="15" fill="rgb(229,154,42)"/><text x="83.1588%" y="463.50">__GI___sched_setaffinity..</text></g><g><title>__libc_start_main (244 samples, 16.35%)</title><rect x="82.2386%" y="709" width="16.3539%" height="15" fill="rgb(228,114,26)"/><text x="82.4886%" y="719.50">__libc_start_main</text></g><g><title>main (244 samples, 16.35%)</title><rect x="82.2386%" y="693" width="16.3539%" height="15" fill="rgb(208,144,1)"/><text x="82.4886%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (244 samples, 16.35%)</title><rect x="82.2386%" y="677" width="16.3539%" height="15" fill="rgb(239,112,37)"/><text x="82.4886%" y="687.50">std::rt::lang_start_inter..</text></g><g><title>std::panic::catch_unwind (244 samples, 16.35%)</title><rect x="82.2386%" y="661" width="16.3539%" height="15" fill="rgb(210,96,50)"/><text x="82.4886%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (244 samples, 16.35%)</title><rect x="82.2386%" y="645" width="16.3539%" height="15" fill="rgb(222,178,2)"/><text x="82.4886%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (244 samples, 16.35%)</title><rect x="82.2386%" y="629" width="16.3539%" height="15" fill="rgb(226,74,18)"/><text x="82.4886%" y="639.50">std::panicking::try::do_c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (244 samples, 16.35%)</title><rect x="82.2386%" y="613" width="16.3539%" height="15" fill="rgb(225,67,54)"/><text x="82.4886%" y="623.50">core::ops::function::impl..</text></g><g><title>std::rt::lang_start::_{{closure}} (244 samples, 16.35%)</title><rect x="82.2386%" y="597" width="16.3539%" height="15" fill="rgb(251,92,32)"/><text x="82.4886%" y="607.50">std::rt::lang_start::_{{c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (244 samples, 16.35%)</title><rect x="82.2386%" y="581" width="16.3539%" height="15" fill="rgb(228,149,22)"/><text x="82.4886%" y="591.50">std::sys_common::backtrac..</text></g><g><title>lobsters_microbenchmarks::main (244 samples, 16.35%)</title><rect x="82.2386%" y="565" width="16.3539%" height="15" fill="rgb(243,54,13)"/><text x="82.4886%" y="575.50">lobsters_microbenchmarks:..</text></g><g><title>hwloc::Topology::new (242 samples, 16.22%)</title><rect x="82.3727%" y="549" width="16.2198%" height="15" fill="rgb(243,180,28)"/><text x="82.6227%" y="559.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (242 samples, 16.22%)</title><rect x="82.3727%" y="533" width="16.2198%" height="15" fill="rgb(208,167,24)"/><text x="82.6227%" y="543.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 16.22%)</title><rect x="82.3727%" y="517" width="16.2198%" height="15" fill="rgb(245,73,45)"/><text x="82.6227%" y="527.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 16.22%)</title><rect x="82.3727%" y="501" width="16.2198%" height="15" fill="rgb(237,203,48)"/><text x="82.6227%" y="511.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 16.22%)</title><rect x="82.3727%" y="485" width="16.2198%" height="15" fill="rgb(211,197,16)"/><text x="82.6227%" y="495.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (234 samples, 15.68%)</title><rect x="82.9088%" y="469" width="15.6836%" height="15" fill="rgb(243,99,51)"/><text x="83.1588%" y="479.50">hwloc_linux_set_tid_cpub..</text></g><g><title>_start (245 samples, 16.42%)</title><rect x="82.2386%" y="725" width="16.4209%" height="15" fill="rgb(215,123,29)"/><text x="82.4886%" y="735.50">_start</text></g><g><title>core::ptr::drop_in_place (3 samples, 0.20%)</title><rect x="98.7265%" y="725" width="0.2011%" height="15" fill="rgb(239,186,37)"/><text x="98.9765%" y="735.50"></text></g><g><title>[vmlinux] (3 samples, 0.20%)</title><rect x="98.9276%" y="693" width="0.2011%" height="15" fill="rgb(252,136,39)"/><text x="99.1776%" y="703.50"></text></g><g><title>do_group_exit (3 samples, 0.20%)</title><rect x="98.9276%" y="677" width="0.2011%" height="15" fill="rgb(223,213,32)"/><text x="99.1776%" y="687.50"></text></g><g><title>do_exit (3 samples, 0.20%)</title><rect x="98.9276%" y="661" width="0.2011%" height="15" fill="rgb(233,115,5)"/><text x="99.1776%" y="671.50"></text></g><g><title>mmput (3 samples, 0.20%)</title><rect x="98.9276%" y="645" width="0.2011%" height="15" fill="rgb(207,226,44)"/><text x="99.1776%" y="655.50"></text></g><g><title>exit_mmap (3 samples, 0.20%)</title><rect x="98.9276%" y="629" width="0.2011%" height="15" fill="rgb(208,126,0)"/><text x="99.1776%" y="639.50"></text></g><g><title>unmap_vmas (2 samples, 0.13%)</title><rect x="98.9946%" y="613" width="0.1340%" height="15" fill="rgb(244,66,21)"/><text x="99.2446%" y="623.50"></text></g><g><title>unmap_page_range (2 samples, 0.13%)</title><rect x="98.9946%" y="597" width="0.1340%" height="15" fill="rgb(222,97,12)"/><text x="99.2446%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (4 samples, 0.27%)</title><rect x="98.9276%" y="725" width="0.2681%" height="15" fill="rgb(219,213,19)"/><text x="99.1776%" y="735.50"></text></g><g><title>do_syscall_64 (4 samples, 0.27%)</title><rect x="98.9276%" y="709" width="0.2681%" height="15" fill="rgb(252,169,30)"/><text x="99.1776%" y="719.50"></text></g><g><title>malloc_consolidate (2 samples, 0.13%)</title><rect x="99.1957%" y="725" width="0.1340%" height="15" fill="rgb(206,32,51)"/><text x="99.4457%" y="735.50"></text></g><g><title>lobsters-microb (1,486 samples, 99.60%)</title><rect x="0.0000%" y="741" width="99.5979%" height="15" fill="rgb(250,172,42)"/><text x="0.2500%" y="751.50">lobsters-microb</text></g><g><title>page_fault (3 samples, 0.20%)</title><rect x="99.3968%" y="725" width="0.2011%" height="15" fill="rgb(209,34,43)"/><text x="99.6468%" y="735.50"></text></g><g><title>all (1,492 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(223,11,35)"/><text x="0.2500%" y="767.50"></text></g><g><title>perf (6 samples, 0.40%)</title><rect x="99.5979%" y="741" width="0.4021%" height="15" fill="rgb(251,219,26)"/><text x="99.8479%" y="751.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.40%)</title><rect x="99.5979%" y="725" width="0.4021%" height="15" fill="rgb(231,119,3)"/><text x="99.8479%" y="735.50"></text></g><g><title>do_syscall_64 (6 samples, 0.40%)</title><rect x="99.5979%" y="709" width="0.4021%" height="15" fill="rgb(216,97,11)"/><text x="99.8479%" y="719.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.40%)</title><rect x="99.5979%" y="693" width="0.4021%" height="15" fill="rgb(223,59,9)"/><text x="99.8479%" y="703.50"></text></g><g><title>do_execve (6 samples, 0.40%)</title><rect x="99.5979%" y="677" width="0.4021%" height="15" fill="rgb(233,93,31)"/><text x="99.8479%" y="687.50"></text></g><g><title>__do_execve_file (6 samples, 0.40%)</title><rect x="99.5979%" y="661" width="0.4021%" height="15" fill="rgb(239,81,33)"/><text x="99.8479%" y="671.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.40%)</title><rect x="99.5979%" y="645" width="0.4021%" height="15" fill="rgb(213,120,34)"/><text x="99.8479%" y="655.50"></text></g><g><title>load_elf_binary (6 samples, 0.40%)</title><rect x="99.5979%" y="629" width="0.4021%" height="15" fill="rgb(243,49,53)"/><text x="99.8479%" y="639.50"></text></g><g><title>setup_new_exec (6 samples, 0.40%)</title><rect x="99.5979%" y="613" width="0.4021%" height="15" fill="rgb(247,216,33)"/><text x="99.8479%" y="623.50"></text></g><g><title>perf_event_exec (6 samples, 0.40%)</title><rect x="99.5979%" y="597" width="0.4021%" height="15" fill="rgb(226,26,14)"/><text x="99.8479%" y="607.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.34%)</title><rect x="99.6649%" y="581" width="0.3351%" height="15" fill="rgb(215,49,53)"/><text x="99.9149%" y="591.50"></text></g><g><title>native_write_msr (5 samples, 0.34%)</title><rect x="99.6649%" y="565" width="0.3351%" height="15" fill="rgb(245,162,40)"/><text x="99.9149%" y="575.50"></text></g></svg></svg>