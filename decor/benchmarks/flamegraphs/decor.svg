<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1045.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1045.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (16 samples, 0.19%)</title><rect x="0.0937%" y="981" width="0.1874%" height="15" fill="rgb(227,0,7)"/><text x="0.3437%" y="991.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.12%)</title><rect x="0.2927%" y="965" width="0.1171%" height="15" fill="rgb(217,0,24)"/><text x="0.5427%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (15 samples, 0.18%)</title><rect x="1.1827%" y="901" width="0.1756%" height="15" fill="rgb(221,193,54)"/><text x="1.4327%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15 samples, 0.18%)</title><rect x="1.1827%" y="885" width="0.1756%" height="15" fill="rgb(248,212,6)"/><text x="1.4327%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (15 samples, 0.18%)</title><rect x="1.1827%" y="869" width="0.1756%" height="15" fill="rgb(208,68,35)"/><text x="1.4327%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.18%)</title><rect x="1.1827%" y="853" width="0.1756%" height="15" fill="rgb(232,128,0)"/><text x="1.4327%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (100 samples, 1.17%)</title><rect x="0.4215%" y="965" width="1.1710%" height="15" fill="rgb(207,160,47)"/><text x="0.6715%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (35 samples, 0.41%)</title><rect x="1.1827%" y="949" width="0.4098%" height="15" fill="rgb(228,23,34)"/><text x="1.4327%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 0.41%)</title><rect x="1.1827%" y="933" width="0.4098%" height="15" fill="rgb(218,30,26)"/><text x="1.4327%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.41%)</title><rect x="1.1827%" y="917" width="0.4098%" height="15" fill="rgb(220,122,19)"/><text x="1.4327%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.23%)</title><rect x="1.3583%" y="901" width="0.2342%" height="15" fill="rgb(250,228,42)"/><text x="1.6083%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (20 samples, 0.23%)</title><rect x="1.3583%" y="885" width="0.2342%" height="15" fill="rgb(240,193,28)"/><text x="1.6083%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.23%)</title><rect x="1.3583%" y="869" width="0.2342%" height="15" fill="rgb(216,20,37)"/><text x="1.6083%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.23%)</title><rect x="1.3583%" y="853" width="0.2342%" height="15" fill="rgb(206,188,39)"/><text x="1.6083%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (20 samples, 0.23%)</title><rect x="1.3583%" y="837" width="0.2342%" height="15" fill="rgb(217,207,13)"/><text x="1.6083%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.23%)</title><rect x="1.3583%" y="821" width="0.2342%" height="15" fill="rgb(231,73,38)"/><text x="1.6083%" y="831.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.23%)</title><rect x="1.3583%" y="805" width="0.2342%" height="15" fill="rgb(225,20,46)"/><text x="1.6083%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (25 samples, 0.29%)</title><rect x="1.6276%" y="965" width="0.2927%" height="15" fill="rgb(210,31,41)"/><text x="1.8776%" y="975.50"></text></g><g><title>__GI___libc_free (16 samples, 0.19%)</title><rect x="2.0843%" y="965" width="0.1874%" height="15" fill="rgb(221,200,47)"/><text x="2.3343%" y="975.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.52%)</title><rect x="2.2717%" y="965" width="0.5152%" height="15" fill="rgb(226,26,5)"/><text x="2.5217%" y="975.50"></text></g><g><title>_int_free (52 samples, 0.61%)</title><rect x="2.9742%" y="965" width="0.6089%" height="15" fill="rgb(249,33,26)"/><text x="3.2242%" y="975.50"></text></g><g><title>_int_malloc (51 samples, 0.60%)</title><rect x="3.5831%" y="965" width="0.5972%" height="15" fill="rgb(235,183,28)"/><text x="3.8331%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.16%)</title><rect x="4.2037%" y="965" width="0.1639%" height="15" fill="rgb(221,5,38)"/><text x="4.4537%" y="975.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.11%)</title><rect x="4.5433%" y="965" width="0.1054%" height="15" fill="rgb(247,18,42)"/><text x="4.7933%" y="975.50"></text></g><g><title>[anon] (441 samples, 5.16%)</title><rect x="0.2927%" y="981" width="5.1639%" height="15" fill="rgb(241,131,45)"/><text x="0.5427%" y="991.50">[anon]</text></g><g><title>unlink_chunk (25 samples, 0.29%)</title><rect x="5.1639%" y="965" width="0.2927%" height="15" fill="rgb(249,31,29)"/><text x="5.4139%" y="975.50"></text></g><g><title>_int_free (17 samples, 0.20%)</title><rect x="5.5621%" y="965" width="0.1991%" height="15" fill="rgb(225,111,53)"/><text x="5.8121%" y="975.50"></text></g><g><title>[lobsters-microbenchmarks] (38 samples, 0.44%)</title><rect x="5.4684%" y="981" width="0.4450%" height="15" fill="rgb(238,160,17)"/><text x="5.7184%" y="991.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.13%)</title><rect x="5.9953%" y="965" width="0.1288%" height="15" fill="rgb(214,148,48)"/><text x="6.2453%" y="975.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (15 samples, 0.18%)</title><rect x="6.1593%" y="853" width="0.1756%" height="15" fill="rgb(232,36,49)"/><text x="6.4093%" y="863.50"></text></g><g><title>&lt;std::sys::unix::ext::net::UnixStream as std::io::Read&gt;::read (13 samples, 0.15%)</title><rect x="6.1827%" y="837" width="0.1522%" height="15" fill="rgb(209,103,24)"/><text x="6.4327%" y="847.50"></text></g><g><title>&lt;&amp;std::sys::unix::ext::net::UnixStream as std::io::Read&gt;::read (13 samples, 0.15%)</title><rect x="6.1827%" y="821" width="0.1522%" height="15" fill="rgb(229,88,8)"/><text x="6.4327%" y="831.50"></text></g><g><title>std::sys::unix::net::Socket::read (13 samples, 0.15%)</title><rect x="6.1827%" y="805" width="0.1522%" height="15" fill="rgb(213,181,19)"/><text x="6.4327%" y="815.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (13 samples, 0.15%)</title><rect x="6.1827%" y="789" width="0.1522%" height="15" fill="rgb(254,191,54)"/><text x="6.4327%" y="799.50"></text></g><g><title>__libc_recv (13 samples, 0.15%)</title><rect x="6.1827%" y="773" width="0.1522%" height="15" fill="rgb(241,83,37)"/><text x="6.4327%" y="783.50"></text></g><g><title>__libc_recv (13 samples, 0.15%)</title><rect x="6.1827%" y="757" width="0.1522%" height="15" fill="rgb(233,36,39)"/><text x="6.4327%" y="767.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="6.1827%" y="741" width="0.1522%" height="15" fill="rgb(226,3,54)"/><text x="6.4327%" y="751.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="6.1944%" y="725" width="0.1405%" height="15" fill="rgb(245,192,40)"/><text x="6.4444%" y="735.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="6.1944%" y="709" width="0.1405%" height="15" fill="rgb(238,167,29)"/><text x="6.4444%" y="719.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="6.1944%" y="693" width="0.1405%" height="15" fill="rgb(232,182,51)"/><text x="6.4444%" y="703.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="6.2061%" y="677" width="0.1288%" height="15" fill="rgb(231,60,39)"/><text x="6.4561%" y="687.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="6.2178%" y="661" width="0.1171%" height="15" fill="rgb(208,69,12)"/><text x="6.4678%" y="671.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="6.2178%" y="645" width="0.1171%" height="15" fill="rgb(235,93,37)"/><text x="6.4678%" y="655.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="6.2295%" y="629" width="0.1054%" height="15" fill="rgb(213,116,39)"/><text x="6.4795%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.19%)</title><rect x="6.1593%" y="869" width="0.1874%" height="15" fill="rgb(222,207,29)"/><text x="6.4093%" y="879.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (18 samples, 0.21%)</title><rect x="6.1475%" y="933" width="0.2108%" height="15" fill="rgb(206,96,30)"/><text x="6.3975%" y="943.50"></text></g><g><title>mysql::conn::Conn::_query (18 samples, 0.21%)</title><rect x="6.1475%" y="917" width="0.2108%" height="15" fill="rgb(218,138,4)"/><text x="6.3975%" y="927.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (18 samples, 0.21%)</title><rect x="6.1475%" y="901" width="0.2108%" height="15" fill="rgb(250,191,14)"/><text x="6.3975%" y="911.50"></text></g><g><title>mysql::conn::Conn::read_packet (18 samples, 0.21%)</title><rect x="6.1475%" y="885" width="0.2108%" height="15" fill="rgb(239,60,40)"/><text x="6.3975%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="6.3583%" y="885" width="0.1054%" height="15" fill="rgb(206,27,48)"/><text x="6.6083%" y="895.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="6.3583%" y="933" width="0.1171%" height="15" fill="rgb(225,35,8)"/><text x="6.6083%" y="943.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="6.3583%" y="917" width="0.1171%" height="15" fill="rgb(250,213,24)"/><text x="6.6083%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="6.3583%" y="901" width="0.1171%" height="15" fill="rgb(247,123,22)"/><text x="6.6083%" y="911.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (35 samples, 0.41%)</title><rect x="6.4988%" y="853" width="0.4098%" height="15" fill="rgb(231,138,38)"/><text x="6.7488%" y="863.50"></text></g><g><title>&lt;std::sys::unix::ext::net::UnixStream as std::io::Read&gt;::read (34 samples, 0.40%)</title><rect x="6.5105%" y="837" width="0.3981%" height="15" fill="rgb(231,145,46)"/><text x="6.7605%" y="847.50"></text></g><g><title>&lt;&amp;std::sys::unix::ext::net::UnixStream as std::io::Read&gt;::read (34 samples, 0.40%)</title><rect x="6.5105%" y="821" width="0.3981%" height="15" fill="rgb(251,118,11)"/><text x="6.7605%" y="831.50"></text></g><g><title>std::sys::unix::net::Socket::read (34 samples, 0.40%)</title><rect x="6.5105%" y="805" width="0.3981%" height="15" fill="rgb(217,147,25)"/><text x="6.7605%" y="815.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (34 samples, 0.40%)</title><rect x="6.5105%" y="789" width="0.3981%" height="15" fill="rgb(247,81,37)"/><text x="6.7605%" y="799.50"></text></g><g><title>__libc_recv (34 samples, 0.40%)</title><rect x="6.5105%" y="773" width="0.3981%" height="15" fill="rgb(209,12,38)"/><text x="6.7605%" y="783.50"></text></g><g><title>__libc_recv (34 samples, 0.40%)</title><rect x="6.5105%" y="757" width="0.3981%" height="15" fill="rgb(227,1,9)"/><text x="6.7605%" y="767.50"></text></g><g><title>[unknown] (31 samples, 0.36%)</title><rect x="6.5457%" y="741" width="0.3630%" height="15" fill="rgb(248,47,43)"/><text x="6.7957%" y="751.50"></text></g><g><title>[unknown] (31 samples, 0.36%)</title><rect x="6.5457%" y="725" width="0.3630%" height="15" fill="rgb(221,10,30)"/><text x="6.7957%" y="735.50"></text></g><g><title>[unknown] (28 samples, 0.33%)</title><rect x="6.5808%" y="709" width="0.3279%" height="15" fill="rgb(210,229,1)"/><text x="6.8308%" y="719.50"></text></g><g><title>[unknown] (28 samples, 0.33%)</title><rect x="6.5808%" y="693" width="0.3279%" height="15" fill="rgb(222,148,37)"/><text x="6.8308%" y="703.50"></text></g><g><title>[unknown] (27 samples, 0.32%)</title><rect x="6.5925%" y="677" width="0.3162%" height="15" fill="rgb(234,67,33)"/><text x="6.8425%" y="687.50"></text></g><g><title>[unknown] (27 samples, 0.32%)</title><rect x="6.5925%" y="661" width="0.3162%" height="15" fill="rgb(247,98,35)"/><text x="6.8425%" y="671.50"></text></g><g><title>[unknown] (26 samples, 0.30%)</title><rect x="6.6042%" y="645" width="0.3044%" height="15" fill="rgb(247,138,52)"/><text x="6.8542%" y="655.50"></text></g><g><title>[unknown] (22 samples, 0.26%)</title><rect x="6.6511%" y="629" width="0.2576%" height="15" fill="rgb(213,79,30)"/><text x="6.9011%" y="639.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="6.6745%" y="613" width="0.2342%" height="15" fill="rgb(246,177,23)"/><text x="6.9245%" y="623.50"></text></g><g><title>[unknown] (19 samples, 0.22%)</title><rect x="6.6862%" y="597" width="0.2225%" height="15" fill="rgb(230,62,27)"/><text x="6.9362%" y="607.50"></text></g><g><title>[unknown] (17 samples, 0.20%)</title><rect x="6.7096%" y="581" width="0.1991%" height="15" fill="rgb(216,154,8)"/><text x="6.9596%" y="591.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="6.7564%" y="565" width="0.1522%" height="15" fill="rgb(244,35,45)"/><text x="7.0064%" y="575.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.48%)</title><rect x="6.4871%" y="869" width="0.4801%" height="15" fill="rgb(251,115,12)"/><text x="6.7371%" y="879.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (43 samples, 0.50%)</title><rect x="6.4754%" y="933" width="0.5035%" height="15" fill="rgb(240,54,50)"/><text x="6.7254%" y="943.50"></text></g><g><title>mysql::conn::Conn::_query (43 samples, 0.50%)</title><rect x="6.4754%" y="917" width="0.5035%" height="15" fill="rgb(233,84,52)"/><text x="6.7254%" y="927.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (43 samples, 0.50%)</title><rect x="6.4754%" y="901" width="0.5035%" height="15" fill="rgb(207,117,47)"/><text x="6.7254%" y="911.50"></text></g><g><title>mysql::conn::Conn::read_packet (42 samples, 0.49%)</title><rect x="6.4871%" y="885" width="0.4918%" height="15" fill="rgb(249,43,39)"/><text x="6.7371%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.26%)</title><rect x="7.0609%" y="901" width="0.2576%" height="15" fill="rgb(209,38,44)"/><text x="7.3109%" y="911.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.26%)</title><rect x="7.0609%" y="885" width="0.2576%" height="15" fill="rgb(236,212,23)"/><text x="7.3109%" y="895.50"></text></g><g><title>_int_realloc (22 samples, 0.26%)</title><rect x="7.0609%" y="869" width="0.2576%" height="15" fill="rgb(242,79,21)"/><text x="7.3109%" y="879.50"></text></g><g><title>_int_malloc (22 samples, 0.26%)</title><rect x="7.0609%" y="853" width="0.2576%" height="15" fill="rgb(211,96,35)"/><text x="7.3109%" y="863.50"></text></g><g><title>_int_free (34 samples, 0.40%)</title><rect x="7.5293%" y="885" width="0.3981%" height="15" fill="rgb(253,215,40)"/><text x="7.7793%" y="895.50"></text></g><g><title>malloc_consolidate (11 samples, 0.13%)</title><rect x="7.7986%" y="869" width="0.1288%" height="15" fill="rgb(211,81,21)"/><text x="8.0486%" y="879.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (17 samples, 0.20%)</title><rect x="8.0445%" y="869" width="0.1991%" height="15" fill="rgb(208,190,38)"/><text x="8.2945%" y="879.50"></text></g><g><title>decor_mem::select::get_value_for_rows (11 samples, 0.13%)</title><rect x="8.1148%" y="853" width="0.1288%" height="15" fill="rgb(235,213,38)"/><text x="8.3648%" y="863.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (34 samples, 0.40%)</title><rect x="8.0211%" y="885" width="0.3981%" height="15" fill="rgb(237,122,38)"/><text x="8.2711%" y="895.50"></text></g><g><title>decor_mem::select::get_value_for_rows (15 samples, 0.18%)</title><rect x="8.2436%" y="869" width="0.1756%" height="15" fill="rgb(244,218,35)"/><text x="8.4936%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (19 samples, 0.22%)</title><rect x="8.9461%" y="805" width="0.2225%" height="15" fill="rgb(240,68,47)"/><text x="9.1961%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (19 samples, 0.22%)</title><rect x="8.9461%" y="789" width="0.2225%" height="15" fill="rgb(210,16,53)"/><text x="9.1961%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (19 samples, 0.22%)</title><rect x="8.9461%" y="773" width="0.2225%" height="15" fill="rgb(235,124,12)"/><text x="9.1961%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.22%)</title><rect x="8.9461%" y="757" width="0.2225%" height="15" fill="rgb(224,169,11)"/><text x="9.1961%" y="767.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.22%)</title><rect x="8.9461%" y="741" width="0.2225%" height="15" fill="rgb(250,166,2)"/><text x="9.1961%" y="751.50"></text></g><g><title>__GI___libc_malloc (76 samples, 0.89%)</title><rect x="9.1686%" y="693" width="0.8899%" height="15" fill="rgb(242,216,29)"/><text x="9.4186%" y="703.50"></text></g><g><title>_int_malloc (30 samples, 0.35%)</title><rect x="9.7073%" y="677" width="0.3513%" height="15" fill="rgb(230,116,27)"/><text x="9.9573%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (98 samples, 1.15%)</title><rect x="8.9227%" y="869" width="1.1475%" height="15" fill="rgb(228,99,48)"/><text x="9.1727%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (96 samples, 1.12%)</title><rect x="8.9461%" y="853" width="1.1241%" height="15" fill="rgb(253,11,6)"/><text x="9.1961%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (96 samples, 1.12%)</title><rect x="8.9461%" y="837" width="1.1241%" height="15" fill="rgb(247,143,39)"/><text x="9.1961%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (96 samples, 1.12%)</title><rect x="8.9461%" y="821" width="1.1241%" height="15" fill="rgb(236,97,10)"/><text x="9.1961%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (77 samples, 0.90%)</title><rect x="9.1686%" y="805" width="0.9016%" height="15" fill="rgb(233,208,19)"/><text x="9.4186%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (77 samples, 0.90%)</title><rect x="9.1686%" y="789" width="0.9016%" height="15" fill="rgb(216,164,2)"/><text x="9.4186%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77 samples, 0.90%)</title><rect x="9.1686%" y="773" width="0.9016%" height="15" fill="rgb(220,129,5)"/><text x="9.4186%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (77 samples, 0.90%)</title><rect x="9.1686%" y="757" width="0.9016%" height="15" fill="rgb(242,17,10)"/><text x="9.4186%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (77 samples, 0.90%)</title><rect x="9.1686%" y="741" width="0.9016%" height="15" fill="rgb(242,107,0)"/><text x="9.4186%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.90%)</title><rect x="9.1686%" y="725" width="0.9016%" height="15" fill="rgb(251,28,31)"/><text x="9.4186%" y="735.50"></text></g><g><title>alloc::alloc::alloc (77 samples, 0.90%)</title><rect x="9.1686%" y="709" width="0.9016%" height="15" fill="rgb(233,223,10)"/><text x="9.4186%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.28%)</title><rect x="10.1054%" y="869" width="0.2810%" height="15" fill="rgb(215,21,27)"/><text x="10.3554%" y="879.50"></text></g><g><title>__GI___libc_realloc (24 samples, 0.28%)</title><rect x="10.1054%" y="853" width="0.2810%" height="15" fill="rgb(232,23,21)"/><text x="10.3554%" y="863.50"></text></g><g><title>_int_realloc (23 samples, 0.27%)</title><rect x="10.1171%" y="837" width="0.2693%" height="15" fill="rgb(244,5,23)"/><text x="10.3671%" y="847.50"></text></g><g><title>_int_malloc (10 samples, 0.12%)</title><rect x="10.2693%" y="821" width="0.1171%" height="15" fill="rgb(226,81,46)"/><text x="10.5193%" y="831.50"></text></g><g><title>core::fmt::write (10 samples, 0.12%)</title><rect x="10.4333%" y="853" width="0.1171%" height="15" fill="rgb(247,70,30)"/><text x="10.6833%" y="863.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (10 samples, 0.12%)</title><rect x="10.4333%" y="837" width="0.1171%" height="15" fill="rgb(212,68,19)"/><text x="10.6833%" y="847.50"></text></g><g><title>decor_mem::select::get_value_for_rows (193 samples, 2.26%)</title><rect x="8.4192%" y="885" width="2.2600%" height="15" fill="rgb(240,187,13)"/><text x="8.6692%" y="895.50">d..</text></g><g><title>decor_mem::select::tablecolumn_matches_col (23 samples, 0.27%)</title><rect x="10.4098%" y="869" width="0.2693%" height="15" fill="rgb(223,113,26)"/><text x="10.6598%" y="879.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (11 samples, 0.13%)</title><rect x="10.5504%" y="853" width="0.1288%" height="15" fill="rgb(206,192,2)"/><text x="10.8004%" y="863.50"></text></g><g><title>alloc::fmt::format (11 samples, 0.13%)</title><rect x="10.5504%" y="837" width="0.1288%" height="15" fill="rgb(241,108,4)"/><text x="10.8004%" y="847.50"></text></g><g><title>core::fmt::Write::write_fmt (11 samples, 0.13%)</title><rect x="10.5504%" y="821" width="0.1288%" height="15" fill="rgb(247,173,49)"/><text x="10.8004%" y="831.50"></text></g><g><title>core::fmt::write (11 samples, 0.13%)</title><rect x="10.5504%" y="805" width="0.1288%" height="15" fill="rgb(224,114,35)"/><text x="10.8004%" y="815.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (11 samples, 0.13%)</title><rect x="10.5504%" y="789" width="0.1288%" height="15" fill="rgb(245,159,27)"/><text x="10.8004%" y="799.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (282 samples, 3.30%)</title><rect x="7.4005%" y="901" width="3.3021%" height="15" fill="rgb(245,172,44)"/><text x="7.6505%" y="911.50">dec..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (11 samples, 0.13%)</title><rect x="11.2529%" y="821" width="0.1288%" height="15" fill="rgb(236,23,11)"/><text x="11.5029%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.13%)</title><rect x="11.2529%" y="805" width="0.1288%" height="15" fill="rgb(205,117,38)"/><text x="11.5029%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (11 samples, 0.13%)</title><rect x="11.2529%" y="789" width="0.1288%" height="15" fill="rgb(237,72,25)"/><text x="11.5029%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.13%)</title><rect x="11.2529%" y="773" width="0.1288%" height="15" fill="rgb(244,70,9)"/><text x="11.5029%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.13%)</title><rect x="11.2529%" y="757" width="0.1288%" height="15" fill="rgb(217,125,39)"/><text x="11.5029%" y="767.50"></text></g><g><title>_int_malloc (9 samples, 0.11%)</title><rect x="11.5105%" y="693" width="0.1054%" height="15" fill="rgb(235,36,10)"/><text x="11.7605%" y="703.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.25%)</title><rect x="11.3817%" y="709" width="0.2459%" height="15" fill="rgb(251,123,47)"/><text x="11.6317%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (38 samples, 0.44%)</title><rect x="11.2061%" y="885" width="0.4450%" height="15" fill="rgb(221,13,13)"/><text x="11.4561%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.44%)</title><rect x="11.2061%" y="869" width="0.4450%" height="15" fill="rgb(238,131,9)"/><text x="11.4561%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34 samples, 0.40%)</title><rect x="11.2529%" y="853" width="0.3981%" height="15" fill="rgb(211,50,8)"/><text x="11.5029%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 0.40%)</title><rect x="11.2529%" y="837" width="0.3981%" height="15" fill="rgb(245,182,24)"/><text x="11.5029%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (23 samples, 0.27%)</title><rect x="11.3817%" y="821" width="0.2693%" height="15" fill="rgb(242,14,37)"/><text x="11.6317%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (23 samples, 0.27%)</title><rect x="11.3817%" y="805" width="0.2693%" height="15" fill="rgb(246,228,12)"/><text x="11.6317%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.27%)</title><rect x="11.3817%" y="789" width="0.2693%" height="15" fill="rgb(213,55,15)"/><text x="11.6317%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.27%)</title><rect x="11.3817%" y="773" width="0.2693%" height="15" fill="rgb(209,9,3)"/><text x="11.6317%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (23 samples, 0.27%)</title><rect x="11.3817%" y="757" width="0.2693%" height="15" fill="rgb(230,59,30)"/><text x="11.6317%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.27%)</title><rect x="11.3817%" y="741" width="0.2693%" height="15" fill="rgb(209,121,21)"/><text x="11.6317%" y="751.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.27%)</title><rect x="11.3817%" y="725" width="0.2693%" height="15" fill="rgb(220,109,13)"/><text x="11.6317%" y="735.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.16%)</title><rect x="11.8267%" y="869" width="0.1639%" height="15" fill="rgb(232,18,1)"/><text x="12.0767%" y="879.50"></text></g><g><title>core::fmt::write (16 samples, 0.19%)</title><rect x="11.9906%" y="869" width="0.1874%" height="15" fill="rgb(215,41,42)"/><text x="12.2406%" y="879.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (12 samples, 0.14%)</title><rect x="12.0375%" y="853" width="0.1405%" height="15" fill="rgb(224,123,36)"/><text x="12.2875%" y="863.50"></text></g><g><title>decor_mem::helpers::minus_parser_vals (48 samples, 0.56%)</title><rect x="11.7916%" y="885" width="0.5621%" height="15" fill="rgb(240,125,3)"/><text x="12.0416%" y="895.50"></text></g><g><title>core::num::dec2flt::dec2flt (15 samples, 0.18%)</title><rect x="12.1780%" y="869" width="0.1756%" height="15" fill="rgb(205,98,50)"/><text x="12.4280%" y="879.50"></text></g><g><title>decor_mem::select::get_value_for_rows (150 samples, 1.76%)</title><rect x="10.7026%" y="901" width="1.7564%" height="15" fill="rgb(205,185,37)"/><text x="10.9526%" y="911.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (9 samples, 0.11%)</title><rect x="12.3536%" y="885" width="0.1054%" height="15" fill="rgb(238,207,15)"/><text x="12.6036%" y="895.50"></text></g><g><title>core::fmt::write (9 samples, 0.11%)</title><rect x="12.4590%" y="885" width="0.1054%" height="15" fill="rgb(213,199,42)"/><text x="12.7090%" y="895.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.11%)</title><rect x="12.4590%" y="869" width="0.1054%" height="15" fill="rgb(235,201,11)"/><text x="12.7090%" y="879.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (16 samples, 0.19%)</title><rect x="12.4590%" y="901" width="0.1874%" height="15" fill="rgb(207,46,11)"/><text x="12.7090%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.16%)</title><rect x="18.0445%" y="789" width="0.1639%" height="15" fill="rgb(241,35,35)"/><text x="18.2945%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (213 samples, 2.49%)</title><rect x="18.3138%" y="757" width="2.4941%" height="15" fill="rgb(243,32,47)"/><text x="18.5638%" y="767.50">al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (213 samples, 2.49%)</title><rect x="18.3138%" y="741" width="2.4941%" height="15" fill="rgb(247,202,23)"/><text x="18.5638%" y="751.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (213 samples, 2.49%)</title><rect x="18.3138%" y="725" width="2.4941%" height="15" fill="rgb(219,102,11)"/><text x="18.5638%" y="735.50">al..</text></g><g><title>core::intrinsics::copy_nonoverlapping (213 samples, 2.49%)</title><rect x="18.3138%" y="709" width="2.4941%" height="15" fill="rgb(243,110,44)"/><text x="18.5638%" y="719.50">co..</text></g><g><title>__memmove_avx_unaligned_erms (195 samples, 2.28%)</title><rect x="18.5246%" y="693" width="2.2834%" height="15" fill="rgb(222,74,54)"/><text x="18.7746%" y="703.50">_..</text></g><g><title>checked_request2size (21 samples, 0.25%)</title><rect x="30.3981%" y="613" width="0.2459%" height="15" fill="rgb(216,99,12)"/><text x="30.6481%" y="623.50"></text></g><g><title>_int_malloc (283 samples, 3.31%)</title><rect x="27.4239%" y="629" width="3.3138%" height="15" fill="rgb(226,22,26)"/><text x="27.6739%" y="639.50">_in..</text></g><g><title>__GI___libc_malloc (857 samples, 10.04%)</title><rect x="20.8197%" y="645" width="10.0351%" height="15" fill="rgb(217,163,10)"/><text x="21.0697%" y="655.50">__GI___libc_mal..</text></g><g><title>checked_request2size (10 samples, 0.12%)</title><rect x="30.7377%" y="629" width="0.1171%" height="15" fill="rgb(213,25,53)"/><text x="30.9877%" y="639.50"></text></g><g><title>__rdl_alloc (17 samples, 0.20%)</title><rect x="30.8548%" y="645" width="0.1991%" height="15" fill="rgb(252,105,26)"/><text x="31.1048%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.19%)</title><rect x="30.8665%" y="629" width="0.1874%" height="15" fill="rgb(220,39,43)"/><text x="31.1165%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,124 samples, 13.16%)</title><rect x="17.9742%" y="821" width="13.1616%" height="15" fill="rgb(229,68,48)"/><text x="18.2242%" y="831.50">&lt;alloc::string::Stri..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,118 samples, 13.09%)</title><rect x="18.0445%" y="805" width="13.0913%" height="15" fill="rgb(252,8,32)"/><text x="18.2945%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,104 samples, 12.93%)</title><rect x="18.2084%" y="789" width="12.9274%" height="15" fill="rgb(223,20,43)"/><text x="18.4584%" y="799.50">alloc::slice::&lt;impl..</text></g><g><title>alloc::slice::hack::to_vec (1,104 samples, 12.93%)</title><rect x="18.2084%" y="773" width="12.9274%" height="15" fill="rgb(229,81,49)"/><text x="18.4584%" y="783.50">alloc::slice::hack:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (882 samples, 10.33%)</title><rect x="20.8080%" y="757" width="10.3279%" height="15" fill="rgb(236,28,36)"/><text x="21.0580%" y="767.50">alloc::vec::Vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (882 samples, 10.33%)</title><rect x="20.8080%" y="741" width="10.3279%" height="15" fill="rgb(249,185,26)"/><text x="21.0580%" y="751.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (882 samples, 10.33%)</title><rect x="20.8080%" y="725" width="10.3279%" height="15" fill="rgb(249,174,33)"/><text x="21.0580%" y="735.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (882 samples, 10.33%)</title><rect x="20.8080%" y="709" width="10.3279%" height="15" fill="rgb(233,201,37)"/><text x="21.0580%" y="719.50">alloc::raw_vec:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (882 samples, 10.33%)</title><rect x="20.8080%" y="693" width="10.3279%" height="15" fill="rgb(221,78,26)"/><text x="21.0580%" y="703.50">&lt;alloc::alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (882 samples, 10.33%)</title><rect x="20.8080%" y="677" width="10.3279%" height="15" fill="rgb(250,127,30)"/><text x="21.0580%" y="687.50">alloc::alloc::G..</text></g><g><title>alloc::alloc::alloc (882 samples, 10.33%)</title><rect x="20.8080%" y="661" width="10.3279%" height="15" fill="rgb(230,49,44)"/><text x="21.0580%" y="671.50">alloc::alloc::a..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,556 samples, 18.22%)</title><rect x="12.9274%" y="837" width="18.2201%" height="15" fill="rgb(229,67,23)"/><text x="13.1774%" y="847.50">&lt;core::iter::adapters::Clone..</text></g><g><title>__GI___libc_malloc (128 samples, 1.50%)</title><rect x="31.1475%" y="837" width="1.4988%" height="15" fill="rgb(249,83,47)"/><text x="31.3975%" y="847.50"></text></g><g><title>_int_malloc (62 samples, 0.73%)</title><rect x="31.9204%" y="821" width="0.7260%" height="15" fill="rgb(215,43,3)"/><text x="32.1704%" y="831.50"></text></g><g><title>unlink_chunk (34 samples, 0.40%)</title><rect x="32.2482%" y="805" width="0.3981%" height="15" fill="rgb(238,154,13)"/><text x="32.4982%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,699 samples, 19.89%)</title><rect x="12.7986%" y="853" width="19.8946%" height="15" fill="rgb(219,56,2)"/><text x="13.0486%" y="863.50">&lt;alloc::vec::Vec&lt;T&gt; as core::cl..</text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (12 samples, 0.14%)</title><rect x="32.6932%" y="853" width="0.1405%" height="15" fill="rgb(233,0,4)"/><text x="32.9432%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,719 samples, 20.13%)</title><rect x="12.7518%" y="869" width="20.1288%" height="15" fill="rgb(235,30,7)"/><text x="13.0018%" y="879.50">&lt;alloc::vec::Vec&lt;T&gt; as core::clo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.15%)</title><rect x="33.8173%" y="805" width="0.1522%" height="15" fill="rgb(250,79,13)"/><text x="34.0673%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (13 samples, 0.15%)</title><rect x="33.8173%" y="789" width="0.1522%" height="15" fill="rgb(211,146,34)"/><text x="34.0673%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (63 samples, 0.74%)</title><rect x="33.9930%" y="773" width="0.7377%" height="15" fill="rgb(228,22,38)"/><text x="34.2430%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (63 samples, 0.74%)</title><rect x="33.9930%" y="757" width="0.7377%" height="15" fill="rgb(235,168,5)"/><text x="34.2430%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (63 samples, 0.74%)</title><rect x="33.9930%" y="741" width="0.7377%" height="15" fill="rgb(221,155,16)"/><text x="34.2430%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.74%)</title><rect x="33.9930%" y="725" width="0.7377%" height="15" fill="rgb(215,215,53)"/><text x="34.2430%" y="735.50"></text></g><g><title>__memmove_avx_unaligned_erms (62 samples, 0.73%)</title><rect x="34.0047%" y="709" width="0.7260%" height="15" fill="rgb(223,4,10)"/><text x="34.2547%" y="719.50"></text></g><g><title>_int_malloc (79 samples, 0.93%)</title><rect x="36.0773%" y="645" width="0.9251%" height="15" fill="rgb(234,103,6)"/><text x="36.3273%" y="655.50"></text></g><g><title>__GI___libc_malloc (195 samples, 2.28%)</title><rect x="34.7541%" y="661" width="2.2834%" height="15" fill="rgb(227,97,0)"/><text x="35.0041%" y="671.50">_..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (287 samples, 3.36%)</title><rect x="33.7705%" y="837" width="3.3607%" height="15" fill="rgb(234,150,53)"/><text x="34.0205%" y="847.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (283 samples, 3.31%)</title><rect x="33.8173%" y="821" width="3.3138%" height="15" fill="rgb(228,201,54)"/><text x="34.0673%" y="831.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (270 samples, 3.16%)</title><rect x="33.9696%" y="805" width="3.1616%" height="15" fill="rgb(222,22,37)"/><text x="34.2196%" y="815.50">all..</text></g><g><title>alloc::slice::hack::to_vec (270 samples, 3.16%)</title><rect x="33.9696%" y="789" width="3.1616%" height="15" fill="rgb(237,53,32)"/><text x="34.2196%" y="799.50">all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (205 samples, 2.40%)</title><rect x="34.7307%" y="773" width="2.4005%" height="15" fill="rgb(233,25,53)"/><text x="34.9807%" y="783.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (205 samples, 2.40%)</title><rect x="34.7307%" y="757" width="2.4005%" height="15" fill="rgb(210,40,34)"/><text x="34.9807%" y="767.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (205 samples, 2.40%)</title><rect x="34.7307%" y="741" width="2.4005%" height="15" fill="rgb(241,220,44)"/><text x="34.9807%" y="751.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (205 samples, 2.40%)</title><rect x="34.7307%" y="725" width="2.4005%" height="15" fill="rgb(235,28,35)"/><text x="34.9807%" y="735.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (205 samples, 2.40%)</title><rect x="34.7307%" y="709" width="2.4005%" height="15" fill="rgb(210,56,17)"/><text x="34.9807%" y="719.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (205 samples, 2.40%)</title><rect x="34.7307%" y="693" width="2.4005%" height="15" fill="rgb(224,130,29)"/><text x="34.9807%" y="703.50">al..</text></g><g><title>alloc::alloc::alloc (205 samples, 2.40%)</title><rect x="34.7307%" y="677" width="2.4005%" height="15" fill="rgb(235,212,8)"/><text x="34.9807%" y="687.50">al..</text></g><g><title>_int_malloc (86 samples, 1.01%)</title><rect x="38.5129%" y="821" width="1.0070%" height="15" fill="rgb(223,33,50)"/><text x="38.7629%" y="831.50"></text></g><g><title>__GI___libc_malloc (208 samples, 2.44%)</title><rect x="37.1429%" y="837" width="2.4356%" height="15" fill="rgb(219,149,13)"/><text x="37.3929%" y="847.50">__..</text></g><g><title>__memmove_avx_unaligned_erms (31 samples, 0.36%)</title><rect x="39.5785%" y="837" width="0.3630%" height="15" fill="rgb(250,156,29)"/><text x="39.8285%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (609 samples, 7.13%)</title><rect x="32.9274%" y="853" width="7.1311%" height="15" fill="rgb(216,193,19)"/><text x="33.1774%" y="863.50">&lt;hashbrown..</text></g><g><title>&lt;decor_mem::views::View as core::clone::Clone&gt;::clone (2,333 samples, 27.32%)</title><rect x="12.7518%" y="885" width="27.3185%" height="15" fill="rgb(216,135,14)"/><text x="13.0018%" y="895.50">&lt;decor_mem::views::View as core::clone::Clon..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (614 samples, 7.19%)</title><rect x="32.8806%" y="869" width="7.1897%" height="15" fill="rgb(241,47,5)"/><text x="33.1306%" y="879.50">&lt;hashbrown..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.37%)</title><rect x="40.0703%" y="869" width="0.3747%" height="15" fill="rgb(233,42,35)"/><text x="40.3203%" y="879.50"></text></g><g><title>_int_free (22 samples, 0.26%)</title><rect x="40.1874%" y="853" width="0.2576%" height="15" fill="rgb(231,13,6)"/><text x="40.4374%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (107 samples, 1.25%)</title><rect x="40.0703%" y="885" width="1.2529%" height="15" fill="rgb(207,181,40)"/><text x="40.3203%" y="895.50"></text></g><g><title>_int_free (75 samples, 0.88%)</title><rect x="40.4450%" y="869" width="0.8782%" height="15" fill="rgb(254,173,49)"/><text x="40.6950%" y="879.50"></text></g><g><title>malloc_consolidate (75 samples, 0.88%)</title><rect x="40.4450%" y="853" width="0.8782%" height="15" fill="rgb(221,1,38)"/><text x="40.6950%" y="863.50"></text></g><g><title>unlink_chunk (28 samples, 0.33%)</title><rect x="40.9953%" y="837" width="0.3279%" height="15" fill="rgb(206,124,46)"/><text x="41.2453%" y="847.50"></text></g><g><title>__GI___libc_free (17 samples, 0.20%)</title><rect x="41.5105%" y="853" width="0.1991%" height="15" fill="rgb(249,21,11)"/><text x="41.7605%" y="863.50"></text></g><g><title>_int_free (88 samples, 1.03%)</title><rect x="41.7799%" y="853" width="1.0304%" height="15" fill="rgb(222,201,40)"/><text x="42.0299%" y="863.50"></text></g><g><title>core::ptr::drop_in_place (148 samples, 1.73%)</title><rect x="41.3232%" y="885" width="1.7330%" height="15" fill="rgb(235,61,29)"/><text x="41.5732%" y="895.50"></text></g><g><title>core::ptr::drop_in_place (140 samples, 1.64%)</title><rect x="41.4169%" y="869" width="1.6393%" height="15" fill="rgb(219,207,3)"/><text x="41.6669%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (21 samples, 0.25%)</title><rect x="42.8103%" y="853" width="0.2459%" height="15" fill="rgb(222,56,46)"/><text x="43.0603%" y="863.50"></text></g><g><title>decor_mem::select::get_join_on_col_indices (11 samples, 0.13%)</title><rect x="43.0562%" y="885" width="0.1288%" height="15" fill="rgb(239,76,54)"/><text x="43.3062%" y="895.50"></text></g><g><title>decor_mem::select::get_binop_indices (11 samples, 0.13%)</title><rect x="43.0562%" y="869" width="0.1288%" height="15" fill="rgb(231,124,27)"/><text x="43.3062%" y="879.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.22%)</title><rect x="43.3958%" y="869" width="0.2225%" height="15" fill="rgb(249,195,6)"/><text x="43.6458%" y="879.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (22 samples, 0.26%)</title><rect x="44.4614%" y="741" width="0.2576%" height="15" fill="rgb(237,174,47)"/><text x="44.7114%" y="751.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (69 samples, 0.81%)</title><rect x="43.9344%" y="805" width="0.8080%" height="15" fill="rgb(206,201,31)"/><text x="44.1844%" y="815.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (57 samples, 0.67%)</title><rect x="44.0749%" y="789" width="0.6674%" height="15" fill="rgb(231,57,52)"/><text x="44.3249%" y="799.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (51 samples, 0.60%)</title><rect x="44.1452%" y="773" width="0.5972%" height="15" fill="rgb(248,177,22)"/><text x="44.3952%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (51 samples, 0.60%)</title><rect x="44.1452%" y="757" width="0.5972%" height="15" fill="rgb(215,211,37)"/><text x="44.3952%" y="767.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (84 samples, 0.98%)</title><rect x="43.8290%" y="837" width="0.9836%" height="15" fill="rgb(241,128,51)"/><text x="44.0790%" y="847.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (84 samples, 0.98%)</title><rect x="43.8290%" y="821" width="0.9836%" height="15" fill="rgb(227,165,31)"/><text x="44.0790%" y="831.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.13%)</title><rect x="44.8946%" y="821" width="0.1288%" height="15" fill="rgb(228,167,24)"/><text x="45.1446%" y="831.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.11%)</title><rect x="45.1756%" y="805" width="0.1054%" height="15" fill="rgb(228,143,12)"/><text x="45.4256%" y="815.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (130 samples, 1.52%)</title><rect x="43.7705%" y="853" width="1.5222%" height="15" fill="rgb(249,149,8)"/><text x="44.0205%" y="863.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (36 samples, 0.42%)</title><rect x="44.8712%" y="837" width="0.4215%" height="15" fill="rgb(243,35,44)"/><text x="45.1212%" y="847.50"></text></g><g><title>core::fmt::write (16 samples, 0.19%)</title><rect x="45.1054%" y="821" width="0.1874%" height="15" fill="rgb(246,89,9)"/><text x="45.3554%" y="831.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.11%)</title><rect x="45.3279%" y="837" width="0.1054%" height="15" fill="rgb(233,213,13)"/><text x="45.5779%" y="847.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.13%)</title><rect x="45.5269%" y="821" width="0.1288%" height="15" fill="rgb(233,141,41)"/><text x="45.7769%" y="831.50"></text></g><g><title>core::fmt::write (178 samples, 2.08%)</title><rect x="43.7354%" y="869" width="2.0843%" height="15" fill="rgb(239,167,4)"/><text x="43.9854%" y="879.50">c..</text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (45 samples, 0.53%)</title><rect x="45.2927%" y="853" width="0.5269%" height="15" fill="rgb(209,217,16)"/><text x="45.5427%" y="863.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (31 samples, 0.36%)</title><rect x="45.4567%" y="837" width="0.3630%" height="15" fill="rgb(219,88,35)"/><text x="45.7067%" y="847.50"></text></g><g><title>core::fmt::write (10 samples, 0.12%)</title><rect x="45.7026%" y="821" width="0.1171%" height="15" fill="rgb(220,193,23)"/><text x="45.9526%" y="831.50"></text></g><g><title>decor_mem::select::get_query_results (3,331 samples, 39.00%)</title><rect x="7.0023%" y="933" width="39.0047%" height="15" fill="rgb(230,90,52)"/><text x="7.2523%" y="943.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (3,331 samples, 39.00%)</title><rect x="7.0023%" y="917" width="39.0047%" height="15" fill="rgb(252,106,19)"/><text x="7.2523%" y="927.50">decor_mem::select::get_setexpr_results</text></g><g><title>decor_mem::select::tablewithjoins_to_view (2,849 samples, 33.36%)</title><rect x="12.6464%" y="901" width="33.3607%" height="15" fill="rgb(206,74,20)"/><text x="12.8964%" y="911.50">decor_mem::select::tablewithjoins_to_view</text></g><g><title>decor_mem::views::View::get_rows_of_col (235 samples, 2.75%)</title><rect x="43.2553%" y="885" width="2.7518%" height="15" fill="rgb(230,138,44)"/><text x="43.5053%" y="895.50">de..</text></g><g><title>hashbrown::map::make_hash (16 samples, 0.19%)</title><rect x="45.8197%" y="869" width="0.1874%" height="15" fill="rgb(235,182,43)"/><text x="46.0697%" y="879.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (3,410 samples, 39.93%)</title><rect x="6.1475%" y="949" width="39.9297%" height="15" fill="rgb(242,16,51)"/><text x="6.3975%" y="959.50">decor_mem::query_transformer::QueryTransformer::issue_statement</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.18%)</title><rect x="46.0773%" y="885" width="0.1756%" height="15" fill="rgb(248,9,4)"/><text x="46.3273%" y="895.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (19 samples, 0.22%)</title><rect x="46.0773%" y="949" width="0.2225%" height="15" fill="rgb(210,31,22)"/><text x="46.3273%" y="959.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (19 samples, 0.22%)</title><rect x="46.0773%" y="933" width="0.2225%" height="15" fill="rgb(239,54,39)"/><text x="46.3273%" y="943.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (19 samples, 0.22%)</title><rect x="46.0773%" y="917" width="0.2225%" height="15" fill="rgb(230,99,41)"/><text x="46.3273%" y="927.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (19 samples, 0.22%)</title><rect x="46.0773%" y="901" width="0.2225%" height="15" fill="rgb(253,106,12)"/><text x="46.3273%" y="911.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (3,445 samples, 40.34%)</title><rect x="6.1475%" y="965" width="40.3396%" height="15" fill="rgb(213,46,41)"/><text x="6.3975%" y="975.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>decor_mem::stats::get_qtype (16 samples, 0.19%)</title><rect x="46.2998%" y="949" width="0.1874%" height="15" fill="rgb(215,133,35)"/><text x="46.5498%" y="959.50"></text></g><g><title>sql_parser::parser::parse_statements (16 samples, 0.19%)</title><rect x="46.2998%" y="933" width="0.1874%" height="15" fill="rgb(213,28,5)"/><text x="46.5498%" y="943.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (16 samples, 0.19%)</title><rect x="46.2998%" y="917" width="0.1874%" height="15" fill="rgb(215,77,49)"/><text x="46.5498%" y="927.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.13%)</title><rect x="46.4871%" y="965" width="0.1288%" height="15" fill="rgb(248,100,22)"/><text x="46.7371%" y="975.50"></text></g><g><title>[lobsters-microbenchmarks] (9 samples, 0.11%)</title><rect x="46.8150%" y="965" width="0.1054%" height="15" fill="rgb(208,67,9)"/><text x="47.0650%" y="975.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.12%)</title><rect x="47.0141%" y="965" width="0.1171%" height="15" fill="rgb(219,133,21)"/><text x="47.2641%" y="975.50"></text></g><g><title>_int_free (24 samples, 0.28%)</title><rect x="47.3185%" y="965" width="0.2810%" height="15" fill="rgb(246,46,29)"/><text x="47.5685%" y="975.50"></text></g><g><title>_int_malloc (62 samples, 0.73%)</title><rect x="47.5995%" y="965" width="0.7260%" height="15" fill="rgb(246,185,52)"/><text x="47.8495%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.16%)</title><rect x="48.3607%" y="965" width="0.1639%" height="15" fill="rgb(252,136,11)"/><text x="48.6107%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.11%)</title><rect x="48.8525%" y="885" width="0.1054%" height="15" fill="rgb(219,138,53)"/><text x="49.1025%" y="895.50"></text></g><g><title>malloc_consolidate (49 samples, 0.57%)</title><rect x="49.5433%" y="805" width="0.5738%" height="15" fill="rgb(211,51,23)"/><text x="49.7933%" y="815.50"></text></g><g><title>unlink_chunk (9 samples, 0.11%)</title><rect x="50.0117%" y="789" width="0.1054%" height="15" fill="rgb(247,221,28)"/><text x="50.2617%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (93 samples, 1.09%)</title><rect x="49.0515%" y="869" width="1.0890%" height="15" fill="rgb(251,222,45)"/><text x="49.3015%" y="879.50"></text></g><g><title>__GI___libc_realloc (92 samples, 1.08%)</title><rect x="49.0632%" y="853" width="1.0773%" height="15" fill="rgb(217,162,53)"/><text x="49.3132%" y="863.50"></text></g><g><title>_int_realloc (91 samples, 1.07%)</title><rect x="49.0749%" y="837" width="1.0656%" height="15" fill="rgb(229,93,14)"/><text x="49.3249%" y="847.50"></text></g><g><title>_int_malloc (90 samples, 1.05%)</title><rect x="49.0867%" y="821" width="1.0539%" height="15" fill="rgb(209,67,49)"/><text x="49.3367%" y="831.50"></text></g><g><title>__memcmp_avx2_movbe (15 samples, 0.18%)</title><rect x="50.3747%" y="837" width="0.1756%" height="15" fill="rgb(213,87,29)"/><text x="50.6247%" y="847.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (39 samples, 0.46%)</title><rect x="50.1991%" y="853" width="0.4567%" height="15" fill="rgb(205,151,52)"/><text x="50.4491%" y="863.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (9 samples, 0.11%)</title><rect x="50.5504%" y="837" width="0.1054%" height="15" fill="rgb(253,215,39)"/><text x="50.8004%" y="847.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (9 samples, 0.11%)</title><rect x="50.5504%" y="821" width="0.1054%" height="15" fill="rgb(221,220,41)"/><text x="50.8004%" y="831.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (9 samples, 0.11%)</title><rect x="50.5504%" y="805" width="0.1054%" height="15" fill="rgb(218,133,21)"/><text x="50.8004%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (9 samples, 0.11%)</title><rect x="50.5504%" y="789" width="0.1054%" height="15" fill="rgb(221,193,43)"/><text x="50.8004%" y="799.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (52 samples, 0.61%)</title><rect x="50.1405%" y="869" width="0.6089%" height="15" fill="rgb(240,128,52)"/><text x="50.3905%" y="879.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (176 samples, 2.06%)</title><rect x="48.7237%" y="965" width="2.0609%" height="15" fill="rgb(253,114,12)"/><text x="48.9737%" y="975.50">d..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (176 samples, 2.06%)</title><rect x="48.7237%" y="949" width="2.0609%" height="15" fill="rgb(215,223,47)"/><text x="48.9737%" y="959.50">m..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (176 samples, 2.06%)</title><rect x="48.7237%" y="933" width="2.0609%" height="15" fill="rgb(248,225,23)"/><text x="48.9737%" y="943.50">&lt;..</text></g><g><title>decor_mem::stats::get_qtype (175 samples, 2.05%)</title><rect x="48.7354%" y="917" width="2.0492%" height="15" fill="rgb(250,108,0)"/><text x="48.9854%" y="927.50">d..</text></g><g><title>sql_parser::parser::parse_statements (175 samples, 2.05%)</title><rect x="48.7354%" y="901" width="2.0492%" height="15" fill="rgb(228,208,7)"/><text x="48.9854%" y="911.50">s..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (151 samples, 1.77%)</title><rect x="49.0164%" y="885" width="1.7681%" height="15" fill="rgb(244,45,10)"/><text x="49.2664%" y="895.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (9 samples, 0.11%)</title><rect x="50.8548%" y="965" width="0.1054%" height="15" fill="rgb(207,125,25)"/><text x="51.1048%" y="975.50"></text></g><g><title>sql_parser::parser::parse_statements (9 samples, 0.11%)</title><rect x="50.8548%" y="949" width="0.1054%" height="15" fill="rgb(210,195,18)"/><text x="51.1048%" y="959.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (9 samples, 0.11%)</title><rect x="50.8548%" y="933" width="0.1054%" height="15" fill="rgb(249,80,12)"/><text x="51.1048%" y="943.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (26 samples, 0.30%)</title><rect x="51.0422%" y="853" width="0.3044%" height="15" fill="rgb(221,65,9)"/><text x="51.2922%" y="863.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (26 samples, 0.30%)</title><rect x="51.0422%" y="837" width="0.3044%" height="15" fill="rgb(235,49,36)"/><text x="51.2922%" y="847.50"></text></g><g><title>std::sys_common::net::TcpStream::read (26 samples, 0.30%)</title><rect x="51.0422%" y="821" width="0.3044%" height="15" fill="rgb(225,32,20)"/><text x="51.2922%" y="831.50"></text></g><g><title>std::sys::unix::net::Socket::read (26 samples, 0.30%)</title><rect x="51.0422%" y="805" width="0.3044%" height="15" fill="rgb(215,141,46)"/><text x="51.2922%" y="815.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (26 samples, 0.30%)</title><rect x="51.0422%" y="789" width="0.3044%" height="15" fill="rgb(250,160,47)"/><text x="51.2922%" y="799.50"></text></g><g><title>__libc_recv (26 samples, 0.30%)</title><rect x="51.0422%" y="773" width="0.3044%" height="15" fill="rgb(216,222,40)"/><text x="51.2922%" y="783.50"></text></g><g><title>__libc_recv (26 samples, 0.30%)</title><rect x="51.0422%" y="757" width="0.3044%" height="15" fill="rgb(234,217,39)"/><text x="51.2922%" y="767.50"></text></g><g><title>[unknown] (25 samples, 0.29%)</title><rect x="51.0539%" y="741" width="0.2927%" height="15" fill="rgb(207,178,40)"/><text x="51.3039%" y="751.50"></text></g><g><title>[unknown] (25 samples, 0.29%)</title><rect x="51.0539%" y="725" width="0.2927%" height="15" fill="rgb(221,136,13)"/><text x="51.3039%" y="735.50"></text></g><g><title>[unknown] (25 samples, 0.29%)</title><rect x="51.0539%" y="709" width="0.2927%" height="15" fill="rgb(249,199,10)"/><text x="51.3039%" y="719.50"></text></g><g><title>[unknown] (23 samples, 0.27%)</title><rect x="51.0773%" y="693" width="0.2693%" height="15" fill="rgb(249,222,13)"/><text x="51.3273%" y="703.50"></text></g><g><title>[unknown] (23 samples, 0.27%)</title><rect x="51.0773%" y="677" width="0.2693%" height="15" fill="rgb(244,185,38)"/><text x="51.3273%" y="687.50"></text></g><g><title>[unknown] (23 samples, 0.27%)</title><rect x="51.0773%" y="661" width="0.2693%" height="15" fill="rgb(236,202,9)"/><text x="51.3273%" y="671.50"></text></g><g><title>[unknown] (23 samples, 0.27%)</title><rect x="51.0773%" y="645" width="0.2693%" height="15" fill="rgb(250,229,37)"/><text x="51.3273%" y="655.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="51.1124%" y="629" width="0.2342%" height="15" fill="rgb(206,174,23)"/><text x="51.3624%" y="639.50"></text></g><g><title>[unknown] (15 samples, 0.18%)</title><rect x="51.1710%" y="613" width="0.1756%" height="15" fill="rgb(211,33,43)"/><text x="51.4210%" y="623.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="51.1944%" y="597" width="0.1522%" height="15" fill="rgb(245,58,50)"/><text x="51.4444%" y="607.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="51.1944%" y="581" width="0.1522%" height="15" fill="rgb(244,68,36)"/><text x="51.4444%" y="591.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="51.2178%" y="565" width="0.1288%" height="15" fill="rgb(232,229,15)"/><text x="51.4678%" y="575.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="51.2178%" y="549" width="0.1288%" height="15" fill="rgb(254,30,23)"/><text x="51.4678%" y="559.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="51.2178%" y="533" width="0.1288%" height="15" fill="rgb(235,160,14)"/><text x="51.4678%" y="543.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.35%)</title><rect x="51.0304%" y="869" width="0.3513%" height="15" fill="rgb(212,155,44)"/><text x="51.2804%" y="879.50"></text></g><g><title>mysql::conn::Conn::read_packet (33 samples, 0.39%)</title><rect x="51.0304%" y="885" width="0.3864%" height="15" fill="rgb(226,2,50)"/><text x="51.2804%" y="895.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (34 samples, 0.40%)</title><rect x="51.0304%" y="901" width="0.3981%" height="15" fill="rgb(234,177,6)"/><text x="51.2804%" y="911.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (71 samples, 0.83%)</title><rect x="51.4520%" y="869" width="0.8314%" height="15" fill="rgb(217,24,9)"/><text x="51.7020%" y="879.50"></text></g><g><title>std::sys_common::net::TcpStream::write (71 samples, 0.83%)</title><rect x="51.4520%" y="853" width="0.8314%" height="15" fill="rgb(220,13,46)"/><text x="51.7020%" y="863.50"></text></g><g><title>__libc_send (71 samples, 0.83%)</title><rect x="51.4520%" y="837" width="0.8314%" height="15" fill="rgb(239,221,27)"/><text x="51.7020%" y="847.50"></text></g><g><title>__libc_send (71 samples, 0.83%)</title><rect x="51.4520%" y="821" width="0.8314%" height="15" fill="rgb(222,198,25)"/><text x="51.7020%" y="831.50"></text></g><g><title>[unknown] (71 samples, 0.83%)</title><rect x="51.4520%" y="805" width="0.8314%" height="15" fill="rgb(211,99,13)"/><text x="51.7020%" y="815.50"></text></g><g><title>[unknown] (71 samples, 0.83%)</title><rect x="51.4520%" y="789" width="0.8314%" height="15" fill="rgb(232,111,31)"/><text x="51.7020%" y="799.50"></text></g><g><title>[unknown] (70 samples, 0.82%)</title><rect x="51.4637%" y="773" width="0.8197%" height="15" fill="rgb(245,82,37)"/><text x="51.7137%" y="783.50"></text></g><g><title>[unknown] (70 samples, 0.82%)</title><rect x="51.4637%" y="757" width="0.8197%" height="15" fill="rgb(227,149,46)"/><text x="51.7137%" y="767.50"></text></g><g><title>[unknown] (70 samples, 0.82%)</title><rect x="51.4637%" y="741" width="0.8197%" height="15" fill="rgb(218,36,50)"/><text x="51.7137%" y="751.50"></text></g><g><title>[unknown] (70 samples, 0.82%)</title><rect x="51.4637%" y="725" width="0.8197%" height="15" fill="rgb(226,80,48)"/><text x="51.7137%" y="735.50"></text></g><g><title>[unknown] (70 samples, 0.82%)</title><rect x="51.4637%" y="709" width="0.8197%" height="15" fill="rgb(238,224,15)"/><text x="51.7137%" y="719.50"></text></g><g><title>[unknown] (70 samples, 0.82%)</title><rect x="51.4637%" y="693" width="0.8197%" height="15" fill="rgb(241,136,10)"/><text x="51.7137%" y="703.50"></text></g><g><title>[unknown] (66 samples, 0.77%)</title><rect x="51.5105%" y="677" width="0.7728%" height="15" fill="rgb(208,32,45)"/><text x="51.7605%" y="687.50"></text></g><g><title>[unknown] (64 samples, 0.75%)</title><rect x="51.5340%" y="661" width="0.7494%" height="15" fill="rgb(207,135,9)"/><text x="51.7840%" y="671.50"></text></g><g><title>[unknown] (62 samples, 0.73%)</title><rect x="51.5574%" y="645" width="0.7260%" height="15" fill="rgb(206,86,44)"/><text x="51.8074%" y="655.50"></text></g><g><title>[unknown] (60 samples, 0.70%)</title><rect x="51.5808%" y="629" width="0.7026%" height="15" fill="rgb(245,177,15)"/><text x="51.8308%" y="639.50"></text></g><g><title>[unknown] (58 samples, 0.68%)</title><rect x="51.6042%" y="613" width="0.6792%" height="15" fill="rgb(206,64,50)"/><text x="51.8542%" y="623.50"></text></g><g><title>[unknown] (58 samples, 0.68%)</title><rect x="51.6042%" y="597" width="0.6792%" height="15" fill="rgb(234,36,40)"/><text x="51.8542%" y="607.50"></text></g><g><title>[unknown] (58 samples, 0.68%)</title><rect x="51.6042%" y="581" width="0.6792%" height="15" fill="rgb(213,64,8)"/><text x="51.8542%" y="591.50"></text></g><g><title>[unknown] (58 samples, 0.68%)</title><rect x="51.6042%" y="565" width="0.6792%" height="15" fill="rgb(210,75,36)"/><text x="51.8542%" y="575.50"></text></g><g><title>[unknown] (58 samples, 0.68%)</title><rect x="51.6042%" y="549" width="0.6792%" height="15" fill="rgb(229,88,21)"/><text x="51.8542%" y="559.50"></text></g><g><title>[unknown] (57 samples, 0.67%)</title><rect x="51.6159%" y="533" width="0.6674%" height="15" fill="rgb(252,204,47)"/><text x="51.8659%" y="543.50"></text></g><g><title>[unknown] (55 samples, 0.64%)</title><rect x="51.6393%" y="517" width="0.6440%" height="15" fill="rgb(208,77,27)"/><text x="51.8893%" y="527.50"></text></g><g><title>[unknown] (47 samples, 0.55%)</title><rect x="51.7330%" y="501" width="0.5504%" height="15" fill="rgb(221,76,26)"/><text x="51.9830%" y="511.50"></text></g><g><title>[unknown] (41 samples, 0.48%)</title><rect x="51.8033%" y="485" width="0.4801%" height="15" fill="rgb(225,139,18)"/><text x="52.0533%" y="495.50"></text></g><g><title>[unknown] (36 samples, 0.42%)</title><rect x="51.8618%" y="469" width="0.4215%" height="15" fill="rgb(230,137,11)"/><text x="52.1118%" y="479.50"></text></g><g><title>[unknown] (33 samples, 0.39%)</title><rect x="51.8970%" y="453" width="0.3864%" height="15" fill="rgb(212,28,1)"/><text x="52.1470%" y="463.50"></text></g><g><title>[unknown] (33 samples, 0.39%)</title><rect x="51.8970%" y="437" width="0.3864%" height="15" fill="rgb(248,164,17)"/><text x="52.1470%" y="447.50"></text></g><g><title>[unknown] (33 samples, 0.39%)</title><rect x="51.8970%" y="421" width="0.3864%" height="15" fill="rgb(222,171,42)"/><text x="52.1470%" y="431.50"></text></g><g><title>[unknown] (32 samples, 0.37%)</title><rect x="51.9087%" y="405" width="0.3747%" height="15" fill="rgb(243,84,45)"/><text x="52.1587%" y="415.50"></text></g><g><title>[unknown] (31 samples, 0.36%)</title><rect x="51.9204%" y="389" width="0.3630%" height="15" fill="rgb(252,49,23)"/><text x="52.1704%" y="399.50"></text></g><g><title>[unknown] (29 samples, 0.34%)</title><rect x="51.9438%" y="373" width="0.3396%" height="15" fill="rgb(215,19,7)"/><text x="52.1938%" y="383.50"></text></g><g><title>[unknown] (28 samples, 0.33%)</title><rect x="51.9555%" y="357" width="0.3279%" height="15" fill="rgb(238,81,41)"/><text x="52.2055%" y="367.50"></text></g><g><title>[unknown] (27 samples, 0.32%)</title><rect x="51.9672%" y="341" width="0.3162%" height="15" fill="rgb(210,199,37)"/><text x="52.2172%" y="351.50"></text></g><g><title>[unknown] (27 samples, 0.32%)</title><rect x="51.9672%" y="325" width="0.3162%" height="15" fill="rgb(244,192,49)"/><text x="52.2172%" y="335.50"></text></g><g><title>[unknown] (25 samples, 0.29%)</title><rect x="51.9906%" y="309" width="0.2927%" height="15" fill="rgb(226,211,11)"/><text x="52.2406%" y="319.50"></text></g><g><title>[unknown] (24 samples, 0.28%)</title><rect x="52.0023%" y="293" width="0.2810%" height="15" fill="rgb(236,162,54)"/><text x="52.2523%" y="303.50"></text></g><g><title>[unknown] (21 samples, 0.25%)</title><rect x="52.0375%" y="277" width="0.2459%" height="15" fill="rgb(220,229,9)"/><text x="52.2875%" y="287.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="52.0492%" y="261" width="0.2342%" height="15" fill="rgb(250,87,22)"/><text x="52.2992%" y="271.50"></text></g><g><title>[unknown] (18 samples, 0.21%)</title><rect x="52.0726%" y="245" width="0.2108%" height="15" fill="rgb(239,43,17)"/><text x="52.3226%" y="255.50"></text></g><g><title>[unknown] (17 samples, 0.20%)</title><rect x="52.0843%" y="229" width="0.1991%" height="15" fill="rgb(231,177,25)"/><text x="52.3343%" y="239.50"></text></g><g><title>[unknown] (15 samples, 0.18%)</title><rect x="52.1077%" y="213" width="0.1756%" height="15" fill="rgb(219,179,1)"/><text x="52.3577%" y="223.50"></text></g><g><title>[unknown] (15 samples, 0.18%)</title><rect x="52.1077%" y="197" width="0.1756%" height="15" fill="rgb(238,219,53)"/><text x="52.3577%" y="207.50"></text></g><g><title>[unknown] (15 samples, 0.18%)</title><rect x="52.1077%" y="181" width="0.1756%" height="15" fill="rgb(232,167,36)"/><text x="52.3577%" y="191.50"></text></g><g><title>[unknown] (14 samples, 0.16%)</title><rect x="52.1194%" y="165" width="0.1639%" height="15" fill="rgb(244,19,51)"/><text x="52.3694%" y="175.50"></text></g><g><title>[unknown] (14 samples, 0.16%)</title><rect x="52.1194%" y="149" width="0.1639%" height="15" fill="rgb(224,6,22)"/><text x="52.3694%" y="159.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="52.1311%" y="133" width="0.1522%" height="15" fill="rgb(224,145,5)"/><text x="52.3811%" y="143.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="52.1429%" y="117" width="0.1405%" height="15" fill="rgb(234,130,49)"/><text x="52.3929%" y="127.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="52.1546%" y="101" width="0.1288%" height="15" fill="rgb(254,6,2)"/><text x="52.4046%" y="111.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="52.1546%" y="85" width="0.1288%" height="15" fill="rgb(208,96,46)"/><text x="52.4046%" y="95.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (109 samples, 1.28%)</title><rect x="51.0187%" y="933" width="1.2763%" height="15" fill="rgb(239,3,39)"/><text x="51.2687%" y="943.50"></text></g><g><title>mysql::conn::Conn::_query (109 samples, 1.28%)</title><rect x="51.0187%" y="917" width="1.2763%" height="15" fill="rgb(233,210,1)"/><text x="51.2687%" y="927.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (74 samples, 0.87%)</title><rect x="51.4286%" y="901" width="0.8665%" height="15" fill="rgb(244,137,37)"/><text x="51.6786%" y="911.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (73 samples, 0.85%)</title><rect x="51.4403%" y="885" width="0.8548%" height="15" fill="rgb(240,136,2)"/><text x="51.6903%" y="895.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.36%)</title><rect x="52.5059%" y="853" width="0.3630%" height="15" fill="rgb(239,18,37)"/><text x="52.7559%" y="863.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (26 samples, 0.30%)</title><rect x="52.5644%" y="837" width="0.3044%" height="15" fill="rgb(218,185,22)"/><text x="52.8144%" y="847.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (26 samples, 0.30%)</title><rect x="52.5644%" y="821" width="0.3044%" height="15" fill="rgb(225,218,4)"/><text x="52.8144%" y="831.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (24 samples, 0.28%)</title><rect x="52.5878%" y="805" width="0.2810%" height="15" fill="rgb(230,182,32)"/><text x="52.8378%" y="815.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (14 samples, 0.16%)</title><rect x="52.7049%" y="789" width="0.1639%" height="15" fill="rgb(242,56,43)"/><text x="52.9549%" y="799.50"></text></g><g><title>mysql::conn::Conn::read_packet (50 samples, 0.59%)</title><rect x="52.4005%" y="869" width="0.5855%" height="15" fill="rgb(233,99,24)"/><text x="52.6505%" y="879.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (81 samples, 0.95%)</title><rect x="52.2951%" y="901" width="0.9485%" height="15" fill="rgb(234,209,42)"/><text x="52.5451%" y="911.50"></text></g><g><title>mysql::conn::Conn::next_text (81 samples, 0.95%)</title><rect x="52.2951%" y="885" width="0.9485%" height="15" fill="rgb(227,7,12)"/><text x="52.5451%" y="895.50"></text></g><g><title>mysql_common::value::read_text_values (22 samples, 0.26%)</title><rect x="52.9859%" y="869" width="0.2576%" height="15" fill="rgb(245,203,43)"/><text x="53.2359%" y="879.50"></text></g><g><title>mysql_common::value::read_text_value (13 samples, 0.15%)</title><rect x="53.0913%" y="853" width="0.1522%" height="15" fill="rgb(238,205,33)"/><text x="53.3413%" y="863.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 1.08%)</title><rect x="52.2951%" y="933" width="1.0773%" height="15" fill="rgb(231,56,7)"/><text x="52.5451%" y="943.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 1.08%)</title><rect x="52.2951%" y="917" width="1.0773%" height="15" fill="rgb(244,186,29)"/><text x="52.5451%" y="927.50"></text></g><g><title>mysql_common::row::new_row (10 samples, 0.12%)</title><rect x="53.2553%" y="901" width="0.1171%" height="15" fill="rgb(234,111,31)"/><text x="53.5053%" y="911.50"></text></g><g><title>mysql::conn::queryable::Queryable::query (14 samples, 0.16%)</title><rect x="53.3841%" y="933" width="0.1639%" height="15" fill="rgb(241,149,10)"/><text x="53.6341%" y="943.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (10 samples, 0.12%)</title><rect x="53.4309%" y="917" width="0.1171%" height="15" fill="rgb(249,206,44)"/><text x="53.6809%" y="927.50"></text></g><g><title>mysql::conn::Conn::_query (10 samples, 0.12%)</title><rect x="53.4309%" y="901" width="0.1171%" height="15" fill="rgb(251,153,30)"/><text x="53.6809%" y="911.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (11 samples, 0.13%)</title><rect x="53.5831%" y="885" width="0.1288%" height="15" fill="rgb(239,152,38)"/><text x="53.8331%" y="895.50"></text></g><g><title>mysql::conn::Conn::read_packet (11 samples, 0.13%)</title><rect x="53.5831%" y="869" width="0.1288%" height="15" fill="rgb(249,139,47)"/><text x="53.8331%" y="879.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (13 samples, 0.15%)</title><rect x="53.7119%" y="853" width="0.1522%" height="15" fill="rgb(244,64,35)"/><text x="53.9619%" y="863.50"></text></g><g><title>std::sys_common::net::TcpStream::write (13 samples, 0.15%)</title><rect x="53.7119%" y="837" width="0.1522%" height="15" fill="rgb(216,46,15)"/><text x="53.9619%" y="847.50"></text></g><g><title>__libc_send (13 samples, 0.15%)</title><rect x="53.7119%" y="821" width="0.1522%" height="15" fill="rgb(250,74,19)"/><text x="53.9619%" y="831.50"></text></g><g><title>__libc_send (13 samples, 0.15%)</title><rect x="53.7119%" y="805" width="0.1522%" height="15" fill="rgb(249,42,33)"/><text x="53.9619%" y="815.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="53.7119%" y="789" width="0.1522%" height="15" fill="rgb(242,149,17)"/><text x="53.9619%" y="799.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="53.7119%" y="773" width="0.1522%" height="15" fill="rgb(244,29,21)"/><text x="53.9619%" y="783.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="53.7119%" y="757" width="0.1522%" height="15" fill="rgb(220,130,37)"/><text x="53.9619%" y="767.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="53.7119%" y="741" width="0.1522%" height="15" fill="rgb(211,67,2)"/><text x="53.9619%" y="751.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="53.7119%" y="725" width="0.1522%" height="15" fill="rgb(235,68,52)"/><text x="53.9619%" y="735.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="53.7119%" y="709" width="0.1522%" height="15" fill="rgb(246,142,3)"/><text x="53.9619%" y="719.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="53.7119%" y="693" width="0.1522%" height="15" fill="rgb(241,25,7)"/><text x="53.9619%" y="703.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="53.7237%" y="677" width="0.1405%" height="15" fill="rgb(242,119,39)"/><text x="53.9737%" y="687.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="53.7237%" y="661" width="0.1405%" height="15" fill="rgb(241,98,45)"/><text x="53.9737%" y="671.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="53.7471%" y="645" width="0.1171%" height="15" fill="rgb(254,28,30)"/><text x="53.9971%" y="655.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="53.7471%" y="629" width="0.1171%" height="15" fill="rgb(241,142,54)"/><text x="53.9971%" y="639.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="53.7471%" y="613" width="0.1171%" height="15" fill="rgb(222,85,15)"/><text x="53.9971%" y="623.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="53.7588%" y="597" width="0.1054%" height="15" fill="rgb(210,85,47)"/><text x="54.0088%" y="607.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="53.7588%" y="581" width="0.1054%" height="15" fill="rgb(224,206,25)"/><text x="54.0088%" y="591.50"></text></g><g><title>lobsters_microbenchmarks::main (245 samples, 2.87%)</title><rect x="51.0070%" y="965" width="2.8689%" height="15" fill="rgb(243,201,19)"/><text x="51.2570%" y="975.50">lo..</text></g><g><title>lobsters_microbenchmarks::queriers::comment::post_comment (244 samples, 2.86%)</title><rect x="51.0187%" y="949" width="2.8571%" height="15" fill="rgb(236,59,4)"/><text x="51.2687%" y="959.50">lo..</text></g><g><title>mysql::conn::queryable::Queryable::query_first (28 samples, 0.33%)</title><rect x="53.5480%" y="933" width="0.3279%" height="15" fill="rgb(254,179,45)"/><text x="53.7980%" y="943.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (26 samples, 0.30%)</title><rect x="53.5714%" y="917" width="0.3044%" height="15" fill="rgb(226,14,10)"/><text x="53.8214%" y="927.50"></text></g><g><title>mysql::conn::Conn::_query (25 samples, 0.29%)</title><rect x="53.5831%" y="901" width="0.2927%" height="15" fill="rgb(244,27,41)"/><text x="53.8331%" y="911.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (14 samples, 0.16%)</title><rect x="53.7119%" y="885" width="0.1639%" height="15" fill="rgb(235,35,32)"/><text x="53.9619%" y="895.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (14 samples, 0.16%)</title><rect x="53.7119%" y="869" width="0.1639%" height="15" fill="rgb(218,68,31)"/><text x="53.9619%" y="879.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="54.0632%" y="757" width="0.1171%" height="15" fill="rgb(207,120,37)"/><text x="54.3132%" y="767.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="54.0632%" y="741" width="0.1171%" height="15" fill="rgb(227,98,0)"/><text x="54.3132%" y="751.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="54.0632%" y="725" width="0.1171%" height="15" fill="rgb(207,7,3)"/><text x="54.3132%" y="735.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="54.0632%" y="709" width="0.1171%" height="15" fill="rgb(206,98,19)"/><text x="54.3132%" y="719.50"></text></g><g><title>[unknown] (10 samples, 0.12%)</title><rect x="54.0632%" y="693" width="0.1171%" height="15" fill="rgb(217,5,26)"/><text x="54.3132%" y="703.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="54.0749%" y="677" width="0.1054%" height="15" fill="rgb(235,190,38)"/><text x="54.3249%" y="687.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (14 samples, 0.16%)</title><rect x="54.0281%" y="917" width="0.1639%" height="15" fill="rgb(247,86,24)"/><text x="54.2781%" y="927.50"></text></g><g><title>mysql::conn::Conn::_query (14 samples, 0.16%)</title><rect x="54.0281%" y="901" width="0.1639%" height="15" fill="rgb(205,101,16)"/><text x="54.2781%" y="911.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (12 samples, 0.14%)</title><rect x="54.0515%" y="885" width="0.1405%" height="15" fill="rgb(246,168,33)"/><text x="54.3015%" y="895.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (11 samples, 0.13%)</title><rect x="54.0632%" y="869" width="0.1288%" height="15" fill="rgb(231,114,1)"/><text x="54.3132%" y="879.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (11 samples, 0.13%)</title><rect x="54.0632%" y="853" width="0.1288%" height="15" fill="rgb(207,184,53)"/><text x="54.3132%" y="863.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (11 samples, 0.13%)</title><rect x="54.0632%" y="837" width="0.1288%" height="15" fill="rgb(224,95,51)"/><text x="54.3132%" y="847.50"></text></g><g><title>std::sys::unix::pipe::AnonPipe::write (11 samples, 0.13%)</title><rect x="54.0632%" y="821" width="0.1288%" height="15" fill="rgb(212,188,45)"/><text x="54.3132%" y="831.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (11 samples, 0.13%)</title><rect x="54.0632%" y="805" width="0.1288%" height="15" fill="rgb(223,154,38)"/><text x="54.3132%" y="815.50"></text></g><g><title>__libc_write (11 samples, 0.13%)</title><rect x="54.0632%" y="789" width="0.1288%" height="15" fill="rgb(251,22,52)"/><text x="54.3132%" y="799.50"></text></g><g><title>__libc_write (11 samples, 0.13%)</title><rect x="54.0632%" y="773" width="0.1288%" height="15" fill="rgb(229,209,22)"/><text x="54.3132%" y="783.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.12%)</title><rect x="54.3208%" y="885" width="0.1171%" height="15" fill="rgb(234,138,34)"/><text x="54.5708%" y="895.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.12%)</title><rect x="54.3208%" y="869" width="0.1171%" height="15" fill="rgb(212,95,11)"/><text x="54.5708%" y="879.50"></text></g><g><title>core::fmt::write (30 samples, 0.35%)</title><rect x="54.2272%" y="917" width="0.3513%" height="15" fill="rgb(240,179,47)"/><text x="54.4772%" y="927.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (25 samples, 0.29%)</title><rect x="54.2857%" y="901" width="0.2927%" height="15" fill="rgb(240,163,11)"/><text x="54.5357%" y="911.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (25 samples, 0.29%)</title><rect x="54.7424%" y="853" width="0.2927%" height="15" fill="rgb(236,37,12)"/><text x="54.9924%" y="863.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (25 samples, 0.29%)</title><rect x="54.7424%" y="837" width="0.2927%" height="15" fill="rgb(232,164,16)"/><text x="54.9924%" y="847.50"></text></g><g><title>std::sys::unix::pipe::AnonPipe::write (25 samples, 0.29%)</title><rect x="54.7424%" y="821" width="0.2927%" height="15" fill="rgb(244,205,15)"/><text x="54.9924%" y="831.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (25 samples, 0.29%)</title><rect x="54.7424%" y="805" width="0.2927%" height="15" fill="rgb(223,117,47)"/><text x="54.9924%" y="815.50"></text></g><g><title>__libc_write (25 samples, 0.29%)</title><rect x="54.7424%" y="789" width="0.2927%" height="15" fill="rgb(244,107,35)"/><text x="54.9924%" y="799.50"></text></g><g><title>__libc_write (25 samples, 0.29%)</title><rect x="54.7424%" y="773" width="0.2927%" height="15" fill="rgb(205,140,8)"/><text x="54.9924%" y="783.50"></text></g><g><title>[unknown] (25 samples, 0.29%)</title><rect x="54.7424%" y="757" width="0.2927%" height="15" fill="rgb(228,84,46)"/><text x="54.9924%" y="767.50"></text></g><g><title>[unknown] (25 samples, 0.29%)</title><rect x="54.7424%" y="741" width="0.2927%" height="15" fill="rgb(254,188,9)"/><text x="54.9924%" y="751.50"></text></g><g><title>[unknown] (24 samples, 0.28%)</title><rect x="54.7541%" y="725" width="0.2810%" height="15" fill="rgb(206,112,54)"/><text x="55.0041%" y="735.50"></text></g><g><title>[unknown] (24 samples, 0.28%)</title><rect x="54.7541%" y="709" width="0.2810%" height="15" fill="rgb(216,84,49)"/><text x="55.0041%" y="719.50"></text></g><g><title>[unknown] (24 samples, 0.28%)</title><rect x="54.7541%" y="693" width="0.2810%" height="15" fill="rgb(214,194,35)"/><text x="55.0041%" y="703.50"></text></g><g><title>[unknown] (24 samples, 0.28%)</title><rect x="54.7541%" y="677" width="0.2810%" height="15" fill="rgb(249,28,3)"/><text x="55.0041%" y="687.50"></text></g><g><title>[unknown] (22 samples, 0.26%)</title><rect x="54.7775%" y="661" width="0.2576%" height="15" fill="rgb(222,56,52)"/><text x="55.0275%" y="671.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="54.8009%" y="645" width="0.2342%" height="15" fill="rgb(245,217,50)"/><text x="55.0509%" y="655.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="54.8009%" y="629" width="0.2342%" height="15" fill="rgb(213,201,24)"/><text x="55.0509%" y="639.50"></text></g><g><title>[unknown] (18 samples, 0.21%)</title><rect x="54.8244%" y="613" width="0.2108%" height="15" fill="rgb(248,116,28)"/><text x="55.0744%" y="623.50"></text></g><g><title>[unknown] (16 samples, 0.19%)</title><rect x="54.8478%" y="597" width="0.1874%" height="15" fill="rgb(219,72,43)"/><text x="55.0978%" y="607.50"></text></g><g><title>[unknown] (14 samples, 0.16%)</title><rect x="54.8712%" y="581" width="0.1639%" height="15" fill="rgb(209,138,14)"/><text x="55.1212%" y="591.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="54.8829%" y="565" width="0.1522%" height="15" fill="rgb(222,18,33)"/><text x="55.1329%" y="575.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="54.8946%" y="549" width="0.1405%" height="15" fill="rgb(213,199,7)"/><text x="55.1446%" y="559.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="54.8946%" y="533" width="0.1405%" height="15" fill="rgb(250,110,10)"/><text x="55.1446%" y="543.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="54.9063%" y="517" width="0.1288%" height="15" fill="rgb(248,123,6)"/><text x="55.1563%" y="527.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="54.9297%" y="501" width="0.1054%" height="15" fill="rgb(206,91,31)"/><text x="55.1797%" y="511.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="54.9297%" y="485" width="0.1054%" height="15" fill="rgb(211,154,13)"/><text x="55.1797%" y="495.50"></text></g><g><title>mysql::conn::Conn::_query (27 samples, 0.32%)</title><rect x="54.7307%" y="901" width="0.3162%" height="15" fill="rgb(225,148,7)"/><text x="54.9807%" y="911.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (27 samples, 0.32%)</title><rect x="54.7307%" y="885" width="0.3162%" height="15" fill="rgb(220,160,43)"/><text x="54.9807%" y="895.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (26 samples, 0.30%)</title><rect x="54.7424%" y="869" width="0.3044%" height="15" fill="rgb(213,52,39)"/><text x="54.9924%" y="879.50"></text></g><g><title>decor_mem::ghosts_cache::GhostsCache::insert_uid2gids_for_values (37 samples, 0.43%)</title><rect x="54.6253%" y="917" width="0.4333%" height="15" fill="rgb(243,137,7)"/><text x="54.8753%" y="927.50"></text></g><g><title>_int_malloc (17 samples, 0.20%)</title><rect x="55.5621%" y="693" width="0.1991%" height="15" fill="rgb(230,79,13)"/><text x="55.8121%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.37%)</title><rect x="55.4098%" y="885" width="0.3747%" height="15" fill="rgb(247,105,23)"/><text x="55.6598%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.37%)</title><rect x="55.4098%" y="869" width="0.3747%" height="15" fill="rgb(223,179,41)"/><text x="55.6598%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32 samples, 0.37%)</title><rect x="55.4098%" y="853" width="0.3747%" height="15" fill="rgb(218,9,34)"/><text x="55.6598%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.37%)</title><rect x="55.4098%" y="837" width="0.3747%" height="15" fill="rgb(222,106,8)"/><text x="55.6598%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (31 samples, 0.36%)</title><rect x="55.4215%" y="821" width="0.3630%" height="15" fill="rgb(211,220,0)"/><text x="55.6715%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (31 samples, 0.36%)</title><rect x="55.4215%" y="805" width="0.3630%" height="15" fill="rgb(229,52,16)"/><text x="55.6715%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.36%)</title><rect x="55.4215%" y="789" width="0.3630%" height="15" fill="rgb(212,155,18)"/><text x="55.6715%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.36%)</title><rect x="55.4215%" y="773" width="0.3630%" height="15" fill="rgb(242,21,14)"/><text x="55.6715%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (31 samples, 0.36%)</title><rect x="55.4215%" y="757" width="0.3630%" height="15" fill="rgb(222,19,48)"/><text x="55.6715%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.36%)</title><rect x="55.4215%" y="741" width="0.3630%" height="15" fill="rgb(232,45,27)"/><text x="55.6715%" y="751.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.35%)</title><rect x="55.4333%" y="725" width="0.3513%" height="15" fill="rgb(249,103,42)"/><text x="55.6833%" y="735.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.35%)</title><rect x="55.4333%" y="709" width="0.3513%" height="15" fill="rgb(246,81,33)"/><text x="55.6833%" y="719.50"></text></g><g><title>__GI___libc_free (20 samples, 0.23%)</title><rect x="55.9953%" y="853" width="0.2342%" height="15" fill="rgb(252,33,42)"/><text x="56.2453%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (151 samples, 1.77%)</title><rect x="55.8431%" y="869" width="1.7681%" height="15" fill="rgb(209,212,41)"/><text x="56.0931%" y="879.50"></text></g><g><title>_int_free (112 samples, 1.31%)</title><rect x="56.2998%" y="853" width="1.3115%" height="15" fill="rgb(207,154,6)"/><text x="56.5498%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (205 samples, 2.40%)</title><rect x="55.8431%" y="885" width="2.4005%" height="15" fill="rgb(223,64,47)"/><text x="56.0931%" y="895.50">&lt;h..</text></g><g><title>_int_free (54 samples, 0.63%)</title><rect x="57.6112%" y="869" width="0.6323%" height="15" fill="rgb(211,161,38)"/><text x="57.8612%" y="879.50"></text></g><g><title>malloc_consolidate (54 samples, 0.63%)</title><rect x="57.6112%" y="853" width="0.6323%" height="15" fill="rgb(219,138,40)"/><text x="57.8612%" y="863.50"></text></g><g><title>__GI___libc_free (11 samples, 0.13%)</title><rect x="58.2436%" y="885" width="0.1288%" height="15" fill="rgb(241,228,46)"/><text x="58.4936%" y="895.50"></text></g><g><title>_int_malloc (15 samples, 0.18%)</title><rect x="58.5246%" y="869" width="0.1756%" height="15" fill="rgb(223,209,38)"/><text x="58.7746%" y="879.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.35%)</title><rect x="58.3724%" y="885" width="0.3513%" height="15" fill="rgb(236,164,45)"/><text x="58.6224%" y="895.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.12%)</title><rect x="58.7237%" y="885" width="0.1171%" height="15" fill="rgb(231,15,5)"/><text x="58.9737%" y="895.50"></text></g><g><title>malloc_consolidate (45 samples, 0.53%)</title><rect x="60.0117%" y="869" width="0.5269%" height="15" fill="rgb(252,35,15)"/><text x="60.2617%" y="879.50"></text></g><g><title>unlink_chunk (16 samples, 0.19%)</title><rect x="60.3513%" y="853" width="0.1874%" height="15" fill="rgb(248,181,18)"/><text x="60.6013%" y="863.50"></text></g><g><title>_int_free (141 samples, 1.65%)</title><rect x="58.8993%" y="885" width="1.6511%" height="15" fill="rgb(233,39,42)"/><text x="59.1493%" y="895.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.11%)</title><rect x="60.5621%" y="869" width="0.1054%" height="15" fill="rgb(238,110,33)"/><text x="60.8121%" y="879.50"></text></g><g><title>__memmove_avx_unaligned_erms (23 samples, 0.27%)</title><rect x="61.2646%" y="837" width="0.2693%" height="15" fill="rgb(233,195,10)"/><text x="61.5146%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (92 samples, 1.08%)</title><rect x="60.5504%" y="885" width="1.0773%" height="15" fill="rgb(254,105,3)"/><text x="60.8004%" y="895.50"></text></g><g><title>__GI___libc_realloc (82 samples, 0.96%)</title><rect x="60.6674%" y="869" width="0.9602%" height="15" fill="rgb(221,225,9)"/><text x="60.9174%" y="879.50"></text></g><g><title>_int_realloc (48 samples, 0.56%)</title><rect x="61.0656%" y="853" width="0.5621%" height="15" fill="rgb(224,227,45)"/><text x="61.3156%" y="863.50"></text></g><g><title>__GI___libc_free (31 samples, 0.36%)</title><rect x="61.9906%" y="869" width="0.3630%" height="15" fill="rgb(229,198,43)"/><text x="62.2406%" y="879.50"></text></g><g><title>_int_free (276 samples, 3.23%)</title><rect x="62.5059%" y="869" width="3.2319%" height="15" fill="rgb(206,209,35)"/><text x="62.7559%" y="879.50">_in..</text></g><g><title>malloc_consolidate (76 samples, 0.89%)</title><rect x="64.8478%" y="853" width="0.8899%" height="15" fill="rgb(245,195,53)"/><text x="65.0978%" y="863.50"></text></g><g><title>unlink_chunk (11 samples, 0.13%)</title><rect x="65.6089%" y="837" width="0.1288%" height="15" fill="rgb(240,92,26)"/><text x="65.8589%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (393 samples, 4.60%)</title><rect x="61.6276%" y="885" width="4.6019%" height="15" fill="rgb(207,40,23)"/><text x="61.8776%" y="895.50">core:..</text></g><g><title>core::ptr::drop_in_place (42 samples, 0.49%)</title><rect x="65.7377%" y="869" width="0.4918%" height="15" fill="rgb(223,111,35)"/><text x="65.9877%" y="879.50"></text></g><g><title>decor_mem::select::get_query_results (947 samples, 11.09%)</title><rect x="55.1522%" y="917" width="11.0890%" height="15" fill="rgb(229,147,28)"/><text x="55.4022%" y="927.50">decor_mem::selec..</text></g><g><title>decor_mem::select::get_setexpr_results (947 samples, 11.09%)</title><rect x="55.1522%" y="901" width="11.0890%" height="15" fill="rgb(211,29,28)"/><text x="55.4022%" y="911.50">decor_mem::selec..</text></g><g><title>decor_mem::views::Views::insert (24 samples, 0.28%)</title><rect x="66.2412%" y="917" width="0.2810%" height="15" fill="rgb(228,72,33)"/><text x="66.4912%" y="927.50"></text></g><g><title>decor_mem::views::View::insert_into_index (18 samples, 0.21%)</title><rect x="66.3115%" y="901" width="0.2108%" height="15" fill="rgb(205,214,31)"/><text x="66.5615%" y="911.50"></text></g><g><title>core::fmt::write (15 samples, 0.18%)</title><rect x="66.3466%" y="885" width="0.1756%" height="15" fill="rgb(224,111,15)"/><text x="66.5966%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="66.5340%" y="885" width="0.1054%" height="15" fill="rgb(253,21,26)"/><text x="66.7840%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="66.5340%" y="869" width="0.1054%" height="15" fill="rgb(245,139,43)"/><text x="66.7840%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.11%)</title><rect x="66.5340%" y="853" width="0.1054%" height="15" fill="rgb(252,170,7)"/><text x="66.7840%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.11%)</title><rect x="66.5340%" y="837" width="0.1054%" height="15" fill="rgb(231,118,14)"/><text x="66.7840%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="66.7096%" y="869" width="0.1171%" height="15" fill="rgb(238,83,0)"/><text x="66.9596%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="66.7096%" y="853" width="0.1171%" height="15" fill="rgb(221,39,39)"/><text x="66.9596%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.11%)</title><rect x="66.7213%" y="837" width="0.1054%" height="15" fill="rgb(222,119,46)"/><text x="66.9713%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.11%)</title><rect x="66.7213%" y="821" width="0.1054%" height="15" fill="rgb(222,165,49)"/><text x="66.9713%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.16%)</title><rect x="69.7541%" y="805" width="0.1639%" height="15" fill="rgb(219,113,52)"/><text x="70.0041%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (125 samples, 1.46%)</title><rect x="69.9649%" y="773" width="1.4637%" height="15" fill="rgb(214,7,15)"/><text x="70.2149%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (125 samples, 1.46%)</title><rect x="69.9649%" y="757" width="1.4637%" height="15" fill="rgb(235,32,4)"/><text x="70.2149%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (125 samples, 1.46%)</title><rect x="69.9649%" y="741" width="1.4637%" height="15" fill="rgb(238,90,54)"/><text x="70.2149%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (125 samples, 1.46%)</title><rect x="69.9649%" y="725" width="1.4637%" height="15" fill="rgb(213,208,19)"/><text x="70.2149%" y="735.50"></text></g><g><title>__memmove_avx_unaligned_erms (121 samples, 1.42%)</title><rect x="70.0117%" y="709" width="1.4169%" height="15" fill="rgb(233,156,4)"/><text x="70.2617%" y="719.50"></text></g><g><title>checked_request2size (17 samples, 0.20%)</title><rect x="76.8150%" y="629" width="0.1991%" height="15" fill="rgb(207,194,5)"/><text x="77.0650%" y="639.50"></text></g><g><title>_int_malloc (174 samples, 2.04%)</title><rect x="75.0234%" y="645" width="2.0375%" height="15" fill="rgb(206,111,30)"/><text x="75.2734%" y="655.50">_..</text></g><g><title>__GI___libc_malloc (490 samples, 5.74%)</title><rect x="71.4403%" y="661" width="5.7377%" height="15" fill="rgb(243,70,54)"/><text x="71.6903%" y="671.50">__GI___..</text></g><g><title>checked_request2size (10 samples, 0.12%)</title><rect x="77.0609%" y="645" width="0.1171%" height="15" fill="rgb(242,28,8)"/><text x="77.3109%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (888 samples, 10.40%)</title><rect x="66.8735%" y="853" width="10.3981%" height="15" fill="rgb(219,106,18)"/><text x="67.1235%" y="863.50">&lt;core::iter::ad..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (650 samples, 7.61%)</title><rect x="69.6604%" y="837" width="7.6112%" height="15" fill="rgb(244,222,10)"/><text x="69.9104%" y="847.50">&lt;alloc::st..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (642 samples, 7.52%)</title><rect x="69.7541%" y="821" width="7.5176%" height="15" fill="rgb(236,179,52)"/><text x="70.0041%" y="831.50">&lt;alloc::ve..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (628 samples, 7.35%)</title><rect x="69.9180%" y="805" width="7.3536%" height="15" fill="rgb(213,23,39)"/><text x="70.1680%" y="815.50">alloc::sli..</text></g><g><title>alloc::slice::hack::to_vec (628 samples, 7.35%)</title><rect x="69.9180%" y="789" width="7.3536%" height="15" fill="rgb(238,48,10)"/><text x="70.1680%" y="799.50">alloc::sli..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (499 samples, 5.84%)</title><rect x="71.4286%" y="773" width="5.8431%" height="15" fill="rgb(251,196,23)"/><text x="71.6786%" y="783.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (499 samples, 5.84%)</title><rect x="71.4286%" y="757" width="5.8431%" height="15" fill="rgb(250,152,24)"/><text x="71.6786%" y="767.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (499 samples, 5.84%)</title><rect x="71.4286%" y="741" width="5.8431%" height="15" fill="rgb(209,150,17)"/><text x="71.6786%" y="751.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (499 samples, 5.84%)</title><rect x="71.4286%" y="725" width="5.8431%" height="15" fill="rgb(234,202,34)"/><text x="71.6786%" y="735.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (499 samples, 5.84%)</title><rect x="71.4286%" y="709" width="5.8431%" height="15" fill="rgb(253,148,53)"/><text x="71.6786%" y="719.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (499 samples, 5.84%)</title><rect x="71.4286%" y="693" width="5.8431%" height="15" fill="rgb(218,129,16)"/><text x="71.6786%" y="703.50">alloc::..</text></g><g><title>alloc::alloc::alloc (499 samples, 5.84%)</title><rect x="71.4286%" y="677" width="5.8431%" height="15" fill="rgb(216,85,19)"/><text x="71.6786%" y="687.50">alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (964 samples, 11.29%)</title><rect x="66.8267%" y="869" width="11.2881%" height="15" fill="rgb(235,228,7)"/><text x="67.0767%" y="879.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>__GI___libc_malloc (72 samples, 0.84%)</title><rect x="77.2717%" y="853" width="0.8431%" height="15" fill="rgb(245,175,0)"/><text x="77.5217%" y="863.50"></text></g><g><title>_int_malloc (34 samples, 0.40%)</title><rect x="77.7166%" y="837" width="0.3981%" height="15" fill="rgb(208,168,36)"/><text x="77.9666%" y="847.50"></text></g><g><title>unlink_chunk (13 samples, 0.15%)</title><rect x="77.9625%" y="821" width="0.1522%" height="15" fill="rgb(246,171,24)"/><text x="78.2125%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="78.1382%" y="853" width="0.1054%" height="15" fill="rgb(215,142,24)"/><text x="78.3882%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.11%)</title><rect x="78.1382%" y="837" width="0.1054%" height="15" fill="rgb(250,187,7)"/><text x="78.3882%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.11%)</title><rect x="78.1382%" y="821" width="0.1054%" height="15" fill="rgb(228,66,33)"/><text x="78.3882%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.11%)</title><rect x="78.1382%" y="805" width="0.1054%" height="15" fill="rgb(234,215,21)"/><text x="78.3882%" y="815.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (17 samples, 0.20%)</title><rect x="78.1148%" y="869" width="0.1991%" height="15" fill="rgb(222,191,20)"/><text x="78.3648%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (1,000 samples, 11.71%)</title><rect x="66.6393%" y="885" width="11.7096%" height="15" fill="rgb(245,79,54)"/><text x="66.8893%" y="895.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.22%)</title><rect x="79.1218%" y="821" width="0.2225%" height="15" fill="rgb(240,10,37)"/><text x="79.3718%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (18 samples, 0.21%)</title><rect x="79.1335%" y="805" width="0.2108%" height="15" fill="rgb(214,192,32)"/><text x="79.3835%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (46 samples, 0.54%)</title><rect x="79.3677%" y="789" width="0.5386%" height="15" fill="rgb(209,36,54)"/><text x="79.6177%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.54%)</title><rect x="79.3677%" y="773" width="0.5386%" height="15" fill="rgb(220,10,11)"/><text x="79.6177%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (46 samples, 0.54%)</title><rect x="79.3677%" y="757" width="0.5386%" height="15" fill="rgb(221,106,17)"/><text x="79.6177%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.54%)</title><rect x="79.3677%" y="741" width="0.5386%" height="15" fill="rgb(251,142,44)"/><text x="79.6177%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (46 samples, 0.54%)</title><rect x="79.3677%" y="725" width="0.5386%" height="15" fill="rgb(238,13,15)"/><text x="79.6177%" y="735.50"></text></g><g><title>_int_malloc (42 samples, 0.49%)</title><rect x="80.7143%" y="661" width="0.4918%" height="15" fill="rgb(208,107,27)"/><text x="80.9643%" y="671.50"></text></g><g><title>__GI___libc_malloc (111 samples, 1.30%)</title><rect x="79.9297%" y="677" width="1.2998%" height="15" fill="rgb(205,136,37)"/><text x="80.1797%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (185 samples, 2.17%)</title><rect x="79.0867%" y="853" width="2.1663%" height="15" fill="rgb(250,205,27)"/><text x="79.3367%" y="863.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (182 samples, 2.13%)</title><rect x="79.1218%" y="837" width="2.1311%" height="15" fill="rgb(210,80,43)"/><text x="79.3718%" y="847.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (163 samples, 1.91%)</title><rect x="79.3443%" y="821" width="1.9087%" height="15" fill="rgb(247,160,36)"/><text x="79.5943%" y="831.50">a..</text></g><g><title>alloc::slice::hack::to_vec (163 samples, 1.91%)</title><rect x="79.3443%" y="805" width="1.9087%" height="15" fill="rgb(234,13,49)"/><text x="79.5943%" y="815.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (115 samples, 1.35%)</title><rect x="79.9063%" y="789" width="1.3466%" height="15" fill="rgb(234,122,0)"/><text x="80.1563%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (115 samples, 1.35%)</title><rect x="79.9063%" y="773" width="1.3466%" height="15" fill="rgb(207,146,38)"/><text x="80.1563%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (115 samples, 1.35%)</title><rect x="79.9063%" y="757" width="1.3466%" height="15" fill="rgb(207,177,25)"/><text x="80.1563%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (115 samples, 1.35%)</title><rect x="79.9063%" y="741" width="1.3466%" height="15" fill="rgb(211,178,42)"/><text x="80.1563%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (115 samples, 1.35%)</title><rect x="79.9063%" y="725" width="1.3466%" height="15" fill="rgb(230,69,54)"/><text x="80.1563%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (115 samples, 1.35%)</title><rect x="79.9063%" y="709" width="1.3466%" height="15" fill="rgb(214,135,41)"/><text x="80.1563%" y="719.50"></text></g><g><title>alloc::alloc::alloc (115 samples, 1.35%)</title><rect x="79.9063%" y="693" width="1.3466%" height="15" fill="rgb(237,67,25)"/><text x="80.1563%" y="703.50"></text></g><g><title>_int_malloc (55 samples, 0.64%)</title><rect x="82.0609%" y="837" width="0.6440%" height="15" fill="rgb(222,189,50)"/><text x="82.3109%" y="847.50"></text></g><g><title>__GI___libc_malloc (126 samples, 1.48%)</title><rect x="81.2529%" y="853" width="1.4754%" height="15" fill="rgb(245,148,34)"/><text x="81.5029%" y="863.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.25%)</title><rect x="82.7283%" y="853" width="0.2459%" height="15" fill="rgb(222,29,6)"/><text x="82.9783%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (390 samples, 4.57%)</title><rect x="78.4309%" y="869" width="4.5667%" height="15" fill="rgb(221,189,43)"/><text x="78.6809%" y="879.50">&lt;hash..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (399 samples, 4.67%)</title><rect x="78.3489%" y="885" width="4.6721%" height="15" fill="rgb(207,36,27)"/><text x="78.5989%" y="895.50">&lt;hash..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (1,411 samples, 16.52%)</title><rect x="66.5222%" y="901" width="16.5222%" height="15" fill="rgb(217,90,24)"/><text x="66.7722%" y="911.50">&lt;hashbrown::raw::RawTable&lt;..</text></g><g><title>__GI___libc_free (11 samples, 0.13%)</title><rect x="83.2904%" y="853" width="0.1288%" height="15" fill="rgb(224,66,35)"/><text x="83.5404%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 1.46%)</title><rect x="83.0562%" y="869" width="1.4637%" height="15" fill="rgb(221,13,50)"/><text x="83.3062%" y="879.50"></text></g><g><title>_int_free (90 samples, 1.05%)</title><rect x="83.4660%" y="853" width="1.0539%" height="15" fill="rgb(236,68,49)"/><text x="83.7160%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (291 samples, 3.41%)</title><rect x="83.0562%" y="885" width="3.4075%" height="15" fill="rgb(229,146,28)"/><text x="83.3062%" y="895.50">&lt;ha..</text></g><g><title>_int_free (166 samples, 1.94%)</title><rect x="84.5199%" y="869" width="1.9438%" height="15" fill="rgb(225,31,38)"/><text x="84.7699%" y="879.50">_..</text></g><g><title>malloc_consolidate (165 samples, 1.93%)</title><rect x="84.5316%" y="853" width="1.9321%" height="15" fill="rgb(250,208,3)"/><text x="84.7816%" y="863.50">m..</text></g><g><title>unlink_chunk (53 samples, 0.62%)</title><rect x="85.8431%" y="837" width="0.6206%" height="15" fill="rgb(246,54,23)"/><text x="86.0931%" y="847.50"></text></g><g><title>_int_free (11 samples, 0.13%)</title><rect x="86.5691%" y="869" width="0.1288%" height="15" fill="rgb(243,76,11)"/><text x="86.8191%" y="879.50"></text></g><g><title>__GI___libc_free (41 samples, 0.48%)</title><rect x="86.8384%" y="853" width="0.4801%" height="15" fill="rgb(245,21,50)"/><text x="87.0884%" y="863.50"></text></g><g><title>_int_free (225 samples, 2.63%)</title><rect x="87.3888%" y="853" width="2.6347%" height="15" fill="rgb(228,9,43)"/><text x="87.6388%" y="863.50">_i..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (640 samples, 7.49%)</title><rect x="83.0445%" y="901" width="7.4941%" height="15" fill="rgb(208,100,47)"/><text x="83.2945%" y="911.50">&lt;hashbrown..</text></g><g><title>core::ptr::drop_in_place (346 samples, 4.05%)</title><rect x="86.4871%" y="885" width="4.0515%" height="15" fill="rgb(232,26,8)"/><text x="86.7371%" y="895.50">core..</text></g><g><title>core::ptr::drop_in_place (328 samples, 3.84%)</title><rect x="86.6979%" y="869" width="3.8407%" height="15" fill="rgb(216,166,38)"/><text x="86.9479%" y="879.50">core..</text></g><g><title>core::ptr::drop_in_place (44 samples, 0.52%)</title><rect x="90.0234%" y="853" width="0.5152%" height="15" fill="rgb(251,202,51)"/><text x="90.2734%" y="863.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.11%)</title><rect x="90.6674%" y="693" width="0.1054%" height="15" fill="rgb(254,216,34)"/><text x="90.9174%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="90.6674%" y="869" width="0.1171%" height="15" fill="rgb(251,32,27)"/><text x="90.9174%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.12%)</title><rect x="90.6674%" y="853" width="0.1171%" height="15" fill="rgb(208,127,28)"/><text x="90.9174%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.12%)</title><rect x="90.6674%" y="837" width="0.1171%" height="15" fill="rgb(224,137,22)"/><text x="90.9174%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.12%)</title><rect x="90.6674%" y="821" width="0.1171%" height="15" fill="rgb(254,70,32)"/><text x="90.9174%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.12%)</title><rect x="90.6674%" y="805" width="0.1171%" height="15" fill="rgb(229,75,37)"/><text x="90.9174%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.12%)</title><rect x="90.6674%" y="789" width="0.1171%" height="15" fill="rgb(252,64,23)"/><text x="90.9174%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.12%)</title><rect x="90.6674%" y="773" width="0.1171%" height="15" fill="rgb(232,162,48)"/><text x="90.9174%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.12%)</title><rect x="90.6674%" y="757" width="0.1171%" height="15" fill="rgb(246,160,12)"/><text x="90.9174%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.12%)</title><rect x="90.6674%" y="741" width="0.1171%" height="15" fill="rgb(247,166,0)"/><text x="90.9174%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.12%)</title><rect x="90.6674%" y="725" width="0.1171%" height="15" fill="rgb(249,219,21)"/><text x="90.9174%" y="735.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.12%)</title><rect x="90.6674%" y="709" width="0.1171%" height="15" fill="rgb(205,209,3)"/><text x="90.9174%" y="719.50"></text></g><g><title>decor_mem::select::get_value_for_rows (19 samples, 0.22%)</title><rect x="90.5855%" y="885" width="0.2225%" height="15" fill="rgb(243,44,1)"/><text x="90.8355%" y="895.50"></text></g><g><title>decor_mem::select::get_rows_matching_constraint (23 samples, 0.27%)</title><rect x="90.5504%" y="901" width="0.2693%" height="15" fill="rgb(206,159,16)"/><text x="90.8004%" y="911.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (3,160 samples, 37.00%)</title><rect x="53.9344%" y="933" width="37.0023%" height="15" fill="rgb(244,77,30)"/><text x="54.1844%" y="943.50">decor_mem::query_transformer::QueryTransformer::issue_statem..</text></g><g><title>decor_mem::views::Views::update (2,085 samples, 24.41%)</title><rect x="66.5222%" y="917" width="24.4145%" height="15" fill="rgb(218,69,12)"/><text x="66.7722%" y="927.50">decor_mem::views::Views::update</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.12%)</title><rect x="91.2998%" y="885" width="0.1171%" height="15" fill="rgb(212,87,7)"/><text x="91.5498%" y="895.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.12%)</title><rect x="91.2998%" y="869" width="0.1171%" height="15" fill="rgb(245,114,25)"/><text x="91.5498%" y="879.50"></text></g><g><title>_int_realloc (10 samples, 0.12%)</title><rect x="91.2998%" y="853" width="0.1171%" height="15" fill="rgb(210,61,42)"/><text x="91.5498%" y="863.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (17 samples, 0.20%)</title><rect x="91.4637%" y="869" width="0.1991%" height="15" fill="rgb(211,52,33)"/><text x="91.7137%" y="879.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (10 samples, 0.12%)</title><rect x="91.5457%" y="853" width="0.1171%" height="15" fill="rgb(234,58,33)"/><text x="91.7957%" y="863.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (9 samples, 0.11%)</title><rect x="91.5574%" y="837" width="0.1054%" height="15" fill="rgb(220,115,36)"/><text x="91.8074%" y="847.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (9 samples, 0.11%)</title><rect x="91.5574%" y="821" width="0.1054%" height="15" fill="rgb(243,153,54)"/><text x="91.8074%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (9 samples, 0.11%)</title><rect x="91.5574%" y="805" width="0.1054%" height="15" fill="rgb(251,47,18)"/><text x="91.8074%" y="815.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (26 samples, 0.30%)</title><rect x="91.4169%" y="885" width="0.3044%" height="15" fill="rgb(242,102,42)"/><text x="91.6669%" y="895.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (3,233 samples, 37.86%)</title><rect x="53.8876%" y="965" width="37.8571%" height="15" fill="rgb(234,31,38)"/><text x="54.1376%" y="975.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (3,229 samples, 37.81%)</title><rect x="53.9344%" y="949" width="37.8103%" height="15" fill="rgb(221,117,51)"/><text x="54.1844%" y="959.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (69 samples, 0.81%)</title><rect x="90.9368%" y="933" width="0.8080%" height="15" fill="rgb(212,20,18)"/><text x="91.1868%" y="943.50"></text></g><g><title>sql_parser::parser::parse_statements (61 samples, 0.71%)</title><rect x="91.0304%" y="917" width="0.7143%" height="15" fill="rgb(245,133,36)"/><text x="91.2804%" y="927.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (43 samples, 0.50%)</title><rect x="91.2412%" y="901" width="0.5035%" height="15" fill="rgb(212,6,19)"/><text x="91.4912%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (33 samples, 0.39%)</title><rect x="91.9906%" y="789" width="0.3864%" height="15" fill="rgb(218,1,36)"/><text x="92.2406%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (33 samples, 0.39%)</title><rect x="91.9906%" y="773" width="0.3864%" height="15" fill="rgb(246,84,54)"/><text x="92.2406%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (33 samples, 0.39%)</title><rect x="91.9906%" y="757" width="0.3864%" height="15" fill="rgb(242,110,6)"/><text x="92.2406%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.39%)</title><rect x="91.9906%" y="741" width="0.3864%" height="15" fill="rgb(214,47,5)"/><text x="92.2406%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (33 samples, 0.39%)</title><rect x="91.9906%" y="725" width="0.3864%" height="15" fill="rgb(218,159,25)"/><text x="92.2406%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (35 samples, 0.41%)</title><rect x="91.9906%" y="853" width="0.4098%" height="15" fill="rgb(215,211,28)"/><text x="92.2406%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (35 samples, 0.41%)</title><rect x="91.9906%" y="837" width="0.4098%" height="15" fill="rgb(238,59,32)"/><text x="92.2406%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 0.41%)</title><rect x="91.9906%" y="821" width="0.4098%" height="15" fill="rgb(226,82,3)"/><text x="92.2406%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.41%)</title><rect x="91.9906%" y="805" width="0.4098%" height="15" fill="rgb(240,164,32)"/><text x="92.2406%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (48 samples, 0.56%)</title><rect x="91.8970%" y="885" width="0.5621%" height="15" fill="rgb(232,46,7)"/><text x="92.1470%" y="895.50"></text></g><g><title>sql_parser::parser::Parser::expected (45 samples, 0.53%)</title><rect x="91.9321%" y="869" width="0.5269%" height="15" fill="rgb(229,129,53)"/><text x="92.1821%" y="879.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (59 samples, 0.69%)</title><rect x="91.8501%" y="933" width="0.6909%" height="15" fill="rgb(234,188,29)"/><text x="92.1001%" y="943.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (59 samples, 0.69%)</title><rect x="91.8501%" y="917" width="0.6909%" height="15" fill="rgb(246,141,4)"/><text x="92.1001%" y="927.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (59 samples, 0.69%)</title><rect x="91.8501%" y="901" width="0.6909%" height="15" fill="rgb(229,23,39)"/><text x="92.1001%" y="911.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (13 samples, 0.15%)</title><rect x="92.5410%" y="901" width="0.1522%" height="15" fill="rgb(206,12,3)"/><text x="92.7910%" y="911.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (10 samples, 0.12%)</title><rect x="92.5761%" y="885" width="0.1171%" height="15" fill="rgb(252,226,20)"/><text x="92.8261%" y="895.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (27 samples, 0.32%)</title><rect x="92.5410%" y="917" width="0.3162%" height="15" fill="rgb(216,123,35)"/><text x="92.7910%" y="927.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (14 samples, 0.16%)</title><rect x="92.6932%" y="901" width="0.1639%" height="15" fill="rgb(212,68,40)"/><text x="92.9432%" y="911.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (97 samples, 1.14%)</title><rect x="91.8150%" y="965" width="1.1358%" height="15" fill="rgb(254,125,32)"/><text x="92.0650%" y="975.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (94 samples, 1.10%)</title><rect x="91.8501%" y="949" width="1.1007%" height="15" fill="rgb(253,97,22)"/><text x="92.1001%" y="959.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (35 samples, 0.41%)</title><rect x="92.5410%" y="933" width="0.4098%" height="15" fill="rgb(241,101,14)"/><text x="92.7910%" y="943.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (12 samples, 0.14%)</title><rect x="93.0094%" y="965" width="0.1405%" height="15" fill="rgb(238,103,29)"/><text x="93.2594%" y="975.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (10 samples, 0.12%)</title><rect x="93.0328%" y="949" width="0.1171%" height="15" fill="rgb(233,195,47)"/><text x="93.2828%" y="959.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (10 samples, 0.12%)</title><rect x="93.3255%" y="917" width="0.1171%" height="15" fill="rgb(246,218,30)"/><text x="93.5755%" y="927.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (10 samples, 0.12%)</title><rect x="93.4426%" y="917" width="0.1171%" height="15" fill="rgb(219,145,47)"/><text x="93.6926%" y="927.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (19 samples, 0.22%)</title><rect x="93.6183%" y="901" width="0.2225%" height="15" fill="rgb(243,12,26)"/><text x="93.8683%" y="911.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (68 samples, 0.80%)</title><rect x="93.2201%" y="965" width="0.7963%" height="15" fill="rgb(214,87,16)"/><text x="93.4701%" y="975.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (68 samples, 0.80%)</title><rect x="93.2201%" y="949" width="0.7963%" height="15" fill="rgb(208,99,42)"/><text x="93.4701%" y="959.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (60 samples, 0.70%)</title><rect x="93.3138%" y="933" width="0.7026%" height="15" fill="rgb(253,99,2)"/><text x="93.5638%" y="943.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (39 samples, 0.46%)</title><rect x="93.5597%" y="917" width="0.4567%" height="15" fill="rgb(220,168,23)"/><text x="93.8097%" y="927.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (14 samples, 0.16%)</title><rect x="93.8525%" y="901" width="0.1639%" height="15" fill="rgb(242,38,24)"/><text x="94.1025%" y="911.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (25 samples, 0.29%)</title><rect x="94.1101%" y="917" width="0.2927%" height="15" fill="rgb(225,182,9)"/><text x="94.3601%" y="927.50"></text></g><g><title>sql_parser::parser::parse_statements (36 samples, 0.42%)</title><rect x="94.0398%" y="965" width="0.4215%" height="15" fill="rgb(243,178,37)"/><text x="94.2898%" y="975.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (36 samples, 0.42%)</title><rect x="94.0398%" y="949" width="0.4215%" height="15" fill="rgb(232,139,19)"/><text x="94.2898%" y="959.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 0.42%)</title><rect x="94.0398%" y="933" width="0.4215%" height="15" fill="rgb(225,201,24)"/><text x="94.2898%" y="943.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (10 samples, 0.12%)</title><rect x="94.4965%" y="965" width="0.1171%" height="15" fill="rgb(221,47,46)"/><text x="94.7465%" y="975.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10 samples, 0.12%)</title><rect x="94.4965%" y="949" width="0.1171%" height="15" fill="rgb(249,23,13)"/><text x="94.7465%" y="959.50"></text></g><g><title>lobsters_microbenchmarks::main (10 samples, 0.12%)</title><rect x="94.4965%" y="933" width="0.1171%" height="15" fill="rgb(219,9,5)"/><text x="94.7465%" y="943.50"></text></g><g><title>lobsters_microbenchmarks::queriers::comment::post_comment (10 samples, 0.12%)</title><rect x="94.4965%" y="917" width="0.1171%" height="15" fill="rgb(254,171,16)"/><text x="94.7465%" y="927.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="94.4965%" y="901" width="0.1171%" height="15" fill="rgb(230,171,20)"/><text x="94.7465%" y="911.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.12%)</title><rect x="94.4965%" y="885" width="0.1171%" height="15" fill="rgb(210,71,41)"/><text x="94.7465%" y="895.50"></text></g><g><title>std::rt::lang_start_internal (9 samples, 0.11%)</title><rect x="94.6136%" y="965" width="0.1054%" height="15" fill="rgb(206,173,20)"/><text x="94.8636%" y="975.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.11%)</title><rect x="94.6136%" y="949" width="0.1054%" height="15" fill="rgb(233,88,34)"/><text x="94.8636%" y="959.50"></text></g><g><title>std::panicking::try (9 samples, 0.11%)</title><rect x="94.6136%" y="933" width="0.1054%" height="15" fill="rgb(223,209,46)"/><text x="94.8636%" y="943.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.11%)</title><rect x="94.6136%" y="917" width="0.1054%" height="15" fill="rgb(250,43,18)"/><text x="94.8636%" y="927.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9 samples, 0.11%)</title><rect x="94.6136%" y="901" width="0.1054%" height="15" fill="rgb(208,13,10)"/><text x="94.8636%" y="911.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (9 samples, 0.11%)</title><rect x="94.6136%" y="885" width="0.1054%" height="15" fill="rgb(212,200,36)"/><text x="94.8636%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 0.11%)</title><rect x="94.6136%" y="869" width="0.1054%" height="15" fill="rgb(225,90,30)"/><text x="94.8636%" y="879.50"></text></g><g><title>lobsters_microbenchmarks::main (9 samples, 0.11%)</title><rect x="94.6136%" y="853" width="0.1054%" height="15" fill="rgb(236,182,39)"/><text x="94.8636%" y="863.50"></text></g><g><title>[unknown] (7,588 samples, 88.85%)</title><rect x="5.9133%" y="981" width="88.8525%" height="15" fill="rgb(212,144,35)"/><text x="6.1633%" y="991.50">[unknown]</text></g><g><title>_int_free (67 samples, 0.78%)</title><rect x="95.1991%" y="805" width="0.7845%" height="15" fill="rgb(228,63,44)"/><text x="95.4491%" y="815.50"></text></g><g><title>malloc_consolidate (53 samples, 0.62%)</title><rect x="95.3630%" y="789" width="0.6206%" height="15" fill="rgb(228,109,6)"/><text x="95.6130%" y="799.50"></text></g><g><title>unlink_chunk (19 samples, 0.22%)</title><rect x="95.7611%" y="773" width="0.2225%" height="15" fill="rgb(238,117,24)"/><text x="96.0111%" y="783.50"></text></g><g><title>decor_mem::helpers::parser_val_to_common_val (11 samples, 0.13%)</title><rect x="95.9836%" y="805" width="0.1288%" height="15" fill="rgb(242,26,26)"/><text x="96.2336%" y="815.50"></text></g><g><title>msql_srv::resultset::QueryResultWriter&lt;W&gt;::start (10 samples, 0.12%)</title><rect x="96.1124%" y="805" width="0.1171%" height="15" fill="rgb(221,92,48)"/><text x="96.3624%" y="815.50"></text></g><g><title>msql_srv::writers::column_definitions (10 samples, 0.12%)</title><rect x="96.1124%" y="789" width="0.1171%" height="15" fill="rgb(209,209,32)"/><text x="96.3624%" y="799.50"></text></g><g><title>alloc::fmt::format (17 samples, 0.20%)</title><rect x="96.3934%" y="757" width="0.1991%" height="15" fill="rgb(221,70,22)"/><text x="96.6434%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (15 samples, 0.18%)</title><rect x="96.4169%" y="741" width="0.1756%" height="15" fill="rgb(248,145,5)"/><text x="96.6669%" y="751.50"></text></g><g><title>core::fmt::write (12 samples, 0.14%)</title><rect x="96.4520%" y="725" width="0.1405%" height="15" fill="rgb(226,116,26)"/><text x="96.7020%" y="735.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (9 samples, 0.11%)</title><rect x="96.4871%" y="709" width="0.1054%" height="15" fill="rgb(244,5,17)"/><text x="96.7371%" y="719.50"></text></g><g><title>decor_mem::helpers::view_to_answer_rows (148 samples, 1.73%)</title><rect x="94.8712%" y="821" width="1.7330%" height="15" fill="rgb(252,159,33)"/><text x="95.1212%" y="831.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (27 samples, 0.32%)</title><rect x="96.2881%" y="805" width="0.3162%" height="15" fill="rgb(206,71,0)"/><text x="96.5381%" y="815.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (27 samples, 0.32%)</title><rect x="96.2881%" y="789" width="0.3162%" height="15" fill="rgb(233,118,54)"/><text x="96.5381%" y="799.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (23 samples, 0.27%)</title><rect x="96.3349%" y="773" width="0.2693%" height="15" fill="rgb(234,83,48)"/><text x="96.5849%" y="783.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (163 samples, 1.91%)</title><rect x="94.7892%" y="837" width="1.9087%" height="15" fill="rgb(228,3,54)"/><text x="95.0392%" y="847.50">&lt;..</text></g><g><title>core::ptr::drop_in_place (16 samples, 0.19%)</title><rect x="96.6979%" y="837" width="0.1874%" height="15" fill="rgb(226,155,13)"/><text x="96.9479%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.19%)</title><rect x="96.6979%" y="821" width="0.1874%" height="15" fill="rgb(241,28,37)"/><text x="96.9479%" y="831.50"></text></g><g><title>decor_mem::stats::print_stats (9 samples, 0.11%)</title><rect x="96.7799%" y="805" width="0.1054%" height="15" fill="rgb(233,93,10)"/><text x="97.0299%" y="815.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (9 samples, 0.11%)</title><rect x="96.7799%" y="789" width="0.1054%" height="15" fill="rgb(225,113,19)"/><text x="97.0299%" y="799.50"></text></g><g><title>std::sys::unix::fs::File::write (9 samples, 0.11%)</title><rect x="96.7799%" y="773" width="0.1054%" height="15" fill="rgb(241,2,18)"/><text x="97.0299%" y="783.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (9 samples, 0.11%)</title><rect x="96.7799%" y="757" width="0.1054%" height="15" fill="rgb(228,207,21)"/><text x="97.0299%" y="767.50"></text></g><g><title>__libc_write (9 samples, 0.11%)</title><rect x="96.7799%" y="741" width="0.1054%" height="15" fill="rgb(213,211,35)"/><text x="97.0299%" y="751.50"></text></g><g><title>__libc_write (9 samples, 0.11%)</title><rect x="96.7799%" y="725" width="0.1054%" height="15" fill="rgb(209,83,10)"/><text x="97.0299%" y="735.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="96.7799%" y="709" width="0.1054%" height="15" fill="rgb(209,164,1)"/><text x="97.0299%" y="719.50"></text></g><g><title>[unknown] (9 samples, 0.11%)</title><rect x="96.7799%" y="693" width="0.1054%" height="15" fill="rgb(213,184,43)"/><text x="97.0299%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (27 samples, 0.32%)</title><rect x="96.9321%" y="805" width="0.3162%" height="15" fill="rgb(231,61,34)"/><text x="97.1821%" y="815.50"></text></g><g><title>std::sys_common::net::TcpStream::read (27 samples, 0.32%)</title><rect x="96.9321%" y="789" width="0.3162%" height="15" fill="rgb(235,75,3)"/><text x="97.1821%" y="799.50"></text></g><g><title>std::sys::unix::net::Socket::read (27 samples, 0.32%)</title><rect x="96.9321%" y="773" width="0.3162%" height="15" fill="rgb(220,106,47)"/><text x="97.1821%" y="783.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (27 samples, 0.32%)</title><rect x="96.9321%" y="757" width="0.3162%" height="15" fill="rgb(210,196,33)"/><text x="97.1821%" y="767.50"></text></g><g><title>__libc_recv (27 samples, 0.32%)</title><rect x="96.9321%" y="741" width="0.3162%" height="15" fill="rgb(229,154,42)"/><text x="97.1821%" y="751.50"></text></g><g><title>__libc_recv (26 samples, 0.30%)</title><rect x="96.9438%" y="725" width="0.3044%" height="15" fill="rgb(228,114,26)"/><text x="97.1938%" y="735.50"></text></g><g><title>[unknown] (26 samples, 0.30%)</title><rect x="96.9438%" y="709" width="0.3044%" height="15" fill="rgb(208,144,1)"/><text x="97.1938%" y="719.50"></text></g><g><title>[unknown] (26 samples, 0.30%)</title><rect x="96.9438%" y="693" width="0.3044%" height="15" fill="rgb(239,112,37)"/><text x="97.1938%" y="703.50"></text></g><g><title>[unknown] (21 samples, 0.25%)</title><rect x="97.0023%" y="677" width="0.2459%" height="15" fill="rgb(210,96,50)"/><text x="97.2523%" y="687.50"></text></g><g><title>[unknown] (21 samples, 0.25%)</title><rect x="97.0023%" y="661" width="0.2459%" height="15" fill="rgb(222,178,2)"/><text x="97.2523%" y="671.50"></text></g><g><title>[unknown] (21 samples, 0.25%)</title><rect x="97.0023%" y="645" width="0.2459%" height="15" fill="rgb(226,74,18)"/><text x="97.2523%" y="655.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="97.0141%" y="629" width="0.2342%" height="15" fill="rgb(225,67,54)"/><text x="97.2641%" y="639.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="97.0141%" y="613" width="0.2342%" height="15" fill="rgb(251,92,32)"/><text x="97.2641%" y="623.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="97.0141%" y="597" width="0.2342%" height="15" fill="rgb(228,149,22)"/><text x="97.2641%" y="607.50"></text></g><g><title>[unknown] (18 samples, 0.21%)</title><rect x="97.0375%" y="581" width="0.2108%" height="15" fill="rgb(243,54,13)"/><text x="97.2875%" y="591.50"></text></g><g><title>[unknown] (16 samples, 0.19%)</title><rect x="97.0609%" y="565" width="0.1874%" height="15" fill="rgb(243,180,28)"/><text x="97.3109%" y="575.50"></text></g><g><title>[unknown] (14 samples, 0.16%)</title><rect x="97.0843%" y="549" width="0.1639%" height="15" fill="rgb(208,167,24)"/><text x="97.3343%" y="559.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="97.0960%" y="533" width="0.1522%" height="15" fill="rgb(245,73,45)"/><text x="97.3460%" y="543.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (29 samples, 0.34%)</title><rect x="96.9204%" y="821" width="0.3396%" height="15" fill="rgb(237,203,48)"/><text x="97.1704%" y="831.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (33 samples, 0.39%)</title><rect x="96.8970%" y="837" width="0.3864%" height="15" fill="rgb(211,197,16)"/><text x="97.1470%" y="847.50"></text></g><g><title>[unknown] (127 samples, 1.49%)</title><rect x="97.2834%" y="757" width="1.4871%" height="15" fill="rgb(243,99,51)"/><text x="97.5334%" y="767.50"></text></g><g><title>[unknown] (127 samples, 1.49%)</title><rect x="97.2834%" y="741" width="1.4871%" height="15" fill="rgb(215,123,29)"/><text x="97.5334%" y="751.50"></text></g><g><title>[unknown] (124 samples, 1.45%)</title><rect x="97.3185%" y="725" width="1.4520%" height="15" fill="rgb(239,186,37)"/><text x="97.5685%" y="735.50"></text></g><g><title>[unknown] (124 samples, 1.45%)</title><rect x="97.3185%" y="709" width="1.4520%" height="15" fill="rgb(252,136,39)"/><text x="97.5685%" y="719.50"></text></g><g><title>[unknown] (120 samples, 1.41%)</title><rect x="97.3653%" y="693" width="1.4052%" height="15" fill="rgb(223,213,32)"/><text x="97.6153%" y="703.50"></text></g><g><title>[unknown] (120 samples, 1.41%)</title><rect x="97.3653%" y="677" width="1.4052%" height="15" fill="rgb(233,115,5)"/><text x="97.6153%" y="687.50"></text></g><g><title>[unknown] (115 samples, 1.35%)</title><rect x="97.4239%" y="661" width="1.3466%" height="15" fill="rgb(207,226,44)"/><text x="97.6739%" y="671.50"></text></g><g><title>[unknown] (113 samples, 1.32%)</title><rect x="97.4473%" y="645" width="1.3232%" height="15" fill="rgb(208,126,0)"/><text x="97.6973%" y="655.50"></text></g><g><title>[unknown] (110 samples, 1.29%)</title><rect x="97.4824%" y="629" width="1.2881%" height="15" fill="rgb(244,66,21)"/><text x="97.7324%" y="639.50"></text></g><g><title>[unknown] (108 samples, 1.26%)</title><rect x="97.5059%" y="613" width="1.2646%" height="15" fill="rgb(222,97,12)"/><text x="97.7559%" y="623.50"></text></g><g><title>[unknown] (102 samples, 1.19%)</title><rect x="97.5761%" y="597" width="1.1944%" height="15" fill="rgb(219,213,19)"/><text x="97.8261%" y="607.50"></text></g><g><title>[unknown] (94 samples, 1.10%)</title><rect x="97.6698%" y="581" width="1.1007%" height="15" fill="rgb(252,169,30)"/><text x="97.9198%" y="591.50"></text></g><g><title>[unknown] (84 samples, 0.98%)</title><rect x="97.7869%" y="565" width="0.9836%" height="15" fill="rgb(206,32,51)"/><text x="98.0369%" y="575.50"></text></g><g><title>[unknown] (84 samples, 0.98%)</title><rect x="97.7869%" y="549" width="0.9836%" height="15" fill="rgb(250,172,42)"/><text x="98.0369%" y="559.50"></text></g><g><title>[unknown] (83 samples, 0.97%)</title><rect x="97.7986%" y="533" width="0.9719%" height="15" fill="rgb(209,34,43)"/><text x="98.0486%" y="543.50"></text></g><g><title>[unknown] (82 samples, 0.96%)</title><rect x="97.8103%" y="517" width="0.9602%" height="15" fill="rgb(223,11,35)"/><text x="98.0603%" y="527.50"></text></g><g><title>[unknown] (79 samples, 0.93%)</title><rect x="97.8454%" y="501" width="0.9251%" height="15" fill="rgb(251,219,26)"/><text x="98.0954%" y="511.50"></text></g><g><title>[unknown] (78 samples, 0.91%)</title><rect x="97.8571%" y="485" width="0.9133%" height="15" fill="rgb(231,119,3)"/><text x="98.1071%" y="495.50"></text></g><g><title>[unknown] (72 samples, 0.84%)</title><rect x="97.9274%" y="469" width="0.8431%" height="15" fill="rgb(216,97,11)"/><text x="98.1774%" y="479.50"></text></g><g><title>[unknown] (63 samples, 0.74%)</title><rect x="98.0328%" y="453" width="0.7377%" height="15" fill="rgb(223,59,9)"/><text x="98.2828%" y="463.50"></text></g><g><title>[unknown] (54 samples, 0.63%)</title><rect x="98.1382%" y="437" width="0.6323%" height="15" fill="rgb(233,93,31)"/><text x="98.3882%" y="447.50"></text></g><g><title>[unknown] (51 samples, 0.60%)</title><rect x="98.1733%" y="421" width="0.5972%" height="15" fill="rgb(239,81,33)"/><text x="98.4233%" y="431.50"></text></g><g><title>[unknown] (49 samples, 0.57%)</title><rect x="98.1967%" y="405" width="0.5738%" height="15" fill="rgb(213,120,34)"/><text x="98.4467%" y="415.50"></text></g><g><title>[unknown] (45 samples, 0.53%)</title><rect x="98.2436%" y="389" width="0.5269%" height="15" fill="rgb(243,49,53)"/><text x="98.4936%" y="399.50"></text></g><g><title>[unknown] (40 samples, 0.47%)</title><rect x="98.3021%" y="373" width="0.4684%" height="15" fill="rgb(247,216,33)"/><text x="98.5521%" y="383.50"></text></g><g><title>[unknown] (39 samples, 0.46%)</title><rect x="98.3138%" y="357" width="0.4567%" height="15" fill="rgb(226,26,14)"/><text x="98.5638%" y="367.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.3255%" y="341" width="0.4450%" height="15" fill="rgb(215,49,53)"/><text x="98.5755%" y="351.50"></text></g><g><title>[unknown] (37 samples, 0.43%)</title><rect x="98.3372%" y="325" width="0.4333%" height="15" fill="rgb(245,162,40)"/><text x="98.5872%" y="335.50"></text></g><g><title>[unknown] (36 samples, 0.42%)</title><rect x="98.3489%" y="309" width="0.4215%" height="15" fill="rgb(229,68,17)"/><text x="98.5989%" y="319.50"></text></g><g><title>[unknown] (36 samples, 0.42%)</title><rect x="98.3489%" y="293" width="0.4215%" height="15" fill="rgb(213,182,10)"/><text x="98.5989%" y="303.50"></text></g><g><title>[unknown] (33 samples, 0.39%)</title><rect x="98.3841%" y="277" width="0.3864%" height="15" fill="rgb(245,125,30)"/><text x="98.6341%" y="287.50"></text></g><g><title>[unknown] (33 samples, 0.39%)</title><rect x="98.3841%" y="261" width="0.3864%" height="15" fill="rgb(232,202,2)"/><text x="98.6341%" y="271.50"></text></g><g><title>[unknown] (32 samples, 0.37%)</title><rect x="98.3958%" y="245" width="0.3747%" height="15" fill="rgb(237,140,51)"/><text x="98.6458%" y="255.50"></text></g><g><title>[unknown] (29 samples, 0.34%)</title><rect x="98.4309%" y="229" width="0.3396%" height="15" fill="rgb(236,157,25)"/><text x="98.6809%" y="239.50"></text></g><g><title>[unknown] (29 samples, 0.34%)</title><rect x="98.4309%" y="213" width="0.3396%" height="15" fill="rgb(219,209,0)"/><text x="98.6809%" y="223.50"></text></g><g><title>[unknown] (25 samples, 0.29%)</title><rect x="98.4778%" y="197" width="0.2927%" height="15" fill="rgb(240,116,54)"/><text x="98.7278%" y="207.50"></text></g><g><title>[unknown] (23 samples, 0.27%)</title><rect x="98.5012%" y="181" width="0.2693%" height="15" fill="rgb(216,10,36)"/><text x="98.7512%" y="191.50"></text></g><g><title>[unknown] (19 samples, 0.22%)</title><rect x="98.5480%" y="165" width="0.2225%" height="15" fill="rgb(222,72,44)"/><text x="98.7980%" y="175.50"></text></g><g><title>[unknown] (18 samples, 0.21%)</title><rect x="98.5597%" y="149" width="0.2108%" height="15" fill="rgb(232,159,9)"/><text x="98.8097%" y="159.50"></text></g><g><title>[unknown] (17 samples, 0.20%)</title><rect x="98.5714%" y="133" width="0.1991%" height="15" fill="rgb(210,39,32)"/><text x="98.8214%" y="143.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="98.6183%" y="117" width="0.1522%" height="15" fill="rgb(216,194,45)"/><text x="98.8683%" y="127.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="98.6183%" y="101" width="0.1522%" height="15" fill="rgb(218,18,35)"/><text x="98.8683%" y="111.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="98.6183%" y="85" width="0.1522%" height="15" fill="rgb(207,83,51)"/><text x="98.8683%" y="95.50"></text></g><g><title>[unknown] (13 samples, 0.15%)</title><rect x="98.6183%" y="69" width="0.1522%" height="15" fill="rgb(225,63,43)"/><text x="98.8683%" y="79.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="98.6300%" y="53" width="0.1405%" height="15" fill="rgb(207,57,36)"/><text x="98.8800%" y="63.50"></text></g><g><title>[unknown] (12 samples, 0.14%)</title><rect x="98.6300%" y="37" width="0.1405%" height="15" fill="rgb(216,99,33)"/><text x="98.8800%" y="47.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (342 samples, 4.00%)</title><rect x="94.7775%" y="853" width="4.0047%" height="15" fill="rgb(225,42,16)"/><text x="95.0275%" y="863.50">msql..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (128 samples, 1.50%)</title><rect x="97.2834%" y="837" width="1.4988%" height="15" fill="rgb(220,201,45)"/><text x="97.5334%" y="847.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (128 samples, 1.50%)</title><rect x="97.2834%" y="821" width="1.4988%" height="15" fill="rgb(225,33,4)"/><text x="97.5334%" y="831.50"></text></g><g><title>std::sys_common::net::TcpStream::write (128 samples, 1.50%)</title><rect x="97.2834%" y="805" width="1.4988%" height="15" fill="rgb(224,33,50)"/><text x="97.5334%" y="815.50"></text></g><g><title>__libc_send (128 samples, 1.50%)</title><rect x="97.2834%" y="789" width="1.4988%" height="15" fill="rgb(246,198,51)"/><text x="97.5334%" y="799.50"></text></g><g><title>__libc_send (128 samples, 1.50%)</title><rect x="97.2834%" y="773" width="1.4988%" height="15" fill="rgb(205,22,4)"/><text x="97.5334%" y="783.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (343 samples, 4.02%)</title><rect x="94.7775%" y="869" width="4.0164%" height="15" fill="rgb(206,3,8)"/><text x="95.0275%" y="879.50">deco..</text></g><g><title>__GI___clone (345 samples, 4.04%)</title><rect x="94.7658%" y="981" width="4.0398%" height="15" fill="rgb(251,23,15)"/><text x="95.0158%" y="991.50">__GI..</text></g><g><title>start_thread (345 samples, 4.04%)</title><rect x="94.7658%" y="965" width="4.0398%" height="15" fill="rgb(252,88,28)"/><text x="95.0158%" y="975.50">star..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (344 samples, 4.03%)</title><rect x="94.7775%" y="949" width="4.0281%" height="15" fill="rgb(212,127,14)"/><text x="95.0275%" y="959.50">std:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (344 samples, 4.03%)</title><rect x="94.7775%" y="933" width="4.0281%" height="15" fill="rgb(247,145,37)"/><text x="95.0275%" y="943.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (344 samples, 4.03%)</title><rect x="94.7775%" y="917" width="4.0281%" height="15" fill="rgb(209,117,53)"/><text x="95.0275%" y="927.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (344 samples, 4.03%)</title><rect x="94.7775%" y="901" width="4.0281%" height="15" fill="rgb(212,90,42)"/><text x="95.0275%" y="911.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (344 samples, 4.03%)</title><rect x="94.7775%" y="885" width="4.0281%" height="15" fill="rgb(218,164,37)"/><text x="95.0275%" y="895.50">std:..</text></g><g><title>__GI___sched_setaffinity_new (38 samples, 0.44%)</title><rect x="98.9930%" y="709" width="0.4450%" height="15" fill="rgb(246,65,34)"/><text x="99.2430%" y="719.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="693" width="0.4450%" height="15" fill="rgb(231,100,33)"/><text x="99.2430%" y="703.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="677" width="0.4450%" height="15" fill="rgb(228,126,14)"/><text x="99.2430%" y="687.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="661" width="0.4450%" height="15" fill="rgb(215,173,21)"/><text x="99.2430%" y="671.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="645" width="0.4450%" height="15" fill="rgb(210,6,40)"/><text x="99.2430%" y="655.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="629" width="0.4450%" height="15" fill="rgb(212,48,18)"/><text x="99.2430%" y="639.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="613" width="0.4450%" height="15" fill="rgb(230,214,11)"/><text x="99.2430%" y="623.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="597" width="0.4450%" height="15" fill="rgb(254,105,39)"/><text x="99.2430%" y="607.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="581" width="0.4450%" height="15" fill="rgb(245,158,5)"/><text x="99.2430%" y="591.50"></text></g><g><title>[unknown] (38 samples, 0.44%)</title><rect x="98.9930%" y="565" width="0.4450%" height="15" fill="rgb(249,208,11)"/><text x="99.2430%" y="575.50"></text></g><g><title>[unknown] (36 samples, 0.42%)</title><rect x="99.0164%" y="549" width="0.4215%" height="15" fill="rgb(210,39,28)"/><text x="99.2664%" y="559.50"></text></g><g><title>[unknown] (33 samples, 0.39%)</title><rect x="99.0515%" y="533" width="0.3864%" height="15" fill="rgb(211,56,53)"/><text x="99.3015%" y="543.50"></text></g><g><title>[unknown] (31 samples, 0.36%)</title><rect x="99.0749%" y="517" width="0.3630%" height="15" fill="rgb(226,201,30)"/><text x="99.3249%" y="527.50"></text></g><g><title>[unknown] (30 samples, 0.35%)</title><rect x="99.0867%" y="501" width="0.3513%" height="15" fill="rgb(239,101,34)"/><text x="99.3367%" y="511.50"></text></g><g><title>[unknown] (29 samples, 0.34%)</title><rect x="99.0984%" y="485" width="0.3396%" height="15" fill="rgb(226,209,5)"/><text x="99.3484%" y="495.50"></text></g><g><title>[unknown] (29 samples, 0.34%)</title><rect x="99.0984%" y="469" width="0.3396%" height="15" fill="rgb(250,105,47)"/><text x="99.3484%" y="479.50"></text></g><g><title>hwloc::Topology::new (39 samples, 0.46%)</title><rect x="98.9930%" y="805" width="0.4567%" height="15" fill="rgb(230,72,3)"/><text x="99.2430%" y="815.50"></text></g><g><title>hwloc_topology_load (39 samples, 0.46%)</title><rect x="98.9930%" y="789" width="0.4567%" height="15" fill="rgb(232,218,39)"/><text x="99.2430%" y="799.50"></text></g><g><title>[libhwloc.so.15.1.0] (39 samples, 0.46%)</title><rect x="98.9930%" y="773" width="0.4567%" height="15" fill="rgb(248,166,6)"/><text x="99.2430%" y="783.50"></text></g><g><title>[libhwloc.so.15.1.0] (39 samples, 0.46%)</title><rect x="98.9930%" y="757" width="0.4567%" height="15" fill="rgb(247,89,20)"/><text x="99.2430%" y="767.50"></text></g><g><title>[libhwloc.so.15.1.0] (39 samples, 0.46%)</title><rect x="98.9930%" y="741" width="0.4567%" height="15" fill="rgb(248,130,54)"/><text x="99.2430%" y="751.50"></text></g><g><title>hwloc_linux_set_tid_cpubind (39 samples, 0.46%)</title><rect x="98.9930%" y="725" width="0.4567%" height="15" fill="rgb(234,196,4)"/><text x="99.2430%" y="735.50"></text></g><g><title>__libc_start_main (42 samples, 0.49%)</title><rect x="98.9813%" y="965" width="0.4918%" height="15" fill="rgb(250,143,31)"/><text x="99.2313%" y="975.50"></text></g><g><title>main (42 samples, 0.49%)</title><rect x="98.9813%" y="949" width="0.4918%" height="15" fill="rgb(211,110,34)"/><text x="99.2313%" y="959.50"></text></g><g><title>std::rt::lang_start_internal (42 samples, 0.49%)</title><rect x="98.9813%" y="933" width="0.4918%" height="15" fill="rgb(215,124,48)"/><text x="99.2313%" y="943.50"></text></g><g><title>std::panic::catch_unwind (42 samples, 0.49%)</title><rect x="98.9813%" y="917" width="0.4918%" height="15" fill="rgb(216,46,13)"/><text x="99.2313%" y="927.50"></text></g><g><title>std::panicking::try (42 samples, 0.49%)</title><rect x="98.9813%" y="901" width="0.4918%" height="15" fill="rgb(205,184,25)"/><text x="99.2313%" y="911.50"></text></g><g><title>std::panicking::try::do_call (42 samples, 0.49%)</title><rect x="98.9813%" y="885" width="0.4918%" height="15" fill="rgb(228,1,10)"/><text x="99.2313%" y="895.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (42 samples, 0.49%)</title><rect x="98.9813%" y="869" width="0.4918%" height="15" fill="rgb(213,116,27)"/><text x="99.2313%" y="879.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (42 samples, 0.49%)</title><rect x="98.9813%" y="853" width="0.4918%" height="15" fill="rgb(241,95,50)"/><text x="99.2313%" y="863.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (42 samples, 0.49%)</title><rect x="98.9813%" y="837" width="0.4918%" height="15" fill="rgb(238,48,32)"/><text x="99.2313%" y="847.50"></text></g><g><title>lobsters_microbenchmarks::main (42 samples, 0.49%)</title><rect x="98.9813%" y="821" width="0.4918%" height="15" fill="rgb(235,113,49)"/><text x="99.2313%" y="831.50"></text></g><g><title>_start (43 samples, 0.50%)</title><rect x="98.9813%" y="981" width="0.5035%" height="15" fill="rgb(205,127,43)"/><text x="99.2313%" y="991.50"></text></g><g><title>malloc_consolidate (27 samples, 0.32%)</title><rect x="99.5550%" y="981" width="0.3162%" height="15" fill="rgb(250,162,2)"/><text x="99.8050%" y="991.50"></text></g><g><title>lobsters-microb (8,535 samples, 99.94%)</title><rect x="0.0000%" y="997" width="99.9415%" height="15" fill="rgb(220,13,41)"/><text x="0.2500%" y="1007.50">lobsters-microb</text></g><g><title>all (8,540 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(249,221,25)"/><text x="0.2500%" y="1023.50"></text></g></svg></svg>