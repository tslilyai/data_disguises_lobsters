<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (5 samples, 0.10%)</title><rect x="0.0800%" y="789" width="0.1000%" height="15" fill="rgb(227,0,7)"/><text x="0.3300%" y="799.50"></text></g><g><title>[[stack]] (5 samples, 0.10%)</title><rect x="0.1800%" y="789" width="0.1000%" height="15" fill="rgb(217,0,24)"/><text x="0.4300%" y="799.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (25 samples, 0.50%)</title><rect x="0.2800%" y="773" width="0.5000%" height="15" fill="rgb(221,193,54)"/><text x="0.5300%" y="783.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.18%)</title><rect x="0.8000%" y="773" width="0.1800%" height="15" fill="rgb(248,212,6)"/><text x="1.0500%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="1.4000%" y="709" width="0.1000%" height="15" fill="rgb(208,68,35)"/><text x="1.6500%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.10%)</title><rect x="1.4000%" y="693" width="0.1000%" height="15" fill="rgb(232,128,0)"/><text x="1.6500%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.10%)</title><rect x="1.4000%" y="677" width="0.1000%" height="15" fill="rgb(207,160,47)"/><text x="1.6500%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.10%)</title><rect x="1.4000%" y="661" width="0.1000%" height="15" fill="rgb(228,23,34)"/><text x="1.6500%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (27 samples, 0.54%)</title><rect x="0.9800%" y="773" width="0.5400%" height="15" fill="rgb(218,30,26)"/><text x="1.2300%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="1.4000%" y="757" width="0.1200%" height="15" fill="rgb(220,122,19)"/><text x="1.6500%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="1.4000%" y="741" width="0.1200%" height="15" fill="rgb(250,228,42)"/><text x="1.6500%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="1.4000%" y="725" width="0.1200%" height="15" fill="rgb(240,193,28)"/><text x="1.6500%" y="735.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (6 samples, 0.12%)</title><rect x="2.1600%" y="773" width="0.1200%" height="15" fill="rgb(216,20,37)"/><text x="2.4100%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="2.3200%" y="773" width="0.1000%" height="15" fill="rgb(206,188,39)"/><text x="2.5700%" y="783.50"></text></g><g><title>__GI___libc_free (9 samples, 0.18%)</title><rect x="2.4400%" y="773" width="0.1800%" height="15" fill="rgb(217,207,13)"/><text x="2.6900%" y="783.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.44%)</title><rect x="2.6200%" y="773" width="0.4400%" height="15" fill="rgb(231,73,38)"/><text x="2.8700%" y="783.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.28%)</title><rect x="3.0600%" y="773" width="0.2800%" height="15" fill="rgb(225,20,46)"/><text x="3.3100%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.26%)</title><rect x="3.4400%" y="773" width="0.2600%" height="15" fill="rgb(210,31,41)"/><text x="3.6900%" y="783.50"></text></g><g><title>_int_free (43 samples, 0.86%)</title><rect x="3.8000%" y="773" width="0.8600%" height="15" fill="rgb(221,200,47)"/><text x="4.0500%" y="783.50"></text></g><g><title>_int_malloc (11 samples, 0.22%)</title><rect x="4.6600%" y="773" width="0.2200%" height="15" fill="rgb(226,26,5)"/><text x="4.9100%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.68%)</title><rect x="4.9200%" y="773" width="0.6800%" height="15" fill="rgb(249,33,26)"/><text x="5.1700%" y="783.50"></text></g><g><title>core::fmt::write (16 samples, 0.32%)</title><rect x="5.7200%" y="773" width="0.3200%" height="15" fill="rgb(235,183,28)"/><text x="5.9700%" y="783.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (5 samples, 0.10%)</title><rect x="6.5600%" y="773" width="0.1000%" height="15" fill="rgb(221,5,38)"/><text x="6.8100%" y="783.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (13 samples, 0.26%)</title><rect x="6.6800%" y="773" width="0.2600%" height="15" fill="rgb(247,18,42)"/><text x="6.9300%" y="783.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (16 samples, 0.32%)</title><rect x="7.9600%" y="773" width="0.3200%" height="15" fill="rgb(241,131,45)"/><text x="8.2100%" y="783.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (5 samples, 0.10%)</title><rect x="8.3600%" y="757" width="0.1000%" height="15" fill="rgb(249,31,29)"/><text x="8.6100%" y="767.50"></text></g><g><title>std::time::Instant::duration_since (5 samples, 0.10%)</title><rect x="8.3600%" y="741" width="0.1000%" height="15" fill="rgb(225,111,53)"/><text x="8.6100%" y="751.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (5 samples, 0.10%)</title><rect x="8.3600%" y="725" width="0.1000%" height="15" fill="rgb(238,160,17)"/><text x="8.6100%" y="735.50"></text></g><g><title>std::time::Instant::elapsed (8 samples, 0.16%)</title><rect x="8.3200%" y="773" width="0.1600%" height="15" fill="rgb(214,148,48)"/><text x="8.5700%" y="783.50"></text></g><g><title>[anon] (412 samples, 8.24%)</title><rect x="0.2800%" y="789" width="8.2400%" height="15" fill="rgb(232,36,49)"/><text x="0.5300%" y="799.50">[anon]</text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="8.6600%" y="773" width="0.1200%" height="15" fill="rgb(209,103,24)"/><text x="8.9100%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.22%)</title><rect x="8.8200%" y="773" width="0.2200%" height="15" fill="rgb(229,88,8)"/><text x="9.0700%" y="783.50"></text></g><g><title>[lobsters-microbenchmarks] (36 samples, 0.72%)</title><rect x="8.5600%" y="789" width="0.7200%" height="15" fill="rgb(213,181,19)"/><text x="8.8100%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="9.3800%" y="773" width="0.2000%" height="15" fill="rgb(254,191,54)"/><text x="9.6300%" y="783.50"></text></g><g><title>__wake_up_common (6 samples, 0.12%)</title><rect x="10.2200%" y="117" width="0.1200%" height="15" fill="rgb(241,83,37)"/><text x="10.4700%" y="127.50"></text></g><g><title>pollwake (6 samples, 0.12%)</title><rect x="10.2200%" y="101" width="0.1200%" height="15" fill="rgb(233,36,39)"/><text x="10.4700%" y="111.50"></text></g><g><title>try_to_wake_up (6 samples, 0.12%)</title><rect x="10.2200%" y="85" width="0.1200%" height="15" fill="rgb(226,3,54)"/><text x="10.4700%" y="95.50"></text></g><g><title>sock_def_readable (7 samples, 0.14%)</title><rect x="10.2200%" y="149" width="0.1400%" height="15" fill="rgb(245,192,40)"/><text x="10.4700%" y="159.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.14%)</title><rect x="10.2200%" y="133" width="0.1400%" height="15" fill="rgb(238,167,29)"/><text x="10.4700%" y="143.50"></text></g><g><title>__ip_queue_xmit (17 samples, 0.34%)</title><rect x="10.0800%" y="421" width="0.3400%" height="15" fill="rgb(232,182,51)"/><text x="10.3300%" y="431.50"></text></g><g><title>ip_output (15 samples, 0.30%)</title><rect x="10.1200%" y="405" width="0.3000%" height="15" fill="rgb(231,60,39)"/><text x="10.3700%" y="415.50"></text></g><g><title>ip_finish_output2 (14 samples, 0.28%)</title><rect x="10.1400%" y="389" width="0.2800%" height="15" fill="rgb(208,69,12)"/><text x="10.3900%" y="399.50"></text></g><g><title>__local_bh_enable_ip (14 samples, 0.28%)</title><rect x="10.1400%" y="373" width="0.2800%" height="15" fill="rgb(235,93,37)"/><text x="10.3900%" y="383.50"></text></g><g><title>do_softirq (14 samples, 0.28%)</title><rect x="10.1400%" y="357" width="0.2800%" height="15" fill="rgb(213,116,39)"/><text x="10.3900%" y="367.50"></text></g><g><title>do_softirq_own_stack (14 samples, 0.28%)</title><rect x="10.1400%" y="341" width="0.2800%" height="15" fill="rgb(222,207,29)"/><text x="10.3900%" y="351.50"></text></g><g><title>__do_softirq (14 samples, 0.28%)</title><rect x="10.1400%" y="325" width="0.2800%" height="15" fill="rgb(206,96,30)"/><text x="10.3900%" y="335.50"></text></g><g><title>net_rx_action (13 samples, 0.26%)</title><rect x="10.1600%" y="309" width="0.2600%" height="15" fill="rgb(218,138,4)"/><text x="10.4100%" y="319.50"></text></g><g><title>process_backlog (12 samples, 0.24%)</title><rect x="10.1800%" y="293" width="0.2400%" height="15" fill="rgb(250,191,14)"/><text x="10.4300%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (12 samples, 0.24%)</title><rect x="10.1800%" y="277" width="0.2400%" height="15" fill="rgb(239,60,40)"/><text x="10.4300%" y="287.50"></text></g><g><title>ip_rcv (11 samples, 0.22%)</title><rect x="10.2000%" y="261" width="0.2200%" height="15" fill="rgb(206,27,48)"/><text x="10.4500%" y="271.50"></text></g><g><title>ip_local_deliver (11 samples, 0.22%)</title><rect x="10.2000%" y="245" width="0.2200%" height="15" fill="rgb(225,35,8)"/><text x="10.4500%" y="255.50"></text></g><g><title>ip_local_deliver_finish (11 samples, 0.22%)</title><rect x="10.2000%" y="229" width="0.2200%" height="15" fill="rgb(250,213,24)"/><text x="10.4500%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (11 samples, 0.22%)</title><rect x="10.2000%" y="213" width="0.2200%" height="15" fill="rgb(247,123,22)"/><text x="10.4500%" y="223.50"></text></g><g><title>tcp_v4_rcv (11 samples, 0.22%)</title><rect x="10.2000%" y="197" width="0.2200%" height="15" fill="rgb(231,138,38)"/><text x="10.4500%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (11 samples, 0.22%)</title><rect x="10.2000%" y="181" width="0.2200%" height="15" fill="rgb(231,145,46)"/><text x="10.4500%" y="191.50"></text></g><g><title>tcp_rcv_established (11 samples, 0.22%)</title><rect x="10.2000%" y="165" width="0.2200%" height="15" fill="rgb(251,118,11)"/><text x="10.4500%" y="175.50"></text></g><g><title>__tcp_push_pending_frames (20 samples, 0.40%)</title><rect x="10.0600%" y="469" width="0.4000%" height="15" fill="rgb(217,147,25)"/><text x="10.3100%" y="479.50"></text></g><g><title>tcp_write_xmit (20 samples, 0.40%)</title><rect x="10.0600%" y="453" width="0.4000%" height="15" fill="rgb(247,81,37)"/><text x="10.3100%" y="463.50"></text></g><g><title>__tcp_transmit_skb (20 samples, 0.40%)</title><rect x="10.0600%" y="437" width="0.4000%" height="15" fill="rgb(209,12,38)"/><text x="10.3100%" y="447.50"></text></g><g><title>__x64_sys_sendto (23 samples, 0.46%)</title><rect x="10.0600%" y="549" width="0.4600%" height="15" fill="rgb(227,1,9)"/><text x="10.3100%" y="559.50"></text></g><g><title>__sys_sendto (23 samples, 0.46%)</title><rect x="10.0600%" y="533" width="0.4600%" height="15" fill="rgb(248,47,43)"/><text x="10.3100%" y="543.50"></text></g><g><title>sock_sendmsg (23 samples, 0.46%)</title><rect x="10.0600%" y="517" width="0.4600%" height="15" fill="rgb(221,10,30)"/><text x="10.3100%" y="527.50"></text></g><g><title>tcp_sendmsg (23 samples, 0.46%)</title><rect x="10.0600%" y="501" width="0.4600%" height="15" fill="rgb(210,229,1)"/><text x="10.3100%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (23 samples, 0.46%)</title><rect x="10.0600%" y="485" width="0.4600%" height="15" fill="rgb(222,148,37)"/><text x="10.3100%" y="495.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (27 samples, 0.54%)</title><rect x="10.0000%" y="693" width="0.5400%" height="15" fill="rgb(234,67,33)"/><text x="10.2500%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (27 samples, 0.54%)</title><rect x="10.0000%" y="677" width="0.5400%" height="15" fill="rgb(247,98,35)"/><text x="10.2500%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (27 samples, 0.54%)</title><rect x="10.0000%" y="661" width="0.5400%" height="15" fill="rgb(247,138,52)"/><text x="10.2500%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (25 samples, 0.50%)</title><rect x="10.0400%" y="645" width="0.5000%" height="15" fill="rgb(213,79,30)"/><text x="10.2900%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (25 samples, 0.50%)</title><rect x="10.0400%" y="629" width="0.5000%" height="15" fill="rgb(246,177,23)"/><text x="10.2900%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (25 samples, 0.50%)</title><rect x="10.0400%" y="613" width="0.5000%" height="15" fill="rgb(230,62,27)"/><text x="10.2900%" y="623.50"></text></g><g><title>__libc_send (25 samples, 0.50%)</title><rect x="10.0400%" y="597" width="0.5000%" height="15" fill="rgb(216,154,8)"/><text x="10.2900%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (24 samples, 0.48%)</title><rect x="10.0600%" y="581" width="0.4800%" height="15" fill="rgb(244,35,45)"/><text x="10.3100%" y="591.50"></text></g><g><title>do_syscall_64 (24 samples, 0.48%)</title><rect x="10.0600%" y="565" width="0.4800%" height="15" fill="rgb(251,115,12)"/><text x="10.3100%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::InsertStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="10.7400%" y="661" width="0.1200%" height="15" fill="rgb(240,54,50)"/><text x="10.9900%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="10.7600%" y="645" width="0.1000%" height="15" fill="rgb(233,84,52)"/><text x="11.0100%" y="655.50"></text></g><g><title>core::fmt::write (13 samples, 0.26%)</title><rect x="10.6200%" y="693" width="0.2600%" height="15" fill="rgb(207,117,47)"/><text x="10.8700%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (10 samples, 0.20%)</title><rect x="10.6800%" y="677" width="0.2000%" height="15" fill="rgb(249,43,39)"/><text x="10.9300%" y="687.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (59 samples, 1.18%)</title><rect x="9.8200%" y="709" width="1.1800%" height="15" fill="rgb(209,38,44)"/><text x="10.0700%" y="719.50"></text></g><g><title>sk_wait_data (5 samples, 0.10%)</title><rect x="11.0000%" y="453" width="0.1000%" height="15" fill="rgb(236,212,23)"/><text x="11.2500%" y="463.50"></text></g><g><title>__x64_sys_recvfrom (6 samples, 0.12%)</title><rect x="11.0000%" y="517" width="0.1200%" height="15" fill="rgb(242,79,21)"/><text x="11.2500%" y="527.50"></text></g><g><title>__sys_recvfrom (6 samples, 0.12%)</title><rect x="11.0000%" y="501" width="0.1200%" height="15" fill="rgb(211,96,35)"/><text x="11.2500%" y="511.50"></text></g><g><title>inet_recvmsg (6 samples, 0.12%)</title><rect x="11.0000%" y="485" width="0.1200%" height="15" fill="rgb(253,215,40)"/><text x="11.2500%" y="495.50"></text></g><g><title>tcp_recvmsg (6 samples, 0.12%)</title><rect x="11.0000%" y="469" width="0.1200%" height="15" fill="rgb(211,81,21)"/><text x="11.2500%" y="479.50"></text></g><g><title>__libc_recv (7 samples, 0.14%)</title><rect x="11.0000%" y="565" width="0.1400%" height="15" fill="rgb(208,190,38)"/><text x="11.2500%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (7 samples, 0.14%)</title><rect x="11.0000%" y="549" width="0.1400%" height="15" fill="rgb(235,213,38)"/><text x="11.2500%" y="559.50"></text></g><g><title>do_syscall_64 (7 samples, 0.14%)</title><rect x="11.0000%" y="533" width="0.1400%" height="15" fill="rgb(237,122,38)"/><text x="11.2500%" y="543.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.16%)</title><rect x="11.0000%" y="661" width="0.1600%" height="15" fill="rgb(244,218,35)"/><text x="11.2500%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.16%)</title><rect x="11.0000%" y="645" width="0.1600%" height="15" fill="rgb(240,68,47)"/><text x="11.2500%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (8 samples, 0.16%)</title><rect x="11.0000%" y="629" width="0.1600%" height="15" fill="rgb(210,16,53)"/><text x="11.2500%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (8 samples, 0.16%)</title><rect x="11.0000%" y="613" width="0.1600%" height="15" fill="rgb(235,124,12)"/><text x="11.2500%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (8 samples, 0.16%)</title><rect x="11.0000%" y="597" width="0.1600%" height="15" fill="rgb(224,169,11)"/><text x="11.2500%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (8 samples, 0.16%)</title><rect x="11.0000%" y="581" width="0.1600%" height="15" fill="rgb(250,166,2)"/><text x="11.2500%" y="591.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (69 samples, 1.38%)</title><rect x="9.8200%" y="725" width="1.3800%" height="15" fill="rgb(242,216,29)"/><text x="10.0700%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (10 samples, 0.20%)</title><rect x="11.0000%" y="709" width="0.2000%" height="15" fill="rgb(230,116,27)"/><text x="11.2500%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (10 samples, 0.20%)</title><rect x="11.0000%" y="693" width="0.2000%" height="15" fill="rgb(228,99,48)"/><text x="11.2500%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (10 samples, 0.20%)</title><rect x="11.0000%" y="677" width="0.2000%" height="15" fill="rgb(253,11,6)"/><text x="11.2500%" y="687.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (74 samples, 1.48%)</title><rect x="9.7400%" y="773" width="1.4800%" height="15" fill="rgb(247,143,39)"/><text x="9.9900%" y="783.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (74 samples, 1.48%)</title><rect x="9.7400%" y="757" width="1.4800%" height="15" fill="rgb(236,97,10)"/><text x="9.9900%" y="767.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (74 samples, 1.48%)</title><rect x="9.7400%" y="741" width="1.4800%" height="15" fill="rgb(233,208,19)"/><text x="9.9900%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="11.3000%" y="773" width="0.1600%" height="15" fill="rgb(216,164,2)"/><text x="11.5500%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="11.3400%" y="757" width="0.1200%" height="15" fill="rgb(220,129,5)"/><text x="11.5900%" y="767.50"></text></g><g><title>__GI___libc_free (9 samples, 0.18%)</title><rect x="11.7400%" y="773" width="0.1800%" height="15" fill="rgb(242,17,10)"/><text x="11.9900%" y="783.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.36%)</title><rect x="11.9200%" y="773" width="0.3600%" height="15" fill="rgb(242,107,0)"/><text x="12.1700%" y="783.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="12.2800%" y="773" width="0.1000%" height="15" fill="rgb(251,28,31)"/><text x="12.5300%" y="783.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="12.5800%" y="549" width="0.1200%" height="15" fill="rgb(233,223,10)"/><text x="12.8300%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.10%)</title><rect x="12.6000%" y="533" width="0.1000%" height="15" fill="rgb(215,21,27)"/><text x="12.8500%" y="543.50"></text></g><g><title>alloc::string::String::push_str (5 samples, 0.10%)</title><rect x="12.6000%" y="517" width="0.1000%" height="15" fill="rgb(232,23,21)"/><text x="12.8500%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="12.6000%" y="501" width="0.1000%" height="15" fill="rgb(244,5,23)"/><text x="12.8500%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.10%)</title><rect x="12.6000%" y="485" width="0.1000%" height="15" fill="rgb(226,81,46)"/><text x="12.8500%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.10%)</title><rect x="12.6000%" y="469" width="0.1000%" height="15" fill="rgb(247,70,30)"/><text x="12.8500%" y="479.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (16 samples, 0.32%)</title><rect x="12.5400%" y="613" width="0.3200%" height="15" fill="rgb(212,68,19)"/><text x="12.7900%" y="623.50"></text></g><g><title>alloc::fmt::format (16 samples, 0.32%)</title><rect x="12.5400%" y="597" width="0.3200%" height="15" fill="rgb(240,187,13)"/><text x="12.7900%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (15 samples, 0.30%)</title><rect x="12.5600%" y="581" width="0.3000%" height="15" fill="rgb(223,113,26)"/><text x="12.8100%" y="591.50"></text></g><g><title>core::fmt::write (15 samples, 0.30%)</title><rect x="12.5600%" y="565" width="0.3000%" height="15" fill="rgb(206,192,2)"/><text x="12.8100%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (8 samples, 0.16%)</title><rect x="12.7000%" y="549" width="0.1600%" height="15" fill="rgb(241,108,4)"/><text x="12.9500%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (8 samples, 0.16%)</title><rect x="12.7000%" y="533" width="0.1600%" height="15" fill="rgb(247,173,49)"/><text x="12.9500%" y="543.50"></text></g><g><title>__libc_start_main (23 samples, 0.46%)</title><rect x="12.4400%" y="773" width="0.4600%" height="15" fill="rgb(224,114,35)"/><text x="12.6900%" y="783.50"></text></g><g><title>main (23 samples, 0.46%)</title><rect x="12.4400%" y="757" width="0.4600%" height="15" fill="rgb(245,159,27)"/><text x="12.6900%" y="767.50"></text></g><g><title>std::rt::lang_start_internal (23 samples, 0.46%)</title><rect x="12.4400%" y="741" width="0.4600%" height="15" fill="rgb(245,172,44)"/><text x="12.6900%" y="751.50"></text></g><g><title>std::panic::catch_unwind (23 samples, 0.46%)</title><rect x="12.4400%" y="725" width="0.4600%" height="15" fill="rgb(236,23,11)"/><text x="12.6900%" y="735.50"></text></g><g><title>std::panicking::try (23 samples, 0.46%)</title><rect x="12.4400%" y="709" width="0.4600%" height="15" fill="rgb(205,117,38)"/><text x="12.6900%" y="719.50"></text></g><g><title>std::panicking::try::do_call (23 samples, 0.46%)</title><rect x="12.4400%" y="693" width="0.4600%" height="15" fill="rgb(237,72,25)"/><text x="12.6900%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (23 samples, 0.46%)</title><rect x="12.4400%" y="677" width="0.4600%" height="15" fill="rgb(244,70,9)"/><text x="12.6900%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (23 samples, 0.46%)</title><rect x="12.4400%" y="661" width="0.4600%" height="15" fill="rgb(217,125,39)"/><text x="12.6900%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 0.46%)</title><rect x="12.4400%" y="645" width="0.4600%" height="15" fill="rgb(235,36,10)"/><text x="12.6900%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (23 samples, 0.46%)</title><rect x="12.4400%" y="629" width="0.4600%" height="15" fill="rgb(251,123,47)"/><text x="12.6900%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="12.9200%" y="773" width="0.1000%" height="15" fill="rgb(221,13,13)"/><text x="13.1700%" y="783.50"></text></g><g><title>_int_free (20 samples, 0.40%)</title><rect x="13.0600%" y="773" width="0.4000%" height="15" fill="rgb(238,131,9)"/><text x="13.3100%" y="783.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="13.4600%" y="773" width="0.1000%" height="15" fill="rgb(211,50,8)"/><text x="13.7100%" y="783.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="13.5600%" y="773" width="0.1200%" height="15" fill="rgb(245,182,24)"/><text x="13.8100%" y="783.50"></text></g><g><title>core::fmt::Formatter::pad (5 samples, 0.10%)</title><rect x="13.7800%" y="773" width="0.1000%" height="15" fill="rgb(242,14,37)"/><text x="14.0300%" y="783.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="14.0600%" y="773" width="0.2000%" height="15" fill="rgb(246,228,12)"/><text x="14.3100%" y="783.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (10 samples, 0.20%)</title><rect x="14.3000%" y="661" width="0.2000%" height="15" fill="rgb(213,55,15)"/><text x="14.5500%" y="671.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="14.3000%" y="645" width="0.2000%" height="15" fill="rgb(209,9,3)"/><text x="14.5500%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.20%)</title><rect x="14.3000%" y="629" width="0.2000%" height="15" fill="rgb(230,59,30)"/><text x="14.5500%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (7 samples, 0.14%)</title><rect x="14.3600%" y="613" width="0.1400%" height="15" fill="rgb(209,121,21)"/><text x="14.6100%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="14.5400%" y="629" width="0.1200%" height="15" fill="rgb(220,109,13)"/><text x="14.7900%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="14.5400%" y="613" width="0.1200%" height="15" fill="rgb(232,18,1)"/><text x="14.7900%" y="623.50"></text></g><g><title>std::time::Instant::elapsed (5 samples, 0.10%)</title><rect x="14.6600%" y="629" width="0.1000%" height="15" fill="rgb(215,41,42)"/><text x="14.9100%" y="639.50"></text></g><g><title>decor_mem::views::View::insert_into_index (17 samples, 0.34%)</title><rect x="14.5000%" y="645" width="0.3400%" height="15" fill="rgb(224,123,36)"/><text x="14.7500%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (31 samples, 0.62%)</title><rect x="14.2600%" y="773" width="0.6200%" height="15" fill="rgb(240,125,3)"/><text x="14.5100%" y="783.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (31 samples, 0.62%)</title><rect x="14.2600%" y="757" width="0.6200%" height="15" fill="rgb(205,98,50)"/><text x="14.5100%" y="767.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (31 samples, 0.62%)</title><rect x="14.2600%" y="741" width="0.6200%" height="15" fill="rgb(205,185,37)"/><text x="14.5100%" y="751.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (31 samples, 0.62%)</title><rect x="14.2600%" y="725" width="0.6200%" height="15" fill="rgb(238,207,15)"/><text x="14.5100%" y="735.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (31 samples, 0.62%)</title><rect x="14.2600%" y="709" width="0.6200%" height="15" fill="rgb(213,199,42)"/><text x="14.5100%" y="719.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (31 samples, 0.62%)</title><rect x="14.2600%" y="693" width="0.6200%" height="15" fill="rgb(235,201,11)"/><text x="14.5100%" y="703.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (31 samples, 0.62%)</title><rect x="14.2600%" y="677" width="0.6200%" height="15" fill="rgb(207,46,11)"/><text x="14.5100%" y="687.50"></text></g><g><title>decor_mem::views::Views::insert (19 samples, 0.38%)</title><rect x="14.5000%" y="661" width="0.3800%" height="15" fill="rgb(241,35,35)"/><text x="14.7500%" y="671.50"></text></g><g><title>enqueue_task (7 samples, 0.14%)</title><rect x="15.5200%" y="53" width="0.1400%" height="15" fill="rgb(243,32,47)"/><text x="15.7700%" y="63.50"></text></g><g><title>select_task_rq_fair (6 samples, 0.12%)</title><rect x="15.7200%" y="53" width="0.1200%" height="15" fill="rgb(247,202,23)"/><text x="15.9700%" y="63.50"></text></g><g><title>__wake_up_common (18 samples, 0.36%)</title><rect x="15.5000%" y="101" width="0.3600%" height="15" fill="rgb(219,102,11)"/><text x="15.7500%" y="111.50"></text></g><g><title>pollwake (18 samples, 0.36%)</title><rect x="15.5000%" y="85" width="0.3600%" height="15" fill="rgb(243,110,44)"/><text x="15.7500%" y="95.50"></text></g><g><title>try_to_wake_up (18 samples, 0.36%)</title><rect x="15.5000%" y="69" width="0.3600%" height="15" fill="rgb(222,74,54)"/><text x="15.7500%" y="79.50"></text></g><g><title>sock_def_readable (20 samples, 0.40%)</title><rect x="15.5000%" y="133" width="0.4000%" height="15" fill="rgb(216,99,12)"/><text x="15.7500%" y="143.50"></text></g><g><title>__wake_up_common_lock (20 samples, 0.40%)</title><rect x="15.5000%" y="117" width="0.4000%" height="15" fill="rgb(226,22,26)"/><text x="15.7500%" y="127.50"></text></g><g><title>tcp_ack (5 samples, 0.10%)</title><rect x="15.9000%" y="133" width="0.1000%" height="15" fill="rgb(217,163,10)"/><text x="16.1500%" y="143.50"></text></g><g><title>__ip_queue_xmit (39 samples, 0.78%)</title><rect x="15.2400%" y="405" width="0.7800%" height="15" fill="rgb(213,25,53)"/><text x="15.4900%" y="415.50"></text></g><g><title>ip_output (38 samples, 0.76%)</title><rect x="15.2600%" y="389" width="0.7600%" height="15" fill="rgb(252,105,26)"/><text x="15.5100%" y="399.50"></text></g><g><title>ip_finish_output2 (38 samples, 0.76%)</title><rect x="15.2600%" y="373" width="0.7600%" height="15" fill="rgb(220,39,43)"/><text x="15.5100%" y="383.50"></text></g><g><title>__local_bh_enable_ip (35 samples, 0.70%)</title><rect x="15.3200%" y="357" width="0.7000%" height="15" fill="rgb(229,68,48)"/><text x="15.5700%" y="367.50"></text></g><g><title>do_softirq (34 samples, 0.68%)</title><rect x="15.3400%" y="341" width="0.6800%" height="15" fill="rgb(252,8,32)"/><text x="15.5900%" y="351.50"></text></g><g><title>do_softirq_own_stack (34 samples, 0.68%)</title><rect x="15.3400%" y="325" width="0.6800%" height="15" fill="rgb(223,20,43)"/><text x="15.5900%" y="335.50"></text></g><g><title>__do_softirq (34 samples, 0.68%)</title><rect x="15.3400%" y="309" width="0.6800%" height="15" fill="rgb(229,81,49)"/><text x="15.5900%" y="319.50"></text></g><g><title>net_rx_action (34 samples, 0.68%)</title><rect x="15.3400%" y="293" width="0.6800%" height="15" fill="rgb(236,28,36)"/><text x="15.5900%" y="303.50"></text></g><g><title>process_backlog (32 samples, 0.64%)</title><rect x="15.3800%" y="277" width="0.6400%" height="15" fill="rgb(249,185,26)"/><text x="15.6300%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (30 samples, 0.60%)</title><rect x="15.4200%" y="261" width="0.6000%" height="15" fill="rgb(249,174,33)"/><text x="15.6700%" y="271.50"></text></g><g><title>ip_rcv (30 samples, 0.60%)</title><rect x="15.4200%" y="245" width="0.6000%" height="15" fill="rgb(233,201,37)"/><text x="15.6700%" y="255.50"></text></g><g><title>ip_local_deliver (30 samples, 0.60%)</title><rect x="15.4200%" y="229" width="0.6000%" height="15" fill="rgb(221,78,26)"/><text x="15.6700%" y="239.50"></text></g><g><title>ip_local_deliver_finish (30 samples, 0.60%)</title><rect x="15.4200%" y="213" width="0.6000%" height="15" fill="rgb(250,127,30)"/><text x="15.6700%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (30 samples, 0.60%)</title><rect x="15.4200%" y="197" width="0.6000%" height="15" fill="rgb(230,49,44)"/><text x="15.6700%" y="207.50"></text></g><g><title>tcp_v4_rcv (30 samples, 0.60%)</title><rect x="15.4200%" y="181" width="0.6000%" height="15" fill="rgb(229,67,23)"/><text x="15.6700%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (27 samples, 0.54%)</title><rect x="15.4800%" y="165" width="0.5400%" height="15" fill="rgb(249,83,47)"/><text x="15.7300%" y="175.50"></text></g><g><title>tcp_rcv_established (27 samples, 0.54%)</title><rect x="15.4800%" y="149" width="0.5400%" height="15" fill="rgb(215,43,3)"/><text x="15.7300%" y="159.50"></text></g><g><title>__tcp_transmit_skb (41 samples, 0.82%)</title><rect x="15.2200%" y="421" width="0.8200%" height="15" fill="rgb(238,154,13)"/><text x="15.4700%" y="431.50"></text></g><g><title>__tcp_push_pending_frames (43 samples, 0.86%)</title><rect x="15.2200%" y="453" width="0.8600%" height="15" fill="rgb(219,56,2)"/><text x="15.4700%" y="463.50"></text></g><g><title>tcp_write_xmit (43 samples, 0.86%)</title><rect x="15.2200%" y="437" width="0.8600%" height="15" fill="rgb(233,0,4)"/><text x="15.4700%" y="447.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (58 samples, 1.16%)</title><rect x="15.0600%" y="677" width="1.1600%" height="15" fill="rgb(235,30,7)"/><text x="15.3100%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (58 samples, 1.16%)</title><rect x="15.0600%" y="661" width="1.1600%" height="15" fill="rgb(250,79,13)"/><text x="15.3100%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (55 samples, 1.10%)</title><rect x="15.1200%" y="645" width="1.1000%" height="15" fill="rgb(211,146,34)"/><text x="15.3700%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (54 samples, 1.08%)</title><rect x="15.1400%" y="629" width="1.0800%" height="15" fill="rgb(228,22,38)"/><text x="15.3900%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (54 samples, 1.08%)</title><rect x="15.1400%" y="613" width="1.0800%" height="15" fill="rgb(235,168,5)"/><text x="15.3900%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (54 samples, 1.08%)</title><rect x="15.1400%" y="597" width="1.0800%" height="15" fill="rgb(221,155,16)"/><text x="15.3900%" y="607.50"></text></g><g><title>__libc_send (54 samples, 1.08%)</title><rect x="15.1400%" y="581" width="1.0800%" height="15" fill="rgb(215,215,53)"/><text x="15.3900%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (54 samples, 1.08%)</title><rect x="15.1400%" y="565" width="1.0800%" height="15" fill="rgb(223,4,10)"/><text x="15.3900%" y="575.50"></text></g><g><title>do_syscall_64 (54 samples, 1.08%)</title><rect x="15.1400%" y="549" width="1.0800%" height="15" fill="rgb(234,103,6)"/><text x="15.3900%" y="559.50"></text></g><g><title>__x64_sys_sendto (54 samples, 1.08%)</title><rect x="15.1400%" y="533" width="1.0800%" height="15" fill="rgb(227,97,0)"/><text x="15.3900%" y="543.50"></text></g><g><title>__sys_sendto (54 samples, 1.08%)</title><rect x="15.1400%" y="517" width="1.0800%" height="15" fill="rgb(234,150,53)"/><text x="15.3900%" y="527.50"></text></g><g><title>sock_sendmsg (52 samples, 1.04%)</title><rect x="15.1800%" y="501" width="1.0400%" height="15" fill="rgb(228,201,54)"/><text x="15.4300%" y="511.50"></text></g><g><title>tcp_sendmsg (51 samples, 1.02%)</title><rect x="15.2000%" y="485" width="1.0200%" height="15" fill="rgb(222,22,37)"/><text x="15.4500%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (51 samples, 1.02%)</title><rect x="15.2000%" y="469" width="1.0200%" height="15" fill="rgb(237,53,32)"/><text x="15.4500%" y="479.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 0.28%)</title><rect x="16.2200%" y="645" width="0.2800%" height="15" fill="rgb(233,25,53)"/><text x="16.4700%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 0.28%)</title><rect x="16.2200%" y="629" width="0.2800%" height="15" fill="rgb(210,40,34)"/><text x="16.4700%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (11 samples, 0.22%)</title><rect x="16.2800%" y="613" width="0.2200%" height="15" fill="rgb(241,220,44)"/><text x="16.5300%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.18%)</title><rect x="16.5000%" y="629" width="0.1800%" height="15" fill="rgb(235,28,35)"/><text x="16.7500%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (9 samples, 0.18%)</title><rect x="16.5000%" y="613" width="0.1800%" height="15" fill="rgb(210,56,17)"/><text x="16.7500%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (9 samples, 0.18%)</title><rect x="16.5000%" y="597" width="0.1800%" height="15" fill="rgb(224,130,29)"/><text x="16.7500%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.12%)</title><rect x="16.5600%" y="581" width="0.1200%" height="15" fill="rgb(235,212,8)"/><text x="16.8100%" y="591.50"></text></g><g><title>core::fmt::write (32 samples, 0.64%)</title><rect x="16.2200%" y="677" width="0.6400%" height="15" fill="rgb(223,33,50)"/><text x="16.4700%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (32 samples, 0.64%)</title><rect x="16.2200%" y="661" width="0.6400%" height="15" fill="rgb(219,149,13)"/><text x="16.4700%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::InsertStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (18 samples, 0.36%)</title><rect x="16.5000%" y="645" width="0.3600%" height="15" fill="rgb(250,156,29)"/><text x="16.7500%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (9 samples, 0.18%)</title><rect x="16.6800%" y="629" width="0.1800%" height="15" fill="rgb(216,193,19)"/><text x="16.9300%" y="639.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="16.9800%" y="645" width="0.1200%" height="15" fill="rgb(216,135,14)"/><text x="17.2300%" y="655.50"></text></g><g><title>decor_mem::views::View::insert_into_index (11 samples, 0.22%)</title><rect x="16.9000%" y="661" width="0.2200%" height="15" fill="rgb(241,47,5)"/><text x="17.1500%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (107 samples, 2.14%)</title><rect x="15.0400%" y="693" width="2.1400%" height="15" fill="rgb(233,42,35)"/><text x="15.2900%" y="703.50">d..</text></g><g><title>decor_mem::views::Views::insert (16 samples, 0.32%)</title><rect x="16.8600%" y="677" width="0.3200%" height="15" fill="rgb(231,13,6)"/><text x="17.1100%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.10%)</title><rect x="17.1800%" y="677" width="0.1000%" height="15" fill="rgb(207,181,40)"/><text x="17.4300%" y="687.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.54%)</title><rect x="17.6200%" y="469" width="0.5400%" height="15" fill="rgb(254,173,49)"/><text x="17.8700%" y="479.50"></text></g><g><title>_int_malloc (21 samples, 0.42%)</title><rect x="17.7400%" y="453" width="0.4200%" height="15" fill="rgb(221,1,38)"/><text x="17.9900%" y="463.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (45 samples, 0.90%)</title><rect x="17.3000%" y="661" width="0.9000%" height="15" fill="rgb(206,124,46)"/><text x="17.5500%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (34 samples, 0.68%)</title><rect x="17.5200%" y="645" width="0.6800%" height="15" fill="rgb(249,21,11)"/><text x="17.7700%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.68%)</title><rect x="17.5200%" y="629" width="0.6800%" height="15" fill="rgb(222,201,40)"/><text x="17.7700%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32 samples, 0.64%)</title><rect x="17.5600%" y="613" width="0.6400%" height="15" fill="rgb(235,61,29)"/><text x="17.8100%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 0.62%)</title><rect x="17.5800%" y="597" width="0.6200%" height="15" fill="rgb(219,207,3)"/><text x="17.8300%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (31 samples, 0.62%)</title><rect x="17.5800%" y="581" width="0.6200%" height="15" fill="rgb(222,56,46)"/><text x="17.8300%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (31 samples, 0.62%)</title><rect x="17.5800%" y="565" width="0.6200%" height="15" fill="rgb(239,76,54)"/><text x="17.8300%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.62%)</title><rect x="17.5800%" y="549" width="0.6200%" height="15" fill="rgb(231,124,27)"/><text x="17.8300%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.62%)</title><rect x="17.5800%" y="533" width="0.6200%" height="15" fill="rgb(249,195,6)"/><text x="17.8300%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (31 samples, 0.62%)</title><rect x="17.5800%" y="517" width="0.6200%" height="15" fill="rgb(237,174,47)"/><text x="17.8300%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.62%)</title><rect x="17.5800%" y="501" width="0.6200%" height="15" fill="rgb(206,201,31)"/><text x="17.8300%" y="511.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.62%)</title><rect x="17.5800%" y="485" width="0.6200%" height="15" fill="rgb(231,57,52)"/><text x="17.8300%" y="495.50"></text></g><g><title>malloc_consolidate (16 samples, 0.32%)</title><rect x="18.8200%" y="629" width="0.3200%" height="15" fill="rgb(248,177,22)"/><text x="19.0700%" y="639.50"></text></g><g><title>__GI___libc_malloc (48 samples, 0.96%)</title><rect x="18.2000%" y="661" width="0.9600%" height="15" fill="rgb(215,211,37)"/><text x="18.4500%" y="671.50"></text></g><g><title>_int_malloc (46 samples, 0.92%)</title><rect x="18.2400%" y="645" width="0.9200%" height="15" fill="rgb(241,128,51)"/><text x="18.4900%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (102 samples, 2.04%)</title><rect x="17.2800%" y="677" width="2.0400%" height="15" fill="rgb(227,165,31)"/><text x="17.5300%" y="687.50">&lt;..</text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.16%)</title><rect x="19.1600%" y="661" width="0.1600%" height="15" fill="rgb(228,167,24)"/><text x="19.4100%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.16%)</title><rect x="19.3200%" y="677" width="0.1600%" height="15" fill="rgb(228,143,12)"/><text x="19.5700%" y="687.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="19.3800%" y="661" width="0.1000%" height="15" fill="rgb(249,149,8)"/><text x="19.6300%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (91 samples, 1.82%)</title><rect x="19.4800%" y="677" width="1.8200%" height="15" fill="rgb(243,35,44)"/><text x="19.7300%" y="687.50">a..</text></g><g><title>__GI___libc_malloc (91 samples, 1.82%)</title><rect x="19.4800%" y="661" width="1.8200%" height="15" fill="rgb(246,89,9)"/><text x="19.7300%" y="671.50">_..</text></g><g><title>_int_malloc (91 samples, 1.82%)</title><rect x="19.4800%" y="645" width="1.8200%" height="15" fill="rgb(233,213,13)"/><text x="19.7300%" y="655.50">_..</text></g><g><title>malloc_consolidate (62 samples, 1.24%)</title><rect x="20.0600%" y="629" width="1.2400%" height="15" fill="rgb(233,141,41)"/><text x="20.3100%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.24%)</title><rect x="21.3200%" y="645" width="0.2400%" height="15" fill="rgb(239,167,4)"/><text x="21.5700%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.20%)</title><rect x="21.3600%" y="629" width="0.2000%" height="15" fill="rgb(209,217,16)"/><text x="21.6100%" y="639.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="21.4400%" y="613" width="0.1200%" height="15" fill="rgb(219,88,35)"/><text x="21.6900%" y="623.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.24%)</title><rect x="21.7800%" y="629" width="0.2400%" height="15" fill="rgb(220,193,23)"/><text x="22.0300%" y="639.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="21.9200%" y="613" width="0.1000%" height="15" fill="rgb(230,90,52)"/><text x="22.1700%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.20%)</title><rect x="22.1400%" y="629" width="0.2000%" height="15" fill="rgb(252,106,19)"/><text x="22.3900%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.18%)</title><rect x="22.4200%" y="613" width="0.1800%" height="15" fill="rgb(206,74,20)"/><text x="22.6700%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (70 samples, 1.40%)</title><rect x="21.3000%" y="661" width="1.4000%" height="15" fill="rgb(230,138,44)"/><text x="21.5500%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (52 samples, 1.04%)</title><rect x="21.6600%" y="645" width="1.0400%" height="15" fill="rgb(235,182,43)"/><text x="21.9100%" y="655.50"></text></g><g><title>core::fmt::write (18 samples, 0.36%)</title><rect x="22.3400%" y="629" width="0.3600%" height="15" fill="rgb(242,16,51)"/><text x="22.5900%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.14%)</title><rect x="22.7000%" y="629" width="0.1400%" height="15" fill="rgb(248,9,4)"/><text x="22.9500%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="22.7200%" y="613" width="0.1200%" height="15" fill="rgb(210,31,22)"/><text x="22.9700%" y="623.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="22.7400%" y="597" width="0.1000%" height="15" fill="rgb(239,54,39)"/><text x="22.9900%" y="607.50"></text></g><g><title>core::fmt::write (85 samples, 1.70%)</title><rect x="21.3000%" y="677" width="1.7000%" height="15" fill="rgb(230,99,41)"/><text x="21.5500%" y="687.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (15 samples, 0.30%)</title><rect x="22.7000%" y="661" width="0.3000%" height="15" fill="rgb(253,106,12)"/><text x="22.9500%" y="671.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (15 samples, 0.30%)</title><rect x="22.7000%" y="645" width="0.3000%" height="15" fill="rgb(213,46,41)"/><text x="22.9500%" y="655.50"></text></g><g><title>core::fmt::Formatter::pad_integral (8 samples, 0.16%)</title><rect x="22.8400%" y="629" width="0.1600%" height="15" fill="rgb(215,133,35)"/><text x="23.0900%" y="639.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="23.0000%" y="645" width="0.1600%" height="15" fill="rgb(213,28,5)"/><text x="23.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.34%)</title><rect x="23.0000%" y="677" width="0.3400%" height="15" fill="rgb(215,77,49)"/><text x="23.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.34%)</title><rect x="23.0000%" y="661" width="0.3400%" height="15" fill="rgb(248,100,22)"/><text x="23.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.18%)</title><rect x="23.1600%" y="645" width="0.1800%" height="15" fill="rgb(208,67,9)"/><text x="23.4100%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (6 samples, 0.12%)</title><rect x="23.4600%" y="645" width="0.1200%" height="15" fill="rgb(219,133,21)"/><text x="23.7100%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="23.4600%" y="629" width="0.1200%" height="15" fill="rgb(246,46,29)"/><text x="23.7100%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="23.4600%" y="613" width="0.1200%" height="15" fill="rgb(246,185,52)"/><text x="23.7100%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="23.4600%" y="597" width="0.1200%" height="15" fill="rgb(252,136,11)"/><text x="23.7100%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="23.4600%" y="581" width="0.1200%" height="15" fill="rgb(219,138,53)"/><text x="23.7100%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (5 samples, 0.10%)</title><rect x="23.4800%" y="565" width="0.1000%" height="15" fill="rgb(211,51,23)"/><text x="23.7300%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.10%)</title><rect x="23.4800%" y="549" width="0.1000%" height="15" fill="rgb(247,221,28)"/><text x="23.7300%" y="559.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.10%)</title><rect x="23.4800%" y="533" width="0.1000%" height="15" fill="rgb(251,222,45)"/><text x="23.7300%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (5 samples, 0.10%)</title><rect x="23.7000%" y="517" width="0.1000%" height="15" fill="rgb(217,162,53)"/><text x="23.9500%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="23.7000%" y="501" width="0.1000%" height="15" fill="rgb(229,93,14)"/><text x="23.9500%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (5 samples, 0.10%)</title><rect x="23.7000%" y="485" width="0.1000%" height="15" fill="rgb(209,67,49)"/><text x="23.9500%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.16%)</title><rect x="23.6600%" y="613" width="0.1600%" height="15" fill="rgb(213,87,29)"/><text x="23.9100%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="23.7000%" y="597" width="0.1200%" height="15" fill="rgb(205,151,52)"/><text x="23.9500%" y="607.50"></text></g><g><title>alloc::string::String::push_str (6 samples, 0.12%)</title><rect x="23.7000%" y="581" width="0.1200%" height="15" fill="rgb(253,215,39)"/><text x="23.9500%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.12%)</title><rect x="23.7000%" y="565" width="0.1200%" height="15" fill="rgb(221,220,41)"/><text x="23.9500%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.12%)</title><rect x="23.7000%" y="549" width="0.1200%" height="15" fill="rgb(218,133,21)"/><text x="23.9500%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.12%)</title><rect x="23.7000%" y="533" width="0.1200%" height="15" fill="rgb(221,193,43)"/><text x="23.9500%" y="543.50"></text></g><g><title>alloc::fmt::format (21 samples, 0.42%)</title><rect x="23.4600%" y="661" width="0.4200%" height="15" fill="rgb(240,128,52)"/><text x="23.7100%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (12 samples, 0.24%)</title><rect x="23.6400%" y="645" width="0.2400%" height="15" fill="rgb(253,114,12)"/><text x="23.8900%" y="655.50"></text></g><g><title>core::fmt::write (12 samples, 0.24%)</title><rect x="23.6400%" y="629" width="0.2400%" height="15" fill="rgb(215,223,47)"/><text x="23.8900%" y="639.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (43 samples, 0.86%)</title><rect x="23.3400%" y="677" width="0.8600%" height="15" fill="rgb(248,225,23)"/><text x="23.5900%" y="687.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="24.3600%" y="629" width="0.1800%" height="15" fill="rgb(250,108,0)"/><text x="24.6100%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.36%)</title><rect x="24.2000%" y="661" width="0.3600%" height="15" fill="rgb(228,208,7)"/><text x="24.4500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (15 samples, 0.30%)</title><rect x="24.2600%" y="645" width="0.3000%" height="15" fill="rgb(244,45,10)"/><text x="24.5100%" y="655.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="25.0000%" y="421" width="0.1400%" height="15" fill="rgb(207,125,25)"/><text x="25.2500%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.34%)</title><rect x="24.8400%" y="613" width="0.3400%" height="15" fill="rgb(210,195,18)"/><text x="25.0900%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.26%)</title><rect x="24.9200%" y="597" width="0.2600%" height="15" fill="rgb(249,80,12)"/><text x="25.1700%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.26%)</title><rect x="24.9200%" y="581" width="0.2600%" height="15" fill="rgb(221,65,9)"/><text x="25.1700%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.26%)</title><rect x="24.9200%" y="565" width="0.2600%" height="15" fill="rgb(235,49,36)"/><text x="25.1700%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.26%)</title><rect x="24.9200%" y="549" width="0.2600%" height="15" fill="rgb(225,32,20)"/><text x="25.1700%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.18%)</title><rect x="25.0000%" y="533" width="0.1800%" height="15" fill="rgb(215,141,46)"/><text x="25.2500%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (9 samples, 0.18%)</title><rect x="25.0000%" y="517" width="0.1800%" height="15" fill="rgb(250,160,47)"/><text x="25.2500%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.18%)</title><rect x="25.0000%" y="501" width="0.1800%" height="15" fill="rgb(216,222,40)"/><text x="25.2500%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.18%)</title><rect x="25.0000%" y="485" width="0.1800%" height="15" fill="rgb(234,217,39)"/><text x="25.2500%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (9 samples, 0.18%)</title><rect x="25.0000%" y="469" width="0.1800%" height="15" fill="rgb(207,178,40)"/><text x="25.2500%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.18%)</title><rect x="25.0000%" y="453" width="0.1800%" height="15" fill="rgb(221,136,13)"/><text x="25.2500%" y="463.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.18%)</title><rect x="25.0000%" y="437" width="0.1800%" height="15" fill="rgb(249,199,10)"/><text x="25.2500%" y="447.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (26 samples, 0.52%)</title><rect x="24.7800%" y="629" width="0.5200%" height="15" fill="rgb(249,222,13)"/><text x="25.0300%" y="639.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (36 samples, 0.72%)</title><rect x="24.6400%" y="645" width="0.7200%" height="15" fill="rgb(244,185,38)"/><text x="24.8900%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (46 samples, 0.92%)</title><rect x="24.5600%" y="661" width="0.9200%" height="15" fill="rgb(236,202,9)"/><text x="24.8100%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.30%)</title><rect x="25.6000%" y="629" width="0.3000%" height="15" fill="rgb(250,229,37)"/><text x="25.8500%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.22%)</title><rect x="25.6800%" y="613" width="0.2200%" height="15" fill="rgb(206,174,23)"/><text x="25.9300%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (18 samples, 0.36%)</title><rect x="25.5800%" y="645" width="0.3600%" height="15" fill="rgb(211,33,43)"/><text x="25.8300%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.28%)</title><rect x="26.0200%" y="645" width="0.2800%" height="15" fill="rgb(245,58,50)"/><text x="26.2700%" y="655.50"></text></g><g><title>_int_free (12 samples, 0.24%)</title><rect x="26.0600%" y="629" width="0.2400%" height="15" fill="rgb(244,68,36)"/><text x="26.3100%" y="639.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="26.7400%" y="421" width="0.2000%" height="15" fill="rgb(232,229,15)"/><text x="26.9900%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (33 samples, 0.66%)</title><rect x="26.3600%" y="629" width="0.6600%" height="15" fill="rgb(254,30,23)"/><text x="26.6100%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.66%)</title><rect x="26.3600%" y="613" width="0.6600%" height="15" fill="rgb(235,160,14)"/><text x="26.6100%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (19 samples, 0.38%)</title><rect x="26.6400%" y="597" width="0.3800%" height="15" fill="rgb(212,155,44)"/><text x="26.8900%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.36%)</title><rect x="26.6600%" y="581" width="0.3600%" height="15" fill="rgb(226,2,50)"/><text x="26.9100%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.36%)</title><rect x="26.6600%" y="565" width="0.3600%" height="15" fill="rgb(234,177,6)"/><text x="26.9100%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.36%)</title><rect x="26.6600%" y="549" width="0.3600%" height="15" fill="rgb(217,24,9)"/><text x="26.9100%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.34%)</title><rect x="26.6800%" y="533" width="0.3400%" height="15" fill="rgb(220,13,46)"/><text x="26.9300%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.34%)</title><rect x="26.6800%" y="517" width="0.3400%" height="15" fill="rgb(239,221,27)"/><text x="26.9300%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.34%)</title><rect x="26.6800%" y="501" width="0.3400%" height="15" fill="rgb(222,198,25)"/><text x="26.9300%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.34%)</title><rect x="26.6800%" y="485" width="0.3400%" height="15" fill="rgb(211,99,13)"/><text x="26.9300%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (17 samples, 0.34%)</title><rect x="26.6800%" y="469" width="0.3400%" height="15" fill="rgb(232,111,31)"/><text x="26.9300%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.34%)</title><rect x="26.6800%" y="453" width="0.3400%" height="15" fill="rgb(245,82,37)"/><text x="26.9300%" y="463.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.34%)</title><rect x="26.6800%" y="437" width="0.3400%" height="15" fill="rgb(227,149,46)"/><text x="26.9300%" y="447.50"></text></g><g><title>decor_mem::select::predicates::NamedPredicate::to_indexed_predicate (38 samples, 0.76%)</title><rect x="26.3000%" y="645" width="0.7600%" height="15" fill="rgb(218,36,50)"/><text x="26.5500%" y="655.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (5 samples, 0.10%)</title><rect x="27.1800%" y="629" width="0.1000%" height="15" fill="rgb(226,80,48)"/><text x="27.4300%" y="639.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="27.3400%" y="629" width="0.1000%" height="15" fill="rgb(238,224,15)"/><text x="27.5900%" y="639.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="27.5800%" y="629" width="0.1200%" height="15" fill="rgb(241,136,10)"/><text x="27.8300%" y="639.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_matching (6 samples, 0.12%)</title><rect x="27.7000%" y="629" width="0.1200%" height="15" fill="rgb(208,32,45)"/><text x="27.9500%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::retain (6 samples, 0.12%)</title><rect x="27.7000%" y="613" width="0.1200%" height="15" fill="rgb(207,135,9)"/><text x="27.9500%" y="623.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (108 samples, 2.16%)</title><rect x="27.8200%" y="629" width="2.1600%" height="15" fill="rgb(206,86,44)"/><text x="28.0700%" y="639.50">d..</text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (153 samples, 3.06%)</title><rect x="27.0600%" y="645" width="3.0600%" height="15" fill="rgb(245,177,15)"/><text x="27.3100%" y="655.50">dec..</text></g><g><title>decor_mem::views::View::is_indexed_col (7 samples, 0.14%)</title><rect x="29.9800%" y="629" width="0.1400%" height="15" fill="rgb(206,64,50)"/><text x="30.2300%" y="639.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (299 samples, 5.98%)</title><rect x="24.2000%" y="677" width="5.9800%" height="15" fill="rgb(234,36,40)"/><text x="24.4500%" y="687.50">decor_me..</text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (235 samples, 4.70%)</title><rect x="25.4800%" y="661" width="4.7000%" height="15" fill="rgb(213,64,8)"/><text x="25.7300%" y="671.50">decor..</text></g><g><title>__GI___libc_realloc (8 samples, 0.16%)</title><rect x="30.4200%" y="661" width="0.1600%" height="15" fill="rgb(210,75,36)"/><text x="30.6700%" y="671.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="30.8000%" y="613" width="0.1000%" height="15" fill="rgb(229,88,21)"/><text x="31.0500%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (20 samples, 0.40%)</title><rect x="30.7000%" y="645" width="0.4000%" height="15" fill="rgb(252,204,47)"/><text x="30.9500%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (18 samples, 0.36%)</title><rect x="30.7400%" y="629" width="0.3600%" height="15" fill="rgb(208,77,27)"/><text x="30.9900%" y="639.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="31.0000%" y="613" width="0.1000%" height="15" fill="rgb(221,76,26)"/><text x="31.2500%" y="623.50"></text></g><g><title>core::fmt::write (22 samples, 0.44%)</title><rect x="30.6800%" y="661" width="0.4400%" height="15" fill="rgb(225,139,18)"/><text x="30.9300%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (12 samples, 0.24%)</title><rect x="31.1200%" y="661" width="0.2400%" height="15" fill="rgb(230,137,11)"/><text x="31.3700%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (11 samples, 0.22%)</title><rect x="31.3600%" y="661" width="0.2200%" height="15" fill="rgb(212,28,1)"/><text x="31.6100%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.20%)</title><rect x="31.5800%" y="661" width="0.2000%" height="15" fill="rgb(248,164,17)"/><text x="31.8300%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="31.6400%" y="645" width="0.1400%" height="15" fill="rgb(222,171,42)"/><text x="31.8900%" y="655.50"></text></g><g><title>std::time::Instant::elapsed (10 samples, 0.20%)</title><rect x="31.7800%" y="661" width="0.2000%" height="15" fill="rgb(243,84,45)"/><text x="32.0300%" y="671.50"></text></g><g><title>std::time::Instant::now (8 samples, 0.16%)</title><rect x="31.8200%" y="645" width="0.1600%" height="15" fill="rgb(252,49,23)"/><text x="32.0700%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (8 samples, 0.16%)</title><rect x="31.8200%" y="629" width="0.1600%" height="15" fill="rgb(215,19,7)"/><text x="32.0700%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (8 samples, 0.16%)</title><rect x="31.8200%" y="613" width="0.1600%" height="15" fill="rgb(238,81,41)"/><text x="32.0700%" y="623.50"></text></g><g><title>__clock_gettime_2 (6 samples, 0.12%)</title><rect x="31.8600%" y="597" width="0.1200%" height="15" fill="rgb(210,199,37)"/><text x="32.1100%" y="607.50"></text></g><g><title>__vdso_clock_gettime (6 samples, 0.12%)</title><rect x="31.8600%" y="581" width="0.1200%" height="15" fill="rgb(244,192,49)"/><text x="32.1100%" y="591.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (92 samples, 1.84%)</title><rect x="30.1800%" y="677" width="1.8400%" height="15" fill="rgb(226,211,11)"/><text x="30.4300%" y="687.50">d..</text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (6 samples, 0.12%)</title><rect x="32.1600%" y="661" width="0.1200%" height="15" fill="rgb(236,162,54)"/><text x="32.4100%" y="671.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="32.8400%" y="645" width="0.1000%" height="15" fill="rgb(220,229,9)"/><text x="33.0900%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.12%)</title><rect x="32.9400%" y="645" width="0.1200%" height="15" fill="rgb(250,87,22)"/><text x="33.1900%" y="655.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="33.1200%" y="645" width="0.1800%" height="15" fill="rgb(239,43,17)"/><text x="33.3700%" y="655.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="33.3600%" y="613" width="0.1200%" height="15" fill="rgb(231,177,25)"/><text x="33.6100%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="33.3600%" y="597" width="0.1200%" height="15" fill="rgb(219,179,1)"/><text x="33.6100%" y="607.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="33.6800%" y="565" width="0.1000%" height="15" fill="rgb(238,219,53)"/><text x="33.9300%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (22 samples, 0.44%)</title><rect x="33.5200%" y="597" width="0.4400%" height="15" fill="rgb(232,167,36)"/><text x="33.7700%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (21 samples, 0.42%)</title><rect x="33.5400%" y="581" width="0.4200%" height="15" fill="rgb(244,19,51)"/><text x="33.7900%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="33.8600%" y="565" width="0.1000%" height="15" fill="rgb(224,6,22)"/><text x="34.1100%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (28 samples, 0.56%)</title><rect x="33.4800%" y="613" width="0.5600%" height="15" fill="rgb(224,145,5)"/><text x="33.7300%" y="623.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.22%)</title><rect x="34.2600%" y="597" width="0.2200%" height="15" fill="rgb(234,130,49)"/><text x="34.5100%" y="607.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="34.3800%" y="581" width="0.1000%" height="15" fill="rgb(254,6,2)"/><text x="34.6300%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="34.5800%" y="597" width="0.1400%" height="15" fill="rgb(208,96,46)"/><text x="34.8300%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.24%)</title><rect x="34.7800%" y="581" width="0.2400%" height="15" fill="rgb(239,3,39)"/><text x="35.0300%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="34.9000%" y="565" width="0.1200%" height="15" fill="rgb(233,210,1)"/><text x="35.1500%" y="575.50"></text></g><g><title>core::fmt::write (88 samples, 1.76%)</title><rect x="33.3000%" y="645" width="1.7600%" height="15" fill="rgb(244,137,37)"/><text x="33.5500%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (86 samples, 1.72%)</title><rect x="33.3400%" y="629" width="1.7200%" height="15" fill="rgb(240,136,2)"/><text x="33.5900%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (48 samples, 0.96%)</title><rect x="34.1000%" y="613" width="0.9600%" height="15" fill="rgb(239,18,37)"/><text x="34.3500%" y="623.50"></text></g><g><title>core::fmt::write (17 samples, 0.34%)</title><rect x="34.7200%" y="597" width="0.3400%" height="15" fill="rgb(218,185,22)"/><text x="34.9700%" y="607.50"></text></g><g><title>&lt;decor_mem::views::HashedRowPtr as core::cmp::PartialEq&gt;::eq (8 samples, 0.16%)</title><rect x="35.5600%" y="629" width="0.1600%" height="15" fill="rgb(225,218,4)"/><text x="35.8100%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="35.7400%" y="629" width="0.1200%" height="15" fill="rgb(230,182,32)"/><text x="35.9900%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (45 samples, 0.90%)</title><rect x="35.0600%" y="645" width="0.9000%" height="15" fill="rgb(242,56,43)"/><text x="35.3100%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.26%)</title><rect x="35.9600%" y="645" width="0.2600%" height="15" fill="rgb(233,99,24)"/><text x="36.2100%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="36.0800%" y="629" width="0.1400%" height="15" fill="rgb(234,209,42)"/><text x="36.3300%" y="639.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (5 samples, 0.10%)</title><rect x="36.2200%" y="629" width="0.1000%" height="15" fill="rgb(227,7,12)"/><text x="36.4700%" y="639.50"></text></g><g><title>std::time::Instant::duration_since (5 samples, 0.10%)</title><rect x="36.2200%" y="613" width="0.1000%" height="15" fill="rgb(245,203,43)"/><text x="36.4700%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (5 samples, 0.10%)</title><rect x="36.2200%" y="597" width="0.1000%" height="15" fill="rgb(238,205,33)"/><text x="36.4700%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (5 samples, 0.10%)</title><rect x="36.2200%" y="581" width="0.1000%" height="15" fill="rgb(231,56,7)"/><text x="36.4700%" y="591.50"></text></g><g><title>std::time::Instant::elapsed (7 samples, 0.14%)</title><rect x="36.2200%" y="645" width="0.1400%" height="15" fill="rgb(244,186,29)"/><text x="36.4700%" y="655.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (213 samples, 4.26%)</title><rect x="32.2800%" y="661" width="4.2600%" height="15" fill="rgb(234,111,31)"/><text x="32.5300%" y="671.50">decor..</text></g><g><title>std::time::Instant::now (9 samples, 0.18%)</title><rect x="36.3600%" y="645" width="0.1800%" height="15" fill="rgb(241,149,10)"/><text x="36.6100%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (9 samples, 0.18%)</title><rect x="36.3600%" y="629" width="0.1800%" height="15" fill="rgb(249,206,44)"/><text x="36.6100%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (9 samples, 0.18%)</title><rect x="36.3600%" y="613" width="0.1800%" height="15" fill="rgb(251,153,30)"/><text x="36.6100%" y="623.50"></text></g><g><title>__clock_gettime_2 (7 samples, 0.14%)</title><rect x="36.4000%" y="597" width="0.1400%" height="15" fill="rgb(239,152,38)"/><text x="36.6500%" y="607.50"></text></g><g><title>__vdso_clock_gettime (5 samples, 0.10%)</title><rect x="36.4400%" y="581" width="0.1000%" height="15" fill="rgb(249,139,47)"/><text x="36.6900%" y="591.50"></text></g><g><title>decor_mem::views::Views::delete (227 samples, 4.54%)</title><rect x="32.0200%" y="677" width="4.5400%" height="15" fill="rgb(244,64,35)"/><text x="32.2700%" y="687.50">decor..</text></g><g><title>decor_mem::views::Views::get_view (6 samples, 0.12%)</title><rect x="36.5600%" y="677" width="0.1200%" height="15" fill="rgb(216,46,15)"/><text x="36.8100%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="36.5600%" y="661" width="0.1200%" height="15" fill="rgb(250,74,19)"/><text x="36.8100%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="36.5600%" y="645" width="0.1200%" height="15" fill="rgb(249,42,33)"/><text x="36.8100%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (1,086 samples, 21.72%)</title><rect x="15.0400%" y="725" width="21.7200%" height="15" fill="rgb(242,149,17)"/><text x="15.2900%" y="735.50">&lt;decor_mem::Shim as msql_srv::Mysq..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (1,086 samples, 21.72%)</title><rect x="15.0400%" y="709" width="21.7200%" height="15" fill="rgb(244,29,21)"/><text x="15.2900%" y="719.50">decor_mem::query_transformer::Quer..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (979 samples, 19.58%)</title><rect x="17.1800%" y="693" width="19.5800%" height="15" fill="rgb(220,130,37)"/><text x="17.4300%" y="703.50">decor_mem::query_transformer::Q..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.12%)</title><rect x="36.7800%" y="677" width="0.1200%" height="15" fill="rgb(211,67,2)"/><text x="37.0300%" y="687.50"></text></g><g><title>enqueue_task_fair (5 samples, 0.10%)</title><rect x="37.5800%" y="53" width="0.1000%" height="15" fill="rgb(235,68,52)"/><text x="37.8300%" y="63.50"></text></g><g><title>sock_def_readable (14 samples, 0.28%)</title><rect x="37.4600%" y="133" width="0.2800%" height="15" fill="rgb(246,142,3)"/><text x="37.7100%" y="143.50"></text></g><g><title>__wake_up_common_lock (14 samples, 0.28%)</title><rect x="37.4600%" y="117" width="0.2800%" height="15" fill="rgb(241,25,7)"/><text x="37.7100%" y="127.50"></text></g><g><title>__wake_up_common (14 samples, 0.28%)</title><rect x="37.4600%" y="101" width="0.2800%" height="15" fill="rgb(242,119,39)"/><text x="37.7100%" y="111.50"></text></g><g><title>pollwake (14 samples, 0.28%)</title><rect x="37.4600%" y="85" width="0.2800%" height="15" fill="rgb(241,98,45)"/><text x="37.7100%" y="95.50"></text></g><g><title>try_to_wake_up (13 samples, 0.26%)</title><rect x="37.4800%" y="69" width="0.2600%" height="15" fill="rgb(254,28,30)"/><text x="37.7300%" y="79.50"></text></g><g><title>ip_local_deliver (26 samples, 0.52%)</title><rect x="37.3600%" y="229" width="0.5200%" height="15" fill="rgb(241,142,54)"/><text x="37.6100%" y="239.50"></text></g><g><title>ip_local_deliver_finish (26 samples, 0.52%)</title><rect x="37.3600%" y="213" width="0.5200%" height="15" fill="rgb(222,85,15)"/><text x="37.6100%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (26 samples, 0.52%)</title><rect x="37.3600%" y="197" width="0.5200%" height="15" fill="rgb(210,85,47)"/><text x="37.6100%" y="207.50"></text></g><g><title>tcp_v4_rcv (26 samples, 0.52%)</title><rect x="37.3600%" y="181" width="0.5200%" height="15" fill="rgb(224,206,25)"/><text x="37.6100%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (23 samples, 0.46%)</title><rect x="37.4200%" y="165" width="0.4600%" height="15" fill="rgb(243,201,19)"/><text x="37.6700%" y="175.50"></text></g><g><title>tcp_rcv_established (23 samples, 0.46%)</title><rect x="37.4200%" y="149" width="0.4600%" height="15" fill="rgb(236,59,4)"/><text x="37.6700%" y="159.50"></text></g><g><title>tcp_ack (7 samples, 0.14%)</title><rect x="37.7400%" y="133" width="0.1400%" height="15" fill="rgb(254,179,45)"/><text x="37.9900%" y="143.50"></text></g><g><title>__netif_receive_skb_one_core (32 samples, 0.64%)</title><rect x="37.2800%" y="261" width="0.6400%" height="15" fill="rgb(226,14,10)"/><text x="37.5300%" y="271.50"></text></g><g><title>ip_rcv (28 samples, 0.56%)</title><rect x="37.3600%" y="245" width="0.5600%" height="15" fill="rgb(244,27,41)"/><text x="37.6100%" y="255.50"></text></g><g><title>ip_finish_output2 (40 samples, 0.80%)</title><rect x="37.1400%" y="373" width="0.8000%" height="15" fill="rgb(235,35,32)"/><text x="37.3900%" y="383.50"></text></g><g><title>__local_bh_enable_ip (36 samples, 0.72%)</title><rect x="37.2200%" y="357" width="0.7200%" height="15" fill="rgb(218,68,31)"/><text x="37.4700%" y="367.50"></text></g><g><title>do_softirq (36 samples, 0.72%)</title><rect x="37.2200%" y="341" width="0.7200%" height="15" fill="rgb(207,120,37)"/><text x="37.4700%" y="351.50"></text></g><g><title>do_softirq_own_stack (36 samples, 0.72%)</title><rect x="37.2200%" y="325" width="0.7200%" height="15" fill="rgb(227,98,0)"/><text x="37.4700%" y="335.50"></text></g><g><title>__do_softirq (36 samples, 0.72%)</title><rect x="37.2200%" y="309" width="0.7200%" height="15" fill="rgb(207,7,3)"/><text x="37.4700%" y="319.50"></text></g><g><title>net_rx_action (35 samples, 0.70%)</title><rect x="37.2400%" y="293" width="0.7000%" height="15" fill="rgb(206,98,19)"/><text x="37.4900%" y="303.50"></text></g><g><title>process_backlog (33 samples, 0.66%)</title><rect x="37.2800%" y="277" width="0.6600%" height="15" fill="rgb(217,5,26)"/><text x="37.5300%" y="287.50"></text></g><g><title>__ip_queue_xmit (43 samples, 0.86%)</title><rect x="37.1000%" y="405" width="0.8600%" height="15" fill="rgb(235,190,38)"/><text x="37.3500%" y="415.50"></text></g><g><title>ip_output (42 samples, 0.84%)</title><rect x="37.1200%" y="389" width="0.8400%" height="15" fill="rgb(247,86,24)"/><text x="37.3700%" y="399.50"></text></g><g><title>__tcp_push_pending_frames (45 samples, 0.90%)</title><rect x="37.1000%" y="453" width="0.9000%" height="15" fill="rgb(205,101,16)"/><text x="37.3500%" y="463.50"></text></g><g><title>tcp_write_xmit (45 samples, 0.90%)</title><rect x="37.1000%" y="437" width="0.9000%" height="15" fill="rgb(246,168,33)"/><text x="37.3500%" y="447.50"></text></g><g><title>__tcp_transmit_skb (45 samples, 0.90%)</title><rect x="37.1000%" y="421" width="0.9000%" height="15" fill="rgb(231,114,1)"/><text x="37.3500%" y="431.50"></text></g><g><title>sock_sendmsg (55 samples, 1.10%)</title><rect x="37.0600%" y="501" width="1.1000%" height="15" fill="rgb(207,184,53)"/><text x="37.3100%" y="511.50"></text></g><g><title>tcp_sendmsg (55 samples, 1.10%)</title><rect x="37.0600%" y="485" width="1.1000%" height="15" fill="rgb(224,95,51)"/><text x="37.3100%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (53 samples, 1.06%)</title><rect x="37.1000%" y="469" width="1.0600%" height="15" fill="rgb(212,188,45)"/><text x="37.3500%" y="479.50"></text></g><g><title>__x64_sys_sendto (59 samples, 1.18%)</title><rect x="37.0200%" y="533" width="1.1800%" height="15" fill="rgb(223,154,38)"/><text x="37.2700%" y="543.50"></text></g><g><title>__sys_sendto (59 samples, 1.18%)</title><rect x="37.0200%" y="517" width="1.1800%" height="15" fill="rgb(251,22,52)"/><text x="37.2700%" y="527.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (67 samples, 1.34%)</title><rect x="36.9000%" y="677" width="1.3400%" height="15" fill="rgb(229,209,22)"/><text x="37.1500%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (66 samples, 1.32%)</title><rect x="36.9200%" y="661" width="1.3200%" height="15" fill="rgb(234,138,34)"/><text x="37.1700%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (66 samples, 1.32%)</title><rect x="36.9200%" y="645" width="1.3200%" height="15" fill="rgb(212,95,11)"/><text x="37.1700%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (63 samples, 1.26%)</title><rect x="36.9800%" y="629" width="1.2600%" height="15" fill="rgb(240,179,47)"/><text x="37.2300%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (63 samples, 1.26%)</title><rect x="36.9800%" y="613" width="1.2600%" height="15" fill="rgb(240,163,11)"/><text x="37.2300%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (63 samples, 1.26%)</title><rect x="36.9800%" y="597" width="1.2600%" height="15" fill="rgb(236,37,12)"/><text x="37.2300%" y="607.50"></text></g><g><title>__libc_send (63 samples, 1.26%)</title><rect x="36.9800%" y="581" width="1.2600%" height="15" fill="rgb(232,164,16)"/><text x="37.2300%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (61 samples, 1.22%)</title><rect x="37.0200%" y="565" width="1.2200%" height="15" fill="rgb(244,205,15)"/><text x="37.2700%" y="575.50"></text></g><g><title>do_syscall_64 (61 samples, 1.22%)</title><rect x="37.0200%" y="549" width="1.2200%" height="15" fill="rgb(223,117,47)"/><text x="37.2700%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="38.3000%" y="581" width="0.1200%" height="15" fill="rgb(244,107,35)"/><text x="38.5500%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.12%)</title><rect x="38.3000%" y="565" width="0.1200%" height="15" fill="rgb(205,140,8)"/><text x="38.5500%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (5 samples, 0.10%)</title><rect x="38.3200%" y="549" width="0.1000%" height="15" fill="rgb(228,84,46)"/><text x="38.5700%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.18%)</title><rect x="38.2800%" y="597" width="0.1800%" height="15" fill="rgb(254,188,9)"/><text x="38.5300%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="38.6000%" y="581" width="0.1000%" height="15" fill="rgb(206,112,54)"/><text x="38.8500%" y="591.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.10%)</title><rect x="38.6000%" y="565" width="0.1000%" height="15" fill="rgb(216,84,49)"/><text x="38.8500%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (22 samples, 0.44%)</title><rect x="38.2800%" y="613" width="0.4400%" height="15" fill="rgb(214,194,35)"/><text x="38.5300%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (13 samples, 0.26%)</title><rect x="38.4600%" y="597" width="0.2600%" height="15" fill="rgb(249,28,3)"/><text x="38.7100%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.18%)</title><rect x="38.7200%" y="613" width="0.1800%" height="15" fill="rgb(222,56,52)"/><text x="38.9700%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="38.8000%" y="597" width="0.1000%" height="15" fill="rgb(245,217,50)"/><text x="39.0500%" y="607.50"></text></g><g><title>alloc::fmt::format (34 samples, 0.68%)</title><rect x="38.2800%" y="677" width="0.6800%" height="15" fill="rgb(213,201,24)"/><text x="38.5300%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (34 samples, 0.68%)</title><rect x="38.2800%" y="661" width="0.6800%" height="15" fill="rgb(248,116,28)"/><text x="38.5300%" y="671.50"></text></g><g><title>core::fmt::write (34 samples, 0.68%)</title><rect x="38.2800%" y="645" width="0.6800%" height="15" fill="rgb(219,72,43)"/><text x="38.5300%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (34 samples, 0.68%)</title><rect x="38.2800%" y="629" width="0.6800%" height="15" fill="rgb(209,138,14)"/><text x="38.5300%" y="639.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.50%)</title><rect x="38.9600%" y="661" width="0.5000%" height="15" fill="rgb(222,18,33)"/><text x="39.2100%" y="671.50"></text></g><g><title>_int_malloc (25 samples, 0.50%)</title><rect x="38.9600%" y="645" width="0.5000%" height="15" fill="rgb(213,199,7)"/><text x="39.2100%" y="655.50"></text></g><g><title>malloc_consolidate (19 samples, 0.38%)</title><rect x="39.0800%" y="629" width="0.3800%" height="15" fill="rgb(250,110,10)"/><text x="39.3300%" y="639.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (137 samples, 2.74%)</title><rect x="36.7600%" y="693" width="2.7400%" height="15" fill="rgb(248,123,6)"/><text x="37.0100%" y="703.50">de..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.54%)</title><rect x="38.9600%" y="677" width="0.5400%" height="15" fill="rgb(206,91,31)"/><text x="39.2100%" y="687.50"></text></g><g><title>enqueue_task (5 samples, 0.10%)</title><rect x="40.1200%" y="53" width="0.1000%" height="15" fill="rgb(211,154,13)"/><text x="40.3700%" y="63.50"></text></g><g><title>sock_def_readable (13 samples, 0.26%)</title><rect x="40.0600%" y="133" width="0.2600%" height="15" fill="rgb(225,148,7)"/><text x="40.3100%" y="143.50"></text></g><g><title>__wake_up_common_lock (12 samples, 0.24%)</title><rect x="40.0800%" y="117" width="0.2400%" height="15" fill="rgb(220,160,43)"/><text x="40.3300%" y="127.50"></text></g><g><title>__wake_up_common (12 samples, 0.24%)</title><rect x="40.0800%" y="101" width="0.2400%" height="15" fill="rgb(213,52,39)"/><text x="40.3300%" y="111.50"></text></g><g><title>pollwake (11 samples, 0.22%)</title><rect x="40.1000%" y="85" width="0.2200%" height="15" fill="rgb(243,137,7)"/><text x="40.3500%" y="95.50"></text></g><g><title>try_to_wake_up (10 samples, 0.20%)</title><rect x="40.1200%" y="69" width="0.2000%" height="15" fill="rgb(230,79,13)"/><text x="40.3700%" y="79.50"></text></g><g><title>tcp_ack (14 samples, 0.28%)</title><rect x="40.3200%" y="133" width="0.2800%" height="15" fill="rgb(247,105,23)"/><text x="40.5700%" y="143.50"></text></g><g><title>__ip_queue_xmit (41 samples, 0.82%)</title><rect x="39.8000%" y="405" width="0.8200%" height="15" fill="rgb(223,179,41)"/><text x="40.0500%" y="415.50"></text></g><g><title>ip_output (41 samples, 0.82%)</title><rect x="39.8000%" y="389" width="0.8200%" height="15" fill="rgb(218,9,34)"/><text x="40.0500%" y="399.50"></text></g><g><title>ip_finish_output2 (41 samples, 0.82%)</title><rect x="39.8000%" y="373" width="0.8200%" height="15" fill="rgb(222,106,8)"/><text x="40.0500%" y="383.50"></text></g><g><title>__local_bh_enable_ip (37 samples, 0.74%)</title><rect x="39.8800%" y="357" width="0.7400%" height="15" fill="rgb(211,220,0)"/><text x="40.1300%" y="367.50"></text></g><g><title>do_softirq (37 samples, 0.74%)</title><rect x="39.8800%" y="341" width="0.7400%" height="15" fill="rgb(229,52,16)"/><text x="40.1300%" y="351.50"></text></g><g><title>do_softirq_own_stack (37 samples, 0.74%)</title><rect x="39.8800%" y="325" width="0.7400%" height="15" fill="rgb(212,155,18)"/><text x="40.1300%" y="335.50"></text></g><g><title>__do_softirq (37 samples, 0.74%)</title><rect x="39.8800%" y="309" width="0.7400%" height="15" fill="rgb(242,21,14)"/><text x="40.1300%" y="319.50"></text></g><g><title>net_rx_action (35 samples, 0.70%)</title><rect x="39.9200%" y="293" width="0.7000%" height="15" fill="rgb(222,19,48)"/><text x="40.1700%" y="303.50"></text></g><g><title>process_backlog (35 samples, 0.70%)</title><rect x="39.9200%" y="277" width="0.7000%" height="15" fill="rgb(232,45,27)"/><text x="40.1700%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (35 samples, 0.70%)</title><rect x="39.9200%" y="261" width="0.7000%" height="15" fill="rgb(249,103,42)"/><text x="40.1700%" y="271.50"></text></g><g><title>ip_rcv (33 samples, 0.66%)</title><rect x="39.9600%" y="245" width="0.6600%" height="15" fill="rgb(246,81,33)"/><text x="40.2100%" y="255.50"></text></g><g><title>ip_local_deliver (33 samples, 0.66%)</title><rect x="39.9600%" y="229" width="0.6600%" height="15" fill="rgb(252,33,42)"/><text x="40.2100%" y="239.50"></text></g><g><title>ip_local_deliver_finish (32 samples, 0.64%)</title><rect x="39.9800%" y="213" width="0.6400%" height="15" fill="rgb(209,212,41)"/><text x="40.2300%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (32 samples, 0.64%)</title><rect x="39.9800%" y="197" width="0.6400%" height="15" fill="rgb(207,154,6)"/><text x="40.2300%" y="207.50"></text></g><g><title>tcp_v4_rcv (31 samples, 0.62%)</title><rect x="40.0000%" y="181" width="0.6200%" height="15" fill="rgb(223,64,47)"/><text x="40.2500%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (29 samples, 0.58%)</title><rect x="40.0400%" y="165" width="0.5800%" height="15" fill="rgb(211,161,38)"/><text x="40.2900%" y="175.50"></text></g><g><title>tcp_rcv_established (29 samples, 0.58%)</title><rect x="40.0400%" y="149" width="0.5800%" height="15" fill="rgb(219,138,40)"/><text x="40.2900%" y="159.50"></text></g><g><title>__tcp_push_pending_frames (46 samples, 0.92%)</title><rect x="39.7800%" y="453" width="0.9200%" height="15" fill="rgb(241,228,46)"/><text x="40.0300%" y="463.50"></text></g><g><title>tcp_write_xmit (46 samples, 0.92%)</title><rect x="39.7800%" y="437" width="0.9200%" height="15" fill="rgb(223,209,38)"/><text x="40.0300%" y="447.50"></text></g><g><title>__tcp_transmit_skb (46 samples, 0.92%)</title><rect x="39.7800%" y="421" width="0.9200%" height="15" fill="rgb(236,164,45)"/><text x="40.0300%" y="431.50"></text></g><g><title>skb_do_copy_data_nocache (5 samples, 0.10%)</title><rect x="40.7600%" y="453" width="0.1000%" height="15" fill="rgb(231,15,5)"/><text x="41.0100%" y="463.50"></text></g><g><title>sock_sendmsg (60 samples, 1.20%)</title><rect x="39.7200%" y="501" width="1.2000%" height="15" fill="rgb(252,35,15)"/><text x="39.9700%" y="511.50"></text></g><g><title>tcp_sendmsg (60 samples, 1.20%)</title><rect x="39.7200%" y="485" width="1.2000%" height="15" fill="rgb(248,181,18)"/><text x="39.9700%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (59 samples, 1.18%)</title><rect x="39.7400%" y="469" width="1.1800%" height="15" fill="rgb(233,39,42)"/><text x="39.9900%" y="479.50"></text></g><g><title>do_syscall_64 (63 samples, 1.26%)</title><rect x="39.6800%" y="549" width="1.2600%" height="15" fill="rgb(238,110,33)"/><text x="39.9300%" y="559.50"></text></g><g><title>__x64_sys_sendto (63 samples, 1.26%)</title><rect x="39.6800%" y="533" width="1.2600%" height="15" fill="rgb(233,195,10)"/><text x="39.9300%" y="543.50"></text></g><g><title>__sys_sendto (63 samples, 1.26%)</title><rect x="39.6800%" y="517" width="1.2600%" height="15" fill="rgb(254,105,3)"/><text x="39.9300%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (65 samples, 1.30%)</title><rect x="39.6800%" y="565" width="1.3000%" height="15" fill="rgb(221,225,9)"/><text x="39.9300%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (74 samples, 1.48%)</title><rect x="39.5400%" y="677" width="1.4800%" height="15" fill="rgb(224,227,45)"/><text x="39.7900%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (73 samples, 1.46%)</title><rect x="39.5600%" y="661" width="1.4600%" height="15" fill="rgb(229,198,43)"/><text x="39.8100%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (69 samples, 1.38%)</title><rect x="39.6400%" y="645" width="1.3800%" height="15" fill="rgb(206,209,35)"/><text x="39.8900%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (67 samples, 1.34%)</title><rect x="39.6800%" y="629" width="1.3400%" height="15" fill="rgb(245,195,53)"/><text x="39.9300%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (67 samples, 1.34%)</title><rect x="39.6800%" y="613" width="1.3400%" height="15" fill="rgb(240,92,26)"/><text x="39.9300%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (67 samples, 1.34%)</title><rect x="39.6800%" y="597" width="1.3400%" height="15" fill="rgb(207,40,23)"/><text x="39.9300%" y="607.50"></text></g><g><title>__libc_send (67 samples, 1.34%)</title><rect x="39.6800%" y="581" width="1.3400%" height="15" fill="rgb(223,111,35)"/><text x="39.9300%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.14%)</title><rect x="41.2400%" y="645" width="0.1400%" height="15" fill="rgb(229,147,28)"/><text x="41.4900%" y="655.50"></text></g><g><title>core::fmt::write (12 samples, 0.24%)</title><rect x="41.1600%" y="677" width="0.2400%" height="15" fill="rgb(211,29,28)"/><text x="41.4100%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (12 samples, 0.24%)</title><rect x="41.1600%" y="661" width="0.2400%" height="15" fill="rgb(228,72,33)"/><text x="41.4100%" y="671.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (9 samples, 0.18%)</title><rect x="41.4600%" y="661" width="0.1800%" height="15" fill="rgb(205,214,31)"/><text x="41.7100%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (109 samples, 2.18%)</title><rect x="39.5000%" y="693" width="2.1800%" height="15" fill="rgb(224,111,15)"/><text x="39.7500%" y="703.50">d..</text></g><g><title>decor_mem::views::Views::delete (14 samples, 0.28%)</title><rect x="41.4000%" y="677" width="0.2800%" height="15" fill="rgb(253,21,26)"/><text x="41.6500%" y="687.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (6 samples, 0.12%)</title><rect x="41.7400%" y="693" width="0.1200%" height="15" fill="rgb(245,139,43)"/><text x="41.9900%" y="703.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (5 samples, 0.10%)</title><rect x="41.7600%" y="677" width="0.1000%" height="15" fill="rgb(252,170,7)"/><text x="42.0100%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (5 samples, 0.10%)</title><rect x="41.7600%" y="661" width="0.1000%" height="15" fill="rgb(231,118,14)"/><text x="42.0100%" y="671.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (1,343 samples, 26.86%)</title><rect x="15.0400%" y="773" width="26.8600%" height="15" fill="rgb(238,83,0)"/><text x="15.2900%" y="783.50">decor_mem::Shim::run_on_tcp</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,343 samples, 26.86%)</title><rect x="15.0400%" y="757" width="26.8600%" height="15" fill="rgb(221,39,39)"/><text x="15.2900%" y="767.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (1,343 samples, 26.86%)</title><rect x="15.0400%" y="741" width="26.8600%" height="15" fill="rgb(222,119,46)"/><text x="15.2900%" y="751.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (257 samples, 5.14%)</title><rect x="36.7600%" y="725" width="5.1400%" height="15" fill="rgb(222,165,49)"/><text x="37.0100%" y="735.50">&lt;decor..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (257 samples, 5.14%)</title><rect x="36.7600%" y="709" width="5.1400%" height="15" fill="rgb(219,113,52)"/><text x="37.0100%" y="719.50">decor_..</text></g><g><title>do_syscall_64 (19 samples, 0.38%)</title><rect x="42.0600%" y="533" width="0.3800%" height="15" fill="rgb(214,7,15)"/><text x="42.3100%" y="543.50"></text></g><g><title>__x64_sys_recvfrom (19 samples, 0.38%)</title><rect x="42.0600%" y="517" width="0.3800%" height="15" fill="rgb(235,32,4)"/><text x="42.3100%" y="527.50"></text></g><g><title>__sys_recvfrom (19 samples, 0.38%)</title><rect x="42.0600%" y="501" width="0.3800%" height="15" fill="rgb(238,90,54)"/><text x="42.3100%" y="511.50"></text></g><g><title>inet_recvmsg (19 samples, 0.38%)</title><rect x="42.0600%" y="485" width="0.3800%" height="15" fill="rgb(213,208,19)"/><text x="42.3100%" y="495.50"></text></g><g><title>tcp_recvmsg (18 samples, 0.36%)</title><rect x="42.0800%" y="469" width="0.3600%" height="15" fill="rgb(233,156,4)"/><text x="42.3300%" y="479.50"></text></g><g><title>sk_wait_data (14 samples, 0.28%)</title><rect x="42.1600%" y="453" width="0.2800%" height="15" fill="rgb(207,194,5)"/><text x="42.4100%" y="463.50"></text></g><g><title>wait_woken (13 samples, 0.26%)</title><rect x="42.1800%" y="437" width="0.2600%" height="15" fill="rgb(206,111,30)"/><text x="42.4300%" y="447.50"></text></g><g><title>schedule_timeout (12 samples, 0.24%)</title><rect x="42.2000%" y="421" width="0.2400%" height="15" fill="rgb(243,70,54)"/><text x="42.4500%" y="431.50"></text></g><g><title>schedule (12 samples, 0.24%)</title><rect x="42.2000%" y="405" width="0.2400%" height="15" fill="rgb(242,28,8)"/><text x="42.4500%" y="415.50"></text></g><g><title>__schedule (11 samples, 0.22%)</title><rect x="42.2200%" y="389" width="0.2200%" height="15" fill="rgb(219,106,18)"/><text x="42.4700%" y="399.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (20 samples, 0.40%)</title><rect x="42.0600%" y="645" width="0.4000%" height="15" fill="rgb(244,222,10)"/><text x="42.3100%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (20 samples, 0.40%)</title><rect x="42.0600%" y="629" width="0.4000%" height="15" fill="rgb(236,179,52)"/><text x="42.3100%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (20 samples, 0.40%)</title><rect x="42.0600%" y="613" width="0.4000%" height="15" fill="rgb(213,23,39)"/><text x="42.3100%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (20 samples, 0.40%)</title><rect x="42.0600%" y="597" width="0.4000%" height="15" fill="rgb(238,48,10)"/><text x="42.3100%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (20 samples, 0.40%)</title><rect x="42.0600%" y="581" width="0.4000%" height="15" fill="rgb(251,196,23)"/><text x="42.3100%" y="591.50"></text></g><g><title>__libc_recv (20 samples, 0.40%)</title><rect x="42.0600%" y="565" width="0.4000%" height="15" fill="rgb(250,152,24)"/><text x="42.3100%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (20 samples, 0.40%)</title><rect x="42.0600%" y="549" width="0.4000%" height="15" fill="rgb(209,150,17)"/><text x="42.3100%" y="559.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (21 samples, 0.42%)</title><rect x="42.0600%" y="773" width="0.4200%" height="15" fill="rgb(234,202,34)"/><text x="42.3100%" y="783.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (21 samples, 0.42%)</title><rect x="42.0600%" y="757" width="0.4200%" height="15" fill="rgb(253,148,53)"/><text x="42.3100%" y="767.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (21 samples, 0.42%)</title><rect x="42.0600%" y="741" width="0.4200%" height="15" fill="rgb(218,129,16)"/><text x="42.3100%" y="751.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (21 samples, 0.42%)</title><rect x="42.0600%" y="725" width="0.4200%" height="15" fill="rgb(216,85,19)"/><text x="42.3100%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (21 samples, 0.42%)</title><rect x="42.0600%" y="709" width="0.4200%" height="15" fill="rgb(235,228,7)"/><text x="42.3100%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (21 samples, 0.42%)</title><rect x="42.0600%" y="693" width="0.4200%" height="15" fill="rgb(245,175,0)"/><text x="42.3100%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (21 samples, 0.42%)</title><rect x="42.0600%" y="677" width="0.4200%" height="15" fill="rgb(208,168,36)"/><text x="42.3100%" y="687.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.42%)</title><rect x="42.0600%" y="661" width="0.4200%" height="15" fill="rgb(246,171,24)"/><text x="42.3100%" y="671.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (11 samples, 0.22%)</title><rect x="42.6400%" y="773" width="0.2200%" height="15" fill="rgb(215,142,24)"/><text x="42.8900%" y="783.50"></text></g><g><title>sk_wait_data (12 samples, 0.24%)</title><rect x="43.4000%" y="469" width="0.2400%" height="15" fill="rgb(250,187,7)"/><text x="43.6500%" y="479.50"></text></g><g><title>wait_woken (9 samples, 0.18%)</title><rect x="43.4600%" y="453" width="0.1800%" height="15" fill="rgb(228,66,33)"/><text x="43.7100%" y="463.50"></text></g><g><title>schedule_timeout (7 samples, 0.14%)</title><rect x="43.5000%" y="437" width="0.1400%" height="15" fill="rgb(234,215,21)"/><text x="43.7500%" y="447.50"></text></g><g><title>schedule (6 samples, 0.12%)</title><rect x="43.5200%" y="421" width="0.1200%" height="15" fill="rgb(222,191,20)"/><text x="43.7700%" y="431.50"></text></g><g><title>__schedule (6 samples, 0.12%)</title><rect x="43.5200%" y="405" width="0.1200%" height="15" fill="rgb(245,79,54)"/><text x="43.7700%" y="415.50"></text></g><g><title>inet_recvmsg (17 samples, 0.34%)</title><rect x="43.3400%" y="501" width="0.3400%" height="15" fill="rgb(240,10,37)"/><text x="43.5900%" y="511.50"></text></g><g><title>tcp_recvmsg (16 samples, 0.32%)</title><rect x="43.3600%" y="485" width="0.3200%" height="15" fill="rgb(214,192,32)"/><text x="43.6100%" y="495.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (21 samples, 0.42%)</title><rect x="43.2800%" y="661" width="0.4200%" height="15" fill="rgb(209,36,54)"/><text x="43.5300%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (20 samples, 0.40%)</title><rect x="43.3000%" y="645" width="0.4000%" height="15" fill="rgb(220,10,11)"/><text x="43.5500%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (20 samples, 0.40%)</title><rect x="43.3000%" y="629" width="0.4000%" height="15" fill="rgb(221,106,17)"/><text x="43.5500%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::read (20 samples, 0.40%)</title><rect x="43.3000%" y="613" width="0.4000%" height="15" fill="rgb(251,142,44)"/><text x="43.5500%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (20 samples, 0.40%)</title><rect x="43.3000%" y="597" width="0.4000%" height="15" fill="rgb(238,13,15)"/><text x="43.5500%" y="607.50"></text></g><g><title>__libc_recv (20 samples, 0.40%)</title><rect x="43.3000%" y="581" width="0.4000%" height="15" fill="rgb(208,107,27)"/><text x="43.5500%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (18 samples, 0.36%)</title><rect x="43.3400%" y="565" width="0.3600%" height="15" fill="rgb(205,136,37)"/><text x="43.5900%" y="575.50"></text></g><g><title>do_syscall_64 (18 samples, 0.36%)</title><rect x="43.3400%" y="549" width="0.3600%" height="15" fill="rgb(250,205,27)"/><text x="43.5900%" y="559.50"></text></g><g><title>__x64_sys_recvfrom (18 samples, 0.36%)</title><rect x="43.3400%" y="533" width="0.3600%" height="15" fill="rgb(210,80,43)"/><text x="43.5900%" y="543.50"></text></g><g><title>__sys_recvfrom (18 samples, 0.36%)</title><rect x="43.3400%" y="517" width="0.3600%" height="15" fill="rgb(247,160,36)"/><text x="43.5900%" y="527.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.54%)</title><rect x="43.2600%" y="677" width="0.5400%" height="15" fill="rgb(234,13,49)"/><text x="43.5100%" y="687.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (5 samples, 0.10%)</title><rect x="43.7000%" y="661" width="0.1000%" height="15" fill="rgb(234,122,0)"/><text x="43.9500%" y="671.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (5 samples, 0.10%)</title><rect x="43.7000%" y="645" width="0.1000%" height="15" fill="rgb(207,146,38)"/><text x="43.9500%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (30 samples, 0.60%)</title><rect x="43.2400%" y="709" width="0.6000%" height="15" fill="rgb(207,177,25)"/><text x="43.4900%" y="719.50"></text></g><g><title>mysql::conn::Conn::read_packet (30 samples, 0.60%)</title><rect x="43.2400%" y="693" width="0.6000%" height="15" fill="rgb(211,178,42)"/><text x="43.4900%" y="703.50"></text></g><g><title>sock_def_readable (8 samples, 0.16%)</title><rect x="44.1200%" y="197" width="0.1600%" height="15" fill="rgb(230,69,54)"/><text x="44.3700%" y="207.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.14%)</title><rect x="44.1400%" y="181" width="0.1400%" height="15" fill="rgb(214,135,41)"/><text x="44.3900%" y="191.50"></text></g><g><title>__wake_up_common (7 samples, 0.14%)</title><rect x="44.1400%" y="165" width="0.1400%" height="15" fill="rgb(237,67,25)"/><text x="44.3900%" y="175.50"></text></g><g><title>try_to_wake_up (7 samples, 0.14%)</title><rect x="44.1400%" y="149" width="0.1400%" height="15" fill="rgb(222,189,50)"/><text x="44.3900%" y="159.50"></text></g><g><title>tcp_ack (6 samples, 0.12%)</title><rect x="44.2800%" y="197" width="0.1200%" height="15" fill="rgb(245,148,34)"/><text x="44.5300%" y="207.50"></text></g><g><title>__netif_receive_skb_one_core (19 samples, 0.38%)</title><rect x="44.0800%" y="325" width="0.3800%" height="15" fill="rgb(222,29,6)"/><text x="44.3300%" y="335.50"></text></g><g><title>ip_rcv (18 samples, 0.36%)</title><rect x="44.1000%" y="309" width="0.3600%" height="15" fill="rgb(221,189,43)"/><text x="44.3500%" y="319.50"></text></g><g><title>ip_local_deliver (18 samples, 0.36%)</title><rect x="44.1000%" y="293" width="0.3600%" height="15" fill="rgb(207,36,27)"/><text x="44.3500%" y="303.50"></text></g><g><title>ip_local_deliver_finish (18 samples, 0.36%)</title><rect x="44.1000%" y="277" width="0.3600%" height="15" fill="rgb(217,90,24)"/><text x="44.3500%" y="287.50"></text></g><g><title>ip_protocol_deliver_rcu (18 samples, 0.36%)</title><rect x="44.1000%" y="261" width="0.3600%" height="15" fill="rgb(224,66,35)"/><text x="44.3500%" y="271.50"></text></g><g><title>tcp_v4_rcv (18 samples, 0.36%)</title><rect x="44.1000%" y="245" width="0.3600%" height="15" fill="rgb(221,13,50)"/><text x="44.3500%" y="255.50"></text></g><g><title>tcp_v4_do_rcv (17 samples, 0.34%)</title><rect x="44.1200%" y="229" width="0.3400%" height="15" fill="rgb(236,68,49)"/><text x="44.3700%" y="239.50"></text></g><g><title>tcp_rcv_established (17 samples, 0.34%)</title><rect x="44.1200%" y="213" width="0.3400%" height="15" fill="rgb(229,146,28)"/><text x="44.3700%" y="223.50"></text></g><g><title>ip_output (24 samples, 0.48%)</title><rect x="44.0000%" y="453" width="0.4800%" height="15" fill="rgb(225,31,38)"/><text x="44.2500%" y="463.50"></text></g><g><title>ip_finish_output2 (24 samples, 0.48%)</title><rect x="44.0000%" y="437" width="0.4800%" height="15" fill="rgb(250,208,3)"/><text x="44.2500%" y="447.50"></text></g><g><title>__local_bh_enable_ip (22 samples, 0.44%)</title><rect x="44.0400%" y="421" width="0.4400%" height="15" fill="rgb(246,54,23)"/><text x="44.2900%" y="431.50"></text></g><g><title>do_softirq (22 samples, 0.44%)</title><rect x="44.0400%" y="405" width="0.4400%" height="15" fill="rgb(243,76,11)"/><text x="44.2900%" y="415.50"></text></g><g><title>do_softirq_own_stack (22 samples, 0.44%)</title><rect x="44.0400%" y="389" width="0.4400%" height="15" fill="rgb(245,21,50)"/><text x="44.2900%" y="399.50"></text></g><g><title>__do_softirq (22 samples, 0.44%)</title><rect x="44.0400%" y="373" width="0.4400%" height="15" fill="rgb(228,9,43)"/><text x="44.2900%" y="383.50"></text></g><g><title>net_rx_action (22 samples, 0.44%)</title><rect x="44.0400%" y="357" width="0.4400%" height="15" fill="rgb(208,100,47)"/><text x="44.2900%" y="367.50"></text></g><g><title>process_backlog (20 samples, 0.40%)</title><rect x="44.0800%" y="341" width="0.4000%" height="15" fill="rgb(232,26,8)"/><text x="44.3300%" y="351.50"></text></g><g><title>__ip_queue_xmit (26 samples, 0.52%)</title><rect x="43.9800%" y="469" width="0.5200%" height="15" fill="rgb(216,166,38)"/><text x="44.2300%" y="479.50"></text></g><g><title>__tcp_transmit_skb (27 samples, 0.54%)</title><rect x="43.9800%" y="485" width="0.5400%" height="15" fill="rgb(251,202,51)"/><text x="44.2300%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (31 samples, 0.62%)</title><rect x="43.9600%" y="517" width="0.6200%" height="15" fill="rgb(254,216,34)"/><text x="44.2100%" y="527.50"></text></g><g><title>tcp_write_xmit (30 samples, 0.60%)</title><rect x="43.9800%" y="501" width="0.6000%" height="15" fill="rgb(251,32,27)"/><text x="44.2300%" y="511.50"></text></g><g><title>do_syscall_64 (41 samples, 0.82%)</title><rect x="43.8400%" y="613" width="0.8200%" height="15" fill="rgb(208,127,28)"/><text x="44.0900%" y="623.50"></text></g><g><title>__x64_sys_sendto (40 samples, 0.80%)</title><rect x="43.8600%" y="597" width="0.8000%" height="15" fill="rgb(224,137,22)"/><text x="44.1100%" y="607.50"></text></g><g><title>__sys_sendto (40 samples, 0.80%)</title><rect x="43.8600%" y="581" width="0.8000%" height="15" fill="rgb(254,70,32)"/><text x="44.1100%" y="591.50"></text></g><g><title>sock_sendmsg (39 samples, 0.78%)</title><rect x="43.8800%" y="565" width="0.7800%" height="15" fill="rgb(229,75,37)"/><text x="44.1300%" y="575.50"></text></g><g><title>tcp_sendmsg (39 samples, 0.78%)</title><rect x="43.8800%" y="549" width="0.7800%" height="15" fill="rgb(252,64,23)"/><text x="44.1300%" y="559.50"></text></g><g><title>tcp_sendmsg_locked (38 samples, 0.76%)</title><rect x="43.9000%" y="533" width="0.7600%" height="15" fill="rgb(232,162,48)"/><text x="44.1500%" y="543.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (72 samples, 1.44%)</title><rect x="43.2400%" y="757" width="1.4400%" height="15" fill="rgb(246,160,12)"/><text x="43.4900%" y="767.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (72 samples, 1.44%)</title><rect x="43.2400%" y="741" width="1.4400%" height="15" fill="rgb(247,166,0)"/><text x="43.4900%" y="751.50"></text></g><g><title>mysql::conn::Conn::_query (72 samples, 1.44%)</title><rect x="43.2400%" y="725" width="1.4400%" height="15" fill="rgb(249,219,21)"/><text x="43.4900%" y="735.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (42 samples, 0.84%)</title><rect x="43.8400%" y="709" width="0.8400%" height="15" fill="rgb(205,209,3)"/><text x="44.0900%" y="719.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (42 samples, 0.84%)</title><rect x="43.8400%" y="693" width="0.8400%" height="15" fill="rgb(243,44,1)"/><text x="44.0900%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (42 samples, 0.84%)</title><rect x="43.8400%" y="677" width="0.8400%" height="15" fill="rgb(206,159,16)"/><text x="44.0900%" y="687.50"></text></g><g><title>std::sys_common::net::TcpStream::write (42 samples, 0.84%)</title><rect x="43.8400%" y="661" width="0.8400%" height="15" fill="rgb(244,77,30)"/><text x="44.0900%" y="671.50"></text></g><g><title>__libc_send (42 samples, 0.84%)</title><rect x="43.8400%" y="645" width="0.8400%" height="15" fill="rgb(218,69,12)"/><text x="44.0900%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (42 samples, 0.84%)</title><rect x="43.8400%" y="629" width="0.8400%" height="15" fill="rgb(212,87,7)"/><text x="44.0900%" y="639.50"></text></g><g><title>sk_wait_data (16 samples, 0.32%)</title><rect x="44.7400%" y="469" width="0.3200%" height="15" fill="rgb(245,114,25)"/><text x="44.9900%" y="479.50"></text></g><g><title>wait_woken (13 samples, 0.26%)</title><rect x="44.8000%" y="453" width="0.2600%" height="15" fill="rgb(210,61,42)"/><text x="45.0500%" y="463.50"></text></g><g><title>schedule_timeout (13 samples, 0.26%)</title><rect x="44.8000%" y="437" width="0.2600%" height="15" fill="rgb(211,52,33)"/><text x="45.0500%" y="447.50"></text></g><g><title>schedule (13 samples, 0.26%)</title><rect x="44.8000%" y="421" width="0.2600%" height="15" fill="rgb(234,58,33)"/><text x="45.0500%" y="431.50"></text></g><g><title>__schedule (13 samples, 0.26%)</title><rect x="44.8000%" y="405" width="0.2600%" height="15" fill="rgb(220,115,36)"/><text x="45.0500%" y="415.50"></text></g><g><title>__x64_sys_recvfrom (23 samples, 0.46%)</title><rect x="44.7200%" y="533" width="0.4600%" height="15" fill="rgb(243,153,54)"/><text x="44.9700%" y="543.50"></text></g><g><title>__sys_recvfrom (23 samples, 0.46%)</title><rect x="44.7200%" y="517" width="0.4600%" height="15" fill="rgb(251,47,18)"/><text x="44.9700%" y="527.50"></text></g><g><title>inet_recvmsg (23 samples, 0.46%)</title><rect x="44.7200%" y="501" width="0.4600%" height="15" fill="rgb(242,102,42)"/><text x="44.9700%" y="511.50"></text></g><g><title>tcp_recvmsg (23 samples, 0.46%)</title><rect x="44.7200%" y="485" width="0.4600%" height="15" fill="rgb(234,31,38)"/><text x="44.9700%" y="495.50"></text></g><g><title>skb_copy_datagram_iter (6 samples, 0.12%)</title><rect x="45.0600%" y="469" width="0.1200%" height="15" fill="rgb(221,117,51)"/><text x="45.3100%" y="479.50"></text></g><g><title>__skb_datagram_iter (6 samples, 0.12%)</title><rect x="45.0600%" y="453" width="0.1200%" height="15" fill="rgb(212,20,18)"/><text x="45.3100%" y="463.50"></text></g><g><title>_copy_to_iter (6 samples, 0.12%)</title><rect x="45.0600%" y="437" width="0.1200%" height="15" fill="rgb(245,133,36)"/><text x="45.3100%" y="447.50"></text></g><g><title>copy_user_enhanced_fast_string (6 samples, 0.12%)</title><rect x="45.0600%" y="421" width="0.1200%" height="15" fill="rgb(212,6,19)"/><text x="45.3100%" y="431.50"></text></g><g><title>page_fault (5 samples, 0.10%)</title><rect x="45.0800%" y="405" width="0.1000%" height="15" fill="rgb(218,1,36)"/><text x="45.3300%" y="415.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.50%)</title><rect x="44.7000%" y="677" width="0.5000%" height="15" fill="rgb(246,84,54)"/><text x="44.9500%" y="687.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (25 samples, 0.50%)</title><rect x="44.7000%" y="661" width="0.5000%" height="15" fill="rgb(242,110,6)"/><text x="44.9500%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (25 samples, 0.50%)</title><rect x="44.7000%" y="645" width="0.5000%" height="15" fill="rgb(214,47,5)"/><text x="44.9500%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (25 samples, 0.50%)</title><rect x="44.7000%" y="629" width="0.5000%" height="15" fill="rgb(218,159,25)"/><text x="44.9500%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::read (25 samples, 0.50%)</title><rect x="44.7000%" y="613" width="0.5000%" height="15" fill="rgb(215,211,28)"/><text x="44.9500%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (25 samples, 0.50%)</title><rect x="44.7000%" y="597" width="0.5000%" height="15" fill="rgb(238,59,32)"/><text x="44.9500%" y="607.50"></text></g><g><title>__libc_recv (25 samples, 0.50%)</title><rect x="44.7000%" y="581" width="0.5000%" height="15" fill="rgb(226,82,3)"/><text x="44.9500%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (25 samples, 0.50%)</title><rect x="44.7000%" y="565" width="0.5000%" height="15" fill="rgb(240,164,32)"/><text x="44.9500%" y="575.50"></text></g><g><title>do_syscall_64 (24 samples, 0.48%)</title><rect x="44.7200%" y="549" width="0.4800%" height="15" fill="rgb(232,46,7)"/><text x="44.9700%" y="559.50"></text></g><g><title>mysql::conn::Conn::read_packet (28 samples, 0.56%)</title><rect x="44.7000%" y="693" width="0.5600%" height="15" fill="rgb(229,129,53)"/><text x="44.9500%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (29 samples, 0.58%)</title><rect x="44.7000%" y="709" width="0.5800%" height="15" fill="rgb(234,188,29)"/><text x="44.9500%" y="719.50"></text></g><g><title>try_to_wake_up (6 samples, 0.12%)</title><rect x="45.5800%" y="149" width="0.1200%" height="15" fill="rgb(246,141,4)"/><text x="45.8300%" y="159.50"></text></g><g><title>sock_def_readable (7 samples, 0.14%)</title><rect x="45.5800%" y="197" width="0.1400%" height="15" fill="rgb(229,23,39)"/><text x="45.8300%" y="207.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.14%)</title><rect x="45.5800%" y="181" width="0.1400%" height="15" fill="rgb(206,12,3)"/><text x="45.8300%" y="191.50"></text></g><g><title>__wake_up_common (7 samples, 0.14%)</title><rect x="45.5800%" y="165" width="0.1400%" height="15" fill="rgb(252,226,20)"/><text x="45.8300%" y="175.50"></text></g><g><title>tcp_ack (5 samples, 0.10%)</title><rect x="45.7200%" y="197" width="0.1000%" height="15" fill="rgb(216,123,35)"/><text x="45.9700%" y="207.50"></text></g><g><title>ip_finish_output2 (23 samples, 0.46%)</title><rect x="45.4000%" y="437" width="0.4600%" height="15" fill="rgb(212,68,40)"/><text x="45.6500%" y="447.50"></text></g><g><title>__local_bh_enable_ip (20 samples, 0.40%)</title><rect x="45.4600%" y="421" width="0.4000%" height="15" fill="rgb(254,125,32)"/><text x="45.7100%" y="431.50"></text></g><g><title>do_softirq (20 samples, 0.40%)</title><rect x="45.4600%" y="405" width="0.4000%" height="15" fill="rgb(253,97,22)"/><text x="45.7100%" y="415.50"></text></g><g><title>do_softirq_own_stack (20 samples, 0.40%)</title><rect x="45.4600%" y="389" width="0.4000%" height="15" fill="rgb(241,101,14)"/><text x="45.7100%" y="399.50"></text></g><g><title>__do_softirq (20 samples, 0.40%)</title><rect x="45.4600%" y="373" width="0.4000%" height="15" fill="rgb(238,103,29)"/><text x="45.7100%" y="383.50"></text></g><g><title>net_rx_action (20 samples, 0.40%)</title><rect x="45.4600%" y="357" width="0.4000%" height="15" fill="rgb(233,195,47)"/><text x="45.7100%" y="367.50"></text></g><g><title>process_backlog (20 samples, 0.40%)</title><rect x="45.4600%" y="341" width="0.4000%" height="15" fill="rgb(246,218,30)"/><text x="45.7100%" y="351.50"></text></g><g><title>__netif_receive_skb_one_core (20 samples, 0.40%)</title><rect x="45.4600%" y="325" width="0.4000%" height="15" fill="rgb(219,145,47)"/><text x="45.7100%" y="335.50"></text></g><g><title>ip_rcv (20 samples, 0.40%)</title><rect x="45.4600%" y="309" width="0.4000%" height="15" fill="rgb(243,12,26)"/><text x="45.7100%" y="319.50"></text></g><g><title>ip_local_deliver (20 samples, 0.40%)</title><rect x="45.4600%" y="293" width="0.4000%" height="15" fill="rgb(214,87,16)"/><text x="45.7100%" y="303.50"></text></g><g><title>ip_local_deliver_finish (20 samples, 0.40%)</title><rect x="45.4600%" y="277" width="0.4000%" height="15" fill="rgb(208,99,42)"/><text x="45.7100%" y="287.50"></text></g><g><title>ip_protocol_deliver_rcu (19 samples, 0.38%)</title><rect x="45.4800%" y="261" width="0.3800%" height="15" fill="rgb(253,99,2)"/><text x="45.7300%" y="271.50"></text></g><g><title>tcp_v4_rcv (18 samples, 0.36%)</title><rect x="45.5000%" y="245" width="0.3600%" height="15" fill="rgb(220,168,23)"/><text x="45.7500%" y="255.50"></text></g><g><title>tcp_v4_do_rcv (15 samples, 0.30%)</title><rect x="45.5600%" y="229" width="0.3000%" height="15" fill="rgb(242,38,24)"/><text x="45.8100%" y="239.50"></text></g><g><title>tcp_rcv_established (15 samples, 0.30%)</title><rect x="45.5600%" y="213" width="0.3000%" height="15" fill="rgb(225,182,9)"/><text x="45.8100%" y="223.50"></text></g><g><title>__tcp_push_pending_frames (27 samples, 0.54%)</title><rect x="45.3400%" y="517" width="0.5400%" height="15" fill="rgb(243,178,37)"/><text x="45.5900%" y="527.50"></text></g><g><title>tcp_write_xmit (27 samples, 0.54%)</title><rect x="45.3400%" y="501" width="0.5400%" height="15" fill="rgb(232,139,19)"/><text x="45.5900%" y="511.50"></text></g><g><title>__tcp_transmit_skb (26 samples, 0.52%)</title><rect x="45.3600%" y="485" width="0.5200%" height="15" fill="rgb(225,201,24)"/><text x="45.6100%" y="495.50"></text></g><g><title>__ip_queue_xmit (25 samples, 0.50%)</title><rect x="45.3800%" y="469" width="0.5000%" height="15" fill="rgb(221,47,46)"/><text x="45.6300%" y="479.50"></text></g><g><title>ip_output (24 samples, 0.48%)</title><rect x="45.4000%" y="453" width="0.4800%" height="15" fill="rgb(249,23,13)"/><text x="45.6500%" y="463.50"></text></g><g><title>do_syscall_64 (31 samples, 0.62%)</title><rect x="45.3200%" y="613" width="0.6200%" height="15" fill="rgb(219,9,5)"/><text x="45.5700%" y="623.50"></text></g><g><title>__x64_sys_sendto (31 samples, 0.62%)</title><rect x="45.3200%" y="597" width="0.6200%" height="15" fill="rgb(254,171,16)"/><text x="45.5700%" y="607.50"></text></g><g><title>__sys_sendto (31 samples, 0.62%)</title><rect x="45.3200%" y="581" width="0.6200%" height="15" fill="rgb(230,171,20)"/><text x="45.5700%" y="591.50"></text></g><g><title>sock_sendmsg (31 samples, 0.62%)</title><rect x="45.3200%" y="565" width="0.6200%" height="15" fill="rgb(210,71,41)"/><text x="45.5700%" y="575.50"></text></g><g><title>tcp_sendmsg (31 samples, 0.62%)</title><rect x="45.3200%" y="549" width="0.6200%" height="15" fill="rgb(206,173,20)"/><text x="45.5700%" y="559.50"></text></g><g><title>tcp_sendmsg_locked (30 samples, 0.60%)</title><rect x="45.3400%" y="533" width="0.6000%" height="15" fill="rgb(233,88,34)"/><text x="45.5900%" y="543.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (66 samples, 1.32%)</title><rect x="44.6800%" y="741" width="1.3200%" height="15" fill="rgb(223,209,46)"/><text x="44.9300%" y="751.50"></text></g><g><title>mysql::conn::Conn::_query (66 samples, 1.32%)</title><rect x="44.6800%" y="725" width="1.3200%" height="15" fill="rgb(250,43,18)"/><text x="44.9300%" y="735.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (36 samples, 0.72%)</title><rect x="45.2800%" y="709" width="0.7200%" height="15" fill="rgb(208,13,10)"/><text x="45.5300%" y="719.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (36 samples, 0.72%)</title><rect x="45.2800%" y="693" width="0.7200%" height="15" fill="rgb(212,200,36)"/><text x="45.5300%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (36 samples, 0.72%)</title><rect x="45.2800%" y="677" width="0.7200%" height="15" fill="rgb(225,90,30)"/><text x="45.5300%" y="687.50"></text></g><g><title>std::sys_common::net::TcpStream::write (36 samples, 0.72%)</title><rect x="45.2800%" y="661" width="0.7200%" height="15" fill="rgb(236,182,39)"/><text x="45.5300%" y="671.50"></text></g><g><title>__libc_send (36 samples, 0.72%)</title><rect x="45.2800%" y="645" width="0.7200%" height="15" fill="rgb(212,144,35)"/><text x="45.5300%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (34 samples, 0.68%)</title><rect x="45.3200%" y="629" width="0.6800%" height="15" fill="rgb(228,63,44)"/><text x="45.5700%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_u64 (5 samples, 0.10%)</title><rect x="46.2400%" y="677" width="0.1000%" height="15" fill="rgb(228,109,6)"/><text x="46.4900%" y="687.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (5 samples, 0.10%)</title><rect x="46.2400%" y="661" width="0.1000%" height="15" fill="rgb(238,117,24)"/><text x="46.4900%" y="671.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.24%)</title><rect x="46.3400%" y="677" width="0.2400%" height="15" fill="rgb(242,26,26)"/><text x="46.5900%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (7 samples, 0.14%)</title><rect x="46.4400%" y="661" width="0.1400%" height="15" fill="rgb(221,92,48)"/><text x="46.6900%" y="671.50"></text></g><g><title>lobsters_microbenchmarks::main (171 samples, 3.42%)</title><rect x="43.2000%" y="773" width="3.4200%" height="15" fill="rgb(209,209,32)"/><text x="43.4500%" y="783.50">lob..</text></g><g><title>lobsters_microbenchmarks::queriers::user::unsubscribe_user (97 samples, 1.94%)</title><rect x="44.6800%" y="757" width="1.9400%" height="15" fill="rgb(221,70,22)"/><text x="44.9300%" y="767.50">l..</text></g><g><title>serde_json::de::from_str (25 samples, 0.50%)</title><rect x="46.1200%" y="741" width="0.5000%" height="15" fill="rgb(248,145,5)"/><text x="46.3700%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (25 samples, 0.50%)</title><rect x="46.1200%" y="725" width="0.5000%" height="15" fill="rgb(226,116,26)"/><text x="46.3700%" y="735.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (25 samples, 0.50%)</title><rect x="46.1200%" y="709" width="0.5000%" height="15" fill="rgb(244,5,17)"/><text x="46.3700%" y="719.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (25 samples, 0.50%)</title><rect x="46.1200%" y="693" width="0.5000%" height="15" fill="rgb(252,159,33)"/><text x="46.3700%" y="703.50"></text></g><g><title>ip_finish_output2 (10 samples, 0.20%)</title><rect x="46.9000%" y="405" width="0.2000%" height="15" fill="rgb(206,71,0)"/><text x="47.1500%" y="415.50"></text></g><g><title>__local_bh_enable_ip (9 samples, 0.18%)</title><rect x="46.9200%" y="389" width="0.1800%" height="15" fill="rgb(233,118,54)"/><text x="47.1700%" y="399.50"></text></g><g><title>do_softirq (9 samples, 0.18%)</title><rect x="46.9200%" y="373" width="0.1800%" height="15" fill="rgb(234,83,48)"/><text x="47.1700%" y="383.50"></text></g><g><title>do_softirq_own_stack (8 samples, 0.16%)</title><rect x="46.9400%" y="357" width="0.1600%" height="15" fill="rgb(228,3,54)"/><text x="47.1900%" y="367.50"></text></g><g><title>__do_softirq (8 samples, 0.16%)</title><rect x="46.9400%" y="341" width="0.1600%" height="15" fill="rgb(226,155,13)"/><text x="47.1900%" y="351.50"></text></g><g><title>net_rx_action (7 samples, 0.14%)</title><rect x="46.9600%" y="325" width="0.1400%" height="15" fill="rgb(241,28,37)"/><text x="47.2100%" y="335.50"></text></g><g><title>process_backlog (7 samples, 0.14%)</title><rect x="46.9600%" y="309" width="0.1400%" height="15" fill="rgb(233,93,10)"/><text x="47.2100%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (6 samples, 0.12%)</title><rect x="46.9800%" y="293" width="0.1200%" height="15" fill="rgb(225,113,19)"/><text x="47.2300%" y="303.50"></text></g><g><title>ip_rcv (6 samples, 0.12%)</title><rect x="46.9800%" y="277" width="0.1200%" height="15" fill="rgb(241,2,18)"/><text x="47.2300%" y="287.50"></text></g><g><title>ip_local_deliver (6 samples, 0.12%)</title><rect x="46.9800%" y="261" width="0.1200%" height="15" fill="rgb(228,207,21)"/><text x="47.2300%" y="271.50"></text></g><g><title>ip_local_deliver_finish (5 samples, 0.10%)</title><rect x="47.0000%" y="245" width="0.1000%" height="15" fill="rgb(213,211,35)"/><text x="47.2500%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (5 samples, 0.10%)</title><rect x="47.0000%" y="229" width="0.1000%" height="15" fill="rgb(209,83,10)"/><text x="47.2500%" y="239.50"></text></g><g><title>tcp_v4_rcv (5 samples, 0.10%)</title><rect x="47.0000%" y="213" width="0.1000%" height="15" fill="rgb(209,164,1)"/><text x="47.2500%" y="223.50"></text></g><g><title>__ip_queue_xmit (12 samples, 0.24%)</title><rect x="46.8800%" y="437" width="0.2400%" height="15" fill="rgb(213,184,43)"/><text x="47.1300%" y="447.50"></text></g><g><title>ip_output (11 samples, 0.22%)</title><rect x="46.9000%" y="421" width="0.2200%" height="15" fill="rgb(231,61,34)"/><text x="47.1500%" y="431.50"></text></g><g><title>__tcp_transmit_skb (15 samples, 0.30%)</title><rect x="46.8400%" y="453" width="0.3000%" height="15" fill="rgb(235,75,3)"/><text x="47.0900%" y="463.50"></text></g><g><title>__tcp_push_pending_frames (17 samples, 0.34%)</title><rect x="46.8400%" y="485" width="0.3400%" height="15" fill="rgb(220,106,47)"/><text x="47.0900%" y="495.50"></text></g><g><title>tcp_write_xmit (17 samples, 0.34%)</title><rect x="46.8400%" y="469" width="0.3400%" height="15" fill="rgb(210,196,33)"/><text x="47.0900%" y="479.50"></text></g><g><title>__x64_sys_sendto (20 samples, 0.40%)</title><rect x="46.8000%" y="565" width="0.4000%" height="15" fill="rgb(229,154,42)"/><text x="47.0500%" y="575.50"></text></g><g><title>__sys_sendto (20 samples, 0.40%)</title><rect x="46.8000%" y="549" width="0.4000%" height="15" fill="rgb(228,114,26)"/><text x="47.0500%" y="559.50"></text></g><g><title>sock_sendmsg (19 samples, 0.38%)</title><rect x="46.8200%" y="533" width="0.3800%" height="15" fill="rgb(208,144,1)"/><text x="47.0700%" y="543.50"></text></g><g><title>tcp_sendmsg (18 samples, 0.36%)</title><rect x="46.8400%" y="517" width="0.3600%" height="15" fill="rgb(239,112,37)"/><text x="47.0900%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (18 samples, 0.36%)</title><rect x="46.8400%" y="501" width="0.3600%" height="15" fill="rgb(210,96,50)"/><text x="47.0900%" y="511.50"></text></g><g><title>mysql::conn::Conn::_query (25 samples, 0.50%)</title><rect x="46.7200%" y="693" width="0.5000%" height="15" fill="rgb(222,178,2)"/><text x="46.9700%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (24 samples, 0.48%)</title><rect x="46.7400%" y="677" width="0.4800%" height="15" fill="rgb(226,74,18)"/><text x="46.9900%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (23 samples, 0.46%)</title><rect x="46.7600%" y="661" width="0.4600%" height="15" fill="rgb(225,67,54)"/><text x="47.0100%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (22 samples, 0.44%)</title><rect x="46.7800%" y="645" width="0.4400%" height="15" fill="rgb(251,92,32)"/><text x="47.0300%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (22 samples, 0.44%)</title><rect x="46.7800%" y="629" width="0.4400%" height="15" fill="rgb(228,149,22)"/><text x="47.0300%" y="639.50"></text></g><g><title>__libc_send (22 samples, 0.44%)</title><rect x="46.7800%" y="613" width="0.4400%" height="15" fill="rgb(243,54,13)"/><text x="47.0300%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (21 samples, 0.42%)</title><rect x="46.8000%" y="597" width="0.4200%" height="15" fill="rgb(243,180,28)"/><text x="47.0500%" y="607.50"></text></g><g><title>do_syscall_64 (21 samples, 0.42%)</title><rect x="46.8000%" y="581" width="0.4200%" height="15" fill="rgb(208,167,24)"/><text x="47.0500%" y="591.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (29 samples, 0.58%)</title><rect x="46.6600%" y="709" width="0.5800%" height="15" fill="rgb(245,73,45)"/><text x="46.9100%" y="719.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (6 samples, 0.12%)</title><rect x="47.2400%" y="709" width="0.1200%" height="15" fill="rgb(237,203,48)"/><text x="47.4900%" y="719.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="47.4200%" y="677" width="0.1200%" height="15" fill="rgb(211,197,16)"/><text x="47.6700%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="47.4200%" y="661" width="0.1200%" height="15" fill="rgb(243,99,51)"/><text x="47.6700%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.18%)</title><rect x="47.5400%" y="677" width="0.1800%" height="15" fill="rgb(215,123,29)"/><text x="47.7900%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (9 samples, 0.18%)</title><rect x="47.5400%" y="661" width="0.1800%" height="15" fill="rgb(239,186,37)"/><text x="47.7900%" y="671.50"></text></g><g><title>page_fault (8 samples, 0.16%)</title><rect x="47.5600%" y="645" width="0.1600%" height="15" fill="rgb(252,136,39)"/><text x="47.8100%" y="655.50"></text></g><g><title>do_user_addr_fault (8 samples, 0.16%)</title><rect x="47.5600%" y="629" width="0.1600%" height="15" fill="rgb(223,213,32)"/><text x="47.8100%" y="639.50"></text></g><g><title>handle_mm_fault (7 samples, 0.14%)</title><rect x="47.5800%" y="613" width="0.1400%" height="15" fill="rgb(233,115,5)"/><text x="47.8300%" y="623.50"></text></g><g><title>__handle_mm_fault (7 samples, 0.14%)</title><rect x="47.5800%" y="597" width="0.1400%" height="15" fill="rgb(207,226,44)"/><text x="47.8300%" y="607.50"></text></g><g><title>perf_event_mmap (6 samples, 0.12%)</title><rect x="47.7800%" y="517" width="0.1200%" height="15" fill="rgb(208,126,0)"/><text x="48.0300%" y="527.50"></text></g><g><title>perf_iterate_sb (6 samples, 0.12%)</title><rect x="47.7800%" y="501" width="0.1200%" height="15" fill="rgb(244,66,21)"/><text x="48.0300%" y="511.50"></text></g><g><title>__x64_sys_mprotect (8 samples, 0.16%)</title><rect x="47.7600%" y="565" width="0.1600%" height="15" fill="rgb(222,97,12)"/><text x="48.0100%" y="575.50"></text></g><g><title>do_mprotect_pkey (8 samples, 0.16%)</title><rect x="47.7600%" y="549" width="0.1600%" height="15" fill="rgb(219,213,19)"/><text x="48.0100%" y="559.50"></text></g><g><title>mprotect_fixup (8 samples, 0.16%)</title><rect x="47.7600%" y="533" width="0.1600%" height="15" fill="rgb(252,169,30)"/><text x="48.0100%" y="543.50"></text></g><g><title>__GI___mprotect (10 samples, 0.20%)</title><rect x="47.7400%" y="613" width="0.2000%" height="15" fill="rgb(206,32,51)"/><text x="47.9900%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.18%)</title><rect x="47.7600%" y="597" width="0.1800%" height="15" fill="rgb(250,172,42)"/><text x="48.0100%" y="607.50"></text></g><g><title>do_syscall_64 (9 samples, 0.18%)</title><rect x="47.7600%" y="581" width="0.1800%" height="15" fill="rgb(209,34,43)"/><text x="48.0100%" y="591.50"></text></g><g><title>page_fault (5 samples, 0.10%)</title><rect x="47.9400%" y="613" width="0.1000%" height="15" fill="rgb(223,11,35)"/><text x="48.1900%" y="623.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.10%)</title><rect x="47.9400%" y="597" width="0.1000%" height="15" fill="rgb(251,219,26)"/><text x="48.1900%" y="607.50"></text></g><g><title>handle_mm_fault (5 samples, 0.10%)</title><rect x="47.9400%" y="581" width="0.1000%" height="15" fill="rgb(231,119,3)"/><text x="48.1900%" y="591.50"></text></g><g><title>__handle_mm_fault (5 samples, 0.10%)</title><rect x="47.9400%" y="565" width="0.1000%" height="15" fill="rgb(216,97,11)"/><text x="48.1900%" y="575.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (70 samples, 1.40%)</title><rect x="46.6600%" y="741" width="1.4000%" height="15" fill="rgb(223,59,9)"/><text x="46.9100%" y="751.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (70 samples, 1.40%)</title><rect x="46.6600%" y="725" width="1.4000%" height="15" fill="rgb(233,93,31)"/><text x="46.9100%" y="735.50"></text></g><g><title>decor_mem::views::Views::insert (35 samples, 0.70%)</title><rect x="47.3600%" y="709" width="0.7000%" height="15" fill="rgb(239,81,33)"/><text x="47.6100%" y="719.50"></text></g><g><title>decor_mem::views::View::insert_into_index (33 samples, 0.66%)</title><rect x="47.4000%" y="693" width="0.6600%" height="15" fill="rgb(213,120,34)"/><text x="47.6500%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (17 samples, 0.34%)</title><rect x="47.7200%" y="677" width="0.3400%" height="15" fill="rgb(243,49,53)"/><text x="47.9700%" y="687.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.34%)</title><rect x="47.7200%" y="661" width="0.3400%" height="15" fill="rgb(247,216,33)"/><text x="47.9700%" y="671.50"></text></g><g><title>_int_malloc (17 samples, 0.34%)</title><rect x="47.7200%" y="645" width="0.3400%" height="15" fill="rgb(226,26,14)"/><text x="47.9700%" y="655.50"></text></g><g><title>sysmalloc (16 samples, 0.32%)</title><rect x="47.7400%" y="629" width="0.3200%" height="15" fill="rgb(215,49,53)"/><text x="47.9900%" y="639.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (73 samples, 1.46%)</title><rect x="46.6200%" y="773" width="1.4600%" height="15" fill="rgb(245,162,40)"/><text x="46.8700%" y="783.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (71 samples, 1.42%)</title><rect x="46.6600%" y="757" width="1.4200%" height="15" fill="rgb(229,68,17)"/><text x="46.9100%" y="767.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (5 samples, 0.10%)</title><rect x="48.0800%" y="741" width="0.1000%" height="15" fill="rgb(213,182,10)"/><text x="48.3300%" y="751.50"></text></g><g><title>decor_mem::Shim::create_schema (5 samples, 0.10%)</title><rect x="48.0800%" y="725" width="0.1000%" height="15" fill="rgb(245,125,30)"/><text x="48.3300%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="48.2400%" y="693" width="0.1400%" height="15" fill="rgb(232,202,2)"/><text x="48.4900%" y="703.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.14%)</title><rect x="48.2400%" y="677" width="0.1400%" height="15" fill="rgb(237,140,51)"/><text x="48.4900%" y="687.50"></text></g><g><title>_int_realloc (7 samples, 0.14%)</title><rect x="48.2400%" y="661" width="0.1400%" height="15" fill="rgb(236,157,25)"/><text x="48.4900%" y="671.50"></text></g><g><title>_int_malloc (7 samples, 0.14%)</title><rect x="48.2400%" y="645" width="0.1400%" height="15" fill="rgb(219,209,0)"/><text x="48.4900%" y="655.50"></text></g><g><title>sysmalloc (6 samples, 0.12%)</title><rect x="48.2600%" y="629" width="0.1200%" height="15" fill="rgb(240,116,54)"/><text x="48.5100%" y="639.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="48.3800%" y="693" width="0.1200%" height="15" fill="rgb(216,10,36)"/><text x="48.6300%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="48.4000%" y="677" width="0.1000%" height="15" fill="rgb(222,72,44)"/><text x="48.6500%" y="687.50"></text></g><g><title>decor_mem::views::Views::insert (9 samples, 0.18%)</title><rect x="48.5400%" y="693" width="0.1800%" height="15" fill="rgb(232,159,9)"/><text x="48.7900%" y="703.50"></text></g><g><title>decor_mem::views::View::insert_into_index (7 samples, 0.14%)</title><rect x="48.5800%" y="677" width="0.1400%" height="15" fill="rgb(210,39,32)"/><text x="48.8300%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (28 samples, 0.56%)</title><rect x="48.1800%" y="725" width="0.5600%" height="15" fill="rgb(216,194,45)"/><text x="48.4300%" y="735.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (28 samples, 0.56%)</title><rect x="48.1800%" y="709" width="0.5600%" height="15" fill="rgb(218,18,35)"/><text x="48.4300%" y="719.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (34 samples, 0.68%)</title><rect x="48.1800%" y="741" width="0.6800%" height="15" fill="rgb(207,83,51)"/><text x="48.4300%" y="751.50"></text></g><g><title>sk_wait_data (15 samples, 0.30%)</title><rect x="48.9600%" y="421" width="0.3000%" height="15" fill="rgb(225,63,43)"/><text x="49.2100%" y="431.50"></text></g><g><title>wait_woken (13 samples, 0.26%)</title><rect x="49.0000%" y="405" width="0.2600%" height="15" fill="rgb(207,57,36)"/><text x="49.2500%" y="415.50"></text></g><g><title>schedule_timeout (10 samples, 0.20%)</title><rect x="49.0600%" y="389" width="0.2000%" height="15" fill="rgb(216,99,33)"/><text x="49.3100%" y="399.50"></text></g><g><title>schedule (10 samples, 0.20%)</title><rect x="49.0600%" y="373" width="0.2000%" height="15" fill="rgb(225,42,16)"/><text x="49.3100%" y="383.50"></text></g><g><title>__schedule (10 samples, 0.20%)</title><rect x="49.0600%" y="357" width="0.2000%" height="15" fill="rgb(220,201,45)"/><text x="49.3100%" y="367.50"></text></g><g><title>do_syscall_64 (21 samples, 0.42%)</title><rect x="48.8800%" y="501" width="0.4200%" height="15" fill="rgb(225,33,4)"/><text x="49.1300%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (21 samples, 0.42%)</title><rect x="48.8800%" y="485" width="0.4200%" height="15" fill="rgb(224,33,50)"/><text x="49.1300%" y="495.50"></text></g><g><title>__sys_recvfrom (21 samples, 0.42%)</title><rect x="48.8800%" y="469" width="0.4200%" height="15" fill="rgb(246,198,51)"/><text x="49.1300%" y="479.50"></text></g><g><title>inet_recvmsg (21 samples, 0.42%)</title><rect x="48.8800%" y="453" width="0.4200%" height="15" fill="rgb(205,22,4)"/><text x="49.1300%" y="463.50"></text></g><g><title>tcp_recvmsg (21 samples, 0.42%)</title><rect x="48.8800%" y="437" width="0.4200%" height="15" fill="rgb(206,3,8)"/><text x="49.1300%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (26 samples, 0.52%)</title><rect x="48.8600%" y="613" width="0.5200%" height="15" fill="rgb(251,23,15)"/><text x="49.1100%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (26 samples, 0.52%)</title><rect x="48.8600%" y="597" width="0.5200%" height="15" fill="rgb(252,88,28)"/><text x="49.1100%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (26 samples, 0.52%)</title><rect x="48.8600%" y="581" width="0.5200%" height="15" fill="rgb(212,127,14)"/><text x="49.1100%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (26 samples, 0.52%)</title><rect x="48.8600%" y="565" width="0.5200%" height="15" fill="rgb(247,145,37)"/><text x="49.1100%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (26 samples, 0.52%)</title><rect x="48.8600%" y="549" width="0.5200%" height="15" fill="rgb(209,117,53)"/><text x="49.1100%" y="559.50"></text></g><g><title>__libc_recv (26 samples, 0.52%)</title><rect x="48.8600%" y="533" width="0.5200%" height="15" fill="rgb(212,90,42)"/><text x="49.1100%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (26 samples, 0.52%)</title><rect x="48.8600%" y="517" width="0.5200%" height="15" fill="rgb(218,164,37)"/><text x="49.1100%" y="527.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (28 samples, 0.56%)</title><rect x="48.8600%" y="709" width="0.5600%" height="15" fill="rgb(246,65,34)"/><text x="49.1100%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (28 samples, 0.56%)</title><rect x="48.8600%" y="693" width="0.5600%" height="15" fill="rgb(231,100,33)"/><text x="49.1100%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (28 samples, 0.56%)</title><rect x="48.8600%" y="677" width="0.5600%" height="15" fill="rgb(228,126,14)"/><text x="49.1100%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (28 samples, 0.56%)</title><rect x="48.8600%" y="661" width="0.5600%" height="15" fill="rgb(215,173,21)"/><text x="49.1100%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (28 samples, 0.56%)</title><rect x="48.8600%" y="645" width="0.5600%" height="15" fill="rgb(210,6,40)"/><text x="49.1100%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.56%)</title><rect x="48.8600%" y="629" width="0.5600%" height="15" fill="rgb(212,48,18)"/><text x="49.1100%" y="639.50"></text></g><g><title>update_curr (6 samples, 0.12%)</title><rect x="49.7400%" y="309" width="0.1200%" height="15" fill="rgb(230,214,11)"/><text x="49.9900%" y="319.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.14%)</title><rect x="49.7400%" y="341" width="0.1400%" height="15" fill="rgb(254,105,39)"/><text x="49.9900%" y="351.50"></text></g><g><title>dequeue_entity (7 samples, 0.14%)</title><rect x="49.7400%" y="325" width="0.1400%" height="15" fill="rgb(245,158,5)"/><text x="49.9900%" y="335.50"></text></g><g><title>sk_wait_data (13 samples, 0.26%)</title><rect x="49.6800%" y="421" width="0.2600%" height="15" fill="rgb(249,208,11)"/><text x="49.9300%" y="431.50"></text></g><g><title>wait_woken (12 samples, 0.24%)</title><rect x="49.7000%" y="405" width="0.2400%" height="15" fill="rgb(210,39,28)"/><text x="49.9500%" y="415.50"></text></g><g><title>schedule_timeout (11 samples, 0.22%)</title><rect x="49.7200%" y="389" width="0.2200%" height="15" fill="rgb(211,56,53)"/><text x="49.9700%" y="399.50"></text></g><g><title>schedule (11 samples, 0.22%)</title><rect x="49.7200%" y="373" width="0.2200%" height="15" fill="rgb(226,201,30)"/><text x="49.9700%" y="383.50"></text></g><g><title>__schedule (11 samples, 0.22%)</title><rect x="49.7200%" y="357" width="0.2200%" height="15" fill="rgb(239,101,34)"/><text x="49.9700%" y="367.50"></text></g><g><title>inet_recvmsg (21 samples, 0.42%)</title><rect x="49.6000%" y="453" width="0.4200%" height="15" fill="rgb(226,209,5)"/><text x="49.8500%" y="463.50"></text></g><g><title>tcp_recvmsg (21 samples, 0.42%)</title><rect x="49.6000%" y="437" width="0.4200%" height="15" fill="rgb(250,105,47)"/><text x="49.8500%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (23 samples, 0.46%)</title><rect x="49.6000%" y="485" width="0.4600%" height="15" fill="rgb(230,72,3)"/><text x="49.8500%" y="495.50"></text></g><g><title>__sys_recvfrom (23 samples, 0.46%)</title><rect x="49.6000%" y="469" width="0.4600%" height="15" fill="rgb(232,218,39)"/><text x="49.8500%" y="479.50"></text></g><g><title>do_syscall_64 (24 samples, 0.48%)</title><rect x="49.6000%" y="501" width="0.4800%" height="15" fill="rgb(248,166,6)"/><text x="49.8500%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (29 samples, 0.58%)</title><rect x="49.5200%" y="613" width="0.5800%" height="15" fill="rgb(247,89,20)"/><text x="49.7700%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (27 samples, 0.54%)</title><rect x="49.5600%" y="597" width="0.5400%" height="15" fill="rgb(248,130,54)"/><text x="49.8100%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (27 samples, 0.54%)</title><rect x="49.5600%" y="581" width="0.5400%" height="15" fill="rgb(234,196,4)"/><text x="49.8100%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (27 samples, 0.54%)</title><rect x="49.5600%" y="565" width="0.5400%" height="15" fill="rgb(250,143,31)"/><text x="49.8100%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (27 samples, 0.54%)</title><rect x="49.5600%" y="549" width="0.5400%" height="15" fill="rgb(211,110,34)"/><text x="49.8100%" y="559.50"></text></g><g><title>__libc_recv (27 samples, 0.54%)</title><rect x="49.5600%" y="533" width="0.5400%" height="15" fill="rgb(215,124,48)"/><text x="49.8100%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (26 samples, 0.52%)</title><rect x="49.5800%" y="517" width="0.5200%" height="15" fill="rgb(216,46,13)"/><text x="49.8300%" y="527.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.62%)</title><rect x="49.5200%" y="629" width="0.6200%" height="15" fill="rgb(205,184,25)"/><text x="49.7700%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (33 samples, 0.66%)</title><rect x="49.5000%" y="645" width="0.6600%" height="15" fill="rgb(228,1,10)"/><text x="49.7500%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (35 samples, 0.70%)</title><rect x="49.4800%" y="661" width="0.7000%" height="15" fill="rgb(213,116,27)"/><text x="49.7300%" y="671.50"></text></g><g><title>enqueue_task (5 samples, 0.10%)</title><rect x="50.7200%" y="69" width="0.1000%" height="15" fill="rgb(241,95,50)"/><text x="50.9700%" y="79.50"></text></g><g><title>sock_def_readable (17 samples, 0.34%)</title><rect x="50.6600%" y="149" width="0.3400%" height="15" fill="rgb(238,48,32)"/><text x="50.9100%" y="159.50"></text></g><g><title>__wake_up_common_lock (17 samples, 0.34%)</title><rect x="50.6600%" y="133" width="0.3400%" height="15" fill="rgb(235,113,49)"/><text x="50.9100%" y="143.50"></text></g><g><title>__wake_up_common (17 samples, 0.34%)</title><rect x="50.6600%" y="117" width="0.3400%" height="15" fill="rgb(205,127,43)"/><text x="50.9100%" y="127.50"></text></g><g><title>pollwake (17 samples, 0.34%)</title><rect x="50.6600%" y="101" width="0.3400%" height="15" fill="rgb(250,162,2)"/><text x="50.9100%" y="111.50"></text></g><g><title>try_to_wake_up (16 samples, 0.32%)</title><rect x="50.6800%" y="85" width="0.3200%" height="15" fill="rgb(220,13,41)"/><text x="50.9300%" y="95.50"></text></g><g><title>tcp_ack (6 samples, 0.12%)</title><rect x="51.0000%" y="149" width="0.1200%" height="15" fill="rgb(249,221,25)"/><text x="51.2500%" y="159.50"></text></g><g><title>__ip_queue_xmit (40 samples, 0.80%)</title><rect x="50.3400%" y="421" width="0.8000%" height="15" fill="rgb(215,208,19)"/><text x="50.5900%" y="431.50"></text></g><g><title>ip_output (37 samples, 0.74%)</title><rect x="50.4000%" y="405" width="0.7400%" height="15" fill="rgb(236,175,2)"/><text x="50.6500%" y="415.50"></text></g><g><title>ip_finish_output2 (37 samples, 0.74%)</title><rect x="50.4000%" y="389" width="0.7400%" height="15" fill="rgb(241,52,2)"/><text x="50.6500%" y="399.50"></text></g><g><title>__local_bh_enable_ip (36 samples, 0.72%)</title><rect x="50.4200%" y="373" width="0.7200%" height="15" fill="rgb(248,140,14)"/><text x="50.6700%" y="383.50"></text></g><g><title>do_softirq (36 samples, 0.72%)</title><rect x="50.4200%" y="357" width="0.7200%" height="15" fill="rgb(253,22,42)"/><text x="50.6700%" y="367.50"></text></g><g><title>do_softirq_own_stack (36 samples, 0.72%)</title><rect x="50.4200%" y="341" width="0.7200%" height="15" fill="rgb(234,61,47)"/><text x="50.6700%" y="351.50"></text></g><g><title>__do_softirq (36 samples, 0.72%)</title><rect x="50.4200%" y="325" width="0.7200%" height="15" fill="rgb(208,226,15)"/><text x="50.6700%" y="335.50"></text></g><g><title>net_rx_action (34 samples, 0.68%)</title><rect x="50.4600%" y="309" width="0.6800%" height="15" fill="rgb(217,221,4)"/><text x="50.7100%" y="319.50"></text></g><g><title>process_backlog (34 samples, 0.68%)</title><rect x="50.4600%" y="293" width="0.6800%" height="15" fill="rgb(212,174,34)"/><text x="50.7100%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (34 samples, 0.68%)</title><rect x="50.4600%" y="277" width="0.6800%" height="15" fill="rgb(253,83,4)"/><text x="50.7100%" y="287.50"></text></g><g><title>ip_rcv (33 samples, 0.66%)</title><rect x="50.4800%" y="261" width="0.6600%" height="15" fill="rgb(250,195,49)"/><text x="50.7300%" y="271.50"></text></g><g><title>ip_local_deliver (32 samples, 0.64%)</title><rect x="50.5000%" y="245" width="0.6400%" height="15" fill="rgb(241,192,25)"/><text x="50.7500%" y="255.50"></text></g><g><title>ip_local_deliver_finish (30 samples, 0.60%)</title><rect x="50.5400%" y="229" width="0.6000%" height="15" fill="rgb(208,124,10)"/><text x="50.7900%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (30 samples, 0.60%)</title><rect x="50.5400%" y="213" width="0.6000%" height="15" fill="rgb(222,33,0)"/><text x="50.7900%" y="223.50"></text></g><g><title>tcp_v4_rcv (30 samples, 0.60%)</title><rect x="50.5400%" y="197" width="0.6000%" height="15" fill="rgb(234,209,28)"/><text x="50.7900%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (25 samples, 0.50%)</title><rect x="50.6400%" y="181" width="0.5000%" height="15" fill="rgb(224,11,23)"/><text x="50.8900%" y="191.50"></text></g><g><title>tcp_rcv_established (25 samples, 0.50%)</title><rect x="50.6400%" y="165" width="0.5000%" height="15" fill="rgb(232,99,1)"/><text x="50.8900%" y="175.50"></text></g><g><title>__tcp_transmit_skb (45 samples, 0.90%)</title><rect x="50.3000%" y="437" width="0.9000%" height="15" fill="rgb(237,95,45)"/><text x="50.5500%" y="447.50"></text></g><g><title>__tcp_push_pending_frames (46 samples, 0.92%)</title><rect x="50.3000%" y="469" width="0.9200%" height="15" fill="rgb(208,109,11)"/><text x="50.5500%" y="479.50"></text></g><g><title>tcp_write_xmit (46 samples, 0.92%)</title><rect x="50.3000%" y="453" width="0.9200%" height="15" fill="rgb(216,190,48)"/><text x="50.5500%" y="463.50"></text></g><g><title>sock_sendmsg (55 samples, 1.10%)</title><rect x="50.2000%" y="517" width="1.1000%" height="15" fill="rgb(251,171,36)"/><text x="50.4500%" y="527.50"></text></g><g><title>tcp_sendmsg (55 samples, 1.10%)</title><rect x="50.2000%" y="501" width="1.1000%" height="15" fill="rgb(230,62,22)"/><text x="50.4500%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (51 samples, 1.02%)</title><rect x="50.2800%" y="485" width="1.0200%" height="15" fill="rgb(225,114,35)"/><text x="50.5300%" y="495.50"></text></g><g><title>do_syscall_64 (57 samples, 1.14%)</title><rect x="50.2000%" y="565" width="1.1400%" height="15" fill="rgb(215,118,42)"/><text x="50.4500%" y="575.50"></text></g><g><title>__x64_sys_sendto (57 samples, 1.14%)</title><rect x="50.2000%" y="549" width="1.1400%" height="15" fill="rgb(243,119,21)"/><text x="50.4500%" y="559.50"></text></g><g><title>__sys_sendto (57 samples, 1.14%)</title><rect x="50.2000%" y="533" width="1.1400%" height="15" fill="rgb(252,177,53)"/><text x="50.4500%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (58 samples, 1.16%)</title><rect x="50.2000%" y="581" width="1.1600%" height="15" fill="rgb(237,209,29)"/><text x="50.4500%" y="591.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (98 samples, 1.96%)</title><rect x="49.4200%" y="693" width="1.9600%" height="15" fill="rgb(212,65,23)"/><text x="49.6700%" y="703.50">d..</text></g><g><title>mysql::conn::Conn::_query (95 samples, 1.90%)</title><rect x="49.4800%" y="677" width="1.9000%" height="15" fill="rgb(230,222,46)"/><text x="49.7300%" y="687.50">m..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (60 samples, 1.20%)</title><rect x="50.1800%" y="661" width="1.2000%" height="15" fill="rgb(215,135,32)"/><text x="50.4300%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (60 samples, 1.20%)</title><rect x="50.1800%" y="645" width="1.2000%" height="15" fill="rgb(246,101,22)"/><text x="50.4300%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (59 samples, 1.18%)</title><rect x="50.2000%" y="629" width="1.1800%" height="15" fill="rgb(206,107,13)"/><text x="50.4500%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (59 samples, 1.18%)</title><rect x="50.2000%" y="613" width="1.1800%" height="15" fill="rgb(250,100,44)"/><text x="50.4500%" y="623.50"></text></g><g><title>__libc_send (59 samples, 1.18%)</title><rect x="50.2000%" y="597" width="1.1800%" height="15" fill="rgb(231,147,38)"/><text x="50.4500%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.32%)</title><rect x="51.3800%" y="613" width="0.3200%" height="15" fill="rgb(229,8,40)"/><text x="51.6300%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.26%)</title><rect x="51.4400%" y="597" width="0.2600%" height="15" fill="rgb(221,135,30)"/><text x="51.6900%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.26%)</title><rect x="51.4400%" y="581" width="0.2600%" height="15" fill="rgb(249,193,18)"/><text x="51.6900%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.24%)</title><rect x="51.4600%" y="565" width="0.2400%" height="15" fill="rgb(209,133,39)"/><text x="51.7100%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.24%)</title><rect x="51.4600%" y="549" width="0.2400%" height="15" fill="rgb(232,100,14)"/><text x="51.7100%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="51.5000%" y="533" width="0.2000%" height="15" fill="rgb(224,185,1)"/><text x="51.7500%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="51.5000%" y="517" width="0.2000%" height="15" fill="rgb(223,139,8)"/><text x="51.7500%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.20%)</title><rect x="51.5000%" y="501" width="0.2000%" height="15" fill="rgb(232,213,38)"/><text x="51.7500%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.20%)</title><rect x="51.5000%" y="485" width="0.2000%" height="15" fill="rgb(207,94,22)"/><text x="51.7500%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.20%)</title><rect x="51.5000%" y="469" width="0.2000%" height="15" fill="rgb(219,183,54)"/><text x="51.7500%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.20%)</title><rect x="51.5000%" y="453" width="0.2000%" height="15" fill="rgb(216,185,54)"/><text x="51.7500%" y="463.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.20%)</title><rect x="51.5000%" y="437" width="0.2000%" height="15" fill="rgb(254,217,39)"/><text x="51.7500%" y="447.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="51.5000%" y="421" width="0.2000%" height="15" fill="rgb(240,178,23)"/><text x="51.7500%" y="431.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="51.5000%" y="405" width="0.2000%" height="15" fill="rgb(218,11,47)"/><text x="51.7500%" y="415.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (8 samples, 0.16%)</title><rect x="51.7800%" y="533" width="0.1600%" height="15" fill="rgb(218,51,51)"/><text x="52.0300%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.12%)</title><rect x="51.8200%" y="517" width="0.1200%" height="15" fill="rgb(238,126,27)"/><text x="52.0700%" y="527.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (5 samples, 0.10%)</title><rect x="51.8400%" y="501" width="0.1000%" height="15" fill="rgb(249,202,22)"/><text x="52.0900%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (5 samples, 0.10%)</title><rect x="51.8400%" y="485" width="0.1000%" height="15" fill="rgb(254,195,49)"/><text x="52.0900%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.20%)</title><rect x="51.7600%" y="565" width="0.2000%" height="15" fill="rgb(208,123,14)"/><text x="52.0100%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (10 samples, 0.20%)</title><rect x="51.7600%" y="549" width="0.2000%" height="15" fill="rgb(224,200,8)"/><text x="52.0100%" y="559.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (30 samples, 0.60%)</title><rect x="51.3800%" y="645" width="0.6000%" height="15" fill="rgb(217,61,36)"/><text x="51.6300%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (30 samples, 0.60%)</title><rect x="51.3800%" y="629" width="0.6000%" height="15" fill="rgb(206,35,45)"/><text x="51.6300%" y="639.50"></text></g><g><title>decor_mem::helpers::expr_to_col (14 samples, 0.28%)</title><rect x="51.7000%" y="613" width="0.2800%" height="15" fill="rgb(217,65,33)"/><text x="51.9500%" y="623.50"></text></g><g><title>core::fmt::write (13 samples, 0.26%)</title><rect x="51.7200%" y="597" width="0.2600%" height="15" fill="rgb(222,158,48)"/><text x="51.9700%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (11 samples, 0.22%)</title><rect x="51.7600%" y="581" width="0.2200%" height="15" fill="rgb(254,2,54)"/><text x="52.0100%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.14%)</title><rect x="51.9800%" y="629" width="0.1400%" height="15" fill="rgb(250,143,38)"/><text x="52.2300%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="51.9800%" y="613" width="0.1400%" height="15" fill="rgb(248,25,0)"/><text x="52.2300%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="51.9800%" y="597" width="0.1400%" height="15" fill="rgb(206,152,27)"/><text x="52.2300%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="51.9800%" y="581" width="0.1400%" height="15" fill="rgb(240,77,30)"/><text x="52.2300%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.14%)</title><rect x="51.9800%" y="565" width="0.1400%" height="15" fill="rgb(231,5,3)"/><text x="52.2300%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="51.9800%" y="549" width="0.1400%" height="15" fill="rgb(207,226,32)"/><text x="52.2300%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (7 samples, 0.14%)</title><rect x="51.9800%" y="533" width="0.1400%" height="15" fill="rgb(222,207,47)"/><text x="52.2300%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.14%)</title><rect x="51.9800%" y="517" width="0.1400%" height="15" fill="rgb(229,115,45)"/><text x="52.2300%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.14%)</title><rect x="51.9800%" y="501" width="0.1400%" height="15" fill="rgb(224,191,6)"/><text x="52.2300%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (7 samples, 0.14%)</title><rect x="51.9800%" y="485" width="0.1400%" height="15" fill="rgb(230,227,24)"/><text x="52.2300%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.14%)</title><rect x="51.9800%" y="469" width="0.1400%" height="15" fill="rgb(228,80,19)"/><text x="52.2300%" y="479.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="51.9800%" y="453" width="0.1400%" height="15" fill="rgb(247,229,0)"/><text x="52.2300%" y="463.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="51.9800%" y="437" width="0.1400%" height="15" fill="rgb(237,194,15)"/><text x="52.2300%" y="447.50"></text></g><g><title>_int_malloc (7 samples, 0.14%)</title><rect x="51.9800%" y="421" width="0.1400%" height="15" fill="rgb(219,203,20)"/><text x="52.2300%" y="431.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (18 samples, 0.36%)</title><rect x="52.2000%" y="549" width="0.3600%" height="15" fill="rgb(234,128,8)"/><text x="52.4500%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (12 samples, 0.24%)</title><rect x="52.3200%" y="533" width="0.2400%" height="15" fill="rgb(248,202,8)"/><text x="52.5700%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (11 samples, 0.22%)</title><rect x="52.3400%" y="517" width="0.2200%" height="15" fill="rgb(206,104,37)"/><text x="52.5900%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (11 samples, 0.22%)</title><rect x="52.3400%" y="501" width="0.2200%" height="15" fill="rgb(223,8,27)"/><text x="52.5900%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (20 samples, 0.40%)</title><rect x="52.1800%" y="581" width="0.4000%" height="15" fill="rgb(216,217,28)"/><text x="52.4300%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (20 samples, 0.40%)</title><rect x="52.1800%" y="565" width="0.4000%" height="15" fill="rgb(249,199,1)"/><text x="52.4300%" y="575.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (61 samples, 1.22%)</title><rect x="51.3800%" y="661" width="1.2200%" height="15" fill="rgb(240,85,17)"/><text x="51.6300%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (31 samples, 0.62%)</title><rect x="51.9800%" y="645" width="0.6200%" height="15" fill="rgb(206,108,45)"/><text x="52.2300%" y="655.50"></text></g><g><title>decor_mem::helpers::expr_to_col (24 samples, 0.48%)</title><rect x="52.1200%" y="629" width="0.4800%" height="15" fill="rgb(245,210,41)"/><text x="52.3700%" y="639.50"></text></g><g><title>core::fmt::write (24 samples, 0.48%)</title><rect x="52.1200%" y="613" width="0.4800%" height="15" fill="rgb(206,13,37)"/><text x="52.3700%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (21 samples, 0.42%)</title><rect x="52.1800%" y="597" width="0.4200%" height="15" fill="rgb(250,61,18)"/><text x="52.4300%" y="607.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (66 samples, 1.32%)</title><rect x="51.3800%" y="677" width="1.3200%" height="15" fill="rgb(235,172,48)"/><text x="51.6300%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (5 samples, 0.10%)</title><rect x="52.6000%" y="661" width="0.1000%" height="15" fill="rgb(249,201,17)"/><text x="52.8500%" y="671.50"></text></g><g><title>decor_mem::helpers::expr_to_col (5 samples, 0.10%)</title><rect x="52.6000%" y="645" width="0.1000%" height="15" fill="rgb(219,208,6)"/><text x="52.8500%" y="655.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="52.6000%" y="629" width="0.1000%" height="15" fill="rgb(248,31,23)"/><text x="52.8500%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="52.6000%" y="613" width="0.1000%" height="15" fill="rgb(245,15,42)"/><text x="52.8500%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 1.44%)</title><rect x="52.7400%" y="613" width="1.4400%" height="15" fill="rgb(222,217,39)"/><text x="52.9900%" y="623.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="54.2000%" y="613" width="0.1200%" height="15" fill="rgb(210,219,27)"/><text x="54.4500%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (89 samples, 1.78%)</title><rect x="52.7000%" y="629" width="1.7800%" height="15" fill="rgb(252,166,36)"/><text x="52.9500%" y="639.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.16%)</title><rect x="54.3200%" y="613" width="0.1600%" height="15" fill="rgb(245,132,34)"/><text x="54.5700%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (8 samples, 0.16%)</title><rect x="54.3200%" y="597" width="0.1600%" height="15" fill="rgb(236,54,3)"/><text x="54.5700%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="54.3600%" y="581" width="0.1200%" height="15" fill="rgb(241,173,43)"/><text x="54.6100%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.18%)</title><rect x="54.6400%" y="613" width="0.1800%" height="15" fill="rgb(215,190,9)"/><text x="54.8900%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (107 samples, 2.14%)</title><rect x="52.7000%" y="645" width="2.1400%" height="15" fill="rgb(242,101,16)"/><text x="52.9500%" y="655.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (18 samples, 0.36%)</title><rect x="54.4800%" y="629" width="0.3600%" height="15" fill="rgb(223,190,21)"/><text x="54.7300%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (11 samples, 0.22%)</title><rect x="55.2200%" y="581" width="0.2200%" height="15" fill="rgb(215,228,25)"/><text x="55.4700%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="55.3200%" y="565" width="0.1200%" height="15" fill="rgb(225,36,22)"/><text x="55.5700%" y="575.50"></text></g><g><title>core::fmt::write (31 samples, 0.62%)</title><rect x="54.8400%" y="645" width="0.6200%" height="15" fill="rgb(251,106,46)"/><text x="55.0900%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (31 samples, 0.62%)</title><rect x="54.8400%" y="629" width="0.6200%" height="15" fill="rgb(208,90,1)"/><text x="55.0900%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (27 samples, 0.54%)</title><rect x="54.9200%" y="613" width="0.5400%" height="15" fill="rgb(243,10,4)"/><text x="55.1700%" y="623.50"></text></g><g><title>core::fmt::write (14 samples, 0.28%)</title><rect x="55.1800%" y="597" width="0.2800%" height="15" fill="rgb(212,137,27)"/><text x="55.4300%" y="607.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (20 samples, 0.40%)</title><rect x="55.5000%" y="645" width="0.4000%" height="15" fill="rgb(231,220,49)"/><text x="55.7500%" y="655.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (20 samples, 0.40%)</title><rect x="55.5000%" y="629" width="0.4000%" height="15" fill="rgb(237,96,20)"/><text x="55.7500%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="56.3200%" y="629" width="0.1000%" height="15" fill="rgb(239,229,30)"/><text x="56.5700%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="56.3200%" y="613" width="0.1000%" height="15" fill="rgb(219,65,33)"/><text x="56.5700%" y="623.50"></text></g><g><title>sysmalloc (6 samples, 0.12%)</title><rect x="57.0000%" y="581" width="0.1200%" height="15" fill="rgb(243,134,7)"/><text x="57.2500%" y="591.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.34%)</title><rect x="56.8000%" y="613" width="0.3400%" height="15" fill="rgb(216,177,54)"/><text x="57.0500%" y="623.50"></text></g><g><title>_int_malloc (14 samples, 0.28%)</title><rect x="56.8600%" y="597" width="0.2800%" height="15" fill="rgb(211,160,20)"/><text x="57.1100%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (24 samples, 0.48%)</title><rect x="57.1400%" y="613" width="0.4800%" height="15" fill="rgb(239,85,39)"/><text x="57.3900%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (69 samples, 1.38%)</title><rect x="56.4200%" y="629" width="1.3800%" height="15" fill="rgb(232,125,22)"/><text x="56.6700%" y="639.50"></text></g><g><title>page_fault (8 samples, 0.16%)</title><rect x="57.6400%" y="613" width="0.1600%" height="15" fill="rgb(244,57,34)"/><text x="57.8900%" y="623.50"></text></g><g><title>do_user_addr_fault (8 samples, 0.16%)</title><rect x="57.6400%" y="597" width="0.1600%" height="15" fill="rgb(214,203,32)"/><text x="57.8900%" y="607.50"></text></g><g><title>handle_mm_fault (8 samples, 0.16%)</title><rect x="57.6400%" y="581" width="0.1600%" height="15" fill="rgb(207,58,43)"/><text x="57.8900%" y="591.50"></text></g><g><title>__handle_mm_fault (7 samples, 0.14%)</title><rect x="57.6600%" y="565" width="0.1400%" height="15" fill="rgb(215,193,15)"/><text x="57.9100%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.12%)</title><rect x="58.0200%" y="629" width="0.1200%" height="15" fill="rgb(232,15,44)"/><text x="58.2700%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.30%)</title><rect x="58.1400%" y="629" width="0.3000%" height="15" fill="rgb(212,3,48)"/><text x="58.3900%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.22%)</title><rect x="58.2200%" y="613" width="0.2200%" height="15" fill="rgb(218,128,7)"/><text x="58.4700%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (6 samples, 0.12%)</title><rect x="58.4400%" y="629" width="0.1200%" height="15" fill="rgb(226,216,39)"/><text x="58.6900%" y="639.50"></text></g><g><title>decor_mem::views::View::get_indexed_rptrs_of_col (134 samples, 2.68%)</title><rect x="55.9000%" y="645" width="2.6800%" height="15" fill="rgb(243,47,51)"/><text x="56.1500%" y="655.50">de..</text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (361 samples, 7.22%)</title><rect x="51.3800%" y="693" width="7.2200%" height="15" fill="rgb(241,183,40)"/><text x="51.6300%" y="703.50">decor_mem:..</text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (295 samples, 5.90%)</title><rect x="52.7000%" y="677" width="5.9000%" height="15" fill="rgb(231,217,32)"/><text x="52.9500%" y="687.50">decor_m..</text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (295 samples, 5.90%)</title><rect x="52.7000%" y="661" width="5.9000%" height="15" fill="rgb(229,61,38)"/><text x="52.9500%" y="671.50">decor_m..</text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (6 samples, 0.12%)</title><rect x="58.6000%" y="661" width="0.1200%" height="15" fill="rgb(225,210,5)"/><text x="58.8500%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (6 samples, 0.12%)</title><rect x="58.6000%" y="645" width="0.1200%" height="15" fill="rgb(231,79,45)"/><text x="58.8500%" y="655.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (8 samples, 0.16%)</title><rect x="58.7200%" y="645" width="0.1600%" height="15" fill="rgb(224,100,7)"/><text x="58.9700%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.16%)</title><rect x="58.7200%" y="629" width="0.1600%" height="15" fill="rgb(241,198,18)"/><text x="58.9700%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.16%)</title><rect x="58.7200%" y="613" width="0.1600%" height="15" fill="rgb(252,97,53)"/><text x="58.9700%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (13 samples, 0.26%)</title><rect x="58.9600%" y="629" width="0.2600%" height="15" fill="rgb(220,88,7)"/><text x="59.2100%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (8 samples, 0.16%)</title><rect x="59.0600%" y="613" width="0.1600%" height="15" fill="rgb(213,176,14)"/><text x="59.3100%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="59.1200%" y="597" width="0.1000%" height="15" fill="rgb(246,73,7)"/><text x="59.3700%" y="607.50"></text></g><g><title>core::fmt::write (16 samples, 0.32%)</title><rect x="59.2600%" y="629" width="0.3200%" height="15" fill="rgb(245,64,36)"/><text x="59.5100%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (15 samples, 0.30%)</title><rect x="59.2800%" y="613" width="0.3000%" height="15" fill="rgb(245,80,10)"/><text x="59.5300%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (8 samples, 0.16%)</title><rect x="59.4200%" y="597" width="0.1600%" height="15" fill="rgb(232,107,50)"/><text x="59.6700%" y="607.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="59.4800%" y="581" width="0.1000%" height="15" fill="rgb(253,3,0)"/><text x="59.7300%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.14%)</title><rect x="59.8000%" y="613" width="0.1400%" height="15" fill="rgb(212,99,53)"/><text x="60.0500%" y="623.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (70 samples, 1.40%)</title><rect x="58.6000%" y="677" width="1.4000%" height="15" fill="rgb(249,111,54)"/><text x="58.8500%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (64 samples, 1.28%)</title><rect x="58.7200%" y="661" width="1.2800%" height="15" fill="rgb(249,55,30)"/><text x="58.9700%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (53 samples, 1.06%)</title><rect x="58.9400%" y="645" width="1.0600%" height="15" fill="rgb(237,47,42)"/><text x="59.1900%" y="655.50"></text></g><g><title>decor_mem::views::View::get_indexed_rptrs_of_col (21 samples, 0.42%)</title><rect x="59.5800%" y="629" width="0.4200%" height="15" fill="rgb(211,20,18)"/><text x="59.8300%" y="639.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (559 samples, 11.18%)</title><rect x="48.8600%" y="741" width="11.1800%" height="15" fill="rgb(231,203,46)"/><text x="49.1100%" y="751.50">&lt;decor_mem::Shim..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (559 samples, 11.18%)</title><rect x="48.8600%" y="725" width="11.1800%" height="15" fill="rgb(237,142,3)"/><text x="49.1100%" y="735.50">decor_mem::query..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (531 samples, 10.62%)</title><rect x="49.4200%" y="709" width="10.6200%" height="15" fill="rgb(241,107,1)"/><text x="49.6700%" y="719.50">decor_mem::quer..</text></g><g><title>decor_mem::views::Views::delete (72 samples, 1.44%)</title><rect x="58.6000%" y="693" width="1.4400%" height="15" fill="rgb(229,83,13)"/><text x="58.8500%" y="703.50"></text></g><g><title>sk_wait_data (13 samples, 0.26%)</title><rect x="60.2800%" y="421" width="0.2600%" height="15" fill="rgb(241,91,40)"/><text x="60.5300%" y="431.50"></text></g><g><title>wait_woken (10 samples, 0.20%)</title><rect x="60.3400%" y="405" width="0.2000%" height="15" fill="rgb(225,3,45)"/><text x="60.5900%" y="415.50"></text></g><g><title>schedule_timeout (10 samples, 0.20%)</title><rect x="60.3400%" y="389" width="0.2000%" height="15" fill="rgb(244,223,14)"/><text x="60.5900%" y="399.50"></text></g><g><title>schedule (10 samples, 0.20%)</title><rect x="60.3400%" y="373" width="0.2000%" height="15" fill="rgb(224,124,37)"/><text x="60.5900%" y="383.50"></text></g><g><title>__schedule (9 samples, 0.18%)</title><rect x="60.3600%" y="357" width="0.1800%" height="15" fill="rgb(251,171,30)"/><text x="60.6100%" y="367.50"></text></g><g><title>__x64_sys_recvfrom (23 samples, 0.46%)</title><rect x="60.1600%" y="485" width="0.4600%" height="15" fill="rgb(236,46,54)"/><text x="60.4100%" y="495.50"></text></g><g><title>__sys_recvfrom (23 samples, 0.46%)</title><rect x="60.1600%" y="469" width="0.4600%" height="15" fill="rgb(245,213,5)"/><text x="60.4100%" y="479.50"></text></g><g><title>inet_recvmsg (23 samples, 0.46%)</title><rect x="60.1600%" y="453" width="0.4600%" height="15" fill="rgb(230,144,27)"/><text x="60.4100%" y="463.50"></text></g><g><title>tcp_recvmsg (23 samples, 0.46%)</title><rect x="60.1600%" y="437" width="0.4600%" height="15" fill="rgb(220,86,6)"/><text x="60.4100%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (25 samples, 0.50%)</title><rect x="60.1400%" y="613" width="0.5000%" height="15" fill="rgb(240,20,13)"/><text x="60.3900%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (25 samples, 0.50%)</title><rect x="60.1400%" y="597" width="0.5000%" height="15" fill="rgb(217,89,34)"/><text x="60.3900%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (25 samples, 0.50%)</title><rect x="60.1400%" y="581" width="0.5000%" height="15" fill="rgb(229,13,5)"/><text x="60.3900%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (25 samples, 0.50%)</title><rect x="60.1400%" y="565" width="0.5000%" height="15" fill="rgb(244,67,35)"/><text x="60.3900%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (25 samples, 0.50%)</title><rect x="60.1400%" y="549" width="0.5000%" height="15" fill="rgb(221,40,2)"/><text x="60.3900%" y="559.50"></text></g><g><title>__libc_recv (25 samples, 0.50%)</title><rect x="60.1400%" y="533" width="0.5000%" height="15" fill="rgb(237,157,21)"/><text x="60.3900%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (24 samples, 0.48%)</title><rect x="60.1600%" y="517" width="0.4800%" height="15" fill="rgb(222,94,11)"/><text x="60.4100%" y="527.50"></text></g><g><title>do_syscall_64 (24 samples, 0.48%)</title><rect x="60.1600%" y="501" width="0.4800%" height="15" fill="rgb(249,113,6)"/><text x="60.4100%" y="511.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.58%)</title><rect x="60.1000%" y="629" width="0.5800%" height="15" fill="rgb(238,137,36)"/><text x="60.3500%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (33 samples, 0.66%)</title><rect x="60.0400%" y="645" width="0.6600%" height="15" fill="rgb(210,102,26)"/><text x="60.2900%" y="655.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (34 samples, 0.68%)</title><rect x="60.0400%" y="709" width="0.6800%" height="15" fill="rgb(218,30,30)"/><text x="60.2900%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (34 samples, 0.68%)</title><rect x="60.0400%" y="693" width="0.6800%" height="15" fill="rgb(214,67,26)"/><text x="60.2900%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (34 samples, 0.68%)</title><rect x="60.0400%" y="677" width="0.6800%" height="15" fill="rgb(251,9,53)"/><text x="60.2900%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (34 samples, 0.68%)</title><rect x="60.0400%" y="661" width="0.6800%" height="15" fill="rgb(228,204,25)"/><text x="60.2900%" y="671.50"></text></g><g><title>__kfree_skb (5 samples, 0.10%)</title><rect x="60.9200%" y="421" width="0.1000%" height="15" fill="rgb(207,153,8)"/><text x="61.1700%" y="431.50"></text></g><g><title>dequeue_task_fair (5 samples, 0.10%)</title><rect x="61.1200%" y="341" width="0.1000%" height="15" fill="rgb(242,9,16)"/><text x="61.3700%" y="351.50"></text></g><g><title>sk_wait_data (16 samples, 0.32%)</title><rect x="61.0800%" y="421" width="0.3200%" height="15" fill="rgb(217,211,10)"/><text x="61.3300%" y="431.50"></text></g><g><title>wait_woken (15 samples, 0.30%)</title><rect x="61.1000%" y="405" width="0.3000%" height="15" fill="rgb(219,228,52)"/><text x="61.3500%" y="415.50"></text></g><g><title>schedule_timeout (15 samples, 0.30%)</title><rect x="61.1000%" y="389" width="0.3000%" height="15" fill="rgb(231,92,29)"/><text x="61.3500%" y="399.50"></text></g><g><title>schedule (15 samples, 0.30%)</title><rect x="61.1000%" y="373" width="0.3000%" height="15" fill="rgb(232,8,23)"/><text x="61.3500%" y="383.50"></text></g><g><title>__schedule (15 samples, 0.30%)</title><rect x="61.1000%" y="357" width="0.3000%" height="15" fill="rgb(216,211,34)"/><text x="61.3500%" y="367.50"></text></g><g><title>inet_recvmsg (30 samples, 0.60%)</title><rect x="60.8600%" y="453" width="0.6000%" height="15" fill="rgb(236,151,0)"/><text x="61.1100%" y="463.50"></text></g><g><title>tcp_recvmsg (30 samples, 0.60%)</title><rect x="60.8600%" y="437" width="0.6000%" height="15" fill="rgb(209,168,3)"/><text x="61.1100%" y="447.50"></text></g><g><title>do_syscall_64 (32 samples, 0.64%)</title><rect x="60.8600%" y="501" width="0.6400%" height="15" fill="rgb(208,129,28)"/><text x="61.1100%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (32 samples, 0.64%)</title><rect x="60.8600%" y="485" width="0.6400%" height="15" fill="rgb(229,78,22)"/><text x="61.1100%" y="495.50"></text></g><g><title>__sys_recvfrom (32 samples, 0.64%)</title><rect x="60.8600%" y="469" width="0.6400%" height="15" fill="rgb(228,187,13)"/><text x="61.1100%" y="479.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.76%)</title><rect x="60.8200%" y="629" width="0.7600%" height="15" fill="rgb(240,119,24)"/><text x="61.0700%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (38 samples, 0.76%)</title><rect x="60.8200%" y="613" width="0.7600%" height="15" fill="rgb(209,194,42)"/><text x="61.0700%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (38 samples, 0.76%)</title><rect x="60.8200%" y="597" width="0.7600%" height="15" fill="rgb(247,200,46)"/><text x="61.0700%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (38 samples, 0.76%)</title><rect x="60.8200%" y="581" width="0.7600%" height="15" fill="rgb(218,76,16)"/><text x="61.0700%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (38 samples, 0.76%)</title><rect x="60.8200%" y="565" width="0.7600%" height="15" fill="rgb(225,21,48)"/><text x="61.0700%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (38 samples, 0.76%)</title><rect x="60.8200%" y="549" width="0.7600%" height="15" fill="rgb(239,223,50)"/><text x="61.0700%" y="559.50"></text></g><g><title>__libc_recv (38 samples, 0.76%)</title><rect x="60.8200%" y="533" width="0.7600%" height="15" fill="rgb(244,45,21)"/><text x="61.0700%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (36 samples, 0.72%)</title><rect x="60.8600%" y="517" width="0.7200%" height="15" fill="rgb(232,33,43)"/><text x="61.1100%" y="527.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (44 samples, 0.88%)</title><rect x="60.7200%" y="693" width="0.8800%" height="15" fill="rgb(209,8,3)"/><text x="60.9700%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (44 samples, 0.88%)</title><rect x="60.7200%" y="677" width="0.8800%" height="15" fill="rgb(214,25,53)"/><text x="60.9700%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (44 samples, 0.88%)</title><rect x="60.7200%" y="661" width="0.8800%" height="15" fill="rgb(254,186,54)"/><text x="60.9700%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (43 samples, 0.86%)</title><rect x="60.7400%" y="645" width="0.8600%" height="15" fill="rgb(208,174,49)"/><text x="60.9900%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (5 samples, 0.10%)</title><rect x="61.6000%" y="661" width="0.1000%" height="15" fill="rgb(233,191,51)"/><text x="61.8500%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (5 samples, 0.10%)</title><rect x="61.6000%" y="645" width="0.1000%" height="15" fill="rgb(222,134,10)"/><text x="61.8500%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (7 samples, 0.14%)</title><rect x="61.7000%" y="645" width="0.1400%" height="15" fill="rgb(230,226,20)"/><text x="61.9500%" y="655.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (13 samples, 0.26%)</title><rect x="61.6000%" y="677" width="0.2600%" height="15" fill="rgb(251,111,25)"/><text x="61.8500%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (8 samples, 0.16%)</title><rect x="61.7000%" y="661" width="0.1600%" height="15" fill="rgb(224,40,46)"/><text x="61.9500%" y="671.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (696 samples, 13.92%)</title><rect x="48.0800%" y="773" width="13.9200%" height="15" fill="rgb(236,108,47)"/><text x="48.3300%" y="783.50">msql_srv::MysqlInterm..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (696 samples, 13.92%)</title><rect x="48.0800%" y="757" width="13.9200%" height="15" fill="rgb(234,93,0)"/><text x="48.3300%" y="767.50">msql_srv::MysqlInterm..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (98 samples, 1.96%)</title><rect x="60.0400%" y="741" width="1.9600%" height="15" fill="rgb(224,213,32)"/><text x="60.2900%" y="751.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (98 samples, 1.96%)</title><rect x="60.0400%" y="725" width="1.9600%" height="15" fill="rgb(251,11,48)"/><text x="60.2900%" y="735.50">d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (64 samples, 1.28%)</title><rect x="60.7200%" y="709" width="1.2800%" height="15" fill="rgb(236,173,5)"/><text x="60.9700%" y="719.50"></text></g><g><title>decor_mem::views::Views::delete (20 samples, 0.40%)</title><rect x="61.6000%" y="693" width="0.4000%" height="15" fill="rgb(230,95,12)"/><text x="61.8500%" y="703.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (7 samples, 0.14%)</title><rect x="61.8600%" y="677" width="0.1400%" height="15" fill="rgb(232,209,1)"/><text x="62.1100%" y="687.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="61.8600%" y="661" width="0.1400%" height="15" fill="rgb(232,6,1)"/><text x="62.1100%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.14%)</title><rect x="61.8600%" y="645" width="0.1400%" height="15" fill="rgb(210,224,50)"/><text x="62.1100%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (27 samples, 0.54%)</title><rect x="62.3200%" y="597" width="0.5400%" height="15" fill="rgb(228,127,35)"/><text x="62.5700%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (27 samples, 0.54%)</title><rect x="62.3200%" y="581" width="0.5400%" height="15" fill="rgb(245,102,45)"/><text x="62.5700%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (27 samples, 0.54%)</title><rect x="62.3200%" y="565" width="0.5400%" height="15" fill="rgb(214,1,49)"/><text x="62.5700%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.54%)</title><rect x="62.3200%" y="549" width="0.5400%" height="15" fill="rgb(226,163,40)"/><text x="62.5700%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.54%)</title><rect x="62.3200%" y="533" width="0.5400%" height="15" fill="rgb(239,212,28)"/><text x="62.5700%" y="543.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (30 samples, 0.60%)</title><rect x="62.2800%" y="693" width="0.6000%" height="15" fill="rgb(220,20,13)"/><text x="62.5300%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::expected (29 samples, 0.58%)</title><rect x="62.3000%" y="677" width="0.5800%" height="15" fill="rgb(210,164,35)"/><text x="62.5500%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 0.56%)</title><rect x="62.3200%" y="661" width="0.5600%" height="15" fill="rgb(248,109,41)"/><text x="62.5700%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.56%)</title><rect x="62.3200%" y="645" width="0.5600%" height="15" fill="rgb(238,23,50)"/><text x="62.5700%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.56%)</title><rect x="62.3200%" y="629" width="0.5600%" height="15" fill="rgb(211,48,49)"/><text x="62.5700%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.56%)</title><rect x="62.3200%" y="613" width="0.5600%" height="15" fill="rgb(223,36,21)"/><text x="62.5700%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (37 samples, 0.74%)</title><rect x="62.2200%" y="773" width="0.7400%" height="15" fill="rgb(207,123,46)"/><text x="62.4700%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (37 samples, 0.74%)</title><rect x="62.2200%" y="757" width="0.7400%" height="15" fill="rgb(240,218,32)"/><text x="62.4700%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (37 samples, 0.74%)</title><rect x="62.2200%" y="741" width="0.7400%" height="15" fill="rgb(252,5,43)"/><text x="62.4700%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (37 samples, 0.74%)</title><rect x="62.2200%" y="725" width="0.7400%" height="15" fill="rgb(252,84,19)"/><text x="62.4700%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (37 samples, 0.74%)</title><rect x="62.2200%" y="709" width="0.7400%" height="15" fill="rgb(243,152,39)"/><text x="62.4700%" y="719.50"></text></g><g><title>__alloc_pages_nodemask (8 samples, 0.16%)</title><rect x="63.5600%" y="469" width="0.1600%" height="15" fill="rgb(234,160,15)"/><text x="63.8100%" y="479.50"></text></g><g><title>get_page_from_freelist (8 samples, 0.16%)</title><rect x="63.5600%" y="453" width="0.1600%" height="15" fill="rgb(237,34,20)"/><text x="63.8100%" y="463.50"></text></g><g><title>prep_new_page (5 samples, 0.10%)</title><rect x="63.6200%" y="437" width="0.1000%" height="15" fill="rgb(229,97,13)"/><text x="63.8700%" y="447.50"></text></g><g><title>alloc_pages_vma (9 samples, 0.18%)</title><rect x="63.5600%" y="485" width="0.1800%" height="15" fill="rgb(234,71,50)"/><text x="63.8100%" y="495.50"></text></g><g><title>__handle_mm_fault (18 samples, 0.36%)</title><rect x="63.5200%" y="501" width="0.3600%" height="15" fill="rgb(253,155,4)"/><text x="63.7700%" y="511.50"></text></g><g><title>page_fault (25 samples, 0.50%)</title><rect x="63.4000%" y="549" width="0.5000%" height="15" fill="rgb(222,185,37)"/><text x="63.6500%" y="559.50"></text></g><g><title>do_user_addr_fault (24 samples, 0.48%)</title><rect x="63.4200%" y="533" width="0.4800%" height="15" fill="rgb(251,177,13)"/><text x="63.6700%" y="543.50"></text></g><g><title>handle_mm_fault (22 samples, 0.44%)</title><rect x="63.4600%" y="517" width="0.4400%" height="15" fill="rgb(250,179,40)"/><text x="63.7100%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (39 samples, 0.78%)</title><rect x="63.2400%" y="581" width="0.7800%" height="15" fill="rgb(242,44,2)"/><text x="63.4900%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (36 samples, 0.72%)</title><rect x="63.3000%" y="565" width="0.7200%" height="15" fill="rgb(216,177,13)"/><text x="63.5500%" y="575.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.10%)</title><rect x="63.9200%" y="549" width="0.1000%" height="15" fill="rgb(216,106,43)"/><text x="64.1700%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (9 samples, 0.18%)</title><rect x="64.0200%" y="581" width="0.1800%" height="15" fill="rgb(216,183,2)"/><text x="64.2700%" y="591.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (55 samples, 1.10%)</title><rect x="63.1200%" y="597" width="1.1000%" height="15" fill="rgb(249,75,3)"/><text x="63.3700%" y="607.50"></text></g><g><title>decor_mem::views::View::insert_into_index (18 samples, 0.36%)</title><rect x="64.2600%" y="581" width="0.3600%" height="15" fill="rgb(219,67,39)"/><text x="64.5100%" y="591.50"></text></g><g><title>decor_mem::views::Views::insert (28 samples, 0.56%)</title><rect x="64.2200%" y="597" width="0.5600%" height="15" fill="rgb(253,228,2)"/><text x="64.4700%" y="607.50"></text></g><g><title>decor_mem::views::View::insert_row (8 samples, 0.16%)</title><rect x="64.6200%" y="581" width="0.1600%" height="15" fill="rgb(235,138,27)"/><text x="64.8700%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.12%)</title><rect x="64.6600%" y="565" width="0.1200%" height="15" fill="rgb(236,97,51)"/><text x="64.9100%" y="575.50"></text></g><g><title>start_thread (88 samples, 1.76%)</title><rect x="63.0600%" y="773" width="1.7600%" height="15" fill="rgb(240,80,30)"/><text x="63.3100%" y="783.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (88 samples, 1.76%)</title><rect x="63.0600%" y="757" width="1.7600%" height="15" fill="rgb(230,178,19)"/><text x="63.3100%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (88 samples, 1.76%)</title><rect x="63.0600%" y="741" width="1.7600%" height="15" fill="rgb(210,190,27)"/><text x="63.3100%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (88 samples, 1.76%)</title><rect x="63.0600%" y="725" width="1.7600%" height="15" fill="rgb(222,107,31)"/><text x="63.3100%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (88 samples, 1.76%)</title><rect x="63.0600%" y="709" width="1.7600%" height="15" fill="rgb(216,127,34)"/><text x="63.3100%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (88 samples, 1.76%)</title><rect x="63.0600%" y="693" width="1.7600%" height="15" fill="rgb(234,116,52)"/><text x="63.3100%" y="703.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (88 samples, 1.76%)</title><rect x="63.0600%" y="677" width="1.7600%" height="15" fill="rgb(222,124,15)"/><text x="63.3100%" y="687.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (88 samples, 1.76%)</title><rect x="63.0600%" y="661" width="1.7600%" height="15" fill="rgb(231,179,28)"/><text x="63.3100%" y="671.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (88 samples, 1.76%)</title><rect x="63.0600%" y="645" width="1.7600%" height="15" fill="rgb(226,93,45)"/><text x="63.3100%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (88 samples, 1.76%)</title><rect x="63.0600%" y="629" width="1.7600%" height="15" fill="rgb(215,8,51)"/><text x="63.3100%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (88 samples, 1.76%)</title><rect x="63.0600%" y="613" width="1.7600%" height="15" fill="rgb(223,106,5)"/><text x="63.3100%" y="623.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.14%)</title><rect x="64.9000%" y="773" width="0.1400%" height="15" fill="rgb(250,191,5)"/><text x="65.1500%" y="783.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.14%)</title><rect x="64.9000%" y="757" width="0.1400%" height="15" fill="rgb(242,132,44)"/><text x="65.1500%" y="767.50"></text></g><g><title>std::panicking::try (7 samples, 0.14%)</title><rect x="64.9000%" y="741" width="0.1400%" height="15" fill="rgb(251,152,29)"/><text x="65.1500%" y="751.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.14%)</title><rect x="64.9000%" y="725" width="0.1400%" height="15" fill="rgb(218,179,5)"/><text x="65.1500%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7 samples, 0.14%)</title><rect x="64.9000%" y="709" width="0.1400%" height="15" fill="rgb(227,67,19)"/><text x="65.1500%" y="719.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 0.14%)</title><rect x="64.9000%" y="693" width="0.1400%" height="15" fill="rgb(233,119,31)"/><text x="65.1500%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.14%)</title><rect x="64.9000%" y="677" width="0.1400%" height="15" fill="rgb(241,120,22)"/><text x="65.1500%" y="687.50"></text></g><g><title>lobsters_microbenchmarks::main (7 samples, 0.14%)</title><rect x="64.9000%" y="661" width="0.1400%" height="15" fill="rgb(224,102,30)"/><text x="65.1500%" y="671.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="65.0400%" y="597" width="0.1600%" height="15" fill="rgb(210,164,37)"/><text x="65.2900%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="65.0400%" y="581" width="0.1600%" height="15" fill="rgb(226,191,16)"/><text x="65.2900%" y="591.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (6 samples, 0.12%)</title><rect x="65.0800%" y="565" width="0.1200%" height="15" fill="rgb(214,40,45)"/><text x="65.3300%" y="575.50"></text></g><g><title>do_syscall_64 (10 samples, 0.20%)</title><rect x="65.2000%" y="501" width="0.2000%" height="15" fill="rgb(244,29,26)"/><text x="65.4500%" y="511.50"></text></g><g><title>__x64_sys_mprotect (10 samples, 0.20%)</title><rect x="65.2000%" y="485" width="0.2000%" height="15" fill="rgb(216,16,5)"/><text x="65.4500%" y="495.50"></text></g><g><title>do_mprotect_pkey (10 samples, 0.20%)</title><rect x="65.2000%" y="469" width="0.2000%" height="15" fill="rgb(249,76,35)"/><text x="65.4500%" y="479.50"></text></g><g><title>mprotect_fixup (10 samples, 0.20%)</title><rect x="65.2000%" y="453" width="0.2000%" height="15" fill="rgb(207,11,44)"/><text x="65.4500%" y="463.50"></text></g><g><title>perf_event_mmap (8 samples, 0.16%)</title><rect x="65.2400%" y="437" width="0.1600%" height="15" fill="rgb(228,190,49)"/><text x="65.4900%" y="447.50"></text></g><g><title>perf_iterate_sb (8 samples, 0.16%)</title><rect x="65.2400%" y="421" width="0.1600%" height="15" fill="rgb(214,173,12)"/><text x="65.4900%" y="431.50"></text></g><g><title>perf_iterate_ctx (7 samples, 0.14%)</title><rect x="65.2600%" y="405" width="0.1400%" height="15" fill="rgb(218,26,35)"/><text x="65.5100%" y="415.50"></text></g><g><title>__GI___mprotect (11 samples, 0.22%)</title><rect x="65.2000%" y="533" width="0.2200%" height="15" fill="rgb(220,200,19)"/><text x="65.4500%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.22%)</title><rect x="65.2000%" y="517" width="0.2200%" height="15" fill="rgb(239,95,49)"/><text x="65.4500%" y="527.50"></text></g><g><title>page_fault (8 samples, 0.16%)</title><rect x="65.4200%" y="533" width="0.1600%" height="15" fill="rgb(235,85,53)"/><text x="65.6700%" y="543.50"></text></g><g><title>do_user_addr_fault (8 samples, 0.16%)</title><rect x="65.4200%" y="517" width="0.1600%" height="15" fill="rgb(233,133,31)"/><text x="65.6700%" y="527.50"></text></g><g><title>handle_mm_fault (8 samples, 0.16%)</title><rect x="65.4200%" y="501" width="0.1600%" height="15" fill="rgb(218,25,20)"/><text x="65.6700%" y="511.50"></text></g><g><title>__handle_mm_fault (8 samples, 0.16%)</title><rect x="65.4200%" y="485" width="0.1600%" height="15" fill="rgb(252,210,38)"/><text x="65.6700%" y="495.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (28 samples, 0.56%)</title><rect x="65.0400%" y="613" width="0.5600%" height="15" fill="rgb(242,134,21)"/><text x="65.2900%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (20 samples, 0.40%)</title><rect x="65.2000%" y="597" width="0.4000%" height="15" fill="rgb(213,28,48)"/><text x="65.4500%" y="607.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.40%)</title><rect x="65.2000%" y="581" width="0.4000%" height="15" fill="rgb(250,196,2)"/><text x="65.4500%" y="591.50"></text></g><g><title>_int_malloc (20 samples, 0.40%)</title><rect x="65.2000%" y="565" width="0.4000%" height="15" fill="rgb(227,5,17)"/><text x="65.4500%" y="575.50"></text></g><g><title>sysmalloc (20 samples, 0.40%)</title><rect x="65.2000%" y="549" width="0.4000%" height="15" fill="rgb(221,226,24)"/><text x="65.4500%" y="559.50"></text></g><g><title>decor_mem::views::View::insert_into_index (13 samples, 0.26%)</title><rect x="65.6000%" y="597" width="0.2600%" height="15" fill="rgb(211,5,48)"/><text x="65.8500%" y="607.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (42 samples, 0.84%)</title><rect x="65.0400%" y="773" width="0.8400%" height="15" fill="rgb(219,150,6)"/><text x="65.2900%" y="783.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (42 samples, 0.84%)</title><rect x="65.0400%" y="757" width="0.8400%" height="15" fill="rgb(251,46,16)"/><text x="65.2900%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (42 samples, 0.84%)</title><rect x="65.0400%" y="741" width="0.8400%" height="15" fill="rgb(220,204,40)"/><text x="65.2900%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (42 samples, 0.84%)</title><rect x="65.0400%" y="725" width="0.8400%" height="15" fill="rgb(211,85,2)"/><text x="65.2900%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (42 samples, 0.84%)</title><rect x="65.0400%" y="709" width="0.8400%" height="15" fill="rgb(229,17,7)"/><text x="65.2900%" y="719.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (42 samples, 0.84%)</title><rect x="65.0400%" y="693" width="0.8400%" height="15" fill="rgb(239,72,28)"/><text x="65.2900%" y="703.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (42 samples, 0.84%)</title><rect x="65.0400%" y="677" width="0.8400%" height="15" fill="rgb(230,47,54)"/><text x="65.2900%" y="687.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (42 samples, 0.84%)</title><rect x="65.0400%" y="661" width="0.8400%" height="15" fill="rgb(214,50,8)"/><text x="65.2900%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (42 samples, 0.84%)</title><rect x="65.0400%" y="645" width="0.8400%" height="15" fill="rgb(216,198,43)"/><text x="65.2900%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (42 samples, 0.84%)</title><rect x="65.0400%" y="629" width="0.8400%" height="15" fill="rgb(234,20,35)"/><text x="65.2900%" y="639.50"></text></g><g><title>decor_mem::views::Views::insert (14 samples, 0.28%)</title><rect x="65.6000%" y="613" width="0.2800%" height="15" fill="rgb(254,45,19)"/><text x="65.8500%" y="623.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (5 samples, 0.10%)</title><rect x="65.8800%" y="773" width="0.1000%" height="15" fill="rgb(219,14,44)"/><text x="66.1300%" y="783.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (23 samples, 0.46%)</title><rect x="65.9800%" y="677" width="0.4600%" height="15" fill="rgb(217,220,26)"/><text x="66.2300%" y="687.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.46%)</title><rect x="67.1600%" y="661" width="0.4600%" height="15" fill="rgb(213,158,28)"/><text x="67.4100%" y="671.50"></text></g><g><title>_int_realloc (9 samples, 0.18%)</title><rect x="67.4400%" y="645" width="0.1800%" height="15" fill="rgb(252,51,52)"/><text x="67.6900%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (10 samples, 0.20%)</title><rect x="67.6200%" y="661" width="0.2000%" height="15" fill="rgb(246,89,16)"/><text x="67.8700%" y="671.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="67.9200%" y="661" width="0.1600%" height="15" fill="rgb(216,158,49)"/><text x="68.1700%" y="671.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (10 samples, 0.20%)</title><rect x="68.3600%" y="645" width="0.2000%" height="15" fill="rgb(236,107,19)"/><text x="68.6100%" y="655.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (8 samples, 0.16%)</title><rect x="68.4000%" y="629" width="0.1600%" height="15" fill="rgb(228,185,30)"/><text x="68.6500%" y="639.50"></text></g><g><title>core::fmt::write (24 samples, 0.48%)</title><rect x="68.1000%" y="661" width="0.4800%" height="15" fill="rgb(246,134,8)"/><text x="68.3500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.10%)</title><rect x="68.5800%" y="661" width="0.1000%" height="15" fill="rgb(214,143,50)"/><text x="68.8300%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (137 samples, 2.74%)</title><rect x="65.9800%" y="709" width="2.7400%" height="15" fill="rgb(228,75,8)"/><text x="66.2300%" y="719.50">&lt;d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (137 samples, 2.74%)</title><rect x="65.9800%" y="693" width="2.7400%" height="15" fill="rgb(207,175,4)"/><text x="66.2300%" y="703.50">de..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (114 samples, 2.28%)</title><rect x="66.4400%" y="677" width="2.2800%" height="15" fill="rgb(205,108,24)"/><text x="66.6900%" y="687.50">d..</text></g><g><title>core::ptr::drop_in_place (5 samples, 0.10%)</title><rect x="68.9200%" y="661" width="0.1000%" height="15" fill="rgb(244,120,49)"/><text x="69.1700%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (10 samples, 0.20%)</title><rect x="69.0600%" y="661" width="0.2000%" height="15" fill="rgb(223,47,38)"/><text x="69.3100%" y="671.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (28 samples, 0.56%)</title><rect x="68.7200%" y="677" width="0.5600%" height="15" fill="rgb(229,179,11)"/><text x="68.9700%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe_child_parent_edges (11 samples, 0.22%)</title><rect x="69.2800%" y="677" width="0.2200%" height="15" fill="rgb(231,122,1)"/><text x="69.5300%" y="687.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (13 samples, 0.26%)</title><rect x="69.5600%" y="677" width="0.2600%" height="15" fill="rgb(245,119,9)"/><text x="69.8100%" y="687.50"></text></g><g><title>core::fmt::write (13 samples, 0.26%)</title><rect x="69.5600%" y="661" width="0.2600%" height="15" fill="rgb(241,163,25)"/><text x="69.8100%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (13 samples, 0.26%)</title><rect x="69.5600%" y="645" width="0.2600%" height="15" fill="rgb(217,214,3)"/><text x="69.8100%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (13 samples, 0.26%)</title><rect x="69.5600%" y="629" width="0.2600%" height="15" fill="rgb(240,86,28)"/><text x="69.8100%" y="639.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="69.6800%" y="613" width="0.1400%" height="15" fill="rgb(215,47,9)"/><text x="69.9300%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (7 samples, 0.14%)</title><rect x="69.6800%" y="597" width="0.1400%" height="15" fill="rgb(252,25,45)"/><text x="69.9300%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="69.7200%" y="581" width="0.1000%" height="15" fill="rgb(251,164,9)"/><text x="69.9700%" y="591.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="70.1400%" y="565" width="0.1000%" height="15" fill="rgb(233,194,0)"/><text x="70.3900%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (23 samples, 0.46%)</title><rect x="69.8400%" y="597" width="0.4600%" height="15" fill="rgb(249,111,24)"/><text x="70.0900%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (21 samples, 0.42%)</title><rect x="69.8800%" y="581" width="0.4200%" height="15" fill="rgb(250,223,3)"/><text x="70.1300%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (33 samples, 0.66%)</title><rect x="69.8400%" y="613" width="0.6600%" height="15" fill="rgb(236,178,37)"/><text x="70.0900%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (10 samples, 0.20%)</title><rect x="70.3000%" y="597" width="0.2000%" height="15" fill="rgb(241,158,50)"/><text x="70.5500%" y="607.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="70.4000%" y="581" width="0.1000%" height="15" fill="rgb(213,121,41)"/><text x="70.6500%" y="591.50"></text></g><g><title>core::fmt::write (39 samples, 0.78%)</title><rect x="69.8200%" y="645" width="0.7800%" height="15" fill="rgb(240,92,3)"/><text x="70.0700%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (39 samples, 0.78%)</title><rect x="69.8200%" y="629" width="0.7800%" height="15" fill="rgb(205,123,3)"/><text x="70.0700%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="70.5000%" y="613" width="0.1000%" height="15" fill="rgb(205,97,47)"/><text x="70.7500%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (13 samples, 0.26%)</title><rect x="70.6000%" y="645" width="0.2600%" height="15" fill="rgb(247,152,14)"/><text x="70.8500%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (8 samples, 0.16%)</title><rect x="70.7000%" y="629" width="0.1600%" height="15" fill="rgb(248,195,53)"/><text x="70.9500%" y="639.50"></text></g><g><title>decor_mem::views::View::insert_into_index (60 samples, 1.20%)</title><rect x="69.8200%" y="661" width="1.2000%" height="15" fill="rgb(226,201,16)"/><text x="70.0700%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (8 samples, 0.16%)</title><rect x="70.8600%" y="645" width="0.1600%" height="15" fill="rgb(205,98,0)"/><text x="71.1100%" y="655.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="70.8600%" y="629" width="0.1600%" height="15" fill="rgb(214,191,48)"/><text x="71.1100%" y="639.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="70.8600%" y="613" width="0.1600%" height="15" fill="rgb(237,112,39)"/><text x="71.1100%" y="623.50"></text></g><g><title>sysmalloc (8 samples, 0.16%)</title><rect x="70.8600%" y="597" width="0.1600%" height="15" fill="rgb(247,203,27)"/><text x="71.1100%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (254 samples, 5.08%)</title><rect x="65.9800%" y="773" width="5.0800%" height="15" fill="rgb(235,124,28)"/><text x="66.2300%" y="783.50">std::s..</text></g><g><title>decor_mem::Shim::run_on_tcp (254 samples, 5.08%)</title><rect x="65.9800%" y="757" width="5.0800%" height="15" fill="rgb(208,207,46)"/><text x="66.2300%" y="767.50">decor_..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (254 samples, 5.08%)</title><rect x="65.9800%" y="741" width="5.0800%" height="15" fill="rgb(234,176,4)"/><text x="66.2300%" y="751.50">msql_s..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (254 samples, 5.08%)</title><rect x="65.9800%" y="725" width="5.0800%" height="15" fill="rgb(230,133,28)"/><text x="66.2300%" y="735.50">msql_s..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (117 samples, 2.34%)</title><rect x="68.7200%" y="709" width="2.3400%" height="15" fill="rgb(211,137,40)"/><text x="68.9700%" y="719.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (117 samples, 2.34%)</title><rect x="68.7200%" y="693" width="2.3400%" height="15" fill="rgb(254,35,13)"/><text x="68.9700%" y="703.50">d..</text></g><g><title>decor_mem::views::Views::insert (62 samples, 1.24%)</title><rect x="69.8200%" y="677" width="1.2400%" height="15" fill="rgb(225,49,51)"/><text x="70.0700%" y="687.50"></text></g><g><title>[unknown] (3,095 samples, 61.90%)</title><rect x="9.2800%" y="789" width="61.9000%" height="15" fill="rgb(251,10,15)"/><text x="9.5300%" y="799.50">[unknown]</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.22%)</title><rect x="71.4400%" y="613" width="0.2200%" height="15" fill="rgb(228,207,15)"/><text x="71.6900%" y="623.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (7 samples, 0.14%)</title><rect x="71.5200%" y="597" width="0.1400%" height="15" fill="rgb(241,99,19)"/><text x="71.7700%" y="607.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="71.6600%" y="613" width="0.1200%" height="15" fill="rgb(207,104,49)"/><text x="71.9100%" y="623.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.24%)</title><rect x="71.7800%" y="597" width="0.2400%" height="15" fill="rgb(234,99,18)"/><text x="72.0300%" y="607.50"></text></g><g><title>_int_realloc (10 samples, 0.20%)</title><rect x="71.8200%" y="581" width="0.2000%" height="15" fill="rgb(213,191,49)"/><text x="72.0700%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.26%)</title><rect x="71.7800%" y="613" width="0.2600%" height="15" fill="rgb(210,226,19)"/><text x="72.0300%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (37 samples, 0.74%)</title><rect x="71.4000%" y="629" width="0.7400%" height="15" fill="rgb(229,97,18)"/><text x="71.6500%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="72.2200%" y="597" width="0.1400%" height="15" fill="rgb(211,167,15)"/><text x="72.4700%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (21 samples, 0.42%)</title><rect x="72.3600%" y="597" width="0.4200%" height="15" fill="rgb(210,169,34)"/><text x="72.6100%" y="607.50"></text></g><g><title>crypto::sha3::keccak_f (19 samples, 0.38%)</title><rect x="72.4000%" y="581" width="0.3800%" height="15" fill="rgb(241,121,31)"/><text x="72.6500%" y="591.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="72.9000%" y="597" width="0.1600%" height="15" fill="rgb(232,40,11)"/><text x="73.1500%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (21 samples, 0.42%)</title><rect x="73.3200%" y="565" width="0.4200%" height="15" fill="rgb(205,86,26)"/><text x="73.5700%" y="575.50"></text></g><g><title>crypto::sha3::keccak_f (21 samples, 0.42%)</title><rect x="73.3200%" y="549" width="0.4200%" height="15" fill="rgb(231,126,28)"/><text x="73.5700%" y="559.50"></text></g><g><title>crypto::digest::Digest::result_str (30 samples, 0.60%)</title><rect x="73.2000%" y="597" width="0.6000%" height="15" fill="rgb(219,221,18)"/><text x="73.4500%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (25 samples, 0.50%)</title><rect x="73.3000%" y="581" width="0.5000%" height="15" fill="rgb(211,40,0)"/><text x="73.5500%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (90 samples, 1.80%)</title><rect x="72.2000%" y="613" width="1.8000%" height="15" fill="rgb(239,85,43)"/><text x="72.4500%" y="623.50">d..</text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.10%)</title><rect x="73.9000%" y="597" width="0.1000%" height="15" fill="rgb(231,55,21)"/><text x="74.1500%" y="607.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (96 samples, 1.92%)</title><rect x="72.1400%" y="629" width="1.9200%" height="15" fill="rgb(225,184,43)"/><text x="72.3900%" y="639.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::record_query_stats (5 samples, 0.10%)</title><rect x="74.0600%" y="613" width="0.1000%" height="15" fill="rgb(251,158,41)"/><text x="74.3100%" y="623.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="74.4400%" y="581" width="0.1200%" height="15" fill="rgb(234,159,37)"/><text x="74.6900%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.16%)</title><rect x="74.4200%" y="597" width="0.1600%" height="15" fill="rgb(216,204,22)"/><text x="74.6700%" y="607.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.26%)</title><rect x="74.6000%" y="421" width="0.2600%" height="15" fill="rgb(214,17,3)"/><text x="74.8500%" y="431.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="74.6800%" y="405" width="0.1800%" height="15" fill="rgb(212,111,17)"/><text x="74.9300%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.32%)</title><rect x="74.5800%" y="597" width="0.3200%" height="15" fill="rgb(221,157,24)"/><text x="74.8300%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.32%)</title><rect x="74.5800%" y="581" width="0.3200%" height="15" fill="rgb(252,16,13)"/><text x="74.8300%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.32%)</title><rect x="74.5800%" y="565" width="0.3200%" height="15" fill="rgb(221,62,2)"/><text x="74.8300%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.32%)</title><rect x="74.5800%" y="549" width="0.3200%" height="15" fill="rgb(247,87,22)"/><text x="74.8300%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.30%)</title><rect x="74.6000%" y="533" width="0.3000%" height="15" fill="rgb(215,73,9)"/><text x="74.8500%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (15 samples, 0.30%)</title><rect x="74.6000%" y="517" width="0.3000%" height="15" fill="rgb(207,175,33)"/><text x="74.8500%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.30%)</title><rect x="74.6000%" y="501" width="0.3000%" height="15" fill="rgb(243,129,54)"/><text x="74.8500%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.30%)</title><rect x="74.6000%" y="485" width="0.3000%" height="15" fill="rgb(227,119,45)"/><text x="74.8500%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (15 samples, 0.30%)</title><rect x="74.6000%" y="469" width="0.3000%" height="15" fill="rgb(205,109,36)"/><text x="74.8500%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.30%)</title><rect x="74.6000%" y="453" width="0.3000%" height="15" fill="rgb(205,6,39)"/><text x="74.8500%" y="463.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.30%)</title><rect x="74.6000%" y="437" width="0.3000%" height="15" fill="rgb(221,32,16)"/><text x="74.8500%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.18%)</title><rect x="75.2200%" y="517" width="0.1800%" height="15" fill="rgb(228,144,50)"/><text x="75.4700%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.18%)</title><rect x="75.2200%" y="501" width="0.1800%" height="15" fill="rgb(229,201,53)"/><text x="75.4700%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.18%)</title><rect x="75.2200%" y="485" width="0.1800%" height="15" fill="rgb(249,153,27)"/><text x="75.4700%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.18%)</title><rect x="75.2200%" y="469" width="0.1800%" height="15" fill="rgb(227,106,25)"/><text x="75.4700%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="75.3000%" y="453" width="0.1000%" height="15" fill="rgb(230,65,29)"/><text x="75.5500%" y="463.50"></text></g><g><title>__GI___libc_malloc (84 samples, 1.68%)</title><rect x="75.4400%" y="405" width="1.6800%" height="15" fill="rgb(221,57,46)"/><text x="75.6900%" y="415.50"></text></g><g><title>_int_malloc (60 samples, 1.20%)</title><rect x="75.9200%" y="389" width="1.2000%" height="15" fill="rgb(229,161,17)"/><text x="76.1700%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (106 samples, 2.12%)</title><rect x="75.1000%" y="581" width="2.1200%" height="15" fill="rgb(222,213,11)"/><text x="75.3500%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (104 samples, 2.08%)</title><rect x="75.1400%" y="565" width="2.0800%" height="15" fill="rgb(235,35,13)"/><text x="75.3900%" y="575.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (100 samples, 2.00%)</title><rect x="75.2200%" y="549" width="2.0000%" height="15" fill="rgb(233,158,34)"/><text x="75.4700%" y="559.50">a..</text></g><g><title>alloc::slice::hack::to_vec (100 samples, 2.00%)</title><rect x="75.2200%" y="533" width="2.0000%" height="15" fill="rgb(215,151,48)"/><text x="75.4700%" y="543.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (91 samples, 1.82%)</title><rect x="75.4000%" y="517" width="1.8200%" height="15" fill="rgb(229,84,14)"/><text x="75.6500%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (91 samples, 1.82%)</title><rect x="75.4000%" y="501" width="1.8200%" height="15" fill="rgb(229,68,14)"/><text x="75.6500%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (91 samples, 1.82%)</title><rect x="75.4000%" y="485" width="1.8200%" height="15" fill="rgb(243,106,26)"/><text x="75.6500%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (91 samples, 1.82%)</title><rect x="75.4000%" y="469" width="1.8200%" height="15" fill="rgb(206,45,38)"/><text x="75.6500%" y="479.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (91 samples, 1.82%)</title><rect x="75.4000%" y="453" width="1.8200%" height="15" fill="rgb(226,6,15)"/><text x="75.6500%" y="463.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (91 samples, 1.82%)</title><rect x="75.4000%" y="437" width="1.8200%" height="15" fill="rgb(232,22,54)"/><text x="75.6500%" y="447.50">a..</text></g><g><title>alloc::alloc::alloc (91 samples, 1.82%)</title><rect x="75.4000%" y="421" width="1.8200%" height="15" fill="rgb(229,222,32)"/><text x="75.6500%" y="431.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (118 samples, 2.36%)</title><rect x="74.9400%" y="597" width="2.3600%" height="15" fill="rgb(228,62,29)"/><text x="75.1900%" y="607.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.22%)</title><rect x="77.3000%" y="597" width="0.2200%" height="15" fill="rgb(251,103,34)"/><text x="77.5500%" y="607.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="77.3800%" y="581" width="0.1400%" height="15" fill="rgb(233,12,30)"/><text x="77.6300%" y="591.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (22 samples, 0.44%)</title><rect x="77.5200%" y="597" width="0.4400%" height="15" fill="rgb(238,52,0)"/><text x="77.7700%" y="607.50"></text></g><g><title>crypto::sha3::keccak_f (20 samples, 0.40%)</title><rect x="77.5600%" y="581" width="0.4000%" height="15" fill="rgb(223,98,5)"/><text x="77.8100%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="78.0200%" y="501" width="0.1000%" height="15" fill="rgb(228,75,37)"/><text x="78.2700%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.10%)</title><rect x="78.0200%" y="485" width="0.1000%" height="15" fill="rgb(205,115,49)"/><text x="78.2700%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.10%)</title><rect x="78.0200%" y="469" width="0.1000%" height="15" fill="rgb(250,154,43)"/><text x="78.2700%" y="479.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="78.1200%" y="389" width="0.1800%" height="15" fill="rgb(226,43,29)"/><text x="78.3700%" y="399.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="78.2000%" y="373" width="0.1000%" height="15" fill="rgb(249,228,39)"/><text x="78.4500%" y="383.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::clone::Clone&gt;::clone (19 samples, 0.38%)</title><rect x="77.9600%" y="597" width="0.3800%" height="15" fill="rgb(216,79,43)"/><text x="78.2100%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.36%)</title><rect x="77.9800%" y="581" width="0.3600%" height="15" fill="rgb(228,95,12)"/><text x="78.2300%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.34%)</title><rect x="78.0000%" y="565" width="0.3400%" height="15" fill="rgb(249,221,15)"/><text x="78.2500%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.34%)</title><rect x="78.0000%" y="549" width="0.3400%" height="15" fill="rgb(233,34,13)"/><text x="78.2500%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.32%)</title><rect x="78.0200%" y="533" width="0.3200%" height="15" fill="rgb(214,103,39)"/><text x="78.2700%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.32%)</title><rect x="78.0200%" y="517" width="0.3200%" height="15" fill="rgb(251,126,39)"/><text x="78.2700%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="78.1200%" y="501" width="0.2200%" height="15" fill="rgb(214,216,36)"/><text x="78.3700%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="78.1200%" y="485" width="0.2200%" height="15" fill="rgb(220,221,8)"/><text x="78.3700%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.22%)</title><rect x="78.1200%" y="469" width="0.2200%" height="15" fill="rgb(240,216,3)"/><text x="78.3700%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.22%)</title><rect x="78.1200%" y="453" width="0.2200%" height="15" fill="rgb(232,218,17)"/><text x="78.3700%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (11 samples, 0.22%)</title><rect x="78.1200%" y="437" width="0.2200%" height="15" fill="rgb(229,163,45)"/><text x="78.3700%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.22%)</title><rect x="78.1200%" y="421" width="0.2200%" height="15" fill="rgb(231,110,42)"/><text x="78.3700%" y="431.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.22%)</title><rect x="78.1200%" y="405" width="0.2200%" height="15" fill="rgb(208,170,48)"/><text x="78.3700%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.22%)</title><rect x="78.3800%" y="597" width="0.2200%" height="15" fill="rgb(239,116,25)"/><text x="78.6300%" y="607.50"></text></g><g><title>_int_free (22 samples, 0.44%)</title><rect x="78.7600%" y="597" width="0.4400%" height="15" fill="rgb(219,200,50)"/><text x="79.0100%" y="607.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.20%)</title><rect x="79.2600%" y="581" width="0.2000%" height="15" fill="rgb(245,200,0)"/><text x="79.5100%" y="591.50"></text></g><g><title>_int_realloc (10 samples, 0.20%)</title><rect x="79.2600%" y="565" width="0.2000%" height="15" fill="rgb(245,119,33)"/><text x="79.5100%" y="575.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="79.2800%" y="549" width="0.1800%" height="15" fill="rgb(231,125,12)"/><text x="79.5300%" y="559.50"></text></g><g><title>malloc_consolidate (5 samples, 0.10%)</title><rect x="79.3600%" y="533" width="0.1000%" height="15" fill="rgb(216,96,41)"/><text x="79.6100%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.30%)</title><rect x="79.2000%" y="597" width="0.3000%" height="15" fill="rgb(248,43,45)"/><text x="79.4500%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.20%)</title><rect x="79.5800%" y="549" width="0.2000%" height="15" fill="rgb(217,222,7)"/><text x="79.8300%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.20%)</title><rect x="79.5800%" y="533" width="0.2000%" height="15" fill="rgb(233,28,6)"/><text x="79.8300%" y="543.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="79.5800%" y="517" width="0.2000%" height="15" fill="rgb(231,218,15)"/><text x="79.8300%" y="527.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="79.5800%" y="501" width="0.2000%" height="15" fill="rgb(226,171,48)"/><text x="79.8300%" y="511.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (15 samples, 0.30%)</title><rect x="79.5800%" y="581" width="0.3000%" height="15" fill="rgb(235,201,9)"/><text x="79.8300%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (15 samples, 0.30%)</title><rect x="79.5800%" y="565" width="0.3000%" height="15" fill="rgb(217,80,15)"/><text x="79.8300%" y="575.50"></text></g><g><title>core::fmt::write (16 samples, 0.32%)</title><rect x="79.5800%" y="597" width="0.3200%" height="15" fill="rgb(219,152,8)"/><text x="79.8300%" y="607.50"></text></g><g><title>__GI___libc_free (8 samples, 0.16%)</title><rect x="80.0600%" y="581" width="0.1600%" height="15" fill="rgb(243,107,38)"/><text x="80.3100%" y="591.50"></text></g><g><title>_int_free (44 samples, 0.88%)</title><rect x="80.2400%" y="581" width="0.8800%" height="15" fill="rgb(231,17,5)"/><text x="80.4900%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (65 samples, 1.30%)</title><rect x="79.9000%" y="597" width="1.3000%" height="15" fill="rgb(209,25,54)"/><text x="80.1500%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (33 samples, 0.66%)</title><rect x="81.2800%" y="565" width="0.6600%" height="15" fill="rgb(219,0,2)"/><text x="81.5300%" y="575.50"></text></g><g><title>crypto::sha3::keccak_f (31 samples, 0.62%)</title><rect x="81.3200%" y="549" width="0.6200%" height="15" fill="rgb(246,9,5)"/><text x="81.5700%" y="559.50"></text></g><g><title>crypto::digest::Digest::result_str (41 samples, 0.82%)</title><rect x="81.2000%" y="597" width="0.8200%" height="15" fill="rgb(226,159,4)"/><text x="81.4500%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (39 samples, 0.78%)</title><rect x="81.2400%" y="581" width="0.7800%" height="15" fill="rgb(219,175,34)"/><text x="81.4900%" y="591.50"></text></g><g><title>decor_mem::ghosts_map::answer_rows (6 samples, 0.12%)</title><rect x="82.0200%" y="597" width="0.1200%" height="15" fill="rgb(236,10,46)"/><text x="82.2700%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="82.3200%" y="565" width="0.1000%" height="15" fill="rgb(240,211,16)"/><text x="82.5700%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.24%)</title><rect x="82.2400%" y="581" width="0.2400%" height="15" fill="rgb(205,3,43)"/><text x="82.4900%" y="591.50"></text></g><g><title>decor_mem::graph::EntityGraph::get_children_of_parent (20 samples, 0.40%)</title><rect x="82.1400%" y="597" width="0.4000%" height="15" fill="rgb(245,7,22)"/><text x="82.3900%" y="607.50"></text></g><g><title>decor_mem::helpers::get_ghosted_col_indices_of (8 samples, 0.16%)</title><rect x="82.5400%" y="597" width="0.1600%" height="15" fill="rgb(239,132,32)"/><text x="82.7900%" y="607.50"></text></g><g><title>decor_mem::helpers::get_sensitive_col_indices_of (10 samples, 0.20%)</title><rect x="82.7000%" y="597" width="0.2000%" height="15" fill="rgb(228,202,34)"/><text x="82.9500%" y="607.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.10%)</title><rect x="83.4200%" y="581" width="0.1000%" height="15" fill="rgb(254,200,22)"/><text x="83.6700%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="83.5600%" y="581" width="0.1200%" height="15" fill="rgb(219,10,39)"/><text x="83.8100%" y="591.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (9 samples, 0.18%)</title><rect x="83.7800%" y="565" width="0.1800%" height="15" fill="rgb(226,210,39)"/><text x="84.0300%" y="575.50"></text></g><g><title>std::time::Instant::duration_since (9 samples, 0.18%)</title><rect x="83.7800%" y="549" width="0.1800%" height="15" fill="rgb(208,219,16)"/><text x="84.0300%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (9 samples, 0.18%)</title><rect x="83.7800%" y="533" width="0.1800%" height="15" fill="rgb(216,158,51)"/><text x="84.0300%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (8 samples, 0.16%)</title><rect x="83.8000%" y="517" width="0.1600%" height="15" fill="rgb(233,14,44)"/><text x="84.0500%" y="527.50"></text></g><g><title>std::time::Instant::elapsed (15 samples, 0.30%)</title><rect x="83.7400%" y="581" width="0.3000%" height="15" fill="rgb(237,97,39)"/><text x="83.9900%" y="591.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (58 samples, 1.16%)</title><rect x="82.9800%" y="597" width="1.1600%" height="15" fill="rgb(218,198,43)"/><text x="83.2300%" y="607.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.10%)</title><rect x="84.0400%" y="581" width="0.1000%" height="15" fill="rgb(231,104,20)"/><text x="84.2900%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (5 samples, 0.10%)</title><rect x="84.0400%" y="565" width="0.1000%" height="15" fill="rgb(254,36,13)"/><text x="84.2900%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::now (5 samples, 0.10%)</title><rect x="84.0400%" y="549" width="0.1000%" height="15" fill="rgb(248,14,50)"/><text x="84.2900%" y="559.50"></text></g><g><title>__clock_gettime_2 (5 samples, 0.10%)</title><rect x="84.0400%" y="533" width="0.1000%" height="15" fill="rgb(217,107,29)"/><text x="84.2900%" y="543.50"></text></g><g><title>__vdso_clock_gettime (5 samples, 0.10%)</title><rect x="84.0400%" y="517" width="0.1000%" height="15" fill="rgb(251,169,33)"/><text x="84.2900%" y="527.50"></text></g><g><title>decor_mem::views::Views::get_view (5 samples, 0.10%)</title><rect x="84.1400%" y="597" width="0.1000%" height="15" fill="rgb(217,108,32)"/><text x="84.3900%" y="607.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.38%)</title><rect x="84.5000%" y="405" width="0.3800%" height="15" fill="rgb(219,66,42)"/><text x="84.7500%" y="415.50"></text></g><g><title>_int_malloc (11 samples, 0.22%)</title><rect x="84.6600%" y="389" width="0.2200%" height="15" fill="rgb(206,180,7)"/><text x="84.9100%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 0.52%)</title><rect x="84.3800%" y="581" width="0.5200%" height="15" fill="rgb(208,226,31)"/><text x="84.6300%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (23 samples, 0.46%)</title><rect x="84.4400%" y="565" width="0.4600%" height="15" fill="rgb(218,26,49)"/><text x="84.6900%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23 samples, 0.46%)</title><rect x="84.4400%" y="549" width="0.4600%" height="15" fill="rgb(233,197,48)"/><text x="84.6900%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.46%)</title><rect x="84.4400%" y="533" width="0.4600%" height="15" fill="rgb(252,181,51)"/><text x="84.6900%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.40%)</title><rect x="84.5000%" y="517" width="0.4000%" height="15" fill="rgb(253,90,19)"/><text x="84.7500%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (20 samples, 0.40%)</title><rect x="84.5000%" y="501" width="0.4000%" height="15" fill="rgb(215,171,30)"/><text x="84.7500%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.40%)</title><rect x="84.5000%" y="485" width="0.4000%" height="15" fill="rgb(214,222,9)"/><text x="84.7500%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.40%)</title><rect x="84.5000%" y="469" width="0.4000%" height="15" fill="rgb(223,3,22)"/><text x="84.7500%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (20 samples, 0.40%)</title><rect x="84.5000%" y="453" width="0.4000%" height="15" fill="rgb(225,196,46)"/><text x="84.7500%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.40%)</title><rect x="84.5000%" y="437" width="0.4000%" height="15" fill="rgb(209,110,37)"/><text x="84.7500%" y="447.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.40%)</title><rect x="84.5000%" y="421" width="0.4000%" height="15" fill="rgb(249,89,12)"/><text x="84.7500%" y="431.50"></text></g><g><title>decor_mem::views::Views::get_view_columns (39 samples, 0.78%)</title><rect x="84.2400%" y="597" width="0.7800%" height="15" fill="rgb(226,27,33)"/><text x="84.4900%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="85.2000%" y="581" width="0.1200%" height="15" fill="rgb(213,82,22)"/><text x="85.4500%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="85.2000%" y="565" width="0.1200%" height="15" fill="rgb(248,140,0)"/><text x="85.4500%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="85.2000%" y="549" width="0.1200%" height="15" fill="rgb(228,106,3)"/><text x="85.4500%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="85.2000%" y="533" width="0.1200%" height="15" fill="rgb(209,23,37)"/><text x="85.4500%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.10%)</title><rect x="85.2200%" y="517" width="0.1000%" height="15" fill="rgb(241,93,50)"/><text x="85.4700%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (5 samples, 0.10%)</title><rect x="85.2200%" y="501" width="0.1000%" height="15" fill="rgb(253,46,43)"/><text x="85.4700%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.10%)</title><rect x="85.2200%" y="485" width="0.1000%" height="15" fill="rgb(226,206,43)"/><text x="85.4700%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.10%)</title><rect x="85.2200%" y="469" width="0.1000%" height="15" fill="rgb(217,54,7)"/><text x="85.4700%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (5 samples, 0.10%)</title><rect x="85.2200%" y="453" width="0.1000%" height="15" fill="rgb(223,5,52)"/><text x="85.4700%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.10%)</title><rect x="85.2200%" y="437" width="0.1000%" height="15" fill="rgb(206,52,46)"/><text x="85.4700%" y="447.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.10%)</title><rect x="85.2200%" y="421" width="0.1000%" height="15" fill="rgb(253,136,11)"/><text x="85.4700%" y="431.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="85.2200%" y="405" width="0.1000%" height="15" fill="rgb(208,106,33)"/><text x="85.4700%" y="415.50"></text></g><g><title>decor_mem::views::Views::insert (31 samples, 0.62%)</title><rect x="85.0200%" y="597" width="0.6200%" height="15" fill="rgb(206,54,4)"/><text x="85.2700%" y="607.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (15 samples, 0.30%)</title><rect x="85.6600%" y="581" width="0.3000%" height="15" fill="rgb(213,3,15)"/><text x="85.9100%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.26%)</title><rect x="85.7000%" y="565" width="0.2600%" height="15" fill="rgb(252,211,39)"/><text x="85.9500%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (26 samples, 0.52%)</title><rect x="85.6400%" y="597" width="0.5200%" height="15" fill="rgb(223,6,36)"/><text x="85.8900%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.14%)</title><rect x="86.0200%" y="581" width="0.1400%" height="15" fill="rgb(252,169,45)"/><text x="86.2700%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="86.0600%" y="565" width="0.1000%" height="15" fill="rgb(212,48,26)"/><text x="86.3100%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.28%)</title><rect x="86.3600%" y="565" width="0.2800%" height="15" fill="rgb(251,102,48)"/><text x="86.6100%" y="575.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (17 samples, 0.34%)</title><rect x="86.3200%" y="581" width="0.3400%" height="15" fill="rgb(243,208,16)"/><text x="86.5700%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="86.6600%" y="581" width="0.1000%" height="15" fill="rgb(219,96,24)"/><text x="86.9100%" y="591.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (12 samples, 0.24%)</title><rect x="86.9400%" y="549" width="0.2400%" height="15" fill="rgb(219,33,29)"/><text x="87.1900%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.24%)</title><rect x="86.9400%" y="533" width="0.2400%" height="15" fill="rgb(223,176,5)"/><text x="87.1900%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.20%)</title><rect x="87.2400%" y="549" width="0.2000%" height="15" fill="rgb(228,140,14)"/><text x="87.4900%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="87.3200%" y="533" width="0.1200%" height="15" fill="rgb(217,179,31)"/><text x="87.5700%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (64 samples, 1.28%)</title><rect x="86.1800%" y="597" width="1.2800%" height="15" fill="rgb(230,9,30)"/><text x="86.4300%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (34 samples, 0.68%)</title><rect x="86.7800%" y="581" width="0.6800%" height="15" fill="rgb(230,136,20)"/><text x="87.0300%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (29 samples, 0.58%)</title><rect x="86.8800%" y="565" width="0.5800%" height="15" fill="rgb(215,210,22)"/><text x="87.1300%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (15 samples, 0.30%)</title><rect x="87.5000%" y="597" width="0.3000%" height="15" fill="rgb(218,43,5)"/><text x="87.7500%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (9 samples, 0.18%)</title><rect x="87.6200%" y="581" width="0.1800%" height="15" fill="rgb(216,11,5)"/><text x="87.8700%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="87.6600%" y="565" width="0.1400%" height="15" fill="rgb(209,82,29)"/><text x="87.9100%" y="575.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="87.6800%" y="549" width="0.1200%" height="15" fill="rgb(244,115,12)"/><text x="87.9300%" y="559.50"></text></g><g><title>_int_realloc (5 samples, 0.10%)</title><rect x="87.7000%" y="533" width="0.1000%" height="15" fill="rgb(222,82,18)"/><text x="87.9500%" y="543.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (684 samples, 13.68%)</title><rect x="74.1600%" y="613" width="13.6800%" height="15" fill="rgb(249,227,8)"/><text x="74.4100%" y="623.50">decor_mem::query_tran..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (691 samples, 13.82%)</title><rect x="74.0600%" y="629" width="13.8200%" height="15" fill="rgb(253,141,45)"/><text x="74.3100%" y="639.50">&lt;decor_mem::Shim as m..</text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="87.9800%" y="629" width="0.1200%" height="15" fill="rgb(234,184,4)"/><text x="88.2300%" y="639.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="88.1400%" y="597" width="0.1200%" height="15" fill="rgb(218,194,23)"/><text x="88.3900%" y="607.50"></text></g><g><title>__GI_munmap (5 samples, 0.10%)</title><rect x="88.1600%" y="581" width="0.1000%" height="15" fill="rgb(235,66,41)"/><text x="88.4100%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.10%)</title><rect x="88.1600%" y="565" width="0.1000%" height="15" fill="rgb(245,217,1)"/><text x="88.4100%" y="575.50"></text></g><g><title>do_syscall_64 (5 samples, 0.10%)</title><rect x="88.1600%" y="549" width="0.1000%" height="15" fill="rgb(229,91,1)"/><text x="88.4100%" y="559.50"></text></g><g><title>__x64_sys_munmap (5 samples, 0.10%)</title><rect x="88.1600%" y="533" width="0.1000%" height="15" fill="rgb(207,101,30)"/><text x="88.4100%" y="543.50"></text></g><g><title>__vm_munmap (5 samples, 0.10%)</title><rect x="88.1600%" y="517" width="0.1000%" height="15" fill="rgb(223,82,49)"/><text x="88.4100%" y="527.50"></text></g><g><title>__do_munmap (5 samples, 0.10%)</title><rect x="88.1600%" y="501" width="0.1000%" height="15" fill="rgb(218,167,17)"/><text x="88.4100%" y="511.50"></text></g><g><title>unmap_region (5 samples, 0.10%)</title><rect x="88.1600%" y="485" width="0.1000%" height="15" fill="rgb(208,103,14)"/><text x="88.4100%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.34%)</title><rect x="88.2600%" y="565" width="0.3400%" height="15" fill="rgb(238,20,8)"/><text x="88.5100%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.34%)</title><rect x="88.2600%" y="549" width="0.3400%" height="15" fill="rgb(218,80,54)"/><text x="88.5100%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.34%)</title><rect x="88.2600%" y="533" width="0.3400%" height="15" fill="rgb(240,144,17)"/><text x="88.5100%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.36%)</title><rect x="88.2600%" y="597" width="0.3600%" height="15" fill="rgb(245,27,50)"/><text x="88.5100%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.36%)</title><rect x="88.2600%" y="581" width="0.3600%" height="15" fill="rgb(251,51,7)"/><text x="88.5100%" y="591.50"></text></g><g><title>ksys_write (10 samples, 0.20%)</title><rect x="88.6600%" y="485" width="0.2000%" height="15" fill="rgb(245,217,29)"/><text x="88.9100%" y="495.50"></text></g><g><title>vfs_write (10 samples, 0.20%)</title><rect x="88.6600%" y="469" width="0.2000%" height="15" fill="rgb(221,176,29)"/><text x="88.9100%" y="479.50"></text></g><g><title>new_sync_write (9 samples, 0.18%)</title><rect x="88.6800%" y="453" width="0.1800%" height="15" fill="rgb(212,180,24)"/><text x="88.9300%" y="463.50"></text></g><g><title>ext4_buffered_write_iter (9 samples, 0.18%)</title><rect x="88.6800%" y="437" width="0.1800%" height="15" fill="rgb(254,24,2)"/><text x="88.9300%" y="447.50"></text></g><g><title>generic_perform_write (8 samples, 0.16%)</title><rect x="88.7000%" y="421" width="0.1600%" height="15" fill="rgb(230,100,2)"/><text x="88.9500%" y="431.50"></text></g><g><title>ext4_da_write_end (5 samples, 0.10%)</title><rect x="88.7600%" y="405" width="0.1000%" height="15" fill="rgb(219,142,25)"/><text x="89.0100%" y="415.50"></text></g><g><title>generic_write_end (5 samples, 0.10%)</title><rect x="88.7600%" y="389" width="0.1000%" height="15" fill="rgb(240,73,43)"/><text x="89.0100%" y="399.50"></text></g><g><title>__mark_inode_dirty (5 samples, 0.10%)</title><rect x="88.7600%" y="373" width="0.1000%" height="15" fill="rgb(214,114,15)"/><text x="89.0100%" y="383.50"></text></g><g><title>ext4_dirty_inode (5 samples, 0.10%)</title><rect x="88.7600%" y="357" width="0.1000%" height="15" fill="rgb(207,130,4)"/><text x="89.0100%" y="367.50"></text></g><g><title>do_syscall_64 (12 samples, 0.24%)</title><rect x="88.6600%" y="501" width="0.2400%" height="15" fill="rgb(221,25,40)"/><text x="88.9100%" y="511.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (16 samples, 0.32%)</title><rect x="88.6200%" y="581" width="0.3200%" height="15" fill="rgb(241,184,7)"/><text x="88.8700%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::write (16 samples, 0.32%)</title><rect x="88.6200%" y="565" width="0.3200%" height="15" fill="rgb(235,159,4)"/><text x="88.8700%" y="575.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (16 samples, 0.32%)</title><rect x="88.6200%" y="549" width="0.3200%" height="15" fill="rgb(214,87,48)"/><text x="88.8700%" y="559.50"></text></g><g><title>__libc_write (16 samples, 0.32%)</title><rect x="88.6200%" y="533" width="0.3200%" height="15" fill="rgb(246,198,24)"/><text x="88.8700%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (14 samples, 0.28%)</title><rect x="88.6600%" y="517" width="0.2800%" height="15" fill="rgb(209,66,40)"/><text x="88.9100%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.82%)</title><rect x="88.1400%" y="629" width="0.8200%" height="15" fill="rgb(233,147,39)"/><text x="88.3900%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.82%)</title><rect x="88.1400%" y="613" width="0.8200%" height="15" fill="rgb(231,145,52)"/><text x="88.3900%" y="623.50"></text></g><g><title>decor_mem::stats::print_stats (17 samples, 0.34%)</title><rect x="88.6200%" y="597" width="0.3400%" height="15" fill="rgb(206,20,26)"/><text x="88.8700%" y="607.50"></text></g><g><title>dequeue_task_fair (6 samples, 0.12%)</title><rect x="89.7000%" y="341" width="0.1200%" height="15" fill="rgb(238,220,4)"/><text x="89.9500%" y="351.50"></text></g><g><title>sk_wait_data (25 samples, 0.50%)</title><rect x="89.4200%" y="421" width="0.5000%" height="15" fill="rgb(252,195,42)"/><text x="89.6700%" y="431.50"></text></g><g><title>wait_woken (19 samples, 0.38%)</title><rect x="89.5400%" y="405" width="0.3800%" height="15" fill="rgb(209,10,6)"/><text x="89.7900%" y="415.50"></text></g><g><title>schedule_timeout (18 samples, 0.36%)</title><rect x="89.5600%" y="389" width="0.3600%" height="15" fill="rgb(229,3,52)"/><text x="89.8100%" y="399.50"></text></g><g><title>schedule (18 samples, 0.36%)</title><rect x="89.5600%" y="373" width="0.3600%" height="15" fill="rgb(253,49,37)"/><text x="89.8100%" y="383.50"></text></g><g><title>__schedule (18 samples, 0.36%)</title><rect x="89.5600%" y="357" width="0.3600%" height="15" fill="rgb(240,103,49)"/><text x="89.8100%" y="367.50"></text></g><g><title>skb_copy_datagram_iter (7 samples, 0.14%)</title><rect x="89.9200%" y="421" width="0.1400%" height="15" fill="rgb(250,182,30)"/><text x="90.1700%" y="431.50"></text></g><g><title>__skb_datagram_iter (7 samples, 0.14%)</title><rect x="89.9200%" y="405" width="0.1400%" height="15" fill="rgb(248,8,30)"/><text x="90.1700%" y="415.50"></text></g><g><title>__x64_sys_recvfrom (46 samples, 0.92%)</title><rect x="89.1800%" y="485" width="0.9200%" height="15" fill="rgb(237,120,30)"/><text x="89.4300%" y="495.50"></text></g><g><title>__sys_recvfrom (46 samples, 0.92%)</title><rect x="89.1800%" y="469" width="0.9200%" height="15" fill="rgb(221,146,34)"/><text x="89.4300%" y="479.50"></text></g><g><title>inet_recvmsg (46 samples, 0.92%)</title><rect x="89.1800%" y="453" width="0.9200%" height="15" fill="rgb(242,55,13)"/><text x="89.4300%" y="463.50"></text></g><g><title>tcp_recvmsg (46 samples, 0.92%)</title><rect x="89.1800%" y="437" width="0.9200%" height="15" fill="rgb(242,112,31)"/><text x="89.4300%" y="447.50"></text></g><g><title>do_syscall_64 (48 samples, 0.96%)</title><rect x="89.1600%" y="501" width="0.9600%" height="15" fill="rgb(249,192,27)"/><text x="89.4100%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (53 samples, 1.06%)</title><rect x="89.1200%" y="613" width="1.0600%" height="15" fill="rgb(208,204,44)"/><text x="89.3700%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (53 samples, 1.06%)</title><rect x="89.1200%" y="597" width="1.0600%" height="15" fill="rgb(208,93,54)"/><text x="89.3700%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (53 samples, 1.06%)</title><rect x="89.1200%" y="581" width="1.0600%" height="15" fill="rgb(242,1,31)"/><text x="89.3700%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (53 samples, 1.06%)</title><rect x="89.1200%" y="565" width="1.0600%" height="15" fill="rgb(241,83,25)"/><text x="89.3700%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (53 samples, 1.06%)</title><rect x="89.1200%" y="549" width="1.0600%" height="15" fill="rgb(205,169,50)"/><text x="89.3700%" y="559.50"></text></g><g><title>__libc_recv (53 samples, 1.06%)</title><rect x="89.1200%" y="533" width="1.0600%" height="15" fill="rgb(239,186,37)"/><text x="89.3700%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (51 samples, 1.02%)</title><rect x="89.1600%" y="517" width="1.0200%" height="15" fill="rgb(205,221,10)"/><text x="89.4100%" y="527.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (55 samples, 1.10%)</title><rect x="89.1200%" y="629" width="1.1000%" height="15" fill="rgb(218,196,15)"/><text x="89.3700%" y="639.50"></text></g><g><title>dev_hard_start_xmit (5 samples, 0.10%)</title><rect x="90.9000%" y="341" width="0.1000%" height="15" fill="rgb(218,196,35)"/><text x="91.1500%" y="351.50"></text></g><g><title>loopback_xmit (5 samples, 0.10%)</title><rect x="90.9000%" y="325" width="0.1000%" height="15" fill="rgb(233,63,24)"/><text x="91.1500%" y="335.50"></text></g><g><title>__dev_queue_xmit (9 samples, 0.18%)</title><rect x="90.8400%" y="357" width="0.1800%" height="15" fill="rgb(225,8,4)"/><text x="91.0900%" y="367.50"></text></g><g><title>psi_task_change (12 samples, 0.24%)</title><rect x="91.7200%" y="53" width="0.2400%" height="15" fill="rgb(234,105,35)"/><text x="91.9700%" y="63.50"></text></g><g><title>psi_group_change (8 samples, 0.16%)</title><rect x="91.8000%" y="37" width="0.1600%" height="15" fill="rgb(236,21,32)"/><text x="92.0500%" y="47.50"></text></g><g><title>enqueue_task (14 samples, 0.28%)</title><rect x="91.7000%" y="69" width="0.2800%" height="15" fill="rgb(228,109,6)"/><text x="91.9500%" y="79.50"></text></g><g><title>enqueue_task_fair (9 samples, 0.18%)</title><rect x="91.9800%" y="69" width="0.1800%" height="15" fill="rgb(229,215,31)"/><text x="92.2300%" y="79.50"></text></g><g><title>enqueue_entity (8 samples, 0.16%)</title><rect x="92.0000%" y="53" width="0.1600%" height="15" fill="rgb(221,52,54)"/><text x="92.2500%" y="63.50"></text></g><g><title>__wake_up_common (29 samples, 0.58%)</title><rect x="91.6600%" y="101" width="0.5800%" height="15" fill="rgb(252,129,43)"/><text x="91.9100%" y="111.50"></text></g><g><title>try_to_wake_up (29 samples, 0.58%)</title><rect x="91.6600%" y="85" width="0.5800%" height="15" fill="rgb(248,183,27)"/><text x="91.9100%" y="95.50"></text></g><g><title>sock_def_readable (34 samples, 0.68%)</title><rect x="91.6000%" y="133" width="0.6800%" height="15" fill="rgb(250,0,22)"/><text x="91.8500%" y="143.50"></text></g><g><title>__wake_up_common_lock (31 samples, 0.62%)</title><rect x="91.6600%" y="117" width="0.6200%" height="15" fill="rgb(213,166,10)"/><text x="91.9100%" y="127.50"></text></g><g><title>tcp_ack (19 samples, 0.38%)</title><rect x="92.2800%" y="133" width="0.3800%" height="15" fill="rgb(207,163,36)"/><text x="92.5300%" y="143.50"></text></g><g><title>ip_local_deliver (74 samples, 1.48%)</title><rect x="91.2200%" y="229" width="1.4800%" height="15" fill="rgb(208,122,22)"/><text x="91.4700%" y="239.50"></text></g><g><title>ip_local_deliver_finish (70 samples, 1.40%)</title><rect x="91.3000%" y="213" width="1.4000%" height="15" fill="rgb(207,104,49)"/><text x="91.5500%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (68 samples, 1.36%)</title><rect x="91.3400%" y="197" width="1.3600%" height="15" fill="rgb(248,211,50)"/><text x="91.5900%" y="207.50"></text></g><g><title>tcp_v4_rcv (65 samples, 1.30%)</title><rect x="91.4000%" y="181" width="1.3000%" height="15" fill="rgb(217,13,45)"/><text x="91.6500%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (61 samples, 1.22%)</title><rect x="91.4800%" y="165" width="1.2200%" height="15" fill="rgb(211,216,49)"/><text x="91.7300%" y="175.50"></text></g><g><title>tcp_rcv_established (61 samples, 1.22%)</title><rect x="91.4800%" y="149" width="1.2200%" height="15" fill="rgb(221,58,53)"/><text x="91.7300%" y="159.50"></text></g><g><title>__netif_receive_skb_one_core (80 samples, 1.60%)</title><rect x="91.1200%" y="261" width="1.6000%" height="15" fill="rgb(220,112,41)"/><text x="91.3700%" y="271.50"></text></g><g><title>ip_rcv (77 samples, 1.54%)</title><rect x="91.1800%" y="245" width="1.5400%" height="15" fill="rgb(236,38,28)"/><text x="91.4300%" y="255.50"></text></g><g><title>ip_finish_output2 (96 samples, 1.92%)</title><rect x="90.8200%" y="373" width="1.9200%" height="15" fill="rgb(227,195,22)"/><text x="91.0700%" y="383.50">i..</text></g><g><title>__local_bh_enable_ip (86 samples, 1.72%)</title><rect x="91.0200%" y="357" width="1.7200%" height="15" fill="rgb(214,55,33)"/><text x="91.2700%" y="367.50"></text></g><g><title>do_softirq (86 samples, 1.72%)</title><rect x="91.0200%" y="341" width="1.7200%" height="15" fill="rgb(248,80,13)"/><text x="91.2700%" y="351.50"></text></g><g><title>do_softirq_own_stack (84 samples, 1.68%)</title><rect x="91.0600%" y="325" width="1.6800%" height="15" fill="rgb(238,52,6)"/><text x="91.3100%" y="335.50"></text></g><g><title>__do_softirq (84 samples, 1.68%)</title><rect x="91.0600%" y="309" width="1.6800%" height="15" fill="rgb(224,198,47)"/><text x="91.3100%" y="319.50"></text></g><g><title>net_rx_action (84 samples, 1.68%)</title><rect x="91.0600%" y="293" width="1.6800%" height="15" fill="rgb(233,171,20)"/><text x="91.3100%" y="303.50"></text></g><g><title>process_backlog (83 samples, 1.66%)</title><rect x="91.0800%" y="277" width="1.6600%" height="15" fill="rgb(241,30,25)"/><text x="91.3300%" y="287.50"></text></g><g><title>__ip_queue_xmit (101 samples, 2.02%)</title><rect x="90.7400%" y="405" width="2.0200%" height="15" fill="rgb(207,171,38)"/><text x="90.9900%" y="415.50">_..</text></g><g><title>ip_output (98 samples, 1.96%)</title><rect x="90.8000%" y="389" width="1.9600%" height="15" fill="rgb(234,70,1)"/><text x="91.0500%" y="399.50">i..</text></g><g><title>__tcp_transmit_skb (104 samples, 2.08%)</title><rect x="90.7000%" y="421" width="2.0800%" height="15" fill="rgb(232,178,18)"/><text x="90.9500%" y="431.50">_..</text></g><g><title>__tcp_push_pending_frames (111 samples, 2.22%)</title><rect x="90.6200%" y="453" width="2.2200%" height="15" fill="rgb(241,78,40)"/><text x="90.8700%" y="463.50">_..</text></g><g><title>tcp_write_xmit (109 samples, 2.18%)</title><rect x="90.6600%" y="437" width="2.1800%" height="15" fill="rgb(222,35,25)"/><text x="90.9100%" y="447.50">t..</text></g><g><title>sk_stream_alloc_skb (7 samples, 0.14%)</title><rect x="92.8600%" y="453" width="0.1400%" height="15" fill="rgb(207,92,16)"/><text x="93.1100%" y="463.50"></text></g><g><title>__alloc_skb (6 samples, 0.12%)</title><rect x="92.8800%" y="437" width="0.1200%" height="15" fill="rgb(216,59,51)"/><text x="93.1300%" y="447.50"></text></g><g><title>skb_do_copy_data_nocache (5 samples, 0.10%)</title><rect x="93.0000%" y="453" width="0.1000%" height="15" fill="rgb(213,80,28)"/><text x="93.2500%" y="463.50"></text></g><g><title>sock_sendmsg (134 samples, 2.68%)</title><rect x="90.4600%" y="501" width="2.6800%" height="15" fill="rgb(220,93,7)"/><text x="90.7100%" y="511.50">so..</text></g><g><title>tcp_sendmsg (131 samples, 2.62%)</title><rect x="90.5200%" y="485" width="2.6200%" height="15" fill="rgb(225,24,44)"/><text x="90.7700%" y="495.50">tc..</text></g><g><title>tcp_sendmsg_locked (127 samples, 2.54%)</title><rect x="90.6000%" y="469" width="2.5400%" height="15" fill="rgb(243,74,40)"/><text x="90.8500%" y="479.50">tc..</text></g><g><title>__x64_sys_sendto (144 samples, 2.88%)</title><rect x="90.3200%" y="533" width="2.8800%" height="15" fill="rgb(228,39,7)"/><text x="90.5700%" y="543.50">__..</text></g><g><title>__sys_sendto (143 samples, 2.86%)</title><rect x="90.3400%" y="517" width="2.8600%" height="15" fill="rgb(227,79,8)"/><text x="90.5900%" y="527.50">__..</text></g><g><title>do_syscall_64 (150 samples, 3.00%)</title><rect x="90.2600%" y="549" width="3.0000%" height="15" fill="rgb(236,58,11)"/><text x="90.5100%" y="559.50">do_..</text></g><g><title>entry_SYSCALL_64 (152 samples, 3.04%)</title><rect x="90.2600%" y="565" width="3.0400%" height="15" fill="rgb(249,63,35)"/><text x="90.5100%" y="575.50">ent..</text></g><g><title>__libc_send (156 samples, 3.12%)</title><rect x="90.2200%" y="581" width="3.1200%" height="15" fill="rgb(252,114,16)"/><text x="90.4700%" y="591.50">__l..</text></g><g><title>decor_mem::Shim::run_on_tcp (1,105 samples, 22.10%)</title><rect x="71.2600%" y="677" width="22.1000%" height="15" fill="rgb(254,151,24)"/><text x="71.5100%" y="687.50">decor_mem::Shim::run_on_tcp</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,104 samples, 22.08%)</title><rect x="71.2800%" y="661" width="22.0800%" height="15" fill="rgb(253,54,39)"/><text x="71.5300%" y="671.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;:..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (1,104 samples, 22.08%)</title><rect x="71.2800%" y="645" width="22.0800%" height="15" fill="rgb(243,25,45)"/><text x="71.5300%" y="655.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;:..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (157 samples, 3.14%)</title><rect x="90.2200%" y="629" width="3.1400%" height="15" fill="rgb(234,134,9)"/><text x="90.4700%" y="639.50">std..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (157 samples, 3.14%)</title><rect x="90.2200%" y="613" width="3.1400%" height="15" fill="rgb(227,166,31)"/><text x="90.4700%" y="623.50">&lt;st..</text></g><g><title>std::sys_common::net::TcpStream::write (157 samples, 3.14%)</title><rect x="90.2200%" y="597" width="3.1400%" height="15" fill="rgb(245,143,41)"/><text x="90.4700%" y="607.50">std..</text></g><g><title>__GI___clone (1,110 samples, 22.20%)</title><rect x="71.1800%" y="789" width="22.2000%" height="15" fill="rgb(238,181,32)"/><text x="71.4300%" y="799.50">__GI___clone</text></g><g><title>start_thread (1,110 samples, 22.20%)</title><rect x="71.1800%" y="773" width="22.2000%" height="15" fill="rgb(224,113,18)"/><text x="71.4300%" y="783.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,106 samples, 22.12%)</title><rect x="71.2600%" y="757" width="22.1200%" height="15" fill="rgb(240,229,28)"/><text x="71.5100%" y="767.50">std::sys::unix::thread::Thread::new..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,106 samples, 22.12%)</title><rect x="71.2600%" y="741" width="22.1200%" height="15" fill="rgb(250,185,3)"/><text x="71.5100%" y="751.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,106 samples, 22.12%)</title><rect x="71.2600%" y="725" width="22.1200%" height="15" fill="rgb(212,59,25)"/><text x="71.5100%" y="735.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,106 samples, 22.12%)</title><rect x="71.2600%" y="709" width="22.1200%" height="15" fill="rgb(221,87,20)"/><text x="71.5100%" y="719.50">core::ops::function::FnOnce::call_o..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,106 samples, 22.12%)</title><rect x="71.2600%" y="693" width="22.1200%" height="15" fill="rgb(213,74,28)"/><text x="71.5100%" y="703.50">std::sys_common::backtrace::__rust_..</text></g><g><title>do_syscall_64 (235 samples, 4.70%)</title><rect x="93.8800%" y="485" width="4.7000%" height="15" fill="rgb(224,132,34)"/><text x="94.1300%" y="495.50">do_sy..</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 4.70%)</title><rect x="93.8800%" y="469" width="4.7000%" height="15" fill="rgb(222,101,24)"/><text x="94.1300%" y="479.50">__x64..</text></g><g><title>sched_setaffinity (235 samples, 4.70%)</title><rect x="93.8800%" y="453" width="4.7000%" height="15" fill="rgb(254,142,4)"/><text x="94.1300%" y="463.50">sched..</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 4.70%)</title><rect x="93.8800%" y="437" width="4.7000%" height="15" fill="rgb(230,229,49)"/><text x="94.1300%" y="447.50">__set..</text></g><g><title>stop_one_cpu (234 samples, 4.68%)</title><rect x="93.9000%" y="421" width="4.6800%" height="15" fill="rgb(238,70,47)"/><text x="94.1500%" y="431.50">stop_..</text></g><g><title>cpu_stop_queue_work (234 samples, 4.68%)</title><rect x="93.9000%" y="405" width="4.6800%" height="15" fill="rgb(231,160,17)"/><text x="94.1500%" y="415.50">cpu_s..</text></g><g><title>preempt_schedule_thunk (234 samples, 4.68%)</title><rect x="93.9000%" y="389" width="4.6800%" height="15" fill="rgb(218,68,53)"/><text x="94.1500%" y="399.50">preem..</text></g><g><title>preempt_schedule_common (234 samples, 4.68%)</title><rect x="93.9000%" y="373" width="4.6800%" height="15" fill="rgb(236,111,10)"/><text x="94.1500%" y="383.50">preem..</text></g><g><title>__schedule (234 samples, 4.68%)</title><rect x="93.9000%" y="357" width="4.6800%" height="15" fill="rgb(224,34,41)"/><text x="94.1500%" y="367.50">__sch..</text></g><g><title>finish_task_switch (234 samples, 4.68%)</title><rect x="93.9000%" y="341" width="4.6800%" height="15" fill="rgb(241,118,19)"/><text x="94.1500%" y="351.50">finis..</text></g><g><title>__perf_event_task_sched_in (234 samples, 4.68%)</title><rect x="93.9000%" y="325" width="4.6800%" height="15" fill="rgb(238,129,25)"/><text x="94.1500%" y="335.50">__per..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (233 samples, 4.66%)</title><rect x="93.9200%" y="309" width="4.6600%" height="15" fill="rgb(238,22,31)"/><text x="94.1700%" y="319.50">__int..</text></g><g><title>native_write_msr (233 samples, 4.66%)</title><rect x="93.9200%" y="293" width="4.6600%" height="15" fill="rgb(222,174,48)"/><text x="94.1700%" y="303.50">nativ..</text></g><g><title>hwloc::Topology::new (240 samples, 4.80%)</title><rect x="93.8000%" y="613" width="4.8000%" height="15" fill="rgb(206,152,40)"/><text x="94.0500%" y="623.50">hwloc:..</text></g><g><title>hwloc_topology_load (240 samples, 4.80%)</title><rect x="93.8000%" y="597" width="4.8000%" height="15" fill="rgb(218,99,54)"/><text x="94.0500%" y="607.50">hwloc_..</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 4.80%)</title><rect x="93.8000%" y="581" width="4.8000%" height="15" fill="rgb(220,174,26)"/><text x="94.0500%" y="591.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 4.80%)</title><rect x="93.8000%" y="565" width="4.8000%" height="15" fill="rgb(245,116,9)"/><text x="94.0500%" y="575.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (240 samples, 4.80%)</title><rect x="93.8000%" y="549" width="4.8000%" height="15" fill="rgb(209,72,35)"/><text x="94.0500%" y="559.50">[libhw..</text></g><g><title>hwloc_linux_set_tid_cpubind (239 samples, 4.78%)</title><rect x="93.8200%" y="533" width="4.7800%" height="15" fill="rgb(226,126,21)"/><text x="94.0700%" y="543.50">hwloc_..</text></g><g><title>__GI___sched_setaffinity_new (239 samples, 4.78%)</title><rect x="93.8200%" y="517" width="4.7800%" height="15" fill="rgb(227,192,1)"/><text x="94.0700%" y="527.50">__GI__..</text></g><g><title>entry_SYSCALL_64 (237 samples, 4.74%)</title><rect x="93.8600%" y="501" width="4.7400%" height="15" fill="rgb(237,180,29)"/><text x="94.1100%" y="511.50">entry_..</text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (7 samples, 0.14%)</title><rect x="98.6200%" y="613" width="0.1400%" height="15" fill="rgb(230,197,35)"/><text x="98.8700%" y="623.50"></text></g><g><title>__libc_start_main (255 samples, 5.10%)</title><rect x="93.7000%" y="773" width="5.1000%" height="15" fill="rgb(246,193,31)"/><text x="93.9500%" y="783.50">__libc..</text></g><g><title>main (255 samples, 5.10%)</title><rect x="93.7000%" y="757" width="5.1000%" height="15" fill="rgb(241,36,4)"/><text x="93.9500%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (255 samples, 5.10%)</title><rect x="93.7000%" y="741" width="5.1000%" height="15" fill="rgb(241,130,17)"/><text x="93.9500%" y="751.50">std::r..</text></g><g><title>std::panic::catch_unwind (255 samples, 5.10%)</title><rect x="93.7000%" y="725" width="5.1000%" height="15" fill="rgb(206,137,32)"/><text x="93.9500%" y="735.50">std::p..</text></g><g><title>std::panicking::try (255 samples, 5.10%)</title><rect x="93.7000%" y="709" width="5.1000%" height="15" fill="rgb(237,228,51)"/><text x="93.9500%" y="719.50">std::p..</text></g><g><title>std::panicking::try::do_call (255 samples, 5.10%)</title><rect x="93.7000%" y="693" width="5.1000%" height="15" fill="rgb(243,6,42)"/><text x="93.9500%" y="703.50">std::p..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (255 samples, 5.10%)</title><rect x="93.7000%" y="677" width="5.1000%" height="15" fill="rgb(251,74,28)"/><text x="93.9500%" y="687.50">core::..</text></g><g><title>std::rt::lang_start::_{{closure}} (255 samples, 5.10%)</title><rect x="93.7000%" y="661" width="5.1000%" height="15" fill="rgb(218,20,49)"/><text x="93.9500%" y="671.50">std::r..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (255 samples, 5.10%)</title><rect x="93.7000%" y="645" width="5.1000%" height="15" fill="rgb(238,28,14)"/><text x="93.9500%" y="655.50">std::s..</text></g><g><title>lobsters_microbenchmarks::main (255 samples, 5.10%)</title><rect x="93.7000%" y="629" width="5.1000%" height="15" fill="rgb(229,40,46)"/><text x="93.9500%" y="639.50">lobste..</text></g><g><title>_start (256 samples, 5.12%)</title><rect x="93.7000%" y="789" width="5.1200%" height="15" fill="rgb(244,195,20)"/><text x="93.9500%" y="799.50">_start</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="98.8200%" y="789" width="0.1000%" height="15" fill="rgb(253,56,35)"/><text x="99.0700%" y="799.50"></text></g><g><title>anon.960a13ca7ab009bec3b8abcb1d4e7596.8.llvm.1955666761421357642 (8 samples, 0.16%)</title><rect x="98.9600%" y="789" width="0.1600%" height="15" fill="rgb(210,149,44)"/><text x="99.2100%" y="799.50"></text></g><g><title>_int_realloc (7 samples, 0.14%)</title><rect x="98.9800%" y="773" width="0.1400%" height="15" fill="rgb(240,135,12)"/><text x="99.2300%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (5 samples, 0.10%)</title><rect x="99.2600%" y="789" width="0.1000%" height="15" fill="rgb(251,24,50)"/><text x="99.5100%" y="799.50"></text></g><g><title>page_fault (21 samples, 0.42%)</title><rect x="99.4000%" y="789" width="0.4200%" height="15" fill="rgb(243,200,47)"/><text x="99.6500%" y="799.50"></text></g><g><title>lobsters-microb (4,994 samples, 99.88%)</title><rect x="0.0000%" y="805" width="99.8800%" height="15" fill="rgb(224,166,26)"/><text x="0.2500%" y="815.50">lobsters-microb</text></g><g><title>all (5,000 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(233,0,47)"/><text x="0.2500%" y="831.50"></text></g><g><title>perf (6 samples, 0.12%)</title><rect x="99.8800%" y="805" width="0.1200%" height="15" fill="rgb(253,80,5)"/><text x="100.1300%" y="815.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="99.8800%" y="789" width="0.1200%" height="15" fill="rgb(214,133,25)"/><text x="100.1300%" y="799.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="99.8800%" y="773" width="0.1200%" height="15" fill="rgb(209,27,14)"/><text x="100.1300%" y="783.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.12%)</title><rect x="99.8800%" y="757" width="0.1200%" height="15" fill="rgb(219,102,51)"/><text x="100.1300%" y="767.50"></text></g><g><title>do_execve (6 samples, 0.12%)</title><rect x="99.8800%" y="741" width="0.1200%" height="15" fill="rgb(237,18,16)"/><text x="100.1300%" y="751.50"></text></g><g><title>__do_execve_file (6 samples, 0.12%)</title><rect x="99.8800%" y="725" width="0.1200%" height="15" fill="rgb(241,85,17)"/><text x="100.1300%" y="735.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.12%)</title><rect x="99.8800%" y="709" width="0.1200%" height="15" fill="rgb(236,90,42)"/><text x="100.1300%" y="719.50"></text></g><g><title>load_elf_binary (6 samples, 0.12%)</title><rect x="99.8800%" y="693" width="0.1200%" height="15" fill="rgb(249,57,21)"/><text x="100.1300%" y="703.50"></text></g><g><title>setup_new_exec (6 samples, 0.12%)</title><rect x="99.8800%" y="677" width="0.1200%" height="15" fill="rgb(243,12,36)"/><text x="100.1300%" y="687.50"></text></g><g><title>perf_event_exec (6 samples, 0.12%)</title><rect x="99.8800%" y="661" width="0.1200%" height="15" fill="rgb(253,128,47)"/><text x="100.1300%" y="671.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (6 samples, 0.12%)</title><rect x="99.8800%" y="645" width="0.1200%" height="15" fill="rgb(207,33,20)"/><text x="100.1300%" y="655.50"></text></g><g><title>native_write_msr (6 samples, 0.12%)</title><rect x="99.8800%" y="629" width="0.1200%" height="15" fill="rgb(233,215,35)"/><text x="100.1300%" y="639.50"></text></g></svg></svg>