<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (11 samples, 0.22%)</title><rect x="0.1399%" y="789" width="0.2199%" height="15" fill="rgb(227,0,7)"/><text x="0.3899%" y="799.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (24 samples, 0.48%)</title><rect x="0.3599%" y="773" width="0.4798%" height="15" fill="rgb(217,0,24)"/><text x="0.6099%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.28%)</title><rect x="0.8597%" y="773" width="0.2799%" height="15" fill="rgb(221,193,54)"/><text x="1.1097%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="0.9996%" y="757" width="0.1399%" height="15" fill="rgb(248,212,6)"/><text x="1.2496%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="0.9996%" y="741" width="0.1399%" height="15" fill="rgb(208,68,35)"/><text x="1.2496%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.14%)</title><rect x="0.9996%" y="725" width="0.1399%" height="15" fill="rgb(232,128,0)"/><text x="1.2496%" y="735.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (7 samples, 0.14%)</title><rect x="1.2995%" y="773" width="0.1399%" height="15" fill="rgb(207,160,47)"/><text x="1.5495%" y="783.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="1.5994%" y="773" width="0.1200%" height="15" fill="rgb(228,23,34)"/><text x="1.8494%" y="783.50"></text></g><g><title>__GI___libc_free (7 samples, 0.14%)</title><rect x="1.9992%" y="773" width="0.1399%" height="15" fill="rgb(218,30,26)"/><text x="2.2492%" y="783.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.28%)</title><rect x="2.1391%" y="773" width="0.2799%" height="15" fill="rgb(220,122,19)"/><text x="2.3891%" y="783.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.44%)</title><rect x="2.4190%" y="773" width="0.4398%" height="15" fill="rgb(250,228,42)"/><text x="2.6690%" y="783.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.16%)</title><rect x="2.9588%" y="773" width="0.1599%" height="15" fill="rgb(240,193,28)"/><text x="3.2088%" y="783.50"></text></g><g><title>__rdl_realloc (6 samples, 0.12%)</title><rect x="3.2187%" y="773" width="0.1200%" height="15" fill="rgb(216,20,37)"/><text x="3.4687%" y="783.50"></text></g><g><title>_int_free (46 samples, 0.92%)</title><rect x="3.3387%" y="773" width="0.9196%" height="15" fill="rgb(206,188,39)"/><text x="3.5887%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.40%)</title><rect x="4.3183%" y="773" width="0.3998%" height="15" fill="rgb(217,207,13)"/><text x="4.5683%" y="783.50"></text></g><g><title>core::fmt::write (13 samples, 0.26%)</title><rect x="4.9980%" y="773" width="0.2599%" height="15" fill="rgb(231,73,38)"/><text x="5.2480%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.16%)</title><rect x="5.2579%" y="773" width="0.1599%" height="15" fill="rgb(225,20,46)"/><text x="5.5079%" y="783.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (6 samples, 0.12%)</title><rect x="5.7377%" y="773" width="0.1200%" height="15" fill="rgb(210,31,41)"/><text x="5.9877%" y="783.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (15 samples, 0.30%)</title><rect x="6.0776%" y="773" width="0.2999%" height="15" fill="rgb(221,200,47)"/><text x="6.3276%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (6 samples, 0.12%)</title><rect x="6.4374%" y="773" width="0.1200%" height="15" fill="rgb(226,26,5)"/><text x="6.6874%" y="783.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="6.6773%" y="773" width="0.1200%" height="15" fill="rgb(249,33,26)"/><text x="6.9273%" y="783.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (22 samples, 0.44%)</title><rect x="7.2171%" y="773" width="0.4398%" height="15" fill="rgb(235,183,28)"/><text x="7.4671%" y="783.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (6 samples, 0.12%)</title><rect x="7.7569%" y="773" width="0.1200%" height="15" fill="rgb(221,5,38)"/><text x="8.0069%" y="783.50"></text></g><g><title>[anon] (380 samples, 7.60%)</title><rect x="0.3599%" y="789" width="7.5970%" height="15" fill="rgb(247,18,42)"/><text x="0.6099%" y="799.50">[anon]</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.24%)</title><rect x="8.3167%" y="773" width="0.2399%" height="15" fill="rgb(241,131,45)"/><text x="8.5667%" y="783.50"></text></g><g><title>[lobsters-microbenchmarks] (34 samples, 0.68%)</title><rect x="8.0368%" y="789" width="0.6797%" height="15" fill="rgb(249,31,29)"/><text x="8.2868%" y="799.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.12%)</title><rect x="8.7965%" y="773" width="0.1200%" height="15" fill="rgb(225,111,53)"/><text x="9.0465%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="8.9164%" y="773" width="0.2199%" height="15" fill="rgb(238,160,17)"/><text x="9.1664%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.12%)</title><rect x="9.4562%" y="693" width="0.1200%" height="15" fill="rgb(214,148,48)"/><text x="9.7062%" y="703.50"></text></g><g><title>__ip_queue_xmit (12 samples, 0.24%)</title><rect x="9.6361%" y="421" width="0.2399%" height="15" fill="rgb(232,36,49)"/><text x="9.8861%" y="431.50"></text></g><g><title>ip_output (12 samples, 0.24%)</title><rect x="9.6361%" y="405" width="0.2399%" height="15" fill="rgb(209,103,24)"/><text x="9.8861%" y="415.50"></text></g><g><title>ip_finish_output2 (12 samples, 0.24%)</title><rect x="9.6361%" y="389" width="0.2399%" height="15" fill="rgb(229,88,8)"/><text x="9.8861%" y="399.50"></text></g><g><title>__local_bh_enable_ip (8 samples, 0.16%)</title><rect x="9.7161%" y="373" width="0.1599%" height="15" fill="rgb(213,181,19)"/><text x="9.9661%" y="383.50"></text></g><g><title>do_softirq (8 samples, 0.16%)</title><rect x="9.7161%" y="357" width="0.1599%" height="15" fill="rgb(254,191,54)"/><text x="9.9661%" y="367.50"></text></g><g><title>do_softirq_own_stack (8 samples, 0.16%)</title><rect x="9.7161%" y="341" width="0.1599%" height="15" fill="rgb(241,83,37)"/><text x="9.9661%" y="351.50"></text></g><g><title>__do_softirq (8 samples, 0.16%)</title><rect x="9.7161%" y="325" width="0.1599%" height="15" fill="rgb(233,36,39)"/><text x="9.9661%" y="335.50"></text></g><g><title>net_rx_action (8 samples, 0.16%)</title><rect x="9.7161%" y="309" width="0.1599%" height="15" fill="rgb(226,3,54)"/><text x="9.9661%" y="319.50"></text></g><g><title>process_backlog (8 samples, 0.16%)</title><rect x="9.7161%" y="293" width="0.1599%" height="15" fill="rgb(245,192,40)"/><text x="9.9661%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (8 samples, 0.16%)</title><rect x="9.7161%" y="277" width="0.1599%" height="15" fill="rgb(238,167,29)"/><text x="9.9661%" y="287.50"></text></g><g><title>ip_rcv (7 samples, 0.14%)</title><rect x="9.7361%" y="261" width="0.1399%" height="15" fill="rgb(232,182,51)"/><text x="9.9861%" y="271.50"></text></g><g><title>ip_local_deliver (7 samples, 0.14%)</title><rect x="9.7361%" y="245" width="0.1399%" height="15" fill="rgb(231,60,39)"/><text x="9.9861%" y="255.50"></text></g><g><title>ip_local_deliver_finish (7 samples, 0.14%)</title><rect x="9.7361%" y="229" width="0.1399%" height="15" fill="rgb(208,69,12)"/><text x="9.9861%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (7 samples, 0.14%)</title><rect x="9.7361%" y="213" width="0.1399%" height="15" fill="rgb(235,93,37)"/><text x="9.9861%" y="223.50"></text></g><g><title>tcp_v4_rcv (6 samples, 0.12%)</title><rect x="9.7561%" y="197" width="0.1200%" height="15" fill="rgb(213,116,39)"/><text x="10.0061%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (6 samples, 0.12%)</title><rect x="9.7561%" y="181" width="0.1200%" height="15" fill="rgb(222,207,29)"/><text x="10.0061%" y="191.50"></text></g><g><title>tcp_rcv_established (6 samples, 0.12%)</title><rect x="9.7561%" y="165" width="0.1200%" height="15" fill="rgb(206,96,30)"/><text x="10.0061%" y="175.50"></text></g><g><title>__tcp_transmit_skb (14 samples, 0.28%)</title><rect x="9.6361%" y="437" width="0.2799%" height="15" fill="rgb(218,138,4)"/><text x="9.8861%" y="447.50"></text></g><g><title>__tcp_push_pending_frames (16 samples, 0.32%)</title><rect x="9.6162%" y="469" width="0.3199%" height="15" fill="rgb(250,191,14)"/><text x="9.8662%" y="479.50"></text></g><g><title>tcp_write_xmit (16 samples, 0.32%)</title><rect x="9.6162%" y="453" width="0.3199%" height="15" fill="rgb(239,60,40)"/><text x="9.8662%" y="463.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (18 samples, 0.36%)</title><rect x="9.6162%" y="629" width="0.3599%" height="15" fill="rgb(206,27,48)"/><text x="9.8662%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (18 samples, 0.36%)</title><rect x="9.6162%" y="613" width="0.3599%" height="15" fill="rgb(225,35,8)"/><text x="9.8662%" y="623.50"></text></g><g><title>__libc_send (18 samples, 0.36%)</title><rect x="9.6162%" y="597" width="0.3599%" height="15" fill="rgb(250,213,24)"/><text x="9.8662%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (18 samples, 0.36%)</title><rect x="9.6162%" y="581" width="0.3599%" height="15" fill="rgb(247,123,22)"/><text x="9.8662%" y="591.50"></text></g><g><title>do_syscall_64 (18 samples, 0.36%)</title><rect x="9.6162%" y="565" width="0.3599%" height="15" fill="rgb(231,138,38)"/><text x="9.8662%" y="575.50"></text></g><g><title>__x64_sys_sendto (18 samples, 0.36%)</title><rect x="9.6162%" y="549" width="0.3599%" height="15" fill="rgb(231,145,46)"/><text x="9.8662%" y="559.50"></text></g><g><title>__sys_sendto (18 samples, 0.36%)</title><rect x="9.6162%" y="533" width="0.3599%" height="15" fill="rgb(251,118,11)"/><text x="9.8662%" y="543.50"></text></g><g><title>sock_sendmsg (18 samples, 0.36%)</title><rect x="9.6162%" y="517" width="0.3599%" height="15" fill="rgb(217,147,25)"/><text x="9.8662%" y="527.50"></text></g><g><title>tcp_sendmsg (18 samples, 0.36%)</title><rect x="9.6162%" y="501" width="0.3599%" height="15" fill="rgb(247,81,37)"/><text x="9.8662%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (18 samples, 0.36%)</title><rect x="9.6162%" y="485" width="0.3599%" height="15" fill="rgb(209,12,38)"/><text x="9.8662%" y="495.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (21 samples, 0.42%)</title><rect x="9.5762%" y="693" width="0.4198%" height="15" fill="rgb(227,1,9)"/><text x="9.8262%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (21 samples, 0.42%)</title><rect x="9.5762%" y="677" width="0.4198%" height="15" fill="rgb(248,47,43)"/><text x="9.8262%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (19 samples, 0.38%)</title><rect x="9.6162%" y="661" width="0.3798%" height="15" fill="rgb(221,10,30)"/><text x="9.8662%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (19 samples, 0.38%)</title><rect x="9.6162%" y="645" width="0.3798%" height="15" fill="rgb(210,229,1)"/><text x="9.8662%" y="655.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="10.1359%" y="693" width="0.1799%" height="15" fill="rgb(222,148,37)"/><text x="10.3859%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="10.1959%" y="677" width="0.1200%" height="15" fill="rgb(234,67,33)"/><text x="10.4459%" y="687.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (49 samples, 0.98%)</title><rect x="9.4162%" y="709" width="0.9796%" height="15" fill="rgb(247,98,35)"/><text x="9.6662%" y="719.50"></text></g><g><title>sk_wait_data (6 samples, 0.12%)</title><rect x="10.4958%" y="453" width="0.1200%" height="15" fill="rgb(247,138,52)"/><text x="10.7458%" y="463.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (11 samples, 0.22%)</title><rect x="10.4158%" y="645" width="0.2199%" height="15" fill="rgb(213,79,30)"/><text x="10.6658%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (11 samples, 0.22%)</title><rect x="10.4158%" y="629" width="0.2199%" height="15" fill="rgb(246,177,23)"/><text x="10.6658%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (11 samples, 0.22%)</title><rect x="10.4158%" y="613" width="0.2199%" height="15" fill="rgb(230,62,27)"/><text x="10.6658%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (11 samples, 0.22%)</title><rect x="10.4158%" y="597" width="0.2199%" height="15" fill="rgb(216,154,8)"/><text x="10.6658%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (11 samples, 0.22%)</title><rect x="10.4158%" y="581" width="0.2199%" height="15" fill="rgb(244,35,45)"/><text x="10.6658%" y="591.50"></text></g><g><title>__libc_recv (11 samples, 0.22%)</title><rect x="10.4158%" y="565" width="0.2199%" height="15" fill="rgb(251,115,12)"/><text x="10.6658%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (10 samples, 0.20%)</title><rect x="10.4358%" y="549" width="0.1999%" height="15" fill="rgb(240,54,50)"/><text x="10.6858%" y="559.50"></text></g><g><title>do_syscall_64 (10 samples, 0.20%)</title><rect x="10.4358%" y="533" width="0.1999%" height="15" fill="rgb(233,84,52)"/><text x="10.6858%" y="543.50"></text></g><g><title>__x64_sys_recvfrom (10 samples, 0.20%)</title><rect x="10.4358%" y="517" width="0.1999%" height="15" fill="rgb(207,117,47)"/><text x="10.6858%" y="527.50"></text></g><g><title>__sys_recvfrom (10 samples, 0.20%)</title><rect x="10.4358%" y="501" width="0.1999%" height="15" fill="rgb(249,43,39)"/><text x="10.6858%" y="511.50"></text></g><g><title>inet_recvmsg (9 samples, 0.18%)</title><rect x="10.4558%" y="485" width="0.1799%" height="15" fill="rgb(209,38,44)"/><text x="10.7058%" y="495.50"></text></g><g><title>tcp_recvmsg (9 samples, 0.18%)</title><rect x="10.4558%" y="469" width="0.1799%" height="15" fill="rgb(236,212,23)"/><text x="10.7058%" y="479.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.26%)</title><rect x="10.4158%" y="661" width="0.2599%" height="15" fill="rgb(242,79,21)"/><text x="10.6658%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (68 samples, 1.36%)</title><rect x="9.3363%" y="773" width="1.3595%" height="15" fill="rgb(211,96,35)"/><text x="9.5863%" y="783.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (68 samples, 1.36%)</title><rect x="9.3363%" y="757" width="1.3595%" height="15" fill="rgb(253,215,40)"/><text x="9.5863%" y="767.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (68 samples, 1.36%)</title><rect x="9.3363%" y="741" width="1.3595%" height="15" fill="rgb(211,81,21)"/><text x="9.5863%" y="751.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (64 samples, 1.28%)</title><rect x="9.4162%" y="725" width="1.2795%" height="15" fill="rgb(208,190,38)"/><text x="9.6662%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (15 samples, 0.30%)</title><rect x="10.3958%" y="709" width="0.2999%" height="15" fill="rgb(235,213,38)"/><text x="10.6458%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (15 samples, 0.30%)</title><rect x="10.3958%" y="693" width="0.2999%" height="15" fill="rgb(237,122,38)"/><text x="10.6458%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (14 samples, 0.28%)</title><rect x="10.4158%" y="677" width="0.2799%" height="15" fill="rgb(244,218,35)"/><text x="10.6658%" y="687.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.34%)</title><rect x="11.2555%" y="773" width="0.3399%" height="15" fill="rgb(240,68,47)"/><text x="11.5055%" y="783.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (14 samples, 0.28%)</title><rect x="11.7953%" y="613" width="0.2799%" height="15" fill="rgb(210,16,53)"/><text x="12.0453%" y="623.50"></text></g><g><title>alloc::fmt::format (14 samples, 0.28%)</title><rect x="11.7953%" y="597" width="0.2799%" height="15" fill="rgb(235,124,12)"/><text x="12.0453%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (12 samples, 0.24%)</title><rect x="11.8353%" y="581" width="0.2399%" height="15" fill="rgb(224,169,11)"/><text x="12.0853%" y="591.50"></text></g><g><title>core::fmt::write (12 samples, 0.24%)</title><rect x="11.8353%" y="565" width="0.2399%" height="15" fill="rgb(250,166,2)"/><text x="12.0853%" y="575.50"></text></g><g><title>__libc_start_main (19 samples, 0.38%)</title><rect x="11.7553%" y="773" width="0.3798%" height="15" fill="rgb(242,216,29)"/><text x="12.0053%" y="783.50"></text></g><g><title>main (19 samples, 0.38%)</title><rect x="11.7553%" y="757" width="0.3798%" height="15" fill="rgb(230,116,27)"/><text x="12.0053%" y="767.50"></text></g><g><title>std::rt::lang_start_internal (19 samples, 0.38%)</title><rect x="11.7553%" y="741" width="0.3798%" height="15" fill="rgb(228,99,48)"/><text x="12.0053%" y="751.50"></text></g><g><title>std::panic::catch_unwind (19 samples, 0.38%)</title><rect x="11.7553%" y="725" width="0.3798%" height="15" fill="rgb(253,11,6)"/><text x="12.0053%" y="735.50"></text></g><g><title>std::panicking::try (19 samples, 0.38%)</title><rect x="11.7553%" y="709" width="0.3798%" height="15" fill="rgb(247,143,39)"/><text x="12.0053%" y="719.50"></text></g><g><title>std::panicking::try::do_call (19 samples, 0.38%)</title><rect x="11.7553%" y="693" width="0.3798%" height="15" fill="rgb(236,97,10)"/><text x="12.0053%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (19 samples, 0.38%)</title><rect x="11.7553%" y="677" width="0.3798%" height="15" fill="rgb(233,208,19)"/><text x="12.0053%" y="687.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (19 samples, 0.38%)</title><rect x="11.7553%" y="661" width="0.3798%" height="15" fill="rgb(216,164,2)"/><text x="12.0053%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (19 samples, 0.38%)</title><rect x="11.7553%" y="645" width="0.3798%" height="15" fill="rgb(220,129,5)"/><text x="12.0053%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (19 samples, 0.38%)</title><rect x="11.7553%" y="629" width="0.3798%" height="15" fill="rgb(242,17,10)"/><text x="12.0053%" y="639.50"></text></g><g><title>_int_free (22 samples, 0.44%)</title><rect x="12.3151%" y="773" width="0.4398%" height="15" fill="rgb(242,107,0)"/><text x="12.5651%" y="783.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="12.7549%" y="773" width="0.1599%" height="15" fill="rgb(251,28,31)"/><text x="13.0049%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.22%)</title><rect x="13.0148%" y="773" width="0.2199%" height="15" fill="rgb(233,223,10)"/><text x="13.2648%" y="783.50"></text></g><g><title>core::fmt::Formatter::pad (6 samples, 0.12%)</title><rect x="13.3347%" y="773" width="0.1200%" height="15" fill="rgb(215,21,27)"/><text x="13.5847%" y="783.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="13.5146%" y="773" width="0.1799%" height="15" fill="rgb(232,23,21)"/><text x="13.7646%" y="783.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (11 samples, 0.22%)</title><rect x="13.6945%" y="661" width="0.2199%" height="15" fill="rgb(244,5,23)"/><text x="13.9445%" y="671.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="13.6945%" y="645" width="0.2199%" height="15" fill="rgb(226,81,46)"/><text x="13.9445%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.22%)</title><rect x="13.6945%" y="629" width="0.2199%" height="15" fill="rgb(247,70,30)"/><text x="13.9445%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (9 samples, 0.18%)</title><rect x="13.7345%" y="613" width="0.1799%" height="15" fill="rgb(212,68,19)"/><text x="13.9845%" y="623.50"></text></g><g><title>decor_mem::views::View::insert_into_index (11 samples, 0.22%)</title><rect x="13.9144%" y="645" width="0.2199%" height="15" fill="rgb(240,187,13)"/><text x="14.1644%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (24 samples, 0.48%)</title><rect x="13.6945%" y="773" width="0.4798%" height="15" fill="rgb(223,113,26)"/><text x="13.9445%" y="783.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 0.48%)</title><rect x="13.6945%" y="757" width="0.4798%" height="15" fill="rgb(206,192,2)"/><text x="13.9445%" y="767.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (24 samples, 0.48%)</title><rect x="13.6945%" y="741" width="0.4798%" height="15" fill="rgb(241,108,4)"/><text x="13.9445%" y="751.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (24 samples, 0.48%)</title><rect x="13.6945%" y="725" width="0.4798%" height="15" fill="rgb(247,173,49)"/><text x="13.9445%" y="735.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (24 samples, 0.48%)</title><rect x="13.6945%" y="709" width="0.4798%" height="15" fill="rgb(224,114,35)"/><text x="13.9445%" y="719.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (24 samples, 0.48%)</title><rect x="13.6945%" y="693" width="0.4798%" height="15" fill="rgb(245,159,27)"/><text x="13.9445%" y="703.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (24 samples, 0.48%)</title><rect x="13.6945%" y="677" width="0.4798%" height="15" fill="rgb(245,172,44)"/><text x="13.9445%" y="687.50"></text></g><g><title>decor_mem::views::Views::insert (13 samples, 0.26%)</title><rect x="13.9144%" y="661" width="0.2599%" height="15" fill="rgb(236,23,11)"/><text x="14.1644%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.12%)</title><rect x="14.3543%" y="677" width="0.1200%" height="15" fill="rgb(205,117,38)"/><text x="14.6043%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="14.3543%" y="661" width="0.1200%" height="15" fill="rgb(237,72,25)"/><text x="14.6043%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="14.3543%" y="645" width="0.1200%" height="15" fill="rgb(244,70,9)"/><text x="14.6043%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="14.3543%" y="629" width="0.1200%" height="15" fill="rgb(217,125,39)"/><text x="14.6043%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="14.3543%" y="613" width="0.1200%" height="15" fill="rgb(235,36,10)"/><text x="14.6043%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="14.3543%" y="597" width="0.1200%" height="15" fill="rgb(251,123,47)"/><text x="14.6043%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="14.3543%" y="581" width="0.1200%" height="15" fill="rgb(221,13,13)"/><text x="14.6043%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="14.3543%" y="565" width="0.1200%" height="15" fill="rgb(238,131,9)"/><text x="14.6043%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="14.3543%" y="549" width="0.1200%" height="15" fill="rgb(211,50,8)"/><text x="14.6043%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.12%)</title><rect x="14.3543%" y="533" width="0.1200%" height="15" fill="rgb(245,182,24)"/><text x="14.6043%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.12%)</title><rect x="14.3543%" y="517" width="0.1200%" height="15" fill="rgb(242,14,37)"/><text x="14.6043%" y="527.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.12%)</title><rect x="14.3543%" y="501" width="0.1200%" height="15" fill="rgb(246,228,12)"/><text x="14.6043%" y="511.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="14.3543%" y="485" width="0.1200%" height="15" fill="rgb(213,55,15)"/><text x="14.6043%" y="495.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="14.3543%" y="469" width="0.1200%" height="15" fill="rgb(209,9,3)"/><text x="14.6043%" y="479.50"></text></g><g><title>__dev_queue_xmit (6 samples, 0.12%)</title><rect x="14.9340%" y="357" width="0.1200%" height="15" fill="rgb(230,59,30)"/><text x="15.1840%" y="367.50"></text></g><g><title>__wake_up_common (12 samples, 0.24%)</title><rect x="15.2139%" y="101" width="0.2399%" height="15" fill="rgb(209,121,21)"/><text x="15.4639%" y="111.50"></text></g><g><title>pollwake (12 samples, 0.24%)</title><rect x="15.2139%" y="85" width="0.2399%" height="15" fill="rgb(220,109,13)"/><text x="15.4639%" y="95.50"></text></g><g><title>try_to_wake_up (12 samples, 0.24%)</title><rect x="15.2139%" y="69" width="0.2399%" height="15" fill="rgb(232,18,1)"/><text x="15.4639%" y="79.50"></text></g><g><title>sock_def_readable (13 samples, 0.26%)</title><rect x="15.2139%" y="133" width="0.2599%" height="15" fill="rgb(215,41,42)"/><text x="15.4639%" y="143.50"></text></g><g><title>__wake_up_common_lock (13 samples, 0.26%)</title><rect x="15.2139%" y="117" width="0.2599%" height="15" fill="rgb(224,123,36)"/><text x="15.4639%" y="127.50"></text></g><g><title>ip_local_deliver (30 samples, 0.60%)</title><rect x="15.0940%" y="229" width="0.5998%" height="15" fill="rgb(240,125,3)"/><text x="15.3440%" y="239.50"></text></g><g><title>ip_local_deliver_finish (30 samples, 0.60%)</title><rect x="15.0940%" y="213" width="0.5998%" height="15" fill="rgb(205,98,50)"/><text x="15.3440%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (30 samples, 0.60%)</title><rect x="15.0940%" y="197" width="0.5998%" height="15" fill="rgb(205,185,37)"/><text x="15.3440%" y="207.50"></text></g><g><title>tcp_v4_rcv (30 samples, 0.60%)</title><rect x="15.0940%" y="181" width="0.5998%" height="15" fill="rgb(238,207,15)"/><text x="15.3440%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (26 samples, 0.52%)</title><rect x="15.1739%" y="165" width="0.5198%" height="15" fill="rgb(213,199,42)"/><text x="15.4239%" y="175.50"></text></g><g><title>tcp_rcv_established (26 samples, 0.52%)</title><rect x="15.1739%" y="149" width="0.5198%" height="15" fill="rgb(235,201,11)"/><text x="15.4239%" y="159.50"></text></g><g><title>tcp_ack (11 samples, 0.22%)</title><rect x="15.4738%" y="133" width="0.2199%" height="15" fill="rgb(207,46,11)"/><text x="15.7238%" y="143.50"></text></g><g><title>ip_finish_output2 (44 samples, 0.88%)</title><rect x="14.8541%" y="373" width="0.8796%" height="15" fill="rgb(241,35,35)"/><text x="15.1041%" y="383.50"></text></g><g><title>__local_bh_enable_ip (34 samples, 0.68%)</title><rect x="15.0540%" y="357" width="0.6797%" height="15" fill="rgb(243,32,47)"/><text x="15.3040%" y="367.50"></text></g><g><title>do_softirq (34 samples, 0.68%)</title><rect x="15.0540%" y="341" width="0.6797%" height="15" fill="rgb(247,202,23)"/><text x="15.3040%" y="351.50"></text></g><g><title>do_softirq_own_stack (34 samples, 0.68%)</title><rect x="15.0540%" y="325" width="0.6797%" height="15" fill="rgb(219,102,11)"/><text x="15.3040%" y="335.50"></text></g><g><title>__do_softirq (34 samples, 0.68%)</title><rect x="15.0540%" y="309" width="0.6797%" height="15" fill="rgb(243,110,44)"/><text x="15.3040%" y="319.50"></text></g><g><title>net_rx_action (34 samples, 0.68%)</title><rect x="15.0540%" y="293" width="0.6797%" height="15" fill="rgb(222,74,54)"/><text x="15.3040%" y="303.50"></text></g><g><title>process_backlog (33 samples, 0.66%)</title><rect x="15.0740%" y="277" width="0.6597%" height="15" fill="rgb(216,99,12)"/><text x="15.3240%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (33 samples, 0.66%)</title><rect x="15.0740%" y="261" width="0.6597%" height="15" fill="rgb(226,22,26)"/><text x="15.3240%" y="271.50"></text></g><g><title>ip_rcv (32 samples, 0.64%)</title><rect x="15.0940%" y="245" width="0.6397%" height="15" fill="rgb(217,163,10)"/><text x="15.3440%" y="255.50"></text></g><g><title>__tcp_transmit_skb (49 samples, 0.98%)</title><rect x="14.7741%" y="421" width="0.9796%" height="15" fill="rgb(213,25,53)"/><text x="15.0241%" y="431.50"></text></g><g><title>__ip_queue_xmit (48 samples, 0.96%)</title><rect x="14.7941%" y="405" width="0.9596%" height="15" fill="rgb(252,105,26)"/><text x="15.0441%" y="415.50"></text></g><g><title>ip_output (46 samples, 0.92%)</title><rect x="14.8341%" y="389" width="0.9196%" height="15" fill="rgb(220,39,43)"/><text x="15.0841%" y="399.50"></text></g><g><title>__tcp_push_pending_frames (52 samples, 1.04%)</title><rect x="14.7541%" y="453" width="1.0396%" height="15" fill="rgb(229,68,48)"/><text x="15.0041%" y="463.50"></text></g><g><title>tcp_write_xmit (52 samples, 1.04%)</title><rect x="14.7541%" y="437" width="1.0396%" height="15" fill="rgb(252,8,32)"/><text x="15.0041%" y="447.50"></text></g><g><title>__x64_sys_sendto (59 samples, 1.18%)</title><rect x="14.6741%" y="533" width="1.1795%" height="15" fill="rgb(223,20,43)"/><text x="14.9241%" y="543.50"></text></g><g><title>__sys_sendto (59 samples, 1.18%)</title><rect x="14.6741%" y="517" width="1.1795%" height="15" fill="rgb(229,81,49)"/><text x="14.9241%" y="527.50"></text></g><g><title>sock_sendmsg (59 samples, 1.18%)</title><rect x="14.6741%" y="501" width="1.1795%" height="15" fill="rgb(236,28,36)"/><text x="14.9241%" y="511.50"></text></g><g><title>tcp_sendmsg (58 samples, 1.16%)</title><rect x="14.6941%" y="485" width="1.1595%" height="15" fill="rgb(249,185,26)"/><text x="14.9441%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (56 samples, 1.12%)</title><rect x="14.7341%" y="469" width="1.1196%" height="15" fill="rgb(249,174,33)"/><text x="14.9841%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (60 samples, 1.20%)</title><rect x="14.6741%" y="565" width="1.1995%" height="15" fill="rgb(233,201,37)"/><text x="14.9241%" y="575.50"></text></g><g><title>do_syscall_64 (60 samples, 1.20%)</title><rect x="14.6741%" y="549" width="1.1995%" height="15" fill="rgb(221,78,26)"/><text x="14.9241%" y="559.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (71 samples, 1.42%)</title><rect x="14.4742%" y="677" width="1.4194%" height="15" fill="rgb(250,127,30)"/><text x="14.7242%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (71 samples, 1.42%)</title><rect x="14.4742%" y="661" width="1.4194%" height="15" fill="rgb(230,49,44)"/><text x="14.7242%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (64 samples, 1.28%)</title><rect x="14.6142%" y="645" width="1.2795%" height="15" fill="rgb(229,67,23)"/><text x="14.8642%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (62 samples, 1.24%)</title><rect x="14.6541%" y="629" width="1.2395%" height="15" fill="rgb(249,83,47)"/><text x="14.9041%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (61 samples, 1.22%)</title><rect x="14.6741%" y="613" width="1.2195%" height="15" fill="rgb(215,43,3)"/><text x="14.9241%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (61 samples, 1.22%)</title><rect x="14.6741%" y="597" width="1.2195%" height="15" fill="rgb(238,154,13)"/><text x="14.9241%" y="607.50"></text></g><g><title>__libc_send (61 samples, 1.22%)</title><rect x="14.6741%" y="581" width="1.2195%" height="15" fill="rgb(219,56,2)"/><text x="14.9241%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (8 samples, 0.16%)</title><rect x="15.9136%" y="613" width="0.1599%" height="15" fill="rgb(233,0,4)"/><text x="16.1636%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 0.28%)</title><rect x="15.8936%" y="645" width="0.2799%" height="15" fill="rgb(235,30,7)"/><text x="16.1436%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 0.28%)</title><rect x="15.8936%" y="629" width="0.2799%" height="15" fill="rgb(250,79,13)"/><text x="16.1436%" y="639.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (10 samples, 0.20%)</title><rect x="16.2135%" y="597" width="0.1999%" height="15" fill="rgb(211,146,34)"/><text x="16.4635%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.12%)</title><rect x="16.2935%" y="581" width="0.1200%" height="15" fill="rgb(228,22,38)"/><text x="16.5435%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 0.28%)</title><rect x="16.1735%" y="629" width="0.2799%" height="15" fill="rgb(235,168,5)"/><text x="16.4235%" y="639.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (14 samples, 0.28%)</title><rect x="16.1735%" y="613" width="0.2799%" height="15" fill="rgb(221,155,16)"/><text x="16.4235%" y="623.50"></text></g><g><title>core::fmt::write (34 samples, 0.68%)</title><rect x="15.8936%" y="677" width="0.6797%" height="15" fill="rgb(215,215,53)"/><text x="16.1436%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (34 samples, 0.68%)</title><rect x="15.8936%" y="661" width="0.6797%" height="15" fill="rgb(223,4,10)"/><text x="16.1436%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::InsertStatement as sql_parser::ast::display::AstDisplay&gt;::fmt (20 samples, 0.40%)</title><rect x="16.1735%" y="645" width="0.3998%" height="15" fill="rgb(234,103,6)"/><text x="16.4235%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (6 samples, 0.12%)</title><rect x="16.4534%" y="629" width="0.1200%" height="15" fill="rgb(227,97,0)"/><text x="16.7034%" y="639.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="16.7133%" y="645" width="0.1200%" height="15" fill="rgb(234,150,53)"/><text x="16.9633%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="16.7133%" y="629" width="0.1200%" height="15" fill="rgb(228,201,54)"/><text x="16.9633%" y="639.50"></text></g><g><title>decor_mem::views::View::insert_into_index (14 samples, 0.28%)</title><rect x="16.6533%" y="661" width="0.2799%" height="15" fill="rgb(222,22,37)"/><text x="16.9033%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (132 samples, 2.64%)</title><rect x="14.3343%" y="693" width="2.6389%" height="15" fill="rgb(237,53,32)"/><text x="14.5843%" y="703.50">de..</text></g><g><title>decor_mem::views::Views::insert (20 samples, 0.40%)</title><rect x="16.5734%" y="677" width="0.3998%" height="15" fill="rgb(233,25,53)"/><text x="16.8234%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (45 samples, 0.90%)</title><rect x="17.1132%" y="661" width="0.8996%" height="15" fill="rgb(210,40,34)"/><text x="17.3632%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.64%)</title><rect x="17.3731%" y="645" width="0.6397%" height="15" fill="rgb(241,220,44)"/><text x="17.6231%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.64%)</title><rect x="17.3731%" y="629" width="0.6397%" height="15" fill="rgb(235,28,35)"/><text x="17.6231%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (31 samples, 0.62%)</title><rect x="17.3930%" y="613" width="0.6198%" height="15" fill="rgb(210,56,17)"/><text x="17.6430%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 0.62%)</title><rect x="17.3930%" y="597" width="0.6198%" height="15" fill="rgb(224,130,29)"/><text x="17.6430%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (28 samples, 0.56%)</title><rect x="17.4530%" y="581" width="0.5598%" height="15" fill="rgb(235,212,8)"/><text x="17.7030%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (28 samples, 0.56%)</title><rect x="17.4530%" y="565" width="0.5598%" height="15" fill="rgb(223,33,50)"/><text x="17.7030%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.56%)</title><rect x="17.4530%" y="549" width="0.5598%" height="15" fill="rgb(219,149,13)"/><text x="17.7030%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 0.56%)</title><rect x="17.4530%" y="533" width="0.5598%" height="15" fill="rgb(250,156,29)"/><text x="17.7030%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (28 samples, 0.56%)</title><rect x="17.4530%" y="517" width="0.5598%" height="15" fill="rgb(216,193,19)"/><text x="17.7030%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.56%)</title><rect x="17.4530%" y="501" width="0.5598%" height="15" fill="rgb(216,135,14)"/><text x="17.7030%" y="511.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.56%)</title><rect x="17.4530%" y="485" width="0.5598%" height="15" fill="rgb(241,47,5)"/><text x="17.7030%" y="495.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.56%)</title><rect x="17.4530%" y="469" width="0.5598%" height="15" fill="rgb(233,42,35)"/><text x="17.7030%" y="479.50"></text></g><g><title>_int_malloc (19 samples, 0.38%)</title><rect x="17.6329%" y="453" width="0.3798%" height="15" fill="rgb(231,13,6)"/><text x="17.8829%" y="463.50"></text></g><g><title>malloc_consolidate (18 samples, 0.36%)</title><rect x="18.5126%" y="629" width="0.3599%" height="15" fill="rgb(207,181,40)"/><text x="18.7626%" y="639.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.88%)</title><rect x="18.0128%" y="661" width="0.8796%" height="15" fill="rgb(254,173,49)"/><text x="18.2628%" y="671.50"></text></g><g><title>_int_malloc (42 samples, 0.84%)</title><rect x="18.0528%" y="645" width="0.8397%" height="15" fill="rgb(221,1,38)"/><text x="18.3028%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (108 samples, 2.16%)</title><rect x="17.0532%" y="677" width="2.1591%" height="15" fill="rgb(206,124,46)"/><text x="17.3032%" y="687.50">&lt;..</text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.32%)</title><rect x="18.8924%" y="661" width="0.3199%" height="15" fill="rgb(249,21,11)"/><text x="19.1424%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (90 samples, 1.80%)</title><rect x="19.2323%" y="677" width="1.7993%" height="15" fill="rgb(222,201,40)"/><text x="19.4823%" y="687.50">a..</text></g><g><title>__GI___libc_malloc (90 samples, 1.80%)</title><rect x="19.2323%" y="661" width="1.7993%" height="15" fill="rgb(235,61,29)"/><text x="19.4823%" y="671.50">_..</text></g><g><title>_int_malloc (90 samples, 1.80%)</title><rect x="19.2323%" y="645" width="1.7993%" height="15" fill="rgb(219,207,3)"/><text x="19.4823%" y="655.50">_..</text></g><g><title>malloc_consolidate (61 samples, 1.22%)</title><rect x="19.8121%" y="629" width="1.2195%" height="15" fill="rgb(222,56,46)"/><text x="20.0621%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.16%)</title><rect x="21.0716%" y="645" width="0.1599%" height="15" fill="rgb(239,76,54)"/><text x="21.3216%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="21.1116%" y="629" width="0.1200%" height="15" fill="rgb(231,124,27)"/><text x="21.3616%" y="639.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.22%)</title><rect x="21.4314%" y="629" width="0.2199%" height="15" fill="rgb(249,195,6)"/><text x="21.6814%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.16%)</title><rect x="21.7513%" y="629" width="0.1599%" height="15" fill="rgb(237,174,47)"/><text x="22.0013%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.16%)</title><rect x="21.9512%" y="613" width="0.1599%" height="15" fill="rgb(206,201,31)"/><text x="22.2012%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="21.9912%" y="597" width="0.1200%" height="15" fill="rgb(231,57,52)"/><text x="22.2412%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (58 samples, 1.16%)</title><rect x="21.0316%" y="661" width="1.1595%" height="15" fill="rgb(248,177,22)"/><text x="21.2816%" y="671.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (41 samples, 0.82%)</title><rect x="21.3715%" y="645" width="0.8197%" height="15" fill="rgb(215,211,37)"/><text x="21.6215%" y="655.50"></text></g><g><title>core::fmt::write (14 samples, 0.28%)</title><rect x="21.9112%" y="629" width="0.2799%" height="15" fill="rgb(241,128,51)"/><text x="22.1612%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.18%)</title><rect x="22.1911%" y="629" width="0.1799%" height="15" fill="rgb(227,165,31)"/><text x="22.4411%" y="639.50"></text></g><g><title>core::fmt::write (74 samples, 1.48%)</title><rect x="21.0316%" y="677" width="1.4794%" height="15" fill="rgb(228,167,24)"/><text x="21.2816%" y="687.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (16 samples, 0.32%)</title><rect x="22.1911%" y="661" width="0.3199%" height="15" fill="rgb(228,143,12)"/><text x="22.4411%" y="671.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (16 samples, 0.32%)</title><rect x="22.1911%" y="645" width="0.3199%" height="15" fill="rgb(249,149,8)"/><text x="22.4411%" y="655.50"></text></g><g><title>core::fmt::Formatter::pad_integral (7 samples, 0.14%)</title><rect x="22.3711%" y="629" width="0.1399%" height="15" fill="rgb(243,35,44)"/><text x="22.6211%" y="639.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="22.5110%" y="645" width="0.1599%" height="15" fill="rgb(246,89,9)"/><text x="22.7610%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (15 samples, 0.30%)</title><rect x="22.5110%" y="677" width="0.2999%" height="15" fill="rgb(233,213,13)"/><text x="22.7610%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (15 samples, 0.30%)</title><rect x="22.5110%" y="661" width="0.2999%" height="15" fill="rgb(233,141,41)"/><text x="22.7610%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="22.6709%" y="645" width="0.1399%" height="15" fill="rgb(239,167,4)"/><text x="22.9209%" y="655.50"></text></g><g><title>alloc::fmt::format (11 samples, 0.22%)</title><rect x="23.0308%" y="661" width="0.2199%" height="15" fill="rgb(209,217,16)"/><text x="23.2808%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (10 samples, 0.20%)</title><rect x="23.0508%" y="645" width="0.1999%" height="15" fill="rgb(219,88,35)"/><text x="23.3008%" y="655.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="23.0708%" y="629" width="0.1799%" height="15" fill="rgb(220,193,23)"/><text x="23.3208%" y="639.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (40 samples, 0.80%)</title><rect x="22.8109%" y="677" width="0.7997%" height="15" fill="rgb(230,90,52)"/><text x="23.0609%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.16%)</title><rect x="23.4506%" y="661" width="0.1599%" height="15" fill="rgb(252,106,19)"/><text x="23.7006%" y="671.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="23.7505%" y="629" width="0.1799%" height="15" fill="rgb(206,74,20)"/><text x="24.0005%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.40%)</title><rect x="23.6106%" y="661" width="0.3998%" height="15" fill="rgb(230,138,44)"/><text x="23.8606%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.36%)</title><rect x="23.6505%" y="645" width="0.3599%" height="15" fill="rgb(235,182,43)"/><text x="23.9005%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (7 samples, 0.14%)</title><rect x="24.1104%" y="629" width="0.1399%" height="15" fill="rgb(242,16,51)"/><text x="24.3604%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.22%)</title><rect x="24.2903%" y="613" width="0.2199%" height="15" fill="rgb(248,9,4)"/><text x="24.5403%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="24.3503%" y="597" width="0.1599%" height="15" fill="rgb(210,31,22)"/><text x="24.6003%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="24.3503%" y="581" width="0.1599%" height="15" fill="rgb(239,54,39)"/><text x="24.6003%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="24.3703%" y="565" width="0.1399%" height="15" fill="rgb(230,99,41)"/><text x="24.6203%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.14%)</title><rect x="24.3703%" y="549" width="0.1399%" height="15" fill="rgb(253,106,12)"/><text x="24.6203%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="24.3902%" y="533" width="0.1200%" height="15" fill="rgb(213,46,41)"/><text x="24.6402%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="24.3902%" y="517" width="0.1200%" height="15" fill="rgb(215,133,35)"/><text x="24.6402%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="24.3902%" y="501" width="0.1200%" height="15" fill="rgb(213,28,5)"/><text x="24.6402%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="24.3902%" y="485" width="0.1200%" height="15" fill="rgb(215,77,49)"/><text x="24.6402%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.12%)</title><rect x="24.3902%" y="469" width="0.1200%" height="15" fill="rgb(248,100,22)"/><text x="24.6402%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.12%)</title><rect x="24.3902%" y="453" width="0.1200%" height="15" fill="rgb(208,67,9)"/><text x="24.6402%" y="463.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.12%)</title><rect x="24.3902%" y="437" width="0.1200%" height="15" fill="rgb(219,133,21)"/><text x="24.6402%" y="447.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (24 samples, 0.48%)</title><rect x="24.2503%" y="629" width="0.4798%" height="15" fill="rgb(246,46,29)"/><text x="24.5003%" y="639.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (37 samples, 0.74%)</title><rect x="24.0704%" y="645" width="0.7397%" height="15" fill="rgb(246,185,52)"/><text x="24.3204%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (8 samples, 0.16%)</title><rect x="24.8101%" y="645" width="0.1599%" height="15" fill="rgb(252,136,11)"/><text x="25.0601%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (49 samples, 0.98%)</title><rect x="24.0304%" y="661" width="0.9796%" height="15" fill="rgb(219,138,53)"/><text x="24.2804%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.24%)</title><rect x="25.1699%" y="629" width="0.2399%" height="15" fill="rgb(211,51,23)"/><text x="25.4199%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.16%)</title><rect x="25.2499%" y="613" width="0.1599%" height="15" fill="rgb(247,221,28)"/><text x="25.4999%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (16 samples, 0.32%)</title><rect x="25.1299%" y="645" width="0.3199%" height="15" fill="rgb(251,222,45)"/><text x="25.3799%" y="655.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="25.6497%" y="629" width="0.1599%" height="15" fill="rgb(217,162,53)"/><text x="25.8997%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.24%)</title><rect x="25.6098%" y="645" width="0.2399%" height="15" fill="rgb(229,93,14)"/><text x="25.8598%" y="655.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.40%)</title><rect x="26.2095%" y="421" width="0.3998%" height="15" fill="rgb(209,67,49)"/><text x="26.4595%" y="431.50"></text></g><g><title>_int_malloc (11 samples, 0.22%)</title><rect x="26.3894%" y="405" width="0.2199%" height="15" fill="rgb(213,87,29)"/><text x="26.6394%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (38 samples, 0.76%)</title><rect x="25.9096%" y="613" width="0.7597%" height="15" fill="rgb(205,151,52)"/><text x="26.1596%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (27 samples, 0.54%)</title><rect x="26.1295%" y="597" width="0.5398%" height="15" fill="rgb(253,215,39)"/><text x="26.3795%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.52%)</title><rect x="26.1495%" y="581" width="0.5198%" height="15" fill="rgb(221,220,41)"/><text x="26.3995%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (26 samples, 0.52%)</title><rect x="26.1495%" y="565" width="0.5198%" height="15" fill="rgb(218,133,21)"/><text x="26.3995%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.50%)</title><rect x="26.1695%" y="549" width="0.4998%" height="15" fill="rgb(221,193,43)"/><text x="26.4195%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (23 samples, 0.46%)</title><rect x="26.2095%" y="533" width="0.4598%" height="15" fill="rgb(240,128,52)"/><text x="26.4595%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (23 samples, 0.46%)</title><rect x="26.2095%" y="517" width="0.4598%" height="15" fill="rgb(253,114,12)"/><text x="26.4595%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.46%)</title><rect x="26.2095%" y="501" width="0.4598%" height="15" fill="rgb(215,223,47)"/><text x="26.4595%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.46%)</title><rect x="26.2095%" y="485" width="0.4598%" height="15" fill="rgb(248,225,23)"/><text x="26.4595%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (23 samples, 0.46%)</title><rect x="26.2095%" y="469" width="0.4598%" height="15" fill="rgb(250,108,0)"/><text x="26.4595%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.46%)</title><rect x="26.2095%" y="453" width="0.4598%" height="15" fill="rgb(228,208,7)"/><text x="26.4595%" y="463.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.46%)</title><rect x="26.2095%" y="437" width="0.4598%" height="15" fill="rgb(244,45,10)"/><text x="26.4595%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (40 samples, 0.80%)</title><rect x="25.9096%" y="629" width="0.7997%" height="15" fill="rgb(207,125,25)"/><text x="26.1596%" y="639.50"></text></g><g><title>decor_mem::select::predicates::NamedPredicate::to_indexed_predicate (46 samples, 0.92%)</title><rect x="25.8497%" y="645" width="0.9196%" height="15" fill="rgb(210,195,18)"/><text x="26.0997%" y="655.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="27.1891%" y="629" width="0.1200%" height="15" fill="rgb(249,80,12)"/><text x="27.4391%" y="639.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="27.3091%" y="629" width="0.1999%" height="15" fill="rgb(221,65,9)"/><text x="27.5591%" y="639.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (100 samples, 2.00%)</title><rect x="27.5290%" y="629" width="1.9992%" height="15" fill="rgb(235,49,36)"/><text x="27.7790%" y="639.50">d..</text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (140 samples, 2.80%)</title><rect x="26.7693%" y="645" width="2.7989%" height="15" fill="rgb(225,32,20)"/><text x="27.0193%" y="655.50">de..</text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (301 samples, 6.02%)</title><rect x="23.6106%" y="677" width="6.0176%" height="15" fill="rgb(215,141,46)"/><text x="23.8606%" y="687.50">decor_me..</text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (231 samples, 4.62%)</title><rect x="25.0100%" y="661" width="4.6182%" height="15" fill="rgb(250,160,47)"/><text x="25.2600%" y="671.50">decor..</text></g><g><title>core::fmt::write (16 samples, 0.32%)</title><rect x="30.0080%" y="661" width="0.3199%" height="15" fill="rgb(216,222,40)"/><text x="30.2580%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (15 samples, 0.30%)</title><rect x="30.0280%" y="645" width="0.2999%" height="15" fill="rgb(234,217,39)"/><text x="30.2780%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (10 samples, 0.20%)</title><rect x="30.1279%" y="629" width="0.1999%" height="15" fill="rgb(207,178,40)"/><text x="30.3779%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.14%)</title><rect x="30.5278%" y="661" width="0.1399%" height="15" fill="rgb(221,136,13)"/><text x="30.7778%" y="671.50"></text></g><g><title>std::time::Instant::elapsed (9 samples, 0.18%)</title><rect x="30.6677%" y="661" width="0.1799%" height="15" fill="rgb(249,199,10)"/><text x="30.9177%" y="671.50"></text></g><g><title>std::time::Instant::now (6 samples, 0.12%)</title><rect x="30.7277%" y="645" width="0.1200%" height="15" fill="rgb(249,222,13)"/><text x="30.9777%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (6 samples, 0.12%)</title><rect x="30.7277%" y="629" width="0.1200%" height="15" fill="rgb(244,185,38)"/><text x="30.9777%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (6 samples, 0.12%)</title><rect x="30.7277%" y="613" width="0.1200%" height="15" fill="rgb(236,202,9)"/><text x="30.9777%" y="623.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (65 samples, 1.30%)</title><rect x="29.6281%" y="677" width="1.2995%" height="15" fill="rgb(250,229,37)"/><text x="29.8781%" y="687.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (7 samples, 0.14%)</title><rect x="31.0076%" y="661" width="0.1399%" height="15" fill="rgb(206,174,23)"/><text x="31.2576%" y="671.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.22%)</title><rect x="31.5474%" y="645" width="0.2199%" height="15" fill="rgb(211,33,43)"/><text x="31.7974%" y="655.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="31.9272%" y="645" width="0.1200%" height="15" fill="rgb(245,58,50)"/><text x="32.1772%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (19 samples, 0.38%)</title><rect x="32.2471%" y="597" width="0.3798%" height="15" fill="rgb(244,68,36)"/><text x="32.4971%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (19 samples, 0.38%)</title><rect x="32.2471%" y="581" width="0.3798%" height="15" fill="rgb(232,229,15)"/><text x="32.4971%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (24 samples, 0.48%)</title><rect x="32.2271%" y="613" width="0.4798%" height="15" fill="rgb(254,30,23)"/><text x="32.4771%" y="623.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.20%)</title><rect x="32.9268%" y="597" width="0.1999%" height="15" fill="rgb(235,160,14)"/><text x="33.1768%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="33.1867%" y="597" width="0.1200%" height="15" fill="rgb(212,155,44)"/><text x="33.4367%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.18%)</title><rect x="33.3866%" y="581" width="0.1799%" height="15" fill="rgb(226,2,50)"/><text x="33.6366%" y="591.50"></text></g><g><title>core::fmt::write (81 samples, 1.62%)</title><rect x="32.0472%" y="645" width="1.6194%" height="15" fill="rgb(234,177,6)"/><text x="32.2972%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (77 samples, 1.54%)</title><rect x="32.1271%" y="629" width="1.5394%" height="15" fill="rgb(217,24,9)"/><text x="32.3771%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (43 samples, 0.86%)</title><rect x="32.8069%" y="613" width="0.8597%" height="15" fill="rgb(220,13,46)"/><text x="33.0569%" y="623.50"></text></g><g><title>core::fmt::write (18 samples, 0.36%)</title><rect x="33.3067%" y="597" width="0.3599%" height="15" fill="rgb(239,221,27)"/><text x="33.5567%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="34.0064%" y="629" width="0.1200%" height="15" fill="rgb(222,198,25)"/><text x="34.2564%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (28 samples, 0.56%)</title><rect x="33.6665%" y="645" width="0.5598%" height="15" fill="rgb(211,99,13)"/><text x="33.9165%" y="655.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.20%)</title><rect x="34.2263%" y="645" width="0.1999%" height="15" fill="rgb(232,111,31)"/><text x="34.4763%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="34.2863%" y="629" width="0.1399%" height="15" fill="rgb(245,82,37)"/><text x="34.5363%" y="639.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (7 samples, 0.14%)</title><rect x="34.4462%" y="629" width="0.1399%" height="15" fill="rgb(227,149,46)"/><text x="34.6962%" y="639.50"></text></g><g><title>std::time::Instant::duration_since (7 samples, 0.14%)</title><rect x="34.4462%" y="613" width="0.1399%" height="15" fill="rgb(218,36,50)"/><text x="34.6962%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (7 samples, 0.14%)</title><rect x="34.4462%" y="597" width="0.1399%" height="15" fill="rgb(226,80,48)"/><text x="34.6962%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (6 samples, 0.12%)</title><rect x="34.4662%" y="581" width="0.1200%" height="15" fill="rgb(238,224,15)"/><text x="34.7162%" y="591.50"></text></g><g><title>std::time::Instant::elapsed (13 samples, 0.26%)</title><rect x="34.4262%" y="645" width="0.2599%" height="15" fill="rgb(241,136,10)"/><text x="34.6762%" y="655.50"></text></g><g><title>decor_mem::views::Views::delete (192 samples, 3.84%)</title><rect x="30.9276%" y="677" width="3.8385%" height="15" fill="rgb(208,32,45)"/><text x="31.1776%" y="687.50">deco..</text></g><g><title>decor_mem::views::View::update_index_and_row (181 samples, 3.62%)</title><rect x="31.1475%" y="661" width="3.6186%" height="15" fill="rgb(207,135,9)"/><text x="31.3975%" y="671.50">deco..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (1,025 samples, 20.49%)</title><rect x="14.3343%" y="725" width="20.4918%" height="15" fill="rgb(206,86,44)"/><text x="14.5843%" y="735.50">&lt;decor_mem::Shim as msql_srv::My..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (1,025 samples, 20.49%)</title><rect x="14.3343%" y="709" width="20.4918%" height="15" fill="rgb(245,177,15)"/><text x="14.5843%" y="719.50">decor_mem::query_transformer::Qu..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (893 samples, 17.85%)</title><rect x="16.9732%" y="693" width="17.8529%" height="15" fill="rgb(206,64,50)"/><text x="17.2232%" y="703.50">decor_mem::query_transformer..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (6 samples, 0.12%)</title><rect x="35.0260%" y="645" width="0.1200%" height="15" fill="rgb(234,36,40)"/><text x="35.2760%" y="655.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (6 samples, 0.12%)</title><rect x="35.0260%" y="629" width="0.1200%" height="15" fill="rgb(213,64,8)"/><text x="35.2760%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.26%)</title><rect x="34.9060%" y="677" width="0.2599%" height="15" fill="rgb(210,75,36)"/><text x="35.1560%" y="687.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="34.9860%" y="661" width="0.1799%" height="15" fill="rgb(229,88,21)"/><text x="35.2360%" y="671.50"></text></g><g><title>__wake_up_common (17 samples, 0.34%)</title><rect x="35.6657%" y="101" width="0.3399%" height="15" fill="rgb(252,204,47)"/><text x="35.9157%" y="111.50"></text></g><g><title>pollwake (17 samples, 0.34%)</title><rect x="35.6657%" y="85" width="0.3399%" height="15" fill="rgb(208,77,27)"/><text x="35.9157%" y="95.50"></text></g><g><title>try_to_wake_up (15 samples, 0.30%)</title><rect x="35.7057%" y="69" width="0.2999%" height="15" fill="rgb(221,76,26)"/><text x="35.9557%" y="79.50"></text></g><g><title>sock_def_readable (20 samples, 0.40%)</title><rect x="35.6657%" y="133" width="0.3998%" height="15" fill="rgb(225,139,18)"/><text x="35.9157%" y="143.50"></text></g><g><title>__wake_up_common_lock (20 samples, 0.40%)</title><rect x="35.6657%" y="117" width="0.3998%" height="15" fill="rgb(230,137,11)"/><text x="35.9157%" y="127.50"></text></g><g><title>__local_bh_enable_ip (42 samples, 0.84%)</title><rect x="35.4258%" y="357" width="0.8397%" height="15" fill="rgb(212,28,1)"/><text x="35.6758%" y="367.50"></text></g><g><title>do_softirq (41 samples, 0.82%)</title><rect x="35.4458%" y="341" width="0.8197%" height="15" fill="rgb(248,164,17)"/><text x="35.6958%" y="351.50"></text></g><g><title>do_softirq_own_stack (40 samples, 0.80%)</title><rect x="35.4658%" y="325" width="0.7997%" height="15" fill="rgb(222,171,42)"/><text x="35.7158%" y="335.50"></text></g><g><title>__do_softirq (40 samples, 0.80%)</title><rect x="35.4658%" y="309" width="0.7997%" height="15" fill="rgb(243,84,45)"/><text x="35.7158%" y="319.50"></text></g><g><title>net_rx_action (40 samples, 0.80%)</title><rect x="35.4658%" y="293" width="0.7997%" height="15" fill="rgb(252,49,23)"/><text x="35.7158%" y="303.50"></text></g><g><title>process_backlog (38 samples, 0.76%)</title><rect x="35.5058%" y="277" width="0.7597%" height="15" fill="rgb(215,19,7)"/><text x="35.7558%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (37 samples, 0.74%)</title><rect x="35.5258%" y="261" width="0.7397%" height="15" fill="rgb(238,81,41)"/><text x="35.7758%" y="271.50"></text></g><g><title>ip_rcv (37 samples, 0.74%)</title><rect x="35.5258%" y="245" width="0.7397%" height="15" fill="rgb(210,199,37)"/><text x="35.7758%" y="255.50"></text></g><g><title>ip_local_deliver (37 samples, 0.74%)</title><rect x="35.5258%" y="229" width="0.7397%" height="15" fill="rgb(244,192,49)"/><text x="35.7758%" y="239.50"></text></g><g><title>ip_local_deliver_finish (37 samples, 0.74%)</title><rect x="35.5258%" y="213" width="0.7397%" height="15" fill="rgb(226,211,11)"/><text x="35.7758%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (35 samples, 0.70%)</title><rect x="35.5658%" y="197" width="0.6997%" height="15" fill="rgb(236,162,54)"/><text x="35.8158%" y="207.50"></text></g><g><title>tcp_v4_rcv (35 samples, 0.70%)</title><rect x="35.5658%" y="181" width="0.6997%" height="15" fill="rgb(220,229,9)"/><text x="35.8158%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (33 samples, 0.66%)</title><rect x="35.6058%" y="165" width="0.6597%" height="15" fill="rgb(250,87,22)"/><text x="35.8558%" y="175.50"></text></g><g><title>tcp_rcv_established (33 samples, 0.66%)</title><rect x="35.6058%" y="149" width="0.6597%" height="15" fill="rgb(239,43,17)"/><text x="35.8558%" y="159.50"></text></g><g><title>tcp_ack (10 samples, 0.20%)</title><rect x="36.0656%" y="133" width="0.1999%" height="15" fill="rgb(231,177,25)"/><text x="36.3156%" y="143.50"></text></g><g><title>ip_output (45 samples, 0.90%)</title><rect x="35.3858%" y="389" width="0.8996%" height="15" fill="rgb(219,179,1)"/><text x="35.6358%" y="399.50"></text></g><g><title>ip_finish_output2 (45 samples, 0.90%)</title><rect x="35.3858%" y="373" width="0.8996%" height="15" fill="rgb(238,219,53)"/><text x="35.6358%" y="383.50"></text></g><g><title>__ip_queue_xmit (49 samples, 0.98%)</title><rect x="35.3259%" y="405" width="0.9796%" height="15" fill="rgb(232,167,36)"/><text x="35.5759%" y="415.50"></text></g><g><title>__tcp_push_pending_frames (54 samples, 1.08%)</title><rect x="35.3059%" y="453" width="1.0796%" height="15" fill="rgb(244,19,51)"/><text x="35.5559%" y="463.50"></text></g><g><title>tcp_write_xmit (54 samples, 1.08%)</title><rect x="35.3059%" y="437" width="1.0796%" height="15" fill="rgb(224,6,22)"/><text x="35.5559%" y="447.50"></text></g><g><title>__tcp_transmit_skb (53 samples, 1.06%)</title><rect x="35.3259%" y="421" width="1.0596%" height="15" fill="rgb(224,145,5)"/><text x="35.5759%" y="431.50"></text></g><g><title>sock_sendmsg (60 samples, 1.20%)</title><rect x="35.3059%" y="501" width="1.1995%" height="15" fill="rgb(234,130,49)"/><text x="35.5559%" y="511.50"></text></g><g><title>tcp_sendmsg (60 samples, 1.20%)</title><rect x="35.3059%" y="485" width="1.1995%" height="15" fill="rgb(254,6,2)"/><text x="35.5559%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (60 samples, 1.20%)</title><rect x="35.3059%" y="469" width="1.1995%" height="15" fill="rgb(208,96,46)"/><text x="35.5559%" y="479.50"></text></g><g><title>__x64_sys_sendto (63 samples, 1.26%)</title><rect x="35.2659%" y="533" width="1.2595%" height="15" fill="rgb(239,3,39)"/><text x="35.5159%" y="543.50"></text></g><g><title>__sys_sendto (63 samples, 1.26%)</title><rect x="35.2659%" y="517" width="1.2595%" height="15" fill="rgb(233,210,1)"/><text x="35.5159%" y="527.50"></text></g><g><title>do_syscall_64 (65 samples, 1.30%)</title><rect x="35.2659%" y="549" width="1.2995%" height="15" fill="rgb(244,137,37)"/><text x="35.5159%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (68 samples, 1.36%)</title><rect x="35.2659%" y="565" width="1.3595%" height="15" fill="rgb(240,136,2)"/><text x="35.5159%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (74 samples, 1.48%)</title><rect x="35.1659%" y="677" width="1.4794%" height="15" fill="rgb(239,18,37)"/><text x="35.4159%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (74 samples, 1.48%)</title><rect x="35.1659%" y="661" width="1.4794%" height="15" fill="rgb(218,185,22)"/><text x="35.4159%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (70 samples, 1.40%)</title><rect x="35.2459%" y="645" width="1.3994%" height="15" fill="rgb(225,218,4)"/><text x="35.4959%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (70 samples, 1.40%)</title><rect x="35.2459%" y="629" width="1.3994%" height="15" fill="rgb(230,182,32)"/><text x="35.4959%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (70 samples, 1.40%)</title><rect x="35.2459%" y="613" width="1.3994%" height="15" fill="rgb(242,56,43)"/><text x="35.4959%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (70 samples, 1.40%)</title><rect x="35.2459%" y="597" width="1.3994%" height="15" fill="rgb(233,99,24)"/><text x="35.4959%" y="607.50"></text></g><g><title>__libc_send (70 samples, 1.40%)</title><rect x="35.2459%" y="581" width="1.3994%" height="15" fill="rgb(234,209,42)"/><text x="35.4959%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (14 samples, 0.28%)</title><rect x="36.6853%" y="613" width="0.2799%" height="15" fill="rgb(227,7,12)"/><text x="36.9353%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (9 samples, 0.18%)</title><rect x="36.7853%" y="597" width="0.1799%" height="15" fill="rgb(245,203,43)"/><text x="37.0353%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.14%)</title><rect x="36.9652%" y="613" width="0.1399%" height="15" fill="rgb(238,205,33)"/><text x="37.2152%" y="623.50"></text></g><g><title>alloc::fmt::format (25 samples, 0.50%)</title><rect x="36.6453%" y="677" width="0.4998%" height="15" fill="rgb(231,56,7)"/><text x="36.8953%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (25 samples, 0.50%)</title><rect x="36.6453%" y="661" width="0.4998%" height="15" fill="rgb(244,186,29)"/><text x="36.8953%" y="671.50"></text></g><g><title>core::fmt::write (25 samples, 0.50%)</title><rect x="36.6453%" y="645" width="0.4998%" height="15" fill="rgb(234,111,31)"/><text x="36.8953%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (24 samples, 0.48%)</title><rect x="36.6653%" y="629" width="0.4798%" height="15" fill="rgb(241,149,10)"/><text x="36.9153%" y="639.50"></text></g><g><title>__GI___libc_malloc (37 samples, 0.74%)</title><rect x="37.1451%" y="661" width="0.7397%" height="15" fill="rgb(249,206,44)"/><text x="37.3951%" y="671.50"></text></g><g><title>_int_malloc (37 samples, 0.74%)</title><rect x="37.1451%" y="645" width="0.7397%" height="15" fill="rgb(251,153,30)"/><text x="37.3951%" y="655.50"></text></g><g><title>malloc_consolidate (23 samples, 0.46%)</title><rect x="37.4250%" y="629" width="0.4598%" height="15" fill="rgb(239,152,38)"/><text x="37.6750%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (38 samples, 0.76%)</title><rect x="37.1451%" y="677" width="0.7597%" height="15" fill="rgb(249,139,47)"/><text x="37.3951%" y="687.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (155 samples, 3.10%)</title><rect x="34.8261%" y="693" width="3.0988%" height="15" fill="rgb(244,64,35)"/><text x="35.0761%" y="703.50">dec..</text></g><g><title>sock_def_readable (14 samples, 0.28%)</title><rect x="38.6445%" y="133" width="0.2799%" height="15" fill="rgb(216,46,15)"/><text x="38.8945%" y="143.50"></text></g><g><title>__wake_up_common_lock (14 samples, 0.28%)</title><rect x="38.6445%" y="117" width="0.2799%" height="15" fill="rgb(250,74,19)"/><text x="38.8945%" y="127.50"></text></g><g><title>__wake_up_common (14 samples, 0.28%)</title><rect x="38.6445%" y="101" width="0.2799%" height="15" fill="rgb(249,42,33)"/><text x="38.8945%" y="111.50"></text></g><g><title>pollwake (14 samples, 0.28%)</title><rect x="38.6445%" y="85" width="0.2799%" height="15" fill="rgb(242,149,17)"/><text x="38.8945%" y="95.50"></text></g><g><title>try_to_wake_up (13 samples, 0.26%)</title><rect x="38.6645%" y="69" width="0.2599%" height="15" fill="rgb(244,29,21)"/><text x="38.9145%" y="79.50"></text></g><g><title>tcp_ack (6 samples, 0.12%)</title><rect x="38.9244%" y="133" width="0.1200%" height="15" fill="rgb(220,130,37)"/><text x="39.1744%" y="143.50"></text></g><g><title>ip_local_deliver (28 samples, 0.56%)</title><rect x="38.5246%" y="229" width="0.5598%" height="15" fill="rgb(211,67,2)"/><text x="38.7746%" y="239.50"></text></g><g><title>ip_local_deliver_finish (27 samples, 0.54%)</title><rect x="38.5446%" y="213" width="0.5398%" height="15" fill="rgb(235,68,52)"/><text x="38.7946%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (27 samples, 0.54%)</title><rect x="38.5446%" y="197" width="0.5398%" height="15" fill="rgb(246,142,3)"/><text x="38.7946%" y="207.50"></text></g><g><title>tcp_v4_rcv (24 samples, 0.48%)</title><rect x="38.6046%" y="181" width="0.4798%" height="15" fill="rgb(241,25,7)"/><text x="38.8546%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (23 samples, 0.46%)</title><rect x="38.6246%" y="165" width="0.4598%" height="15" fill="rgb(242,119,39)"/><text x="38.8746%" y="175.50"></text></g><g><title>tcp_rcv_established (23 samples, 0.46%)</title><rect x="38.6246%" y="149" width="0.4598%" height="15" fill="rgb(241,98,45)"/><text x="38.8746%" y="159.50"></text></g><g><title>__netif_receive_skb_one_core (30 samples, 0.60%)</title><rect x="38.5046%" y="261" width="0.5998%" height="15" fill="rgb(254,28,30)"/><text x="38.7546%" y="271.50"></text></g><g><title>ip_rcv (29 samples, 0.58%)</title><rect x="38.5246%" y="245" width="0.5798%" height="15" fill="rgb(241,142,54)"/><text x="38.7746%" y="255.50"></text></g><g><title>ip_finish_output2 (40 samples, 0.80%)</title><rect x="38.3247%" y="373" width="0.7997%" height="15" fill="rgb(222,85,15)"/><text x="38.5747%" y="383.50"></text></g><g><title>__local_bh_enable_ip (34 samples, 0.68%)</title><rect x="38.4446%" y="357" width="0.6797%" height="15" fill="rgb(210,85,47)"/><text x="38.6946%" y="367.50"></text></g><g><title>do_softirq (34 samples, 0.68%)</title><rect x="38.4446%" y="341" width="0.6797%" height="15" fill="rgb(224,206,25)"/><text x="38.6946%" y="351.50"></text></g><g><title>do_softirq_own_stack (34 samples, 0.68%)</title><rect x="38.4446%" y="325" width="0.6797%" height="15" fill="rgb(243,201,19)"/><text x="38.6946%" y="335.50"></text></g><g><title>__do_softirq (34 samples, 0.68%)</title><rect x="38.4446%" y="309" width="0.6797%" height="15" fill="rgb(236,59,4)"/><text x="38.6946%" y="319.50"></text></g><g><title>net_rx_action (33 samples, 0.66%)</title><rect x="38.4646%" y="293" width="0.6597%" height="15" fill="rgb(254,179,45)"/><text x="38.7146%" y="303.50"></text></g><g><title>process_backlog (32 samples, 0.64%)</title><rect x="38.4846%" y="277" width="0.6397%" height="15" fill="rgb(226,14,10)"/><text x="38.7346%" y="287.50"></text></g><g><title>__ip_queue_xmit (42 samples, 0.84%)</title><rect x="38.3047%" y="405" width="0.8397%" height="15" fill="rgb(244,27,41)"/><text x="38.5547%" y="415.50"></text></g><g><title>ip_output (41 samples, 0.82%)</title><rect x="38.3247%" y="389" width="0.8197%" height="15" fill="rgb(235,35,32)"/><text x="38.5747%" y="399.50"></text></g><g><title>__tcp_transmit_skb (47 samples, 0.94%)</title><rect x="38.2247%" y="421" width="0.9396%" height="15" fill="rgb(218,68,31)"/><text x="38.4747%" y="431.50"></text></g><g><title>__tcp_push_pending_frames (50 samples, 1.00%)</title><rect x="38.1847%" y="453" width="0.9996%" height="15" fill="rgb(207,120,37)"/><text x="38.4347%" y="463.50"></text></g><g><title>tcp_write_xmit (50 samples, 1.00%)</title><rect x="38.1847%" y="437" width="0.9996%" height="15" fill="rgb(227,98,0)"/><text x="38.4347%" y="447.50"></text></g><g><title>sock_sendmsg (57 samples, 1.14%)</title><rect x="38.1647%" y="501" width="1.1395%" height="15" fill="rgb(207,7,3)"/><text x="38.4147%" y="511.50"></text></g><g><title>tcp_sendmsg (56 samples, 1.12%)</title><rect x="38.1847%" y="485" width="1.1196%" height="15" fill="rgb(206,98,19)"/><text x="38.4347%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (56 samples, 1.12%)</title><rect x="38.1847%" y="469" width="1.1196%" height="15" fill="rgb(217,5,26)"/><text x="38.4347%" y="479.50"></text></g><g><title>__x64_sys_sendto (63 samples, 1.26%)</title><rect x="38.1248%" y="533" width="1.2595%" height="15" fill="rgb(235,190,38)"/><text x="38.3748%" y="543.50"></text></g><g><title>__sys_sendto (63 samples, 1.26%)</title><rect x="38.1248%" y="517" width="1.2595%" height="15" fill="rgb(247,86,24)"/><text x="38.3748%" y="527.50"></text></g><g><title>do_syscall_64 (65 samples, 1.30%)</title><rect x="38.1248%" y="549" width="1.2995%" height="15" fill="rgb(205,101,16)"/><text x="38.3748%" y="559.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (67 samples, 1.34%)</title><rect x="38.1048%" y="613" width="1.3395%" height="15" fill="rgb(246,168,33)"/><text x="38.3548%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (67 samples, 1.34%)</title><rect x="38.1048%" y="597" width="1.3395%" height="15" fill="rgb(231,114,1)"/><text x="38.3548%" y="607.50"></text></g><g><title>__libc_send (67 samples, 1.34%)</title><rect x="38.1048%" y="581" width="1.3395%" height="15" fill="rgb(207,184,53)"/><text x="38.3548%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (66 samples, 1.32%)</title><rect x="38.1248%" y="565" width="1.3195%" height="15" fill="rgb(224,95,51)"/><text x="38.3748%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (71 samples, 1.42%)</title><rect x="38.0448%" y="677" width="1.4194%" height="15" fill="rgb(212,188,45)"/><text x="38.2948%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (71 samples, 1.42%)</title><rect x="38.0448%" y="661" width="1.4194%" height="15" fill="rgb(223,154,38)"/><text x="38.2948%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (71 samples, 1.42%)</title><rect x="38.0448%" y="645" width="1.4194%" height="15" fill="rgb(251,22,52)"/><text x="38.2948%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (68 samples, 1.36%)</title><rect x="38.1048%" y="629" width="1.3595%" height="15" fill="rgb(229,209,22)"/><text x="38.3548%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="39.5442%" y="677" width="0.1200%" height="15" fill="rgb(234,138,34)"/><text x="39.7942%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.14%)</title><rect x="39.7641%" y="645" width="0.1399%" height="15" fill="rgb(212,95,11)"/><text x="40.0141%" y="655.50"></text></g><g><title>core::fmt::write (15 samples, 0.30%)</title><rect x="39.7241%" y="677" width="0.2999%" height="15" fill="rgb(240,179,47)"/><text x="39.9741%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (14 samples, 0.28%)</title><rect x="39.7441%" y="661" width="0.2799%" height="15" fill="rgb(240,163,11)"/><text x="39.9941%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="39.9040%" y="645" width="0.1200%" height="15" fill="rgb(236,37,12)"/><text x="40.1540%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (123 samples, 2.46%)</title><rect x="37.9248%" y="693" width="2.4590%" height="15" fill="rgb(232,164,16)"/><text x="38.1748%" y="703.50">de..</text></g><g><title>decor_mem::views::Views::delete (16 samples, 0.32%)</title><rect x="40.0640%" y="677" width="0.3199%" height="15" fill="rgb(244,205,15)"/><text x="40.3140%" y="687.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (11 samples, 0.22%)</title><rect x="40.1639%" y="661" width="0.2199%" height="15" fill="rgb(223,117,47)"/><text x="40.4139%" y="671.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (11 samples, 0.22%)</title><rect x="40.4038%" y="693" width="0.2199%" height="15" fill="rgb(244,107,35)"/><text x="40.6538%" y="703.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (7 samples, 0.14%)</title><rect x="40.4838%" y="677" width="0.1399%" height="15" fill="rgb(205,140,8)"/><text x="40.7338%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (7 samples, 0.14%)</title><rect x="40.4838%" y="661" width="0.1399%" height="15" fill="rgb(228,84,46)"/><text x="40.7338%" y="671.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (1,317 samples, 26.33%)</title><rect x="14.3343%" y="773" width="26.3295%" height="15" fill="rgb(254,188,9)"/><text x="14.5843%" y="783.50">decor_mem::Shim::run_on_tcp</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,317 samples, 26.33%)</title><rect x="14.3343%" y="757" width="26.3295%" height="15" fill="rgb(206,112,54)"/><text x="14.5843%" y="767.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (1,317 samples, 26.33%)</title><rect x="14.3343%" y="741" width="26.3295%" height="15" fill="rgb(216,84,49)"/><text x="14.5843%" y="751.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (292 samples, 5.84%)</title><rect x="34.8261%" y="725" width="5.8377%" height="15" fill="rgb(214,194,35)"/><text x="35.0761%" y="735.50">&lt;decor_..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (292 samples, 5.84%)</title><rect x="34.8261%" y="709" width="5.8377%" height="15" fill="rgb(249,28,3)"/><text x="35.0761%" y="719.50">decor_m..</text></g><g><title>sk_wait_data (6 samples, 0.12%)</title><rect x="40.7637%" y="453" width="0.1200%" height="15" fill="rgb(222,56,52)"/><text x="41.0137%" y="463.50"></text></g><g><title>wait_woken (6 samples, 0.12%)</title><rect x="40.7637%" y="437" width="0.1200%" height="15" fill="rgb(245,217,50)"/><text x="41.0137%" y="447.50"></text></g><g><title>schedule_timeout (6 samples, 0.12%)</title><rect x="40.7637%" y="421" width="0.1200%" height="15" fill="rgb(213,201,24)"/><text x="41.0137%" y="431.50"></text></g><g><title>schedule (6 samples, 0.12%)</title><rect x="40.7637%" y="405" width="0.1200%" height="15" fill="rgb(248,116,28)"/><text x="41.0137%" y="415.50"></text></g><g><title>__schedule (6 samples, 0.12%)</title><rect x="40.7637%" y="389" width="0.1200%" height="15" fill="rgb(219,72,43)"/><text x="41.0137%" y="399.50"></text></g><g><title>do_syscall_64 (10 samples, 0.20%)</title><rect x="40.7437%" y="533" width="0.1999%" height="15" fill="rgb(209,138,14)"/><text x="40.9937%" y="543.50"></text></g><g><title>__x64_sys_recvfrom (10 samples, 0.20%)</title><rect x="40.7437%" y="517" width="0.1999%" height="15" fill="rgb(222,18,33)"/><text x="40.9937%" y="527.50"></text></g><g><title>__sys_recvfrom (10 samples, 0.20%)</title><rect x="40.7437%" y="501" width="0.1999%" height="15" fill="rgb(213,199,7)"/><text x="40.9937%" y="511.50"></text></g><g><title>inet_recvmsg (9 samples, 0.18%)</title><rect x="40.7637%" y="485" width="0.1799%" height="15" fill="rgb(250,110,10)"/><text x="41.0137%" y="495.50"></text></g><g><title>tcp_recvmsg (9 samples, 0.18%)</title><rect x="40.7637%" y="469" width="0.1799%" height="15" fill="rgb(248,123,6)"/><text x="41.0137%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (12 samples, 0.24%)</title><rect x="40.7437%" y="549" width="0.2399%" height="15" fill="rgb(206,91,31)"/><text x="40.9937%" y="559.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (13 samples, 0.26%)</title><rect x="40.7437%" y="645" width="0.2599%" height="15" fill="rgb(211,154,13)"/><text x="40.9937%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (13 samples, 0.26%)</title><rect x="40.7437%" y="629" width="0.2599%" height="15" fill="rgb(225,148,7)"/><text x="40.9937%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (13 samples, 0.26%)</title><rect x="40.7437%" y="613" width="0.2599%" height="15" fill="rgb(220,160,43)"/><text x="40.9937%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (13 samples, 0.26%)</title><rect x="40.7437%" y="597" width="0.2599%" height="15" fill="rgb(213,52,39)"/><text x="40.9937%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (13 samples, 0.26%)</title><rect x="40.7437%" y="581" width="0.2599%" height="15" fill="rgb(243,137,7)"/><text x="40.9937%" y="591.50"></text></g><g><title>__libc_recv (13 samples, 0.26%)</title><rect x="40.7437%" y="565" width="0.2599%" height="15" fill="rgb(230,79,13)"/><text x="40.9937%" y="575.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (14 samples, 0.28%)</title><rect x="40.7437%" y="773" width="0.2799%" height="15" fill="rgb(247,105,23)"/><text x="40.9937%" y="783.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (14 samples, 0.28%)</title><rect x="40.7437%" y="757" width="0.2799%" height="15" fill="rgb(223,179,41)"/><text x="40.9937%" y="767.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (14 samples, 0.28%)</title><rect x="40.7437%" y="741" width="0.2799%" height="15" fill="rgb(218,9,34)"/><text x="40.9937%" y="751.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (14 samples, 0.28%)</title><rect x="40.7437%" y="725" width="0.2799%" height="15" fill="rgb(222,106,8)"/><text x="40.9937%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (14 samples, 0.28%)</title><rect x="40.7437%" y="709" width="0.2799%" height="15" fill="rgb(211,220,0)"/><text x="40.9937%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (14 samples, 0.28%)</title><rect x="40.7437%" y="693" width="0.2799%" height="15" fill="rgb(229,52,16)"/><text x="40.9937%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (14 samples, 0.28%)</title><rect x="40.7437%" y="677" width="0.2799%" height="15" fill="rgb(212,155,18)"/><text x="40.9937%" y="687.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.28%)</title><rect x="40.7437%" y="661" width="0.2799%" height="15" fill="rgb(242,21,14)"/><text x="40.9937%" y="671.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (15 samples, 0.30%)</title><rect x="41.2235%" y="773" width="0.2999%" height="15" fill="rgb(222,19,48)"/><text x="41.4735%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.14%)</title><rect x="41.7633%" y="773" width="0.1399%" height="15" fill="rgb(232,45,27)"/><text x="42.0133%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (7 samples, 0.14%)</title><rect x="42.0632%" y="773" width="0.1399%" height="15" fill="rgb(249,103,42)"/><text x="42.3132%" y="783.50"></text></g><g><title>sk_wait_data (18 samples, 0.36%)</title><rect x="42.3031%" y="469" width="0.3599%" height="15" fill="rgb(246,81,33)"/><text x="42.5531%" y="479.50"></text></g><g><title>wait_woken (14 samples, 0.28%)</title><rect x="42.3830%" y="453" width="0.2799%" height="15" fill="rgb(252,33,42)"/><text x="42.6330%" y="463.50"></text></g><g><title>schedule_timeout (14 samples, 0.28%)</title><rect x="42.3830%" y="437" width="0.2799%" height="15" fill="rgb(209,212,41)"/><text x="42.6330%" y="447.50"></text></g><g><title>schedule (14 samples, 0.28%)</title><rect x="42.3830%" y="421" width="0.2799%" height="15" fill="rgb(207,154,6)"/><text x="42.6330%" y="431.50"></text></g><g><title>__schedule (13 samples, 0.26%)</title><rect x="42.4030%" y="405" width="0.2599%" height="15" fill="rgb(223,64,47)"/><text x="42.6530%" y="415.50"></text></g><g><title>inet_recvmsg (21 samples, 0.42%)</title><rect x="42.2831%" y="501" width="0.4198%" height="15" fill="rgb(211,161,38)"/><text x="42.5331%" y="511.50"></text></g><g><title>tcp_recvmsg (21 samples, 0.42%)</title><rect x="42.2831%" y="485" width="0.4198%" height="15" fill="rgb(219,138,40)"/><text x="42.5331%" y="495.50"></text></g><g><title>do_syscall_64 (22 samples, 0.44%)</title><rect x="42.2831%" y="549" width="0.4398%" height="15" fill="rgb(241,228,46)"/><text x="42.5331%" y="559.50"></text></g><g><title>__x64_sys_recvfrom (22 samples, 0.44%)</title><rect x="42.2831%" y="533" width="0.4398%" height="15" fill="rgb(223,209,38)"/><text x="42.5331%" y="543.50"></text></g><g><title>__sys_recvfrom (22 samples, 0.44%)</title><rect x="42.2831%" y="517" width="0.4398%" height="15" fill="rgb(236,164,45)"/><text x="42.5331%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (24 samples, 0.48%)</title><rect x="42.2831%" y="565" width="0.4798%" height="15" fill="rgb(231,15,5)"/><text x="42.5331%" y="575.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.54%)</title><rect x="42.2631%" y="677" width="0.5398%" height="15" fill="rgb(252,35,15)"/><text x="42.5131%" y="687.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (26 samples, 0.52%)</title><rect x="42.2831%" y="661" width="0.5198%" height="15" fill="rgb(248,181,18)"/><text x="42.5331%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (26 samples, 0.52%)</title><rect x="42.2831%" y="645" width="0.5198%" height="15" fill="rgb(233,39,42)"/><text x="42.5331%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (26 samples, 0.52%)</title><rect x="42.2831%" y="629" width="0.5198%" height="15" fill="rgb(238,110,33)"/><text x="42.5331%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::read (26 samples, 0.52%)</title><rect x="42.2831%" y="613" width="0.5198%" height="15" fill="rgb(233,195,10)"/><text x="42.5331%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (26 samples, 0.52%)</title><rect x="42.2831%" y="597" width="0.5198%" height="15" fill="rgb(254,105,3)"/><text x="42.5331%" y="607.50"></text></g><g><title>__libc_recv (26 samples, 0.52%)</title><rect x="42.2831%" y="581" width="0.5198%" height="15" fill="rgb(221,225,9)"/><text x="42.5331%" y="591.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (28 samples, 0.56%)</title><rect x="42.2631%" y="709" width="0.5598%" height="15" fill="rgb(224,227,45)"/><text x="42.5131%" y="719.50"></text></g><g><title>mysql::conn::Conn::read_packet (28 samples, 0.56%)</title><rect x="42.2631%" y="693" width="0.5598%" height="15" fill="rgb(229,198,43)"/><text x="42.5131%" y="703.50"></text></g><g><title>sock_def_readable (10 samples, 0.20%)</title><rect x="43.2027%" y="197" width="0.1999%" height="15" fill="rgb(206,209,35)"/><text x="43.4527%" y="207.50"></text></g><g><title>__wake_up_common_lock (10 samples, 0.20%)</title><rect x="43.2027%" y="181" width="0.1999%" height="15" fill="rgb(245,195,53)"/><text x="43.4527%" y="191.50"></text></g><g><title>__wake_up_common (10 samples, 0.20%)</title><rect x="43.2027%" y="165" width="0.1999%" height="15" fill="rgb(240,92,26)"/><text x="43.4527%" y="175.50"></text></g><g><title>try_to_wake_up (10 samples, 0.20%)</title><rect x="43.2027%" y="149" width="0.1999%" height="15" fill="rgb(207,40,23)"/><text x="43.4527%" y="159.50"></text></g><g><title>tcp_ack (6 samples, 0.12%)</title><rect x="43.4026%" y="197" width="0.1200%" height="15" fill="rgb(223,111,35)"/><text x="43.6526%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (20 samples, 0.40%)</title><rect x="43.1427%" y="229" width="0.3998%" height="15" fill="rgb(229,147,28)"/><text x="43.3927%" y="239.50"></text></g><g><title>tcp_rcv_established (20 samples, 0.40%)</title><rect x="43.1427%" y="213" width="0.3998%" height="15" fill="rgb(211,29,28)"/><text x="43.3927%" y="223.50"></text></g><g><title>ip_local_deliver (22 samples, 0.44%)</title><rect x="43.1228%" y="293" width="0.4398%" height="15" fill="rgb(228,72,33)"/><text x="43.3728%" y="303.50"></text></g><g><title>ip_local_deliver_finish (22 samples, 0.44%)</title><rect x="43.1228%" y="277" width="0.4398%" height="15" fill="rgb(205,214,31)"/><text x="43.3728%" y="287.50"></text></g><g><title>ip_protocol_deliver_rcu (22 samples, 0.44%)</title><rect x="43.1228%" y="261" width="0.4398%" height="15" fill="rgb(224,111,15)"/><text x="43.3728%" y="271.50"></text></g><g><title>tcp_v4_rcv (22 samples, 0.44%)</title><rect x="43.1228%" y="245" width="0.4398%" height="15" fill="rgb(253,21,26)"/><text x="43.3728%" y="255.50"></text></g><g><title>__tcp_push_pending_frames (35 samples, 0.70%)</title><rect x="42.8828%" y="517" width="0.6997%" height="15" fill="rgb(245,139,43)"/><text x="43.1328%" y="527.50"></text></g><g><title>tcp_write_xmit (35 samples, 0.70%)</title><rect x="42.8828%" y="501" width="0.6997%" height="15" fill="rgb(252,170,7)"/><text x="43.1328%" y="511.50"></text></g><g><title>__tcp_transmit_skb (33 samples, 0.66%)</title><rect x="42.9228%" y="485" width="0.6597%" height="15" fill="rgb(231,118,14)"/><text x="43.1728%" y="495.50"></text></g><g><title>__ip_queue_xmit (33 samples, 0.66%)</title><rect x="42.9228%" y="469" width="0.6597%" height="15" fill="rgb(238,83,0)"/><text x="43.1728%" y="479.50"></text></g><g><title>ip_output (33 samples, 0.66%)</title><rect x="42.9228%" y="453" width="0.6597%" height="15" fill="rgb(221,39,39)"/><text x="43.1728%" y="463.50"></text></g><g><title>ip_finish_output2 (32 samples, 0.64%)</title><rect x="42.9428%" y="437" width="0.6397%" height="15" fill="rgb(222,119,46)"/><text x="43.1928%" y="447.50"></text></g><g><title>__local_bh_enable_ip (26 samples, 0.52%)</title><rect x="43.0628%" y="421" width="0.5198%" height="15" fill="rgb(222,165,49)"/><text x="43.3128%" y="431.50"></text></g><g><title>do_softirq (26 samples, 0.52%)</title><rect x="43.0628%" y="405" width="0.5198%" height="15" fill="rgb(219,113,52)"/><text x="43.3128%" y="415.50"></text></g><g><title>do_softirq_own_stack (26 samples, 0.52%)</title><rect x="43.0628%" y="389" width="0.5198%" height="15" fill="rgb(214,7,15)"/><text x="43.3128%" y="399.50"></text></g><g><title>__do_softirq (26 samples, 0.52%)</title><rect x="43.0628%" y="373" width="0.5198%" height="15" fill="rgb(235,32,4)"/><text x="43.3128%" y="383.50"></text></g><g><title>net_rx_action (24 samples, 0.48%)</title><rect x="43.1028%" y="357" width="0.4798%" height="15" fill="rgb(238,90,54)"/><text x="43.3528%" y="367.50"></text></g><g><title>process_backlog (24 samples, 0.48%)</title><rect x="43.1028%" y="341" width="0.4798%" height="15" fill="rgb(213,208,19)"/><text x="43.3528%" y="351.50"></text></g><g><title>__netif_receive_skb_one_core (23 samples, 0.46%)</title><rect x="43.1228%" y="325" width="0.4598%" height="15" fill="rgb(233,156,4)"/><text x="43.3728%" y="335.50"></text></g><g><title>ip_rcv (23 samples, 0.46%)</title><rect x="43.1228%" y="309" width="0.4598%" height="15" fill="rgb(207,194,5)"/><text x="43.3728%" y="319.50"></text></g><g><title>sock_sendmsg (42 samples, 0.84%)</title><rect x="42.8429%" y="565" width="0.8397%" height="15" fill="rgb(206,111,30)"/><text x="43.0929%" y="575.50"></text></g><g><title>tcp_sendmsg (42 samples, 0.84%)</title><rect x="42.8429%" y="549" width="0.8397%" height="15" fill="rgb(243,70,54)"/><text x="43.0929%" y="559.50"></text></g><g><title>tcp_sendmsg_locked (40 samples, 0.80%)</title><rect x="42.8828%" y="533" width="0.7997%" height="15" fill="rgb(242,28,8)"/><text x="43.1328%" y="543.50"></text></g><g><title>__x64_sys_sendto (43 samples, 0.86%)</title><rect x="42.8429%" y="597" width="0.8597%" height="15" fill="rgb(219,106,18)"/><text x="43.0929%" y="607.50"></text></g><g><title>__sys_sendto (43 samples, 0.86%)</title><rect x="42.8429%" y="581" width="0.8597%" height="15" fill="rgb(244,222,10)"/><text x="43.0929%" y="591.50"></text></g><g><title>do_syscall_64 (45 samples, 0.90%)</title><rect x="42.8429%" y="613" width="0.8996%" height="15" fill="rgb(236,179,52)"/><text x="43.0929%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (76 samples, 1.52%)</title><rect x="42.2631%" y="757" width="1.5194%" height="15" fill="rgb(213,23,39)"/><text x="42.5131%" y="767.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (76 samples, 1.52%)</title><rect x="42.2631%" y="741" width="1.5194%" height="15" fill="rgb(238,48,10)"/><text x="42.5131%" y="751.50"></text></g><g><title>mysql::conn::Conn::_query (76 samples, 1.52%)</title><rect x="42.2631%" y="725" width="1.5194%" height="15" fill="rgb(251,196,23)"/><text x="42.5131%" y="735.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (48 samples, 0.96%)</title><rect x="42.8229%" y="709" width="0.9596%" height="15" fill="rgb(250,152,24)"/><text x="43.0729%" y="719.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (48 samples, 0.96%)</title><rect x="42.8229%" y="693" width="0.9596%" height="15" fill="rgb(209,150,17)"/><text x="43.0729%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (48 samples, 0.96%)</title><rect x="42.8229%" y="677" width="0.9596%" height="15" fill="rgb(234,202,34)"/><text x="43.0729%" y="687.50"></text></g><g><title>std::sys_common::net::TcpStream::write (48 samples, 0.96%)</title><rect x="42.8229%" y="661" width="0.9596%" height="15" fill="rgb(253,148,53)"/><text x="43.0729%" y="671.50"></text></g><g><title>__libc_send (48 samples, 0.96%)</title><rect x="42.8229%" y="645" width="0.9596%" height="15" fill="rgb(218,129,16)"/><text x="43.0729%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (47 samples, 0.94%)</title><rect x="42.8429%" y="629" width="0.9396%" height="15" fill="rgb(216,85,19)"/><text x="43.0929%" y="639.50"></text></g><g><title>sk_wait_data (13 samples, 0.26%)</title><rect x="43.9624%" y="469" width="0.2599%" height="15" fill="rgb(235,228,7)"/><text x="44.2124%" y="479.50"></text></g><g><title>wait_woken (10 samples, 0.20%)</title><rect x="44.0224%" y="453" width="0.1999%" height="15" fill="rgb(245,175,0)"/><text x="44.2724%" y="463.50"></text></g><g><title>schedule_timeout (9 samples, 0.18%)</title><rect x="44.0424%" y="437" width="0.1799%" height="15" fill="rgb(208,168,36)"/><text x="44.2924%" y="447.50"></text></g><g><title>schedule (9 samples, 0.18%)</title><rect x="44.0424%" y="421" width="0.1799%" height="15" fill="rgb(246,171,24)"/><text x="44.2924%" y="431.50"></text></g><g><title>__schedule (9 samples, 0.18%)</title><rect x="44.0424%" y="405" width="0.1799%" height="15" fill="rgb(215,142,24)"/><text x="44.2924%" y="415.50"></text></g><g><title>__x64_sys_recvfrom (20 samples, 0.40%)</title><rect x="43.9024%" y="533" width="0.3998%" height="15" fill="rgb(250,187,7)"/><text x="44.1524%" y="543.50"></text></g><g><title>__sys_recvfrom (19 samples, 0.38%)</title><rect x="43.9224%" y="517" width="0.3798%" height="15" fill="rgb(228,66,33)"/><text x="44.1724%" y="527.50"></text></g><g><title>inet_recvmsg (19 samples, 0.38%)</title><rect x="43.9224%" y="501" width="0.3798%" height="15" fill="rgb(234,215,21)"/><text x="44.1724%" y="511.50"></text></g><g><title>tcp_recvmsg (19 samples, 0.38%)</title><rect x="43.9224%" y="485" width="0.3798%" height="15" fill="rgb(222,191,20)"/><text x="44.1724%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (22 samples, 0.44%)</title><rect x="43.8824%" y="565" width="0.4398%" height="15" fill="rgb(245,79,54)"/><text x="44.1324%" y="575.50"></text></g><g><title>do_syscall_64 (22 samples, 0.44%)</title><rect x="43.8824%" y="549" width="0.4398%" height="15" fill="rgb(240,10,37)"/><text x="44.1324%" y="559.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (29 samples, 0.58%)</title><rect x="43.7825%" y="709" width="0.5798%" height="15" fill="rgb(214,192,32)"/><text x="44.0325%" y="719.50"></text></g><g><title>mysql::conn::Conn::read_packet (26 samples, 0.52%)</title><rect x="43.8425%" y="693" width="0.5198%" height="15" fill="rgb(209,36,54)"/><text x="44.0925%" y="703.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.52%)</title><rect x="43.8425%" y="677" width="0.5198%" height="15" fill="rgb(220,10,11)"/><text x="44.0925%" y="687.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (25 samples, 0.50%)</title><rect x="43.8625%" y="661" width="0.4998%" height="15" fill="rgb(221,106,17)"/><text x="44.1125%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (25 samples, 0.50%)</title><rect x="43.8625%" y="645" width="0.4998%" height="15" fill="rgb(251,142,44)"/><text x="44.1125%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::read (25 samples, 0.50%)</title><rect x="43.8625%" y="629" width="0.4998%" height="15" fill="rgb(238,13,15)"/><text x="44.1125%" y="639.50"></text></g><g><title>std::sys::unix::net::Socket::read (25 samples, 0.50%)</title><rect x="43.8625%" y="613" width="0.4998%" height="15" fill="rgb(208,107,27)"/><text x="44.1125%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (25 samples, 0.50%)</title><rect x="43.8625%" y="597" width="0.4998%" height="15" fill="rgb(205,136,37)"/><text x="44.1125%" y="607.50"></text></g><g><title>__libc_recv (25 samples, 0.50%)</title><rect x="43.8625%" y="581" width="0.4998%" height="15" fill="rgb(250,205,27)"/><text x="44.1125%" y="591.50"></text></g><g><title>sock_def_readable (7 samples, 0.14%)</title><rect x="44.7421%" y="197" width="0.1399%" height="15" fill="rgb(210,80,43)"/><text x="44.9921%" y="207.50"></text></g><g><title>__wake_up_common_lock (6 samples, 0.12%)</title><rect x="44.7621%" y="181" width="0.1200%" height="15" fill="rgb(247,160,36)"/><text x="45.0121%" y="191.50"></text></g><g><title>net_rx_action (19 samples, 0.38%)</title><rect x="44.6022%" y="357" width="0.3798%" height="15" fill="rgb(234,13,49)"/><text x="44.8522%" y="367.50"></text></g><g><title>process_backlog (18 samples, 0.36%)</title><rect x="44.6222%" y="341" width="0.3599%" height="15" fill="rgb(234,122,0)"/><text x="44.8722%" y="351.50"></text></g><g><title>__netif_receive_skb_one_core (17 samples, 0.34%)</title><rect x="44.6421%" y="325" width="0.3399%" height="15" fill="rgb(207,146,38)"/><text x="44.8921%" y="335.50"></text></g><g><title>ip_rcv (16 samples, 0.32%)</title><rect x="44.6621%" y="309" width="0.3199%" height="15" fill="rgb(207,177,25)"/><text x="44.9121%" y="319.50"></text></g><g><title>ip_local_deliver (16 samples, 0.32%)</title><rect x="44.6621%" y="293" width="0.3199%" height="15" fill="rgb(211,178,42)"/><text x="44.9121%" y="303.50"></text></g><g><title>ip_local_deliver_finish (16 samples, 0.32%)</title><rect x="44.6621%" y="277" width="0.3199%" height="15" fill="rgb(230,69,54)"/><text x="44.9121%" y="287.50"></text></g><g><title>ip_protocol_deliver_rcu (16 samples, 0.32%)</title><rect x="44.6621%" y="261" width="0.3199%" height="15" fill="rgb(214,135,41)"/><text x="44.9121%" y="271.50"></text></g><g><title>tcp_v4_rcv (14 samples, 0.28%)</title><rect x="44.7021%" y="245" width="0.2799%" height="15" fill="rgb(237,67,25)"/><text x="44.9521%" y="255.50"></text></g><g><title>tcp_v4_do_rcv (13 samples, 0.26%)</title><rect x="44.7221%" y="229" width="0.2599%" height="15" fill="rgb(222,189,50)"/><text x="44.9721%" y="239.50"></text></g><g><title>tcp_rcv_established (13 samples, 0.26%)</title><rect x="44.7221%" y="213" width="0.2599%" height="15" fill="rgb(245,148,34)"/><text x="44.9721%" y="223.50"></text></g><g><title>__tcp_transmit_skb (27 samples, 0.54%)</title><rect x="44.4622%" y="485" width="0.5398%" height="15" fill="rgb(222,29,6)"/><text x="44.7122%" y="495.50"></text></g><g><title>__ip_queue_xmit (27 samples, 0.54%)</title><rect x="44.4622%" y="469" width="0.5398%" height="15" fill="rgb(221,189,43)"/><text x="44.7122%" y="479.50"></text></g><g><title>ip_output (26 samples, 0.52%)</title><rect x="44.4822%" y="453" width="0.5198%" height="15" fill="rgb(207,36,27)"/><text x="44.7322%" y="463.50"></text></g><g><title>ip_finish_output2 (26 samples, 0.52%)</title><rect x="44.4822%" y="437" width="0.5198%" height="15" fill="rgb(217,90,24)"/><text x="44.7322%" y="447.50"></text></g><g><title>__local_bh_enable_ip (23 samples, 0.46%)</title><rect x="44.5422%" y="421" width="0.4598%" height="15" fill="rgb(224,66,35)"/><text x="44.7922%" y="431.50"></text></g><g><title>do_softirq (23 samples, 0.46%)</title><rect x="44.5422%" y="405" width="0.4598%" height="15" fill="rgb(221,13,50)"/><text x="44.7922%" y="415.50"></text></g><g><title>do_softirq_own_stack (23 samples, 0.46%)</title><rect x="44.5422%" y="389" width="0.4598%" height="15" fill="rgb(236,68,49)"/><text x="44.7922%" y="399.50"></text></g><g><title>__do_softirq (23 samples, 0.46%)</title><rect x="44.5422%" y="373" width="0.4598%" height="15" fill="rgb(229,146,28)"/><text x="44.7922%" y="383.50"></text></g><g><title>__tcp_push_pending_frames (28 samples, 0.56%)</title><rect x="44.4622%" y="517" width="0.5598%" height="15" fill="rgb(225,31,38)"/><text x="44.7122%" y="527.50"></text></g><g><title>tcp_write_xmit (28 samples, 0.56%)</title><rect x="44.4622%" y="501" width="0.5598%" height="15" fill="rgb(250,208,3)"/><text x="44.7122%" y="511.50"></text></g><g><title>__x64_sys_sendto (34 samples, 0.68%)</title><rect x="44.4022%" y="597" width="0.6797%" height="15" fill="rgb(246,54,23)"/><text x="44.6522%" y="607.50"></text></g><g><title>__sys_sendto (34 samples, 0.68%)</title><rect x="44.4022%" y="581" width="0.6797%" height="15" fill="rgb(243,76,11)"/><text x="44.6522%" y="591.50"></text></g><g><title>sock_sendmsg (33 samples, 0.66%)</title><rect x="44.4222%" y="565" width="0.6597%" height="15" fill="rgb(245,21,50)"/><text x="44.6722%" y="575.50"></text></g><g><title>tcp_sendmsg (32 samples, 0.64%)</title><rect x="44.4422%" y="549" width="0.6397%" height="15" fill="rgb(228,9,43)"/><text x="44.6922%" y="559.50"></text></g><g><title>tcp_sendmsg_locked (31 samples, 0.62%)</title><rect x="44.4622%" y="533" width="0.6198%" height="15" fill="rgb(208,100,47)"/><text x="44.7122%" y="543.50"></text></g><g><title>do_syscall_64 (35 samples, 0.70%)</title><rect x="44.4022%" y="613" width="0.6997%" height="15" fill="rgb(232,26,8)"/><text x="44.6522%" y="623.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (67 samples, 1.34%)</title><rect x="43.7825%" y="741" width="1.3395%" height="15" fill="rgb(216,166,38)"/><text x="44.0325%" y="751.50"></text></g><g><title>mysql::conn::Conn::_query (67 samples, 1.34%)</title><rect x="43.7825%" y="725" width="1.3395%" height="15" fill="rgb(251,202,51)"/><text x="44.0325%" y="735.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (38 samples, 0.76%)</title><rect x="44.3623%" y="709" width="0.7597%" height="15" fill="rgb(254,216,34)"/><text x="44.6123%" y="719.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (37 samples, 0.74%)</title><rect x="44.3822%" y="693" width="0.7397%" height="15" fill="rgb(251,32,27)"/><text x="44.6322%" y="703.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (37 samples, 0.74%)</title><rect x="44.3822%" y="677" width="0.7397%" height="15" fill="rgb(208,127,28)"/><text x="44.6322%" y="687.50"></text></g><g><title>std::sys_common::net::TcpStream::write (37 samples, 0.74%)</title><rect x="44.3822%" y="661" width="0.7397%" height="15" fill="rgb(224,137,22)"/><text x="44.6322%" y="671.50"></text></g><g><title>__libc_send (37 samples, 0.74%)</title><rect x="44.3822%" y="645" width="0.7397%" height="15" fill="rgb(254,70,32)"/><text x="44.6322%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (36 samples, 0.72%)</title><rect x="44.4022%" y="629" width="0.7197%" height="15" fill="rgb(229,75,37)"/><text x="44.6522%" y="639.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (9 samples, 0.18%)</title><rect x="45.3818%" y="677" width="0.1799%" height="15" fill="rgb(252,64,23)"/><text x="45.6318%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (8 samples, 0.16%)</title><rect x="45.4018%" y="661" width="0.1599%" height="15" fill="rgb(232,162,48)"/><text x="45.6518%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="45.4418%" y="645" width="0.1200%" height="15" fill="rgb(246,160,12)"/><text x="45.6918%" y="655.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="45.4418%" y="629" width="0.1200%" height="15" fill="rgb(247,166,0)"/><text x="45.6918%" y="639.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (19 samples, 0.38%)</title><rect x="45.2019%" y="693" width="0.3798%" height="15" fill="rgb(249,219,21)"/><text x="45.4519%" y="703.50"></text></g><g><title>lobsters_microbenchmarks::main (170 samples, 3.40%)</title><rect x="42.2031%" y="773" width="3.3986%" height="15" fill="rgb(205,209,3)"/><text x="42.4531%" y="783.50">lob..</text></g><g><title>lobsters_microbenchmarks::queriers::user::unsubscribe_user (91 samples, 1.82%)</title><rect x="43.7825%" y="757" width="1.8193%" height="15" fill="rgb(243,44,1)"/><text x="44.0325%" y="767.50">l..</text></g><g><title>serde_json::de::from_str (20 samples, 0.40%)</title><rect x="45.2019%" y="741" width="0.3998%" height="15" fill="rgb(206,159,16)"/><text x="45.4519%" y="751.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (20 samples, 0.40%)</title><rect x="45.2019%" y="725" width="0.3998%" height="15" fill="rgb(244,77,30)"/><text x="45.4519%" y="735.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (20 samples, 0.40%)</title><rect x="45.2019%" y="709" width="0.3998%" height="15" fill="rgb(218,69,12)"/><text x="45.4519%" y="719.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (9 samples, 0.18%)</title><rect x="45.6218%" y="757" width="0.1799%" height="15" fill="rgb(212,87,7)"/><text x="45.8718%" y="767.50"></text></g><g><title>decor_mem::Shim::create_schema (9 samples, 0.18%)</title><rect x="45.6218%" y="741" width="0.1799%" height="15" fill="rgb(245,114,25)"/><text x="45.8718%" y="751.50"></text></g><g><title>sock_def_readable (6 samples, 0.12%)</title><rect x="46.0816%" y="165" width="0.1200%" height="15" fill="rgb(210,61,42)"/><text x="46.3316%" y="175.50"></text></g><g><title>__wake_up_common_lock (6 samples, 0.12%)</title><rect x="46.0816%" y="149" width="0.1200%" height="15" fill="rgb(211,52,33)"/><text x="46.3316%" y="159.50"></text></g><g><title>__wake_up_common (6 samples, 0.12%)</title><rect x="46.0816%" y="133" width="0.1200%" height="15" fill="rgb(234,58,33)"/><text x="46.3316%" y="143.50"></text></g><g><title>pollwake (6 samples, 0.12%)</title><rect x="46.0816%" y="117" width="0.1200%" height="15" fill="rgb(220,115,36)"/><text x="46.3316%" y="127.50"></text></g><g><title>try_to_wake_up (6 samples, 0.12%)</title><rect x="46.0816%" y="101" width="0.1200%" height="15" fill="rgb(243,153,54)"/><text x="46.3316%" y="111.50"></text></g><g><title>__ip_queue_xmit (21 samples, 0.42%)</title><rect x="45.8617%" y="437" width="0.4198%" height="15" fill="rgb(251,47,18)"/><text x="46.1117%" y="447.50"></text></g><g><title>ip_output (20 samples, 0.40%)</title><rect x="45.8816%" y="421" width="0.3998%" height="15" fill="rgb(242,102,42)"/><text x="46.1316%" y="431.50"></text></g><g><title>ip_finish_output2 (20 samples, 0.40%)</title><rect x="45.8816%" y="405" width="0.3998%" height="15" fill="rgb(234,31,38)"/><text x="46.1316%" y="415.50"></text></g><g><title>__local_bh_enable_ip (18 samples, 0.36%)</title><rect x="45.9216%" y="389" width="0.3599%" height="15" fill="rgb(221,117,51)"/><text x="46.1716%" y="399.50"></text></g><g><title>do_softirq (18 samples, 0.36%)</title><rect x="45.9216%" y="373" width="0.3599%" height="15" fill="rgb(212,20,18)"/><text x="46.1716%" y="383.50"></text></g><g><title>do_softirq_own_stack (17 samples, 0.34%)</title><rect x="45.9416%" y="357" width="0.3399%" height="15" fill="rgb(245,133,36)"/><text x="46.1916%" y="367.50"></text></g><g><title>__do_softirq (17 samples, 0.34%)</title><rect x="45.9416%" y="341" width="0.3399%" height="15" fill="rgb(212,6,19)"/><text x="46.1916%" y="351.50"></text></g><g><title>net_rx_action (16 samples, 0.32%)</title><rect x="45.9616%" y="325" width="0.3199%" height="15" fill="rgb(218,1,36)"/><text x="46.2116%" y="335.50"></text></g><g><title>process_backlog (16 samples, 0.32%)</title><rect x="45.9616%" y="309" width="0.3199%" height="15" fill="rgb(246,84,54)"/><text x="46.2116%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (16 samples, 0.32%)</title><rect x="45.9616%" y="293" width="0.3199%" height="15" fill="rgb(242,110,6)"/><text x="46.2116%" y="303.50"></text></g><g><title>ip_rcv (16 samples, 0.32%)</title><rect x="45.9616%" y="277" width="0.3199%" height="15" fill="rgb(214,47,5)"/><text x="46.2116%" y="287.50"></text></g><g><title>ip_local_deliver (16 samples, 0.32%)</title><rect x="45.9616%" y="261" width="0.3199%" height="15" fill="rgb(218,159,25)"/><text x="46.2116%" y="271.50"></text></g><g><title>ip_local_deliver_finish (16 samples, 0.32%)</title><rect x="45.9616%" y="245" width="0.3199%" height="15" fill="rgb(215,211,28)"/><text x="46.2116%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (16 samples, 0.32%)</title><rect x="45.9616%" y="229" width="0.3199%" height="15" fill="rgb(238,59,32)"/><text x="46.2116%" y="239.50"></text></g><g><title>tcp_v4_rcv (14 samples, 0.28%)</title><rect x="46.0016%" y="213" width="0.2799%" height="15" fill="rgb(226,82,3)"/><text x="46.2516%" y="223.50"></text></g><g><title>tcp_v4_do_rcv (12 samples, 0.24%)</title><rect x="46.0416%" y="197" width="0.2399%" height="15" fill="rgb(240,164,32)"/><text x="46.2916%" y="207.50"></text></g><g><title>tcp_rcv_established (12 samples, 0.24%)</title><rect x="46.0416%" y="181" width="0.2399%" height="15" fill="rgb(232,46,7)"/><text x="46.2916%" y="191.50"></text></g><g><title>__tcp_push_pending_frames (22 samples, 0.44%)</title><rect x="45.8617%" y="485" width="0.4398%" height="15" fill="rgb(229,129,53)"/><text x="46.1117%" y="495.50"></text></g><g><title>tcp_write_xmit (22 samples, 0.44%)</title><rect x="45.8617%" y="469" width="0.4398%" height="15" fill="rgb(234,188,29)"/><text x="46.1117%" y="479.50"></text></g><g><title>__tcp_transmit_skb (22 samples, 0.44%)</title><rect x="45.8617%" y="453" width="0.4398%" height="15" fill="rgb(246,141,4)"/><text x="46.1117%" y="463.50"></text></g><g><title>do_syscall_64 (27 samples, 0.54%)</title><rect x="45.8617%" y="581" width="0.5398%" height="15" fill="rgb(229,23,39)"/><text x="46.1117%" y="591.50"></text></g><g><title>__x64_sys_sendto (27 samples, 0.54%)</title><rect x="45.8617%" y="565" width="0.5398%" height="15" fill="rgb(206,12,3)"/><text x="46.1117%" y="575.50"></text></g><g><title>__sys_sendto (27 samples, 0.54%)</title><rect x="45.8617%" y="549" width="0.5398%" height="15" fill="rgb(252,226,20)"/><text x="46.1117%" y="559.50"></text></g><g><title>sock_sendmsg (27 samples, 0.54%)</title><rect x="45.8617%" y="533" width="0.5398%" height="15" fill="rgb(216,123,35)"/><text x="46.1117%" y="543.50"></text></g><g><title>tcp_sendmsg (27 samples, 0.54%)</title><rect x="45.8617%" y="517" width="0.5398%" height="15" fill="rgb(212,68,40)"/><text x="46.1117%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (27 samples, 0.54%)</title><rect x="45.8617%" y="501" width="0.5398%" height="15" fill="rgb(254,125,32)"/><text x="46.1117%" y="511.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (32 samples, 0.64%)</title><rect x="45.8017%" y="709" width="0.6397%" height="15" fill="rgb(253,97,22)"/><text x="46.0517%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (31 samples, 0.62%)</title><rect x="45.8217%" y="693" width="0.6198%" height="15" fill="rgb(241,101,14)"/><text x="46.0717%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (31 samples, 0.62%)</title><rect x="45.8217%" y="677" width="0.6198%" height="15" fill="rgb(238,103,29)"/><text x="46.0717%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (29 samples, 0.58%)</title><rect x="45.8617%" y="661" width="0.5798%" height="15" fill="rgb(233,195,47)"/><text x="46.1117%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (29 samples, 0.58%)</title><rect x="45.8617%" y="645" width="0.5798%" height="15" fill="rgb(246,218,30)"/><text x="46.1117%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (29 samples, 0.58%)</title><rect x="45.8617%" y="629" width="0.5798%" height="15" fill="rgb(219,145,47)"/><text x="46.1117%" y="639.50"></text></g><g><title>__libc_send (29 samples, 0.58%)</title><rect x="45.8617%" y="613" width="0.5798%" height="15" fill="rgb(243,12,26)"/><text x="46.1117%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (29 samples, 0.58%)</title><rect x="45.8617%" y="597" width="0.5798%" height="15" fill="rgb(214,87,16)"/><text x="46.1117%" y="607.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="46.5214%" y="677" width="0.1200%" height="15" fill="rgb(208,99,42)"/><text x="46.7714%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="46.5214%" y="661" width="0.1200%" height="15" fill="rgb(253,99,2)"/><text x="46.7714%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (10 samples, 0.20%)</title><rect x="46.6413%" y="677" width="0.1999%" height="15" fill="rgb(220,168,23)"/><text x="46.8913%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (9 samples, 0.18%)</title><rect x="46.6613%" y="661" width="0.1799%" height="15" fill="rgb(242,38,24)"/><text x="46.9113%" y="671.50"></text></g><g><title>page_fault (10 samples, 0.20%)</title><rect x="46.9212%" y="613" width="0.1999%" height="15" fill="rgb(225,182,9)"/><text x="47.1712%" y="623.50"></text></g><g><title>do_user_addr_fault (10 samples, 0.20%)</title><rect x="46.9212%" y="597" width="0.1999%" height="15" fill="rgb(243,178,37)"/><text x="47.1712%" y="607.50"></text></g><g><title>handle_mm_fault (10 samples, 0.20%)</title><rect x="46.9212%" y="581" width="0.1999%" height="15" fill="rgb(232,139,19)"/><text x="47.1712%" y="591.50"></text></g><g><title>__handle_mm_fault (8 samples, 0.16%)</title><rect x="46.9612%" y="565" width="0.1599%" height="15" fill="rgb(225,201,24)"/><text x="47.2112%" y="575.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (68 samples, 1.36%)</title><rect x="45.8017%" y="741" width="1.3595%" height="15" fill="rgb(221,47,46)"/><text x="46.0517%" y="751.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (68 samples, 1.36%)</title><rect x="45.8017%" y="725" width="1.3595%" height="15" fill="rgb(249,23,13)"/><text x="46.0517%" y="735.50"></text></g><g><title>decor_mem::views::Views::insert (32 samples, 0.64%)</title><rect x="46.5214%" y="709" width="0.6397%" height="15" fill="rgb(219,9,5)"/><text x="46.7714%" y="719.50"></text></g><g><title>decor_mem::views::View::insert_into_index (32 samples, 0.64%)</title><rect x="46.5214%" y="693" width="0.6397%" height="15" fill="rgb(254,171,16)"/><text x="46.7714%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (16 samples, 0.32%)</title><rect x="46.8413%" y="677" width="0.3199%" height="15" fill="rgb(230,171,20)"/><text x="47.0913%" y="687.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.32%)</title><rect x="46.8413%" y="661" width="0.3199%" height="15" fill="rgb(210,71,41)"/><text x="47.0913%" y="671.50"></text></g><g><title>_int_malloc (16 samples, 0.32%)</title><rect x="46.8413%" y="645" width="0.3199%" height="15" fill="rgb(206,173,20)"/><text x="47.0913%" y="655.50"></text></g><g><title>sysmalloc (16 samples, 0.32%)</title><rect x="46.8413%" y="629" width="0.3199%" height="15" fill="rgb(233,88,34)"/><text x="47.0913%" y="639.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (78 samples, 1.56%)</title><rect x="45.6218%" y="773" width="1.5594%" height="15" fill="rgb(223,209,46)"/><text x="45.8718%" y="783.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (69 samples, 1.38%)</title><rect x="45.8017%" y="757" width="1.3794%" height="15" fill="rgb(250,43,18)"/><text x="46.0517%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="47.2611%" y="693" width="0.1399%" height="15" fill="rgb(208,13,10)"/><text x="47.5111%" y="703.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="47.2811%" y="677" width="0.1200%" height="15" fill="rgb(212,200,36)"/><text x="47.5311%" y="687.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="47.2811%" y="661" width="0.1200%" height="15" fill="rgb(225,90,30)"/><text x="47.5311%" y="671.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="47.2811%" y="645" width="0.1200%" height="15" fill="rgb(236,182,39)"/><text x="47.5311%" y="655.50"></text></g><g><title>sysmalloc (6 samples, 0.12%)</title><rect x="47.2811%" y="629" width="0.1200%" height="15" fill="rgb(212,144,35)"/><text x="47.5311%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (7 samples, 0.14%)</title><rect x="47.6809%" y="661" width="0.1399%" height="15" fill="rgb(228,63,44)"/><text x="47.9309%" y="671.50"></text></g><g><title>__memset_avx2_erms (6 samples, 0.12%)</title><rect x="47.7009%" y="645" width="0.1200%" height="15" fill="rgb(228,109,6)"/><text x="47.9509%" y="655.50"></text></g><g><title>decor_mem::views::View::insert_into_index (12 samples, 0.24%)</title><rect x="47.6210%" y="677" width="0.2399%" height="15" fill="rgb(238,117,24)"/><text x="47.8710%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (35 samples, 0.70%)</title><rect x="47.1811%" y="725" width="0.6997%" height="15" fill="rgb(242,26,26)"/><text x="47.4311%" y="735.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (35 samples, 0.70%)</title><rect x="47.1811%" y="709" width="0.6997%" height="15" fill="rgb(221,92,48)"/><text x="47.4311%" y="719.50"></text></g><g><title>decor_mem::views::Views::insert (17 samples, 0.34%)</title><rect x="47.5410%" y="693" width="0.3399%" height="15" fill="rgb(209,209,32)"/><text x="47.7910%" y="703.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (38 samples, 0.76%)</title><rect x="47.1811%" y="741" width="0.7597%" height="15" fill="rgb(221,70,22)"/><text x="47.4311%" y="751.50"></text></g><g><title>sk_wait_data (12 samples, 0.24%)</title><rect x="48.0608%" y="421" width="0.2399%" height="15" fill="rgb(248,145,5)"/><text x="48.3108%" y="431.50"></text></g><g><title>wait_woken (11 samples, 0.22%)</title><rect x="48.0808%" y="405" width="0.2199%" height="15" fill="rgb(226,116,26)"/><text x="48.3308%" y="415.50"></text></g><g><title>schedule_timeout (11 samples, 0.22%)</title><rect x="48.0808%" y="389" width="0.2199%" height="15" fill="rgb(244,5,17)"/><text x="48.3308%" y="399.50"></text></g><g><title>schedule (11 samples, 0.22%)</title><rect x="48.0808%" y="373" width="0.2199%" height="15" fill="rgb(252,159,33)"/><text x="48.3308%" y="383.50"></text></g><g><title>__schedule (10 samples, 0.20%)</title><rect x="48.1008%" y="357" width="0.1999%" height="15" fill="rgb(206,71,0)"/><text x="48.3508%" y="367.50"></text></g><g><title>inet_recvmsg (16 samples, 0.32%)</title><rect x="48.0408%" y="453" width="0.3199%" height="15" fill="rgb(233,118,54)"/><text x="48.2908%" y="463.50"></text></g><g><title>tcp_recvmsg (16 samples, 0.32%)</title><rect x="48.0408%" y="437" width="0.3199%" height="15" fill="rgb(234,83,48)"/><text x="48.2908%" y="447.50"></text></g><g><title>do_syscall_64 (19 samples, 0.38%)</title><rect x="48.0008%" y="501" width="0.3798%" height="15" fill="rgb(228,3,54)"/><text x="48.2508%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (19 samples, 0.38%)</title><rect x="48.0008%" y="485" width="0.3798%" height="15" fill="rgb(226,155,13)"/><text x="48.2508%" y="495.50"></text></g><g><title>__sys_recvfrom (19 samples, 0.38%)</title><rect x="48.0008%" y="469" width="0.3798%" height="15" fill="rgb(241,28,37)"/><text x="48.2508%" y="479.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (23 samples, 0.46%)</title><rect x="47.9408%" y="709" width="0.4598%" height="15" fill="rgb(233,93,10)"/><text x="48.1908%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (23 samples, 0.46%)</title><rect x="47.9408%" y="693" width="0.4598%" height="15" fill="rgb(225,113,19)"/><text x="48.1908%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (23 samples, 0.46%)</title><rect x="47.9408%" y="677" width="0.4598%" height="15" fill="rgb(241,2,18)"/><text x="48.1908%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (23 samples, 0.46%)</title><rect x="47.9408%" y="661" width="0.4598%" height="15" fill="rgb(228,207,21)"/><text x="48.1908%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (23 samples, 0.46%)</title><rect x="47.9408%" y="645" width="0.4598%" height="15" fill="rgb(213,211,35)"/><text x="48.1908%" y="655.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.46%)</title><rect x="47.9408%" y="629" width="0.4598%" height="15" fill="rgb(209,83,10)"/><text x="48.1908%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (23 samples, 0.46%)</title><rect x="47.9408%" y="613" width="0.4598%" height="15" fill="rgb(209,164,1)"/><text x="48.1908%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (23 samples, 0.46%)</title><rect x="47.9408%" y="597" width="0.4598%" height="15" fill="rgb(213,184,43)"/><text x="48.1908%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (23 samples, 0.46%)</title><rect x="47.9408%" y="581" width="0.4598%" height="15" fill="rgb(231,61,34)"/><text x="48.1908%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (23 samples, 0.46%)</title><rect x="47.9408%" y="565" width="0.4598%" height="15" fill="rgb(235,75,3)"/><text x="48.1908%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (23 samples, 0.46%)</title><rect x="47.9408%" y="549" width="0.4598%" height="15" fill="rgb(220,106,47)"/><text x="48.1908%" y="559.50"></text></g><g><title>__libc_recv (23 samples, 0.46%)</title><rect x="47.9408%" y="533" width="0.4598%" height="15" fill="rgb(210,196,33)"/><text x="48.1908%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (20 samples, 0.40%)</title><rect x="48.0008%" y="517" width="0.3998%" height="15" fill="rgb(229,154,42)"/><text x="48.2508%" y="527.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.14%)</title><rect x="48.8005%" y="341" width="0.1399%" height="15" fill="rgb(228,114,26)"/><text x="49.0505%" y="351.50"></text></g><g><title>sk_wait_data (19 samples, 0.38%)</title><rect x="48.6605%" y="421" width="0.3798%" height="15" fill="rgb(208,144,1)"/><text x="48.9105%" y="431.50"></text></g><g><title>wait_woken (14 samples, 0.28%)</title><rect x="48.7605%" y="405" width="0.2799%" height="15" fill="rgb(239,112,37)"/><text x="49.0105%" y="415.50"></text></g><g><title>schedule_timeout (14 samples, 0.28%)</title><rect x="48.7605%" y="389" width="0.2799%" height="15" fill="rgb(210,96,50)"/><text x="49.0105%" y="399.50"></text></g><g><title>schedule (14 samples, 0.28%)</title><rect x="48.7605%" y="373" width="0.2799%" height="15" fill="rgb(222,178,2)"/><text x="49.0105%" y="383.50"></text></g><g><title>__schedule (14 samples, 0.28%)</title><rect x="48.7605%" y="357" width="0.2799%" height="15" fill="rgb(226,74,18)"/><text x="49.0105%" y="367.50"></text></g><g><title>inet_recvmsg (31 samples, 0.62%)</title><rect x="48.5406%" y="453" width="0.6198%" height="15" fill="rgb(225,67,54)"/><text x="48.7906%" y="463.50"></text></g><g><title>tcp_recvmsg (31 samples, 0.62%)</title><rect x="48.5406%" y="437" width="0.6198%" height="15" fill="rgb(251,92,32)"/><text x="48.7906%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (32 samples, 0.64%)</title><rect x="48.5406%" y="485" width="0.6397%" height="15" fill="rgb(228,149,22)"/><text x="48.7906%" y="495.50"></text></g><g><title>__sys_recvfrom (32 samples, 0.64%)</title><rect x="48.5406%" y="469" width="0.6397%" height="15" fill="rgb(243,54,13)"/><text x="48.7906%" y="479.50"></text></g><g><title>do_syscall_64 (34 samples, 0.68%)</title><rect x="48.5406%" y="501" width="0.6797%" height="15" fill="rgb(243,180,28)"/><text x="48.7906%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (36 samples, 0.72%)</title><rect x="48.5406%" y="613" width="0.7197%" height="15" fill="rgb(208,167,24)"/><text x="48.7906%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (36 samples, 0.72%)</title><rect x="48.5406%" y="597" width="0.7197%" height="15" fill="rgb(245,73,45)"/><text x="48.7906%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (36 samples, 0.72%)</title><rect x="48.5406%" y="581" width="0.7197%" height="15" fill="rgb(237,203,48)"/><text x="48.7906%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (36 samples, 0.72%)</title><rect x="48.5406%" y="565" width="0.7197%" height="15" fill="rgb(211,197,16)"/><text x="48.7906%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (36 samples, 0.72%)</title><rect x="48.5406%" y="549" width="0.7197%" height="15" fill="rgb(243,99,51)"/><text x="48.7906%" y="559.50"></text></g><g><title>__libc_recv (36 samples, 0.72%)</title><rect x="48.5406%" y="533" width="0.7197%" height="15" fill="rgb(215,123,29)"/><text x="48.7906%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (36 samples, 0.72%)</title><rect x="48.5406%" y="517" width="0.7197%" height="15" fill="rgb(239,186,37)"/><text x="48.7906%" y="527.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.82%)</title><rect x="48.5406%" y="629" width="0.8197%" height="15" fill="rgb(252,136,39)"/><text x="48.7906%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (48 samples, 0.96%)</title><rect x="48.4806%" y="661" width="0.9596%" height="15" fill="rgb(223,213,32)"/><text x="48.7306%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (47 samples, 0.94%)</title><rect x="48.5006%" y="645" width="0.9396%" height="15" fill="rgb(233,115,5)"/><text x="48.7506%" y="655.50"></text></g><g><title>__dev_queue_xmit (8 samples, 0.16%)</title><rect x="49.7401%" y="373" width="0.1599%" height="15" fill="rgb(207,226,44)"/><text x="49.9901%" y="383.50"></text></g><g><title>__wake_up_common (9 samples, 0.18%)</title><rect x="50.1200%" y="117" width="0.1799%" height="15" fill="rgb(208,126,0)"/><text x="50.3700%" y="127.50"></text></g><g><title>pollwake (8 samples, 0.16%)</title><rect x="50.1399%" y="101" width="0.1599%" height="15" fill="rgb(244,66,21)"/><text x="50.3899%" y="111.50"></text></g><g><title>try_to_wake_up (8 samples, 0.16%)</title><rect x="50.1399%" y="85" width="0.1599%" height="15" fill="rgb(222,97,12)"/><text x="50.3899%" y="95.50"></text></g><g><title>sock_def_readable (10 samples, 0.20%)</title><rect x="50.1200%" y="149" width="0.1999%" height="15" fill="rgb(219,213,19)"/><text x="50.3700%" y="159.50"></text></g><g><title>__wake_up_common_lock (10 samples, 0.20%)</title><rect x="50.1200%" y="133" width="0.1999%" height="15" fill="rgb(252,169,30)"/><text x="50.3700%" y="143.50"></text></g><g><title>ip_finish_output2 (34 samples, 0.68%)</title><rect x="49.7001%" y="389" width="0.6797%" height="15" fill="rgb(206,32,51)"/><text x="49.9501%" y="399.50"></text></g><g><title>__local_bh_enable_ip (24 samples, 0.48%)</title><rect x="49.9000%" y="373" width="0.4798%" height="15" fill="rgb(250,172,42)"/><text x="50.1500%" y="383.50"></text></g><g><title>do_softirq (23 samples, 0.46%)</title><rect x="49.9200%" y="357" width="0.4598%" height="15" fill="rgb(209,34,43)"/><text x="50.1700%" y="367.50"></text></g><g><title>do_softirq_own_stack (23 samples, 0.46%)</title><rect x="49.9200%" y="341" width="0.4598%" height="15" fill="rgb(223,11,35)"/><text x="50.1700%" y="351.50"></text></g><g><title>__do_softirq (23 samples, 0.46%)</title><rect x="49.9200%" y="325" width="0.4598%" height="15" fill="rgb(251,219,26)"/><text x="50.1700%" y="335.50"></text></g><g><title>net_rx_action (22 samples, 0.44%)</title><rect x="49.9400%" y="309" width="0.4398%" height="15" fill="rgb(231,119,3)"/><text x="50.1900%" y="319.50"></text></g><g><title>process_backlog (22 samples, 0.44%)</title><rect x="49.9400%" y="293" width="0.4398%" height="15" fill="rgb(216,97,11)"/><text x="50.1900%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (21 samples, 0.42%)</title><rect x="49.9600%" y="277" width="0.4198%" height="15" fill="rgb(223,59,9)"/><text x="50.2100%" y="287.50"></text></g><g><title>ip_rcv (19 samples, 0.38%)</title><rect x="50.0000%" y="261" width="0.3798%" height="15" fill="rgb(233,93,31)"/><text x="50.2500%" y="271.50"></text></g><g><title>ip_local_deliver (18 samples, 0.36%)</title><rect x="50.0200%" y="245" width="0.3599%" height="15" fill="rgb(239,81,33)"/><text x="50.2700%" y="255.50"></text></g><g><title>ip_local_deliver_finish (18 samples, 0.36%)</title><rect x="50.0200%" y="229" width="0.3599%" height="15" fill="rgb(213,120,34)"/><text x="50.2700%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (18 samples, 0.36%)</title><rect x="50.0200%" y="213" width="0.3599%" height="15" fill="rgb(243,49,53)"/><text x="50.2700%" y="223.50"></text></g><g><title>tcp_v4_rcv (15 samples, 0.30%)</title><rect x="50.0800%" y="197" width="0.2999%" height="15" fill="rgb(247,216,33)"/><text x="50.3300%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (13 samples, 0.26%)</title><rect x="50.1200%" y="181" width="0.2599%" height="15" fill="rgb(226,26,14)"/><text x="50.3700%" y="191.50"></text></g><g><title>tcp_rcv_established (13 samples, 0.26%)</title><rect x="50.1200%" y="165" width="0.2599%" height="15" fill="rgb(215,49,53)"/><text x="50.3700%" y="175.50"></text></g><g><title>__ip_queue_xmit (39 samples, 0.78%)</title><rect x="49.6202%" y="421" width="0.7797%" height="15" fill="rgb(245,162,40)"/><text x="49.8702%" y="431.50"></text></g><g><title>ip_output (36 samples, 0.72%)</title><rect x="49.6801%" y="405" width="0.7197%" height="15" fill="rgb(229,68,17)"/><text x="49.9301%" y="415.50"></text></g><g><title>__tcp_transmit_skb (42 samples, 0.84%)</title><rect x="49.6002%" y="437" width="0.8397%" height="15" fill="rgb(213,182,10)"/><text x="49.8502%" y="447.50"></text></g><g><title>__tcp_push_pending_frames (44 samples, 0.88%)</title><rect x="49.6002%" y="469" width="0.8796%" height="15" fill="rgb(245,125,30)"/><text x="49.8502%" y="479.50"></text></g><g><title>tcp_write_xmit (44 samples, 0.88%)</title><rect x="49.6002%" y="453" width="0.8796%" height="15" fill="rgb(232,202,2)"/><text x="49.8502%" y="463.50"></text></g><g><title>sock_sendmsg (53 samples, 1.06%)</title><rect x="49.5202%" y="517" width="1.0596%" height="15" fill="rgb(237,140,51)"/><text x="49.7702%" y="527.50"></text></g><g><title>tcp_sendmsg (52 samples, 1.04%)</title><rect x="49.5402%" y="501" width="1.0396%" height="15" fill="rgb(236,157,25)"/><text x="49.7902%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (50 samples, 1.00%)</title><rect x="49.5802%" y="485" width="0.9996%" height="15" fill="rgb(219,209,0)"/><text x="49.8302%" y="495.50"></text></g><g><title>do_syscall_64 (55 samples, 1.10%)</title><rect x="49.5002%" y="565" width="1.0996%" height="15" fill="rgb(240,116,54)"/><text x="49.7502%" y="575.50"></text></g><g><title>__x64_sys_sendto (55 samples, 1.10%)</title><rect x="49.5002%" y="549" width="1.0996%" height="15" fill="rgb(216,10,36)"/><text x="49.7502%" y="559.50"></text></g><g><title>__sys_sendto (55 samples, 1.10%)</title><rect x="49.5002%" y="533" width="1.0996%" height="15" fill="rgb(222,72,44)"/><text x="49.7502%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (58 samples, 1.16%)</title><rect x="49.4802%" y="581" width="1.1595%" height="15" fill="rgb(232,159,9)"/><text x="49.7302%" y="591.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (113 samples, 2.26%)</title><rect x="48.4006%" y="693" width="2.2591%" height="15" fill="rgb(210,39,32)"/><text x="48.6506%" y="703.50">d..</text></g><g><title>mysql::conn::Conn::_query (109 samples, 2.18%)</title><rect x="48.4806%" y="677" width="2.1791%" height="15" fill="rgb(216,194,45)"/><text x="48.7306%" y="687.50">m..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (61 samples, 1.22%)</title><rect x="49.4402%" y="661" width="1.2195%" height="15" fill="rgb(218,18,35)"/><text x="49.6902%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (60 samples, 1.20%)</title><rect x="49.4602%" y="645" width="1.1995%" height="15" fill="rgb(207,83,51)"/><text x="49.7102%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (60 samples, 1.20%)</title><rect x="49.4602%" y="629" width="1.1995%" height="15" fill="rgb(225,63,43)"/><text x="49.7102%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (60 samples, 1.20%)</title><rect x="49.4602%" y="613" width="1.1995%" height="15" fill="rgb(207,57,36)"/><text x="49.7102%" y="623.50"></text></g><g><title>__libc_send (60 samples, 1.20%)</title><rect x="49.4602%" y="597" width="1.1995%" height="15" fill="rgb(216,99,33)"/><text x="49.7102%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.24%)</title><rect x="50.6597%" y="613" width="0.2399%" height="15" fill="rgb(225,42,16)"/><text x="50.9097%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="50.7197%" y="597" width="0.1799%" height="15" fill="rgb(220,201,45)"/><text x="50.9697%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="50.7397%" y="581" width="0.1599%" height="15" fill="rgb(225,33,4)"/><text x="50.9897%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.16%)</title><rect x="50.7397%" y="565" width="0.1599%" height="15" fill="rgb(224,33,50)"/><text x="50.9897%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.16%)</title><rect x="50.7397%" y="549" width="0.1599%" height="15" fill="rgb(246,198,51)"/><text x="50.9897%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="50.7797%" y="533" width="0.1200%" height="15" fill="rgb(205,22,4)"/><text x="51.0297%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="50.7797%" y="517" width="0.1200%" height="15" fill="rgb(206,3,8)"/><text x="51.0297%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="50.7797%" y="501" width="0.1200%" height="15" fill="rgb(251,23,15)"/><text x="51.0297%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="50.7797%" y="485" width="0.1200%" height="15" fill="rgb(252,88,28)"/><text x="51.0297%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.12%)</title><rect x="50.7797%" y="469" width="0.1200%" height="15" fill="rgb(212,127,14)"/><text x="51.0297%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.12%)</title><rect x="50.7797%" y="453" width="0.1200%" height="15" fill="rgb(247,145,37)"/><text x="51.0297%" y="463.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.12%)</title><rect x="50.7797%" y="437" width="0.1200%" height="15" fill="rgb(209,117,53)"/><text x="51.0297%" y="447.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.14%)</title><rect x="50.8996%" y="533" width="0.1399%" height="15" fill="rgb(212,90,42)"/><text x="51.1496%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (6 samples, 0.12%)</title><rect x="50.9196%" y="517" width="0.1200%" height="15" fill="rgb(218,164,37)"/><text x="51.1696%" y="527.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (6 samples, 0.12%)</title><rect x="50.9196%" y="501" width="0.1200%" height="15" fill="rgb(246,65,34)"/><text x="51.1696%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (6 samples, 0.12%)</title><rect x="50.9196%" y="485" width="0.1200%" height="15" fill="rgb(231,100,33)"/><text x="51.1696%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.20%)</title><rect x="50.8996%" y="565" width="0.1999%" height="15" fill="rgb(228,126,14)"/><text x="51.1496%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (10 samples, 0.20%)</title><rect x="50.8996%" y="549" width="0.1999%" height="15" fill="rgb(215,173,21)"/><text x="51.1496%" y="559.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (25 samples, 0.50%)</title><rect x="50.6597%" y="645" width="0.4998%" height="15" fill="rgb(210,6,40)"/><text x="50.9097%" y="655.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (25 samples, 0.50%)</title><rect x="50.6597%" y="629" width="0.4998%" height="15" fill="rgb(212,48,18)"/><text x="50.9097%" y="639.50"></text></g><g><title>decor_mem::helpers::expr_to_col (13 samples, 0.26%)</title><rect x="50.8996%" y="613" width="0.2599%" height="15" fill="rgb(230,214,11)"/><text x="51.1496%" y="623.50"></text></g><g><title>core::fmt::write (13 samples, 0.26%)</title><rect x="50.8996%" y="597" width="0.2599%" height="15" fill="rgb(254,105,39)"/><text x="51.1496%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (13 samples, 0.26%)</title><rect x="50.8996%" y="581" width="0.2599%" height="15" fill="rgb(245,158,5)"/><text x="51.1496%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.20%)</title><rect x="51.1595%" y="629" width="0.1999%" height="15" fill="rgb(249,208,11)"/><text x="51.4095%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="51.1595%" y="613" width="0.1999%" height="15" fill="rgb(210,39,28)"/><text x="51.4095%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="51.1595%" y="597" width="0.1999%" height="15" fill="rgb(211,56,53)"/><text x="51.4095%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.20%)</title><rect x="51.1595%" y="581" width="0.1999%" height="15" fill="rgb(226,201,30)"/><text x="51.4095%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.20%)</title><rect x="51.1595%" y="565" width="0.1999%" height="15" fill="rgb(239,101,34)"/><text x="51.4095%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="51.1595%" y="549" width="0.1999%" height="15" fill="rgb(226,209,5)"/><text x="51.4095%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="51.1595%" y="533" width="0.1999%" height="15" fill="rgb(250,105,47)"/><text x="51.4095%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.20%)</title><rect x="51.1595%" y="517" width="0.1999%" height="15" fill="rgb(230,72,3)"/><text x="51.4095%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.20%)</title><rect x="51.1595%" y="501" width="0.1999%" height="15" fill="rgb(232,218,39)"/><text x="51.4095%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.20%)</title><rect x="51.1595%" y="485" width="0.1999%" height="15" fill="rgb(248,166,6)"/><text x="51.4095%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.20%)</title><rect x="51.1595%" y="469" width="0.1999%" height="15" fill="rgb(247,89,20)"/><text x="51.4095%" y="479.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.20%)</title><rect x="51.1595%" y="453" width="0.1999%" height="15" fill="rgb(248,130,54)"/><text x="51.4095%" y="463.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="51.1595%" y="437" width="0.1999%" height="15" fill="rgb(234,196,4)"/><text x="51.4095%" y="447.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="51.1595%" y="421" width="0.1999%" height="15" fill="rgb(250,143,31)"/><text x="51.4095%" y="431.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (6 samples, 0.12%)</title><rect x="51.7393%" y="485" width="0.1200%" height="15" fill="rgb(211,110,34)"/><text x="51.9893%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (23 samples, 0.46%)</title><rect x="51.4194%" y="581" width="0.4598%" height="15" fill="rgb(215,124,48)"/><text x="51.6694%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (23 samples, 0.46%)</title><rect x="51.4194%" y="565" width="0.4598%" height="15" fill="rgb(216,46,13)"/><text x="51.6694%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (17 samples, 0.34%)</title><rect x="51.5394%" y="549" width="0.3399%" height="15" fill="rgb(205,184,25)"/><text x="51.7894%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (14 samples, 0.28%)</title><rect x="51.5994%" y="533" width="0.2799%" height="15" fill="rgb(228,1,10)"/><text x="51.8494%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (13 samples, 0.26%)</title><rect x="51.6194%" y="517" width="0.2599%" height="15" fill="rgb(213,116,27)"/><text x="51.8694%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (13 samples, 0.26%)</title><rect x="51.6194%" y="501" width="0.2599%" height="15" fill="rgb(241,95,50)"/><text x="51.8694%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (27 samples, 0.54%)</title><rect x="51.3994%" y="597" width="0.5398%" height="15" fill="rgb(238,48,32)"/><text x="51.6494%" y="607.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (65 samples, 1.30%)</title><rect x="50.6597%" y="661" width="1.2995%" height="15" fill="rgb(235,113,49)"/><text x="50.9097%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (40 samples, 0.80%)</title><rect x="51.1595%" y="645" width="0.7997%" height="15" fill="rgb(205,127,43)"/><text x="51.4095%" y="655.50"></text></g><g><title>decor_mem::helpers::expr_to_col (30 samples, 0.60%)</title><rect x="51.3595%" y="629" width="0.5998%" height="15" fill="rgb(250,162,2)"/><text x="51.6095%" y="639.50"></text></g><g><title>core::fmt::write (30 samples, 0.60%)</title><rect x="51.3595%" y="613" width="0.5998%" height="15" fill="rgb(220,13,41)"/><text x="51.6095%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (6 samples, 0.12%)</title><rect x="51.9592%" y="565" width="0.1200%" height="15" fill="rgb(249,221,25)"/><text x="52.2092%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.14%)</title><rect x="51.9592%" y="597" width="0.1399%" height="15" fill="rgb(215,208,19)"/><text x="52.2092%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (7 samples, 0.14%)</title><rect x="51.9592%" y="581" width="0.1399%" height="15" fill="rgb(236,175,2)"/><text x="52.2092%" y="591.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (74 samples, 1.48%)</title><rect x="50.6597%" y="677" width="1.4794%" height="15" fill="rgb(241,52,2)"/><text x="50.9097%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (9 samples, 0.18%)</title><rect x="51.9592%" y="661" width="0.1799%" height="15" fill="rgb(248,140,14)"/><text x="52.2092%" y="671.50"></text></g><g><title>decor_mem::helpers::expr_to_col (9 samples, 0.18%)</title><rect x="51.9592%" y="645" width="0.1799%" height="15" fill="rgb(253,22,42)"/><text x="52.2092%" y="655.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="51.9592%" y="629" width="0.1799%" height="15" fill="rgb(234,61,47)"/><text x="52.2092%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="51.9592%" y="613" width="0.1799%" height="15" fill="rgb(208,226,15)"/><text x="52.2092%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.98%)</title><rect x="52.1591%" y="613" width="0.9796%" height="15" fill="rgb(217,221,4)"/><text x="52.4091%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (7 samples, 0.14%)</title><rect x="53.3187%" y="597" width="0.1399%" height="15" fill="rgb(212,174,34)"/><text x="53.5687%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (69 samples, 1.38%)</title><rect x="52.1391%" y="629" width="1.3794%" height="15" fill="rgb(253,83,4)"/><text x="52.3891%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (15 samples, 0.30%)</title><rect x="53.2187%" y="613" width="0.2999%" height="15" fill="rgb(250,195,49)"/><text x="53.4687%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (92 samples, 1.84%)</title><rect x="52.1391%" y="645" width="1.8393%" height="15" fill="rgb(241,192,25)"/><text x="52.3891%" y="655.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (23 samples, 0.46%)</title><rect x="53.5186%" y="629" width="0.4598%" height="15" fill="rgb(208,124,10)"/><text x="53.7686%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (7 samples, 0.14%)</title><rect x="53.8385%" y="613" width="0.1399%" height="15" fill="rgb(222,33,0)"/><text x="54.0885%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="54.5582%" y="581" width="0.1200%" height="15" fill="rgb(234,209,28)"/><text x="54.8082%" y="591.50"></text></g><g><title>core::fmt::write (36 samples, 0.72%)</title><rect x="53.9784%" y="645" width="0.7197%" height="15" fill="rgb(224,11,23)"/><text x="54.2284%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (36 samples, 0.72%)</title><rect x="53.9784%" y="629" width="0.7197%" height="15" fill="rgb(232,99,1)"/><text x="54.2284%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (27 samples, 0.54%)</title><rect x="54.1583%" y="613" width="0.5398%" height="15" fill="rgb(237,95,45)"/><text x="54.4083%" y="623.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="54.5382%" y="597" width="0.1599%" height="15" fill="rgb(208,109,11)"/><text x="54.7882%" y="607.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs_from_view (19 samples, 0.38%)</title><rect x="54.7181%" y="645" width="0.3798%" height="15" fill="rgb(216,190,48)"/><text x="54.9681%" y="655.50"></text></g><g><title>decor_mem::select::predicates::pred_matches_row (19 samples, 0.38%)</title><rect x="54.7181%" y="629" width="0.3798%" height="15" fill="rgb(251,171,36)"/><text x="54.9681%" y="639.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.26%)</title><rect x="55.9576%" y="613" width="0.2599%" height="15" fill="rgb(230,62,22)"/><text x="56.2076%" y="623.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="56.0176%" y="597" width="0.1999%" height="15" fill="rgb(225,114,35)"/><text x="56.2676%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (32 samples, 0.64%)</title><rect x="56.2175%" y="613" width="0.6397%" height="15" fill="rgb(215,118,42)"/><text x="56.4675%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (80 samples, 1.60%)</title><rect x="55.4578%" y="629" width="1.5994%" height="15" fill="rgb(243,119,21)"/><text x="55.7078%" y="639.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.12%)</title><rect x="57.1371%" y="629" width="0.1200%" height="15" fill="rgb(252,177,53)"/><text x="57.3871%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.12%)</title><rect x="57.3171%" y="629" width="0.1200%" height="15" fill="rgb(237,209,29)"/><text x="57.5671%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (17 samples, 0.34%)</title><rect x="57.4370%" y="629" width="0.3399%" height="15" fill="rgb(212,65,23)"/><text x="57.6870%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="57.6369%" y="613" width="0.1399%" height="15" fill="rgb(230,222,46)"/><text x="57.8869%" y="623.50"></text></g><g><title>decor_mem::views::View::get_indexed_rptrs_of_col (143 samples, 2.86%)</title><rect x="55.0980%" y="645" width="2.8589%" height="15" fill="rgb(215,135,32)"/><text x="55.3480%" y="655.50">de..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (9 samples, 0.18%)</title><rect x="57.7769%" y="629" width="0.1799%" height="15" fill="rgb(246,101,22)"/><text x="58.0269%" y="639.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (367 samples, 7.34%)</title><rect x="50.6597%" y="693" width="7.3371%" height="15" fill="rgb(206,107,13)"/><text x="50.9097%" y="703.50">decor_mem:..</text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (293 samples, 5.86%)</title><rect x="52.1391%" y="677" width="5.8577%" height="15" fill="rgb(250,100,44)"/><text x="52.3891%" y="687.50">decor_m..</text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (293 samples, 5.86%)</title><rect x="52.1391%" y="661" width="5.8577%" height="15" fill="rgb(231,147,38)"/><text x="52.3891%" y="671.50">decor_m..</text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (6 samples, 0.12%)</title><rect x="57.9968%" y="661" width="0.1200%" height="15" fill="rgb(229,8,40)"/><text x="58.2468%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (6 samples, 0.12%)</title><rect x="57.9968%" y="645" width="0.1200%" height="15" fill="rgb(221,135,30)"/><text x="58.2468%" y="655.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (8 samples, 0.16%)</title><rect x="58.1168%" y="645" width="0.1599%" height="15" fill="rgb(249,193,18)"/><text x="58.3668%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.16%)</title><rect x="58.1168%" y="629" width="0.1599%" height="15" fill="rgb(209,133,39)"/><text x="58.3668%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (8 samples, 0.16%)</title><rect x="58.1168%" y="613" width="0.1599%" height="15" fill="rgb(232,100,14)"/><text x="58.3668%" y="623.50"></text></g><g><title>decor_mem::select::predicates::NamedPredicate::to_indexed_predicate (6 samples, 0.12%)</title><rect x="58.2767%" y="645" width="0.1200%" height="15" fill="rgb(224,185,1)"/><text x="58.5267%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="58.2767%" y="629" width="0.1200%" height="15" fill="rgb(223,139,8)"/><text x="58.5267%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.12%)</title><rect x="58.2767%" y="613" width="0.1200%" height="15" fill="rgb(232,213,38)"/><text x="58.5267%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.14%)</title><rect x="58.4766%" y="613" width="0.1399%" height="15" fill="rgb(207,94,22)"/><text x="58.7266%" y="623.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (19 samples, 0.38%)</title><rect x="58.4766%" y="629" width="0.3798%" height="15" fill="rgb(219,183,54)"/><text x="58.7266%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (10 samples, 0.20%)</title><rect x="58.6565%" y="613" width="0.1999%" height="15" fill="rgb(216,185,54)"/><text x="58.9065%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.14%)</title><rect x="58.7165%" y="597" width="0.1399%" height="15" fill="rgb(254,217,39)"/><text x="58.9665%" y="607.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="58.8764%" y="629" width="0.1799%" height="15" fill="rgb(240,178,23)"/><text x="59.1264%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="58.8964%" y="613" width="0.1599%" height="15" fill="rgb(218,11,47)"/><text x="59.1464%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.12%)</title><rect x="59.2363%" y="613" width="0.1200%" height="15" fill="rgb(218,51,51)"/><text x="59.4863%" y="623.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (575 samples, 11.50%)</title><rect x="47.9408%" y="741" width="11.4954%" height="15" fill="rgb(238,126,27)"/><text x="48.1908%" y="751.50">&lt;decor_mem::Shim ..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (575 samples, 11.50%)</title><rect x="47.9408%" y="725" width="11.4954%" height="15" fill="rgb(249,202,22)"/><text x="48.1908%" y="735.50">decor_mem::query_..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (552 samples, 11.04%)</title><rect x="48.4006%" y="709" width="11.0356%" height="15" fill="rgb(254,195,49)"/><text x="48.6506%" y="719.50">decor_mem::query..</text></g><g><title>decor_mem::views::Views::delete (72 samples, 1.44%)</title><rect x="57.9968%" y="693" width="1.4394%" height="15" fill="rgb(208,123,14)"/><text x="58.2468%" y="703.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (72 samples, 1.44%)</title><rect x="57.9968%" y="677" width="1.4394%" height="15" fill="rgb(224,200,8)"/><text x="58.2468%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (66 samples, 1.32%)</title><rect x="58.1168%" y="661" width="1.3195%" height="15" fill="rgb(217,61,36)"/><text x="58.3668%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (52 samples, 1.04%)</title><rect x="58.3966%" y="645" width="1.0396%" height="15" fill="rgb(206,35,45)"/><text x="58.6466%" y="655.50"></text></g><g><title>decor_mem::views::View::get_indexed_rptrs_of_col (18 samples, 0.36%)</title><rect x="59.0764%" y="629" width="0.3599%" height="15" fill="rgb(217,65,33)"/><text x="59.3264%" y="639.50"></text></g><g><title>sk_wait_data (11 samples, 0.22%)</title><rect x="59.6561%" y="421" width="0.2199%" height="15" fill="rgb(222,158,48)"/><text x="59.9061%" y="431.50"></text></g><g><title>wait_woken (10 samples, 0.20%)</title><rect x="59.6761%" y="405" width="0.1999%" height="15" fill="rgb(254,2,54)"/><text x="59.9261%" y="415.50"></text></g><g><title>schedule_timeout (9 samples, 0.18%)</title><rect x="59.6961%" y="389" width="0.1799%" height="15" fill="rgb(250,143,38)"/><text x="59.9461%" y="399.50"></text></g><g><title>schedule (9 samples, 0.18%)</title><rect x="59.6961%" y="373" width="0.1799%" height="15" fill="rgb(248,25,0)"/><text x="59.9461%" y="383.50"></text></g><g><title>__schedule (9 samples, 0.18%)</title><rect x="59.6961%" y="357" width="0.1799%" height="15" fill="rgb(206,152,27)"/><text x="59.9461%" y="367.50"></text></g><g><title>entry_SYSCALL_64 (20 samples, 0.40%)</title><rect x="59.5362%" y="517" width="0.3998%" height="15" fill="rgb(240,77,30)"/><text x="59.7862%" y="527.50"></text></g><g><title>do_syscall_64 (20 samples, 0.40%)</title><rect x="59.5362%" y="501" width="0.3998%" height="15" fill="rgb(231,5,3)"/><text x="59.7862%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (20 samples, 0.40%)</title><rect x="59.5362%" y="485" width="0.3998%" height="15" fill="rgb(207,226,32)"/><text x="59.7862%" y="495.50"></text></g><g><title>__sys_recvfrom (20 samples, 0.40%)</title><rect x="59.5362%" y="469" width="0.3998%" height="15" fill="rgb(222,207,47)"/><text x="59.7862%" y="479.50"></text></g><g><title>inet_recvmsg (20 samples, 0.40%)</title><rect x="59.5362%" y="453" width="0.3998%" height="15" fill="rgb(229,115,45)"/><text x="59.7862%" y="463.50"></text></g><g><title>tcp_recvmsg (20 samples, 0.40%)</title><rect x="59.5362%" y="437" width="0.3998%" height="15" fill="rgb(224,191,6)"/><text x="59.7862%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (22 samples, 0.44%)</title><rect x="59.5162%" y="613" width="0.4398%" height="15" fill="rgb(230,227,24)"/><text x="59.7662%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (22 samples, 0.44%)</title><rect x="59.5162%" y="597" width="0.4398%" height="15" fill="rgb(228,80,19)"/><text x="59.7662%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (22 samples, 0.44%)</title><rect x="59.5162%" y="581" width="0.4398%" height="15" fill="rgb(247,229,0)"/><text x="59.7662%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (22 samples, 0.44%)</title><rect x="59.5162%" y="565" width="0.4398%" height="15" fill="rgb(237,194,15)"/><text x="59.7662%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (22 samples, 0.44%)</title><rect x="59.5162%" y="549" width="0.4398%" height="15" fill="rgb(219,203,20)"/><text x="59.7662%" y="559.50"></text></g><g><title>__libc_recv (22 samples, 0.44%)</title><rect x="59.5162%" y="533" width="0.4398%" height="15" fill="rgb(234,128,8)"/><text x="59.7662%" y="543.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.52%)</title><rect x="59.4962%" y="629" width="0.5198%" height="15" fill="rgb(248,202,8)"/><text x="59.7462%" y="639.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (30 samples, 0.60%)</title><rect x="59.4362%" y="709" width="0.5998%" height="15" fill="rgb(206,104,37)"/><text x="59.6862%" y="719.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (30 samples, 0.60%)</title><rect x="59.4362%" y="693" width="0.5998%" height="15" fill="rgb(223,8,27)"/><text x="59.6862%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (30 samples, 0.60%)</title><rect x="59.4362%" y="677" width="0.5998%" height="15" fill="rgb(216,217,28)"/><text x="59.6862%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (30 samples, 0.60%)</title><rect x="59.4362%" y="661" width="0.5998%" height="15" fill="rgb(249,199,1)"/><text x="59.6862%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (28 samples, 0.56%)</title><rect x="59.4762%" y="645" width="0.5598%" height="15" fill="rgb(240,85,17)"/><text x="59.7262%" y="655.50"></text></g><g><title>__schedule (17 samples, 0.34%)</title><rect x="60.2359%" y="357" width="0.3399%" height="15" fill="rgb(206,108,45)"/><text x="60.4859%" y="367.50"></text></g><g><title>sk_wait_data (22 samples, 0.44%)</title><rect x="60.1759%" y="421" width="0.4398%" height="15" fill="rgb(245,210,41)"/><text x="60.4259%" y="431.50"></text></g><g><title>wait_woken (20 samples, 0.40%)</title><rect x="60.2159%" y="405" width="0.3998%" height="15" fill="rgb(206,13,37)"/><text x="60.4659%" y="415.50"></text></g><g><title>schedule_timeout (20 samples, 0.40%)</title><rect x="60.2159%" y="389" width="0.3998%" height="15" fill="rgb(250,61,18)"/><text x="60.4659%" y="399.50"></text></g><g><title>schedule (19 samples, 0.38%)</title><rect x="60.2359%" y="373" width="0.3798%" height="15" fill="rgb(235,172,48)"/><text x="60.4859%" y="383.50"></text></g><g><title>__x64_sys_recvfrom (27 samples, 0.54%)</title><rect x="60.1160%" y="485" width="0.5398%" height="15" fill="rgb(249,201,17)"/><text x="60.3660%" y="495.50"></text></g><g><title>__sys_recvfrom (27 samples, 0.54%)</title><rect x="60.1160%" y="469" width="0.5398%" height="15" fill="rgb(219,208,6)"/><text x="60.3660%" y="479.50"></text></g><g><title>inet_recvmsg (27 samples, 0.54%)</title><rect x="60.1160%" y="453" width="0.5398%" height="15" fill="rgb(248,31,23)"/><text x="60.3660%" y="463.50"></text></g><g><title>tcp_recvmsg (26 samples, 0.52%)</title><rect x="60.1359%" y="437" width="0.5198%" height="15" fill="rgb(245,15,42)"/><text x="60.3859%" y="447.50"></text></g><g><title>do_syscall_64 (28 samples, 0.56%)</title><rect x="60.1160%" y="501" width="0.5598%" height="15" fill="rgb(222,217,39)"/><text x="60.3660%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (36 samples, 0.72%)</title><rect x="60.0760%" y="613" width="0.7197%" height="15" fill="rgb(210,219,27)"/><text x="60.3260%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (36 samples, 0.72%)</title><rect x="60.0760%" y="597" width="0.7197%" height="15" fill="rgb(252,166,36)"/><text x="60.3260%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (36 samples, 0.72%)</title><rect x="60.0760%" y="581" width="0.7197%" height="15" fill="rgb(245,132,34)"/><text x="60.3260%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (36 samples, 0.72%)</title><rect x="60.0760%" y="565" width="0.7197%" height="15" fill="rgb(236,54,3)"/><text x="60.3260%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (36 samples, 0.72%)</title><rect x="60.0760%" y="549" width="0.7197%" height="15" fill="rgb(241,173,43)"/><text x="60.3260%" y="559.50"></text></g><g><title>__libc_recv (36 samples, 0.72%)</title><rect x="60.0760%" y="533" width="0.7197%" height="15" fill="rgb(215,190,9)"/><text x="60.3260%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (34 samples, 0.68%)</title><rect x="60.1160%" y="517" width="0.6797%" height="15" fill="rgb(242,101,16)"/><text x="60.3660%" y="527.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.12%)</title><rect x="60.6757%" y="501" width="0.1200%" height="15" fill="rgb(223,190,21)"/><text x="60.9257%" y="511.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.78%)</title><rect x="60.0560%" y="629" width="0.7797%" height="15" fill="rgb(215,228,25)"/><text x="60.3060%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (41 samples, 0.82%)</title><rect x="60.0360%" y="645" width="0.8197%" height="15" fill="rgb(225,36,22)"/><text x="60.2860%" y="655.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (44 samples, 0.88%)</title><rect x="60.0360%" y="693" width="0.8796%" height="15" fill="rgb(251,106,46)"/><text x="60.2860%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (44 samples, 0.88%)</title><rect x="60.0360%" y="677" width="0.8796%" height="15" fill="rgb(208,90,1)"/><text x="60.2860%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (44 samples, 0.88%)</title><rect x="60.0360%" y="661" width="0.8796%" height="15" fill="rgb(243,10,4)"/><text x="60.2860%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicate_sets_of_constraint (9 samples, 0.18%)</title><rect x="60.9156%" y="661" width="0.1799%" height="15" fill="rgb(212,137,27)"/><text x="61.1656%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicates_of_constraint (9 samples, 0.18%)</title><rect x="60.9156%" y="645" width="0.1799%" height="15" fill="rgb(231,220,49)"/><text x="61.1656%" y="655.50"></text></g><g><title>decor_mem::helpers::expr_to_col (6 samples, 0.12%)</title><rect x="60.9756%" y="629" width="0.1200%" height="15" fill="rgb(237,96,20)"/><text x="61.2256%" y="639.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="60.9756%" y="613" width="0.1200%" height="15" fill="rgb(239,229,30)"/><text x="61.2256%" y="623.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (18 samples, 0.36%)</title><rect x="60.9156%" y="677" width="0.3599%" height="15" fill="rgb(219,65,33)"/><text x="61.1656%" y="687.50"></text></g><g><title>decor_mem::select::predicates::get_rptrs_matching_preds (9 samples, 0.18%)</title><rect x="61.0956%" y="661" width="0.1799%" height="15" fill="rgb(243,134,7)"/><text x="61.3456%" y="671.50"></text></g><g><title>decor_mem::select::predicates::get_predicated_rptrs (9 samples, 0.18%)</title><rect x="61.0956%" y="645" width="0.1799%" height="15" fill="rgb(216,177,54)"/><text x="61.3456%" y="655.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (707 samples, 14.13%)</title><rect x="47.1811%" y="773" width="14.1343%" height="15" fill="rgb(211,160,20)"/><text x="47.4311%" y="783.50">msql_srv::MysqlInterm..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (707 samples, 14.13%)</title><rect x="47.1811%" y="757" width="14.1343%" height="15" fill="rgb(239,85,39)"/><text x="47.4311%" y="767.50">msql_srv::MysqlInterm..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (94 samples, 1.88%)</title><rect x="59.4362%" y="741" width="1.8792%" height="15" fill="rgb(232,125,22)"/><text x="59.6862%" y="751.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (94 samples, 1.88%)</title><rect x="59.4362%" y="725" width="1.8792%" height="15" fill="rgb(244,57,34)"/><text x="59.6862%" y="735.50">d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (64 samples, 1.28%)</title><rect x="60.0360%" y="709" width="1.2795%" height="15" fill="rgb(214,203,32)"/><text x="60.2860%" y="719.50"></text></g><g><title>decor_mem::views::Views::delete (20 samples, 0.40%)</title><rect x="60.9156%" y="693" width="0.3998%" height="15" fill="rgb(207,58,43)"/><text x="61.1656%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (30 samples, 0.60%)</title><rect x="61.6154%" y="693" width="0.5998%" height="15" fill="rgb(215,193,15)"/><text x="61.8654%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::expected (30 samples, 0.60%)</title><rect x="61.6154%" y="677" width="0.5998%" height="15" fill="rgb(232,15,44)"/><text x="61.8654%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 0.56%)</title><rect x="61.6553%" y="661" width="0.5598%" height="15" fill="rgb(212,3,48)"/><text x="61.9053%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.56%)</title><rect x="61.6553%" y="645" width="0.5598%" height="15" fill="rgb(218,128,7)"/><text x="61.9053%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.56%)</title><rect x="61.6553%" y="629" width="0.5598%" height="15" fill="rgb(226,216,39)"/><text x="61.9053%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.56%)</title><rect x="61.6553%" y="613" width="0.5598%" height="15" fill="rgb(243,47,51)"/><text x="61.9053%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (28 samples, 0.56%)</title><rect x="61.6553%" y="597" width="0.5598%" height="15" fill="rgb(241,183,40)"/><text x="61.9053%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 0.56%)</title><rect x="61.6553%" y="581" width="0.5598%" height="15" fill="rgb(231,217,32)"/><text x="61.9053%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (28 samples, 0.56%)</title><rect x="61.6553%" y="565" width="0.5598%" height="15" fill="rgb(229,61,38)"/><text x="61.9053%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.56%)</title><rect x="61.6553%" y="549" width="0.5598%" height="15" fill="rgb(225,210,5)"/><text x="61.9053%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (28 samples, 0.56%)</title><rect x="61.6553%" y="533" width="0.5598%" height="15" fill="rgb(231,79,45)"/><text x="61.9053%" y="543.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 0.72%)</title><rect x="61.5554%" y="773" width="0.7197%" height="15" fill="rgb(224,100,7)"/><text x="61.8054%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (36 samples, 0.72%)</title><rect x="61.5554%" y="757" width="0.7197%" height="15" fill="rgb(241,198,18)"/><text x="61.8054%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (36 samples, 0.72%)</title><rect x="61.5554%" y="741" width="0.7197%" height="15" fill="rgb(252,97,53)"/><text x="61.8054%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 0.72%)</title><rect x="61.5554%" y="725" width="0.7197%" height="15" fill="rgb(220,88,7)"/><text x="61.8054%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (36 samples, 0.72%)</title><rect x="61.5554%" y="709" width="0.7197%" height="15" fill="rgb(213,176,14)"/><text x="61.8054%" y="719.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="62.6549%" y="581" width="0.1599%" height="15" fill="rgb(246,73,7)"/><text x="62.9049%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.14%)</title><rect x="62.6749%" y="565" width="0.1399%" height="15" fill="rgb(245,64,36)"/><text x="62.9249%" y="575.50"></text></g><g><title>__alloc_pages_nodemask (18 samples, 0.36%)</title><rect x="63.2747%" y="469" width="0.3599%" height="15" fill="rgb(245,80,10)"/><text x="63.5247%" y="479.50"></text></g><g><title>get_page_from_freelist (17 samples, 0.34%)</title><rect x="63.2947%" y="453" width="0.3399%" height="15" fill="rgb(232,107,50)"/><text x="63.5447%" y="463.50"></text></g><g><title>prep_new_page (12 samples, 0.24%)</title><rect x="63.3946%" y="437" width="0.2399%" height="15" fill="rgb(253,3,0)"/><text x="63.6446%" y="447.50"></text></g><g><title>kernel_init_free_pages (12 samples, 0.24%)</title><rect x="63.3946%" y="421" width="0.2399%" height="15" fill="rgb(212,99,53)"/><text x="63.6446%" y="431.50"></text></g><g><title>clear_page_erms (11 samples, 0.22%)</title><rect x="63.4146%" y="405" width="0.2199%" height="15" fill="rgb(249,111,54)"/><text x="63.6646%" y="415.50"></text></g><g><title>alloc_pages_vma (19 samples, 0.38%)</title><rect x="63.2747%" y="485" width="0.3798%" height="15" fill="rgb(249,55,30)"/><text x="63.5247%" y="495.50"></text></g><g><title>mem_cgroup_try_charge_delay (6 samples, 0.12%)</title><rect x="63.6545%" y="485" width="0.1200%" height="15" fill="rgb(237,47,42)"/><text x="63.9045%" y="495.50"></text></g><g><title>page_fault (39 samples, 0.78%)</title><rect x="63.0548%" y="549" width="0.7797%" height="15" fill="rgb(211,20,18)"/><text x="63.3048%" y="559.50"></text></g><g><title>do_user_addr_fault (37 samples, 0.74%)</title><rect x="63.0948%" y="533" width="0.7397%" height="15" fill="rgb(231,203,46)"/><text x="63.3448%" y="543.50"></text></g><g><title>handle_mm_fault (35 samples, 0.70%)</title><rect x="63.1347%" y="517" width="0.6997%" height="15" fill="rgb(237,142,3)"/><text x="63.3847%" y="527.50"></text></g><g><title>__handle_mm_fault (34 samples, 0.68%)</title><rect x="63.1547%" y="501" width="0.6797%" height="15" fill="rgb(241,107,1)"/><text x="63.4047%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (64 samples, 1.28%)</title><rect x="62.8149%" y="581" width="1.2795%" height="15" fill="rgb(229,83,13)"/><text x="63.0649%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (59 samples, 1.18%)</title><rect x="62.9148%" y="565" width="1.1795%" height="15" fill="rgb(241,91,40)"/><text x="63.1648%" y="575.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (13 samples, 0.26%)</title><rect x="63.8345%" y="549" width="0.2599%" height="15" fill="rgb(225,3,45)"/><text x="64.0845%" y="559.50"></text></g><g><title>prepare_exit_to_usermode (9 samples, 0.18%)</title><rect x="63.9144%" y="533" width="0.1799%" height="15" fill="rgb(244,223,14)"/><text x="64.1644%" y="543.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (85 samples, 1.70%)</title><rect x="62.6150%" y="597" width="1.6993%" height="15" fill="rgb(224,124,37)"/><text x="62.8650%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (11 samples, 0.22%)</title><rect x="64.0944%" y="581" width="0.2199%" height="15" fill="rgb(251,171,30)"/><text x="64.3444%" y="591.50"></text></g><g><title>decor_mem::views::View::insert_into_index (19 samples, 0.38%)</title><rect x="64.3343%" y="581" width="0.3798%" height="15" fill="rgb(236,46,54)"/><text x="64.5843%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.18%)</title><rect x="64.5342%" y="565" width="0.1799%" height="15" fill="rgb(245,213,5)"/><text x="64.7842%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.14%)</title><rect x="64.8541%" y="549" width="0.1399%" height="15" fill="rgb(230,144,27)"/><text x="65.1041%" y="559.50"></text></g><g><title>decor_mem::views::Views::insert (36 samples, 0.72%)</title><rect x="64.3143%" y="597" width="0.7197%" height="15" fill="rgb(220,86,6)"/><text x="64.5643%" y="607.50"></text></g><g><title>decor_mem::views::View::insert_row (16 samples, 0.32%)</title><rect x="64.7141%" y="581" width="0.3199%" height="15" fill="rgb(240,20,13)"/><text x="64.9641%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.18%)</title><rect x="64.8541%" y="565" width="0.1799%" height="15" fill="rgb(217,89,34)"/><text x="65.1041%" y="575.50"></text></g><g><title>start_thread (132 samples, 2.64%)</title><rect x="62.4550%" y="773" width="2.6389%" height="15" fill="rgb(229,13,5)"/><text x="62.7050%" y="783.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (132 samples, 2.64%)</title><rect x="62.4550%" y="757" width="2.6389%" height="15" fill="rgb(244,67,35)"/><text x="62.7050%" y="767.50">st..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (132 samples, 2.64%)</title><rect x="62.4550%" y="741" width="2.6389%" height="15" fill="rgb(221,40,2)"/><text x="62.7050%" y="751.50">&lt;a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (132 samples, 2.64%)</title><rect x="62.4550%" y="725" width="2.6389%" height="15" fill="rgb(237,157,21)"/><text x="62.7050%" y="735.50">&lt;a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (132 samples, 2.64%)</title><rect x="62.4550%" y="709" width="2.6389%" height="15" fill="rgb(222,94,11)"/><text x="62.7050%" y="719.50">co..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (132 samples, 2.64%)</title><rect x="62.4550%" y="693" width="2.6389%" height="15" fill="rgb(249,113,6)"/><text x="62.7050%" y="703.50">st..</text></g><g><title>decor_mem::Shim::run_on_tcp (132 samples, 2.64%)</title><rect x="62.4550%" y="677" width="2.6389%" height="15" fill="rgb(238,137,36)"/><text x="62.7050%" y="687.50">de..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (132 samples, 2.64%)</title><rect x="62.4550%" y="661" width="2.6389%" height="15" fill="rgb(210,102,26)"/><text x="62.7050%" y="671.50">ms..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (132 samples, 2.64%)</title><rect x="62.4550%" y="645" width="2.6389%" height="15" fill="rgb(218,30,30)"/><text x="62.7050%" y="655.50">ms..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (132 samples, 2.64%)</title><rect x="62.4550%" y="629" width="2.6389%" height="15" fill="rgb(214,67,26)"/><text x="62.7050%" y="639.50">&lt;d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (132 samples, 2.64%)</title><rect x="62.4550%" y="613" width="2.6389%" height="15" fill="rgb(251,9,53)"/><text x="62.7050%" y="623.50">de..</text></g><g><title>std::rt::lang_start_internal (8 samples, 0.16%)</title><rect x="65.1939%" y="773" width="0.1599%" height="15" fill="rgb(228,204,25)"/><text x="65.4439%" y="783.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.16%)</title><rect x="65.1939%" y="757" width="0.1599%" height="15" fill="rgb(207,153,8)"/><text x="65.4439%" y="767.50"></text></g><g><title>std::panicking::try (8 samples, 0.16%)</title><rect x="65.1939%" y="741" width="0.1599%" height="15" fill="rgb(242,9,16)"/><text x="65.4439%" y="751.50"></text></g><g><title>std::panicking::try::do_call (8 samples, 0.16%)</title><rect x="65.1939%" y="725" width="0.1599%" height="15" fill="rgb(217,211,10)"/><text x="65.4439%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8 samples, 0.16%)</title><rect x="65.1939%" y="709" width="0.1599%" height="15" fill="rgb(219,228,52)"/><text x="65.4439%" y="719.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (8 samples, 0.16%)</title><rect x="65.1939%" y="693" width="0.1599%" height="15" fill="rgb(231,92,29)"/><text x="65.4439%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.16%)</title><rect x="65.1939%" y="677" width="0.1599%" height="15" fill="rgb(232,8,23)"/><text x="65.4439%" y="687.50"></text></g><g><title>lobsters_microbenchmarks::main (8 samples, 0.16%)</title><rect x="65.1939%" y="661" width="0.1599%" height="15" fill="rgb(216,211,34)"/><text x="65.4439%" y="671.50"></text></g><g><title>__GI___mprotect (7 samples, 0.14%)</title><rect x="65.4938%" y="533" width="0.1399%" height="15" fill="rgb(236,151,0)"/><text x="65.7438%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (7 samples, 0.14%)</title><rect x="65.4938%" y="517" width="0.1399%" height="15" fill="rgb(209,168,3)"/><text x="65.7438%" y="527.50"></text></g><g><title>do_syscall_64 (7 samples, 0.14%)</title><rect x="65.4938%" y="501" width="0.1399%" height="15" fill="rgb(208,129,28)"/><text x="65.7438%" y="511.50"></text></g><g><title>__x64_sys_mprotect (7 samples, 0.14%)</title><rect x="65.4938%" y="485" width="0.1399%" height="15" fill="rgb(229,78,22)"/><text x="65.7438%" y="495.50"></text></g><g><title>do_mprotect_pkey (7 samples, 0.14%)</title><rect x="65.4938%" y="469" width="0.1399%" height="15" fill="rgb(228,187,13)"/><text x="65.7438%" y="479.50"></text></g><g><title>mprotect_fixup (6 samples, 0.12%)</title><rect x="65.5138%" y="453" width="0.1200%" height="15" fill="rgb(240,119,24)"/><text x="65.7638%" y="463.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (17 samples, 0.34%)</title><rect x="65.3539%" y="613" width="0.3399%" height="15" fill="rgb(209,194,42)"/><text x="65.6039%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (10 samples, 0.20%)</title><rect x="65.4938%" y="597" width="0.1999%" height="15" fill="rgb(247,200,46)"/><text x="65.7438%" y="607.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.20%)</title><rect x="65.4938%" y="581" width="0.1999%" height="15" fill="rgb(218,76,16)"/><text x="65.7438%" y="591.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="65.4938%" y="565" width="0.1999%" height="15" fill="rgb(225,21,48)"/><text x="65.7438%" y="575.50"></text></g><g><title>sysmalloc (10 samples, 0.20%)</title><rect x="65.4938%" y="549" width="0.1999%" height="15" fill="rgb(239,223,50)"/><text x="65.7438%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.14%)</title><rect x="65.8137%" y="581" width="0.1399%" height="15" fill="rgb(244,45,21)"/><text x="66.0637%" y="591.50"></text></g><g><title>decor_mem::views::View::insert_into_index (21 samples, 0.42%)</title><rect x="65.6937%" y="597" width="0.4198%" height="15" fill="rgb(232,33,43)"/><text x="65.9437%" y="607.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (41 samples, 0.82%)</title><rect x="65.3539%" y="773" width="0.8197%" height="15" fill="rgb(209,8,3)"/><text x="65.6039%" y="783.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (41 samples, 0.82%)</title><rect x="65.3539%" y="757" width="0.8197%" height="15" fill="rgb(214,25,53)"/><text x="65.6039%" y="767.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (41 samples, 0.82%)</title><rect x="65.3539%" y="741" width="0.8197%" height="15" fill="rgb(254,186,54)"/><text x="65.6039%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (41 samples, 0.82%)</title><rect x="65.3539%" y="725" width="0.8197%" height="15" fill="rgb(208,174,49)"/><text x="65.6039%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (41 samples, 0.82%)</title><rect x="65.3539%" y="709" width="0.8197%" height="15" fill="rgb(233,191,51)"/><text x="65.6039%" y="719.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (41 samples, 0.82%)</title><rect x="65.3539%" y="693" width="0.8197%" height="15" fill="rgb(222,134,10)"/><text x="65.6039%" y="703.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (41 samples, 0.82%)</title><rect x="65.3539%" y="677" width="0.8197%" height="15" fill="rgb(230,226,20)"/><text x="65.6039%" y="687.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (41 samples, 0.82%)</title><rect x="65.3539%" y="661" width="0.8197%" height="15" fill="rgb(251,111,25)"/><text x="65.6039%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (41 samples, 0.82%)</title><rect x="65.3539%" y="645" width="0.8197%" height="15" fill="rgb(224,40,46)"/><text x="65.6039%" y="655.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (41 samples, 0.82%)</title><rect x="65.3539%" y="629" width="0.8197%" height="15" fill="rgb(236,108,47)"/><text x="65.6039%" y="639.50"></text></g><g><title>decor_mem::views::Views::insert (24 samples, 0.48%)</title><rect x="65.6937%" y="613" width="0.4798%" height="15" fill="rgb(234,93,0)"/><text x="65.9437%" y="623.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="66.4934%" y="661" width="0.1200%" height="15" fill="rgb(224,213,32)"/><text x="66.7434%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="66.4934%" y="645" width="0.1200%" height="15" fill="rgb(251,11,48)"/><text x="66.7434%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="66.6134%" y="661" width="0.1399%" height="15" fill="rgb(236,173,5)"/><text x="66.8634%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (36 samples, 0.72%)</title><rect x="66.2335%" y="677" width="0.7197%" height="15" fill="rgb(230,95,12)"/><text x="66.4835%" y="687.50"></text></g><g><title>decor_mem::views::Views::insert (7 samples, 0.14%)</title><rect x="66.8133%" y="661" width="0.1399%" height="15" fill="rgb(232,209,1)"/><text x="67.0633%" y="671.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.44%)</title><rect x="67.5330%" y="661" width="0.4398%" height="15" fill="rgb(232,6,1)"/><text x="67.7830%" y="671.50"></text></g><g><title>_int_realloc (7 samples, 0.14%)</title><rect x="67.8329%" y="645" width="0.1399%" height="15" fill="rgb(210,224,50)"/><text x="68.0829%" y="655.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="68.0928%" y="661" width="0.1799%" height="15" fill="rgb(228,127,35)"/><text x="68.3428%" y="671.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (9 samples, 0.18%)</title><rect x="68.5526%" y="645" width="0.1799%" height="15" fill="rgb(245,102,45)"/><text x="68.8026%" y="655.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (8 samples, 0.16%)</title><rect x="68.5726%" y="629" width="0.1599%" height="15" fill="rgb(214,1,49)"/><text x="68.8226%" y="639.50"></text></g><g><title>core::fmt::write (24 samples, 0.48%)</title><rect x="68.2927%" y="661" width="0.4798%" height="15" fill="rgb(226,163,40)"/><text x="68.5427%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.28%)</title><rect x="68.7725%" y="661" width="0.2799%" height="15" fill="rgb(239,212,28)"/><text x="69.0225%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.16%)</title><rect x="68.8924%" y="645" width="0.1599%" height="15" fill="rgb(220,20,13)"/><text x="69.1424%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (147 samples, 2.94%)</title><rect x="66.2335%" y="709" width="2.9388%" height="15" fill="rgb(210,164,35)"/><text x="66.4835%" y="719.50">&lt;d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (147 samples, 2.94%)</title><rect x="66.2335%" y="693" width="2.9388%" height="15" fill="rgb(248,109,41)"/><text x="66.4835%" y="703.50">de..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (111 samples, 2.22%)</title><rect x="66.9532%" y="677" width="2.2191%" height="15" fill="rgb(238,23,50)"/><text x="67.2032%" y="687.50">d..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (6 samples, 0.12%)</title><rect x="69.4522%" y="661" width="0.1200%" height="15" fill="rgb(211,48,49)"/><text x="69.7022%" y="671.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (23 samples, 0.46%)</title><rect x="69.1723%" y="677" width="0.4598%" height="15" fill="rgb(223,36,21)"/><text x="69.4223%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe_child_parent_edges (9 samples, 0.18%)</title><rect x="69.6321%" y="677" width="0.1799%" height="15" fill="rgb(207,123,46)"/><text x="69.8821%" y="687.50"></text></g><g><title>decor_mem::select::select::get_rptrs_matching_constraint (6 samples, 0.12%)</title><rect x="69.8121%" y="677" width="0.1200%" height="15" fill="rgb(240,218,32)"/><text x="70.0621%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="69.9520%" y="613" width="0.1399%" height="15" fill="rgb(252,5,43)"/><text x="70.2020%" y="623.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="69.9520%" y="597" width="0.1399%" height="15" fill="rgb(252,84,19)"/><text x="70.2020%" y="607.50"></text></g><g><title>_int_malloc (7 samples, 0.14%)</title><rect x="69.9520%" y="581" width="0.1399%" height="15" fill="rgb(243,152,39)"/><text x="70.2020%" y="591.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (22 samples, 0.44%)</title><rect x="69.9320%" y="677" width="0.4398%" height="15" fill="rgb(234,160,15)"/><text x="70.1820%" y="687.50"></text></g><g><title>core::fmt::write (22 samples, 0.44%)</title><rect x="69.9320%" y="661" width="0.4398%" height="15" fill="rgb(237,34,20)"/><text x="70.1820%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (22 samples, 0.44%)</title><rect x="69.9320%" y="645" width="0.4398%" height="15" fill="rgb(229,97,13)"/><text x="70.1820%" y="655.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (22 samples, 0.44%)</title><rect x="69.9320%" y="629" width="0.4398%" height="15" fill="rgb(234,71,50)"/><text x="70.1820%" y="639.50"></text></g><g><title>core::fmt::write (14 samples, 0.28%)</title><rect x="70.0920%" y="613" width="0.2799%" height="15" fill="rgb(253,155,4)"/><text x="70.3420%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (14 samples, 0.28%)</title><rect x="70.0920%" y="597" width="0.2799%" height="15" fill="rgb(222,185,37)"/><text x="70.3420%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.22%)</title><rect x="70.1519%" y="581" width="0.2199%" height="15" fill="rgb(251,177,13)"/><text x="70.4019%" y="591.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="70.1919%" y="565" width="0.1799%" height="15" fill="rgb(250,179,40)"/><text x="70.4419%" y="575.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="70.2119%" y="549" width="0.1599%" height="15" fill="rgb(242,44,2)"/><text x="70.4619%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (28 samples, 0.56%)</title><rect x="70.4318%" y="597" width="0.5598%" height="15" fill="rgb(216,177,13)"/><text x="70.6818%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (26 samples, 0.52%)</title><rect x="70.4718%" y="581" width="0.5198%" height="15" fill="rgb(216,106,43)"/><text x="70.7218%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (34 samples, 0.68%)</title><rect x="70.4118%" y="613" width="0.6797%" height="15" fill="rgb(216,183,2)"/><text x="70.6618%" y="623.50"></text></g><g><title>core::fmt::write (45 samples, 0.90%)</title><rect x="70.3719%" y="645" width="0.8996%" height="15" fill="rgb(249,75,3)"/><text x="70.6219%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (45 samples, 0.90%)</title><rect x="70.3719%" y="629" width="0.8996%" height="15" fill="rgb(219,67,39)"/><text x="70.6219%" y="639.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (8 samples, 0.16%)</title><rect x="71.1116%" y="613" width="0.1599%" height="15" fill="rgb(253,228,2)"/><text x="71.3616%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.18%)</title><rect x="71.2715%" y="645" width="0.1799%" height="15" fill="rgb(235,138,27)"/><text x="71.5215%" y="655.50"></text></g><g><title>decor_mem::views::View::insert_into_index (61 samples, 1.22%)</title><rect x="70.3719%" y="661" width="1.2195%" height="15" fill="rgb(236,97,51)"/><text x="70.6219%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (7 samples, 0.14%)</title><rect x="71.4514%" y="645" width="0.1399%" height="15" fill="rgb(240,80,30)"/><text x="71.7014%" y="655.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="71.4514%" y="629" width="0.1399%" height="15" fill="rgb(230,178,19)"/><text x="71.7014%" y="639.50"></text></g><g><title>_int_malloc (7 samples, 0.14%)</title><rect x="71.4514%" y="613" width="0.1399%" height="15" fill="rgb(210,190,27)"/><text x="71.7014%" y="623.50"></text></g><g><title>sysmalloc (7 samples, 0.14%)</title><rect x="71.4514%" y="597" width="0.1399%" height="15" fill="rgb(222,107,31)"/><text x="71.7014%" y="607.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (270 samples, 5.40%)</title><rect x="66.2135%" y="757" width="5.3978%" height="15" fill="rgb(216,127,34)"/><text x="66.4635%" y="767.50">decor_m..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (270 samples, 5.40%)</title><rect x="66.2135%" y="741" width="5.3978%" height="15" fill="rgb(234,116,52)"/><text x="66.4635%" y="751.50">msql_sr..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (270 samples, 5.40%)</title><rect x="66.2135%" y="725" width="5.3978%" height="15" fill="rgb(222,124,15)"/><text x="66.4635%" y="735.50">msql_sr..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (122 samples, 2.44%)</title><rect x="69.1723%" y="709" width="2.4390%" height="15" fill="rgb(231,179,28)"/><text x="69.4223%" y="719.50">&lt;d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (122 samples, 2.44%)</title><rect x="69.1723%" y="693" width="2.4390%" height="15" fill="rgb(226,93,45)"/><text x="69.4223%" y="703.50">de..</text></g><g><title>decor_mem::views::Views::insert (62 samples, 1.24%)</title><rect x="70.3719%" y="677" width="1.2395%" height="15" fill="rgb(215,8,51)"/><text x="70.6219%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (272 samples, 5.44%)</title><rect x="66.2135%" y="773" width="5.4378%" height="15" fill="rgb(223,106,5)"/><text x="66.4635%" y="783.50">std::sy..</text></g><g><title>[unknown] (3,152 samples, 63.01%)</title><rect x="8.7165%" y="789" width="63.0148%" height="15" fill="rgb(250,191,5)"/><text x="8.9665%" y="799.50">[unknown]</text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.28%)</title><rect x="71.9312%" y="613" width="0.2799%" height="15" fill="rgb(242,132,44)"/><text x="72.1812%" y="623.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (8 samples, 0.16%)</title><rect x="72.0512%" y="597" width="0.1599%" height="15" fill="rgb(251,152,29)"/><text x="72.3012%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.34%)</title><rect x="72.2911%" y="613" width="0.3399%" height="15" fill="rgb(218,179,5)"/><text x="72.5411%" y="623.50"></text></g><g><title>__GI___libc_realloc (16 samples, 0.32%)</title><rect x="72.3111%" y="597" width="0.3199%" height="15" fill="rgb(227,67,19)"/><text x="72.5611%" y="607.50"></text></g><g><title>_int_realloc (16 samples, 0.32%)</title><rect x="72.3111%" y="581" width="0.3199%" height="15" fill="rgb(233,119,31)"/><text x="72.5611%" y="591.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="72.4310%" y="565" width="0.1999%" height="15" fill="rgb(241,120,22)"/><text x="72.6810%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 0.80%)</title><rect x="71.9312%" y="629" width="0.7997%" height="15" fill="rgb(224,102,30)"/><text x="72.1812%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="72.8709%" y="581" width="0.1200%" height="15" fill="rgb(210,164,37)"/><text x="73.1209%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="72.8709%" y="565" width="0.1200%" height="15" fill="rgb(226,191,16)"/><text x="73.1209%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="72.8709%" y="549" width="0.1200%" height="15" fill="rgb(214,40,45)"/><text x="73.1209%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="72.8709%" y="533" width="0.1200%" height="15" fill="rgb(244,29,26)"/><text x="73.1209%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="72.8709%" y="597" width="0.1399%" height="15" fill="rgb(216,16,5)"/><text x="73.1209%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (25 samples, 0.50%)</title><rect x="73.0108%" y="597" width="0.4998%" height="15" fill="rgb(249,76,35)"/><text x="73.2608%" y="607.50"></text></g><g><title>crypto::sha3::keccak_f (22 samples, 0.44%)</title><rect x="73.0708%" y="581" width="0.4398%" height="15" fill="rgb(207,11,44)"/><text x="73.3208%" y="591.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="73.5506%" y="597" width="0.1200%" height="15" fill="rgb(228,190,49)"/><text x="73.8006%" y="607.50"></text></g><g><title>crypto::digest::Digest::result_str (28 samples, 0.56%)</title><rect x="73.7505%" y="597" width="0.5598%" height="15" fill="rgb(214,173,12)"/><text x="74.0005%" y="607.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (26 samples, 0.52%)</title><rect x="73.7905%" y="581" width="0.5198%" height="15" fill="rgb(218,26,35)"/><text x="74.0405%" y="591.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (23 samples, 0.46%)</title><rect x="73.8505%" y="565" width="0.4598%" height="15" fill="rgb(220,200,19)"/><text x="74.1005%" y="575.50"></text></g><g><title>crypto::sha3::keccak_f (22 samples, 0.44%)</title><rect x="73.8705%" y="549" width="0.4398%" height="15" fill="rgb(239,95,49)"/><text x="74.1205%" y="559.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (85 samples, 1.70%)</title><rect x="72.7709%" y="613" width="1.6993%" height="15" fill="rgb(235,85,53)"/><text x="73.0209%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (7 samples, 0.14%)</title><rect x="74.3303%" y="597" width="0.1399%" height="15" fill="rgb(233,133,31)"/><text x="74.5803%" y="607.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (90 samples, 1.80%)</title><rect x="72.7309%" y="629" width="1.7993%" height="15" fill="rgb(218,25,20)"/><text x="72.9809%" y="639.50">&lt;..</text></g><g><title>_int_free (11 samples, 0.22%)</title><rect x="74.9500%" y="581" width="0.2199%" height="15" fill="rgb(252,210,38)"/><text x="75.2000%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.28%)</title><rect x="74.9300%" y="597" width="0.2799%" height="15" fill="rgb(242,134,21)"/><text x="75.1800%" y="607.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="75.2699%" y="421" width="0.1799%" height="15" fill="rgb(213,28,48)"/><text x="75.5199%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.26%)</title><rect x="75.2099%" y="597" width="0.2599%" height="15" fill="rgb(250,196,2)"/><text x="75.4599%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.26%)</title><rect x="75.2099%" y="581" width="0.2599%" height="15" fill="rgb(227,5,17)"/><text x="75.4599%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.24%)</title><rect x="75.2299%" y="565" width="0.2399%" height="15" fill="rgb(221,226,24)"/><text x="75.4799%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.24%)</title><rect x="75.2299%" y="549" width="0.2399%" height="15" fill="rgb(211,5,48)"/><text x="75.4799%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="75.2699%" y="533" width="0.1999%" height="15" fill="rgb(219,150,6)"/><text x="75.5199%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.20%)</title><rect x="75.2699%" y="517" width="0.1999%" height="15" fill="rgb(251,46,16)"/><text x="75.5199%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.20%)</title><rect x="75.2699%" y="501" width="0.1999%" height="15" fill="rgb(220,204,40)"/><text x="75.5199%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.20%)</title><rect x="75.2699%" y="485" width="0.1999%" height="15" fill="rgb(211,85,2)"/><text x="75.5199%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.20%)</title><rect x="75.2699%" y="469" width="0.1999%" height="15" fill="rgb(229,17,7)"/><text x="75.5199%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.20%)</title><rect x="75.2699%" y="453" width="0.1999%" height="15" fill="rgb(239,72,28)"/><text x="75.5199%" y="463.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.20%)</title><rect x="75.2699%" y="437" width="0.1999%" height="15" fill="rgb(230,47,54)"/><text x="75.5199%" y="447.50"></text></g><g><title>__GI___libc_malloc (83 samples, 1.66%)</title><rect x="76.0096%" y="405" width="1.6593%" height="15" fill="rgb(214,50,8)"/><text x="76.2596%" y="415.50"></text></g><g><title>_int_malloc (49 samples, 0.98%)</title><rect x="76.6893%" y="389" width="0.9796%" height="15" fill="rgb(216,198,43)"/><text x="76.9393%" y="399.50"></text></g><g><title>unlink_chunk.constprop.0 (7 samples, 0.14%)</title><rect x="77.5290%" y="373" width="0.1399%" height="15" fill="rgb(234,20,35)"/><text x="77.7790%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (102 samples, 2.04%)</title><rect x="75.7297%" y="581" width="2.0392%" height="15" fill="rgb(254,45,19)"/><text x="75.9797%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (100 samples, 2.00%)</title><rect x="75.7697%" y="565" width="1.9992%" height="15" fill="rgb(219,14,44)"/><text x="76.0197%" y="575.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (96 samples, 1.92%)</title><rect x="75.8497%" y="549" width="1.9192%" height="15" fill="rgb(217,220,26)"/><text x="76.0997%" y="559.50">a..</text></g><g><title>alloc::slice::hack::to_vec (94 samples, 1.88%)</title><rect x="75.8896%" y="533" width="1.8792%" height="15" fill="rgb(213,158,28)"/><text x="76.1396%" y="543.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (90 samples, 1.80%)</title><rect x="75.9696%" y="517" width="1.7993%" height="15" fill="rgb(252,51,52)"/><text x="76.2196%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (90 samples, 1.80%)</title><rect x="75.9696%" y="501" width="1.7993%" height="15" fill="rgb(246,89,16)"/><text x="76.2196%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 1.80%)</title><rect x="75.9696%" y="485" width="1.7993%" height="15" fill="rgb(216,158,49)"/><text x="76.2196%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 1.80%)</title><rect x="75.9696%" y="469" width="1.7993%" height="15" fill="rgb(236,107,19)"/><text x="76.2196%" y="479.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (90 samples, 1.80%)</title><rect x="75.9696%" y="453" width="1.7993%" height="15" fill="rgb(228,185,30)"/><text x="76.2196%" y="463.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 1.80%)</title><rect x="75.9696%" y="437" width="1.7993%" height="15" fill="rgb(246,134,8)"/><text x="76.2196%" y="447.50">a..</text></g><g><title>alloc::alloc::alloc (90 samples, 1.80%)</title><rect x="75.9696%" y="421" width="1.7993%" height="15" fill="rgb(214,143,50)"/><text x="76.2196%" y="431.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (116 samples, 2.32%)</title><rect x="75.5098%" y="597" width="2.3191%" height="15" fill="rgb(228,75,8)"/><text x="75.7598%" y="607.50">&lt;..</text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (26 samples, 0.52%)</title><rect x="77.8888%" y="597" width="0.5198%" height="15" fill="rgb(207,175,4)"/><text x="78.1388%" y="607.50"></text></g><g><title>crypto::sha3::keccak_f (23 samples, 0.46%)</title><rect x="77.9488%" y="581" width="0.4598%" height="15" fill="rgb(205,108,24)"/><text x="78.1988%" y="591.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="78.6485%" y="389" width="0.1599%" height="15" fill="rgb(244,120,49)"/><text x="78.8985%" y="399.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="78.6885%" y="373" width="0.1200%" height="15" fill="rgb(223,47,38)"/><text x="78.9385%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.40%)</title><rect x="78.4486%" y="565" width="0.3998%" height="15" fill="rgb(229,179,11)"/><text x="78.6986%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.38%)</title><rect x="78.4686%" y="549" width="0.3798%" height="15" fill="rgb(231,122,1)"/><text x="78.7186%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.32%)</title><rect x="78.5286%" y="533" width="0.3199%" height="15" fill="rgb(245,119,9)"/><text x="78.7786%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.30%)</title><rect x="78.5486%" y="517" width="0.2999%" height="15" fill="rgb(241,163,25)"/><text x="78.7986%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="78.6285%" y="501" width="0.2199%" height="15" fill="rgb(217,214,3)"/><text x="78.8785%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="78.6285%" y="485" width="0.2199%" height="15" fill="rgb(240,86,28)"/><text x="78.8785%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.22%)</title><rect x="78.6285%" y="469" width="0.2199%" height="15" fill="rgb(215,47,9)"/><text x="78.8785%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.22%)</title><rect x="78.6285%" y="453" width="0.2199%" height="15" fill="rgb(252,25,45)"/><text x="78.8785%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (11 samples, 0.22%)</title><rect x="78.6285%" y="437" width="0.2199%" height="15" fill="rgb(251,164,9)"/><text x="78.8785%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.22%)</title><rect x="78.6285%" y="421" width="0.2199%" height="15" fill="rgb(233,194,0)"/><text x="78.8785%" y="431.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.22%)</title><rect x="78.6285%" y="405" width="0.2199%" height="15" fill="rgb(249,111,24)"/><text x="78.8785%" y="415.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::clone::Clone&gt;::clone (23 samples, 0.46%)</title><rect x="78.4086%" y="597" width="0.4598%" height="15" fill="rgb(250,223,3)"/><text x="78.6586%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 0.44%)</title><rect x="78.4286%" y="581" width="0.4398%" height="15" fill="rgb(236,178,37)"/><text x="78.6786%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.12%)</title><rect x="78.8685%" y="597" width="0.1200%" height="15" fill="rgb(241,158,50)"/><text x="79.1185%" y="607.50"></text></g><g><title>__GI___libc_free (9 samples, 0.18%)</title><rect x="78.9884%" y="597" width="0.1799%" height="15" fill="rgb(213,121,41)"/><text x="79.2384%" y="607.50"></text></g><g><title>_int_free (20 samples, 0.40%)</title><rect x="79.2683%" y="597" width="0.3998%" height="15" fill="rgb(240,92,3)"/><text x="79.5183%" y="607.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.22%)</title><rect x="79.6681%" y="581" width="0.2199%" height="15" fill="rgb(205,123,3)"/><text x="79.9181%" y="591.50"></text></g><g><title>_int_realloc (10 samples, 0.20%)</title><rect x="79.6881%" y="565" width="0.1999%" height="15" fill="rgb(205,97,47)"/><text x="79.9381%" y="575.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="79.6881%" y="549" width="0.1999%" height="15" fill="rgb(247,152,14)"/><text x="79.9381%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.24%)</title><rect x="79.6681%" y="597" width="0.2399%" height="15" fill="rgb(248,195,53)"/><text x="79.9181%" y="607.50"></text></g><g><title>alloc::slice::merge_sort (10 samples, 0.20%)</title><rect x="79.9080%" y="597" width="0.1999%" height="15" fill="rgb(226,201,16)"/><text x="80.1580%" y="607.50"></text></g><g><title>alloc::slice::insert_head (10 samples, 0.20%)</title><rect x="79.9080%" y="581" width="0.1999%" height="15" fill="rgb(205,98,0)"/><text x="80.1580%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (7 samples, 0.14%)</title><rect x="79.9680%" y="565" width="0.1399%" height="15" fill="rgb(214,191,48)"/><text x="80.2180%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="80.1479%" y="549" width="0.1200%" height="15" fill="rgb(237,112,39)"/><text x="80.3979%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="80.1479%" y="533" width="0.1200%" height="15" fill="rgb(247,203,27)"/><text x="80.3979%" y="543.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="80.1080%" y="597" width="0.1799%" height="15" fill="rgb(235,124,28)"/><text x="80.3580%" y="607.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (7 samples, 0.14%)</title><rect x="80.1479%" y="581" width="0.1399%" height="15" fill="rgb(208,207,46)"/><text x="80.3979%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (7 samples, 0.14%)</title><rect x="80.1479%" y="565" width="0.1399%" height="15" fill="rgb(234,176,4)"/><text x="80.3979%" y="575.50"></text></g><g><title>__GI___libc_free (18 samples, 0.36%)</title><rect x="80.4078%" y="581" width="0.3599%" height="15" fill="rgb(230,133,28)"/><text x="80.6578%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (76 samples, 1.52%)</title><rect x="80.2879%" y="597" width="1.5194%" height="15" fill="rgb(211,137,40)"/><text x="80.5379%" y="607.50"></text></g><g><title>_int_free (47 samples, 0.94%)</title><rect x="80.8677%" y="581" width="0.9396%" height="15" fill="rgb(254,35,13)"/><text x="81.1177%" y="591.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (18 samples, 0.36%)</title><rect x="81.8872%" y="565" width="0.3599%" height="15" fill="rgb(225,49,51)"/><text x="82.1372%" y="575.50"></text></g><g><title>crypto::sha3::keccak_f (18 samples, 0.36%)</title><rect x="81.8872%" y="549" width="0.3599%" height="15" fill="rgb(251,10,15)"/><text x="82.1372%" y="559.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (23 samples, 0.46%)</title><rect x="81.8473%" y="581" width="0.4598%" height="15" fill="rgb(228,207,15)"/><text x="82.0973%" y="591.50"></text></g><g><title>crypto::digest::Digest::result_str (25 samples, 0.50%)</title><rect x="81.8273%" y="597" width="0.4998%" height="15" fill="rgb(241,99,19)"/><text x="82.0773%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="82.5070%" y="565" width="0.1999%" height="15" fill="rgb(207,104,49)"/><text x="82.7570%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.28%)</title><rect x="82.4470%" y="581" width="0.2799%" height="15" fill="rgb(234,99,18)"/><text x="82.6970%" y="591.50"></text></g><g><title>decor_mem::graph::EntityGraph::get_children_of_parent (20 samples, 0.40%)</title><rect x="82.4270%" y="597" width="0.3998%" height="15" fill="rgb(213,191,49)"/><text x="82.6770%" y="607.50"></text></g><g><title>decor_mem::helpers::get_ghosted_col_indices_of (7 samples, 0.14%)</title><rect x="82.8269%" y="597" width="0.1399%" height="15" fill="rgb(210,226,19)"/><text x="83.0769%" y="607.50"></text></g><g><title>decor_mem::helpers::get_sensitive_col_indices_of (8 samples, 0.16%)</title><rect x="82.9668%" y="597" width="0.1599%" height="15" fill="rgb(229,97,18)"/><text x="83.2168%" y="607.50"></text></g><g><title>decor_mem::helpers::parser_val_to_u64 (8 samples, 0.16%)</title><rect x="83.1267%" y="597" width="0.1599%" height="15" fill="rgb(211,167,15)"/><text x="83.3767%" y="607.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (9 samples, 0.18%)</title><rect x="83.8665%" y="565" width="0.1799%" height="15" fill="rgb(210,169,34)"/><text x="84.1165%" y="575.50"></text></g><g><title>std::time::Instant::duration_since (9 samples, 0.18%)</title><rect x="83.8665%" y="549" width="0.1799%" height="15" fill="rgb(241,121,31)"/><text x="84.1165%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (9 samples, 0.18%)</title><rect x="83.8665%" y="533" width="0.1799%" height="15" fill="rgb(232,40,11)"/><text x="84.1165%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (6 samples, 0.12%)</title><rect x="83.9264%" y="517" width="0.1200%" height="15" fill="rgb(205,86,26)"/><text x="84.1764%" y="527.50"></text></g><g><title>std::time::Instant::elapsed (22 samples, 0.44%)</title><rect x="83.8665%" y="581" width="0.4398%" height="15" fill="rgb(231,126,28)"/><text x="84.1165%" y="591.50"></text></g><g><title>std::time::Instant::now (13 samples, 0.26%)</title><rect x="84.0464%" y="565" width="0.2599%" height="15" fill="rgb(219,221,18)"/><text x="84.2964%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (13 samples, 0.26%)</title><rect x="84.0464%" y="549" width="0.2599%" height="15" fill="rgb(211,40,0)"/><text x="84.2964%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (13 samples, 0.26%)</title><rect x="84.0464%" y="533" width="0.2599%" height="15" fill="rgb(239,85,43)"/><text x="84.2964%" y="543.50"></text></g><g><title>__clock_gettime_2 (6 samples, 0.12%)</title><rect x="84.1863%" y="517" width="0.1200%" height="15" fill="rgb(231,55,21)"/><text x="84.4363%" y="527.50"></text></g><g><title>__vdso_clock_gettime (6 samples, 0.12%)</title><rect x="84.1863%" y="501" width="0.1200%" height="15" fill="rgb(225,184,43)"/><text x="84.4363%" y="511.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (53 samples, 1.06%)</title><rect x="83.3866%" y="597" width="1.0596%" height="15" fill="rgb(251,158,41)"/><text x="83.6366%" y="607.50"></text></g><g><title>std::time::Instant::now (7 samples, 0.14%)</title><rect x="84.3063%" y="581" width="0.1399%" height="15" fill="rgb(234,159,37)"/><text x="84.5563%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (7 samples, 0.14%)</title><rect x="84.3063%" y="565" width="0.1399%" height="15" fill="rgb(216,204,22)"/><text x="84.5563%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::now (7 samples, 0.14%)</title><rect x="84.3063%" y="549" width="0.1399%" height="15" fill="rgb(214,17,3)"/><text x="84.5563%" y="559.50"></text></g><g><title>__clock_gettime_2 (7 samples, 0.14%)</title><rect x="84.3063%" y="533" width="0.1399%" height="15" fill="rgb(212,111,17)"/><text x="84.5563%" y="543.50"></text></g><g><title>__vdso_clock_gettime (6 samples, 0.12%)</title><rect x="84.3263%" y="517" width="0.1200%" height="15" fill="rgb(221,157,24)"/><text x="84.5763%" y="527.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.24%)</title><rect x="84.7061%" y="405" width="0.2399%" height="15" fill="rgb(252,16,13)"/><text x="84.9561%" y="415.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="84.7661%" y="389" width="0.1799%" height="15" fill="rgb(221,62,2)"/><text x="85.0161%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.42%)</title><rect x="84.5862%" y="581" width="0.4198%" height="15" fill="rgb(247,87,22)"/><text x="84.8362%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.36%)</title><rect x="84.6461%" y="565" width="0.3599%" height="15" fill="rgb(215,73,9)"/><text x="84.8961%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.36%)</title><rect x="84.6461%" y="549" width="0.3599%" height="15" fill="rgb(207,175,33)"/><text x="84.8961%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.36%)</title><rect x="84.6461%" y="533" width="0.3599%" height="15" fill="rgb(243,129,54)"/><text x="84.8961%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.32%)</title><rect x="84.6861%" y="517" width="0.3199%" height="15" fill="rgb(227,119,45)"/><text x="84.9361%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (16 samples, 0.32%)</title><rect x="84.6861%" y="501" width="0.3199%" height="15" fill="rgb(205,109,36)"/><text x="84.9361%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.32%)</title><rect x="84.6861%" y="485" width="0.3199%" height="15" fill="rgb(205,6,39)"/><text x="84.9361%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.32%)</title><rect x="84.6861%" y="469" width="0.3199%" height="15" fill="rgb(221,32,16)"/><text x="84.9361%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.32%)</title><rect x="84.6861%" y="453" width="0.3199%" height="15" fill="rgb(228,144,50)"/><text x="84.9361%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.32%)</title><rect x="84.6861%" y="437" width="0.3199%" height="15" fill="rgb(229,201,53)"/><text x="84.9361%" y="447.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.32%)</title><rect x="84.6861%" y="421" width="0.3199%" height="15" fill="rgb(249,153,27)"/><text x="84.9361%" y="431.50"></text></g><g><title>decor_mem::views::Views::get_view_columns (26 samples, 0.52%)</title><rect x="84.5262%" y="597" width="0.5198%" height="15" fill="rgb(227,106,25)"/><text x="84.7762%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="85.2259%" y="581" width="0.1999%" height="15" fill="rgb(230,65,29)"/><text x="85.4759%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="85.2259%" y="565" width="0.1999%" height="15" fill="rgb(221,57,46)"/><text x="85.4759%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.20%)</title><rect x="85.2259%" y="549" width="0.1999%" height="15" fill="rgb(229,161,17)"/><text x="85.4759%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.20%)</title><rect x="85.2259%" y="533" width="0.1999%" height="15" fill="rgb(222,213,11)"/><text x="85.4759%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.16%)</title><rect x="85.2659%" y="517" width="0.1599%" height="15" fill="rgb(235,35,13)"/><text x="85.5159%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.16%)</title><rect x="85.2659%" y="501" width="0.1599%" height="15" fill="rgb(233,158,34)"/><text x="85.5159%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.16%)</title><rect x="85.2659%" y="485" width="0.1599%" height="15" fill="rgb(215,151,48)"/><text x="85.5159%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.16%)</title><rect x="85.2659%" y="469" width="0.1599%" height="15" fill="rgb(229,84,14)"/><text x="85.5159%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.16%)</title><rect x="85.2659%" y="453" width="0.1599%" height="15" fill="rgb(229,68,14)"/><text x="85.5159%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.16%)</title><rect x="85.2659%" y="437" width="0.1599%" height="15" fill="rgb(243,106,26)"/><text x="85.5159%" y="447.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="85.2859%" y="421" width="0.1399%" height="15" fill="rgb(206,45,38)"/><text x="85.5359%" y="431.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="85.2859%" y="405" width="0.1399%" height="15" fill="rgb(226,6,15)"/><text x="85.5359%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.16%)</title><rect x="85.5058%" y="581" width="0.1599%" height="15" fill="rgb(232,22,54)"/><text x="85.7558%" y="591.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="85.5058%" y="565" width="0.1599%" height="15" fill="rgb(229,222,32)"/><text x="85.7558%" y="575.50"></text></g><g><title>decor_mem::views::Views::insert (38 samples, 0.76%)</title><rect x="85.0460%" y="597" width="0.7597%" height="15" fill="rgb(228,62,29)"/><text x="85.2960%" y="607.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (10 samples, 0.20%)</title><rect x="85.8257%" y="581" width="0.1999%" height="15" fill="rgb(251,103,34)"/><text x="86.0757%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.20%)</title><rect x="85.8257%" y="565" width="0.1999%" height="15" fill="rgb(233,12,30)"/><text x="86.0757%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (22 samples, 0.44%)</title><rect x="85.8057%" y="597" width="0.4398%" height="15" fill="rgb(238,52,0)"/><text x="86.0557%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.14%)</title><rect x="86.1056%" y="581" width="0.1399%" height="15" fill="rgb(223,98,5)"/><text x="86.3556%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.20%)</title><rect x="86.4254%" y="565" width="0.1999%" height="15" fill="rgb(228,75,37)"/><text x="86.6754%" y="575.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (13 samples, 0.26%)</title><rect x="86.3854%" y="581" width="0.2599%" height="15" fill="rgb(205,115,49)"/><text x="86.6354%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.12%)</title><rect x="86.6453%" y="581" width="0.1200%" height="15" fill="rgb(250,154,43)"/><text x="86.8953%" y="591.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (9 samples, 0.18%)</title><rect x="86.9052%" y="549" width="0.1799%" height="15" fill="rgb(226,43,29)"/><text x="87.1552%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="86.9452%" y="533" width="0.1399%" height="15" fill="rgb(249,228,39)"/><text x="87.1952%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (46 samples, 0.92%)</title><rect x="86.2855%" y="597" width="0.9196%" height="15" fill="rgb(216,79,43)"/><text x="86.5355%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (20 samples, 0.40%)</title><rect x="86.8053%" y="581" width="0.3998%" height="15" fill="rgb(228,95,12)"/><text x="87.0553%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (19 samples, 0.38%)</title><rect x="86.8253%" y="565" width="0.3798%" height="15" fill="rgb(249,221,15)"/><text x="87.0753%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (13 samples, 0.26%)</title><rect x="87.2051%" y="597" width="0.2599%" height="15" fill="rgb(233,34,13)"/><text x="87.4551%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (6 samples, 0.12%)</title><rect x="87.3451%" y="581" width="0.1200%" height="15" fill="rgb(214,103,39)"/><text x="87.5951%" y="591.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (649 samples, 12.97%)</title><rect x="74.5302%" y="629" width="12.9748%" height="15" fill="rgb(251,126,39)"/><text x="74.7802%" y="639.50">&lt;decor_mem::Shim as..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (647 samples, 12.93%)</title><rect x="74.5702%" y="613" width="12.9348%" height="15" fill="rgb(214,216,36)"/><text x="74.8202%" y="623.50">decor_mem::query_tr..</text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="87.6649%" y="597" width="0.1200%" height="15" fill="rgb(220,221,8)"/><text x="87.9149%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.32%)</title><rect x="87.7849%" y="565" width="0.3199%" height="15" fill="rgb(240,216,3)"/><text x="88.0349%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.32%)</title><rect x="87.7849%" y="549" width="0.3199%" height="15" fill="rgb(232,218,17)"/><text x="88.0349%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.32%)</title><rect x="87.7849%" y="533" width="0.3199%" height="15" fill="rgb(229,163,45)"/><text x="88.0349%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.36%)</title><rect x="87.7849%" y="597" width="0.3599%" height="15" fill="rgb(231,110,42)"/><text x="88.0349%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.36%)</title><rect x="87.7849%" y="581" width="0.3599%" height="15" fill="rgb(208,170,48)"/><text x="88.0349%" y="591.50"></text></g><g><title>ext4_buffered_write_iter (8 samples, 0.16%)</title><rect x="88.1847%" y="437" width="0.1599%" height="15" fill="rgb(239,116,25)"/><text x="88.4347%" y="447.50"></text></g><g><title>generic_perform_write (7 samples, 0.14%)</title><rect x="88.2047%" y="421" width="0.1399%" height="15" fill="rgb(219,200,50)"/><text x="88.4547%" y="431.50"></text></g><g><title>do_syscall_64 (11 samples, 0.22%)</title><rect x="88.1447%" y="501" width="0.2199%" height="15" fill="rgb(245,200,0)"/><text x="88.3947%" y="511.50"></text></g><g><title>ksys_write (11 samples, 0.22%)</title><rect x="88.1447%" y="485" width="0.2199%" height="15" fill="rgb(245,119,33)"/><text x="88.3947%" y="495.50"></text></g><g><title>vfs_write (11 samples, 0.22%)</title><rect x="88.1447%" y="469" width="0.2199%" height="15" fill="rgb(231,125,12)"/><text x="88.3947%" y="479.50"></text></g><g><title>new_sync_write (10 samples, 0.20%)</title><rect x="88.1647%" y="453" width="0.1999%" height="15" fill="rgb(216,96,41)"/><text x="88.4147%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (14 samples, 0.28%)</title><rect x="88.1447%" y="517" width="0.2799%" height="15" fill="rgb(248,43,45)"/><text x="88.3947%" y="527.50"></text></g><g><title>__libc_write (15 samples, 0.30%)</title><rect x="88.1447%" y="533" width="0.2999%" height="15" fill="rgb(217,222,7)"/><text x="88.3947%" y="543.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (16 samples, 0.32%)</title><rect x="88.1447%" y="581" width="0.3199%" height="15" fill="rgb(233,28,6)"/><text x="88.3947%" y="591.50"></text></g><g><title>std::sys::unix::fs::File::write (16 samples, 0.32%)</title><rect x="88.1447%" y="565" width="0.3199%" height="15" fill="rgb(231,218,15)"/><text x="88.3947%" y="575.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (16 samples, 0.32%)</title><rect x="88.1447%" y="549" width="0.3199%" height="15" fill="rgb(226,171,48)"/><text x="88.3947%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (42 samples, 0.84%)</title><rect x="87.6649%" y="629" width="0.8397%" height="15" fill="rgb(235,201,9)"/><text x="87.9149%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (42 samples, 0.84%)</title><rect x="87.6649%" y="613" width="0.8397%" height="15" fill="rgb(217,80,15)"/><text x="87.9149%" y="623.50"></text></g><g><title>decor_mem::stats::print_stats (18 samples, 0.36%)</title><rect x="88.1447%" y="597" width="0.3599%" height="15" fill="rgb(219,152,8)"/><text x="88.3947%" y="607.50"></text></g><g><title>core::str::pattern::StrSearcher::new (6 samples, 0.12%)</title><rect x="88.6445%" y="629" width="0.1200%" height="15" fill="rgb(243,107,38)"/><text x="88.8945%" y="639.50"></text></g><g><title>dequeue_task_fair (7 samples, 0.14%)</title><rect x="89.3043%" y="341" width="0.1399%" height="15" fill="rgb(231,17,5)"/><text x="89.5543%" y="351.50"></text></g><g><title>dequeue_entity (7 samples, 0.14%)</title><rect x="89.3043%" y="325" width="0.1399%" height="15" fill="rgb(209,25,54)"/><text x="89.5543%" y="335.50"></text></g><g><title>sk_wait_data (36 samples, 0.72%)</title><rect x="89.0044%" y="421" width="0.7197%" height="15" fill="rgb(219,0,2)"/><text x="89.2544%" y="431.50"></text></g><g><title>wait_woken (29 samples, 0.58%)</title><rect x="89.1443%" y="405" width="0.5798%" height="15" fill="rgb(246,9,5)"/><text x="89.3943%" y="415.50"></text></g><g><title>schedule_timeout (26 samples, 0.52%)</title><rect x="89.2043%" y="389" width="0.5198%" height="15" fill="rgb(226,159,4)"/><text x="89.4543%" y="399.50"></text></g><g><title>schedule (26 samples, 0.52%)</title><rect x="89.2043%" y="373" width="0.5198%" height="15" fill="rgb(219,175,34)"/><text x="89.4543%" y="383.50"></text></g><g><title>__schedule (25 samples, 0.50%)</title><rect x="89.2243%" y="357" width="0.4998%" height="15" fill="rgb(236,10,46)"/><text x="89.4743%" y="367.50"></text></g><g><title>inet_recvmsg (49 samples, 0.98%)</title><rect x="88.8245%" y="453" width="0.9796%" height="15" fill="rgb(240,211,16)"/><text x="89.0745%" y="463.50"></text></g><g><title>tcp_recvmsg (49 samples, 0.98%)</title><rect x="88.8245%" y="437" width="0.9796%" height="15" fill="rgb(205,3,43)"/><text x="89.0745%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (52 samples, 1.04%)</title><rect x="88.8045%" y="485" width="1.0396%" height="15" fill="rgb(245,7,22)"/><text x="89.0545%" y="495.50"></text></g><g><title>__sys_recvfrom (52 samples, 1.04%)</title><rect x="88.8045%" y="469" width="1.0396%" height="15" fill="rgb(239,132,32)"/><text x="89.0545%" y="479.50"></text></g><g><title>do_syscall_64 (55 samples, 1.10%)</title><rect x="88.8045%" y="501" width="1.0996%" height="15" fill="rgb(228,202,34)"/><text x="89.0545%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (60 samples, 1.20%)</title><rect x="88.8045%" y="517" width="1.1995%" height="15" fill="rgb(254,200,22)"/><text x="89.0545%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (61 samples, 1.22%)</title><rect x="88.8045%" y="613" width="1.2195%" height="15" fill="rgb(219,10,39)"/><text x="89.0545%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (61 samples, 1.22%)</title><rect x="88.8045%" y="597" width="1.2195%" height="15" fill="rgb(226,210,39)"/><text x="89.0545%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::read (61 samples, 1.22%)</title><rect x="88.8045%" y="581" width="1.2195%" height="15" fill="rgb(208,219,16)"/><text x="89.0545%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::read (61 samples, 1.22%)</title><rect x="88.8045%" y="565" width="1.2195%" height="15" fill="rgb(216,158,51)"/><text x="89.0545%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (61 samples, 1.22%)</title><rect x="88.8045%" y="549" width="1.2195%" height="15" fill="rgb(233,14,44)"/><text x="89.0545%" y="559.50"></text></g><g><title>__libc_recv (61 samples, 1.22%)</title><rect x="88.8045%" y="533" width="1.2195%" height="15" fill="rgb(237,97,39)"/><text x="89.0545%" y="543.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (66 samples, 1.32%)</title><rect x="88.7845%" y="629" width="1.3195%" height="15" fill="rgb(218,198,43)"/><text x="89.0345%" y="639.50"></text></g><g><title>__dev_queue_xmit (10 samples, 0.20%)</title><rect x="90.7837%" y="357" width="0.1999%" height="15" fill="rgb(231,104,20)"/><text x="91.0337%" y="367.50"></text></g><g><title>dev_hard_start_xmit (9 samples, 0.18%)</title><rect x="90.8037%" y="341" width="0.1799%" height="15" fill="rgb(254,36,13)"/><text x="91.0537%" y="351.50"></text></g><g><title>psi_task_change (6 samples, 0.12%)</title><rect x="91.4234%" y="53" width="0.1200%" height="15" fill="rgb(248,14,50)"/><text x="91.6734%" y="63.50"></text></g><g><title>enqueue_task (8 samples, 0.16%)</title><rect x="91.4234%" y="69" width="0.1599%" height="15" fill="rgb(217,107,29)"/><text x="91.6734%" y="79.50"></text></g><g><title>enqueue_task_fair (7 samples, 0.14%)</title><rect x="91.5834%" y="69" width="0.1399%" height="15" fill="rgb(251,169,33)"/><text x="91.8334%" y="79.50"></text></g><g><title>enqueue_entity (7 samples, 0.14%)</title><rect x="91.5834%" y="53" width="0.1399%" height="15" fill="rgb(217,108,32)"/><text x="91.8334%" y="63.50"></text></g><g><title>update_load_avg (6 samples, 0.12%)</title><rect x="91.6034%" y="37" width="0.1200%" height="15" fill="rgb(219,66,42)"/><text x="91.8534%" y="47.50"></text></g><g><title>__wake_up_common (25 samples, 0.50%)</title><rect x="91.3435%" y="101" width="0.4998%" height="15" fill="rgb(206,180,7)"/><text x="91.5935%" y="111.50"></text></g><g><title>try_to_wake_up (23 samples, 0.46%)</title><rect x="91.3834%" y="85" width="0.4598%" height="15" fill="rgb(208,226,31)"/><text x="91.6334%" y="95.50"></text></g><g><title>sock_def_readable (28 samples, 0.56%)</title><rect x="91.3035%" y="133" width="0.5598%" height="15" fill="rgb(218,26,49)"/><text x="91.5535%" y="143.50"></text></g><g><title>__wake_up_common_lock (26 samples, 0.52%)</title><rect x="91.3435%" y="117" width="0.5198%" height="15" fill="rgb(233,197,48)"/><text x="91.5935%" y="127.50"></text></g><g><title>__kfree_skb (6 samples, 0.12%)</title><rect x="91.9832%" y="117" width="0.1200%" height="15" fill="rgb(252,181,51)"/><text x="92.2332%" y="127.50"></text></g><g><title>tcp_ack (20 samples, 0.40%)</title><rect x="91.8633%" y="133" width="0.3998%" height="15" fill="rgb(253,90,19)"/><text x="92.1133%" y="143.50"></text></g><g><title>ip_local_deliver (63 samples, 1.26%)</title><rect x="91.1236%" y="229" width="1.2595%" height="15" fill="rgb(215,171,30)"/><text x="91.3736%" y="239.50"></text></g><g><title>ip_local_deliver_finish (62 samples, 1.24%)</title><rect x="91.1435%" y="213" width="1.2395%" height="15" fill="rgb(214,222,9)"/><text x="91.3935%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (62 samples, 1.24%)</title><rect x="91.1435%" y="197" width="1.2395%" height="15" fill="rgb(223,3,22)"/><text x="91.3935%" y="207.50"></text></g><g><title>tcp_v4_rcv (61 samples, 1.22%)</title><rect x="91.1635%" y="181" width="1.2195%" height="15" fill="rgb(225,196,46)"/><text x="91.4135%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (57 samples, 1.14%)</title><rect x="91.2435%" y="165" width="1.1395%" height="15" fill="rgb(209,110,37)"/><text x="91.4935%" y="175.50"></text></g><g><title>tcp_rcv_established (57 samples, 1.14%)</title><rect x="91.2435%" y="149" width="1.1395%" height="15" fill="rgb(249,89,12)"/><text x="91.4935%" y="159.50"></text></g><g><title>__local_bh_enable_ip (74 samples, 1.48%)</title><rect x="90.9836%" y="357" width="1.4794%" height="15" fill="rgb(226,27,33)"/><text x="91.2336%" y="367.50"></text></g><g><title>do_softirq (74 samples, 1.48%)</title><rect x="90.9836%" y="341" width="1.4794%" height="15" fill="rgb(213,82,22)"/><text x="91.2336%" y="351.50"></text></g><g><title>do_softirq_own_stack (71 samples, 1.42%)</title><rect x="91.0436%" y="325" width="1.4194%" height="15" fill="rgb(248,140,0)"/><text x="91.2936%" y="335.50"></text></g><g><title>__do_softirq (71 samples, 1.42%)</title><rect x="91.0436%" y="309" width="1.4194%" height="15" fill="rgb(228,106,3)"/><text x="91.2936%" y="319.50"></text></g><g><title>net_rx_action (71 samples, 1.42%)</title><rect x="91.0436%" y="293" width="1.4194%" height="15" fill="rgb(209,23,37)"/><text x="91.2936%" y="303.50"></text></g><g><title>process_backlog (70 samples, 1.40%)</title><rect x="91.0636%" y="277" width="1.3994%" height="15" fill="rgb(241,93,50)"/><text x="91.3136%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (70 samples, 1.40%)</title><rect x="91.0636%" y="261" width="1.3994%" height="15" fill="rgb(253,46,43)"/><text x="91.3136%" y="271.50"></text></g><g><title>ip_rcv (67 samples, 1.34%)</title><rect x="91.1236%" y="245" width="1.3395%" height="15" fill="rgb(226,206,43)"/><text x="91.3736%" y="255.50"></text></g><g><title>ip_finish_output2 (88 samples, 1.76%)</title><rect x="90.7237%" y="373" width="1.7593%" height="15" fill="rgb(217,54,7)"/><text x="90.9737%" y="383.50"></text></g><g><title>__ip_queue_xmit (95 samples, 1.90%)</title><rect x="90.6038%" y="405" width="1.8992%" height="15" fill="rgb(223,5,52)"/><text x="90.8538%" y="415.50">_..</text></g><g><title>ip_output (91 samples, 1.82%)</title><rect x="90.6837%" y="389" width="1.8193%" height="15" fill="rgb(206,52,46)"/><text x="90.9337%" y="399.50">i..</text></g><g><title>__tcp_transmit_skb (104 samples, 2.08%)</title><rect x="90.4838%" y="421" width="2.0792%" height="15" fill="rgb(253,136,11)"/><text x="90.7338%" y="431.50">_..</text></g><g><title>__tcp_push_pending_frames (108 samples, 2.16%)</title><rect x="90.4838%" y="453" width="2.1591%" height="15" fill="rgb(208,106,33)"/><text x="90.7338%" y="463.50">_..</text></g><g><title>tcp_write_xmit (108 samples, 2.16%)</title><rect x="90.4838%" y="437" width="2.1591%" height="15" fill="rgb(206,54,4)"/><text x="90.7338%" y="447.50">t..</text></g><g><title>sk_stream_alloc_skb (8 samples, 0.16%)</title><rect x="92.6429%" y="453" width="0.1599%" height="15" fill="rgb(213,3,15)"/><text x="92.8929%" y="463.50"></text></g><g><title>__alloc_skb (8 samples, 0.16%)</title><rect x="92.6429%" y="437" width="0.1599%" height="15" fill="rgb(252,211,39)"/><text x="92.8929%" y="447.50"></text></g><g><title>sock_sendmsg (129 samples, 2.58%)</title><rect x="90.3439%" y="501" width="2.5790%" height="15" fill="rgb(223,6,36)"/><text x="90.5939%" y="511.50">so..</text></g><g><title>tcp_sendmsg (128 samples, 2.56%)</title><rect x="90.3639%" y="485" width="2.5590%" height="15" fill="rgb(252,169,45)"/><text x="90.6139%" y="495.50">tc..</text></g><g><title>tcp_sendmsg_locked (125 samples, 2.50%)</title><rect x="90.4238%" y="469" width="2.4990%" height="15" fill="rgb(212,48,26)"/><text x="90.6738%" y="479.50">tc..</text></g><g><title>__x64_sys_sendto (135 samples, 2.70%)</title><rect x="90.2439%" y="533" width="2.6989%" height="15" fill="rgb(251,102,48)"/><text x="90.4939%" y="543.50">__..</text></g><g><title>__sys_sendto (134 samples, 2.68%)</title><rect x="90.2639%" y="517" width="2.6789%" height="15" fill="rgb(243,208,16)"/><text x="90.5139%" y="527.50">__..</text></g><g><title>do_syscall_64 (140 samples, 2.80%)</title><rect x="90.1839%" y="549" width="2.7989%" height="15" fill="rgb(219,96,24)"/><text x="90.4339%" y="559.50">do..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,062 samples, 21.23%)</title><rect x="71.7913%" y="661" width="21.2315%" height="15" fill="rgb(219,33,29)"/><text x="72.0413%" y="671.50">msql_srv::MysqlIntermediary&lt;B,R,W..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (1,062 samples, 21.23%)</title><rect x="71.7913%" y="645" width="21.2315%" height="15" fill="rgb(223,176,5)"/><text x="72.0413%" y="655.50">msql_srv::MysqlIntermediary&lt;B,R,W..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (146 samples, 2.92%)</title><rect x="90.1040%" y="629" width="2.9188%" height="15" fill="rgb(228,140,14)"/><text x="90.3540%" y="639.50">st..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (146 samples, 2.92%)</title><rect x="90.1040%" y="613" width="2.9188%" height="15" fill="rgb(217,179,31)"/><text x="90.3540%" y="623.50">&lt;s..</text></g><g><title>std::sys_common::net::TcpStream::write (146 samples, 2.92%)</title><rect x="90.1040%" y="597" width="2.9188%" height="15" fill="rgb(230,9,30)"/><text x="90.3540%" y="607.50">st..</text></g><g><title>__libc_send (146 samples, 2.92%)</title><rect x="90.1040%" y="581" width="2.9188%" height="15" fill="rgb(230,136,20)"/><text x="90.3540%" y="591.50">__..</text></g><g><title>entry_SYSCALL_64 (142 samples, 2.84%)</title><rect x="90.1839%" y="565" width="2.8389%" height="15" fill="rgb(215,210,22)"/><text x="90.4339%" y="575.50">en..</text></g><g><title>decor_mem::Shim::run_on_tcp (1,063 samples, 21.25%)</title><rect x="71.7913%" y="677" width="21.2515%" height="15" fill="rgb(218,43,5)"/><text x="72.0413%" y="687.50">decor_mem::Shim::run_on_tcp</text></g><g><title>__GI___clone (1,067 samples, 21.33%)</title><rect x="71.7313%" y="789" width="21.3315%" height="15" fill="rgb(216,11,5)"/><text x="71.9813%" y="799.50">__GI___clone</text></g><g><title>start_thread (1,067 samples, 21.33%)</title><rect x="71.7313%" y="773" width="21.3315%" height="15" fill="rgb(209,82,29)"/><text x="71.9813%" y="783.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1,064 samples, 21.27%)</title><rect x="71.7913%" y="757" width="21.2715%" height="15" fill="rgb(244,115,12)"/><text x="72.0413%" y="767.50">std::sys::unix::thread::Thread::ne..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,064 samples, 21.27%)</title><rect x="71.7913%" y="741" width="21.2715%" height="15" fill="rgb(222,82,18)"/><text x="72.0413%" y="751.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (1,064 samples, 21.27%)</title><rect x="71.7913%" y="725" width="21.2715%" height="15" fill="rgb(249,227,8)"/><text x="72.0413%" y="735.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,064 samples, 21.27%)</title><rect x="71.7913%" y="709" width="21.2715%" height="15" fill="rgb(253,141,45)"/><text x="72.0413%" y="719.50">core::ops::function::FnOnce::call_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,064 samples, 21.27%)</title><rect x="71.7913%" y="693" width="21.2715%" height="15" fill="rgb(234,184,4)"/><text x="72.0413%" y="703.50">std::sys_common::backtrace::__rust..</text></g><g><title>__vdso_clock_gettime (9 samples, 0.18%)</title><rect x="93.3027%" y="789" width="0.1799%" height="15" fill="rgb(218,194,23)"/><text x="93.5527%" y="799.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (228 samples, 4.56%)</title><rect x="93.8025%" y="309" width="4.5582%" height="15" fill="rgb(235,66,41)"/><text x="94.0525%" y="319.50">__int..</text></g><g><title>native_write_msr (228 samples, 4.56%)</title><rect x="93.8025%" y="293" width="4.5582%" height="15" fill="rgb(245,217,1)"/><text x="94.0525%" y="303.50">nativ..</text></g><g><title>do_syscall_64 (234 samples, 4.68%)</title><rect x="93.7225%" y="485" width="4.6781%" height="15" fill="rgb(229,91,1)"/><text x="93.9725%" y="495.50">do_sy..</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 4.68%)</title><rect x="93.7225%" y="469" width="4.6781%" height="15" fill="rgb(207,101,30)"/><text x="93.9725%" y="479.50">__x64..</text></g><g><title>sched_setaffinity (234 samples, 4.68%)</title><rect x="93.7225%" y="453" width="4.6781%" height="15" fill="rgb(223,82,49)"/><text x="93.9725%" y="463.50">sched..</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 4.68%)</title><rect x="93.7225%" y="437" width="4.6781%" height="15" fill="rgb(218,167,17)"/><text x="93.9725%" y="447.50">__set..</text></g><g><title>stop_one_cpu (234 samples, 4.68%)</title><rect x="93.7225%" y="421" width="4.6781%" height="15" fill="rgb(208,103,14)"/><text x="93.9725%" y="431.50">stop_..</text></g><g><title>cpu_stop_queue_work (234 samples, 4.68%)</title><rect x="93.7225%" y="405" width="4.6781%" height="15" fill="rgb(238,20,8)"/><text x="93.9725%" y="415.50">cpu_s..</text></g><g><title>preempt_schedule_thunk (234 samples, 4.68%)</title><rect x="93.7225%" y="389" width="4.6781%" height="15" fill="rgb(218,80,54)"/><text x="93.9725%" y="399.50">preem..</text></g><g><title>preempt_schedule_common (234 samples, 4.68%)</title><rect x="93.7225%" y="373" width="4.6781%" height="15" fill="rgb(240,144,17)"/><text x="93.9725%" y="383.50">preem..</text></g><g><title>__schedule (234 samples, 4.68%)</title><rect x="93.7225%" y="357" width="4.6781%" height="15" fill="rgb(245,27,50)"/><text x="93.9725%" y="367.50">__sch..</text></g><g><title>finish_task_switch (234 samples, 4.68%)</title><rect x="93.7225%" y="341" width="4.6781%" height="15" fill="rgb(251,51,7)"/><text x="93.9725%" y="351.50">finis..</text></g><g><title>__perf_event_task_sched_in (234 samples, 4.68%)</title><rect x="93.7225%" y="325" width="4.6781%" height="15" fill="rgb(245,217,29)"/><text x="93.9725%" y="335.50">__per..</text></g><g><title>hwloc::Topology::new (238 samples, 4.76%)</title><rect x="93.6825%" y="613" width="4.7581%" height="15" fill="rgb(221,176,29)"/><text x="93.9325%" y="623.50">hwloc:..</text></g><g><title>hwloc_topology_load (238 samples, 4.76%)</title><rect x="93.6825%" y="597" width="4.7581%" height="15" fill="rgb(212,180,24)"/><text x="93.9325%" y="607.50">hwloc_..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.76%)</title><rect x="93.6825%" y="581" width="4.7581%" height="15" fill="rgb(254,24,2)"/><text x="93.9325%" y="591.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.76%)</title><rect x="93.6825%" y="565" width="4.7581%" height="15" fill="rgb(230,100,2)"/><text x="93.9325%" y="575.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 4.76%)</title><rect x="93.6825%" y="549" width="4.7581%" height="15" fill="rgb(219,142,25)"/><text x="93.9325%" y="559.50">[libhw..</text></g><g><title>hwloc_linux_set_tid_cpubind (238 samples, 4.76%)</title><rect x="93.6825%" y="533" width="4.7581%" height="15" fill="rgb(240,73,43)"/><text x="93.9325%" y="543.50">hwloc_..</text></g><g><title>__GI___sched_setaffinity_new (236 samples, 4.72%)</title><rect x="93.7225%" y="517" width="4.7181%" height="15" fill="rgb(214,114,15)"/><text x="93.9725%" y="527.50">__GI_..</text></g><g><title>entry_SYSCALL_64 (236 samples, 4.72%)</title><rect x="93.7225%" y="501" width="4.7181%" height="15" fill="rgb(207,130,4)"/><text x="93.9725%" y="511.50">entry..</text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (8 samples, 0.16%)</title><rect x="98.4606%" y="613" width="0.1599%" height="15" fill="rgb(221,25,40)"/><text x="98.7106%" y="623.50"></text></g><g><title>__libc_start_main (254 samples, 5.08%)</title><rect x="93.5826%" y="773" width="5.0780%" height="15" fill="rgb(241,184,7)"/><text x="93.8326%" y="783.50">__libc..</text></g><g><title>main (254 samples, 5.08%)</title><rect x="93.5826%" y="757" width="5.0780%" height="15" fill="rgb(235,159,4)"/><text x="93.8326%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (254 samples, 5.08%)</title><rect x="93.5826%" y="741" width="5.0780%" height="15" fill="rgb(214,87,48)"/><text x="93.8326%" y="751.50">std::r..</text></g><g><title>std::panic::catch_unwind (254 samples, 5.08%)</title><rect x="93.5826%" y="725" width="5.0780%" height="15" fill="rgb(246,198,24)"/><text x="93.8326%" y="735.50">std::p..</text></g><g><title>std::panicking::try (254 samples, 5.08%)</title><rect x="93.5826%" y="709" width="5.0780%" height="15" fill="rgb(209,66,40)"/><text x="93.8326%" y="719.50">std::p..</text></g><g><title>std::panicking::try::do_call (254 samples, 5.08%)</title><rect x="93.5826%" y="693" width="5.0780%" height="15" fill="rgb(233,147,39)"/><text x="93.8326%" y="703.50">std::p..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (254 samples, 5.08%)</title><rect x="93.5826%" y="677" width="5.0780%" height="15" fill="rgb(231,145,52)"/><text x="93.8326%" y="687.50">core::..</text></g><g><title>std::rt::lang_start::_{{closure}} (254 samples, 5.08%)</title><rect x="93.5826%" y="661" width="5.0780%" height="15" fill="rgb(206,20,26)"/><text x="93.8326%" y="671.50">std::r..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (254 samples, 5.08%)</title><rect x="93.5826%" y="645" width="5.0780%" height="15" fill="rgb(238,220,4)"/><text x="93.8326%" y="655.50">std::s..</text></g><g><title>lobsters_microbenchmarks::main (254 samples, 5.08%)</title><rect x="93.5826%" y="629" width="5.0780%" height="15" fill="rgb(252,195,42)"/><text x="93.8326%" y="639.50">lobste..</text></g><g><title>_start (255 samples, 5.10%)</title><rect x="93.5826%" y="789" width="5.0980%" height="15" fill="rgb(209,10,6)"/><text x="93.8326%" y="799.50">_start</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.18%)</title><rect x="98.6805%" y="789" width="0.1799%" height="15" fill="rgb(229,3,52)"/><text x="98.9305%" y="799.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="98.9204%" y="773" width="0.1200%" height="15" fill="rgb(253,49,37)"/><text x="99.1704%" y="783.50"></text></g><g><title>anon.960a13ca7ab009bec3b8abcb1d4e7596.8.llvm.1955666761421357642 (7 samples, 0.14%)</title><rect x="98.9204%" y="789" width="0.1399%" height="15" fill="rgb(240,103,49)"/><text x="99.1704%" y="799.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.18%)</title><rect x="99.1803%" y="789" width="0.1799%" height="15" fill="rgb(250,182,30)"/><text x="99.4303%" y="799.50"></text></g><g><title>log::STATE (6 samples, 0.12%)</title><rect x="99.3802%" y="789" width="0.1200%" height="15" fill="rgb(248,8,30)"/><text x="99.6302%" y="799.50"></text></g><g><title>page_fault (17 samples, 0.34%)</title><rect x="99.5202%" y="789" width="0.3399%" height="15" fill="rgb(237,120,30)"/><text x="99.7702%" y="799.50"></text></g><g><title>lobsters-microb (4,996 samples, 99.88%)</title><rect x="0.0000%" y="805" width="99.8800%" height="15" fill="rgb(221,146,34)"/><text x="0.2500%" y="815.50">lobsters-microb</text></g><g><title>all (5,002 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(242,55,13)"/><text x="0.2500%" y="831.50"></text></g><g><title>perf (6 samples, 0.12%)</title><rect x="99.8800%" y="805" width="0.1200%" height="15" fill="rgb(242,112,31)"/><text x="100.1300%" y="815.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="99.8800%" y="789" width="0.1200%" height="15" fill="rgb(249,192,27)"/><text x="100.1300%" y="799.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="99.8800%" y="773" width="0.1200%" height="15" fill="rgb(208,204,44)"/><text x="100.1300%" y="783.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.12%)</title><rect x="99.8800%" y="757" width="0.1200%" height="15" fill="rgb(208,93,54)"/><text x="100.1300%" y="767.50"></text></g><g><title>do_execve (6 samples, 0.12%)</title><rect x="99.8800%" y="741" width="0.1200%" height="15" fill="rgb(242,1,31)"/><text x="100.1300%" y="751.50"></text></g><g><title>__do_execve_file (6 samples, 0.12%)</title><rect x="99.8800%" y="725" width="0.1200%" height="15" fill="rgb(241,83,25)"/><text x="100.1300%" y="735.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.12%)</title><rect x="99.8800%" y="709" width="0.1200%" height="15" fill="rgb(205,169,50)"/><text x="100.1300%" y="719.50"></text></g><g><title>load_elf_binary (6 samples, 0.12%)</title><rect x="99.8800%" y="693" width="0.1200%" height="15" fill="rgb(239,186,37)"/><text x="100.1300%" y="703.50"></text></g><g><title>setup_new_exec (6 samples, 0.12%)</title><rect x="99.8800%" y="677" width="0.1200%" height="15" fill="rgb(205,221,10)"/><text x="100.1300%" y="687.50"></text></g><g><title>perf_event_exec (6 samples, 0.12%)</title><rect x="99.8800%" y="661" width="0.1200%" height="15" fill="rgb(218,196,15)"/><text x="100.1300%" y="671.50"></text></g></svg></svg>