<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (13 samples, 0.18%)</title><rect x="0.1095%" y="725" width="0.1779%" height="15" fill="rgb(227,0,7)"/><text x="0.3595%" y="735.50"></text></g><g><title>[[stack]] (10 samples, 0.14%)</title><rect x="0.2873%" y="725" width="0.1368%" height="15" fill="rgb(217,0,24)"/><text x="0.5373%" y="735.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (46 samples, 0.63%)</title><rect x="0.4241%" y="709" width="0.6294%" height="15" fill="rgb(221,193,54)"/><text x="0.6741%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.18%)</title><rect x="1.0535%" y="709" width="0.1779%" height="15" fill="rgb(248,212,6)"/><text x="1.3035%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (66 samples, 0.90%)</title><rect x="1.2314%" y="709" width="0.9030%" height="15" fill="rgb(208,68,35)"/><text x="1.4814%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.18%)</title><rect x="1.9565%" y="693" width="0.1779%" height="15" fill="rgb(232,128,0)"/><text x="2.2065%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.18%)</title><rect x="1.9565%" y="677" width="0.1779%" height="15" fill="rgb(207,160,47)"/><text x="2.2065%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.18%)</title><rect x="1.9565%" y="661" width="0.1779%" height="15" fill="rgb(228,23,34)"/><text x="2.2065%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.11%)</title><rect x="2.0249%" y="645" width="0.1095%" height="15" fill="rgb(218,30,26)"/><text x="2.2749%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.11%)</title><rect x="2.0249%" y="629" width="0.1095%" height="15" fill="rgb(220,122,19)"/><text x="2.2749%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.11%)</title><rect x="2.0249%" y="613" width="0.1095%" height="15" fill="rgb(250,228,42)"/><text x="2.2749%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.11%)</title><rect x="2.0249%" y="597" width="0.1095%" height="15" fill="rgb(240,193,28)"/><text x="2.2749%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.11%)</title><rect x="2.0249%" y="581" width="0.1095%" height="15" fill="rgb(216,20,37)"/><text x="2.2749%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.11%)</title><rect x="2.0249%" y="565" width="0.1095%" height="15" fill="rgb(206,188,39)"/><text x="2.2749%" y="575.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.11%)</title><rect x="2.0249%" y="549" width="0.1095%" height="15" fill="rgb(217,207,13)"/><text x="2.2749%" y="559.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (8 samples, 0.11%)</title><rect x="2.2712%" y="709" width="0.1095%" height="15" fill="rgb(231,73,38)"/><text x="2.5212%" y="719.50"></text></g><g><title>&lt;decor_mem::views::HashedRowPtr as core::cmp::PartialEq&gt;::eq (9 samples, 0.12%)</title><rect x="2.3806%" y="709" width="0.1231%" height="15" fill="rgb(225,20,46)"/><text x="2.6306%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.15%)</title><rect x="2.8184%" y="709" width="0.1505%" height="15" fill="rgb(210,31,41)"/><text x="3.0684%" y="719.50"></text></g><g><title>__GI___libc_free (14 samples, 0.19%)</title><rect x="3.0100%" y="709" width="0.1915%" height="15" fill="rgb(221,200,47)"/><text x="3.2600%" y="719.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.44%)</title><rect x="3.2015%" y="709" width="0.4378%" height="15" fill="rgb(226,26,5)"/><text x="3.4515%" y="719.50"></text></g><g><title>__GI___libc_realloc (20 samples, 0.27%)</title><rect x="3.6393%" y="709" width="0.2736%" height="15" fill="rgb(249,33,26)"/><text x="3.8893%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.25%)</title><rect x="4.0361%" y="709" width="0.2463%" height="15" fill="rgb(235,183,28)"/><text x="4.2861%" y="719.50"></text></g><g><title>__rdl_realloc (12 samples, 0.16%)</title><rect x="4.3098%" y="709" width="0.1642%" height="15" fill="rgb(221,5,38)"/><text x="4.5598%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (9 samples, 0.12%)</title><rect x="4.3508%" y="693" width="0.1231%" height="15" fill="rgb(247,18,42)"/><text x="4.6008%" y="703.50"></text></g><g><title>_int_free (77 samples, 1.05%)</title><rect x="4.4739%" y="709" width="1.0535%" height="15" fill="rgb(241,131,45)"/><text x="4.7239%" y="719.50"></text></g><g><title>_int_malloc (14 samples, 0.19%)</title><rect x="5.5274%" y="709" width="0.1915%" height="15" fill="rgb(249,31,29)"/><text x="5.7774%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (54 samples, 0.74%)</title><rect x="5.7874%" y="709" width="0.7388%" height="15" fill="rgb(225,111,53)"/><text x="6.0374%" y="719.50"></text></g><g><title>core::fmt::write (21 samples, 0.29%)</title><rect x="6.6357%" y="709" width="0.2873%" height="15" fill="rgb(238,160,17)"/><text x="6.8857%" y="719.50"></text></g><g><title>decor_mem::graph::EntityGraph::update_edge (8 samples, 0.11%)</title><rect x="7.0735%" y="709" width="0.1095%" height="15" fill="rgb(214,148,48)"/><text x="7.3235%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (8 samples, 0.11%)</title><rect x="7.4839%" y="709" width="0.1095%" height="15" fill="rgb(232,36,49)"/><text x="7.7339%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (12 samples, 0.16%)</title><rect x="7.7849%" y="709" width="0.1642%" height="15" fill="rgb(209,103,24)"/><text x="8.0349%" y="719.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (50 samples, 0.68%)</title><rect x="8.0449%" y="709" width="0.6841%" height="15" fill="rgb(229,88,8)"/><text x="8.2949%" y="719.50"></text></g><g><title>[anon] (617 samples, 8.44%)</title><rect x="0.4241%" y="725" width="8.4416%" height="15" fill="rgb(213,181,19)"/><text x="0.6741%" y="735.50">[anon]</text></g><g><title>_int_free (9 samples, 0.12%)</title><rect x="9.0710%" y="709" width="0.1231%" height="15" fill="rgb(254,191,54)"/><text x="9.3210%" y="719.50"></text></g><g><title>_int_realloc (16 samples, 0.22%)</title><rect x="9.1941%" y="709" width="0.2189%" height="15" fill="rgb(241,83,37)"/><text x="9.4441%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.15%)</title><rect x="9.4131%" y="709" width="0.1505%" height="15" fill="rgb(233,36,39)"/><text x="9.6631%" y="719.50"></text></g><g><title>[lobsters-microbenchmarks] (61 samples, 0.83%)</title><rect x="8.8795%" y="725" width="0.8346%" height="15" fill="rgb(226,3,54)"/><text x="9.1295%" y="735.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.14%)</title><rect x="9.7825%" y="709" width="0.1368%" height="15" fill="rgb(245,192,40)"/><text x="10.0325%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.23%)</title><rect x="9.9193%" y="709" width="0.2326%" height="15" fill="rgb(238,167,29)"/><text x="10.1693%" y="719.50"></text></g><g><title>ip_local_deliver (8 samples, 0.11%)</title><rect x="10.6307%" y="181" width="0.1095%" height="15" fill="rgb(232,182,51)"/><text x="10.8807%" y="191.50"></text></g><g><title>ip_local_deliver_finish (8 samples, 0.11%)</title><rect x="10.6307%" y="165" width="0.1095%" height="15" fill="rgb(231,60,39)"/><text x="10.8807%" y="175.50"></text></g><g><title>ip_protocol_deliver_rcu (8 samples, 0.11%)</title><rect x="10.6307%" y="149" width="0.1095%" height="15" fill="rgb(208,69,12)"/><text x="10.8807%" y="159.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.11%)</title><rect x="10.6307%" y="133" width="0.1095%" height="15" fill="rgb(235,93,37)"/><text x="10.8807%" y="143.50"></text></g><g><title>tcp_v4_do_rcv (8 samples, 0.11%)</title><rect x="10.6307%" y="117" width="0.1095%" height="15" fill="rgb(213,116,39)"/><text x="10.8807%" y="127.50"></text></g><g><title>tcp_rcv_established (8 samples, 0.11%)</title><rect x="10.6307%" y="101" width="0.1095%" height="15" fill="rgb(222,207,29)"/><text x="10.8807%" y="111.50"></text></g><g><title>__ip_queue_xmit (16 samples, 0.22%)</title><rect x="10.5350%" y="357" width="0.2189%" height="15" fill="rgb(206,96,30)"/><text x="10.7850%" y="367.50"></text></g><g><title>ip_output (15 samples, 0.21%)</title><rect x="10.5486%" y="341" width="0.2052%" height="15" fill="rgb(218,138,4)"/><text x="10.7986%" y="351.50"></text></g><g><title>ip_finish_output2 (15 samples, 0.21%)</title><rect x="10.5486%" y="325" width="0.2052%" height="15" fill="rgb(250,191,14)"/><text x="10.7986%" y="335.50"></text></g><g><title>__local_bh_enable_ip (12 samples, 0.16%)</title><rect x="10.5897%" y="309" width="0.1642%" height="15" fill="rgb(239,60,40)"/><text x="10.8397%" y="319.50"></text></g><g><title>do_softirq (12 samples, 0.16%)</title><rect x="10.5897%" y="293" width="0.1642%" height="15" fill="rgb(206,27,48)"/><text x="10.8397%" y="303.50"></text></g><g><title>do_softirq_own_stack (12 samples, 0.16%)</title><rect x="10.5897%" y="277" width="0.1642%" height="15" fill="rgb(225,35,8)"/><text x="10.8397%" y="287.50"></text></g><g><title>__do_softirq (12 samples, 0.16%)</title><rect x="10.5897%" y="261" width="0.1642%" height="15" fill="rgb(250,213,24)"/><text x="10.8397%" y="271.50"></text></g><g><title>net_rx_action (12 samples, 0.16%)</title><rect x="10.5897%" y="245" width="0.1642%" height="15" fill="rgb(247,123,22)"/><text x="10.8397%" y="255.50"></text></g><g><title>process_backlog (11 samples, 0.15%)</title><rect x="10.6034%" y="229" width="0.1505%" height="15" fill="rgb(231,138,38)"/><text x="10.8534%" y="239.50"></text></g><g><title>__netif_receive_skb_one_core (10 samples, 0.14%)</title><rect x="10.6170%" y="213" width="0.1368%" height="15" fill="rgb(231,145,46)"/><text x="10.8670%" y="223.50"></text></g><g><title>ip_rcv (9 samples, 0.12%)</title><rect x="10.6307%" y="197" width="0.1231%" height="15" fill="rgb(251,118,11)"/><text x="10.8807%" y="207.50"></text></g><g><title>__tcp_push_pending_frames (18 samples, 0.25%)</title><rect x="10.5213%" y="405" width="0.2463%" height="15" fill="rgb(217,147,25)"/><text x="10.7713%" y="415.50"></text></g><g><title>tcp_write_xmit (18 samples, 0.25%)</title><rect x="10.5213%" y="389" width="0.2463%" height="15" fill="rgb(247,81,37)"/><text x="10.7713%" y="399.50"></text></g><g><title>__tcp_transmit_skb (18 samples, 0.25%)</title><rect x="10.5213%" y="373" width="0.2463%" height="15" fill="rgb(209,12,38)"/><text x="10.7713%" y="383.50"></text></g><g><title>do_syscall_64 (27 samples, 0.37%)</title><rect x="10.4529%" y="501" width="0.3694%" height="15" fill="rgb(227,1,9)"/><text x="10.7029%" y="511.50"></text></g><g><title>__x64_sys_sendto (27 samples, 0.37%)</title><rect x="10.4529%" y="485" width="0.3694%" height="15" fill="rgb(248,47,43)"/><text x="10.7029%" y="495.50"></text></g><g><title>__sys_sendto (27 samples, 0.37%)</title><rect x="10.4529%" y="469" width="0.3694%" height="15" fill="rgb(221,10,30)"/><text x="10.7029%" y="479.50"></text></g><g><title>sock_sendmsg (25 samples, 0.34%)</title><rect x="10.4802%" y="453" width="0.3420%" height="15" fill="rgb(210,229,1)"/><text x="10.7302%" y="463.50"></text></g><g><title>tcp_sendmsg (25 samples, 0.34%)</title><rect x="10.4802%" y="437" width="0.3420%" height="15" fill="rgb(222,148,37)"/><text x="10.7302%" y="447.50"></text></g><g><title>tcp_sendmsg_locked (24 samples, 0.33%)</title><rect x="10.4939%" y="421" width="0.3284%" height="15" fill="rgb(234,67,33)"/><text x="10.7439%" y="431.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (32 samples, 0.44%)</title><rect x="10.4118%" y="629" width="0.4378%" height="15" fill="rgb(247,98,35)"/><text x="10.6618%" y="639.50"></text></g><g><title>mysql::conn::Conn::_query (32 samples, 0.44%)</title><rect x="10.4118%" y="613" width="0.4378%" height="15" fill="rgb(247,138,52)"/><text x="10.6618%" y="623.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (31 samples, 0.42%)</title><rect x="10.4255%" y="597" width="0.4241%" height="15" fill="rgb(213,79,30)"/><text x="10.6755%" y="607.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (30 samples, 0.41%)</title><rect x="10.4392%" y="581" width="0.4105%" height="15" fill="rgb(246,177,23)"/><text x="10.6892%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (30 samples, 0.41%)</title><rect x="10.4392%" y="565" width="0.4105%" height="15" fill="rgb(230,62,27)"/><text x="10.6892%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::write (30 samples, 0.41%)</title><rect x="10.4392%" y="549" width="0.4105%" height="15" fill="rgb(216,154,8)"/><text x="10.6892%" y="559.50"></text></g><g><title>__libc_send (30 samples, 0.41%)</title><rect x="10.4392%" y="533" width="0.4105%" height="15" fill="rgb(244,35,45)"/><text x="10.6892%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (29 samples, 0.40%)</title><rect x="10.4529%" y="517" width="0.3968%" height="15" fill="rgb(251,115,12)"/><text x="10.7029%" y="527.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (48 samples, 0.66%)</title><rect x="10.3024%" y="645" width="0.6567%" height="15" fill="rgb(240,54,50)"/><text x="10.5524%" y="655.50"></text></g><g><title>inet_recvmsg (11 samples, 0.15%)</title><rect x="10.9865%" y="421" width="0.1505%" height="15" fill="rgb(233,84,52)"/><text x="11.2365%" y="431.50"></text></g><g><title>tcp_recvmsg (11 samples, 0.15%)</title><rect x="10.9865%" y="405" width="0.1505%" height="15" fill="rgb(207,117,47)"/><text x="11.2365%" y="415.50"></text></g><g><title>__x64_sys_recvfrom (12 samples, 0.16%)</title><rect x="10.9865%" y="453" width="0.1642%" height="15" fill="rgb(249,43,39)"/><text x="11.2365%" y="463.50"></text></g><g><title>__sys_recvfrom (12 samples, 0.16%)</title><rect x="10.9865%" y="437" width="0.1642%" height="15" fill="rgb(209,38,44)"/><text x="11.2365%" y="447.50"></text></g><g><title>do_syscall_64 (13 samples, 0.18%)</title><rect x="10.9865%" y="469" width="0.1779%" height="15" fill="rgb(236,212,23)"/><text x="11.2365%" y="479.50"></text></g><g><title>mysql::conn::Conn::read_packet (17 samples, 0.23%)</title><rect x="10.9591%" y="613" width="0.2326%" height="15" fill="rgb(242,79,21)"/><text x="11.2091%" y="623.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.22%)</title><rect x="10.9728%" y="597" width="0.2189%" height="15" fill="rgb(211,96,35)"/><text x="11.2228%" y="607.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (15 samples, 0.21%)</title><rect x="10.9865%" y="581" width="0.2052%" height="15" fill="rgb(253,215,40)"/><text x="11.2365%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (15 samples, 0.21%)</title><rect x="10.9865%" y="565" width="0.2052%" height="15" fill="rgb(211,81,21)"/><text x="11.2365%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::read (15 samples, 0.21%)</title><rect x="10.9865%" y="549" width="0.2052%" height="15" fill="rgb(208,190,38)"/><text x="11.2365%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::read (15 samples, 0.21%)</title><rect x="10.9865%" y="533" width="0.2052%" height="15" fill="rgb(235,213,38)"/><text x="11.2365%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (15 samples, 0.21%)</title><rect x="10.9865%" y="517" width="0.2052%" height="15" fill="rgb(237,122,38)"/><text x="11.2365%" y="527.50"></text></g><g><title>__libc_recv (15 samples, 0.21%)</title><rect x="10.9865%" y="501" width="0.2052%" height="15" fill="rgb(244,218,35)"/><text x="11.2365%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (15 samples, 0.21%)</title><rect x="10.9865%" y="485" width="0.2052%" height="15" fill="rgb(240,68,47)"/><text x="11.2365%" y="495.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (66 samples, 0.90%)</title><rect x="10.3024%" y="661" width="0.9030%" height="15" fill="rgb(210,16,53)"/><text x="10.5524%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (18 samples, 0.25%)</title><rect x="10.9591%" y="645" width="0.2463%" height="15" fill="rgb(235,124,12)"/><text x="11.2091%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (18 samples, 0.25%)</title><rect x="10.9591%" y="629" width="0.2463%" height="15" fill="rgb(224,169,11)"/><text x="11.2091%" y="639.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (71 samples, 0.97%)</title><rect x="10.2476%" y="709" width="0.9714%" height="15" fill="rgb(250,166,2)"/><text x="10.4976%" y="719.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (71 samples, 0.97%)</title><rect x="10.2476%" y="693" width="0.9714%" height="15" fill="rgb(242,216,29)"/><text x="10.4976%" y="703.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (71 samples, 0.97%)</title><rect x="10.2476%" y="677" width="0.9714%" height="15" fill="rgb(230,116,27)"/><text x="10.4976%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.12%)</title><rect x="11.3148%" y="709" width="0.1231%" height="15" fill="rgb(228,99,48)"/><text x="11.5648%" y="719.50"></text></g><g><title>__GI___libc_free (11 samples, 0.15%)</title><rect x="11.5337%" y="709" width="0.1505%" height="15" fill="rgb(253,11,6)"/><text x="11.7837%" y="719.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.44%)</title><rect x="11.6842%" y="709" width="0.4378%" height="15" fill="rgb(247,143,39)"/><text x="11.9342%" y="719.50"></text></g><g><title>__clock_gettime_2 (8 samples, 0.11%)</title><rect x="12.1905%" y="709" width="0.1095%" height="15" fill="rgb(236,97,10)"/><text x="12.4405%" y="719.50"></text></g><g><title>__libc_start_main (11 samples, 0.15%)</title><rect x="12.3136%" y="709" width="0.1505%" height="15" fill="rgb(233,208,19)"/><text x="12.5636%" y="719.50"></text></g><g><title>main (11 samples, 0.15%)</title><rect x="12.3136%" y="693" width="0.1505%" height="15" fill="rgb(216,164,2)"/><text x="12.5636%" y="703.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 0.15%)</title><rect x="12.3136%" y="677" width="0.1505%" height="15" fill="rgb(220,129,5)"/><text x="12.5636%" y="687.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 0.15%)</title><rect x="12.3136%" y="661" width="0.1505%" height="15" fill="rgb(242,17,10)"/><text x="12.5636%" y="671.50"></text></g><g><title>std::panicking::try (11 samples, 0.15%)</title><rect x="12.3136%" y="645" width="0.1505%" height="15" fill="rgb(242,107,0)"/><text x="12.5636%" y="655.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 0.15%)</title><rect x="12.3136%" y="629" width="0.1505%" height="15" fill="rgb(251,28,31)"/><text x="12.5636%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 0.15%)</title><rect x="12.3136%" y="613" width="0.1505%" height="15" fill="rgb(233,223,10)"/><text x="12.5636%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11 samples, 0.15%)</title><rect x="12.3136%" y="597" width="0.1505%" height="15" fill="rgb(215,21,27)"/><text x="12.5636%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 0.15%)</title><rect x="12.3136%" y="581" width="0.1505%" height="15" fill="rgb(232,23,21)"/><text x="12.5636%" y="591.50"></text></g><g><title>lobsters_microbenchmarks::main (11 samples, 0.15%)</title><rect x="12.3136%" y="565" width="0.1505%" height="15" fill="rgb(244,5,23)"/><text x="12.5636%" y="575.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (9 samples, 0.12%)</title><rect x="12.3409%" y="549" width="0.1231%" height="15" fill="rgb(226,81,46)"/><text x="12.5909%" y="559.50"></text></g><g><title>alloc::fmt::format (9 samples, 0.12%)</title><rect x="12.3409%" y="533" width="0.1231%" height="15" fill="rgb(247,70,30)"/><text x="12.5909%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (8 samples, 0.11%)</title><rect x="12.3546%" y="517" width="0.1095%" height="15" fill="rgb(212,68,19)"/><text x="12.6046%" y="527.50"></text></g><g><title>core::fmt::write (8 samples, 0.11%)</title><rect x="12.3546%" y="501" width="0.1095%" height="15" fill="rgb(240,187,13)"/><text x="12.6046%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.15%)</title><rect x="12.4914%" y="709" width="0.1505%" height="15" fill="rgb(223,113,26)"/><text x="12.7414%" y="719.50"></text></g><g><title>_int_free (49 samples, 0.67%)</title><rect x="12.7514%" y="709" width="0.6704%" height="15" fill="rgb(206,192,2)"/><text x="13.0014%" y="719.50"></text></g><g><title>_int_malloc (19 samples, 0.26%)</title><rect x="13.4218%" y="709" width="0.2600%" height="15" fill="rgb(241,108,4)"/><text x="13.6718%" y="719.50"></text></g><g><title>_int_realloc (16 samples, 0.22%)</title><rect x="13.6818%" y="709" width="0.2189%" height="15" fill="rgb(247,173,49)"/><text x="13.9318%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.26%)</title><rect x="13.9280%" y="709" width="0.2600%" height="15" fill="rgb(224,114,35)"/><text x="14.1780%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad (15 samples, 0.21%)</title><rect x="14.1880%" y="709" width="0.2052%" height="15" fill="rgb(245,159,27)"/><text x="14.4380%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad_integral (8 samples, 0.11%)</title><rect x="14.3932%" y="709" width="0.1095%" height="15" fill="rgb(245,172,44)"/><text x="14.6432%" y="719.50"></text></g><g><title>core::fmt::write (22 samples, 0.30%)</title><rect x="14.6258%" y="709" width="0.3010%" height="15" fill="rgb(236,23,11)"/><text x="14.8758%" y="719.50"></text></g><g><title>decor_mem::views::View::insert_into_index (27 samples, 0.37%)</title><rect x="14.9268%" y="581" width="0.3694%" height="15" fill="rgb(205,117,38)"/><text x="15.1768%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (22 samples, 0.30%)</title><rect x="14.9952%" y="565" width="0.3010%" height="15" fill="rgb(237,72,25)"/><text x="15.2452%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (9 samples, 0.12%)</title><rect x="15.1731%" y="549" width="0.1231%" height="15" fill="rgb(244,70,9)"/><text x="15.4231%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.11%)</title><rect x="15.1868%" y="533" width="0.1095%" height="15" fill="rgb(217,125,39)"/><text x="15.4368%" y="543.50"></text></g><g><title>decor_mem::views::Views::insert (40 samples, 0.55%)</title><rect x="14.9268%" y="597" width="0.5473%" height="15" fill="rgb(235,36,10)"/><text x="15.1768%" y="607.50"></text></g><g><title>decor_mem::views::View::insert_row (13 samples, 0.18%)</title><rect x="15.2962%" y="581" width="0.1779%" height="15" fill="rgb(251,123,47)"/><text x="15.5462%" y="591.50"></text></g><g><title>core::fmt::write (13 samples, 0.18%)</title><rect x="15.2962%" y="565" width="0.1779%" height="15" fill="rgb(221,13,13)"/><text x="15.5462%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (13 samples, 0.18%)</title><rect x="15.2962%" y="549" width="0.1779%" height="15" fill="rgb(238,131,9)"/><text x="15.5462%" y="559.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (13 samples, 0.18%)</title><rect x="15.2962%" y="533" width="0.1779%" height="15" fill="rgb(211,50,8)"/><text x="15.5462%" y="543.50"></text></g><g><title>core::fmt::write (9 samples, 0.12%)</title><rect x="15.3509%" y="517" width="0.1231%" height="15" fill="rgb(245,182,24)"/><text x="15.6009%" y="527.50"></text></g><g><title>core::fmt::write (31 samples, 0.42%)</title><rect x="15.5425%" y="565" width="0.4241%" height="15" fill="rgb(242,14,37)"/><text x="15.7925%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (31 samples, 0.42%)</title><rect x="15.5425%" y="549" width="0.4241%" height="15" fill="rgb(246,228,12)"/><text x="15.7925%" y="559.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (25 samples, 0.34%)</title><rect x="15.6246%" y="533" width="0.3420%" height="15" fill="rgb(213,55,15)"/><text x="15.8746%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.15%)</title><rect x="15.8161%" y="517" width="0.1505%" height="15" fill="rgb(209,9,3)"/><text x="16.0661%" y="527.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.12%)</title><rect x="15.8435%" y="501" width="0.1231%" height="15" fill="rgb(230,59,30)"/><text x="16.0935%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (83 samples, 1.14%)</title><rect x="14.9268%" y="709" width="1.1356%" height="15" fill="rgb(209,121,21)"/><text x="15.1768%" y="719.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (83 samples, 1.14%)</title><rect x="14.9268%" y="693" width="1.1356%" height="15" fill="rgb(220,109,13)"/><text x="15.1768%" y="703.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (83 samples, 1.14%)</title><rect x="14.9268%" y="677" width="1.1356%" height="15" fill="rgb(232,18,1)"/><text x="15.1768%" y="687.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (83 samples, 1.14%)</title><rect x="14.9268%" y="661" width="1.1356%" height="15" fill="rgb(215,41,42)"/><text x="15.1768%" y="671.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (83 samples, 1.14%)</title><rect x="14.9268%" y="645" width="1.1356%" height="15" fill="rgb(224,123,36)"/><text x="15.1768%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (83 samples, 1.14%)</title><rect x="14.9268%" y="629" width="1.1356%" height="15" fill="rgb(240,125,3)"/><text x="15.1768%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (83 samples, 1.14%)</title><rect x="14.9268%" y="613" width="1.1356%" height="15" fill="rgb(205,98,50)"/><text x="15.1768%" y="623.50"></text></g><g><title>decor_mem::views::Views::update_index_and_row_of_view (43 samples, 0.59%)</title><rect x="15.4741%" y="597" width="0.5883%" height="15" fill="rgb(205,185,37)"/><text x="15.7241%" y="607.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (38 samples, 0.52%)</title><rect x="15.5425%" y="581" width="0.5199%" height="15" fill="rgb(238,207,15)"/><text x="15.7925%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.11%)</title><rect x="16.0624%" y="709" width="0.1095%" height="15" fill="rgb(213,199,42)"/><text x="16.3124%" y="719.50"></text></g><g><title>sock_def_readable (9 samples, 0.12%)</title><rect x="16.4044%" y="69" width="0.1231%" height="15" fill="rgb(235,201,11)"/><text x="16.6544%" y="79.50"></text></g><g><title>__wake_up_common_lock (8 samples, 0.11%)</title><rect x="16.4181%" y="53" width="0.1095%" height="15" fill="rgb(207,46,11)"/><text x="16.6681%" y="63.50"></text></g><g><title>__tcp_transmit_skb (18 samples, 0.25%)</title><rect x="16.3087%" y="357" width="0.2463%" height="15" fill="rgb(241,35,35)"/><text x="16.5587%" y="367.50"></text></g><g><title>__ip_queue_xmit (18 samples, 0.25%)</title><rect x="16.3087%" y="341" width="0.2463%" height="15" fill="rgb(243,32,47)"/><text x="16.5587%" y="351.50"></text></g><g><title>ip_output (18 samples, 0.25%)</title><rect x="16.3087%" y="325" width="0.2463%" height="15" fill="rgb(247,202,23)"/><text x="16.5587%" y="335.50"></text></g><g><title>ip_finish_output2 (18 samples, 0.25%)</title><rect x="16.3087%" y="309" width="0.2463%" height="15" fill="rgb(219,102,11)"/><text x="16.5587%" y="319.50"></text></g><g><title>__local_bh_enable_ip (16 samples, 0.22%)</title><rect x="16.3360%" y="293" width="0.2189%" height="15" fill="rgb(243,110,44)"/><text x="16.5860%" y="303.50"></text></g><g><title>do_softirq (16 samples, 0.22%)</title><rect x="16.3360%" y="277" width="0.2189%" height="15" fill="rgb(222,74,54)"/><text x="16.5860%" y="287.50"></text></g><g><title>do_softirq_own_stack (16 samples, 0.22%)</title><rect x="16.3360%" y="261" width="0.2189%" height="15" fill="rgb(216,99,12)"/><text x="16.5860%" y="271.50"></text></g><g><title>__do_softirq (16 samples, 0.22%)</title><rect x="16.3360%" y="245" width="0.2189%" height="15" fill="rgb(226,22,26)"/><text x="16.5860%" y="255.50"></text></g><g><title>net_rx_action (16 samples, 0.22%)</title><rect x="16.3360%" y="229" width="0.2189%" height="15" fill="rgb(217,163,10)"/><text x="16.5860%" y="239.50"></text></g><g><title>process_backlog (16 samples, 0.22%)</title><rect x="16.3360%" y="213" width="0.2189%" height="15" fill="rgb(213,25,53)"/><text x="16.5860%" y="223.50"></text></g><g><title>__netif_receive_skb_one_core (16 samples, 0.22%)</title><rect x="16.3360%" y="197" width="0.2189%" height="15" fill="rgb(252,105,26)"/><text x="16.5860%" y="207.50"></text></g><g><title>ip_rcv (16 samples, 0.22%)</title><rect x="16.3360%" y="181" width="0.2189%" height="15" fill="rgb(220,39,43)"/><text x="16.5860%" y="191.50"></text></g><g><title>ip_local_deliver (16 samples, 0.22%)</title><rect x="16.3360%" y="165" width="0.2189%" height="15" fill="rgb(229,68,48)"/><text x="16.5860%" y="175.50"></text></g><g><title>ip_local_deliver_finish (16 samples, 0.22%)</title><rect x="16.3360%" y="149" width="0.2189%" height="15" fill="rgb(252,8,32)"/><text x="16.5860%" y="159.50"></text></g><g><title>ip_protocol_deliver_rcu (16 samples, 0.22%)</title><rect x="16.3360%" y="133" width="0.2189%" height="15" fill="rgb(223,20,43)"/><text x="16.5860%" y="143.50"></text></g><g><title>tcp_v4_rcv (15 samples, 0.21%)</title><rect x="16.3497%" y="117" width="0.2052%" height="15" fill="rgb(229,81,49)"/><text x="16.5997%" y="127.50"></text></g><g><title>tcp_v4_do_rcv (13 samples, 0.18%)</title><rect x="16.3771%" y="101" width="0.1779%" height="15" fill="rgb(236,28,36)"/><text x="16.6271%" y="111.50"></text></g><g><title>tcp_rcv_established (13 samples, 0.18%)</title><rect x="16.3771%" y="85" width="0.1779%" height="15" fill="rgb(249,185,26)"/><text x="16.6271%" y="95.50"></text></g><g><title>__tcp_push_pending_frames (21 samples, 0.29%)</title><rect x="16.2813%" y="389" width="0.2873%" height="15" fill="rgb(249,174,33)"/><text x="16.5313%" y="399.50"></text></g><g><title>tcp_write_xmit (21 samples, 0.29%)</title><rect x="16.2813%" y="373" width="0.2873%" height="15" fill="rgb(233,201,37)"/><text x="16.5313%" y="383.50"></text></g><g><title>do_syscall_64 (28 samples, 0.38%)</title><rect x="16.2813%" y="485" width="0.3831%" height="15" fill="rgb(221,78,26)"/><text x="16.5313%" y="495.50"></text></g><g><title>__x64_sys_sendto (28 samples, 0.38%)</title><rect x="16.2813%" y="469" width="0.3831%" height="15" fill="rgb(250,127,30)"/><text x="16.5313%" y="479.50"></text></g><g><title>__sys_sendto (28 samples, 0.38%)</title><rect x="16.2813%" y="453" width="0.3831%" height="15" fill="rgb(230,49,44)"/><text x="16.5313%" y="463.50"></text></g><g><title>sock_sendmsg (28 samples, 0.38%)</title><rect x="16.2813%" y="437" width="0.3831%" height="15" fill="rgb(229,67,23)"/><text x="16.5313%" y="447.50"></text></g><g><title>tcp_sendmsg (28 samples, 0.38%)</title><rect x="16.2813%" y="421" width="0.3831%" height="15" fill="rgb(249,83,47)"/><text x="16.5313%" y="431.50"></text></g><g><title>tcp_sendmsg_locked (28 samples, 0.38%)</title><rect x="16.2813%" y="405" width="0.3831%" height="15" fill="rgb(215,43,3)"/><text x="16.5313%" y="415.50"></text></g><g><title>entry_SYSCALL_64 (29 samples, 0.40%)</title><rect x="16.2813%" y="501" width="0.3968%" height="15" fill="rgb(238,154,13)"/><text x="16.5313%" y="511.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (32 samples, 0.44%)</title><rect x="16.2539%" y="613" width="0.4378%" height="15" fill="rgb(219,56,2)"/><text x="16.5039%" y="623.50"></text></g><g><title>mysql::conn::Conn::_query (32 samples, 0.44%)</title><rect x="16.2539%" y="597" width="0.4378%" height="15" fill="rgb(233,0,4)"/><text x="16.5039%" y="607.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (31 samples, 0.42%)</title><rect x="16.2676%" y="581" width="0.4241%" height="15" fill="rgb(235,30,7)"/><text x="16.5176%" y="591.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (30 samples, 0.41%)</title><rect x="16.2813%" y="565" width="0.4105%" height="15" fill="rgb(250,79,13)"/><text x="16.5313%" y="575.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (30 samples, 0.41%)</title><rect x="16.2813%" y="549" width="0.4105%" height="15" fill="rgb(211,146,34)"/><text x="16.5313%" y="559.50"></text></g><g><title>std::sys_common::net::TcpStream::write (30 samples, 0.41%)</title><rect x="16.2813%" y="533" width="0.4105%" height="15" fill="rgb(228,22,38)"/><text x="16.5313%" y="543.50"></text></g><g><title>__libc_send (30 samples, 0.41%)</title><rect x="16.2813%" y="517" width="0.4105%" height="15" fill="rgb(235,168,5)"/><text x="16.5313%" y="527.50"></text></g><g><title>core::fmt::write (9 samples, 0.12%)</title><rect x="16.6917%" y="613" width="0.1231%" height="15" fill="rgb(221,155,16)"/><text x="16.9417%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (9 samples, 0.12%)</title><rect x="16.6917%" y="597" width="0.1231%" height="15" fill="rgb(215,215,53)"/><text x="16.9417%" y="607.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (49 samples, 0.67%)</title><rect x="16.2539%" y="629" width="0.6704%" height="15" fill="rgb(223,4,10)"/><text x="16.5039%" y="639.50"></text></g><g><title>decor_mem::views::Views::insert (8 samples, 0.11%)</title><rect x="16.8149%" y="613" width="0.1095%" height="15" fill="rgb(234,103,6)"/><text x="17.0649%" y="623.50"></text></g><g><title>core::fmt::write (9 samples, 0.12%)</title><rect x="17.2253%" y="581" width="0.1231%" height="15" fill="rgb(227,97,0)"/><text x="17.4753%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (41 samples, 0.56%)</title><rect x="16.9243%" y="613" width="0.5610%" height="15" fill="rgb(234,150,53)"/><text x="17.1743%" y="623.50"></text></g><g><title>decor_mem::views::View::get_row_of_id (41 samples, 0.56%)</title><rect x="16.9243%" y="597" width="0.5610%" height="15" fill="rgb(228,201,54)"/><text x="17.1743%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.14%)</title><rect x="17.3485%" y="581" width="0.1368%" height="15" fill="rgb(222,22,37)"/><text x="17.5985%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.12%)</title><rect x="17.3622%" y="565" width="0.1231%" height="15" fill="rgb(237,53,32)"/><text x="17.6122%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.14%)</title><rect x="17.7316%" y="549" width="0.1368%" height="15" fill="rgb(233,25,53)"/><text x="17.9816%" y="559.50"></text></g><g><title>core::fmt::write (30 samples, 0.41%)</title><rect x="17.4853%" y="613" width="0.4105%" height="15" fill="rgb(210,40,34)"/><text x="17.7353%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (30 samples, 0.41%)</title><rect x="17.4853%" y="597" width="0.4105%" height="15" fill="rgb(241,220,44)"/><text x="17.7353%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (26 samples, 0.36%)</title><rect x="17.5400%" y="581" width="0.3557%" height="15" fill="rgb(235,28,35)"/><text x="17.7900%" y="591.50"></text></g><g><title>core::fmt::write (14 samples, 0.19%)</title><rect x="17.7042%" y="565" width="0.1915%" height="15" fill="rgb(210,56,17)"/><text x="17.9542%" y="575.50"></text></g><g><title>alloc::string::String::with_capacity (16 samples, 0.22%)</title><rect x="18.0052%" y="581" width="0.2189%" height="15" fill="rgb(224,130,29)"/><text x="18.2552%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (16 samples, 0.22%)</title><rect x="18.0052%" y="565" width="0.2189%" height="15" fill="rgb(235,212,8)"/><text x="18.2552%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (16 samples, 0.22%)</title><rect x="18.0052%" y="549" width="0.2189%" height="15" fill="rgb(223,33,50)"/><text x="18.2552%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.22%)</title><rect x="18.0052%" y="533" width="0.2189%" height="15" fill="rgb(219,149,13)"/><text x="18.2552%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.22%)</title><rect x="18.0052%" y="517" width="0.2189%" height="15" fill="rgb(250,156,29)"/><text x="18.2552%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.22%)</title><rect x="18.0052%" y="501" width="0.2189%" height="15" fill="rgb(216,193,19)"/><text x="18.2552%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.22%)</title><rect x="18.0052%" y="485" width="0.2189%" height="15" fill="rgb(216,135,14)"/><text x="18.2552%" y="495.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.22%)</title><rect x="18.0052%" y="469" width="0.2189%" height="15" fill="rgb(241,47,5)"/><text x="18.2552%" y="479.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.22%)</title><rect x="18.0052%" y="453" width="0.2189%" height="15" fill="rgb(233,42,35)"/><text x="18.2552%" y="463.50"></text></g><g><title>_int_malloc (12 samples, 0.16%)</title><rect x="18.0599%" y="437" width="0.1642%" height="15" fill="rgb(231,13,6)"/><text x="18.3099%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.12%)</title><rect x="18.2925%" y="549" width="0.1231%" height="15" fill="rgb(207,181,40)"/><text x="18.5425%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (9 samples, 0.12%)</title><rect x="18.2925%" y="533" width="0.1231%" height="15" fill="rgb(254,173,49)"/><text x="18.5425%" y="543.50"></text></g><g><title>alloc::string::String::push_str (9 samples, 0.12%)</title><rect x="18.2925%" y="517" width="0.1231%" height="15" fill="rgb(221,1,38)"/><text x="18.5425%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (9 samples, 0.12%)</title><rect x="18.2925%" y="501" width="0.1231%" height="15" fill="rgb(206,124,46)"/><text x="18.5425%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.12%)</title><rect x="18.2925%" y="485" width="0.1231%" height="15" fill="rgb(249,21,11)"/><text x="18.5425%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (9 samples, 0.12%)</title><rect x="18.2925%" y="469" width="0.1231%" height="15" fill="rgb(222,201,40)"/><text x="18.5425%" y="479.50"></text></g><g><title>alloc::fmt::format (41 samples, 0.56%)</title><rect x="18.0052%" y="597" width="0.5610%" height="15" fill="rgb(235,61,29)"/><text x="18.2552%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (24 samples, 0.33%)</title><rect x="18.2378%" y="581" width="0.3284%" height="15" fill="rgb(219,207,3)"/><text x="18.4878%" y="591.50"></text></g><g><title>core::fmt::write (24 samples, 0.33%)</title><rect x="18.2378%" y="565" width="0.3284%" height="15" fill="rgb(222,56,46)"/><text x="18.4878%" y="575.50"></text></g><g><title>&lt;u64 as core::num::FromStrRadixHelper&gt;::checked_mul (10 samples, 0.14%)</title><rect x="18.8808%" y="549" width="0.1368%" height="15" fill="rgb(239,76,54)"/><text x="19.1308%" y="559.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_mul (10 samples, 0.14%)</title><rect x="18.8808%" y="533" width="0.1368%" height="15" fill="rgb(231,124,27)"/><text x="19.1308%" y="543.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (10 samples, 0.14%)</title><rect x="18.8808%" y="517" width="0.1368%" height="15" fill="rgb(249,195,6)"/><text x="19.1308%" y="527.50"></text></g><g><title>decor_mem::helpers::parser_val_to_u64 (29 samples, 0.40%)</title><rect x="18.6756%" y="597" width="0.3968%" height="15" fill="rgb(237,174,47)"/><text x="18.9256%" y="607.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (27 samples, 0.37%)</title><rect x="18.7030%" y="581" width="0.3694%" height="15" fill="rgb(206,201,31)"/><text x="18.9530%" y="591.50"></text></g><g><title>core::num::from_str_radix (26 samples, 0.36%)</title><rect x="18.7167%" y="565" width="0.3557%" height="15" fill="rgb(231,57,52)"/><text x="18.9667%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.15%)</title><rect x="19.0724%" y="597" width="0.1505%" height="15" fill="rgb(248,177,22)"/><text x="19.3224%" y="607.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (98 samples, 1.34%)</title><rect x="17.8957%" y="613" width="1.3408%" height="15" fill="rgb(215,211,37)"/><text x="18.1457%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (21 samples, 0.29%)</title><rect x="19.5512%" y="581" width="0.2873%" height="15" fill="rgb(241,128,51)"/><text x="19.8012%" y="591.50"></text></g><g><title>decor_mem::graph::EntityGraph::get_children_of_parent (50 samples, 0.68%)</title><rect x="19.2366%" y="613" width="0.6841%" height="15" fill="rgb(227,165,31)"/><text x="19.4866%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (50 samples, 0.68%)</title><rect x="19.2366%" y="597" width="0.6841%" height="15" fill="rgb(228,167,24)"/><text x="19.4866%" y="607.50"></text></g><g><title>decor_mem::helpers::get_ghosted_col_indices_of (12 samples, 0.16%)</title><rect x="19.9206%" y="613" width="0.1642%" height="15" fill="rgb(228,143,12)"/><text x="20.1706%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.12%)</title><rect x="19.9617%" y="597" width="0.1231%" height="15" fill="rgb(249,149,8)"/><text x="20.2117%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.12%)</title><rect x="20.9331%" y="581" width="0.1231%" height="15" fill="rgb(243,35,44)"/><text x="21.1831%" y="591.50"></text></g><g><title>__GI___libc_free (11 samples, 0.15%)</title><rect x="21.0562%" y="581" width="0.1505%" height="15" fill="rgb(246,89,9)"/><text x="21.3062%" y="591.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.26%)</title><rect x="21.2067%" y="581" width="0.2600%" height="15" fill="rgb(233,213,13)"/><text x="21.4567%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.11%)</title><rect x="21.4667%" y="581" width="0.1095%" height="15" fill="rgb(233,141,41)"/><text x="21.7167%" y="591.50"></text></g><g><title>_int_free (20 samples, 0.27%)</title><rect x="21.6719%" y="581" width="0.2736%" height="15" fill="rgb(239,167,4)"/><text x="21.9219%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (13 samples, 0.18%)</title><rect x="22.0413%" y="565" width="0.1779%" height="15" fill="rgb(209,217,16)"/><text x="22.2913%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (20 samples, 0.27%)</title><rect x="22.2876%" y="549" width="0.2736%" height="15" fill="rgb(219,88,35)"/><text x="22.5376%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.19%)</title><rect x="22.3697%" y="533" width="0.1915%" height="15" fill="rgb(220,193,23)"/><text x="22.6197%" y="543.50"></text></g><g><title>__GI___libc_free (10 samples, 0.14%)</title><rect x="23.1085%" y="501" width="0.1368%" height="15" fill="rgb(230,90,52)"/><text x="23.3585%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.15%)</title><rect x="23.3411%" y="501" width="0.1505%" height="15" fill="rgb(252,106,19)"/><text x="23.5911%" y="511.50"></text></g><g><title>_int_free (10 samples, 0.14%)</title><rect x="23.5737%" y="501" width="0.1368%" height="15" fill="rgb(206,74,20)"/><text x="23.8237%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (90 samples, 1.23%)</title><rect x="22.6296%" y="533" width="1.2314%" height="15" fill="rgb(230,138,44)"/><text x="22.8796%" y="543.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (78 samples, 1.07%)</title><rect x="22.7938%" y="517" width="1.0672%" height="15" fill="rgb(235,182,43)"/><text x="23.0438%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.15%)</title><rect x="23.7105%" y="501" width="0.1505%" height="15" fill="rgb(242,16,51)"/><text x="23.9605%" y="511.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.15%)</title><rect x="23.9431%" y="517" width="0.1505%" height="15" fill="rgb(248,9,4)"/><text x="24.1931%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (137 samples, 1.87%)</title><rect x="22.5612%" y="549" width="1.8744%" height="15" fill="rgb(210,31,22)"/><text x="22.8112%" y="559.50">&lt;..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (41 samples, 0.56%)</title><rect x="23.8747%" y="533" width="0.5610%" height="15" fill="rgb(239,54,39)"/><text x="24.1247%" y="543.50"></text></g><g><title>core::fmt::write (19 samples, 0.26%)</title><rect x="24.1757%" y="517" width="0.2600%" height="15" fill="rgb(230,99,41)"/><text x="24.4257%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (13 samples, 0.18%)</title><rect x="24.2578%" y="501" width="0.1779%" height="15" fill="rgb(253,106,12)"/><text x="24.5078%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.12%)</title><rect x="24.3125%" y="485" width="0.1231%" height="15" fill="rgb(213,46,41)"/><text x="24.5625%" y="495.50"></text></g><g><title>_int_free (8 samples, 0.11%)</title><rect x="24.5451%" y="549" width="0.1095%" height="15" fill="rgb(215,133,35)"/><text x="24.7951%" y="559.50"></text></g><g><title>__GI___libc_realloc (41 samples, 0.56%)</title><rect x="24.9555%" y="533" width="0.5610%" height="15" fill="rgb(213,28,5)"/><text x="25.2055%" y="543.50"></text></g><g><title>_int_realloc (16 samples, 0.22%)</title><rect x="25.2976%" y="517" width="0.2189%" height="15" fill="rgb(215,77,49)"/><text x="25.5476%" y="527.50"></text></g><g><title>_int_free (12 samples, 0.16%)</title><rect x="25.6670%" y="533" width="0.1642%" height="15" fill="rgb(248,100,22)"/><text x="25.9170%" y="543.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.15%)</title><rect x="25.9817%" y="517" width="0.1505%" height="15" fill="rgb(208,67,9)"/><text x="26.2317%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.33%)</title><rect x="25.8312%" y="533" width="0.3284%" height="15" fill="rgb(219,133,21)"/><text x="26.0812%" y="543.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.18%)</title><rect x="26.5289%" y="485" width="0.1779%" height="15" fill="rgb(246,46,29)"/><text x="26.7789%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (33 samples, 0.45%)</title><rect x="26.2827%" y="517" width="0.4515%" height="15" fill="rgb(246,185,52)"/><text x="26.5327%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.27%)</title><rect x="26.4605%" y="501" width="0.2736%" height="15" fill="rgb(252,136,11)"/><text x="26.7105%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (341 samples, 4.67%)</title><rect x="22.2329%" y="565" width="4.6655%" height="15" fill="rgb(219,138,53)"/><text x="22.4829%" y="575.50">&lt;sql_..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (163 samples, 2.23%)</title><rect x="24.6682%" y="549" width="2.2301%" height="15" fill="rgb(211,51,23)"/><text x="24.9182%" y="559.50">s..</text></g><g><title>core::fmt::write (54 samples, 0.74%)</title><rect x="26.1595%" y="533" width="0.7388%" height="15" fill="rgb(247,221,28)"/><text x="26.4095%" y="543.50"></text></g><g><title>core::fmt::write (363 samples, 4.97%)</title><rect x="21.9455%" y="581" width="4.9665%" height="15" fill="rgb(251,222,45)"/><text x="22.1955%" y="591.50">core::..</text></g><g><title>&lt;decor_mem::views::HashedRowPtr as core::cmp::PartialEq&gt;::eq (13 samples, 0.18%)</title><rect x="27.5688%" y="565" width="0.1779%" height="15" fill="rgb(217,162,53)"/><text x="27.8188%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (11 samples, 0.15%)</title><rect x="27.7466%" y="565" width="0.1505%" height="15" fill="rgb(229,93,14)"/><text x="27.9966%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.12%)</title><rect x="27.7740%" y="549" width="0.1231%" height="15" fill="rgb(209,67,49)"/><text x="28.0240%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.19%)</title><rect x="27.8971%" y="565" width="0.1915%" height="15" fill="rgb(213,87,29)"/><text x="28.1471%" y="575.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.12%)</title><rect x="28.1297%" y="565" width="0.1231%" height="15" fill="rgb(205,151,52)"/><text x="28.3797%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (100 samples, 1.37%)</title><rect x="26.9120%" y="581" width="1.3682%" height="15" fill="rgb(253,215,39)"/><text x="27.1620%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (33 samples, 0.45%)</title><rect x="28.2802%" y="581" width="0.4515%" height="15" fill="rgb(221,220,41)"/><text x="28.5302%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.18%)</title><rect x="28.5538%" y="565" width="0.1779%" height="15" fill="rgb(218,133,21)"/><text x="28.8038%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (16 samples, 0.22%)</title><rect x="28.8822%" y="501" width="0.2189%" height="15" fill="rgb(221,193,43)"/><text x="29.1322%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::ge (16 samples, 0.22%)</title><rect x="28.8822%" y="485" width="0.2189%" height="15" fill="rgb(240,128,52)"/><text x="29.1322%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (15 samples, 0.21%)</title><rect x="28.8959%" y="469" width="0.2052%" height="15" fill="rgb(253,114,12)"/><text x="29.1459%" y="479.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (15 samples, 0.21%)</title><rect x="28.8959%" y="453" width="0.2052%" height="15" fill="rgb(215,223,47)"/><text x="29.1459%" y="463.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (15 samples, 0.21%)</title><rect x="28.8959%" y="437" width="0.2052%" height="15" fill="rgb(248,225,23)"/><text x="29.1459%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (8 samples, 0.11%)</title><rect x="28.9917%" y="421" width="0.1095%" height="15" fill="rgb(250,108,0)"/><text x="29.2417%" y="431.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (30 samples, 0.41%)</title><rect x="28.7317%" y="565" width="0.4105%" height="15" fill="rgb(228,208,7)"/><text x="28.9817%" y="575.50"></text></g><g><title>std::time::Instant::duration_since (30 samples, 0.41%)</title><rect x="28.7317%" y="549" width="0.4105%" height="15" fill="rgb(244,45,10)"/><text x="28.9817%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (30 samples, 0.41%)</title><rect x="28.7317%" y="533" width="0.4105%" height="15" fill="rgb(207,125,25)"/><text x="28.9817%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (24 samples, 0.33%)</title><rect x="28.8138%" y="517" width="0.3284%" height="15" fill="rgb(210,195,18)"/><text x="29.0638%" y="527.50"></text></g><g><title>std::time::Instant::elapsed (48 samples, 0.66%)</title><rect x="28.7317%" y="581" width="0.6567%" height="15" fill="rgb(249,80,12)"/><text x="28.9817%" y="591.50"></text></g><g><title>std::time::Instant::now (18 samples, 0.25%)</title><rect x="29.1422%" y="565" width="0.2463%" height="15" fill="rgb(221,65,9)"/><text x="29.3922%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (18 samples, 0.25%)</title><rect x="29.1422%" y="549" width="0.2463%" height="15" fill="rgb(235,49,36)"/><text x="29.3922%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (18 samples, 0.25%)</title><rect x="29.1422%" y="533" width="0.2463%" height="15" fill="rgb(225,32,20)"/><text x="29.3922%" y="543.50"></text></g><g><title>__clock_gettime_2 (14 samples, 0.19%)</title><rect x="29.1969%" y="517" width="0.1915%" height="15" fill="rgb(215,141,46)"/><text x="29.4469%" y="527.50"></text></g><g><title>__vdso_clock_gettime (14 samples, 0.19%)</title><rect x="29.1969%" y="501" width="0.1915%" height="15" fill="rgb(250,160,47)"/><text x="29.4469%" y="511.50"></text></g><g><title>decor_mem::views::Views::delete_ghost_rptrs (707 samples, 9.67%)</title><rect x="20.0848%" y="613" width="9.6730%" height="15" fill="rgb(216,222,40)"/><text x="20.3348%" y="623.50">decor_mem::vie..</text></g><g><title>decor_mem::views::View::update_index_and_row (707 samples, 9.67%)</title><rect x="20.0848%" y="597" width="9.6730%" height="15" fill="rgb(234,217,39)"/><text x="20.3348%" y="607.50">decor_mem::vie..</text></g><g><title>std::time::Instant::now (27 samples, 0.37%)</title><rect x="29.3884%" y="581" width="0.3694%" height="15" fill="rgb(207,178,40)"/><text x="29.6384%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (27 samples, 0.37%)</title><rect x="29.3884%" y="565" width="0.3694%" height="15" fill="rgb(221,136,13)"/><text x="29.6384%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::now (27 samples, 0.37%)</title><rect x="29.3884%" y="549" width="0.3694%" height="15" fill="rgb(249,199,10)"/><text x="29.6384%" y="559.50"></text></g><g><title>__clock_gettime_2 (26 samples, 0.36%)</title><rect x="29.4021%" y="533" width="0.3557%" height="15" fill="rgb(249,222,13)"/><text x="29.6521%" y="543.50"></text></g><g><title>__vdso_clock_gettime (24 samples, 0.33%)</title><rect x="29.4295%" y="517" width="0.3284%" height="15" fill="rgb(244,185,38)"/><text x="29.6795%" y="527.50"></text></g><g><title>[[vdso]] (9 samples, 0.12%)</title><rect x="29.6347%" y="501" width="0.1231%" height="15" fill="rgb(236,202,9)"/><text x="29.8847%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.11%)</title><rect x="30.1272%" y="549" width="0.1095%" height="15" fill="rgb(250,229,37)"/><text x="30.3772%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (23 samples, 0.31%)</title><rect x="29.9494%" y="565" width="0.3147%" height="15" fill="rgb(206,174,23)"/><text x="30.1994%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (8 samples, 0.11%)</title><rect x="30.3598%" y="549" width="0.1095%" height="15" fill="rgb(211,33,43)"/><text x="30.6098%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.11%)</title><rect x="30.3598%" y="533" width="0.1095%" height="15" fill="rgb(245,58,50)"/><text x="30.6098%" y="543.50"></text></g><g><title>decor_mem::graph::EntityGraph::add_edge (48 samples, 0.66%)</title><rect x="29.8536%" y="581" width="0.6567%" height="15" fill="rgb(244,68,36)"/><text x="30.1036%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (18 samples, 0.25%)</title><rect x="30.2641%" y="565" width="0.2463%" height="15" fill="rgb(232,229,15)"/><text x="30.5141%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.18%)</title><rect x="30.7976%" y="565" width="0.1779%" height="15" fill="rgb(254,30,23)"/><text x="31.0476%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (40 samples, 0.55%)</title><rect x="30.5103%" y="581" width="0.5473%" height="15" fill="rgb(235,160,14)"/><text x="30.7603%" y="591.50"></text></g><g><title>decor_mem::graph::EntityGraph::update_edge (121 samples, 1.66%)</title><rect x="29.7578%" y="597" width="1.6555%" height="15" fill="rgb(212,155,44)"/><text x="30.0078%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (26 samples, 0.36%)</title><rect x="31.0576%" y="581" width="0.3557%" height="15" fill="rgb(226,2,50)"/><text x="31.3076%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (9 samples, 0.12%)</title><rect x="31.2902%" y="565" width="0.1231%" height="15" fill="rgb(234,177,6)"/><text x="31.5402%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.11%)</title><rect x="31.3039%" y="549" width="0.1095%" height="15" fill="rgb(217,24,9)"/><text x="31.5539%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.12%)</title><rect x="31.8375%" y="581" width="0.1231%" height="15" fill="rgb(220,13,46)"/><text x="32.0875%" y="591.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.15%)</title><rect x="32.0290%" y="581" width="0.1505%" height="15" fill="rgb(239,221,27)"/><text x="32.2790%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.11%)</title><rect x="32.1795%" y="581" width="0.1095%" height="15" fill="rgb(222,198,25)"/><text x="32.4295%" y="591.50"></text></g><g><title>_int_free (8 samples, 0.11%)</title><rect x="32.5489%" y="549" width="0.1095%" height="15" fill="rgb(211,99,13)"/><text x="32.7989%" y="559.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.21%)</title><rect x="32.7815%" y="533" width="0.2052%" height="15" fill="rgb(232,111,31)"/><text x="33.0315%" y="543.50"></text></g><g><title>core::fmt::write (72 samples, 0.99%)</title><rect x="32.3437%" y="581" width="0.9851%" height="15" fill="rgb(245,82,37)"/><text x="32.5937%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (67 samples, 0.92%)</title><rect x="32.4121%" y="565" width="0.9167%" height="15" fill="rgb(227,149,46)"/><text x="32.6621%" y="575.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (49 samples, 0.67%)</title><rect x="32.6584%" y="549" width="0.6704%" height="15" fill="rgb(218,36,50)"/><text x="32.9084%" y="559.50"></text></g><g><title>core::fmt::write (10 samples, 0.14%)</title><rect x="33.1920%" y="533" width="0.1368%" height="15" fill="rgb(226,80,48)"/><text x="33.4420%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (16 samples, 0.22%)</title><rect x="33.3561%" y="581" width="0.2189%" height="15" fill="rgb(238,224,15)"/><text x="33.6061%" y="591.50"></text></g><g><title>&lt;decor_mem::views::HashedRowPtr as core::cmp::PartialEq&gt;::eq (14 samples, 0.19%)</title><rect x="33.9445%" y="565" width="0.1915%" height="15" fill="rgb(241,136,10)"/><text x="34.1945%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (10 samples, 0.14%)</title><rect x="34.1360%" y="565" width="0.1368%" height="15" fill="rgb(208,32,45)"/><text x="34.3860%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.12%)</title><rect x="34.1497%" y="549" width="0.1231%" height="15" fill="rgb(207,135,9)"/><text x="34.3997%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (53 samples, 0.73%)</title><rect x="33.5750%" y="581" width="0.7251%" height="15" fill="rgb(206,86,44)"/><text x="33.8250%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.27%)</title><rect x="34.3002%" y="581" width="0.2736%" height="15" fill="rgb(245,177,15)"/><text x="34.5502%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.18%)</title><rect x="34.3960%" y="565" width="0.1779%" height="15" fill="rgb(206,64,50)"/><text x="34.6460%" y="575.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (16 samples, 0.22%)</title><rect x="34.5875%" y="565" width="0.2189%" height="15" fill="rgb(234,36,40)"/><text x="34.8375%" y="575.50"></text></g><g><title>std::time::Instant::duration_since (16 samples, 0.22%)</title><rect x="34.5875%" y="549" width="0.2189%" height="15" fill="rgb(213,64,8)"/><text x="34.8375%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (16 samples, 0.22%)</title><rect x="34.5875%" y="533" width="0.2189%" height="15" fill="rgb(210,75,36)"/><text x="34.8375%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (13 samples, 0.18%)</title><rect x="34.6285%" y="517" width="0.1779%" height="15" fill="rgb(229,88,21)"/><text x="34.8785%" y="527.50"></text></g><g><title>std::time::Instant::elapsed (37 samples, 0.51%)</title><rect x="34.5738%" y="581" width="0.5062%" height="15" fill="rgb(252,204,47)"/><text x="34.8238%" y="591.50"></text></g><g><title>std::time::Instant::now (20 samples, 0.27%)</title><rect x="34.8064%" y="565" width="0.2736%" height="15" fill="rgb(208,77,27)"/><text x="35.0564%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (20 samples, 0.27%)</title><rect x="34.8064%" y="549" width="0.2736%" height="15" fill="rgb(221,76,26)"/><text x="35.0564%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (20 samples, 0.27%)</title><rect x="34.8064%" y="533" width="0.2736%" height="15" fill="rgb(225,139,18)"/><text x="35.0564%" y="543.50"></text></g><g><title>__clock_gettime_2 (15 samples, 0.21%)</title><rect x="34.8748%" y="517" width="0.2052%" height="15" fill="rgb(230,137,11)"/><text x="35.1248%" y="527.50"></text></g><g><title>__vdso_clock_gettime (14 samples, 0.19%)</title><rect x="34.8885%" y="501" width="0.1915%" height="15" fill="rgb(212,28,1)"/><text x="35.1385%" y="511.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (1,393 samples, 19.06%)</title><rect x="16.2539%" y="661" width="19.0587%" height="15" fill="rgb(248,164,17)"/><text x="16.5039%" y="671.50">&lt;decor_mem::Shim as msql_srv::..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (1,393 samples, 19.06%)</title><rect x="16.2539%" y="645" width="19.0587%" height="15" fill="rgb(222,171,42)"/><text x="16.5039%" y="655.50">decor_mem::query_transformer::..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (1,344 samples, 18.39%)</title><rect x="16.9243%" y="629" width="18.3883%" height="15" fill="rgb(243,84,45)"/><text x="17.1743%" y="639.50">decor_mem::query_transformer:..</text></g><g><title>decor_mem::views::Views::update_index_and_row_of_view (406 samples, 5.55%)</title><rect x="29.7578%" y="613" width="5.5548%" height="15" fill="rgb(252,49,23)"/><text x="30.0078%" y="623.50">decor_m..</text></g><g><title>decor_mem::views::View::update_index_and_row (285 samples, 3.90%)</title><rect x="31.4133%" y="597" width="3.8993%" height="15" fill="rgb(215,19,7)"/><text x="31.6633%" y="607.50">deco..</text></g><g><title>std::time::Instant::now (17 samples, 0.23%)</title><rect x="35.0800%" y="581" width="0.2326%" height="15" fill="rgb(238,81,41)"/><text x="35.3300%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (17 samples, 0.23%)</title><rect x="35.0800%" y="565" width="0.2326%" height="15" fill="rgb(210,199,37)"/><text x="35.3300%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::now (17 samples, 0.23%)</title><rect x="35.0800%" y="549" width="0.2326%" height="15" fill="rgb(244,192,49)"/><text x="35.3300%" y="559.50"></text></g><g><title>__clock_gettime_2 (13 samples, 0.18%)</title><rect x="35.1348%" y="533" width="0.1779%" height="15" fill="rgb(226,211,11)"/><text x="35.3848%" y="543.50"></text></g><g><title>__vdso_clock_gettime (11 samples, 0.15%)</title><rect x="35.1621%" y="517" width="0.1505%" height="15" fill="rgb(236,162,54)"/><text x="35.4121%" y="527.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (20 samples, 0.27%)</title><rect x="35.4084%" y="581" width="0.2736%" height="15" fill="rgb(220,229,9)"/><text x="35.6584%" y="591.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (20 samples, 0.27%)</title><rect x="35.4084%" y="565" width="0.2736%" height="15" fill="rgb(250,87,22)"/><text x="35.6584%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (16 samples, 0.22%)</title><rect x="35.4631%" y="549" width="0.2189%" height="15" fill="rgb(239,43,17)"/><text x="35.7131%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.19%)</title><rect x="35.4905%" y="533" width="0.1915%" height="15" fill="rgb(231,177,25)"/><text x="35.7405%" y="543.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.19%)</title><rect x="35.4905%" y="517" width="0.1915%" height="15" fill="rgb(219,179,1)"/><text x="35.7405%" y="527.50"></text></g><g><title>_int_malloc (14 samples, 0.19%)</title><rect x="35.4905%" y="501" width="0.1915%" height="15" fill="rgb(238,219,53)"/><text x="35.7405%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.37%)</title><rect x="35.3263%" y="613" width="0.3694%" height="15" fill="rgb(232,167,36)"/><text x="35.5763%" y="623.50"></text></g><g><title>core::fmt::write (23 samples, 0.31%)</title><rect x="35.3810%" y="597" width="0.3147%" height="15" fill="rgb(244,19,51)"/><text x="35.6310%" y="607.50"></text></g><g><title>ip_finish_output2 (15 samples, 0.21%)</title><rect x="35.7778%" y="309" width="0.2052%" height="15" fill="rgb(224,6,22)"/><text x="36.0278%" y="319.50"></text></g><g><title>__local_bh_enable_ip (12 samples, 0.16%)</title><rect x="35.8189%" y="293" width="0.1642%" height="15" fill="rgb(224,145,5)"/><text x="36.0689%" y="303.50"></text></g><g><title>do_softirq (12 samples, 0.16%)</title><rect x="35.8189%" y="277" width="0.1642%" height="15" fill="rgb(234,130,49)"/><text x="36.0689%" y="287.50"></text></g><g><title>do_softirq_own_stack (10 samples, 0.14%)</title><rect x="35.8462%" y="261" width="0.1368%" height="15" fill="rgb(254,6,2)"/><text x="36.0962%" y="271.50"></text></g><g><title>__do_softirq (10 samples, 0.14%)</title><rect x="35.8462%" y="245" width="0.1368%" height="15" fill="rgb(208,96,46)"/><text x="36.0962%" y="255.50"></text></g><g><title>net_rx_action (10 samples, 0.14%)</title><rect x="35.8462%" y="229" width="0.1368%" height="15" fill="rgb(239,3,39)"/><text x="36.0962%" y="239.50"></text></g><g><title>process_backlog (10 samples, 0.14%)</title><rect x="35.8462%" y="213" width="0.1368%" height="15" fill="rgb(233,210,1)"/><text x="36.0962%" y="223.50"></text></g><g><title>__netif_receive_skb_one_core (10 samples, 0.14%)</title><rect x="35.8462%" y="197" width="0.1368%" height="15" fill="rgb(244,137,37)"/><text x="36.0962%" y="207.50"></text></g><g><title>ip_rcv (8 samples, 0.11%)</title><rect x="35.8736%" y="181" width="0.1095%" height="15" fill="rgb(240,136,2)"/><text x="36.1236%" y="191.50"></text></g><g><title>ip_local_deliver (8 samples, 0.11%)</title><rect x="35.8736%" y="165" width="0.1095%" height="15" fill="rgb(239,18,37)"/><text x="36.1236%" y="175.50"></text></g><g><title>ip_local_deliver_finish (8 samples, 0.11%)</title><rect x="35.8736%" y="149" width="0.1095%" height="15" fill="rgb(218,185,22)"/><text x="36.1236%" y="159.50"></text></g><g><title>ip_protocol_deliver_rcu (8 samples, 0.11%)</title><rect x="35.8736%" y="133" width="0.1095%" height="15" fill="rgb(225,218,4)"/><text x="36.1236%" y="143.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.11%)</title><rect x="35.8736%" y="117" width="0.1095%" height="15" fill="rgb(230,182,32)"/><text x="36.1236%" y="127.50"></text></g><g><title>__ip_queue_xmit (16 samples, 0.22%)</title><rect x="35.7778%" y="341" width="0.2189%" height="15" fill="rgb(242,56,43)"/><text x="36.0278%" y="351.50"></text></g><g><title>ip_output (16 samples, 0.22%)</title><rect x="35.7778%" y="325" width="0.2189%" height="15" fill="rgb(233,99,24)"/><text x="36.0278%" y="335.50"></text></g><g><title>__tcp_transmit_skb (18 samples, 0.25%)</title><rect x="35.7641%" y="357" width="0.2463%" height="15" fill="rgb(234,209,42)"/><text x="36.0141%" y="367.50"></text></g><g><title>__tcp_push_pending_frames (19 samples, 0.26%)</title><rect x="35.7641%" y="389" width="0.2600%" height="15" fill="rgb(227,7,12)"/><text x="36.0141%" y="399.50"></text></g><g><title>tcp_write_xmit (19 samples, 0.26%)</title><rect x="35.7641%" y="373" width="0.2600%" height="15" fill="rgb(245,203,43)"/><text x="36.0141%" y="383.50"></text></g><g><title>do_syscall_64 (22 samples, 0.30%)</title><rect x="35.7368%" y="485" width="0.3010%" height="15" fill="rgb(238,205,33)"/><text x="35.9868%" y="495.50"></text></g><g><title>__x64_sys_sendto (22 samples, 0.30%)</title><rect x="35.7368%" y="469" width="0.3010%" height="15" fill="rgb(231,56,7)"/><text x="35.9868%" y="479.50"></text></g><g><title>__sys_sendto (22 samples, 0.30%)</title><rect x="35.7368%" y="453" width="0.3010%" height="15" fill="rgb(244,186,29)"/><text x="35.9868%" y="463.50"></text></g><g><title>sock_sendmsg (21 samples, 0.29%)</title><rect x="35.7504%" y="437" width="0.2873%" height="15" fill="rgb(234,111,31)"/><text x="36.0004%" y="447.50"></text></g><g><title>tcp_sendmsg (20 samples, 0.27%)</title><rect x="35.7641%" y="421" width="0.2736%" height="15" fill="rgb(241,149,10)"/><text x="36.0141%" y="431.50"></text></g><g><title>tcp_sendmsg_locked (20 samples, 0.27%)</title><rect x="35.7641%" y="405" width="0.2736%" height="15" fill="rgb(249,206,44)"/><text x="36.0141%" y="415.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (27 samples, 0.37%)</title><rect x="35.6957%" y="613" width="0.3694%" height="15" fill="rgb(251,153,30)"/><text x="35.9457%" y="623.50"></text></g><g><title>mysql::conn::Conn::_query (25 samples, 0.34%)</title><rect x="35.7231%" y="597" width="0.3420%" height="15" fill="rgb(239,152,38)"/><text x="35.9731%" y="607.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (24 samples, 0.33%)</title><rect x="35.7368%" y="581" width="0.3284%" height="15" fill="rgb(249,139,47)"/><text x="35.9868%" y="591.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (24 samples, 0.33%)</title><rect x="35.7368%" y="565" width="0.3284%" height="15" fill="rgb(244,64,35)"/><text x="35.9868%" y="575.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (24 samples, 0.33%)</title><rect x="35.7368%" y="549" width="0.3284%" height="15" fill="rgb(216,46,15)"/><text x="35.9868%" y="559.50"></text></g><g><title>std::sys_common::net::TcpStream::write (24 samples, 0.33%)</title><rect x="35.7368%" y="533" width="0.3284%" height="15" fill="rgb(250,74,19)"/><text x="35.9868%" y="543.50"></text></g><g><title>__libc_send (24 samples, 0.33%)</title><rect x="35.7368%" y="517" width="0.3284%" height="15" fill="rgb(249,42,33)"/><text x="35.9868%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (24 samples, 0.33%)</title><rect x="35.7368%" y="501" width="0.3284%" height="15" fill="rgb(242,149,17)"/><text x="35.9868%" y="511.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.15%)</title><rect x="36.2156%" y="517" width="0.1505%" height="15" fill="rgb(244,29,21)"/><text x="36.4656%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (35 samples, 0.48%)</title><rect x="36.0925%" y="549" width="0.4789%" height="15" fill="rgb(220,130,37)"/><text x="36.3425%" y="559.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (31 samples, 0.42%)</title><rect x="36.1472%" y="533" width="0.4241%" height="15" fill="rgb(211,67,2)"/><text x="36.3972%" y="543.50"></text></g><g><title>core::fmt::write (9 samples, 0.12%)</title><rect x="36.4482%" y="517" width="0.1231%" height="15" fill="rgb(235,68,52)"/><text x="36.6982%" y="527.50"></text></g><g><title>alloc::fmt::format (42 samples, 0.57%)</title><rect x="36.0788%" y="613" width="0.5746%" height="15" fill="rgb(246,142,3)"/><text x="36.3288%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (42 samples, 0.57%)</title><rect x="36.0788%" y="597" width="0.5746%" height="15" fill="rgb(241,25,7)"/><text x="36.3288%" y="607.50"></text></g><g><title>core::fmt::write (42 samples, 0.57%)</title><rect x="36.0788%" y="581" width="0.5746%" height="15" fill="rgb(242,119,39)"/><text x="36.3288%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (42 samples, 0.57%)</title><rect x="36.0788%" y="565" width="0.5746%" height="15" fill="rgb(241,98,45)"/><text x="36.3288%" y="575.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (101 samples, 1.38%)</title><rect x="35.3126%" y="629" width="1.3819%" height="15" fill="rgb(254,28,30)"/><text x="35.5626%" y="639.50"></text></g><g><title>tcp_v4_do_rcv (10 samples, 0.14%)</title><rect x="36.9271%" y="101" width="0.1368%" height="15" fill="rgb(241,142,54)"/><text x="37.1771%" y="111.50"></text></g><g><title>tcp_rcv_established (10 samples, 0.14%)</title><rect x="36.9271%" y="85" width="0.1368%" height="15" fill="rgb(222,85,15)"/><text x="37.1771%" y="95.50"></text></g><g><title>ip_local_deliver (12 samples, 0.16%)</title><rect x="36.9134%" y="165" width="0.1642%" height="15" fill="rgb(210,85,47)"/><text x="37.1634%" y="175.50"></text></g><g><title>ip_local_deliver_finish (12 samples, 0.16%)</title><rect x="36.9134%" y="149" width="0.1642%" height="15" fill="rgb(224,206,25)"/><text x="37.1634%" y="159.50"></text></g><g><title>ip_protocol_deliver_rcu (12 samples, 0.16%)</title><rect x="36.9134%" y="133" width="0.1642%" height="15" fill="rgb(243,201,19)"/><text x="37.1634%" y="143.50"></text></g><g><title>tcp_v4_rcv (12 samples, 0.16%)</title><rect x="36.9134%" y="117" width="0.1642%" height="15" fill="rgb(236,59,4)"/><text x="37.1634%" y="127.50"></text></g><g><title>__tcp_transmit_skb (25 samples, 0.34%)</title><rect x="36.7492%" y="357" width="0.3420%" height="15" fill="rgb(254,179,45)"/><text x="36.9992%" y="367.50"></text></g><g><title>__ip_queue_xmit (25 samples, 0.34%)</title><rect x="36.7492%" y="341" width="0.3420%" height="15" fill="rgb(226,14,10)"/><text x="36.9992%" y="351.50"></text></g><g><title>ip_output (24 samples, 0.33%)</title><rect x="36.7629%" y="325" width="0.3284%" height="15" fill="rgb(244,27,41)"/><text x="37.0129%" y="335.50"></text></g><g><title>ip_finish_output2 (22 samples, 0.30%)</title><rect x="36.7903%" y="309" width="0.3010%" height="15" fill="rgb(235,35,32)"/><text x="37.0403%" y="319.50"></text></g><g><title>__local_bh_enable_ip (15 samples, 0.21%)</title><rect x="36.8860%" y="293" width="0.2052%" height="15" fill="rgb(218,68,31)"/><text x="37.1360%" y="303.50"></text></g><g><title>do_softirq (14 samples, 0.19%)</title><rect x="36.8997%" y="277" width="0.1915%" height="15" fill="rgb(207,120,37)"/><text x="37.1497%" y="287.50"></text></g><g><title>do_softirq_own_stack (14 samples, 0.19%)</title><rect x="36.8997%" y="261" width="0.1915%" height="15" fill="rgb(227,98,0)"/><text x="37.1497%" y="271.50"></text></g><g><title>__do_softirq (14 samples, 0.19%)</title><rect x="36.8997%" y="245" width="0.1915%" height="15" fill="rgb(207,7,3)"/><text x="37.1497%" y="255.50"></text></g><g><title>net_rx_action (14 samples, 0.19%)</title><rect x="36.8997%" y="229" width="0.1915%" height="15" fill="rgb(206,98,19)"/><text x="37.1497%" y="239.50"></text></g><g><title>process_backlog (13 samples, 0.18%)</title><rect x="36.9134%" y="213" width="0.1779%" height="15" fill="rgb(217,5,26)"/><text x="37.1634%" y="223.50"></text></g><g><title>__netif_receive_skb_one_core (13 samples, 0.18%)</title><rect x="36.9134%" y="197" width="0.1779%" height="15" fill="rgb(235,190,38)"/><text x="37.1634%" y="207.50"></text></g><g><title>ip_rcv (13 samples, 0.18%)</title><rect x="36.9134%" y="181" width="0.1779%" height="15" fill="rgb(247,86,24)"/><text x="37.1634%" y="191.50"></text></g><g><title>__tcp_push_pending_frames (26 samples, 0.36%)</title><rect x="36.7492%" y="389" width="0.3557%" height="15" fill="rgb(205,101,16)"/><text x="36.9992%" y="399.50"></text></g><g><title>tcp_write_xmit (26 samples, 0.36%)</title><rect x="36.7492%" y="373" width="0.3557%" height="15" fill="rgb(246,168,33)"/><text x="36.9992%" y="383.50"></text></g><g><title>__x64_sys_sendto (32 samples, 0.44%)</title><rect x="36.7082%" y="469" width="0.4378%" height="15" fill="rgb(231,114,1)"/><text x="36.9582%" y="479.50"></text></g><g><title>__sys_sendto (30 samples, 0.41%)</title><rect x="36.7355%" y="453" width="0.4105%" height="15" fill="rgb(207,184,53)"/><text x="36.9855%" y="463.50"></text></g><g><title>sock_sendmsg (30 samples, 0.41%)</title><rect x="36.7355%" y="437" width="0.4105%" height="15" fill="rgb(224,95,51)"/><text x="36.9855%" y="447.50"></text></g><g><title>tcp_sendmsg (30 samples, 0.41%)</title><rect x="36.7355%" y="421" width="0.4105%" height="15" fill="rgb(212,188,45)"/><text x="36.9855%" y="431.50"></text></g><g><title>tcp_sendmsg_locked (30 samples, 0.41%)</title><rect x="36.7355%" y="405" width="0.4105%" height="15" fill="rgb(223,154,38)"/><text x="36.9855%" y="415.50"></text></g><g><title>do_syscall_64 (34 samples, 0.47%)</title><rect x="36.6945%" y="485" width="0.4652%" height="15" fill="rgb(251,22,52)"/><text x="36.9445%" y="495.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (35 samples, 0.48%)</title><rect x="36.6945%" y="613" width="0.4789%" height="15" fill="rgb(229,209,22)"/><text x="36.9445%" y="623.50"></text></g><g><title>mysql::conn::Conn::_query (35 samples, 0.48%)</title><rect x="36.6945%" y="597" width="0.4789%" height="15" fill="rgb(234,138,34)"/><text x="36.9445%" y="607.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (35 samples, 0.48%)</title><rect x="36.6945%" y="581" width="0.4789%" height="15" fill="rgb(212,95,11)"/><text x="36.9445%" y="591.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (35 samples, 0.48%)</title><rect x="36.6945%" y="565" width="0.4789%" height="15" fill="rgb(240,179,47)"/><text x="36.9445%" y="575.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (35 samples, 0.48%)</title><rect x="36.6945%" y="549" width="0.4789%" height="15" fill="rgb(240,163,11)"/><text x="36.9445%" y="559.50"></text></g><g><title>std::sys_common::net::TcpStream::write (35 samples, 0.48%)</title><rect x="36.6945%" y="533" width="0.4789%" height="15" fill="rgb(236,37,12)"/><text x="36.9445%" y="543.50"></text></g><g><title>__libc_send (35 samples, 0.48%)</title><rect x="36.6945%" y="517" width="0.4789%" height="15" fill="rgb(232,164,16)"/><text x="36.9445%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (35 samples, 0.48%)</title><rect x="36.6945%" y="501" width="0.4789%" height="15" fill="rgb(244,205,15)"/><text x="36.9445%" y="511.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (53 samples, 0.73%)</title><rect x="36.6945%" y="629" width="0.7251%" height="15" fill="rgb(223,117,47)"/><text x="36.9445%" y="639.50"></text></g><g><title>decor_mem::views::Views::delete (11 samples, 0.15%)</title><rect x="37.2691%" y="613" width="0.1505%" height="15" fill="rgb(244,107,35)"/><text x="37.5191%" y="623.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (1,551 samples, 21.22%)</title><rect x="16.2266%" y="709" width="21.2204%" height="15" fill="rgb(205,140,8)"/><text x="16.4766%" y="719.50">decor_mem::Shim::run_on_tcp</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,551 samples, 21.22%)</title><rect x="16.2266%" y="693" width="21.2204%" height="15" fill="rgb(228,84,46)"/><text x="16.4766%" y="703.50">msql_srv::MysqlIntermediary&lt;B,R,W..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (1,551 samples, 21.22%)</title><rect x="16.2266%" y="677" width="21.2204%" height="15" fill="rgb(254,188,9)"/><text x="16.4766%" y="687.50">msql_srv::MysqlIntermediary&lt;B,R,W..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (156 samples, 2.13%)</title><rect x="35.3126%" y="661" width="2.1344%" height="15" fill="rgb(206,112,54)"/><text x="35.5626%" y="671.50">&lt;..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (156 samples, 2.13%)</title><rect x="35.3126%" y="645" width="2.1344%" height="15" fill="rgb(216,84,49)"/><text x="35.5626%" y="655.50">d..</text></g><g><title>decor_mem::graph::EntityGraph::add_edge (8 samples, 0.11%)</title><rect x="37.4607%" y="709" width="0.1095%" height="15" fill="rgb(214,194,35)"/><text x="37.7107%" y="719.50"></text></g><g><title>do_syscall_64 (8 samples, 0.11%)</title><rect x="37.6659%" y="469" width="0.1095%" height="15" fill="rgb(249,28,3)"/><text x="37.9159%" y="479.50"></text></g><g><title>__x64_sys_recvfrom (8 samples, 0.11%)</title><rect x="37.6659%" y="453" width="0.1095%" height="15" fill="rgb(222,56,52)"/><text x="37.9159%" y="463.50"></text></g><g><title>__sys_recvfrom (8 samples, 0.11%)</title><rect x="37.6659%" y="437" width="0.1095%" height="15" fill="rgb(245,217,50)"/><text x="37.9159%" y="447.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (11 samples, 0.15%)</title><rect x="37.6659%" y="709" width="0.1505%" height="15" fill="rgb(213,201,24)"/><text x="37.9159%" y="719.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (11 samples, 0.15%)</title><rect x="37.6659%" y="693" width="0.1505%" height="15" fill="rgb(248,116,28)"/><text x="37.9159%" y="703.50"></text></g><g><title>decor_mem::policy::generate_new_entities_from (11 samples, 0.15%)</title><rect x="37.6659%" y="677" width="0.1505%" height="15" fill="rgb(219,72,43)"/><text x="37.9159%" y="687.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (11 samples, 0.15%)</title><rect x="37.6659%" y="661" width="0.1505%" height="15" fill="rgb(209,138,14)"/><text x="37.9159%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (11 samples, 0.15%)</title><rect x="37.6659%" y="645" width="0.1505%" height="15" fill="rgb(222,18,33)"/><text x="37.9159%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (11 samples, 0.15%)</title><rect x="37.6659%" y="629" width="0.1505%" height="15" fill="rgb(213,199,7)"/><text x="37.9159%" y="639.50"></text></g><g><title>mysql::conn::Conn::read_packet (11 samples, 0.15%)</title><rect x="37.6659%" y="613" width="0.1505%" height="15" fill="rgb(250,110,10)"/><text x="37.9159%" y="623.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.15%)</title><rect x="37.6659%" y="597" width="0.1505%" height="15" fill="rgb(248,123,6)"/><text x="37.9159%" y="607.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (11 samples, 0.15%)</title><rect x="37.6659%" y="581" width="0.1505%" height="15" fill="rgb(206,91,31)"/><text x="37.9159%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (11 samples, 0.15%)</title><rect x="37.6659%" y="565" width="0.1505%" height="15" fill="rgb(211,154,13)"/><text x="37.9159%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::read (11 samples, 0.15%)</title><rect x="37.6659%" y="549" width="0.1505%" height="15" fill="rgb(225,148,7)"/><text x="37.9159%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::read (11 samples, 0.15%)</title><rect x="37.6659%" y="533" width="0.1505%" height="15" fill="rgb(220,160,43)"/><text x="37.9159%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (11 samples, 0.15%)</title><rect x="37.6659%" y="517" width="0.1505%" height="15" fill="rgb(213,52,39)"/><text x="37.9159%" y="527.50"></text></g><g><title>__libc_recv (11 samples, 0.15%)</title><rect x="37.6659%" y="501" width="0.1505%" height="15" fill="rgb(243,137,7)"/><text x="37.9159%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (11 samples, 0.15%)</title><rect x="37.6659%" y="485" width="0.1505%" height="15" fill="rgb(230,79,13)"/><text x="37.9159%" y="495.50"></text></g><g><title>decor_mem::views::View::insert_into_index (9 samples, 0.12%)</title><rect x="37.9122%" y="709" width="0.1231%" height="15" fill="rgb(247,105,23)"/><text x="38.1622%" y="719.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (16 samples, 0.22%)</title><rect x="38.0353%" y="709" width="0.2189%" height="15" fill="rgb(223,179,41)"/><text x="38.2853%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (9 samples, 0.12%)</title><rect x="38.4321%" y="709" width="0.1231%" height="15" fill="rgb(218,9,34)"/><text x="38.6821%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (13 samples, 0.18%)</title><rect x="38.5552%" y="709" width="0.1779%" height="15" fill="rgb(222,106,8)"/><text x="38.8052%" y="719.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.14%)</title><rect x="38.9930%" y="613" width="0.1368%" height="15" fill="rgb(211,220,0)"/><text x="39.2430%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.14%)</title><rect x="38.9930%" y="597" width="0.1368%" height="15" fill="rgb(229,52,16)"/><text x="39.2430%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (10 samples, 0.14%)</title><rect x="38.9930%" y="581" width="0.1368%" height="15" fill="rgb(212,155,18)"/><text x="39.2430%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (10 samples, 0.14%)</title><rect x="38.9930%" y="565" width="0.1368%" height="15" fill="rgb(242,21,14)"/><text x="39.2430%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (10 samples, 0.14%)</title><rect x="38.9930%" y="549" width="0.1368%" height="15" fill="rgb(222,19,48)"/><text x="39.2430%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (10 samples, 0.14%)</title><rect x="38.9930%" y="533" width="0.1368%" height="15" fill="rgb(232,45,27)"/><text x="39.2430%" y="543.50"></text></g><g><title>__libc_recv (10 samples, 0.14%)</title><rect x="38.9930%" y="517" width="0.1368%" height="15" fill="rgb(249,103,42)"/><text x="39.2430%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.12%)</title><rect x="39.0067%" y="501" width="0.1231%" height="15" fill="rgb(246,81,33)"/><text x="39.2567%" y="511.50"></text></g><g><title>do_syscall_64 (8 samples, 0.11%)</title><rect x="39.0204%" y="485" width="0.1095%" height="15" fill="rgb(252,33,42)"/><text x="39.2704%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (8 samples, 0.11%)</title><rect x="39.0204%" y="469" width="0.1095%" height="15" fill="rgb(209,212,41)"/><text x="39.2704%" y="479.50"></text></g><g><title>__sys_recvfrom (8 samples, 0.11%)</title><rect x="39.0204%" y="453" width="0.1095%" height="15" fill="rgb(207,154,6)"/><text x="39.2704%" y="463.50"></text></g><g><title>inet_recvmsg (8 samples, 0.11%)</title><rect x="39.0204%" y="437" width="0.1095%" height="15" fill="rgb(223,64,47)"/><text x="39.2704%" y="447.50"></text></g><g><title>tcp_recvmsg (8 samples, 0.11%)</title><rect x="39.0204%" y="421" width="0.1095%" height="15" fill="rgb(211,161,38)"/><text x="39.2704%" y="431.50"></text></g><g><title>mysql::conn::Conn::read_packet (11 samples, 0.15%)</title><rect x="38.9930%" y="629" width="0.1505%" height="15" fill="rgb(219,138,40)"/><text x="39.2430%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (12 samples, 0.16%)</title><rect x="38.9930%" y="645" width="0.1642%" height="15" fill="rgb(241,228,46)"/><text x="39.2430%" y="655.50"></text></g><g><title>ip_local_deliver (9 samples, 0.12%)</title><rect x="39.2667%" y="229" width="0.1231%" height="15" fill="rgb(223,209,38)"/><text x="39.5167%" y="239.50"></text></g><g><title>ip_local_deliver_finish (9 samples, 0.12%)</title><rect x="39.2667%" y="213" width="0.1231%" height="15" fill="rgb(236,164,45)"/><text x="39.5167%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (9 samples, 0.12%)</title><rect x="39.2667%" y="197" width="0.1231%" height="15" fill="rgb(231,15,5)"/><text x="39.5167%" y="207.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.11%)</title><rect x="39.2803%" y="181" width="0.1095%" height="15" fill="rgb(252,35,15)"/><text x="39.5303%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (8 samples, 0.11%)</title><rect x="39.2803%" y="165" width="0.1095%" height="15" fill="rgb(248,181,18)"/><text x="39.5303%" y="175.50"></text></g><g><title>tcp_rcv_established (8 samples, 0.11%)</title><rect x="39.2803%" y="149" width="0.1095%" height="15" fill="rgb(233,39,42)"/><text x="39.5303%" y="159.50"></text></g><g><title>__ip_queue_xmit (13 samples, 0.18%)</title><rect x="39.2256%" y="405" width="0.1779%" height="15" fill="rgb(238,110,33)"/><text x="39.4756%" y="415.50"></text></g><g><title>ip_output (11 samples, 0.15%)</title><rect x="39.2530%" y="389" width="0.1505%" height="15" fill="rgb(233,195,10)"/><text x="39.5030%" y="399.50"></text></g><g><title>ip_finish_output2 (11 samples, 0.15%)</title><rect x="39.2530%" y="373" width="0.1505%" height="15" fill="rgb(254,105,3)"/><text x="39.5030%" y="383.50"></text></g><g><title>__local_bh_enable_ip (11 samples, 0.15%)</title><rect x="39.2530%" y="357" width="0.1505%" height="15" fill="rgb(221,225,9)"/><text x="39.5030%" y="367.50"></text></g><g><title>do_softirq (11 samples, 0.15%)</title><rect x="39.2530%" y="341" width="0.1505%" height="15" fill="rgb(224,227,45)"/><text x="39.5030%" y="351.50"></text></g><g><title>do_softirq_own_stack (11 samples, 0.15%)</title><rect x="39.2530%" y="325" width="0.1505%" height="15" fill="rgb(229,198,43)"/><text x="39.5030%" y="335.50"></text></g><g><title>__do_softirq (11 samples, 0.15%)</title><rect x="39.2530%" y="309" width="0.1505%" height="15" fill="rgb(206,209,35)"/><text x="39.5030%" y="319.50"></text></g><g><title>net_rx_action (10 samples, 0.14%)</title><rect x="39.2667%" y="293" width="0.1368%" height="15" fill="rgb(245,195,53)"/><text x="39.5167%" y="303.50"></text></g><g><title>process_backlog (10 samples, 0.14%)</title><rect x="39.2667%" y="277" width="0.1368%" height="15" fill="rgb(240,92,26)"/><text x="39.5167%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (10 samples, 0.14%)</title><rect x="39.2667%" y="261" width="0.1368%" height="15" fill="rgb(207,40,23)"/><text x="39.5167%" y="271.50"></text></g><g><title>ip_rcv (10 samples, 0.14%)</title><rect x="39.2667%" y="245" width="0.1368%" height="15" fill="rgb(223,111,35)"/><text x="39.5167%" y="255.50"></text></g><g><title>__tcp_push_pending_frames (14 samples, 0.19%)</title><rect x="39.2256%" y="453" width="0.1915%" height="15" fill="rgb(229,147,28)"/><text x="39.4756%" y="463.50"></text></g><g><title>tcp_write_xmit (14 samples, 0.19%)</title><rect x="39.2256%" y="437" width="0.1915%" height="15" fill="rgb(211,29,28)"/><text x="39.4756%" y="447.50"></text></g><g><title>__tcp_transmit_skb (14 samples, 0.19%)</title><rect x="39.2256%" y="421" width="0.1915%" height="15" fill="rgb(228,72,33)"/><text x="39.4756%" y="431.50"></text></g><g><title>__x64_sys_sendto (20 samples, 0.27%)</title><rect x="39.2119%" y="533" width="0.2736%" height="15" fill="rgb(205,214,31)"/><text x="39.4619%" y="543.50"></text></g><g><title>__sys_sendto (20 samples, 0.27%)</title><rect x="39.2119%" y="517" width="0.2736%" height="15" fill="rgb(224,111,15)"/><text x="39.4619%" y="527.50"></text></g><g><title>sock_sendmsg (20 samples, 0.27%)</title><rect x="39.2119%" y="501" width="0.2736%" height="15" fill="rgb(253,21,26)"/><text x="39.4619%" y="511.50"></text></g><g><title>tcp_sendmsg (19 samples, 0.26%)</title><rect x="39.2256%" y="485" width="0.2600%" height="15" fill="rgb(245,139,43)"/><text x="39.4756%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (19 samples, 0.26%)</title><rect x="39.2256%" y="469" width="0.2600%" height="15" fill="rgb(252,170,7)"/><text x="39.4756%" y="479.50"></text></g><g><title>__libc_send (23 samples, 0.31%)</title><rect x="39.1846%" y="581" width="0.3147%" height="15" fill="rgb(231,118,14)"/><text x="39.4346%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (22 samples, 0.30%)</title><rect x="39.1982%" y="565" width="0.3010%" height="15" fill="rgb(238,83,0)"/><text x="39.4482%" y="575.50"></text></g><g><title>do_syscall_64 (21 samples, 0.29%)</title><rect x="39.2119%" y="549" width="0.2873%" height="15" fill="rgb(221,39,39)"/><text x="39.4619%" y="559.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (39 samples, 0.53%)</title><rect x="38.9793%" y="677" width="0.5336%" height="15" fill="rgb(222,119,46)"/><text x="39.2293%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (39 samples, 0.53%)</title><rect x="38.9793%" y="661" width="0.5336%" height="15" fill="rgb(222,165,49)"/><text x="39.2293%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (26 samples, 0.36%)</title><rect x="39.1572%" y="645" width="0.3557%" height="15" fill="rgb(219,113,52)"/><text x="39.4072%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (25 samples, 0.34%)</title><rect x="39.1709%" y="629" width="0.3420%" height="15" fill="rgb(214,7,15)"/><text x="39.4209%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (24 samples, 0.33%)</title><rect x="39.1846%" y="613" width="0.3284%" height="15" fill="rgb(235,32,4)"/><text x="39.4346%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (24 samples, 0.33%)</title><rect x="39.1846%" y="597" width="0.3284%" height="15" fill="rgb(238,90,54)"/><text x="39.4346%" y="607.50"></text></g><g><title>alloc::string::String::with_capacity (9 samples, 0.12%)</title><rect x="39.5950%" y="661" width="0.1231%" height="15" fill="rgb(213,208,19)"/><text x="39.8450%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.12%)</title><rect x="39.5950%" y="645" width="0.1231%" height="15" fill="rgb(233,156,4)"/><text x="39.8450%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (9 samples, 0.12%)</title><rect x="39.5950%" y="629" width="0.1231%" height="15" fill="rgb(207,194,5)"/><text x="39.8450%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.12%)</title><rect x="39.5950%" y="613" width="0.1231%" height="15" fill="rgb(206,111,30)"/><text x="39.8450%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.12%)</title><rect x="39.5950%" y="597" width="0.1231%" height="15" fill="rgb(243,70,54)"/><text x="39.8450%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (9 samples, 0.12%)</title><rect x="39.5950%" y="581" width="0.1231%" height="15" fill="rgb(242,28,8)"/><text x="39.8450%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.12%)</title><rect x="39.5950%" y="565" width="0.1231%" height="15" fill="rgb(219,106,18)"/><text x="39.8450%" y="575.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.11%)</title><rect x="39.6087%" y="549" width="0.1095%" height="15" fill="rgb(244,222,10)"/><text x="39.8587%" y="559.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.11%)</title><rect x="39.6087%" y="533" width="0.1095%" height="15" fill="rgb(236,179,52)"/><text x="39.8587%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.14%)</title><rect x="39.7729%" y="629" width="0.1368%" height="15" fill="rgb(213,23,39)"/><text x="40.0229%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.11%)</title><rect x="39.8002%" y="613" width="0.1095%" height="15" fill="rgb(238,48,10)"/><text x="40.0502%" y="623.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.11%)</title><rect x="39.8002%" y="597" width="0.1095%" height="15" fill="rgb(251,196,23)"/><text x="40.0502%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.11%)</title><rect x="39.8002%" y="581" width="0.1095%" height="15" fill="rgb(250,152,24)"/><text x="40.0502%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.11%)</title><rect x="39.8002%" y="565" width="0.1095%" height="15" fill="rgb(209,150,17)"/><text x="40.0502%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.11%)</title><rect x="39.8002%" y="549" width="0.1095%" height="15" fill="rgb(234,202,34)"/><text x="40.0502%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.11%)</title><rect x="39.9644%" y="597" width="0.1095%" height="15" fill="rgb(253,148,53)"/><text x="40.2144%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.11%)</title><rect x="39.9644%" y="581" width="0.1095%" height="15" fill="rgb(218,129,16)"/><text x="40.2144%" y="591.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.11%)</title><rect x="39.9644%" y="565" width="0.1095%" height="15" fill="rgb(216,85,19)"/><text x="40.2144%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.11%)</title><rect x="39.9644%" y="549" width="0.1095%" height="15" fill="rgb(235,228,7)"/><text x="40.2144%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.11%)</title><rect x="39.9644%" y="533" width="0.1095%" height="15" fill="rgb(245,175,0)"/><text x="40.2144%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.11%)</title><rect x="39.9644%" y="517" width="0.1095%" height="15" fill="rgb(208,168,36)"/><text x="40.2144%" y="527.50"></text></g><g><title>alloc::fmt::format (40 samples, 0.55%)</title><rect x="39.5950%" y="677" width="0.5473%" height="15" fill="rgb(246,171,24)"/><text x="39.8450%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (31 samples, 0.42%)</title><rect x="39.7182%" y="661" width="0.4241%" height="15" fill="rgb(215,142,24)"/><text x="39.9682%" y="671.50"></text></g><g><title>core::fmt::write (31 samples, 0.42%)</title><rect x="39.7182%" y="645" width="0.4241%" height="15" fill="rgb(250,187,7)"/><text x="39.9682%" y="655.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (16 samples, 0.22%)</title><rect x="39.9234%" y="629" width="0.2189%" height="15" fill="rgb(228,66,33)"/><text x="40.1734%" y="639.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (16 samples, 0.22%)</title><rect x="39.9234%" y="613" width="0.2189%" height="15" fill="rgb(234,215,21)"/><text x="40.1734%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::resubscribe_user (90 samples, 1.23%)</title><rect x="38.9246%" y="693" width="1.2314%" height="15" fill="rgb(222,191,20)"/><text x="39.1746%" y="703.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (9 samples, 0.12%)</title><rect x="40.1560%" y="645" width="0.1231%" height="15" fill="rgb(245,79,54)"/><text x="40.4060%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (9 samples, 0.12%)</title><rect x="40.1560%" y="629" width="0.1231%" height="15" fill="rgb(240,10,37)"/><text x="40.4060%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.12%)</title><rect x="40.1560%" y="613" width="0.1231%" height="15" fill="rgb(214,192,32)"/><text x="40.4060%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.12%)</title><rect x="40.1560%" y="597" width="0.1231%" height="15" fill="rgb(209,36,54)"/><text x="40.4060%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (9 samples, 0.12%)</title><rect x="40.1560%" y="581" width="0.1231%" height="15" fill="rgb(220,10,11)"/><text x="40.4060%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (9 samples, 0.12%)</title><rect x="40.1560%" y="565" width="0.1231%" height="15" fill="rgb(221,106,17)"/><text x="40.4060%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (9 samples, 0.12%)</title><rect x="40.1560%" y="549" width="0.1231%" height="15" fill="rgb(251,142,44)"/><text x="40.4060%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (9 samples, 0.12%)</title><rect x="40.1560%" y="533" width="0.1231%" height="15" fill="rgb(238,13,15)"/><text x="40.4060%" y="543.50"></text></g><g><title>__libc_recv (9 samples, 0.12%)</title><rect x="40.1560%" y="517" width="0.1231%" height="15" fill="rgb(208,107,27)"/><text x="40.4060%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.12%)</title><rect x="40.1560%" y="501" width="0.1231%" height="15" fill="rgb(205,136,37)"/><text x="40.4060%" y="511.50"></text></g><g><title>do_syscall_64 (9 samples, 0.12%)</title><rect x="40.1560%" y="485" width="0.1231%" height="15" fill="rgb(250,205,27)"/><text x="40.4060%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (9 samples, 0.12%)</title><rect x="40.1560%" y="469" width="0.1231%" height="15" fill="rgb(210,80,43)"/><text x="40.4060%" y="479.50"></text></g><g><title>__sys_recvfrom (9 samples, 0.12%)</title><rect x="40.1560%" y="453" width="0.1231%" height="15" fill="rgb(247,160,36)"/><text x="40.4060%" y="463.50"></text></g><g><title>inet_recvmsg (9 samples, 0.12%)</title><rect x="40.1560%" y="437" width="0.1231%" height="15" fill="rgb(234,13,49)"/><text x="40.4060%" y="447.50"></text></g><g><title>tcp_recvmsg (9 samples, 0.12%)</title><rect x="40.1560%" y="421" width="0.1231%" height="15" fill="rgb(234,122,0)"/><text x="40.4060%" y="431.50"></text></g><g><title>__netif_receive_skb_one_core (8 samples, 0.11%)</title><rect x="40.4022%" y="261" width="0.1095%" height="15" fill="rgb(207,146,38)"/><text x="40.6522%" y="271.50"></text></g><g><title>ip_rcv (8 samples, 0.11%)</title><rect x="40.4022%" y="245" width="0.1095%" height="15" fill="rgb(207,177,25)"/><text x="40.6522%" y="255.50"></text></g><g><title>ip_local_deliver (8 samples, 0.11%)</title><rect x="40.4022%" y="229" width="0.1095%" height="15" fill="rgb(211,178,42)"/><text x="40.6522%" y="239.50"></text></g><g><title>ip_local_deliver_finish (8 samples, 0.11%)</title><rect x="40.4022%" y="213" width="0.1095%" height="15" fill="rgb(230,69,54)"/><text x="40.6522%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (8 samples, 0.11%)</title><rect x="40.4022%" y="197" width="0.1095%" height="15" fill="rgb(214,135,41)"/><text x="40.6522%" y="207.50"></text></g><g><title>do_syscall_64 (17 samples, 0.23%)</title><rect x="40.2928%" y="549" width="0.2326%" height="15" fill="rgb(237,67,25)"/><text x="40.5428%" y="559.50"></text></g><g><title>__x64_sys_sendto (17 samples, 0.23%)</title><rect x="40.2928%" y="533" width="0.2326%" height="15" fill="rgb(222,189,50)"/><text x="40.5428%" y="543.50"></text></g><g><title>__sys_sendto (16 samples, 0.22%)</title><rect x="40.3065%" y="517" width="0.2189%" height="15" fill="rgb(245,148,34)"/><text x="40.5565%" y="527.50"></text></g><g><title>sock_sendmsg (16 samples, 0.22%)</title><rect x="40.3065%" y="501" width="0.2189%" height="15" fill="rgb(222,29,6)"/><text x="40.5565%" y="511.50"></text></g><g><title>tcp_sendmsg (16 samples, 0.22%)</title><rect x="40.3065%" y="485" width="0.2189%" height="15" fill="rgb(221,189,43)"/><text x="40.5565%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (16 samples, 0.22%)</title><rect x="40.3065%" y="469" width="0.2189%" height="15" fill="rgb(207,36,27)"/><text x="40.5565%" y="479.50"></text></g><g><title>__tcp_push_pending_frames (15 samples, 0.21%)</title><rect x="40.3202%" y="453" width="0.2052%" height="15" fill="rgb(217,90,24)"/><text x="40.5702%" y="463.50"></text></g><g><title>tcp_write_xmit (15 samples, 0.21%)</title><rect x="40.3202%" y="437" width="0.2052%" height="15" fill="rgb(224,66,35)"/><text x="40.5702%" y="447.50"></text></g><g><title>__tcp_transmit_skb (14 samples, 0.19%)</title><rect x="40.3338%" y="421" width="0.1915%" height="15" fill="rgb(221,13,50)"/><text x="40.5838%" y="431.50"></text></g><g><title>__ip_queue_xmit (13 samples, 0.18%)</title><rect x="40.3475%" y="405" width="0.1779%" height="15" fill="rgb(236,68,49)"/><text x="40.5975%" y="415.50"></text></g><g><title>ip_output (13 samples, 0.18%)</title><rect x="40.3475%" y="389" width="0.1779%" height="15" fill="rgb(229,146,28)"/><text x="40.5975%" y="399.50"></text></g><g><title>ip_finish_output2 (13 samples, 0.18%)</title><rect x="40.3475%" y="373" width="0.1779%" height="15" fill="rgb(225,31,38)"/><text x="40.5975%" y="383.50"></text></g><g><title>__local_bh_enable_ip (10 samples, 0.14%)</title><rect x="40.3886%" y="357" width="0.1368%" height="15" fill="rgb(250,208,3)"/><text x="40.6386%" y="367.50"></text></g><g><title>do_softirq (9 samples, 0.12%)</title><rect x="40.4022%" y="341" width="0.1231%" height="15" fill="rgb(246,54,23)"/><text x="40.6522%" y="351.50"></text></g><g><title>do_softirq_own_stack (9 samples, 0.12%)</title><rect x="40.4022%" y="325" width="0.1231%" height="15" fill="rgb(243,76,11)"/><text x="40.6522%" y="335.50"></text></g><g><title>__do_softirq (9 samples, 0.12%)</title><rect x="40.4022%" y="309" width="0.1231%" height="15" fill="rgb(245,21,50)"/><text x="40.6522%" y="319.50"></text></g><g><title>net_rx_action (9 samples, 0.12%)</title><rect x="40.4022%" y="293" width="0.1231%" height="15" fill="rgb(228,9,43)"/><text x="40.6522%" y="303.50"></text></g><g><title>process_backlog (9 samples, 0.12%)</title><rect x="40.4022%" y="277" width="0.1231%" height="15" fill="rgb(208,100,47)"/><text x="40.6522%" y="287.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (28 samples, 0.38%)</title><rect x="40.1560%" y="677" width="0.3831%" height="15" fill="rgb(232,26,8)"/><text x="40.4060%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (28 samples, 0.38%)</title><rect x="40.1560%" y="661" width="0.3831%" height="15" fill="rgb(216,166,38)"/><text x="40.4060%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (19 samples, 0.26%)</title><rect x="40.2791%" y="645" width="0.2600%" height="15" fill="rgb(251,202,51)"/><text x="40.5291%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (19 samples, 0.26%)</title><rect x="40.2791%" y="629" width="0.2600%" height="15" fill="rgb(254,216,34)"/><text x="40.5291%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (19 samples, 0.26%)</title><rect x="40.2791%" y="613" width="0.2600%" height="15" fill="rgb(251,32,27)"/><text x="40.5291%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (19 samples, 0.26%)</title><rect x="40.2791%" y="597" width="0.2600%" height="15" fill="rgb(208,127,28)"/><text x="40.5291%" y="607.50"></text></g><g><title>__libc_send (19 samples, 0.26%)</title><rect x="40.2791%" y="581" width="0.2600%" height="15" fill="rgb(224,137,22)"/><text x="40.5291%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (18 samples, 0.25%)</title><rect x="40.2928%" y="565" width="0.2463%" height="15" fill="rgb(254,70,32)"/><text x="40.5428%" y="575.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.14%)</title><rect x="40.5391%" y="677" width="0.1368%" height="15" fill="rgb(229,75,37)"/><text x="40.7891%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (10 samples, 0.14%)</title><rect x="40.5391%" y="661" width="0.1368%" height="15" fill="rgb(252,64,23)"/><text x="40.7891%" y="671.50"></text></g><g><title>mysql::conn::Conn::next_text (10 samples, 0.14%)</title><rect x="40.5391%" y="645" width="0.1368%" height="15" fill="rgb(232,162,48)"/><text x="40.7891%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (10 samples, 0.14%)</title><rect x="40.5391%" y="629" width="0.1368%" height="15" fill="rgb(246,160,12)"/><text x="40.7891%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.14%)</title><rect x="40.5391%" y="613" width="0.1368%" height="15" fill="rgb(247,166,0)"/><text x="40.7891%" y="623.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (10 samples, 0.14%)</title><rect x="40.5391%" y="597" width="0.1368%" height="15" fill="rgb(249,219,21)"/><text x="40.7891%" y="607.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (10 samples, 0.14%)</title><rect x="40.5391%" y="581" width="0.1368%" height="15" fill="rgb(205,209,3)"/><text x="40.7891%" y="591.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (10 samples, 0.14%)</title><rect x="40.5391%" y="565" width="0.1368%" height="15" fill="rgb(243,44,1)"/><text x="40.7891%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.14%)</title><rect x="40.5391%" y="549" width="0.1368%" height="15" fill="rgb(206,159,16)"/><text x="40.7891%" y="559.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.14%)</title><rect x="40.5391%" y="533" width="0.1368%" height="15" fill="rgb(244,77,30)"/><text x="40.7891%" y="543.50"></text></g><g><title>_int_malloc (10 samples, 0.14%)</title><rect x="40.5391%" y="517" width="0.1368%" height="15" fill="rgb(218,69,12)"/><text x="40.7891%" y="527.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (23 samples, 0.31%)</title><rect x="40.9222%" y="613" width="0.3147%" height="15" fill="rgb(212,87,7)"/><text x="41.1722%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (21 samples, 0.29%)</title><rect x="40.9495%" y="597" width="0.2873%" height="15" fill="rgb(245,114,25)"/><text x="41.1995%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.21%)</title><rect x="41.0316%" y="581" width="0.2052%" height="15" fill="rgb(210,61,42)"/><text x="41.2816%" y="591.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.21%)</title><rect x="41.0316%" y="565" width="0.2052%" height="15" fill="rgb(211,52,33)"/><text x="41.2816%" y="575.50"></text></g><g><title>_int_malloc (9 samples, 0.12%)</title><rect x="41.1137%" y="549" width="0.1231%" height="15" fill="rgb(234,58,33)"/><text x="41.3637%" y="559.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (42 samples, 0.57%)</title><rect x="40.7580%" y="629" width="0.5746%" height="15" fill="rgb(220,115,36)"/><text x="41.0080%" y="639.50"></text></g><g><title>lobsters_microbenchmarks::queriers::user::unsubscribe_user (88 samples, 1.20%)</title><rect x="40.1560%" y="693" width="1.2040%" height="15" fill="rgb(243,153,54)"/><text x="40.4060%" y="703.50"></text></g><g><title>serde_json::de::from_str (45 samples, 0.62%)</title><rect x="40.7443%" y="677" width="0.6157%" height="15" fill="rgb(251,47,18)"/><text x="40.9943%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (45 samples, 0.62%)</title><rect x="40.7443%" y="661" width="0.6157%" height="15" fill="rgb(242,102,42)"/><text x="40.9943%" y="671.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (45 samples, 0.62%)</title><rect x="40.7443%" y="645" width="0.6157%" height="15" fill="rgb(234,31,38)"/><text x="40.9943%" y="655.50"></text></g><g><title>lobsters_microbenchmarks::main (187 samples, 2.56%)</title><rect x="38.8152%" y="709" width="2.5585%" height="15" fill="rgb(221,117,51)"/><text x="39.0652%" y="719.50">lo..</text></g><g><title>__tcp_push_pending_frames (17 samples, 0.23%)</title><rect x="41.5652%" y="421" width="0.2326%" height="15" fill="rgb(212,20,18)"/><text x="41.8152%" y="431.50"></text></g><g><title>tcp_write_xmit (17 samples, 0.23%)</title><rect x="41.5652%" y="405" width="0.2326%" height="15" fill="rgb(245,133,36)"/><text x="41.8152%" y="415.50"></text></g><g><title>__tcp_transmit_skb (17 samples, 0.23%)</title><rect x="41.5652%" y="389" width="0.2326%" height="15" fill="rgb(212,6,19)"/><text x="41.8152%" y="399.50"></text></g><g><title>__ip_queue_xmit (17 samples, 0.23%)</title><rect x="41.5652%" y="373" width="0.2326%" height="15" fill="rgb(218,1,36)"/><text x="41.8152%" y="383.50"></text></g><g><title>ip_output (16 samples, 0.22%)</title><rect x="41.5789%" y="357" width="0.2189%" height="15" fill="rgb(246,84,54)"/><text x="41.8289%" y="367.50"></text></g><g><title>ip_finish_output2 (15 samples, 0.21%)</title><rect x="41.5926%" y="341" width="0.2052%" height="15" fill="rgb(242,110,6)"/><text x="41.8426%" y="351.50"></text></g><g><title>__local_bh_enable_ip (11 samples, 0.15%)</title><rect x="41.6473%" y="325" width="0.1505%" height="15" fill="rgb(214,47,5)"/><text x="41.8973%" y="335.50"></text></g><g><title>do_softirq (11 samples, 0.15%)</title><rect x="41.6473%" y="309" width="0.1505%" height="15" fill="rgb(218,159,25)"/><text x="41.8973%" y="319.50"></text></g><g><title>do_softirq_own_stack (11 samples, 0.15%)</title><rect x="41.6473%" y="293" width="0.1505%" height="15" fill="rgb(215,211,28)"/><text x="41.8973%" y="303.50"></text></g><g><title>__do_softirq (11 samples, 0.15%)</title><rect x="41.6473%" y="277" width="0.1505%" height="15" fill="rgb(238,59,32)"/><text x="41.8973%" y="287.50"></text></g><g><title>net_rx_action (11 samples, 0.15%)</title><rect x="41.6473%" y="261" width="0.1505%" height="15" fill="rgb(226,82,3)"/><text x="41.8973%" y="271.50"></text></g><g><title>process_backlog (11 samples, 0.15%)</title><rect x="41.6473%" y="245" width="0.1505%" height="15" fill="rgb(240,164,32)"/><text x="41.8973%" y="255.50"></text></g><g><title>__netif_receive_skb_one_core (10 samples, 0.14%)</title><rect x="41.6610%" y="229" width="0.1368%" height="15" fill="rgb(232,46,7)"/><text x="41.9110%" y="239.50"></text></g><g><title>ip_rcv (10 samples, 0.14%)</title><rect x="41.6610%" y="213" width="0.1368%" height="15" fill="rgb(229,129,53)"/><text x="41.9110%" y="223.50"></text></g><g><title>ip_local_deliver (10 samples, 0.14%)</title><rect x="41.6610%" y="197" width="0.1368%" height="15" fill="rgb(234,188,29)"/><text x="41.9110%" y="207.50"></text></g><g><title>ip_local_deliver_finish (10 samples, 0.14%)</title><rect x="41.6610%" y="181" width="0.1368%" height="15" fill="rgb(246,141,4)"/><text x="41.9110%" y="191.50"></text></g><g><title>ip_protocol_deliver_rcu (10 samples, 0.14%)</title><rect x="41.6610%" y="165" width="0.1368%" height="15" fill="rgb(229,23,39)"/><text x="41.9110%" y="175.50"></text></g><g><title>tcp_v4_rcv (9 samples, 0.12%)</title><rect x="41.6746%" y="149" width="0.1231%" height="15" fill="rgb(206,12,3)"/><text x="41.9246%" y="159.50"></text></g><g><title>tcp_v4_do_rcv (8 samples, 0.11%)</title><rect x="41.6883%" y="133" width="0.1095%" height="15" fill="rgb(252,226,20)"/><text x="41.9383%" y="143.50"></text></g><g><title>tcp_rcv_established (8 samples, 0.11%)</title><rect x="41.6883%" y="117" width="0.1095%" height="15" fill="rgb(216,123,35)"/><text x="41.9383%" y="127.50"></text></g><g><title>do_syscall_64 (25 samples, 0.34%)</title><rect x="41.5105%" y="517" width="0.3420%" height="15" fill="rgb(212,68,40)"/><text x="41.7605%" y="527.50"></text></g><g><title>__x64_sys_sendto (25 samples, 0.34%)</title><rect x="41.5105%" y="501" width="0.3420%" height="15" fill="rgb(254,125,32)"/><text x="41.7605%" y="511.50"></text></g><g><title>__sys_sendto (25 samples, 0.34%)</title><rect x="41.5105%" y="485" width="0.3420%" height="15" fill="rgb(253,97,22)"/><text x="41.7605%" y="495.50"></text></g><g><title>sock_sendmsg (25 samples, 0.34%)</title><rect x="41.5105%" y="469" width="0.3420%" height="15" fill="rgb(241,101,14)"/><text x="41.7605%" y="479.50"></text></g><g><title>tcp_sendmsg (24 samples, 0.33%)</title><rect x="41.5241%" y="453" width="0.3284%" height="15" fill="rgb(238,103,29)"/><text x="41.7741%" y="463.50"></text></g><g><title>tcp_sendmsg_locked (24 samples, 0.33%)</title><rect x="41.5241%" y="437" width="0.3284%" height="15" fill="rgb(233,195,47)"/><text x="41.7741%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (27 samples, 0.37%)</title><rect x="41.5105%" y="533" width="0.3694%" height="15" fill="rgb(246,218,30)"/><text x="41.7605%" y="543.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_gid_for_eid (30 samples, 0.41%)</title><rect x="41.4831%" y="645" width="0.4105%" height="15" fill="rgb(219,145,47)"/><text x="41.7331%" y="655.50"></text></g><g><title>mysql::conn::Conn::_query (29 samples, 0.40%)</title><rect x="41.4968%" y="629" width="0.3968%" height="15" fill="rgb(243,12,26)"/><text x="41.7468%" y="639.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (29 samples, 0.40%)</title><rect x="41.4968%" y="613" width="0.3968%" height="15" fill="rgb(214,87,16)"/><text x="41.7468%" y="623.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (28 samples, 0.38%)</title><rect x="41.5105%" y="597" width="0.3831%" height="15" fill="rgb(208,99,42)"/><text x="41.7605%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (28 samples, 0.38%)</title><rect x="41.5105%" y="581" width="0.3831%" height="15" fill="rgb(253,99,2)"/><text x="41.7605%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::write (28 samples, 0.38%)</title><rect x="41.5105%" y="565" width="0.3831%" height="15" fill="rgb(220,168,23)"/><text x="41.7605%" y="575.50"></text></g><g><title>__libc_send (28 samples, 0.38%)</title><rect x="41.5105%" y="549" width="0.3831%" height="15" fill="rgb(242,38,24)"/><text x="41.7605%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.15%)</title><rect x="41.9209%" y="613" width="0.1505%" height="15" fill="rgb(225,182,9)"/><text x="42.1709%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (10 samples, 0.14%)</title><rect x="41.9346%" y="597" width="0.1368%" height="15" fill="rgb(243,178,37)"/><text x="42.1846%" y="607.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (59 samples, 0.81%)</title><rect x="41.4421%" y="709" width="0.8072%" height="15" fill="rgb(232,139,19)"/><text x="41.6921%" y="719.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (58 samples, 0.79%)</title><rect x="41.4557%" y="693" width="0.7935%" height="15" fill="rgb(225,201,24)"/><text x="41.7057%" y="703.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (58 samples, 0.79%)</title><rect x="41.4557%" y="677" width="0.7935%" height="15" fill="rgb(221,47,46)"/><text x="41.7057%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (58 samples, 0.79%)</title><rect x="41.4557%" y="661" width="0.7935%" height="15" fill="rgb(249,23,13)"/><text x="41.7057%" y="671.50"></text></g><g><title>decor_mem::views::Views::insert (26 samples, 0.36%)</title><rect x="41.8936%" y="645" width="0.3557%" height="15" fill="rgb(219,9,5)"/><text x="42.1436%" y="655.50"></text></g><g><title>decor_mem::views::View::insert_into_index (25 samples, 0.34%)</title><rect x="41.9072%" y="629" width="0.3420%" height="15" fill="rgb(254,171,16)"/><text x="42.1572%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (13 samples, 0.18%)</title><rect x="42.0714%" y="613" width="0.1779%" height="15" fill="rgb(230,171,20)"/><text x="42.3214%" y="623.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.18%)</title><rect x="42.0714%" y="597" width="0.1779%" height="15" fill="rgb(210,71,41)"/><text x="42.3214%" y="607.50"></text></g><g><title>_int_malloc (13 samples, 0.18%)</title><rect x="42.0714%" y="581" width="0.1779%" height="15" fill="rgb(206,173,20)"/><text x="42.3214%" y="591.50"></text></g><g><title>sysmalloc (12 samples, 0.16%)</title><rect x="42.0851%" y="565" width="0.1642%" height="15" fill="rgb(233,88,34)"/><text x="42.3351%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.15%)</title><rect x="42.3040%" y="629" width="0.1505%" height="15" fill="rgb(223,209,46)"/><text x="42.5540%" y="639.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.15%)</title><rect x="42.3040%" y="613" width="0.1505%" height="15" fill="rgb(250,43,18)"/><text x="42.5540%" y="623.50"></text></g><g><title>_int_realloc (11 samples, 0.15%)</title><rect x="42.3040%" y="597" width="0.1505%" height="15" fill="rgb(208,13,10)"/><text x="42.5540%" y="607.50"></text></g><g><title>_int_malloc (10 samples, 0.14%)</title><rect x="42.3177%" y="581" width="0.1368%" height="15" fill="rgb(212,200,36)"/><text x="42.5677%" y="591.50"></text></g><g><title>decor_mem::views::Views::insert (11 samples, 0.15%)</title><rect x="42.5092%" y="629" width="0.1505%" height="15" fill="rgb(225,90,30)"/><text x="42.7592%" y="639.50"></text></g><g><title>decor_mem::views::View::insert_into_index (8 samples, 0.11%)</title><rect x="42.5503%" y="613" width="0.1095%" height="15" fill="rgb(236,182,39)"/><text x="42.8003%" y="623.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (28 samples, 0.38%)</title><rect x="42.2903%" y="661" width="0.3831%" height="15" fill="rgb(212,144,35)"/><text x="42.5403%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (28 samples, 0.38%)</title><rect x="42.2903%" y="645" width="0.3831%" height="15" fill="rgb(228,63,44)"/><text x="42.5403%" y="655.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (35 samples, 0.48%)</title><rect x="42.2903%" y="677" width="0.4789%" height="15" fill="rgb(228,109,6)"/><text x="42.5403%" y="687.50"></text></g><g><title>sk_wait_data (10 samples, 0.14%)</title><rect x="42.7966%" y="357" width="0.1368%" height="15" fill="rgb(238,117,24)"/><text x="43.0466%" y="367.50"></text></g><g><title>wait_woken (10 samples, 0.14%)</title><rect x="42.7966%" y="341" width="0.1368%" height="15" fill="rgb(242,26,26)"/><text x="43.0466%" y="351.50"></text></g><g><title>schedule_timeout (9 samples, 0.12%)</title><rect x="42.8102%" y="325" width="0.1231%" height="15" fill="rgb(221,92,48)"/><text x="43.0602%" y="335.50"></text></g><g><title>schedule (9 samples, 0.12%)</title><rect x="42.8102%" y="309" width="0.1231%" height="15" fill="rgb(209,209,32)"/><text x="43.0602%" y="319.50"></text></g><g><title>__schedule (8 samples, 0.11%)</title><rect x="42.8239%" y="293" width="0.1095%" height="15" fill="rgb(221,70,22)"/><text x="43.0739%" y="303.50"></text></g><g><title>__x64_sys_recvfrom (13 samples, 0.18%)</title><rect x="42.7692%" y="421" width="0.1779%" height="15" fill="rgb(248,145,5)"/><text x="43.0192%" y="431.50"></text></g><g><title>__sys_recvfrom (13 samples, 0.18%)</title><rect x="42.7692%" y="405" width="0.1779%" height="15" fill="rgb(226,116,26)"/><text x="43.0192%" y="415.50"></text></g><g><title>inet_recvmsg (13 samples, 0.18%)</title><rect x="42.7692%" y="389" width="0.1779%" height="15" fill="rgb(244,5,17)"/><text x="43.0192%" y="399.50"></text></g><g><title>tcp_recvmsg (13 samples, 0.18%)</title><rect x="42.7692%" y="373" width="0.1779%" height="15" fill="rgb(252,159,33)"/><text x="43.0192%" y="383.50"></text></g><g><title>entry_SYSCALL_64 (14 samples, 0.19%)</title><rect x="42.7692%" y="453" width="0.1915%" height="15" fill="rgb(206,71,0)"/><text x="43.0192%" y="463.50"></text></g><g><title>do_syscall_64 (14 samples, 0.19%)</title><rect x="42.7692%" y="437" width="0.1915%" height="15" fill="rgb(233,118,54)"/><text x="43.0192%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (15 samples, 0.21%)</title><rect x="42.7692%" y="549" width="0.2052%" height="15" fill="rgb(234,83,48)"/><text x="43.0192%" y="559.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (15 samples, 0.21%)</title><rect x="42.7692%" y="533" width="0.2052%" height="15" fill="rgb(228,3,54)"/><text x="43.0192%" y="543.50"></text></g><g><title>std::sys_common::net::TcpStream::read (15 samples, 0.21%)</title><rect x="42.7692%" y="517" width="0.2052%" height="15" fill="rgb(226,155,13)"/><text x="43.0192%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::read (15 samples, 0.21%)</title><rect x="42.7692%" y="501" width="0.2052%" height="15" fill="rgb(241,28,37)"/><text x="43.0192%" y="511.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (15 samples, 0.21%)</title><rect x="42.7692%" y="485" width="0.2052%" height="15" fill="rgb(233,93,10)"/><text x="43.0192%" y="495.50"></text></g><g><title>__libc_recv (15 samples, 0.21%)</title><rect x="42.7692%" y="469" width="0.2052%" height="15" fill="rgb(225,113,19)"/><text x="43.0192%" y="479.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (16 samples, 0.22%)</title><rect x="42.7692%" y="645" width="0.2189%" height="15" fill="rgb(241,2,18)"/><text x="43.0192%" y="655.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (16 samples, 0.22%)</title><rect x="42.7692%" y="629" width="0.2189%" height="15" fill="rgb(228,207,21)"/><text x="43.0192%" y="639.50"></text></g><g><title>mysql::conn::Conn::_query (16 samples, 0.22%)</title><rect x="42.7692%" y="613" width="0.2189%" height="15" fill="rgb(213,211,35)"/><text x="43.0192%" y="623.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (16 samples, 0.22%)</title><rect x="42.7692%" y="597" width="0.2189%" height="15" fill="rgb(209,83,10)"/><text x="43.0192%" y="607.50"></text></g><g><title>mysql::conn::Conn::read_packet (16 samples, 0.22%)</title><rect x="42.7692%" y="581" width="0.2189%" height="15" fill="rgb(209,164,1)"/><text x="43.0192%" y="591.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.22%)</title><rect x="42.7692%" y="565" width="0.2189%" height="15" fill="rgb(213,184,43)"/><text x="43.0192%" y="575.50"></text></g><g><title>do_syscall_64 (8 samples, 0.11%)</title><rect x="43.0155%" y="437" width="0.1095%" height="15" fill="rgb(231,61,34)"/><text x="43.2655%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (8 samples, 0.11%)</title><rect x="43.0155%" y="421" width="0.1095%" height="15" fill="rgb(235,75,3)"/><text x="43.2655%" y="431.50"></text></g><g><title>__sys_recvfrom (8 samples, 0.11%)</title><rect x="43.0155%" y="405" width="0.1095%" height="15" fill="rgb(220,106,47)"/><text x="43.2655%" y="415.50"></text></g><g><title>inet_recvmsg (8 samples, 0.11%)</title><rect x="43.0155%" y="389" width="0.1095%" height="15" fill="rgb(210,196,33)"/><text x="43.2655%" y="399.50"></text></g><g><title>tcp_recvmsg (8 samples, 0.11%)</title><rect x="43.0155%" y="373" width="0.1095%" height="15" fill="rgb(229,154,42)"/><text x="43.2655%" y="383.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (9 samples, 0.12%)</title><rect x="43.0155%" y="549" width="0.1231%" height="15" fill="rgb(228,114,26)"/><text x="43.2655%" y="559.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (9 samples, 0.12%)</title><rect x="43.0155%" y="533" width="0.1231%" height="15" fill="rgb(208,144,1)"/><text x="43.2655%" y="543.50"></text></g><g><title>std::sys_common::net::TcpStream::read (9 samples, 0.12%)</title><rect x="43.0155%" y="517" width="0.1231%" height="15" fill="rgb(239,112,37)"/><text x="43.2655%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::read (9 samples, 0.12%)</title><rect x="43.0155%" y="501" width="0.1231%" height="15" fill="rgb(210,96,50)"/><text x="43.2655%" y="511.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (9 samples, 0.12%)</title><rect x="43.0155%" y="485" width="0.1231%" height="15" fill="rgb(222,178,2)"/><text x="43.2655%" y="495.50"></text></g><g><title>__libc_recv (9 samples, 0.12%)</title><rect x="43.0155%" y="469" width="0.1231%" height="15" fill="rgb(226,74,18)"/><text x="43.2655%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.12%)</title><rect x="43.0155%" y="453" width="0.1231%" height="15" fill="rgb(225,67,54)"/><text x="43.2655%" y="463.50"></text></g><g><title>mysql::conn::Conn::read_packet (10 samples, 0.14%)</title><rect x="43.0155%" y="581" width="0.1368%" height="15" fill="rgb(251,92,32)"/><text x="43.2655%" y="591.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.14%)</title><rect x="43.0155%" y="565" width="0.1368%" height="15" fill="rgb(228,149,22)"/><text x="43.2655%" y="575.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (12 samples, 0.16%)</title><rect x="43.0018%" y="597" width="0.1642%" height="15" fill="rgb(243,54,13)"/><text x="43.2518%" y="607.50"></text></g><g><title>__tcp_transmit_skb (14 samples, 0.19%)</title><rect x="43.2344%" y="373" width="0.1915%" height="15" fill="rgb(243,180,28)"/><text x="43.4844%" y="383.50"></text></g><g><title>__ip_queue_xmit (13 samples, 0.18%)</title><rect x="43.2481%" y="357" width="0.1779%" height="15" fill="rgb(208,167,24)"/><text x="43.4981%" y="367.50"></text></g><g><title>ip_output (12 samples, 0.16%)</title><rect x="43.2617%" y="341" width="0.1642%" height="15" fill="rgb(245,73,45)"/><text x="43.5117%" y="351.50"></text></g><g><title>ip_finish_output2 (11 samples, 0.15%)</title><rect x="43.2754%" y="325" width="0.1505%" height="15" fill="rgb(237,203,48)"/><text x="43.5254%" y="335.50"></text></g><g><title>__local_bh_enable_ip (9 samples, 0.12%)</title><rect x="43.3028%" y="309" width="0.1231%" height="15" fill="rgb(211,197,16)"/><text x="43.5528%" y="319.50"></text></g><g><title>do_softirq (9 samples, 0.12%)</title><rect x="43.3028%" y="293" width="0.1231%" height="15" fill="rgb(243,99,51)"/><text x="43.5528%" y="303.50"></text></g><g><title>do_softirq_own_stack (9 samples, 0.12%)</title><rect x="43.3028%" y="277" width="0.1231%" height="15" fill="rgb(215,123,29)"/><text x="43.5528%" y="287.50"></text></g><g><title>__do_softirq (9 samples, 0.12%)</title><rect x="43.3028%" y="261" width="0.1231%" height="15" fill="rgb(239,186,37)"/><text x="43.5528%" y="271.50"></text></g><g><title>net_rx_action (8 samples, 0.11%)</title><rect x="43.3165%" y="245" width="0.1095%" height="15" fill="rgb(252,136,39)"/><text x="43.5665%" y="255.50"></text></g><g><title>process_backlog (8 samples, 0.11%)</title><rect x="43.3165%" y="229" width="0.1095%" height="15" fill="rgb(223,213,32)"/><text x="43.5665%" y="239.50"></text></g><g><title>__tcp_push_pending_frames (17 samples, 0.23%)</title><rect x="43.2070%" y="405" width="0.2326%" height="15" fill="rgb(233,115,5)"/><text x="43.4570%" y="415.50"></text></g><g><title>tcp_write_xmit (17 samples, 0.23%)</title><rect x="43.2070%" y="389" width="0.2326%" height="15" fill="rgb(207,226,44)"/><text x="43.4570%" y="399.50"></text></g><g><title>__x64_sys_sendto (23 samples, 0.31%)</title><rect x="43.1660%" y="485" width="0.3147%" height="15" fill="rgb(208,126,0)"/><text x="43.4160%" y="495.50"></text></g><g><title>__sys_sendto (23 samples, 0.31%)</title><rect x="43.1660%" y="469" width="0.3147%" height="15" fill="rgb(244,66,21)"/><text x="43.4160%" y="479.50"></text></g><g><title>sock_sendmsg (22 samples, 0.30%)</title><rect x="43.1796%" y="453" width="0.3010%" height="15" fill="rgb(222,97,12)"/><text x="43.4296%" y="463.50"></text></g><g><title>tcp_sendmsg (21 samples, 0.29%)</title><rect x="43.1933%" y="437" width="0.2873%" height="15" fill="rgb(219,213,19)"/><text x="43.4433%" y="447.50"></text></g><g><title>tcp_sendmsg_locked (21 samples, 0.29%)</title><rect x="43.1933%" y="421" width="0.2873%" height="15" fill="rgb(252,169,30)"/><text x="43.4433%" y="431.50"></text></g><g><title>do_syscall_64 (24 samples, 0.33%)</title><rect x="43.1660%" y="501" width="0.3284%" height="15" fill="rgb(206,32,51)"/><text x="43.4160%" y="511.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::resubscribe (38 samples, 0.52%)</title><rect x="42.9881%" y="629" width="0.5199%" height="15" fill="rgb(250,172,42)"/><text x="43.2381%" y="639.50"></text></g><g><title>mysql::conn::Conn::_query (38 samples, 0.52%)</title><rect x="42.9881%" y="613" width="0.5199%" height="15" fill="rgb(209,34,43)"/><text x="43.2381%" y="623.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (25 samples, 0.34%)</title><rect x="43.1660%" y="597" width="0.3420%" height="15" fill="rgb(223,11,35)"/><text x="43.4160%" y="607.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (25 samples, 0.34%)</title><rect x="43.1660%" y="581" width="0.3420%" height="15" fill="rgb(251,219,26)"/><text x="43.4160%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (25 samples, 0.34%)</title><rect x="43.1660%" y="565" width="0.3420%" height="15" fill="rgb(231,119,3)"/><text x="43.4160%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::write (25 samples, 0.34%)</title><rect x="43.1660%" y="549" width="0.3420%" height="15" fill="rgb(216,97,11)"/><text x="43.4160%" y="559.50"></text></g><g><title>__libc_send (25 samples, 0.34%)</title><rect x="43.1660%" y="533" width="0.3420%" height="15" fill="rgb(223,59,9)"/><text x="43.4160%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (25 samples, 0.34%)</title><rect x="43.1660%" y="517" width="0.3420%" height="15" fill="rgb(233,93,31)"/><text x="43.4160%" y="527.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (56 samples, 0.77%)</title><rect x="42.7692%" y="677" width="0.7662%" height="15" fill="rgb(239,81,33)"/><text x="43.0192%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (56 samples, 0.77%)</title><rect x="42.7692%" y="661" width="0.7662%" height="15" fill="rgb(213,120,34)"/><text x="43.0192%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (40 samples, 0.55%)</title><rect x="42.9881%" y="645" width="0.5473%" height="15" fill="rgb(243,49,53)"/><text x="43.2381%" y="655.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.11%)</title><rect x="43.5764%" y="549" width="0.1095%" height="15" fill="rgb(247,216,33)"/><text x="43.8264%" y="559.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (8 samples, 0.11%)</title><rect x="43.5764%" y="533" width="0.1095%" height="15" fill="rgb(226,26,14)"/><text x="43.8264%" y="543.50"></text></g><g><title>std::sys_common::net::TcpStream::read (8 samples, 0.11%)</title><rect x="43.5764%" y="517" width="0.1095%" height="15" fill="rgb(215,49,53)"/><text x="43.8264%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::read (8 samples, 0.11%)</title><rect x="43.5764%" y="501" width="0.1095%" height="15" fill="rgb(245,162,40)"/><text x="43.8264%" y="511.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (8 samples, 0.11%)</title><rect x="43.5764%" y="485" width="0.1095%" height="15" fill="rgb(229,68,17)"/><text x="43.8264%" y="495.50"></text></g><g><title>__libc_recv (8 samples, 0.11%)</title><rect x="43.5764%" y="469" width="0.1095%" height="15" fill="rgb(213,182,10)"/><text x="43.8264%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.11%)</title><rect x="43.5764%" y="453" width="0.1095%" height="15" fill="rgb(245,125,30)"/><text x="43.8264%" y="463.50"></text></g><g><title>do_syscall_64 (8 samples, 0.11%)</title><rect x="43.5764%" y="437" width="0.1095%" height="15" fill="rgb(232,202,2)"/><text x="43.8264%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (8 samples, 0.11%)</title><rect x="43.5764%" y="421" width="0.1095%" height="15" fill="rgb(237,140,51)"/><text x="43.8264%" y="431.50"></text></g><g><title>__sys_recvfrom (8 samples, 0.11%)</title><rect x="43.5764%" y="405" width="0.1095%" height="15" fill="rgb(236,157,25)"/><text x="43.8264%" y="415.50"></text></g><g><title>inet_recvmsg (8 samples, 0.11%)</title><rect x="43.5764%" y="389" width="0.1095%" height="15" fill="rgb(219,209,0)"/><text x="43.8264%" y="399.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (11 samples, 0.15%)</title><rect x="43.5490%" y="645" width="0.1505%" height="15" fill="rgb(240,116,54)"/><text x="43.7990%" y="655.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (11 samples, 0.15%)</title><rect x="43.5490%" y="629" width="0.1505%" height="15" fill="rgb(216,10,36)"/><text x="43.7990%" y="639.50"></text></g><g><title>mysql::conn::Conn::_query (11 samples, 0.15%)</title><rect x="43.5490%" y="613" width="0.1505%" height="15" fill="rgb(222,72,44)"/><text x="43.7990%" y="623.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (11 samples, 0.15%)</title><rect x="43.5490%" y="597" width="0.1505%" height="15" fill="rgb(232,159,9)"/><text x="43.7990%" y="607.50"></text></g><g><title>mysql::conn::Conn::read_packet (11 samples, 0.15%)</title><rect x="43.5490%" y="581" width="0.1505%" height="15" fill="rgb(210,39,32)"/><text x="43.7990%" y="591.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.14%)</title><rect x="43.5627%" y="565" width="0.1368%" height="15" fill="rgb(216,194,45)"/><text x="43.8127%" y="575.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.11%)</title><rect x="43.7680%" y="549" width="0.1095%" height="15" fill="rgb(218,18,35)"/><text x="44.0180%" y="559.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (8 samples, 0.11%)</title><rect x="43.7680%" y="533" width="0.1095%" height="15" fill="rgb(207,83,51)"/><text x="44.0180%" y="543.50"></text></g><g><title>std::sys_common::net::TcpStream::read (8 samples, 0.11%)</title><rect x="43.7680%" y="517" width="0.1095%" height="15" fill="rgb(225,63,43)"/><text x="44.0180%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::read (8 samples, 0.11%)</title><rect x="43.7680%" y="501" width="0.1095%" height="15" fill="rgb(207,57,36)"/><text x="44.0180%" y="511.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (8 samples, 0.11%)</title><rect x="43.7680%" y="485" width="0.1095%" height="15" fill="rgb(216,99,33)"/><text x="44.0180%" y="495.50"></text></g><g><title>__libc_recv (8 samples, 0.11%)</title><rect x="43.7680%" y="469" width="0.1095%" height="15" fill="rgb(225,42,16)"/><text x="44.0180%" y="479.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (14 samples, 0.19%)</title><rect x="43.6995%" y="629" width="0.1915%" height="15" fill="rgb(220,201,45)"/><text x="43.9495%" y="639.50"></text></g><g><title>mysql::conn::Conn::_query (14 samples, 0.19%)</title><rect x="43.6995%" y="613" width="0.1915%" height="15" fill="rgb(225,33,4)"/><text x="43.9495%" y="623.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (14 samples, 0.19%)</title><rect x="43.6995%" y="597" width="0.1915%" height="15" fill="rgb(224,33,50)"/><text x="43.9495%" y="607.50"></text></g><g><title>mysql::conn::Conn::read_packet (14 samples, 0.19%)</title><rect x="43.6995%" y="581" width="0.1915%" height="15" fill="rgb(246,198,51)"/><text x="43.9495%" y="591.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.12%)</title><rect x="43.7680%" y="565" width="0.1231%" height="15" fill="rgb(205,22,4)"/><text x="44.0180%" y="575.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (126 samples, 1.72%)</title><rect x="42.2493%" y="709" width="1.7239%" height="15" fill="rgb(206,3,8)"/><text x="42.4993%" y="719.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (126 samples, 1.72%)</title><rect x="42.2493%" y="693" width="1.7239%" height="15" fill="rgb(251,23,15)"/><text x="42.4993%" y="703.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (32 samples, 0.44%)</title><rect x="43.5354%" y="677" width="0.4378%" height="15" fill="rgb(252,88,28)"/><text x="43.7854%" y="687.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (32 samples, 0.44%)</title><rect x="43.5354%" y="661" width="0.4378%" height="15" fill="rgb(212,127,14)"/><text x="43.7854%" y="671.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::remove_entities (20 samples, 0.27%)</title><rect x="43.6995%" y="645" width="0.2736%" height="15" fill="rgb(247,145,37)"/><text x="43.9495%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (26 samples, 0.36%)</title><rect x="44.0963%" y="597" width="0.3557%" height="15" fill="rgb(209,117,53)"/><text x="44.3463%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (26 samples, 0.36%)</title><rect x="44.0963%" y="581" width="0.3557%" height="15" fill="rgb(212,90,42)"/><text x="44.3463%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (26 samples, 0.36%)</title><rect x="44.0963%" y="565" width="0.3557%" height="15" fill="rgb(218,164,37)"/><text x="44.3463%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.36%)</title><rect x="44.0963%" y="549" width="0.3557%" height="15" fill="rgb(246,65,34)"/><text x="44.3463%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (26 samples, 0.36%)</title><rect x="44.0963%" y="533" width="0.3557%" height="15" fill="rgb(231,100,33)"/><text x="44.3463%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 0.36%)</title><rect x="44.0963%" y="517" width="0.3557%" height="15" fill="rgb(228,126,14)"/><text x="44.3463%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (26 samples, 0.36%)</title><rect x="44.0963%" y="501" width="0.3557%" height="15" fill="rgb(215,173,21)"/><text x="44.3463%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.36%)</title><rect x="44.0963%" y="485" width="0.3557%" height="15" fill="rgb(210,6,40)"/><text x="44.3463%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (26 samples, 0.36%)</title><rect x="44.0963%" y="469" width="0.3557%" height="15" fill="rgb(212,48,18)"/><text x="44.3463%" y="479.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (28 samples, 0.38%)</title><rect x="44.0826%" y="629" width="0.3831%" height="15" fill="rgb(230,214,11)"/><text x="44.3326%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::expected (27 samples, 0.37%)</title><rect x="44.0963%" y="613" width="0.3694%" height="15" fill="rgb(254,105,39)"/><text x="44.3463%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (34 samples, 0.47%)</title><rect x="44.0690%" y="709" width="0.4652%" height="15" fill="rgb(245,158,5)"/><text x="44.3190%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (34 samples, 0.47%)</title><rect x="44.0690%" y="693" width="0.4652%" height="15" fill="rgb(249,208,11)"/><text x="44.3190%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (34 samples, 0.47%)</title><rect x="44.0690%" y="677" width="0.4652%" height="15" fill="rgb(210,39,28)"/><text x="44.3190%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (34 samples, 0.47%)</title><rect x="44.0690%" y="661" width="0.4652%" height="15" fill="rgb(211,56,53)"/><text x="44.3190%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (34 samples, 0.47%)</title><rect x="44.0690%" y="645" width="0.4652%" height="15" fill="rgb(226,201,30)"/><text x="44.3190%" y="655.50"></text></g><g><title>decor_mem::graph::EntityGraph::get_children_of_parent (27 samples, 0.37%)</title><rect x="44.6710%" y="533" width="0.3694%" height="15" fill="rgb(239,101,34)"/><text x="44.9210%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 0.37%)</title><rect x="44.6710%" y="517" width="0.3694%" height="15" fill="rgb(226,209,5)"/><text x="44.9210%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 0.37%)</title><rect x="44.6710%" y="501" width="0.3694%" height="15" fill="rgb(250,105,47)"/><text x="44.9210%" y="511.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.37%)</title><rect x="44.6710%" y="485" width="0.3694%" height="15" fill="rgb(230,72,3)"/><text x="44.9210%" y="495.50"></text></g><g><title>_int_malloc (27 samples, 0.37%)</title><rect x="44.6710%" y="469" width="0.3694%" height="15" fill="rgb(232,218,39)"/><text x="44.9210%" y="479.50"></text></g><g><title>malloc_consolidate (27 samples, 0.37%)</title><rect x="44.6710%" y="453" width="0.3694%" height="15" fill="rgb(248,166,6)"/><text x="44.9210%" y="463.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.14%)</title><rect x="45.4235%" y="325" width="0.1368%" height="15" fill="rgb(247,89,20)"/><text x="45.6735%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.31%)</title><rect x="45.3140%" y="501" width="0.3147%" height="15" fill="rgb(248,130,54)"/><text x="45.5640%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (21 samples, 0.29%)</title><rect x="45.3414%" y="485" width="0.2873%" height="15" fill="rgb(234,196,4)"/><text x="45.5914%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.27%)</title><rect x="45.3550%" y="469" width="0.2736%" height="15" fill="rgb(250,143,31)"/><text x="45.6050%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.27%)</title><rect x="45.3550%" y="453" width="0.2736%" height="15" fill="rgb(211,110,34)"/><text x="45.6050%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.21%)</title><rect x="45.4235%" y="437" width="0.2052%" height="15" fill="rgb(215,124,48)"/><text x="45.6735%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (15 samples, 0.21%)</title><rect x="45.4235%" y="421" width="0.2052%" height="15" fill="rgb(216,46,13)"/><text x="45.6735%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.21%)</title><rect x="45.4235%" y="405" width="0.2052%" height="15" fill="rgb(205,184,25)"/><text x="45.6735%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.21%)</title><rect x="45.4235%" y="389" width="0.2052%" height="15" fill="rgb(228,1,10)"/><text x="45.6735%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (15 samples, 0.21%)</title><rect x="45.4235%" y="373" width="0.2052%" height="15" fill="rgb(213,116,27)"/><text x="45.6735%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.21%)</title><rect x="45.4235%" y="357" width="0.2052%" height="15" fill="rgb(241,95,50)"/><text x="45.6735%" y="367.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.21%)</title><rect x="45.4235%" y="341" width="0.2052%" height="15" fill="rgb(238,48,32)"/><text x="45.6735%" y="351.50"></text></g><g><title>__memcmp_avx2_movbe (11 samples, 0.15%)</title><rect x="45.6424%" y="501" width="0.1505%" height="15" fill="rgb(235,113,49)"/><text x="45.8924%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (19 samples, 0.26%)</title><rect x="45.8202%" y="501" width="0.2600%" height="15" fill="rgb(205,127,43)"/><text x="46.0702%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.11%)</title><rect x="45.9707%" y="485" width="0.1095%" height="15" fill="rgb(250,162,2)"/><text x="46.2207%" y="495.50"></text></g><g><title>std::time::Instant::elapsed (8 samples, 0.11%)</title><rect x="46.1212%" y="501" width="0.1095%" height="15" fill="rgb(220,13,41)"/><text x="46.3712%" y="511.50"></text></g><g><title>decor_mem::views::View::insert_into_index (101 samples, 1.38%)</title><rect x="45.0404%" y="517" width="1.3819%" height="15" fill="rgb(249,221,25)"/><text x="45.2904%" y="527.50"></text></g><g><title>std::time::Instant::now (14 samples, 0.19%)</title><rect x="46.2307%" y="501" width="0.1915%" height="15" fill="rgb(215,208,19)"/><text x="46.4807%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (14 samples, 0.19%)</title><rect x="46.2307%" y="485" width="0.1915%" height="15" fill="rgb(236,175,2)"/><text x="46.4807%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (14 samples, 0.19%)</title><rect x="46.2307%" y="469" width="0.1915%" height="15" fill="rgb(241,52,2)"/><text x="46.4807%" y="479.50"></text></g><g><title>__clock_gettime_2 (13 samples, 0.18%)</title><rect x="46.2444%" y="453" width="0.1779%" height="15" fill="rgb(248,140,14)"/><text x="46.4944%" y="463.50"></text></g><g><title>__vdso_clock_gettime (11 samples, 0.15%)</title><rect x="46.2717%" y="437" width="0.1505%" height="15" fill="rgb(253,22,42)"/><text x="46.5217%" y="447.50"></text></g><g><title>core::fmt::write (23 samples, 0.31%)</title><rect x="46.4222%" y="501" width="0.3147%" height="15" fill="rgb(234,61,47)"/><text x="46.6722%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (22 samples, 0.30%)</title><rect x="46.4359%" y="485" width="0.3010%" height="15" fill="rgb(208,226,15)"/><text x="46.6859%" y="495.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (10 samples, 0.14%)</title><rect x="46.6001%" y="469" width="0.1368%" height="15" fill="rgb(217,221,4)"/><text x="46.8501%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.11%)</title><rect x="46.7369%" y="485" width="0.1095%" height="15" fill="rgb(212,174,34)"/><text x="46.9869%" y="495.50"></text></g><g><title>decor_mem::views::Views::insert (135 samples, 1.85%)</title><rect x="45.0404%" y="533" width="1.8470%" height="15" fill="rgb(253,83,4)"/><text x="45.2904%" y="543.50">d..</text></g><g><title>decor_mem::views::View::insert_row (34 samples, 0.47%)</title><rect x="46.4222%" y="517" width="0.4652%" height="15" fill="rgb(250,195,49)"/><text x="46.6722%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (11 samples, 0.15%)</title><rect x="46.7369%" y="501" width="0.1505%" height="15" fill="rgb(241,192,25)"/><text x="46.9869%" y="511.50"></text></g><g><title>decor_mem::graph::EntityGraph::update_edge (9 samples, 0.12%)</title><rect x="46.8874%" y="517" width="0.1231%" height="15" fill="rgb(208,124,10)"/><text x="47.1374%" y="527.50"></text></g><g><title>decor_mem::graph::EntityGraph::add_edge (9 samples, 0.12%)</title><rect x="46.8874%" y="501" width="0.1231%" height="15" fill="rgb(222,33,0)"/><text x="47.1374%" y="511.50"></text></g><g><title>_int_free (8 samples, 0.11%)</title><rect x="47.0926%" y="501" width="0.1095%" height="15" fill="rgb(234,209,28)"/><text x="47.3426%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (17 samples, 0.23%)</title><rect x="47.3115%" y="485" width="0.2326%" height="15" fill="rgb(224,11,23)"/><text x="47.5615%" y="495.50"></text></g><g><title>core::fmt::write (26 samples, 0.36%)</title><rect x="47.2021%" y="501" width="0.3557%" height="15" fill="rgb(232,99,1)"/><text x="47.4521%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (21 samples, 0.29%)</title><rect x="47.5578%" y="501" width="0.2873%" height="15" fill="rgb(237,95,45)"/><text x="47.8078%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (22 samples, 0.30%)</title><rect x="47.8451%" y="501" width="0.3010%" height="15" fill="rgb(208,109,11)"/><text x="48.0951%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (23 samples, 0.31%)</title><rect x="48.1461%" y="501" width="0.3147%" height="15" fill="rgb(216,190,48)"/><text x="48.3961%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.18%)</title><rect x="48.2829%" y="485" width="0.1779%" height="15" fill="rgb(251,171,36)"/><text x="48.5329%" y="495.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (13 samples, 0.18%)</title><rect x="48.4608%" y="485" width="0.1779%" height="15" fill="rgb(230,62,22)"/><text x="48.7108%" y="495.50"></text></g><g><title>std::time::Instant::duration_since (13 samples, 0.18%)</title><rect x="48.4608%" y="469" width="0.1779%" height="15" fill="rgb(225,114,35)"/><text x="48.7108%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (13 samples, 0.18%)</title><rect x="48.4608%" y="453" width="0.1779%" height="15" fill="rgb(215,118,42)"/><text x="48.7108%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (13 samples, 0.18%)</title><rect x="48.4608%" y="437" width="0.1779%" height="15" fill="rgb(243,119,21)"/><text x="48.7108%" y="447.50"></text></g><g><title>std::time::Instant::elapsed (20 samples, 0.27%)</title><rect x="48.4608%" y="501" width="0.2736%" height="15" fill="rgb(252,177,53)"/><text x="48.7108%" y="511.50"></text></g><g><title>decor_mem::views::Views::update_index_and_row_of_view (147 samples, 2.01%)</title><rect x="46.8874%" y="533" width="2.0112%" height="15" fill="rgb(237,209,29)"/><text x="47.1374%" y="543.50">d..</text></g><g><title>decor_mem::views::View::update_index_and_row (138 samples, 1.89%)</title><rect x="47.0105%" y="517" width="1.8881%" height="15" fill="rgb(212,65,23)"/><text x="47.2605%" y="527.50">d..</text></g><g><title>std::time::Instant::now (12 samples, 0.16%)</title><rect x="48.7344%" y="501" width="0.1642%" height="15" fill="rgb(230,222,46)"/><text x="48.9844%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (12 samples, 0.16%)</title><rect x="48.7344%" y="485" width="0.1642%" height="15" fill="rgb(215,135,32)"/><text x="48.9844%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (12 samples, 0.16%)</title><rect x="48.7344%" y="469" width="0.1642%" height="15" fill="rgb(246,101,22)"/><text x="48.9844%" y="479.50"></text></g><g><title>__clock_gettime_2 (12 samples, 0.16%)</title><rect x="48.7344%" y="453" width="0.1642%" height="15" fill="rgb(206,107,13)"/><text x="48.9844%" y="463.50"></text></g><g><title>__vdso_clock_gettime (12 samples, 0.16%)</title><rect x="48.7344%" y="437" width="0.1642%" height="15" fill="rgb(250,100,44)"/><text x="48.9844%" y="447.50"></text></g><g><title>start_thread (361 samples, 4.94%)</title><rect x="44.6573%" y="709" width="4.9391%" height="15" fill="rgb(231,147,38)"/><text x="44.9073%" y="719.50">start_..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (361 samples, 4.94%)</title><rect x="44.6573%" y="693" width="4.9391%" height="15" fill="rgb(229,8,40)"/><text x="44.9073%" y="703.50">std::s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (361 samples, 4.94%)</title><rect x="44.6573%" y="677" width="4.9391%" height="15" fill="rgb(221,135,30)"/><text x="44.9073%" y="687.50">&lt;alloc..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (361 samples, 4.94%)</title><rect x="44.6573%" y="661" width="4.9391%" height="15" fill="rgb(249,193,18)"/><text x="44.9073%" y="671.50">&lt;alloc..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (361 samples, 4.94%)</title><rect x="44.6573%" y="645" width="4.9391%" height="15" fill="rgb(209,133,39)"/><text x="44.9073%" y="655.50">core::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (361 samples, 4.94%)</title><rect x="44.6573%" y="629" width="4.9391%" height="15" fill="rgb(232,100,14)"/><text x="44.9073%" y="639.50">std::s..</text></g><g><title>decor_mem::Shim::run_on_tcp (361 samples, 4.94%)</title><rect x="44.6573%" y="613" width="4.9391%" height="15" fill="rgb(224,185,1)"/><text x="44.9073%" y="623.50">decor_..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (361 samples, 4.94%)</title><rect x="44.6573%" y="597" width="4.9391%" height="15" fill="rgb(223,139,8)"/><text x="44.9073%" y="607.50">msql_s..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (361 samples, 4.94%)</title><rect x="44.6573%" y="581" width="4.9391%" height="15" fill="rgb(232,213,38)"/><text x="44.9073%" y="591.50">msql_s..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (361 samples, 4.94%)</title><rect x="44.6573%" y="565" width="4.9391%" height="15" fill="rgb(207,94,22)"/><text x="44.9073%" y="575.50">&lt;decor..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (361 samples, 4.94%)</title><rect x="44.6573%" y="549" width="4.9391%" height="15" fill="rgb(219,183,54)"/><text x="44.9073%" y="559.50">decor_..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (51 samples, 0.70%)</title><rect x="48.8986%" y="533" width="0.6978%" height="15" fill="rgb(216,185,54)"/><text x="49.1486%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (51 samples, 0.70%)</title><rect x="48.8986%" y="517" width="0.6978%" height="15" fill="rgb(254,217,39)"/><text x="49.1486%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (51 samples, 0.70%)</title><rect x="48.8986%" y="501" width="0.6978%" height="15" fill="rgb(240,178,23)"/><text x="49.1486%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (51 samples, 0.70%)</title><rect x="48.8986%" y="485" width="0.6978%" height="15" fill="rgb(218,11,47)"/><text x="49.1486%" y="495.50"></text></g><g><title>__GI___libc_malloc (51 samples, 0.70%)</title><rect x="48.8986%" y="469" width="0.6978%" height="15" fill="rgb(218,51,51)"/><text x="49.1486%" y="479.50"></text></g><g><title>_int_malloc (51 samples, 0.70%)</title><rect x="48.8986%" y="453" width="0.6978%" height="15" fill="rgb(238,126,27)"/><text x="49.1486%" y="463.50"></text></g><g><title>malloc_consolidate (51 samples, 0.70%)</title><rect x="48.8986%" y="437" width="0.6978%" height="15" fill="rgb(249,202,22)"/><text x="49.1486%" y="447.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (10 samples, 0.14%)</title><rect x="49.7195%" y="501" width="0.1368%" height="15" fill="rgb(254,195,49)"/><text x="49.9695%" y="511.50"></text></g><g><title>std::time::Instant::duration_since (10 samples, 0.14%)</title><rect x="49.7195%" y="485" width="0.1368%" height="15" fill="rgb(208,123,14)"/><text x="49.9695%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (10 samples, 0.14%)</title><rect x="49.7195%" y="469" width="0.1368%" height="15" fill="rgb(224,200,8)"/><text x="49.9695%" y="479.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (10 samples, 0.14%)</title><rect x="49.7195%" y="453" width="0.1368%" height="15" fill="rgb(217,61,36)"/><text x="49.9695%" y="463.50"></text></g><g><title>decor_mem::views::View::insert_into_index (25 samples, 0.34%)</title><rect x="49.6785%" y="533" width="0.3420%" height="15" fill="rgb(206,35,45)"/><text x="49.9285%" y="543.50"></text></g><g><title>std::time::Instant::elapsed (22 samples, 0.30%)</title><rect x="49.7195%" y="517" width="0.3010%" height="15" fill="rgb(217,65,33)"/><text x="49.9695%" y="527.50"></text></g><g><title>std::time::Instant::now (12 samples, 0.16%)</title><rect x="49.8563%" y="501" width="0.1642%" height="15" fill="rgb(222,158,48)"/><text x="50.1063%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (12 samples, 0.16%)</title><rect x="49.8563%" y="485" width="0.1642%" height="15" fill="rgb(254,2,54)"/><text x="50.1063%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (12 samples, 0.16%)</title><rect x="49.8563%" y="469" width="0.1642%" height="15" fill="rgb(250,143,38)"/><text x="50.1063%" y="479.50"></text></g><g><title>__clock_gettime_2 (12 samples, 0.16%)</title><rect x="49.8563%" y="453" width="0.1642%" height="15" fill="rgb(248,25,0)"/><text x="50.1063%" y="463.50"></text></g><g><title>__vdso_clock_gettime (12 samples, 0.16%)</title><rect x="49.8563%" y="437" width="0.1642%" height="15" fill="rgb(206,152,27)"/><text x="50.1063%" y="447.50"></text></g><g><title>decor_mem::views::Views::insert (33 samples, 0.45%)</title><rect x="49.6785%" y="549" width="0.4515%" height="15" fill="rgb(240,77,30)"/><text x="49.9285%" y="559.50"></text></g><g><title>decor_mem::views::View::insert_row (8 samples, 0.11%)</title><rect x="50.0205%" y="533" width="0.1095%" height="15" fill="rgb(231,5,3)"/><text x="50.2705%" y="543.50"></text></g><g><title>core::fmt::write (8 samples, 0.11%)</title><rect x="50.0205%" y="517" width="0.1095%" height="15" fill="rgb(207,226,32)"/><text x="50.2705%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.11%)</title><rect x="50.0205%" y="501" width="0.1095%" height="15" fill="rgb(222,207,47)"/><text x="50.2705%" y="511.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (8 samples, 0.11%)</title><rect x="50.0205%" y="485" width="0.1095%" height="15" fill="rgb(229,115,45)"/><text x="50.2705%" y="495.50"></text></g><g><title>decor_mem::graph::EntityGraph::update_edge (10 samples, 0.14%)</title><rect x="50.1300%" y="533" width="0.1368%" height="15" fill="rgb(224,191,6)"/><text x="50.3800%" y="543.50"></text></g><g><title>decor_mem::graph::EntityGraph::add_edge (10 samples, 0.14%)</title><rect x="50.1300%" y="517" width="0.1368%" height="15" fill="rgb(230,227,24)"/><text x="50.3800%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (10 samples, 0.14%)</title><rect x="50.1300%" y="501" width="0.1368%" height="15" fill="rgb(228,80,19)"/><text x="50.3800%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.12%)</title><rect x="50.3078%" y="485" width="0.1231%" height="15" fill="rgb(247,229,0)"/><text x="50.5578%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.12%)</title><rect x="50.3078%" y="469" width="0.1231%" height="15" fill="rgb(237,194,15)"/><text x="50.5578%" y="479.50"></text></g><g><title>core::fmt::write (11 samples, 0.15%)</title><rect x="50.3078%" y="517" width="0.1505%" height="15" fill="rgb(219,203,20)"/><text x="50.5578%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.15%)</title><rect x="50.3078%" y="501" width="0.1505%" height="15" fill="rgb(234,128,8)"/><text x="50.5578%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (13 samples, 0.18%)</title><rect x="50.4583%" y="517" width="0.1779%" height="15" fill="rgb(248,202,8)"/><text x="50.7083%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (10 samples, 0.14%)</title><rect x="50.4994%" y="501" width="0.1368%" height="15" fill="rgb(206,104,37)"/><text x="50.7494%" y="511.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (73 samples, 1.00%)</title><rect x="49.6785%" y="709" width="0.9988%" height="15" fill="rgb(223,8,27)"/><text x="49.9285%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (73 samples, 1.00%)</title><rect x="49.6785%" y="693" width="0.9988%" height="15" fill="rgb(216,217,28)"/><text x="49.9285%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (73 samples, 1.00%)</title><rect x="49.6785%" y="677" width="0.9988%" height="15" fill="rgb(249,199,1)"/><text x="49.9285%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (73 samples, 1.00%)</title><rect x="49.6785%" y="661" width="0.9988%" height="15" fill="rgb(240,85,17)"/><text x="49.9285%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (73 samples, 1.00%)</title><rect x="49.6785%" y="645" width="0.9988%" height="15" fill="rgb(206,108,45)"/><text x="49.9285%" y="655.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (73 samples, 1.00%)</title><rect x="49.6785%" y="629" width="0.9988%" height="15" fill="rgb(245,210,41)"/><text x="49.9285%" y="639.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (73 samples, 1.00%)</title><rect x="49.6785%" y="613" width="0.9988%" height="15" fill="rgb(206,13,37)"/><text x="49.9285%" y="623.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (73 samples, 1.00%)</title><rect x="49.6785%" y="597" width="0.9988%" height="15" fill="rgb(250,61,18)"/><text x="49.9285%" y="607.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (73 samples, 1.00%)</title><rect x="49.6785%" y="581" width="0.9988%" height="15" fill="rgb(235,172,48)"/><text x="49.9285%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (73 samples, 1.00%)</title><rect x="49.6785%" y="565" width="0.9988%" height="15" fill="rgb(249,201,17)"/><text x="49.9285%" y="575.50"></text></g><g><title>decor_mem::views::Views::update_index_and_row_of_view (40 samples, 0.55%)</title><rect x="50.1300%" y="549" width="0.5473%" height="15" fill="rgb(219,208,6)"/><text x="50.3800%" y="559.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (30 samples, 0.41%)</title><rect x="50.2668%" y="533" width="0.4105%" height="15" fill="rgb(248,31,23)"/><text x="50.5168%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (10 samples, 0.14%)</title><rect x="50.6772%" y="709" width="0.1368%" height="15" fill="rgb(245,15,42)"/><text x="50.9272%" y="719.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::reinsert_with_vals (8 samples, 0.11%)</title><rect x="50.8277%" y="613" width="0.1095%" height="15" fill="rgb(222,217,39)"/><text x="51.0777%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.18%)</title><rect x="51.2792%" y="597" width="0.1779%" height="15" fill="rgb(210,219,27)"/><text x="51.5292%" y="607.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.15%)</title><rect x="51.4845%" y="597" width="0.1505%" height="15" fill="rgb(252,166,36)"/><text x="51.7345%" y="607.50"></text></g><g><title>_int_free (8 samples, 0.11%)</title><rect x="51.6350%" y="597" width="0.1095%" height="15" fill="rgb(245,132,34)"/><text x="51.8850%" y="607.50"></text></g><g><title>core::fmt::write (23 samples, 0.31%)</title><rect x="51.7444%" y="597" width="0.3147%" height="15" fill="rgb(236,54,3)"/><text x="51.9944%" y="607.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.11%)</title><rect x="52.2780%" y="581" width="0.1095%" height="15" fill="rgb(241,173,43)"/><text x="52.5280%" y="591.50"></text></g><g><title>decor_mem::graph::EntityGraph::get_children_of_parent (37 samples, 0.51%)</title><rect x="52.0591%" y="597" width="0.5062%" height="15" fill="rgb(215,190,9)"/><text x="52.3091%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.18%)</title><rect x="52.3875%" y="581" width="0.1779%" height="15" fill="rgb(242,101,16)"/><text x="52.6375%" y="591.50"></text></g><g><title>decor_mem::helpers::get_ghosted_col_indices_of (18 samples, 0.25%)</title><rect x="52.5653%" y="597" width="0.2463%" height="15" fill="rgb(223,190,21)"/><text x="52.8153%" y="607.50"></text></g><g><title>decor_mem::views::Views::delete_ghost_rptrs (11 samples, 0.15%)</title><rect x="52.8116%" y="597" width="0.1505%" height="15" fill="rgb(215,228,25)"/><text x="53.0616%" y="607.50"></text></g><g><title>decor_mem::views::Views::get_view (12 samples, 0.16%)</title><rect x="52.9621%" y="597" width="0.1642%" height="15" fill="rgb(225,36,22)"/><text x="53.2121%" y="607.50"></text></g><g><title>decor_mem::helpers::parser_val_to_u64 (8 samples, 0.11%)</title><rect x="53.2631%" y="581" width="0.1095%" height="15" fill="rgb(251,106,46)"/><text x="53.5131%" y="591.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (193 samples, 2.64%)</title><rect x="50.8277%" y="645" width="2.6406%" height="15" fill="rgb(208,90,1)"/><text x="51.0777%" y="655.50">&lt;d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (193 samples, 2.64%)</title><rect x="50.8277%" y="629" width="2.6406%" height="15" fill="rgb(243,10,4)"/><text x="51.0777%" y="639.50">de..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe_with_gids (185 samples, 2.53%)</title><rect x="50.9372%" y="613" width="2.5311%" height="15" fill="rgb(212,137,27)"/><text x="51.1872%" y="623.50">de..</text></g><g><title>decor_mem::views::Views::update_index_and_row_of_view (25 samples, 0.34%)</title><rect x="53.1263%" y="597" width="0.3420%" height="15" fill="rgb(231,220,49)"/><text x="53.3763%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.14%)</title><rect x="53.5778%" y="597" width="0.1368%" height="15" fill="rgb(237,96,20)"/><text x="53.8278%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (16 samples, 0.22%)</title><rect x="53.8925%" y="597" width="0.2189%" height="15" fill="rgb(239,229,30)"/><text x="54.1425%" y="607.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::unsubscribe (57 samples, 0.78%)</title><rect x="53.4683%" y="613" width="0.7799%" height="15" fill="rgb(219,65,33)"/><text x="53.7183%" y="623.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe_child_parent_edges (11 samples, 0.15%)</title><rect x="54.2619%" y="613" width="0.1505%" height="15" fill="rgb(243,134,7)"/><text x="54.5119%" y="623.50"></text></g><g><title>__GI___libc_free (8 samples, 0.11%)</title><rect x="54.7134%" y="501" width="0.1095%" height="15" fill="rgb(216,177,54)"/><text x="54.9634%" y="511.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.19%)</title><rect x="54.8228%" y="501" width="0.1915%" height="15" fill="rgb(211,160,20)"/><text x="55.0728%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 0.11%)</title><rect x="55.0144%" y="501" width="0.1095%" height="15" fill="rgb(239,85,39)"/><text x="55.2644%" y="511.50"></text></g><g><title>_int_free (10 samples, 0.14%)</title><rect x="55.2470%" y="501" width="0.1368%" height="15" fill="rgb(232,125,22)"/><text x="55.4970%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::display::EscapeSingleQuoteString as sql_parser::ast::display::AstDisplay&gt;::fmt (74 samples, 1.01%)</title><rect x="54.4945%" y="533" width="1.0125%" height="15" fill="rgb(244,57,34)"/><text x="54.7445%" y="543.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (73 samples, 1.00%)</title><rect x="54.5081%" y="517" width="0.9988%" height="15" fill="rgb(214,203,32)"/><text x="54.7581%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.12%)</title><rect x="55.3838%" y="501" width="0.1231%" height="15" fill="rgb(207,58,43)"/><text x="55.6338%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as sql_parser::ast::display::AstDisplay&gt;::fmt (102 samples, 1.40%)</title><rect x="54.4808%" y="549" width="1.3955%" height="15" fill="rgb(215,193,15)"/><text x="54.7308%" y="559.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (27 samples, 0.37%)</title><rect x="55.5069%" y="533" width="0.3694%" height="15" fill="rgb(232,15,44)"/><text x="55.7569%" y="543.50"></text></g><g><title>core::fmt::write (11 samples, 0.15%)</title><rect x="55.7258%" y="517" width="0.1505%" height="15" fill="rgb(212,3,48)"/><text x="55.9758%" y="527.50"></text></g><g><title>core::fmt::write (124 samples, 1.70%)</title><rect x="54.4124%" y="581" width="1.6965%" height="15" fill="rgb(218,128,7)"/><text x="54.6624%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (123 samples, 1.68%)</title><rect x="54.4261%" y="565" width="1.6829%" height="15" fill="rgb(226,216,39)"/><text x="54.6761%" y="575.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (15 samples, 0.21%)</title><rect x="55.9037%" y="549" width="0.2052%" height="15" fill="rgb(243,47,51)"/><text x="56.1537%" y="559.50"></text></g><g><title>core::fmt::write (9 samples, 0.12%)</title><rect x="55.9858%" y="533" width="0.1231%" height="15" fill="rgb(241,183,40)"/><text x="56.2358%" y="543.50"></text></g><g><title>decor_mem::views::View::insert_into_index (136 samples, 1.86%)</title><rect x="54.4124%" y="597" width="1.8607%" height="15" fill="rgb(231,217,32)"/><text x="54.6624%" y="607.50">d..</text></g><g><title>decor_mem::views::Views::insert (141 samples, 1.93%)</title><rect x="54.4124%" y="613" width="1.9291%" height="15" fill="rgb(229,61,38)"/><text x="54.6624%" y="623.50">d..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.12%)</title><rect x="56.7383%" y="549" width="0.1231%" height="15" fill="rgb(225,210,5)"/><text x="56.9883%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (42 samples, 0.57%)</title><rect x="56.3962%" y="565" width="0.5746%" height="15" fill="rgb(231,79,45)"/><text x="56.6462%" y="575.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.11%)</title><rect x="56.8614%" y="549" width="0.1095%" height="15" fill="rgb(224,100,7)"/><text x="57.1114%" y="559.50"></text></g><g><title>decor_mem::graph::EntityGraph::update_edge (60 samples, 0.82%)</title><rect x="56.3415%" y="597" width="0.8209%" height="15" fill="rgb(241,198,18)"/><text x="56.5915%" y="607.50"></text></g><g><title>decor_mem::graph::EntityGraph::add_edge (60 samples, 0.82%)</title><rect x="56.3415%" y="581" width="0.8209%" height="15" fill="rgb(252,97,53)"/><text x="56.5915%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (14 samples, 0.19%)</title><rect x="56.9709%" y="565" width="0.1915%" height="15" fill="rgb(220,88,7)"/><text x="57.2209%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (10 samples, 0.14%)</title><rect x="57.1624%" y="549" width="0.1368%" height="15" fill="rgb(213,176,14)"/><text x="57.4124%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.14%)</title><rect x="57.1624%" y="533" width="0.1368%" height="15" fill="rgb(246,73,7)"/><text x="57.4124%" y="543.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.14%)</title><rect x="57.1624%" y="517" width="0.1368%" height="15" fill="rgb(245,64,36)"/><text x="57.4124%" y="527.50"></text></g><g><title>_int_malloc (10 samples, 0.14%)</title><rect x="57.1624%" y="501" width="0.1368%" height="15" fill="rgb(245,80,10)"/><text x="57.4124%" y="511.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.16%)</title><rect x="57.2992%" y="533" width="0.1642%" height="15" fill="rgb(232,107,50)"/><text x="57.5492%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.33%)</title><rect x="57.5455%" y="533" width="0.3284%" height="15" fill="rgb(253,3,0)"/><text x="57.7955%" y="543.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.33%)</title><rect x="57.5455%" y="517" width="0.3284%" height="15" fill="rgb(212,99,53)"/><text x="57.7955%" y="527.50"></text></g><g><title>_int_malloc (24 samples, 0.33%)</title><rect x="57.5455%" y="501" width="0.3284%" height="15" fill="rgb(249,111,54)"/><text x="57.7955%" y="511.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.18%)</title><rect x="58.0244%" y="485" width="0.1779%" height="15" fill="rgb(249,55,30)"/><text x="58.2744%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (23 samples, 0.31%)</title><rect x="57.9012%" y="517" width="0.3147%" height="15" fill="rgb(237,47,42)"/><text x="58.1512%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.23%)</title><rect x="57.9833%" y="501" width="0.2326%" height="15" fill="rgb(211,20,18)"/><text x="58.2333%" y="511.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (544 samples, 7.44%)</title><rect x="50.8141%" y="693" width="7.4429%" height="15" fill="rgb(231,203,46)"/><text x="51.0641%" y="703.50">decor_mem:..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (544 samples, 7.44%)</title><rect x="50.8141%" y="677" width="7.4429%" height="15" fill="rgb(237,142,3)"/><text x="51.0641%" y="687.50">msql_srv::..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (544 samples, 7.44%)</title><rect x="50.8141%" y="661" width="7.4429%" height="15" fill="rgb(241,107,1)"/><text x="51.0641%" y="671.50">msql_srv::..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (350 samples, 4.79%)</title><rect x="53.4683%" y="645" width="4.7886%" height="15" fill="rgb(229,83,13)"/><text x="53.7183%" y="655.50">&lt;decor..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (350 samples, 4.79%)</title><rect x="53.4683%" y="629" width="4.7886%" height="15" fill="rgb(241,91,40)"/><text x="53.7183%" y="639.50">decor_..</text></g><g><title>decor_mem::views::Views::update_index_and_row_of_view (140 samples, 1.92%)</title><rect x="56.3415%" y="613" width="1.9154%" height="15" fill="rgb(225,3,45)"/><text x="56.5915%" y="623.50">d..</text></g><g><title>decor_mem::views::View::update_index_and_row (80 samples, 1.09%)</title><rect x="57.1624%" y="597" width="1.0945%" height="15" fill="rgb(244,223,14)"/><text x="57.4124%" y="607.50"></text></g><g><title>core::fmt::write (80 samples, 1.09%)</title><rect x="57.1624%" y="581" width="1.0945%" height="15" fill="rgb(224,124,37)"/><text x="57.4124%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (80 samples, 1.09%)</title><rect x="57.1624%" y="565" width="1.0945%" height="15" fill="rgb(251,171,30)"/><text x="57.4124%" y="575.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (70 samples, 0.96%)</title><rect x="57.2992%" y="549" width="0.9577%" height="15" fill="rgb(236,46,54)"/><text x="57.5492%" y="559.50"></text></g><g><title>core::fmt::write (28 samples, 0.38%)</title><rect x="57.8739%" y="533" width="0.3831%" height="15" fill="rgb(245,213,5)"/><text x="58.1239%" y="543.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (545 samples, 7.46%)</title><rect x="50.8141%" y="709" width="7.4566%" height="15" fill="rgb(230,144,27)"/><text x="51.0641%" y="719.50">std::sys_c..</text></g><g><title>[unknown] (3,562 samples, 48.73%)</title><rect x="9.7141%" y="725" width="48.7344%" height="15" fill="rgb(220,86,6)"/><text x="9.9641%" y="735.50">[unknown]</text></g><g><title>std::time::Instant::now (8 samples, 0.11%)</title><rect x="58.3390%" y="709" width="0.1095%" height="15" fill="rgb(240,20,13)"/><text x="58.5890%" y="719.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.44%)</title><rect x="58.8453%" y="549" width="0.4378%" height="15" fill="rgb(217,89,34)"/><text x="59.0953%" y="559.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (11 samples, 0.15%)</title><rect x="59.1326%" y="533" width="0.1505%" height="15" fill="rgb(229,13,5)"/><text x="59.3826%" y="543.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.21%)</title><rect x="59.2831%" y="549" width="0.2052%" height="15" fill="rgb(244,67,35)"/><text x="59.5331%" y="559.50"></text></g><g><title>_int_malloc (11 samples, 0.15%)</title><rect x="59.3378%" y="533" width="0.1505%" height="15" fill="rgb(221,40,2)"/><text x="59.5878%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (114 samples, 1.56%)</title><rect x="59.4883%" y="549" width="1.5597%" height="15" fill="rgb(237,157,21)"/><text x="59.7383%" y="559.50"></text></g><g><title>__GI___libc_realloc (111 samples, 1.52%)</title><rect x="59.5293%" y="533" width="1.5187%" height="15" fill="rgb(222,94,11)"/><text x="59.7793%" y="543.50"></text></g><g><title>_int_realloc (105 samples, 1.44%)</title><rect x="59.6114%" y="517" width="1.4366%" height="15" fill="rgb(249,113,6)"/><text x="59.8614%" y="527.50"></text></g><g><title>_int_malloc (98 samples, 1.34%)</title><rect x="59.7072%" y="501" width="1.3408%" height="15" fill="rgb(238,137,36)"/><text x="59.9572%" y="511.50"></text></g><g><title>malloc_consolidate (46 samples, 0.63%)</title><rect x="60.4187%" y="485" width="0.6294%" height="15" fill="rgb(210,102,26)"/><text x="60.6687%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim (9 samples, 0.12%)</title><rect x="61.0480%" y="549" width="0.1231%" height="15" fill="rgb(218,30,30)"/><text x="61.2980%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (185 samples, 2.53%)</title><rect x="58.6948%" y="565" width="2.5311%" height="15" fill="rgb(214,67,26)"/><text x="58.9448%" y="575.50">&lt;a..</text></g><g><title>_int_malloc (9 samples, 0.12%)</title><rect x="61.4585%" y="325" width="0.1231%" height="15" fill="rgb(251,9,53)"/><text x="61.7085%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.15%)</title><rect x="61.4448%" y="517" width="0.1505%" height="15" fill="rgb(228,204,25)"/><text x="61.6948%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.15%)</title><rect x="61.4448%" y="501" width="0.1505%" height="15" fill="rgb(207,153,8)"/><text x="61.6948%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (11 samples, 0.15%)</title><rect x="61.4448%" y="485" width="0.1505%" height="15" fill="rgb(242,9,16)"/><text x="61.6948%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.15%)</title><rect x="61.4448%" y="469" width="0.1505%" height="15" fill="rgb(217,211,10)"/><text x="61.6948%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.14%)</title><rect x="61.4585%" y="453" width="0.1368%" height="15" fill="rgb(219,228,52)"/><text x="61.7085%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (10 samples, 0.14%)</title><rect x="61.4585%" y="437" width="0.1368%" height="15" fill="rgb(231,92,29)"/><text x="61.7085%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.14%)</title><rect x="61.4585%" y="421" width="0.1368%" height="15" fill="rgb(232,8,23)"/><text x="61.7085%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.14%)</title><rect x="61.4585%" y="405" width="0.1368%" height="15" fill="rgb(216,211,34)"/><text x="61.7085%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (10 samples, 0.14%)</title><rect x="61.4585%" y="389" width="0.1368%" height="15" fill="rgb(236,151,0)"/><text x="61.7085%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.14%)</title><rect x="61.4585%" y="373" width="0.1368%" height="15" fill="rgb(209,168,3)"/><text x="61.7085%" y="383.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.14%)</title><rect x="61.4585%" y="357" width="0.1368%" height="15" fill="rgb(208,129,28)"/><text x="61.7085%" y="367.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.14%)</title><rect x="61.4585%" y="341" width="0.1368%" height="15" fill="rgb(229,78,22)"/><text x="61.7085%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.21%)</title><rect x="61.4037%" y="533" width="0.2052%" height="15" fill="rgb(228,187,13)"/><text x="61.6537%" y="543.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (114 samples, 1.56%)</title><rect x="61.6090%" y="533" width="1.5597%" height="15" fill="rgb(240,119,24)"/><text x="61.8590%" y="543.50"></text></g><g><title>crypto::sha3::keccak_f (107 samples, 1.46%)</title><rect x="61.7047%" y="517" width="1.4639%" height="15" fill="rgb(209,194,42)"/><text x="61.9547%" y="527.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (11 samples, 0.15%)</title><rect x="63.3602%" y="501" width="0.1505%" height="15" fill="rgb(247,200,46)"/><text x="63.6102%" y="511.50"></text></g><g><title>crypto::sha3::keccak_f (11 samples, 0.15%)</title><rect x="63.3602%" y="485" width="0.1505%" height="15" fill="rgb(218,76,16)"/><text x="63.6102%" y="495.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (13 samples, 0.18%)</title><rect x="63.3466%" y="517" width="0.1779%" height="15" fill="rgb(225,21,48)"/><text x="63.5966%" y="527.50"></text></g><g><title>crypto::digest::Digest::result_str (14 samples, 0.19%)</title><rect x="63.3466%" y="533" width="0.1915%" height="15" fill="rgb(239,223,50)"/><text x="63.5966%" y="543.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_resubscribe (195 samples, 2.67%)</title><rect x="61.2259%" y="565" width="2.6679%" height="15" fill="rgb(244,45,21)"/><text x="61.4759%" y="575.50">&lt;d..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::resubscribe (185 samples, 2.53%)</title><rect x="61.3627%" y="549" width="2.5311%" height="15" fill="rgb(232,33,43)"/><text x="61.6127%" y="559.50">de..</text></g><g><title>serde::ser::Serializer::collect_seq (26 samples, 0.36%)</title><rect x="63.5381%" y="533" width="0.3557%" height="15" fill="rgb(209,8,3)"/><text x="63.7881%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (8 samples, 0.11%)</title><rect x="63.7844%" y="517" width="0.1095%" height="15" fill="rgb(214,25,53)"/><text x="64.0344%" y="527.50"></text></g><g><title>__GI___libc_free (9 samples, 0.12%)</title><rect x="64.5232%" y="517" width="0.1231%" height="15" fill="rgb(254,186,54)"/><text x="64.7732%" y="527.50"></text></g><g><title>_int_free (19 samples, 0.26%)</title><rect x="64.6600%" y="517" width="0.2600%" height="15" fill="rgb(208,174,49)"/><text x="64.9100%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.57%)</title><rect x="64.4274%" y="533" width="0.5746%" height="15" fill="rgb(233,191,51)"/><text x="64.6774%" y="543.50"></text></g><g><title>__GI___libc_malloc (58 samples, 0.79%)</title><rect x="65.1936%" y="357" width="0.7935%" height="15" fill="rgb(222,134,10)"/><text x="65.4436%" y="367.50"></text></g><g><title>_int_malloc (38 samples, 0.52%)</title><rect x="65.4672%" y="341" width="0.5199%" height="15" fill="rgb(230,226,20)"/><text x="65.7172%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (81 samples, 1.11%)</title><rect x="65.0021%" y="533" width="1.1082%" height="15" fill="rgb(251,111,25)"/><text x="65.2521%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (78 samples, 1.07%)</title><rect x="65.0431%" y="517" width="1.0672%" height="15" fill="rgb(224,40,46)"/><text x="65.2931%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (78 samples, 1.07%)</title><rect x="65.0431%" y="501" width="1.0672%" height="15" fill="rgb(236,108,47)"/><text x="65.2931%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (75 samples, 1.03%)</title><rect x="65.0841%" y="485" width="1.0261%" height="15" fill="rgb(234,93,0)"/><text x="65.3341%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (68 samples, 0.93%)</title><rect x="65.1799%" y="469" width="0.9304%" height="15" fill="rgb(224,213,32)"/><text x="65.4299%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (68 samples, 0.93%)</title><rect x="65.1799%" y="453" width="0.9304%" height="15" fill="rgb(251,11,48)"/><text x="65.4299%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (68 samples, 0.93%)</title><rect x="65.1799%" y="437" width="0.9304%" height="15" fill="rgb(236,173,5)"/><text x="65.4299%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (68 samples, 0.93%)</title><rect x="65.1799%" y="421" width="0.9304%" height="15" fill="rgb(230,95,12)"/><text x="65.4299%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (68 samples, 0.93%)</title><rect x="65.1799%" y="405" width="0.9304%" height="15" fill="rgb(232,209,1)"/><text x="65.4299%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.93%)</title><rect x="65.1799%" y="389" width="0.9304%" height="15" fill="rgb(232,6,1)"/><text x="65.4299%" y="399.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.93%)</title><rect x="65.1799%" y="373" width="0.9304%" height="15" fill="rgb(210,224,50)"/><text x="65.4299%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.11%)</title><rect x="66.7533%" y="485" width="0.1095%" height="15" fill="rgb(228,127,35)"/><text x="67.0033%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (8 samples, 0.11%)</title><rect x="66.7533%" y="469" width="0.1095%" height="15" fill="rgb(245,102,45)"/><text x="67.0033%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (9 samples, 0.12%)</title><rect x="66.8628%" y="405" width="0.1231%" height="15" fill="rgb(214,1,49)"/><text x="67.1128%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.12%)</title><rect x="66.8628%" y="389" width="0.1231%" height="15" fill="rgb(226,163,40)"/><text x="67.1128%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (9 samples, 0.12%)</title><rect x="66.8628%" y="373" width="0.1231%" height="15" fill="rgb(239,212,28)"/><text x="67.1128%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (9 samples, 0.12%)</title><rect x="66.8628%" y="357" width="0.1231%" height="15" fill="rgb(220,20,13)"/><text x="67.1128%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (54 samples, 0.74%)</title><rect x="66.8628%" y="453" width="0.7388%" height="15" fill="rgb(210,164,35)"/><text x="67.1128%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (54 samples, 0.74%)</title><rect x="66.8628%" y="437" width="0.7388%" height="15" fill="rgb(248,109,41)"/><text x="67.1128%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (54 samples, 0.74%)</title><rect x="66.8628%" y="421" width="0.7388%" height="15" fill="rgb(238,23,50)"/><text x="67.1128%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.62%)</title><rect x="66.9859%" y="405" width="0.6157%" height="15" fill="rgb(211,48,49)"/><text x="67.2359%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (32 samples, 0.44%)</title><rect x="67.1638%" y="389" width="0.4378%" height="15" fill="rgb(223,36,21)"/><text x="67.4138%" y="399.50"></text></g><g><title>__GI___libc_malloc (305 samples, 4.17%)</title><rect x="67.7384%" y="341" width="4.1729%" height="15" fill="rgb(207,123,46)"/><text x="67.9884%" y="351.50">__GI_..</text></g><g><title>_int_malloc (204 samples, 2.79%)</title><rect x="69.1203%" y="325" width="2.7911%" height="15" fill="rgb(240,218,32)"/><text x="69.3703%" y="335.50">_i..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (410 samples, 5.61%)</title><rect x="66.5344%" y="517" width="5.6095%" height="15" fill="rgb(252,5,43)"/><text x="66.7844%" y="527.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (394 samples, 5.39%)</title><rect x="66.7533%" y="501" width="5.3906%" height="15" fill="rgb(252,84,19)"/><text x="67.0033%" y="511.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (386 samples, 5.28%)</title><rect x="66.8628%" y="485" width="5.2812%" height="15" fill="rgb(243,152,39)"/><text x="67.1128%" y="495.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (386 samples, 5.28%)</title><rect x="66.8628%" y="469" width="5.2812%" height="15" fill="rgb(234,160,15)"/><text x="67.1128%" y="479.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (332 samples, 4.54%)</title><rect x="67.6016%" y="453" width="4.5423%" height="15" fill="rgb(237,34,20)"/><text x="67.8516%" y="463.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (332 samples, 4.54%)</title><rect x="67.6016%" y="437" width="4.5423%" height="15" fill="rgb(229,97,13)"/><text x="67.8516%" y="447.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (332 samples, 4.54%)</title><rect x="67.6016%" y="421" width="4.5423%" height="15" fill="rgb(234,71,50)"/><text x="67.8516%" y="431.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (332 samples, 4.54%)</title><rect x="67.6016%" y="405" width="4.5423%" height="15" fill="rgb(253,155,4)"/><text x="67.8516%" y="415.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (332 samples, 4.54%)</title><rect x="67.6016%" y="389" width="4.5423%" height="15" fill="rgb(222,185,37)"/><text x="67.8516%" y="399.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (332 samples, 4.54%)</title><rect x="67.6016%" y="373" width="4.5423%" height="15" fill="rgb(251,177,13)"/><text x="67.8516%" y="383.50">alloc..</text></g><g><title>alloc::alloc::alloc (332 samples, 4.54%)</title><rect x="67.6016%" y="357" width="4.5423%" height="15" fill="rgb(250,179,40)"/><text x="67.8516%" y="367.50">alloc..</text></g><g><title>__rust_alloc (10 samples, 0.14%)</title><rect x="72.0071%" y="341" width="0.1368%" height="15" fill="rgb(242,44,2)"/><text x="72.2571%" y="351.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.27%)</title><rect x="72.1439%" y="517" width="0.2736%" height="15" fill="rgb(216,177,13)"/><text x="72.3939%" y="527.50"></text></g><g><title>_int_malloc (15 samples, 0.21%)</title><rect x="72.2123%" y="501" width="0.2052%" height="15" fill="rgb(216,106,43)"/><text x="72.4623%" y="511.50"></text></g><g><title>unlink_chunk.constprop.0 (9 samples, 0.12%)</title><rect x="72.2944%" y="485" width="0.1231%" height="15" fill="rgb(216,183,2)"/><text x="72.5444%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (462 samples, 6.32%)</title><rect x="66.1103%" y="533" width="6.3210%" height="15" fill="rgb(249,75,3)"/><text x="66.3603%" y="543.50">&lt;alloc::..</text></g><g><title>__GI___libc_realloc (10 samples, 0.14%)</title><rect x="72.4586%" y="517" width="0.1368%" height="15" fill="rgb(219,67,39)"/><text x="72.7086%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (9 samples, 0.12%)</title><rect x="72.6228%" y="469" width="0.1231%" height="15" fill="rgb(253,228,2)"/><text x="72.8728%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.11%)</title><rect x="72.6365%" y="453" width="0.1095%" height="15" fill="rgb(235,138,27)"/><text x="72.8865%" y="463.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.11%)</title><rect x="72.6365%" y="437" width="0.1095%" height="15" fill="rgb(236,97,51)"/><text x="72.8865%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.37%)</title><rect x="72.4312%" y="533" width="0.3694%" height="15" fill="rgb(240,80,30)"/><text x="72.6812%" y="543.50"></text></g><g><title>core::fmt::write (15 samples, 0.21%)</title><rect x="72.5954%" y="517" width="0.2052%" height="15" fill="rgb(230,178,19)"/><text x="72.8454%" y="527.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (14 samples, 0.19%)</title><rect x="72.6091%" y="501" width="0.1915%" height="15" fill="rgb(210,190,27)"/><text x="72.8591%" y="511.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (14 samples, 0.19%)</title><rect x="72.6091%" y="485" width="0.1915%" height="15" fill="rgb(222,107,31)"/><text x="72.8591%" y="495.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (110 samples, 1.50%)</title><rect x="72.8007%" y="533" width="1.5050%" height="15" fill="rgb(216,127,34)"/><text x="73.0507%" y="543.50"></text></g><g><title>crypto::sha3::keccak_f (103 samples, 1.41%)</title><rect x="72.8964%" y="517" width="1.4092%" height="15" fill="rgb(234,116,52)"/><text x="73.1464%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (11 samples, 0.15%)</title><rect x="74.4698%" y="437" width="0.1505%" height="15" fill="rgb(222,124,15)"/><text x="74.7198%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.15%)</title><rect x="74.4698%" y="421" width="0.1505%" height="15" fill="rgb(231,179,28)"/><text x="74.7198%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (11 samples, 0.15%)</title><rect x="74.4698%" y="405" width="0.1505%" height="15" fill="rgb(226,93,45)"/><text x="74.7198%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.14%)</title><rect x="74.4835%" y="389" width="0.1368%" height="15" fill="rgb(215,8,51)"/><text x="74.7335%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.14%)</title><rect x="74.4835%" y="373" width="0.1368%" height="15" fill="rgb(223,106,5)"/><text x="74.7335%" y="383.50"></text></g><g><title>__GI___libc_malloc (38 samples, 0.52%)</title><rect x="74.6340%" y="325" width="0.5199%" height="15" fill="rgb(250,191,5)"/><text x="74.8840%" y="335.50"></text></g><g><title>_int_malloc (26 samples, 0.36%)</title><rect x="74.7982%" y="309" width="0.3557%" height="15" fill="rgb(242,132,44)"/><text x="75.0482%" y="319.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::clone::Clone&gt;::clone (68 samples, 0.93%)</title><rect x="74.3057%" y="533" width="0.9304%" height="15" fill="rgb(251,152,29)"/><text x="74.5557%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (63 samples, 0.86%)</title><rect x="74.3741%" y="517" width="0.8620%" height="15" fill="rgb(218,179,5)"/><text x="74.6241%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (60 samples, 0.82%)</title><rect x="74.4151%" y="501" width="0.8209%" height="15" fill="rgb(227,67,19)"/><text x="74.6651%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (59 samples, 0.81%)</title><rect x="74.4288%" y="485" width="0.8072%" height="15" fill="rgb(233,119,31)"/><text x="74.6788%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (56 samples, 0.77%)</title><rect x="74.4698%" y="469" width="0.7662%" height="15" fill="rgb(241,120,22)"/><text x="74.7198%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (56 samples, 0.77%)</title><rect x="74.4698%" y="453" width="0.7662%" height="15" fill="rgb(224,102,30)"/><text x="74.7198%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (45 samples, 0.62%)</title><rect x="74.6203%" y="437" width="0.6157%" height="15" fill="rgb(210,164,37)"/><text x="74.8703%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (45 samples, 0.62%)</title><rect x="74.6203%" y="421" width="0.6157%" height="15" fill="rgb(226,191,16)"/><text x="74.8703%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (45 samples, 0.62%)</title><rect x="74.6203%" y="405" width="0.6157%" height="15" fill="rgb(214,40,45)"/><text x="74.8703%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (45 samples, 0.62%)</title><rect x="74.6203%" y="389" width="0.6157%" height="15" fill="rgb(244,29,26)"/><text x="74.8703%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (45 samples, 0.62%)</title><rect x="74.6203%" y="373" width="0.6157%" height="15" fill="rgb(216,16,5)"/><text x="74.8703%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.62%)</title><rect x="74.6203%" y="357" width="0.6157%" height="15" fill="rgb(249,76,35)"/><text x="74.8703%" y="367.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.62%)</title><rect x="74.6203%" y="341" width="0.6157%" height="15" fill="rgb(207,11,44)"/><text x="74.8703%" y="351.50"></text></g><g><title>__GI___libc_free (15 samples, 0.21%)</title><rect x="75.4002%" y="533" width="0.2052%" height="15" fill="rgb(228,190,49)"/><text x="75.6502%" y="543.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.14%)</title><rect x="75.6054%" y="533" width="0.1368%" height="15" fill="rgb(214,173,12)"/><text x="75.8554%" y="543.50"></text></g><g><title>_int_free (57 samples, 0.78%)</title><rect x="75.7833%" y="533" width="0.7799%" height="15" fill="rgb(218,26,35)"/><text x="76.0333%" y="543.50"></text></g><g><title>malloc_consolidate (11 samples, 0.15%)</title><rect x="76.4126%" y="517" width="0.1505%" height="15" fill="rgb(220,200,19)"/><text x="76.6626%" y="527.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.12%)</title><rect x="76.5631%" y="517" width="0.1231%" height="15" fill="rgb(239,95,49)"/><text x="76.8131%" y="527.50"></text></g><g><title>_int_malloc (9 samples, 0.12%)</title><rect x="76.5631%" y="501" width="0.1231%" height="15" fill="rgb(235,85,53)"/><text x="76.8131%" y="511.50"></text></g><g><title>malloc_consolidate (15 samples, 0.21%)</title><rect x="77.0830%" y="469" width="0.2052%" height="15" fill="rgb(233,133,31)"/><text x="77.3330%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (55 samples, 0.75%)</title><rect x="76.5631%" y="533" width="0.7525%" height="15" fill="rgb(218,25,20)"/><text x="76.8131%" y="543.50"></text></g><g><title>__GI___libc_realloc (46 samples, 0.63%)</title><rect x="76.6863%" y="517" width="0.6294%" height="15" fill="rgb(252,210,38)"/><text x="76.9363%" y="527.50"></text></g><g><title>_int_realloc (46 samples, 0.63%)</title><rect x="76.6863%" y="501" width="0.6294%" height="15" fill="rgb(242,134,21)"/><text x="76.9363%" y="511.50"></text></g><g><title>_int_malloc (40 samples, 0.55%)</title><rect x="76.7684%" y="485" width="0.5473%" height="15" fill="rgb(213,28,48)"/><text x="77.0184%" y="495.50"></text></g><g><title>__GI___libc_malloc (55 samples, 0.75%)</title><rect x="77.3430%" y="517" width="0.7525%" height="15" fill="rgb(250,196,2)"/><text x="77.5930%" y="527.50"></text></g><g><title>_int_malloc (54 samples, 0.74%)</title><rect x="77.3567%" y="501" width="0.7388%" height="15" fill="rgb(227,5,17)"/><text x="77.6067%" y="511.50"></text></g><g><title>malloc_consolidate (30 samples, 0.41%)</title><rect x="77.6850%" y="485" width="0.4105%" height="15" fill="rgb(221,226,24)"/><text x="77.9350%" y="495.50"></text></g><g><title>alloc::slice::merge_sort (59 samples, 0.81%)</title><rect x="77.3156%" y="533" width="0.8072%" height="15" fill="rgb(211,5,48)"/><text x="77.5656%" y="543.50"></text></g><g><title>core::fmt::write (17 samples, 0.23%)</title><rect x="78.1229%" y="533" width="0.2326%" height="15" fill="rgb(219,150,6)"/><text x="78.3729%" y="543.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (12 samples, 0.16%)</title><rect x="78.1913%" y="517" width="0.1642%" height="15" fill="rgb(251,46,16)"/><text x="78.4413%" y="527.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (11 samples, 0.15%)</title><rect x="78.2050%" y="501" width="0.1505%" height="15" fill="rgb(220,204,40)"/><text x="78.4550%" y="511.50"></text></g><g><title>__GI___libc_free (36 samples, 0.49%)</title><rect x="78.6154%" y="517" width="0.4925%" height="15" fill="rgb(211,85,2)"/><text x="78.8654%" y="527.50"></text></g><g><title>__rust_dealloc (8 samples, 0.11%)</title><rect x="79.1353%" y="517" width="0.1095%" height="15" fill="rgb(229,17,7)"/><text x="79.3853%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (219 samples, 3.00%)</title><rect x="78.3555%" y="533" width="2.9963%" height="15" fill="rgb(239,72,28)"/><text x="78.6055%" y="543.50">cor..</text></g><g><title>_int_free (154 samples, 2.11%)</title><rect x="79.2448%" y="517" width="2.1070%" height="15" fill="rgb(230,47,54)"/><text x="79.4948%" y="527.50">_..</text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::input (11 samples, 0.15%)</title><rect x="81.3928%" y="501" width="0.1505%" height="15" fill="rgb(214,50,8)"/><text x="81.6428%" y="511.50"></text></g><g><title>crypto::sha3::keccak_f (11 samples, 0.15%)</title><rect x="81.3928%" y="485" width="0.1505%" height="15" fill="rgb(216,198,43)"/><text x="81.6428%" y="495.50"></text></g><g><title>crypto::digest::Digest::result_str (15 samples, 0.21%)</title><rect x="81.3518%" y="533" width="0.2052%" height="15" fill="rgb(234,20,35)"/><text x="81.6018%" y="543.50"></text></g><g><title>&lt;crypto::sha3::Sha3 as crypto::digest::Digest&gt;::result (12 samples, 0.16%)</title><rect x="81.3928%" y="517" width="0.1642%" height="15" fill="rgb(254,45,19)"/><text x="81.6428%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (21 samples, 0.29%)</title><rect x="81.8443%" y="501" width="0.2873%" height="15" fill="rgb(219,14,44)"/><text x="82.0943%" y="511.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.23%)</title><rect x="81.8990%" y="485" width="0.2326%" height="15" fill="rgb(217,220,26)"/><text x="82.1490%" y="495.50"></text></g><g><title>_int_malloc (17 samples, 0.23%)</title><rect x="81.8990%" y="469" width="0.2326%" height="15" fill="rgb(213,158,28)"/><text x="82.1490%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::clone::Clone&gt;::clone (33 samples, 0.45%)</title><rect x="81.7348%" y="517" width="0.4515%" height="15" fill="rgb(252,51,52)"/><text x="81.9848%" y="527.50"></text></g><g><title>decor_mem::graph::EntityGraph::get_children_of_parent (50 samples, 0.68%)</title><rect x="81.6254%" y="533" width="0.6841%" height="15" fill="rgb(246,89,16)"/><text x="81.8754%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.11%)</title><rect x="82.2000%" y="517" width="0.1095%" height="15" fill="rgb(216,158,49)"/><text x="82.4500%" y="527.50"></text></g><g><title>decor_mem::helpers::get_ghosted_col_indices_of (12 samples, 0.16%)</title><rect x="82.3095%" y="533" width="0.1642%" height="15" fill="rgb(236,107,19)"/><text x="82.5595%" y="543.50"></text></g><g><title>decor_mem::helpers::get_sensitive_col_indices_of (22 samples, 0.30%)</title><rect x="82.4737%" y="533" width="0.3010%" height="15" fill="rgb(228,185,30)"/><text x="82.7237%" y="543.50"></text></g><g><title>decor_mem::helpers::parser_val_to_u64 (8 samples, 0.11%)</title><rect x="82.7747%" y="533" width="0.1095%" height="15" fill="rgb(246,134,8)"/><text x="83.0247%" y="543.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (8 samples, 0.11%)</title><rect x="82.7747%" y="517" width="0.1095%" height="15" fill="rgb(214,143,50)"/><text x="83.0247%" y="527.50"></text></g><g><title>core::num::from_str_radix (8 samples, 0.11%)</title><rect x="82.7747%" y="501" width="0.1095%" height="15" fill="rgb(228,75,8)"/><text x="83.0247%" y="511.50"></text></g><g><title>decor_mem::views::Views::get_view (8 samples, 0.11%)</title><rect x="82.8978%" y="533" width="0.1095%" height="15" fill="rgb(207,175,4)"/><text x="83.1478%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.11%)</title><rect x="83.1030%" y="453" width="0.1095%" height="15" fill="rgb(205,108,24)"/><text x="83.3530%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.11%)</title><rect x="83.1030%" y="437" width="0.1095%" height="15" fill="rgb(244,120,49)"/><text x="83.3530%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.11%)</title><rect x="83.1030%" y="421" width="0.1095%" height="15" fill="rgb(223,47,38)"/><text x="83.3530%" y="431.50"></text></g><g><title>__GI___libc_malloc (42 samples, 0.57%)</title><rect x="83.2262%" y="341" width="0.5746%" height="15" fill="rgb(229,179,11)"/><text x="83.4762%" y="351.50"></text></g><g><title>_int_malloc (35 samples, 0.48%)</title><rect x="83.3219%" y="325" width="0.4789%" height="15" fill="rgb(231,122,1)"/><text x="83.5719%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 0.79%)</title><rect x="83.0620%" y="517" width="0.7935%" height="15" fill="rgb(245,119,9)"/><text x="83.3120%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (55 samples, 0.75%)</title><rect x="83.1030%" y="501" width="0.7525%" height="15" fill="rgb(241,163,25)"/><text x="83.3530%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (55 samples, 0.75%)</title><rect x="83.1030%" y="485" width="0.7525%" height="15" fill="rgb(217,214,3)"/><text x="83.3530%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (55 samples, 0.75%)</title><rect x="83.1030%" y="469" width="0.7525%" height="15" fill="rgb(240,86,28)"/><text x="83.3530%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (47 samples, 0.64%)</title><rect x="83.2125%" y="453" width="0.6430%" height="15" fill="rgb(215,47,9)"/><text x="83.4625%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (47 samples, 0.64%)</title><rect x="83.2125%" y="437" width="0.6430%" height="15" fill="rgb(252,25,45)"/><text x="83.4625%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.64%)</title><rect x="83.2125%" y="421" width="0.6430%" height="15" fill="rgb(251,164,9)"/><text x="83.4625%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.64%)</title><rect x="83.2125%" y="405" width="0.6430%" height="15" fill="rgb(233,194,0)"/><text x="83.4625%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (47 samples, 0.64%)</title><rect x="83.2125%" y="389" width="0.6430%" height="15" fill="rgb(249,111,24)"/><text x="83.4625%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.64%)</title><rect x="83.2125%" y="373" width="0.6430%" height="15" fill="rgb(250,223,3)"/><text x="83.4625%" y="383.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.64%)</title><rect x="83.2125%" y="357" width="0.6430%" height="15" fill="rgb(236,178,37)"/><text x="83.4625%" y="367.50"></text></g><g><title>decor_mem::views::Views::get_view_columns (65 samples, 0.89%)</title><rect x="83.0073%" y="533" width="0.8893%" height="15" fill="rgb(241,158,50)"/><text x="83.2573%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.44%)</title><rect x="84.5122%" y="517" width="0.4378%" height="15" fill="rgb(213,121,41)"/><text x="84.7622%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.44%)</title><rect x="84.5122%" y="501" width="0.4378%" height="15" fill="rgb(240,92,3)"/><text x="84.7622%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32 samples, 0.44%)</title><rect x="84.5122%" y="485" width="0.4378%" height="15" fill="rgb(205,123,3)"/><text x="84.7622%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.44%)</title><rect x="84.5122%" y="469" width="0.4378%" height="15" fill="rgb(205,97,47)"/><text x="84.7622%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (25 samples, 0.34%)</title><rect x="84.6080%" y="453" width="0.3420%" height="15" fill="rgb(247,152,14)"/><text x="84.8580%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (25 samples, 0.34%)</title><rect x="84.6080%" y="437" width="0.3420%" height="15" fill="rgb(248,195,53)"/><text x="84.8580%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.34%)</title><rect x="84.6080%" y="421" width="0.3420%" height="15" fill="rgb(226,201,16)"/><text x="84.8580%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.34%)</title><rect x="84.6080%" y="405" width="0.3420%" height="15" fill="rgb(205,98,0)"/><text x="84.8580%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (25 samples, 0.34%)</title><rect x="84.6080%" y="389" width="0.3420%" height="15" fill="rgb(214,191,48)"/><text x="84.8580%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.34%)</title><rect x="84.6080%" y="373" width="0.3420%" height="15" fill="rgb(237,112,39)"/><text x="84.8580%" y="383.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.34%)</title><rect x="84.6080%" y="357" width="0.3420%" height="15" fill="rgb(247,203,27)"/><text x="84.8580%" y="367.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.34%)</title><rect x="84.6080%" y="341" width="0.3420%" height="15" fill="rgb(235,124,28)"/><text x="84.8580%" y="351.50"></text></g><g><title>_int_malloc (20 samples, 0.27%)</title><rect x="84.6764%" y="325" width="0.2736%" height="15" fill="rgb(208,207,46)"/><text x="84.9264%" y="335.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.19%)</title><rect x="84.9637%" y="517" width="0.1915%" height="15" fill="rgb(234,176,4)"/><text x="85.2137%" y="527.50"></text></g><g><title>_int_malloc (9 samples, 0.12%)</title><rect x="85.0322%" y="501" width="0.1231%" height="15" fill="rgb(230,133,28)"/><text x="85.2822%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.25%)</title><rect x="85.1553%" y="517" width="0.2463%" height="15" fill="rgb(211,137,40)"/><text x="85.4053%" y="527.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.23%)</title><rect x="85.1690%" y="501" width="0.2326%" height="15" fill="rgb(254,35,13)"/><text x="85.4190%" y="511.50"></text></g><g><title>_int_malloc (10 samples, 0.14%)</title><rect x="85.2647%" y="485" width="0.1368%" height="15" fill="rgb(225,49,51)"/><text x="85.5147%" y="495.50"></text></g><g><title>&lt;u64 as core::num::FromStrRadixHelper&gt;::checked_mul (9 samples, 0.12%)</title><rect x="85.7026%" y="485" width="0.1231%" height="15" fill="rgb(251,10,15)"/><text x="85.9526%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_mul (9 samples, 0.12%)</title><rect x="85.7026%" y="469" width="0.1231%" height="15" fill="rgb(228,207,15)"/><text x="85.9526%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (9 samples, 0.12%)</title><rect x="85.7026%" y="453" width="0.1231%" height="15" fill="rgb(241,99,19)"/><text x="85.9526%" y="463.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (23 samples, 0.31%)</title><rect x="85.5521%" y="517" width="0.3147%" height="15" fill="rgb(207,104,49)"/><text x="85.8021%" y="527.50"></text></g><g><title>core::num::from_str_radix (22 samples, 0.30%)</title><rect x="85.5657%" y="501" width="0.3010%" height="15" fill="rgb(234,99,18)"/><text x="85.8157%" y="511.50"></text></g><g><title>decor_mem::views::Views::insert (163 samples, 2.23%)</title><rect x="83.8966%" y="533" width="2.2301%" height="15" fill="rgb(213,191,49)"/><text x="84.1466%" y="543.50">d..</text></g><g><title>decor_mem::views::View::insert_row (18 samples, 0.25%)</title><rect x="85.8804%" y="517" width="0.2463%" height="15" fill="rgb(210,226,19)"/><text x="86.1304%" y="527.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.23%)</title><rect x="86.4824%" y="501" width="0.2326%" height="15" fill="rgb(229,97,18)"/><text x="86.7324%" y="511.50"></text></g><g><title>_int_malloc (14 samples, 0.19%)</title><rect x="86.5235%" y="485" width="0.1915%" height="15" fill="rgb(211,167,15)"/><text x="86.7735%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.18%)</title><rect x="86.9886%" y="485" width="0.1779%" height="15" fill="rgb(210,169,34)"/><text x="87.2386%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (38 samples, 0.52%)</title><rect x="86.7424%" y="501" width="0.5199%" height="15" fill="rgb(241,121,31)"/><text x="86.9924%" y="511.50"></text></g><g><title>&lt;decor_mem::views::HashedRowPtr as core::cmp::PartialEq&gt;::eq (9 samples, 0.12%)</title><rect x="87.3854%" y="485" width="0.1231%" height="15" fill="rgb(232,40,11)"/><text x="87.6354%" y="495.50"></text></g><g><title>decor_mem::graph::EntityGraph::update_edge (89 samples, 1.22%)</title><rect x="86.3593%" y="517" width="1.2177%" height="15" fill="rgb(205,86,26)"/><text x="86.6093%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::remove (23 samples, 0.31%)</title><rect x="87.2623%" y="501" width="0.3147%" height="15" fill="rgb(231,126,28)"/><text x="87.5123%" y="511.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (8 samples, 0.11%)</title><rect x="87.5906%" y="501" width="0.1095%" height="15" fill="rgb(219,221,18)"/><text x="87.8406%" y="511.50"></text></g><g><title>decor_mem::helpers::parser_val_to_u64 (10 samples, 0.14%)</title><rect x="87.5770%" y="517" width="0.1368%" height="15" fill="rgb(211,40,0)"/><text x="87.8270%" y="527.50"></text></g><g><title>decor_mem::helpers::parser_val_to_u64_opt (9 samples, 0.12%)</title><rect x="87.7138%" y="517" width="0.1231%" height="15" fill="rgb(239,85,43)"/><text x="87.9638%" y="527.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (9 samples, 0.12%)</title><rect x="87.7138%" y="501" width="0.1231%" height="15" fill="rgb(231,55,21)"/><text x="87.9638%" y="511.50"></text></g><g><title>core::num::from_str_radix (8 samples, 0.11%)</title><rect x="87.7275%" y="485" width="0.1095%" height="15" fill="rgb(225,184,43)"/><text x="87.9775%" y="495.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.16%)</title><rect x="88.3431%" y="501" width="0.1642%" height="15" fill="rgb(251,158,41)"/><text x="88.5931%" y="511.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.11%)</title><rect x="88.5073%" y="501" width="0.1095%" height="15" fill="rgb(234,159,37)"/><text x="88.7573%" y="511.50"></text></g><g><title>std::time::Instant::elapsed (9 samples, 0.12%)</title><rect x="88.7125%" y="501" width="0.1231%" height="15" fill="rgb(216,204,22)"/><text x="88.9625%" y="511.50"></text></g><g><title>decor_mem::views::View::update_index_and_row (74 samples, 1.01%)</title><rect x="87.8369%" y="517" width="1.0125%" height="15" fill="rgb(214,17,3)"/><text x="88.0869%" y="527.50"></text></g><g><title>decor_mem::views::Views::update_index_and_row_of_view (212 samples, 2.90%)</title><rect x="86.1267%" y="533" width="2.9005%" height="15" fill="rgb(212,111,17)"/><text x="86.3767%" y="543.50">de..</text></g><g><title>hashbrown::map::make_hash (13 samples, 0.18%)</title><rect x="88.8494%" y="517" width="0.1779%" height="15" fill="rgb(221,157,24)"/><text x="89.0994%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.14%)</title><rect x="88.8904%" y="501" width="0.1368%" height="15" fill="rgb(252,16,13)"/><text x="89.1404%" y="511.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (61 samples, 0.83%)</title><rect x="89.0683%" y="517" width="0.8346%" height="15" fill="rgb(221,62,2)"/><text x="89.3183%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (55 samples, 0.75%)</title><rect x="89.1504%" y="501" width="0.7525%" height="15" fill="rgb(247,87,22)"/><text x="89.4004%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (79 samples, 1.08%)</title><rect x="89.0272%" y="533" width="1.0809%" height="15" fill="rgb(215,73,9)"/><text x="89.2772%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.21%)</title><rect x="89.9029%" y="517" width="0.2052%" height="15" fill="rgb(207,175,33)"/><text x="90.1529%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.14%)</title><rect x="89.9713%" y="501" width="0.1368%" height="15" fill="rgb(243,129,54)"/><text x="90.2213%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::hash::Hash&gt;::hash (11 samples, 0.15%)</title><rect x="90.3544%" y="501" width="0.1505%" height="15" fill="rgb(227,119,45)"/><text x="90.6044%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.59%)</title><rect x="90.5049%" y="501" width="0.5883%" height="15" fill="rgb(205,109,36)"/><text x="90.7549%" y="511.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (58 samples, 0.79%)</title><rect x="90.3270%" y="517" width="0.7935%" height="15" fill="rgb(205,6,39)"/><text x="90.5770%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.22%)</title><rect x="91.1205%" y="517" width="0.2189%" height="15" fill="rgb(221,32,16)"/><text x="91.3705%" y="527.50"></text></g><g><title>&lt;decor_mem::query_transformer::TraversedEntity as core::hash::Hash&gt;::hash (69 samples, 0.94%)</title><rect x="91.5310%" y="485" width="0.9440%" height="15" fill="rgb(228,144,50)"/><text x="91.7810%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (56 samples, 0.77%)</title><rect x="91.7089%" y="469" width="0.7662%" height="15" fill="rgb(229,201,53)"/><text x="91.9589%" y="479.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.18%)</title><rect x="92.4750%" y="485" width="0.1779%" height="15" fill="rgb(249,153,27)"/><text x="92.7250%" y="495.50"></text></g><g><title>_int_malloc (13 samples, 0.18%)</title><rect x="92.4750%" y="469" width="0.1779%" height="15" fill="rgb(227,106,25)"/><text x="92.7250%" y="479.50"></text></g><g><title>malloc_consolidate (11 samples, 0.15%)</title><rect x="92.5024%" y="453" width="0.1505%" height="15" fill="rgb(230,65,29)"/><text x="92.7524%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 0.18%)</title><rect x="92.7076%" y="485" width="0.1779%" height="15" fill="rgb(221,57,46)"/><text x="92.9576%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.15%)</title><rect x="92.7350%" y="469" width="0.1505%" height="15" fill="rgb(229,161,17)"/><text x="92.9850%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (230 samples, 3.15%)</title><rect x="90.1491%" y="533" width="3.1468%" height="15" fill="rgb(222,213,11)"/><text x="90.3991%" y="543.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (137 samples, 1.87%)</title><rect x="91.4215%" y="517" width="1.8744%" height="15" fill="rgb(235,35,13)"/><text x="91.6715%" y="527.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (135 samples, 1.85%)</title><rect x="91.4489%" y="501" width="1.8470%" height="15" fill="rgb(233,158,34)"/><text x="91.6989%" y="511.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (30 samples, 0.41%)</title><rect x="92.8855%" y="485" width="0.4105%" height="15" fill="rgb(215,151,48)"/><text x="93.1355%" y="495.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.41%)</title><rect x="92.8855%" y="469" width="0.4105%" height="15" fill="rgb(229,84,14)"/><text x="93.1355%" y="479.50"></text></g><g><title>_int_malloc (30 samples, 0.41%)</title><rect x="92.8855%" y="453" width="0.4105%" height="15" fill="rgb(229,68,14)"/><text x="93.1355%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (24 samples, 0.33%)</title><rect x="93.2959%" y="533" width="0.3284%" height="15" fill="rgb(243,106,26)"/><text x="93.5459%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (10 samples, 0.14%)</title><rect x="93.4875%" y="517" width="0.1368%" height="15" fill="rgb(206,45,38)"/><text x="93.7375%" y="527.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_unsubscribe (2,178 samples, 29.80%)</title><rect x="63.8938%" y="565" width="29.7989%" height="15" fill="rgb(226,6,15)"/><text x="64.1438%" y="575.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::unsubscribe (2,178 samples, 29.80%)</title><rect x="63.8938%" y="549" width="29.7989%" height="15" fill="rgb(232,22,54)"/><text x="64.1438%" y="559.50">decor_mem::query_transformer::QueryTransformer::..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (9 samples, 0.12%)</title><rect x="93.8569%" y="565" width="0.1231%" height="15" fill="rgb(229,222,32)"/><text x="94.1069%" y="575.50"></text></g><g><title>core::num::from_str_radix (8 samples, 0.11%)</title><rect x="93.8706%" y="549" width="0.1095%" height="15" fill="rgb(228,62,29)"/><text x="94.1206%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.18%)</title><rect x="93.9800%" y="501" width="0.1779%" height="15" fill="rgb(251,103,34)"/><text x="94.2300%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.18%)</title><rect x="93.9800%" y="485" width="0.1779%" height="15" fill="rgb(233,12,30)"/><text x="94.2300%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.18%)</title><rect x="93.9800%" y="469" width="0.1779%" height="15" fill="rgb(238,52,0)"/><text x="94.2300%" y="479.50"></text></g><g><title>core::ptr::drop_in_place (15 samples, 0.21%)</title><rect x="93.9800%" y="533" width="0.2052%" height="15" fill="rgb(223,98,5)"/><text x="94.2300%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.21%)</title><rect x="93.9800%" y="517" width="0.2052%" height="15" fill="rgb(228,75,37)"/><text x="94.2300%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (23 samples, 0.31%)</title><rect x="93.9800%" y="565" width="0.3147%" height="15" fill="rgb(205,115,49)"/><text x="94.2300%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (23 samples, 0.31%)</title><rect x="93.9800%" y="549" width="0.3147%" height="15" fill="rgb(250,154,43)"/><text x="94.2300%" y="559.50"></text></g><g><title>decor_mem::stats::print_stats (8 samples, 0.11%)</title><rect x="94.1853%" y="533" width="0.1095%" height="15" fill="rgb(226,43,29)"/><text x="94.4353%" y="543.50"></text></g><g><title>sk_wait_data (8 samples, 0.11%)</title><rect x="94.5547%" y="357" width="0.1095%" height="15" fill="rgb(249,228,39)"/><text x="94.8047%" y="367.50"></text></g><g><title>wait_woken (8 samples, 0.11%)</title><rect x="94.5547%" y="341" width="0.1095%" height="15" fill="rgb(216,79,43)"/><text x="94.8047%" y="351.50"></text></g><g><title>do_syscall_64 (15 samples, 0.21%)</title><rect x="94.4726%" y="437" width="0.2052%" height="15" fill="rgb(228,95,12)"/><text x="94.7226%" y="447.50"></text></g><g><title>__x64_sys_recvfrom (14 samples, 0.19%)</title><rect x="94.4862%" y="421" width="0.1915%" height="15" fill="rgb(249,221,15)"/><text x="94.7362%" y="431.50"></text></g><g><title>__sys_recvfrom (14 samples, 0.19%)</title><rect x="94.4862%" y="405" width="0.1915%" height="15" fill="rgb(233,34,13)"/><text x="94.7362%" y="415.50"></text></g><g><title>inet_recvmsg (14 samples, 0.19%)</title><rect x="94.4862%" y="389" width="0.1915%" height="15" fill="rgb(214,103,39)"/><text x="94.7362%" y="399.50"></text></g><g><title>tcp_recvmsg (14 samples, 0.19%)</title><rect x="94.4862%" y="373" width="0.1915%" height="15" fill="rgb(251,126,39)"/><text x="94.7362%" y="383.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (16 samples, 0.22%)</title><rect x="94.4726%" y="533" width="0.2189%" height="15" fill="rgb(214,216,36)"/><text x="94.7226%" y="543.50"></text></g><g><title>std::sys_common::net::TcpStream::read (16 samples, 0.22%)</title><rect x="94.4726%" y="517" width="0.2189%" height="15" fill="rgb(220,221,8)"/><text x="94.7226%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::read (16 samples, 0.22%)</title><rect x="94.4726%" y="501" width="0.2189%" height="15" fill="rgb(240,216,3)"/><text x="94.7226%" y="511.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (16 samples, 0.22%)</title><rect x="94.4726%" y="485" width="0.2189%" height="15" fill="rgb(232,218,17)"/><text x="94.7226%" y="495.50"></text></g><g><title>__libc_recv (16 samples, 0.22%)</title><rect x="94.4726%" y="469" width="0.2189%" height="15" fill="rgb(229,163,45)"/><text x="94.7226%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (16 samples, 0.22%)</title><rect x="94.4726%" y="453" width="0.2189%" height="15" fill="rgb(231,110,42)"/><text x="94.7226%" y="463.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (17 samples, 0.23%)</title><rect x="94.4726%" y="549" width="0.2326%" height="15" fill="rgb(208,170,48)"/><text x="94.7226%" y="559.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (19 samples, 0.26%)</title><rect x="94.4726%" y="565" width="0.2600%" height="15" fill="rgb(239,116,25)"/><text x="94.7226%" y="575.50"></text></g><g><title>__wake_up_common_lock (8 samples, 0.11%)</title><rect x="94.9925%" y="53" width="0.1095%" height="15" fill="rgb(219,200,50)"/><text x="95.2425%" y="63.50"></text></g><g><title>__wake_up_common (8 samples, 0.11%)</title><rect x="94.9925%" y="37" width="0.1095%" height="15" fill="rgb(245,200,0)"/><text x="95.2425%" y="47.50"></text></g><g><title>sock_def_readable (9 samples, 0.12%)</title><rect x="94.9925%" y="69" width="0.1231%" height="15" fill="rgb(245,119,33)"/><text x="95.2425%" y="79.50"></text></g><g><title>ip_finish_output2 (20 samples, 0.27%)</title><rect x="94.9241%" y="309" width="0.2736%" height="15" fill="rgb(231,125,12)"/><text x="95.1741%" y="319.50"></text></g><g><title>__local_bh_enable_ip (19 samples, 0.26%)</title><rect x="94.9377%" y="293" width="0.2600%" height="15" fill="rgb(216,96,41)"/><text x="95.1877%" y="303.50"></text></g><g><title>do_softirq (19 samples, 0.26%)</title><rect x="94.9377%" y="277" width="0.2600%" height="15" fill="rgb(248,43,45)"/><text x="95.1877%" y="287.50"></text></g><g><title>do_softirq_own_stack (19 samples, 0.26%)</title><rect x="94.9377%" y="261" width="0.2600%" height="15" fill="rgb(217,222,7)"/><text x="95.1877%" y="271.50"></text></g><g><title>__do_softirq (19 samples, 0.26%)</title><rect x="94.9377%" y="245" width="0.2600%" height="15" fill="rgb(233,28,6)"/><text x="95.1877%" y="255.50"></text></g><g><title>net_rx_action (18 samples, 0.25%)</title><rect x="94.9514%" y="229" width="0.2463%" height="15" fill="rgb(231,218,15)"/><text x="95.2014%" y="239.50"></text></g><g><title>process_backlog (18 samples, 0.25%)</title><rect x="94.9514%" y="213" width="0.2463%" height="15" fill="rgb(226,171,48)"/><text x="95.2014%" y="223.50"></text></g><g><title>__netif_receive_skb_one_core (18 samples, 0.25%)</title><rect x="94.9514%" y="197" width="0.2463%" height="15" fill="rgb(235,201,9)"/><text x="95.2014%" y="207.50"></text></g><g><title>ip_rcv (18 samples, 0.25%)</title><rect x="94.9514%" y="181" width="0.2463%" height="15" fill="rgb(217,80,15)"/><text x="95.2014%" y="191.50"></text></g><g><title>ip_local_deliver (18 samples, 0.25%)</title><rect x="94.9514%" y="165" width="0.2463%" height="15" fill="rgb(219,152,8)"/><text x="95.2014%" y="175.50"></text></g><g><title>ip_local_deliver_finish (18 samples, 0.25%)</title><rect x="94.9514%" y="149" width="0.2463%" height="15" fill="rgb(243,107,38)"/><text x="95.2014%" y="159.50"></text></g><g><title>ip_protocol_deliver_rcu (18 samples, 0.25%)</title><rect x="94.9514%" y="133" width="0.2463%" height="15" fill="rgb(231,17,5)"/><text x="95.2014%" y="143.50"></text></g><g><title>tcp_v4_rcv (18 samples, 0.25%)</title><rect x="94.9514%" y="117" width="0.2463%" height="15" fill="rgb(209,25,54)"/><text x="95.2014%" y="127.50"></text></g><g><title>tcp_v4_do_rcv (17 samples, 0.23%)</title><rect x="94.9651%" y="101" width="0.2326%" height="15" fill="rgb(219,0,2)"/><text x="95.2151%" y="111.50"></text></g><g><title>tcp_rcv_established (17 samples, 0.23%)</title><rect x="94.9651%" y="85" width="0.2326%" height="15" fill="rgb(246,9,5)"/><text x="95.2151%" y="95.50"></text></g><g><title>__ip_queue_xmit (25 samples, 0.34%)</title><rect x="94.8693%" y="341" width="0.3420%" height="15" fill="rgb(226,159,4)"/><text x="95.1193%" y="351.50"></text></g><g><title>ip_output (21 samples, 0.29%)</title><rect x="94.9241%" y="325" width="0.2873%" height="15" fill="rgb(219,175,34)"/><text x="95.1741%" y="335.50"></text></g><g><title>__tcp_transmit_skb (27 samples, 0.37%)</title><rect x="94.8557%" y="357" width="0.3694%" height="15" fill="rgb(236,10,46)"/><text x="95.1057%" y="367.50"></text></g><g><title>__tcp_push_pending_frames (33 samples, 0.45%)</title><rect x="94.8420%" y="389" width="0.4515%" height="15" fill="rgb(240,211,16)"/><text x="95.0920%" y="399.50"></text></g><g><title>tcp_write_xmit (32 samples, 0.44%)</title><rect x="94.8557%" y="373" width="0.4378%" height="15" fill="rgb(205,3,43)"/><text x="95.1057%" y="383.50"></text></g><g><title>sock_sendmsg (43 samples, 0.59%)</title><rect x="94.7599%" y="437" width="0.5883%" height="15" fill="rgb(245,7,22)"/><text x="95.0099%" y="447.50"></text></g><g><title>tcp_sendmsg (43 samples, 0.59%)</title><rect x="94.7599%" y="421" width="0.5883%" height="15" fill="rgb(239,132,32)"/><text x="95.0099%" y="431.50"></text></g><g><title>tcp_sendmsg_locked (38 samples, 0.52%)</title><rect x="94.8283%" y="405" width="0.5199%" height="15" fill="rgb(228,202,34)"/><text x="95.0783%" y="415.50"></text></g><g><title>__x64_sys_sendto (46 samples, 0.63%)</title><rect x="94.7325%" y="469" width="0.6294%" height="15" fill="rgb(254,200,22)"/><text x="94.9825%" y="479.50"></text></g><g><title>__sys_sendto (46 samples, 0.63%)</title><rect x="94.7325%" y="453" width="0.6294%" height="15" fill="rgb(219,10,39)"/><text x="94.9825%" y="463.50"></text></g><g><title>do_syscall_64 (48 samples, 0.66%)</title><rect x="94.7325%" y="485" width="0.6567%" height="15" fill="rgb(226,210,39)"/><text x="94.9825%" y="495.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (2,696 samples, 36.89%)</title><rect x="58.5169%" y="597" width="36.8860%" height="15" fill="rgb(208,219,16)"/><text x="58.7669%" y="607.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run (2,696 samples, 36.89%)</title><rect x="58.5169%" y="581" width="36.8860%" height="15" fill="rgb(216,158,51)"/><text x="58.7669%" y="591.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (49 samples, 0.67%)</title><rect x="94.7325%" y="565" width="0.6704%" height="15" fill="rgb(233,14,44)"/><text x="94.9825%" y="575.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (49 samples, 0.67%)</title><rect x="94.7325%" y="549" width="0.6704%" height="15" fill="rgb(237,97,39)"/><text x="94.9825%" y="559.50"></text></g><g><title>std::sys_common::net::TcpStream::write (49 samples, 0.67%)</title><rect x="94.7325%" y="533" width="0.6704%" height="15" fill="rgb(218,198,43)"/><text x="94.9825%" y="543.50"></text></g><g><title>__libc_send (49 samples, 0.67%)</title><rect x="94.7325%" y="517" width="0.6704%" height="15" fill="rgb(231,104,20)"/><text x="94.9825%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (49 samples, 0.67%)</title><rect x="94.7325%" y="501" width="0.6704%" height="15" fill="rgb(254,36,13)"/><text x="94.9825%" y="511.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (2,697 samples, 36.90%)</title><rect x="58.5169%" y="613" width="36.8997%" height="15" fill="rgb(248,14,50)"/><text x="58.7669%" y="623.50">decor_mem::Shim::run_on_tcp</text></g><g><title>__GI___clone (2,703 samples, 36.98%)</title><rect x="58.4485%" y="725" width="36.9818%" height="15" fill="rgb(217,107,29)"/><text x="58.6985%" y="735.50">__GI___clone</text></g><g><title>start_thread (2,703 samples, 36.98%)</title><rect x="58.4485%" y="709" width="36.9818%" height="15" fill="rgb(251,169,33)"/><text x="58.6985%" y="719.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2,698 samples, 36.91%)</title><rect x="58.5169%" y="693" width="36.9134%" height="15" fill="rgb(217,108,32)"/><text x="58.7669%" y="703.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2,698 samples, 36.91%)</title><rect x="58.5169%" y="677" width="36.9134%" height="15" fill="rgb(219,66,42)"/><text x="58.7669%" y="687.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::ca..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2,698 samples, 36.91%)</title><rect x="58.5169%" y="661" width="36.9134%" height="15" fill="rgb(206,180,7)"/><text x="58.7669%" y="671.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::ca..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (2,698 samples, 36.91%)</title><rect x="58.5169%" y="645" width="36.9134%" height="15" fill="rgb(208,226,31)"/><text x="58.7669%" y="655.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,698 samples, 36.91%)</title><rect x="58.5169%" y="629" width="36.9134%" height="15" fill="rgb(218,26,49)"/><text x="58.7669%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>__vdso_clock_gettime (10 samples, 0.14%)</title><rect x="95.6492%" y="725" width="0.1368%" height="15" fill="rgb(233,197,48)"/><text x="95.8992%" y="735.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (233 samples, 3.19%)</title><rect x="95.9092%" y="245" width="3.1879%" height="15" fill="rgb(252,181,51)"/><text x="96.1592%" y="255.50">__i..</text></g><g><title>native_write_msr (233 samples, 3.19%)</title><rect x="95.9092%" y="229" width="3.1879%" height="15" fill="rgb(253,90,19)"/><text x="96.1592%" y="239.50">nat..</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 3.22%)</title><rect x="95.8955%" y="373" width="3.2152%" height="15" fill="rgb(215,171,30)"/><text x="96.1455%" y="383.50">__s..</text></g><g><title>stop_one_cpu (235 samples, 3.22%)</title><rect x="95.8955%" y="357" width="3.2152%" height="15" fill="rgb(214,222,9)"/><text x="96.1455%" y="367.50">sto..</text></g><g><title>cpu_stop_queue_work (235 samples, 3.22%)</title><rect x="95.8955%" y="341" width="3.2152%" height="15" fill="rgb(223,3,22)"/><text x="96.1455%" y="351.50">cpu..</text></g><g><title>preempt_schedule_thunk (235 samples, 3.22%)</title><rect x="95.8955%" y="325" width="3.2152%" height="15" fill="rgb(225,196,46)"/><text x="96.1455%" y="335.50">pre..</text></g><g><title>preempt_schedule_common (235 samples, 3.22%)</title><rect x="95.8955%" y="309" width="3.2152%" height="15" fill="rgb(209,110,37)"/><text x="96.1455%" y="319.50">pre..</text></g><g><title>__schedule (235 samples, 3.22%)</title><rect x="95.8955%" y="293" width="3.2152%" height="15" fill="rgb(249,89,12)"/><text x="96.1455%" y="303.50">__s..</text></g><g><title>finish_task_switch (235 samples, 3.22%)</title><rect x="95.8955%" y="277" width="3.2152%" height="15" fill="rgb(226,27,33)"/><text x="96.1455%" y="287.50">fin..</text></g><g><title>__perf_event_task_sched_in (234 samples, 3.20%)</title><rect x="95.9092%" y="261" width="3.2015%" height="15" fill="rgb(213,82,22)"/><text x="96.1592%" y="271.50">__p..</text></g><g><title>entry_SYSCALL_64 (237 samples, 3.24%)</title><rect x="95.8818%" y="437" width="3.2426%" height="15" fill="rgb(248,140,0)"/><text x="96.1318%" y="447.50">ent..</text></g><g><title>do_syscall_64 (237 samples, 3.24%)</title><rect x="95.8818%" y="421" width="3.2426%" height="15" fill="rgb(228,106,3)"/><text x="96.1318%" y="431.50">do_..</text></g><g><title>__x64_sys_sched_setaffinity (237 samples, 3.24%)</title><rect x="95.8818%" y="405" width="3.2426%" height="15" fill="rgb(209,23,37)"/><text x="96.1318%" y="415.50">__x..</text></g><g><title>sched_setaffinity (237 samples, 3.24%)</title><rect x="95.8818%" y="389" width="3.2426%" height="15" fill="rgb(241,93,50)"/><text x="96.1318%" y="399.50">sch..</text></g><g><title>hwloc::Topology::new (239 samples, 3.27%)</title><rect x="95.8681%" y="549" width="3.2699%" height="15" fill="rgb(253,46,43)"/><text x="96.1181%" y="559.50">hwl..</text></g><g><title>hwloc_topology_load (239 samples, 3.27%)</title><rect x="95.8681%" y="533" width="3.2699%" height="15" fill="rgb(226,206,43)"/><text x="96.1181%" y="543.50">hwl..</text></g><g><title>[libhwloc.so.15.2.0] (239 samples, 3.27%)</title><rect x="95.8681%" y="517" width="3.2699%" height="15" fill="rgb(217,54,7)"/><text x="96.1181%" y="527.50">[li..</text></g><g><title>[libhwloc.so.15.2.0] (239 samples, 3.27%)</title><rect x="95.8681%" y="501" width="3.2699%" height="15" fill="rgb(223,5,52)"/><text x="96.1181%" y="511.50">[li..</text></g><g><title>[libhwloc.so.15.2.0] (239 samples, 3.27%)</title><rect x="95.8681%" y="485" width="3.2699%" height="15" fill="rgb(206,52,46)"/><text x="96.1181%" y="495.50">[li..</text></g><g><title>hwloc_linux_set_tid_cpubind (238 samples, 3.26%)</title><rect x="95.8818%" y="469" width="3.2563%" height="15" fill="rgb(253,136,11)"/><text x="96.1318%" y="479.50">hwl..</text></g><g><title>__GI___sched_setaffinity_new (238 samples, 3.26%)</title><rect x="95.8818%" y="453" width="3.2563%" height="15" fill="rgb(208,106,33)"/><text x="96.1318%" y="463.50">__G..</text></g><g><title>__libc_start_main (247 samples, 3.38%)</title><rect x="95.8544%" y="709" width="3.3794%" height="15" fill="rgb(206,54,4)"/><text x="96.1044%" y="719.50">__l..</text></g><g><title>main (247 samples, 3.38%)</title><rect x="95.8544%" y="693" width="3.3794%" height="15" fill="rgb(213,3,15)"/><text x="96.1044%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (247 samples, 3.38%)</title><rect x="95.8544%" y="677" width="3.3794%" height="15" fill="rgb(252,211,39)"/><text x="96.1044%" y="687.50">std..</text></g><g><title>std::panic::catch_unwind (247 samples, 3.38%)</title><rect x="95.8544%" y="661" width="3.3794%" height="15" fill="rgb(223,6,36)"/><text x="96.1044%" y="671.50">std..</text></g><g><title>std::panicking::try (247 samples, 3.38%)</title><rect x="95.8544%" y="645" width="3.3794%" height="15" fill="rgb(252,169,45)"/><text x="96.1044%" y="655.50">std..</text></g><g><title>std::panicking::try::do_call (247 samples, 3.38%)</title><rect x="95.8544%" y="629" width="3.3794%" height="15" fill="rgb(212,48,26)"/><text x="96.1044%" y="639.50">std..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (247 samples, 3.38%)</title><rect x="95.8544%" y="613" width="3.3794%" height="15" fill="rgb(251,102,48)"/><text x="96.1044%" y="623.50">cor..</text></g><g><title>std::rt::lang_start::_{{closure}} (247 samples, 3.38%)</title><rect x="95.8544%" y="597" width="3.3794%" height="15" fill="rgb(243,208,16)"/><text x="96.1044%" y="607.50">std..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (247 samples, 3.38%)</title><rect x="95.8544%" y="581" width="3.3794%" height="15" fill="rgb(219,96,24)"/><text x="96.1044%" y="591.50">std..</text></g><g><title>lobsters_microbenchmarks::main (247 samples, 3.38%)</title><rect x="95.8544%" y="565" width="3.3794%" height="15" fill="rgb(219,33,29)"/><text x="96.1044%" y="575.50">lob..</text></g><g><title>_start (248 samples, 3.39%)</title><rect x="95.8544%" y="725" width="3.3931%" height="15" fill="rgb(223,176,5)"/><text x="96.1044%" y="735.50">_st..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.11%)</title><rect x="99.2475%" y="725" width="0.1095%" height="15" fill="rgb(228,140,14)"/><text x="99.4975%" y="735.50"></text></g><g><title>page_fault (15 samples, 0.21%)</title><rect x="99.6580%" y="725" width="0.2052%" height="15" fill="rgb(217,179,31)"/><text x="99.9080%" y="735.50"></text></g><g><title>lobsters-microb (7,303 samples, 99.92%)</title><rect x="0.0000%" y="741" width="99.9179%" height="15" fill="rgb(230,9,30)"/><text x="0.2500%" y="751.50">lobsters-microb</text></g><g><title>all (7,309 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(230,136,20)"/><text x="0.2500%" y="767.50"></text></g></svg></svg>