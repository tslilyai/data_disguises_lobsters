<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="821.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="821.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (5 samples, 0.10%)</title><rect x="0.1431%" y="757" width="0.1022%" height="15" fill="rgb(227,0,7)"/><text x="0.3931%" y="767.50"></text></g><g><title>[[stack]] (10 samples, 0.20%)</title><rect x="0.2452%" y="757" width="0.2044%" height="15" fill="rgb(217,0,24)"/><text x="0.4952%" y="767.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (19 samples, 0.39%)</title><rect x="0.4496%" y="741" width="0.3883%" height="15" fill="rgb(221,193,54)"/><text x="0.6996%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (51 samples, 1.04%)</title><rect x="0.8379%" y="741" width="1.0423%" height="15" fill="rgb(248,212,6)"/><text x="1.0879%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="1.7576%" y="725" width="0.1226%" height="15" fill="rgb(208,68,35)"/><text x="2.0076%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="1.7576%" y="709" width="0.1226%" height="15" fill="rgb(232,128,0)"/><text x="2.0076%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="1.7576%" y="693" width="0.1226%" height="15" fill="rgb(207,160,47)"/><text x="2.0076%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="1.8802%" y="741" width="0.1839%" height="15" fill="rgb(228,23,34)"/><text x="2.1302%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="2.2072%" y="741" width="0.1635%" height="15" fill="rgb(218,30,26)"/><text x="2.4572%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="2.4729%" y="741" width="0.1022%" height="15" fill="rgb(220,122,19)"/><text x="2.7229%" y="751.50"></text></g><g><title>__GI___libc_free (5 samples, 0.10%)</title><rect x="2.6977%" y="741" width="0.1022%" height="15" fill="rgb(250,228,42)"/><text x="2.9477%" y="751.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.43%)</title><rect x="2.7999%" y="741" width="0.4292%" height="15" fill="rgb(240,193,28)"/><text x="3.0499%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="3.3109%" y="741" width="0.1226%" height="15" fill="rgb(216,20,37)"/><text x="3.5609%" y="751.50"></text></g><g><title>_int_free (37 samples, 0.76%)</title><rect x="3.4948%" y="741" width="0.7562%" height="15" fill="rgb(206,188,39)"/><text x="3.7448%" y="751.50"></text></g><g><title>_int_malloc (16 samples, 0.33%)</title><rect x="4.2510%" y="741" width="0.3270%" height="15" fill="rgb(217,207,13)"/><text x="4.5010%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.25%)</title><rect x="4.7210%" y="741" width="0.2452%" height="15" fill="rgb(231,73,38)"/><text x="4.9710%" y="751.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (15 samples, 0.31%)</title><rect x="4.9663%" y="741" width="0.3066%" height="15" fill="rgb(225,20,46)"/><text x="5.2163%" y="751.50"></text></g><g><title>alloc::string::String::push (9 samples, 0.18%)</title><rect x="5.2728%" y="741" width="0.1839%" height="15" fill="rgb(210,31,41)"/><text x="5.5228%" y="751.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="5.4772%" y="741" width="0.2248%" height="15" fill="rgb(221,200,47)"/><text x="5.7272%" y="751.50"></text></g><g><title>core::num::dec2flt::dec2flt (5 samples, 0.10%)</title><rect x="5.7020%" y="741" width="0.1022%" height="15" fill="rgb(226,26,5)"/><text x="5.9520%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.12%)</title><rect x="5.8655%" y="741" width="0.1226%" height="15" fill="rgb(249,33,26)"/><text x="6.1155%" y="751.50"></text></g><g><title>decor_mem::select::get_setexpr_results (5 samples, 0.10%)</title><rect x="6.0903%" y="741" width="0.1022%" height="15" fill="rgb(235,183,28)"/><text x="6.3403%" y="751.50"></text></g><g><title>decor_mem::select::get_value_for_row::{{closure}} (11 samples, 0.22%)</title><rect x="6.1925%" y="741" width="0.2248%" height="15" fill="rgb(221,5,38)"/><text x="6.4425%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (5 samples, 0.10%)</title><rect x="6.5400%" y="741" width="0.1022%" height="15" fill="rgb(247,18,42)"/><text x="6.7900%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (5 samples, 0.10%)</title><rect x="6.6421%" y="741" width="0.1022%" height="15" fill="rgb(241,131,45)"/><text x="6.8921%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (5 samples, 0.10%)</title><rect x="6.8261%" y="741" width="0.1022%" height="15" fill="rgb(249,31,29)"/><text x="7.0761%" y="751.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="7.0713%" y="741" width="0.1022%" height="15" fill="rgb(225,111,53)"/><text x="7.3213%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (6 samples, 0.12%)</title><rect x="7.1735%" y="741" width="0.1226%" height="15" fill="rgb(238,160,17)"/><text x="7.4235%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (7 samples, 0.14%)</title><rect x="7.5823%" y="741" width="0.1431%" height="15" fill="rgb(214,148,48)"/><text x="7.8323%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (7 samples, 0.14%)</title><rect x="7.7253%" y="741" width="0.1431%" height="15" fill="rgb(232,36,49)"/><text x="7.9753%" y="751.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (6 samples, 0.12%)</title><rect x="8.0523%" y="741" width="0.1226%" height="15" fill="rgb(209,103,24)"/><text x="8.3023%" y="751.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (15 samples, 0.31%)</title><rect x="8.1749%" y="741" width="0.3066%" height="15" fill="rgb(229,88,8)"/><text x="8.4249%" y="751.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (7 samples, 0.14%)</title><rect x="8.5019%" y="741" width="0.1431%" height="15" fill="rgb(213,181,19)"/><text x="8.7519%" y="751.50"></text></g><g><title>[anon] (415 samples, 8.48%)</title><rect x="0.4496%" y="757" width="8.4815%" height="15" fill="rgb(254,191,54)"/><text x="0.6996%" y="767.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.22%)</title><rect x="8.7063%" y="741" width="0.2248%" height="15" fill="rgb(241,83,37)"/><text x="8.9563%" y="751.50"></text></g><g><title>[libc-2.31.so] (7 samples, 0.14%)</title><rect x="8.9311%" y="757" width="0.1431%" height="15" fill="rgb(233,36,39)"/><text x="9.1811%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="9.1151%" y="741" width="0.1226%" height="15" fill="rgb(226,3,54)"/><text x="9.3651%" y="751.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="9.3603%" y="741" width="0.1839%" height="15" fill="rgb(245,192,40)"/><text x="9.6103%" y="751.50"></text></g><g><title>[lobsters-microbenchmarks] (27 samples, 0.55%)</title><rect x="9.0742%" y="757" width="0.5518%" height="15" fill="rgb(238,167,29)"/><text x="9.3242%" y="767.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 0.10%)</title><rect x="9.6260%" y="741" width="0.1022%" height="15" fill="rgb(232,182,51)"/><text x="9.8760%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.27%)</title><rect x="9.7282%" y="741" width="0.2657%" height="15" fill="rgb(231,60,39)"/><text x="9.9782%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.10%)</title><rect x="10.0347%" y="741" width="0.1022%" height="15" fill="rgb(208,69,12)"/><text x="10.2847%" y="751.50"></text></g><g><title>do_syscall_64 (7 samples, 0.14%)</title><rect x="10.1982%" y="485" width="0.1431%" height="15" fill="rgb(235,93,37)"/><text x="10.4482%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (7 samples, 0.14%)</title><rect x="10.1982%" y="469" width="0.1431%" height="15" fill="rgb(213,116,39)"/><text x="10.4482%" y="479.50"></text></g><g><title>__sys_recvfrom (7 samples, 0.14%)</title><rect x="10.1982%" y="453" width="0.1431%" height="15" fill="rgb(222,207,29)"/><text x="10.4482%" y="463.50"></text></g><g><title>inet_recvmsg (7 samples, 0.14%)</title><rect x="10.1982%" y="437" width="0.1431%" height="15" fill="rgb(206,96,30)"/><text x="10.4482%" y="447.50"></text></g><g><title>tcp_recvmsg (7 samples, 0.14%)</title><rect x="10.1982%" y="421" width="0.1431%" height="15" fill="rgb(218,138,4)"/><text x="10.4482%" y="431.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (11 samples, 0.22%)</title><rect x="10.1369%" y="597" width="0.2248%" height="15" fill="rgb(250,191,14)"/><text x="10.3869%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (11 samples, 0.22%)</title><rect x="10.1369%" y="581" width="0.2248%" height="15" fill="rgb(239,60,40)"/><text x="10.3869%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (11 samples, 0.22%)</title><rect x="10.1369%" y="565" width="0.2248%" height="15" fill="rgb(206,27,48)"/><text x="10.3869%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (11 samples, 0.22%)</title><rect x="10.1369%" y="549" width="0.2248%" height="15" fill="rgb(225,35,8)"/><text x="10.3869%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (11 samples, 0.22%)</title><rect x="10.1369%" y="533" width="0.2248%" height="15" fill="rgb(250,213,24)"/><text x="10.3869%" y="543.50"></text></g><g><title>__libc_recv (11 samples, 0.22%)</title><rect x="10.1369%" y="517" width="0.2248%" height="15" fill="rgb(247,123,22)"/><text x="10.3869%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.18%)</title><rect x="10.1778%" y="501" width="0.1839%" height="15" fill="rgb(231,138,38)"/><text x="10.4278%" y="511.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (12 samples, 0.25%)</title><rect x="10.1369%" y="693" width="0.2452%" height="15" fill="rgb(231,145,46)"/><text x="10.3869%" y="703.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (12 samples, 0.25%)</title><rect x="10.1369%" y="677" width="0.2452%" height="15" fill="rgb(251,118,11)"/><text x="10.3869%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (12 samples, 0.25%)</title><rect x="10.1369%" y="661" width="0.2452%" height="15" fill="rgb(217,147,25)"/><text x="10.3869%" y="671.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (12 samples, 0.25%)</title><rect x="10.1369%" y="645" width="0.2452%" height="15" fill="rgb(247,81,37)"/><text x="10.3869%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (12 samples, 0.25%)</title><rect x="10.1369%" y="629" width="0.2452%" height="15" fill="rgb(209,12,38)"/><text x="10.3869%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.25%)</title><rect x="10.1369%" y="613" width="0.2452%" height="15" fill="rgb(227,1,9)"/><text x="10.3869%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.22%)</title><rect x="10.4639%" y="613" width="0.2248%" height="15" fill="rgb(248,47,43)"/><text x="10.7139%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.14%)</title><rect x="10.5457%" y="597" width="0.1431%" height="15" fill="rgb(221,10,30)"/><text x="10.7957%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.35%)</title><rect x="10.3822%" y="661" width="0.3474%" height="15" fill="rgb(210,229,1)"/><text x="10.6322%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (17 samples, 0.35%)</title><rect x="10.3822%" y="645" width="0.3474%" height="15" fill="rgb(222,148,37)"/><text x="10.6322%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.27%)</title><rect x="10.4639%" y="629" width="0.2657%" height="15" fill="rgb(234,67,33)"/><text x="10.7139%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.25%)</title><rect x="10.7296%" y="645" width="0.2452%" height="15" fill="rgb(247,98,35)"/><text x="10.9796%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="10.7705%" y="629" width="0.2044%" height="15" fill="rgb(247,138,52)"/><text x="11.0205%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="10.7909%" y="613" width="0.1839%" height="15" fill="rgb(213,79,30)"/><text x="11.0409%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.16%)</title><rect x="10.8114%" y="597" width="0.1635%" height="15" fill="rgb(246,177,23)"/><text x="11.0614%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.16%)</title><rect x="10.8114%" y="581" width="0.1635%" height="15" fill="rgb(230,62,27)"/><text x="11.0614%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.16%)</title><rect x="10.8114%" y="565" width="0.1635%" height="15" fill="rgb(216,154,8)"/><text x="11.0614%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.16%)</title><rect x="10.8114%" y="549" width="0.1635%" height="15" fill="rgb(244,35,45)"/><text x="11.0614%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.16%)</title><rect x="10.8114%" y="533" width="0.1635%" height="15" fill="rgb(251,115,12)"/><text x="11.0614%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.16%)</title><rect x="10.8114%" y="517" width="0.1635%" height="15" fill="rgb(240,54,50)"/><text x="11.0614%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.16%)</title><rect x="10.8114%" y="501" width="0.1635%" height="15" fill="rgb(233,84,52)"/><text x="11.0614%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.16%)</title><rect x="10.8114%" y="485" width="0.1635%" height="15" fill="rgb(207,117,47)"/><text x="11.0614%" y="495.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.16%)</title><rect x="10.8114%" y="469" width="0.1635%" height="15" fill="rgb(249,43,39)"/><text x="11.0614%" y="479.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="10.8114%" y="453" width="0.1635%" height="15" fill="rgb(209,38,44)"/><text x="11.0614%" y="463.50"></text></g><g><title>_int_malloc (6 samples, 0.12%)</title><rect x="10.8522%" y="437" width="0.1226%" height="15" fill="rgb(236,212,23)"/><text x="11.1022%" y="447.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="11.0975%" y="597" width="0.1226%" height="15" fill="rgb(242,79,21)"/><text x="11.3475%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.12%)</title><rect x="11.0975%" y="581" width="0.1226%" height="15" fill="rgb(211,96,35)"/><text x="11.3475%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (6 samples, 0.12%)</title><rect x="11.0975%" y="565" width="0.1226%" height="15" fill="rgb(253,215,40)"/><text x="11.3475%" y="575.50"></text></g><g><title>decor_mem::select::expr_to_col (11 samples, 0.22%)</title><rect x="11.0362%" y="645" width="0.2248%" height="15" fill="rgb(211,81,21)"/><text x="11.2862%" y="655.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="11.0566%" y="629" width="0.2044%" height="15" fill="rgb(208,190,38)"/><text x="11.3066%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="11.0770%" y="613" width="0.1839%" height="15" fill="rgb(235,213,38)"/><text x="11.3270%" y="623.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="11.6084%" y="629" width="0.1635%" height="15" fill="rgb(237,122,38)"/><text x="11.8584%" y="639.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (14 samples, 0.29%)</title><rect x="11.8332%" y="629" width="0.2861%" height="15" fill="rgb(244,218,35)"/><text x="12.0832%" y="639.50"></text></g><g><title>core::num::dec2flt::dec2flt (13 samples, 0.27%)</title><rect x="11.8537%" y="613" width="0.2657%" height="15" fill="rgb(240,68,47)"/><text x="12.1037%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.10%)</title><rect x="12.2215%" y="613" width="0.1022%" height="15" fill="rgb(210,16,53)"/><text x="12.4715%" y="623.50"></text></g><g><title>decor_mem::select::expr_to_col (5 samples, 0.10%)</title><rect x="12.3442%" y="613" width="0.1022%" height="15" fill="rgb(235,124,12)"/><text x="12.5942%" y="623.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="12.3442%" y="597" width="0.1022%" height="15" fill="rgb(224,169,11)"/><text x="12.5942%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="12.3442%" y="581" width="0.1022%" height="15" fill="rgb(250,166,2)"/><text x="12.5942%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.10%)</title><rect x="12.3442%" y="565" width="0.1022%" height="15" fill="rgb(242,216,29)"/><text x="12.5942%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (5 samples, 0.10%)</title><rect x="12.3442%" y="549" width="0.1022%" height="15" fill="rgb(230,116,27)"/><text x="12.5942%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (7 samples, 0.14%)</title><rect x="12.5690%" y="533" width="0.1431%" height="15" fill="rgb(228,99,48)"/><text x="12.8190%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (10 samples, 0.20%)</title><rect x="12.5281%" y="565" width="0.2044%" height="15" fill="rgb(253,11,6)"/><text x="12.7781%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (10 samples, 0.20%)</title><rect x="12.5281%" y="549" width="0.2044%" height="15" fill="rgb(247,143,39)"/><text x="12.7781%" y="559.50"></text></g><g><title>core::fmt::write (16 samples, 0.33%)</title><rect x="12.4872%" y="597" width="0.3270%" height="15" fill="rgb(236,97,10)"/><text x="12.7372%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (16 samples, 0.33%)</title><rect x="12.4872%" y="581" width="0.3270%" height="15" fill="rgb(233,208,19)"/><text x="12.7372%" y="591.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (29 samples, 0.59%)</title><rect x="12.4464%" y="613" width="0.5927%" height="15" fill="rgb(216,164,2)"/><text x="12.6964%" y="623.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (11 samples, 0.22%)</title><rect x="12.8142%" y="597" width="0.2248%" height="15" fill="rgb(220,129,5)"/><text x="13.0642%" y="607.50"></text></g><g><title>alloc::fmt::format (11 samples, 0.22%)</title><rect x="12.8142%" y="581" width="0.2248%" height="15" fill="rgb(242,17,10)"/><text x="13.0642%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (10 samples, 0.20%)</title><rect x="12.8347%" y="565" width="0.2044%" height="15" fill="rgb(242,107,0)"/><text x="13.0847%" y="575.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="12.8347%" y="549" width="0.2044%" height="15" fill="rgb(251,28,31)"/><text x="13.0847%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (10 samples, 0.20%)</title><rect x="12.8347%" y="533" width="0.2044%" height="15" fill="rgb(233,223,10)"/><text x="13.0847%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (9 samples, 0.18%)</title><rect x="12.8551%" y="517" width="0.1839%" height="15" fill="rgb(215,21,27)"/><text x="13.1051%" y="527.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (9 samples, 0.18%)</title><rect x="12.8551%" y="501" width="0.1839%" height="15" fill="rgb(232,23,21)"/><text x="13.1051%" y="511.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (9 samples, 0.18%)</title><rect x="12.8551%" y="485" width="0.1839%" height="15" fill="rgb(244,5,23)"/><text x="13.1051%" y="495.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (5 samples, 0.10%)</title><rect x="12.9368%" y="469" width="0.1022%" height="15" fill="rgb(226,81,46)"/><text x="13.1868%" y="479.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (11 samples, 0.22%)</title><rect x="13.1617%" y="565" width="0.2248%" height="15" fill="rgb(247,70,30)"/><text x="13.4117%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (11 samples, 0.22%)</title><rect x="13.1617%" y="549" width="0.2248%" height="15" fill="rgb(212,68,19)"/><text x="13.4117%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (9 samples, 0.18%)</title><rect x="13.2025%" y="533" width="0.1839%" height="15" fill="rgb(240,187,13)"/><text x="13.4525%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (5 samples, 0.10%)</title><rect x="13.2843%" y="517" width="0.1022%" height="15" fill="rgb(223,113,26)"/><text x="13.5343%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (19 samples, 0.39%)</title><rect x="13.1617%" y="581" width="0.3883%" height="15" fill="rgb(206,192,2)"/><text x="13.4117%" y="591.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (8 samples, 0.16%)</title><rect x="13.3865%" y="565" width="0.1635%" height="15" fill="rgb(241,108,4)"/><text x="13.6365%" y="575.50"></text></g><g><title>core::fmt::write (24 samples, 0.49%)</title><rect x="13.1617%" y="597" width="0.4905%" height="15" fill="rgb(247,173,49)"/><text x="13.4117%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="13.5500%" y="581" width="0.1022%" height="15" fill="rgb(224,114,35)"/><text x="13.8000%" y="591.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (36 samples, 0.74%)</title><rect x="13.0390%" y="613" width="0.7357%" height="15" fill="rgb(245,159,27)"/><text x="13.2890%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="13.6522%" y="597" width="0.1226%" height="15" fill="rgb(245,172,44)"/><text x="13.9022%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (34 samples, 0.69%)</title><rect x="14.3879%" y="565" width="0.6949%" height="15" fill="rgb(236,23,11)"/><text x="14.6379%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.22%)</title><rect x="14.8580%" y="549" width="0.2248%" height="15" fill="rgb(205,117,38)"/><text x="15.1080%" y="559.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (145 samples, 2.96%)</title><rect x="12.2011%" y="629" width="2.9634%" height="15" fill="rgb(237,72,25)"/><text x="12.4511%" y="639.50">dec..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (68 samples, 1.39%)</title><rect x="13.7748%" y="613" width="1.3897%" height="15" fill="rgb(244,70,9)"/><text x="14.0248%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (57 samples, 1.16%)</title><rect x="13.9996%" y="597" width="1.1649%" height="15" fill="rgb(217,125,39)"/><text x="14.2496%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (50 samples, 1.02%)</title><rect x="14.1427%" y="581" width="1.0219%" height="15" fill="rgb(235,36,10)"/><text x="14.3927%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="15.2871%" y="613" width="0.1431%" height="15" fill="rgb(251,123,47)"/><text x="15.5371%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="15.2871%" y="597" width="0.1431%" height="15" fill="rgb(221,13,13)"/><text x="15.5371%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="15.2871%" y="581" width="0.1431%" height="15" fill="rgb(238,131,9)"/><text x="15.5371%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.10%)</title><rect x="15.3280%" y="565" width="0.1022%" height="15" fill="rgb(211,50,8)"/><text x="15.5780%" y="575.50"></text></g><g><title>__GI___libc_free (5 samples, 0.10%)</title><rect x="15.4302%" y="613" width="0.1022%" height="15" fill="rgb(245,182,24)"/><text x="15.6802%" y="623.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.22%)</title><rect x="15.7776%" y="597" width="0.2248%" height="15" fill="rgb(242,14,37)"/><text x="16.0276%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (6 samples, 0.12%)</title><rect x="16.1251%" y="565" width="0.1226%" height="15" fill="rgb(246,228,12)"/><text x="16.3751%" y="575.50"></text></g><g><title>core::fmt::write (13 samples, 0.27%)</title><rect x="16.0433%" y="597" width="0.2657%" height="15" fill="rgb(213,55,15)"/><text x="16.2933%" y="607.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (9 samples, 0.18%)</title><rect x="16.1251%" y="581" width="0.1839%" height="15" fill="rgb(209,9,3)"/><text x="16.3751%" y="591.50"></text></g><g><title>decor_mem::helpers::minus_parser_vals (51 samples, 1.04%)</title><rect x="15.7163%" y="613" width="1.0423%" height="15" fill="rgb(230,59,30)"/><text x="15.9663%" y="623.50"></text></g><g><title>core::num::dec2flt::dec2flt (22 samples, 0.45%)</title><rect x="16.3090%" y="597" width="0.4496%" height="15" fill="rgb(209,121,21)"/><text x="16.5590%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="16.9221%" y="533" width="0.1022%" height="15" fill="rgb(220,109,13)"/><text x="17.1721%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.10%)</title><rect x="16.9221%" y="517" width="0.1022%" height="15" fill="rgb(232,18,1)"/><text x="17.1721%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 0.10%)</title><rect x="16.9221%" y="501" width="0.1022%" height="15" fill="rgb(215,41,42)"/><text x="17.1721%" y="511.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="17.0448%" y="421" width="0.1226%" height="15" fill="rgb(224,123,36)"/><text x="17.2948%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.33%)</title><rect x="16.8608%" y="597" width="0.3270%" height="15" fill="rgb(240,125,3)"/><text x="17.1108%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 0.29%)</title><rect x="16.9017%" y="581" width="0.2861%" height="15" fill="rgb(205,98,50)"/><text x="17.1517%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.27%)</title><rect x="16.9221%" y="565" width="0.2657%" height="15" fill="rgb(205,185,37)"/><text x="17.1721%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.27%)</title><rect x="16.9221%" y="549" width="0.2657%" height="15" fill="rgb(238,207,15)"/><text x="17.1721%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.16%)</title><rect x="17.0243%" y="533" width="0.1635%" height="15" fill="rgb(213,199,42)"/><text x="17.2743%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (8 samples, 0.16%)</title><rect x="17.0243%" y="517" width="0.1635%" height="15" fill="rgb(235,201,11)"/><text x="17.2743%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.16%)</title><rect x="17.0243%" y="501" width="0.1635%" height="15" fill="rgb(207,46,11)"/><text x="17.2743%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.16%)</title><rect x="17.0243%" y="485" width="0.1635%" height="15" fill="rgb(241,35,35)"/><text x="17.2743%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (8 samples, 0.16%)</title><rect x="17.0243%" y="469" width="0.1635%" height="15" fill="rgb(243,32,47)"/><text x="17.2743%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.16%)</title><rect x="17.0243%" y="453" width="0.1635%" height="15" fill="rgb(247,202,23)"/><text x="17.2743%" y="463.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.14%)</title><rect x="17.0448%" y="437" width="0.1431%" height="15" fill="rgb(219,102,11)"/><text x="17.2948%" y="447.50"></text></g><g><title>decor_mem::select::get_value_for_row::{{closure}} (100 samples, 2.04%)</title><rect x="15.1645%" y="629" width="2.0437%" height="15" fill="rgb(243,110,44)"/><text x="15.4145%" y="639.50">d..</text></g><g><title>decor_mem::select::get_value_for_row::{{closure}} (22 samples, 0.45%)</title><rect x="16.7586%" y="613" width="0.4496%" height="15" fill="rgb(222,74,54)"/><text x="17.0086%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.12%)</title><rect x="17.3104%" y="517" width="0.1226%" height="15" fill="rgb(216,99,12)"/><text x="17.5604%" y="527.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (6 samples, 0.12%)</title><rect x="17.3104%" y="501" width="0.1226%" height="15" fill="rgb(226,22,26)"/><text x="17.5604%" y="511.50"></text></g><g><title>decor_mem::select::get_value_for_row (12 samples, 0.25%)</title><rect x="17.2083%" y="629" width="0.2452%" height="15" fill="rgb(217,163,10)"/><text x="17.4583%" y="639.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (11 samples, 0.22%)</title><rect x="17.2287%" y="613" width="0.2248%" height="15" fill="rgb(213,25,53)"/><text x="17.4787%" y="623.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (7 samples, 0.14%)</title><rect x="17.3104%" y="597" width="0.1431%" height="15" fill="rgb(252,105,26)"/><text x="17.5604%" y="607.50"></text></g><g><title>alloc::fmt::format (7 samples, 0.14%)</title><rect x="17.3104%" y="581" width="0.1431%" height="15" fill="rgb(220,39,43)"/><text x="17.5604%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.14%)</title><rect x="17.3104%" y="565" width="0.1431%" height="15" fill="rgb(229,68,48)"/><text x="17.5604%" y="575.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="17.3104%" y="549" width="0.1431%" height="15" fill="rgb(252,8,32)"/><text x="17.5604%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (7 samples, 0.14%)</title><rect x="17.3104%" y="533" width="0.1431%" height="15" fill="rgb(223,20,43)"/><text x="17.5604%" y="543.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="17.4739%" y="613" width="0.1431%" height="15" fill="rgb(229,81,49)"/><text x="17.7239%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (7 samples, 0.14%)</title><rect x="17.4739%" y="597" width="0.1431%" height="15" fill="rgb(236,28,36)"/><text x="17.7239%" y="607.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (16 samples, 0.33%)</title><rect x="17.4535%" y="629" width="0.3270%" height="15" fill="rgb(249,185,26)"/><text x="17.7035%" y="639.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (8 samples, 0.16%)</title><rect x="17.6170%" y="613" width="0.1635%" height="15" fill="rgb(249,174,33)"/><text x="17.8670%" y="623.50"></text></g><g><title>alloc::fmt::format (8 samples, 0.16%)</title><rect x="17.6170%" y="597" width="0.1635%" height="15" fill="rgb(233,201,37)"/><text x="17.8670%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 0.14%)</title><rect x="17.6374%" y="581" width="0.1431%" height="15" fill="rgb(221,78,26)"/><text x="17.8874%" y="591.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="17.6374%" y="565" width="0.1431%" height="15" fill="rgb(250,127,30)"/><text x="17.8874%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (26 samples, 0.53%)</title><rect x="18.0871%" y="549" width="0.5314%" height="15" fill="rgb(230,49,44)"/><text x="18.3371%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (20 samples, 0.41%)</title><rect x="18.2097%" y="533" width="0.4087%" height="15" fill="rgb(229,67,23)"/><text x="18.4597%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (17 samples, 0.35%)</title><rect x="18.2710%" y="517" width="0.3474%" height="15" fill="rgb(249,83,47)"/><text x="18.5210%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (17 samples, 0.35%)</title><rect x="18.2710%" y="501" width="0.3474%" height="15" fill="rgb(215,43,3)"/><text x="18.5210%" y="511.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (10 samples, 0.20%)</title><rect x="18.4141%" y="485" width="0.2044%" height="15" fill="rgb(238,154,13)"/><text x="18.6641%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (32 samples, 0.65%)</title><rect x="18.0666%" y="581" width="0.6540%" height="15" fill="rgb(219,56,2)"/><text x="18.3166%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (32 samples, 0.65%)</title><rect x="18.0666%" y="565" width="0.6540%" height="15" fill="rgb(233,0,4)"/><text x="18.3166%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (5 samples, 0.10%)</title><rect x="18.6184%" y="549" width="0.1022%" height="15" fill="rgb(235,30,7)"/><text x="18.8684%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="18.6184%" y="533" width="0.1022%" height="15" fill="rgb(250,79,13)"/><text x="18.8684%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (44 samples, 0.90%)</title><rect x="18.0258%" y="597" width="0.8992%" height="15" fill="rgb(211,146,34)"/><text x="18.2758%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (10 samples, 0.20%)</title><rect x="18.7206%" y="581" width="0.2044%" height="15" fill="rgb(228,22,38)"/><text x="18.9706%" y="591.50"></text></g><g><title>core::fmt::write (57 samples, 1.16%)</title><rect x="17.9849%" y="613" width="1.1649%" height="15" fill="rgb(235,168,5)"/><text x="18.2349%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.22%)</title><rect x="18.9250%" y="597" width="0.2248%" height="15" fill="rgb(221,155,16)"/><text x="19.1750%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (8 samples, 0.16%)</title><rect x="18.9863%" y="581" width="0.1635%" height="15" fill="rgb(215,215,53)"/><text x="19.2363%" y="591.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (69 samples, 1.41%)</title><rect x="17.7805%" y="629" width="1.4102%" height="15" fill="rgb(223,4,10)"/><text x="18.0305%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (13 samples, 0.27%)</title><rect x="19.1907%" y="629" width="0.2657%" height="15" fill="rgb(234,103,6)"/><text x="19.4407%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="19.3542%" y="613" width="0.1022%" height="15" fill="rgb(227,97,0)"/><text x="19.6042%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.14%)</title><rect x="19.7425%" y="613" width="0.1431%" height="15" fill="rgb(234,150,53)"/><text x="19.9925%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.51%)</title><rect x="20.3965%" y="581" width="0.5109%" height="15" fill="rgb(228,201,54)"/><text x="20.6465%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.29%)</title><rect x="20.6213%" y="565" width="0.2861%" height="15" fill="rgb(222,22,37)"/><text x="20.8713%" y="575.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (473 samples, 9.67%)</title><rect x="11.2610%" y="645" width="9.6669%" height="15" fill="rgb(237,53,32)"/><text x="11.5110%" y="655.50">decor_mem::sel..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (72 samples, 1.47%)</title><rect x="19.4564%" y="629" width="1.4715%" height="15" fill="rgb(233,25,53)"/><text x="19.7064%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (51 samples, 1.04%)</title><rect x="19.8856%" y="613" width="1.0423%" height="15" fill="rgb(210,40,34)"/><text x="20.1356%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (39 samples, 0.80%)</title><rect x="20.1308%" y="597" width="0.7971%" height="15" fill="rgb(241,220,44)"/><text x="20.3808%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.10%)</title><rect x="20.9687%" y="597" width="0.1022%" height="15" fill="rgb(235,28,35)"/><text x="21.2187%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (5 samples, 0.10%)</title><rect x="20.9687%" y="581" width="0.1022%" height="15" fill="rgb(210,56,17)"/><text x="21.2187%" y="591.50"></text></g><g><title>core::fmt::write (8 samples, 0.16%)</title><rect x="20.9483%" y="629" width="0.1635%" height="15" fill="rgb(224,130,29)"/><text x="21.1983%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="20.9483%" y="613" width="0.1635%" height="15" fill="rgb(235,212,8)"/><text x="21.1983%" y="623.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (13 samples, 0.27%)</title><rect x="20.9279%" y="645" width="0.2657%" height="15" fill="rgb(223,33,50)"/><text x="21.1779%" y="655.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.12%)</title><rect x="22.0519%" y="549" width="0.1226%" height="15" fill="rgb(219,149,13)"/><text x="22.3019%" y="559.50"></text></g><g><title>core::str::validations::next_code_point (6 samples, 0.12%)</title><rect x="22.0519%" y="533" width="0.1226%" height="15" fill="rgb(250,156,29)"/><text x="22.3019%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (9 samples, 0.18%)</title><rect x="22.2154%" y="533" width="0.1839%" height="15" fill="rgb(216,193,19)"/><text x="22.4654%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (5 samples, 0.10%)</title><rect x="22.2972%" y="517" width="0.1022%" height="15" fill="rgb(216,135,14)"/><text x="22.5472%" y="527.50"></text></g><g><title>alloc::string::String::push (13 samples, 0.27%)</title><rect x="22.1745%" y="549" width="0.2657%" height="15" fill="rgb(241,47,5)"/><text x="22.4245%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (67 samples, 1.37%)</title><rect x="21.9088%" y="565" width="1.3693%" height="15" fill="rgb(233,42,35)"/><text x="22.1588%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (39 samples, 0.80%)</title><rect x="22.4811%" y="549" width="0.7971%" height="15" fill="rgb(231,13,6)"/><text x="22.7311%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (25 samples, 0.51%)</title><rect x="22.7672%" y="533" width="0.5109%" height="15" fill="rgb(207,181,40)"/><text x="23.0172%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (25 samples, 0.51%)</title><rect x="22.7672%" y="517" width="0.5109%" height="15" fill="rgb(254,173,49)"/><text x="23.0172%" y="527.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (17 samples, 0.35%)</title><rect x="22.9307%" y="501" width="0.3474%" height="15" fill="rgb(221,1,38)"/><text x="23.1807%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (87 samples, 1.78%)</title><rect x="21.6636%" y="597" width="1.7781%" height="15" fill="rgb(206,124,46)"/><text x="21.9136%" y="607.50">&lt;..</text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (87 samples, 1.78%)</title><rect x="21.6636%" y="581" width="1.7781%" height="15" fill="rgb(249,21,11)"/><text x="21.9136%" y="591.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (8 samples, 0.16%)</title><rect x="23.2782%" y="565" width="0.1635%" height="15" fill="rgb(222,201,40)"/><text x="23.5282%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.12%)</title><rect x="23.3190%" y="549" width="0.1226%" height="15" fill="rgb(235,61,29)"/><text x="23.5690%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (115 samples, 2.35%)</title><rect x="21.6023%" y="613" width="2.3503%" height="15" fill="rgb(219,207,3)"/><text x="21.8523%" y="623.50">&lt;..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (24 samples, 0.49%)</title><rect x="23.4621%" y="597" width="0.4905%" height="15" fill="rgb(222,56,46)"/><text x="23.7121%" y="607.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="23.7482%" y="581" width="0.2044%" height="15" fill="rgb(239,76,54)"/><text x="23.9982%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.22%)</title><rect x="23.9526%" y="613" width="0.2248%" height="15" fill="rgb(231,124,27)"/><text x="24.2026%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (7 samples, 0.14%)</title><rect x="24.0343%" y="597" width="0.1431%" height="15" fill="rgb(249,195,6)"/><text x="24.2843%" y="607.50"></text></g><g><title>core::fmt::write (131 samples, 2.68%)</title><rect x="21.5205%" y="629" width="2.6773%" height="15" fill="rgb(237,174,47)"/><text x="21.7705%" y="639.50">co..</text></g><g><title>decor_mem::views::View::get_ris_of_col (156 samples, 3.19%)</title><rect x="21.1935%" y="645" width="3.1882%" height="15" fill="rgb(206,201,31)"/><text x="21.4435%" y="655.50">dec..</text></g><g><title>hashbrown::map::make_hash (9 samples, 0.18%)</title><rect x="24.1978%" y="629" width="0.1839%" height="15" fill="rgb(231,57,52)"/><text x="24.4478%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.43%)</title><rect x="24.5044%" y="597" width="0.4292%" height="15" fill="rgb(248,177,22)"/><text x="24.7544%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.22%)</title><rect x="24.7088%" y="581" width="0.2248%" height="15" fill="rgb(215,211,37)"/><text x="24.9588%" y="591.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (696 samples, 14.22%)</title><rect x="10.7296%" y="661" width="14.2244%" height="15" fill="rgb(241,128,51)"/><text x="10.9796%" y="671.50">decor_mem::select::get..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (28 samples, 0.57%)</title><rect x="24.3818%" y="645" width="0.5722%" height="15" fill="rgb(227,165,31)"/><text x="24.6318%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (28 samples, 0.57%)</title><rect x="24.3818%" y="629" width="0.5722%" height="15" fill="rgb(228,167,24)"/><text x="24.6318%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (27 samples, 0.55%)</title><rect x="24.4022%" y="613" width="0.5518%" height="15" fill="rgb(228,143,12)"/><text x="24.6522%" y="623.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (6 samples, 0.12%)</title><rect x="24.9540%" y="661" width="0.1226%" height="15" fill="rgb(249,149,8)"/><text x="25.2040%" y="671.50"></text></g><g><title>decor_mem::views::TableColumnDef::name (5 samples, 0.10%)</title><rect x="24.9745%" y="645" width="0.1022%" height="15" fill="rgb(243,35,44)"/><text x="25.2245%" y="655.50"></text></g><g><title>alloc::fmt::format (5 samples, 0.10%)</title><rect x="24.9745%" y="629" width="0.1022%" height="15" fill="rgb(246,89,9)"/><text x="25.2245%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.10%)</title><rect x="24.9745%" y="613" width="0.1022%" height="15" fill="rgb(233,213,13)"/><text x="25.2245%" y="623.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="24.9745%" y="597" width="0.1022%" height="15" fill="rgb(233,141,41)"/><text x="25.2245%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (5 samples, 0.10%)</title><rect x="24.9745%" y="581" width="0.1022%" height="15" fill="rgb(239,167,4)"/><text x="25.2245%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (733 samples, 14.98%)</title><rect x="10.1369%" y="725" width="14.9806%" height="15" fill="rgb(209,217,16)"/><text x="10.3869%" y="735.50">decor_mem::query_transf..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (733 samples, 14.98%)</title><rect x="10.1369%" y="709" width="14.9806%" height="15" fill="rgb(219,88,35)"/><text x="10.3869%" y="719.50">decor_mem::query_transf..</text></g><g><title>decor_mem::select::get_query_results (721 samples, 14.74%)</title><rect x="10.3822%" y="693" width="14.7353%" height="15" fill="rgb(220,193,23)"/><text x="10.6322%" y="703.50">decor_mem::select::get..</text></g><g><title>decor_mem::select::get_setexpr_results (721 samples, 14.74%)</title><rect x="10.3822%" y="677" width="14.7353%" height="15" fill="rgb(230,90,52)"/><text x="10.6322%" y="687.50">decor_mem::select::get..</text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.12%)</title><rect x="25.1380%" y="645" width="0.1226%" height="15" fill="rgb(252,106,19)"/><text x="25.3880%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="25.1380%" y="629" width="0.1226%" height="15" fill="rgb(206,74,20)"/><text x="25.3880%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 0.10%)</title><rect x="25.1584%" y="613" width="0.1022%" height="15" fill="rgb(230,138,44)"/><text x="25.4084%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="25.1175%" y="661" width="0.2044%" height="15" fill="rgb(235,182,43)"/><text x="25.3675%" y="671.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.47%)</title><rect x="25.4445%" y="437" width="0.4701%" height="15" fill="rgb(242,16,51)"/><text x="25.6945%" y="447.50"></text></g><g><title>_int_malloc (17 samples, 0.35%)</title><rect x="25.5671%" y="421" width="0.3474%" height="15" fill="rgb(248,9,4)"/><text x="25.8171%" y="431.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (32 samples, 0.65%)</title><rect x="25.3219%" y="629" width="0.6540%" height="15" fill="rgb(210,31,22)"/><text x="25.5719%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 0.57%)</title><rect x="25.4036%" y="613" width="0.5722%" height="15" fill="rgb(239,54,39)"/><text x="25.6536%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (27 samples, 0.55%)</title><rect x="25.4241%" y="597" width="0.5518%" height="15" fill="rgb(230,99,41)"/><text x="25.6741%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.55%)</title><rect x="25.4241%" y="581" width="0.5518%" height="15" fill="rgb(253,106,12)"/><text x="25.6741%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.55%)</title><rect x="25.4241%" y="565" width="0.5518%" height="15" fill="rgb(213,46,41)"/><text x="25.6741%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (27 samples, 0.55%)</title><rect x="25.4241%" y="549" width="0.5518%" height="15" fill="rgb(215,133,35)"/><text x="25.6741%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (27 samples, 0.55%)</title><rect x="25.4241%" y="533" width="0.5518%" height="15" fill="rgb(213,28,5)"/><text x="25.6741%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.55%)</title><rect x="25.4241%" y="517" width="0.5518%" height="15" fill="rgb(215,77,49)"/><text x="25.6741%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.55%)</title><rect x="25.4241%" y="501" width="0.5518%" height="15" fill="rgb(248,100,22)"/><text x="25.6741%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (27 samples, 0.55%)</title><rect x="25.4241%" y="485" width="0.5518%" height="15" fill="rgb(208,67,9)"/><text x="25.6741%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.55%)</title><rect x="25.4241%" y="469" width="0.5518%" height="15" fill="rgb(219,133,21)"/><text x="25.6741%" y="479.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.55%)</title><rect x="25.4241%" y="453" width="0.5518%" height="15" fill="rgb(246,46,29)"/><text x="25.6741%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (45 samples, 0.92%)</title><rect x="25.3219%" y="645" width="0.9197%" height="15" fill="rgb(246,185,52)"/><text x="25.5719%" y="655.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.20%)</title><rect x="26.0372%" y="629" width="0.2044%" height="15" fill="rgb(252,136,11)"/><text x="26.2872%" y="639.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.18%)</title><rect x="26.3438%" y="421" width="0.1839%" height="15" fill="rgb(219,138,53)"/><text x="26.5938%" y="431.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="26.3642%" y="405" width="0.1635%" height="15" fill="rgb(211,51,23)"/><text x="26.6142%" y="415.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (15 samples, 0.31%)</title><rect x="26.2620%" y="613" width="0.3066%" height="15" fill="rgb(247,221,28)"/><text x="26.5120%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.27%)</title><rect x="26.3029%" y="597" width="0.2657%" height="15" fill="rgb(251,222,45)"/><text x="26.5529%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.27%)</title><rect x="26.3029%" y="581" width="0.2657%" height="15" fill="rgb(217,162,53)"/><text x="26.5529%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.25%)</title><rect x="26.3233%" y="565" width="0.2452%" height="15" fill="rgb(229,93,14)"/><text x="26.5733%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.25%)</title><rect x="26.3233%" y="549" width="0.2452%" height="15" fill="rgb(209,67,49)"/><text x="26.5733%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="26.3438%" y="533" width="0.2248%" height="15" fill="rgb(213,87,29)"/><text x="26.5938%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (11 samples, 0.22%)</title><rect x="26.3438%" y="517" width="0.2248%" height="15" fill="rgb(205,151,52)"/><text x="26.5938%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.22%)</title><rect x="26.3438%" y="501" width="0.2248%" height="15" fill="rgb(253,215,39)"/><text x="26.5938%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.22%)</title><rect x="26.3438%" y="485" width="0.2248%" height="15" fill="rgb(221,220,41)"/><text x="26.5938%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (11 samples, 0.22%)</title><rect x="26.3438%" y="469" width="0.2248%" height="15" fill="rgb(218,133,21)"/><text x="26.5938%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.22%)</title><rect x="26.3438%" y="453" width="0.2248%" height="15" fill="rgb(221,193,43)"/><text x="26.5938%" y="463.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.22%)</title><rect x="26.3438%" y="437" width="0.2248%" height="15" fill="rgb(240,128,52)"/><text x="26.5938%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.39%)</title><rect x="26.2416%" y="629" width="0.3883%" height="15" fill="rgb(253,114,12)"/><text x="26.4916%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="26.6503%" y="597" width="0.1635%" height="15" fill="rgb(215,223,47)"/><text x="26.9003%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="26.6708%" y="581" width="0.1431%" height="15" fill="rgb(248,225,23)"/><text x="26.9208%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="26.6708%" y="565" width="0.1431%" height="15" fill="rgb(250,108,0)"/><text x="26.9208%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (7 samples, 0.14%)</title><rect x="26.6708%" y="549" width="0.1431%" height="15" fill="rgb(228,208,7)"/><text x="26.9208%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.14%)</title><rect x="26.6708%" y="533" width="0.1431%" height="15" fill="rgb(244,45,10)"/><text x="26.9208%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="26.6912%" y="517" width="0.1226%" height="15" fill="rgb(207,125,25)"/><text x="26.9412%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="26.6912%" y="501" width="0.1226%" height="15" fill="rgb(210,195,18)"/><text x="26.9412%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="26.6912%" y="485" width="0.1226%" height="15" fill="rgb(249,80,12)"/><text x="26.9412%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="26.6912%" y="469" width="0.1226%" height="15" fill="rgb(221,65,9)"/><text x="26.9412%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.12%)</title><rect x="26.6912%" y="453" width="0.1226%" height="15" fill="rgb(235,49,36)"/><text x="26.9412%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.12%)</title><rect x="26.6912%" y="437" width="0.1226%" height="15" fill="rgb(225,32,20)"/><text x="26.9412%" y="447.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.12%)</title><rect x="26.6912%" y="421" width="0.1226%" height="15" fill="rgb(215,141,46)"/><text x="26.9412%" y="431.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.12%)</title><rect x="26.6912%" y="405" width="0.1226%" height="15" fill="rgb(250,160,47)"/><text x="26.9412%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="26.6503%" y="613" width="0.1839%" height="15" fill="rgb(216,222,40)"/><text x="26.9003%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (13 samples, 0.27%)</title><rect x="26.6299%" y="629" width="0.2657%" height="15" fill="rgb(234,217,39)"/><text x="26.8799%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (35 samples, 0.72%)</title><rect x="26.2416%" y="645" width="0.7153%" height="15" fill="rgb(207,178,40)"/><text x="26.4916%" y="655.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (91 samples, 1.86%)</title><rect x="25.1175%" y="725" width="1.8598%" height="15" fill="rgb(221,136,13)"/><text x="25.3675%" y="735.50">d..</text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (91 samples, 1.86%)</title><rect x="25.1175%" y="709" width="1.8598%" height="15" fill="rgb(249,199,10)"/><text x="25.3675%" y="719.50">&lt;..</text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (91 samples, 1.86%)</title><rect x="25.1175%" y="693" width="1.8598%" height="15" fill="rgb(249,222,13)"/><text x="25.3675%" y="703.50">&lt;..</text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (91 samples, 1.86%)</title><rect x="25.1175%" y="677" width="1.8598%" height="15" fill="rgb(244,185,38)"/><text x="25.3675%" y="687.50">&lt;..</text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (81 samples, 1.66%)</title><rect x="25.3219%" y="661" width="1.6554%" height="15" fill="rgb(236,202,9)"/><text x="25.5719%" y="671.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (825 samples, 16.86%)</title><rect x="10.1369%" y="741" width="16.8608%" height="15" fill="rgb(250,229,37)"/><text x="10.3869%" y="751.50">&lt;decor_mem::Shim as msql_s..</text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="27.1204%" y="741" width="0.2044%" height="15" fill="rgb(206,174,23)"/><text x="27.3704%" y="751.50"></text></g><g><title>__GI___libc_free (13 samples, 0.27%)</title><rect x="27.4065%" y="741" width="0.2657%" height="15" fill="rgb(211,33,43)"/><text x="27.6565%" y="751.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.16%)</title><rect x="27.6722%" y="741" width="0.1635%" height="15" fill="rgb(245,58,50)"/><text x="27.9222%" y="751.50"></text></g><g><title>__libc_start_main (7 samples, 0.14%)</title><rect x="27.9174%" y="741" width="0.1431%" height="15" fill="rgb(244,68,36)"/><text x="28.1674%" y="751.50"></text></g><g><title>main (7 samples, 0.14%)</title><rect x="27.9174%" y="725" width="0.1431%" height="15" fill="rgb(232,229,15)"/><text x="28.1674%" y="735.50"></text></g><g><title>std::rt::lang_start_internal (7 samples, 0.14%)</title><rect x="27.9174%" y="709" width="0.1431%" height="15" fill="rgb(254,30,23)"/><text x="28.1674%" y="719.50"></text></g><g><title>std::panic::catch_unwind (7 samples, 0.14%)</title><rect x="27.9174%" y="693" width="0.1431%" height="15" fill="rgb(235,160,14)"/><text x="28.1674%" y="703.50"></text></g><g><title>std::panicking::try (7 samples, 0.14%)</title><rect x="27.9174%" y="677" width="0.1431%" height="15" fill="rgb(212,155,44)"/><text x="28.1674%" y="687.50"></text></g><g><title>std::panicking::try::do_call (7 samples, 0.14%)</title><rect x="27.9174%" y="661" width="0.1431%" height="15" fill="rgb(226,2,50)"/><text x="28.1674%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7 samples, 0.14%)</title><rect x="27.9174%" y="645" width="0.1431%" height="15" fill="rgb(234,177,6)"/><text x="28.1674%" y="655.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (7 samples, 0.14%)</title><rect x="27.9174%" y="629" width="0.1431%" height="15" fill="rgb(217,24,9)"/><text x="28.1674%" y="639.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.14%)</title><rect x="27.9174%" y="613" width="0.1431%" height="15" fill="rgb(220,13,46)"/><text x="28.1674%" y="623.50"></text></g><g><title>lobsters_microbenchmarks::main (7 samples, 0.14%)</title><rect x="27.9174%" y="597" width="0.1431%" height="15" fill="rgb(239,221,27)"/><text x="28.1674%" y="607.50"></text></g><g><title>_int_free (26 samples, 0.53%)</title><rect x="28.2036%" y="741" width="0.5314%" height="15" fill="rgb(222,198,25)"/><text x="28.4536%" y="751.50"></text></g><g><title>_int_malloc (11 samples, 0.22%)</title><rect x="28.7349%" y="741" width="0.2248%" height="15" fill="rgb(211,99,13)"/><text x="28.9849%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.14%)</title><rect x="29.1232%" y="741" width="0.1431%" height="15" fill="rgb(232,111,31)"/><text x="29.3732%" y="751.50"></text></g><g><title>alloc::string::String::push (9 samples, 0.18%)</title><rect x="29.3480%" y="741" width="0.1839%" height="15" fill="rgb(245,82,37)"/><text x="29.5980%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.27%)</title><rect x="29.7772%" y="741" width="0.2657%" height="15" fill="rgb(227,149,46)"/><text x="30.0272%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.33%)</title><rect x="30.1451%" y="677" width="0.3270%" height="15" fill="rgb(218,36,50)"/><text x="30.3951%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.33%)</title><rect x="30.1451%" y="661" width="0.3270%" height="15" fill="rgb(226,80,48)"/><text x="30.3951%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.33%)</title><rect x="30.1451%" y="645" width="0.3270%" height="15" fill="rgb(238,224,15)"/><text x="30.3951%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.27%)</title><rect x="30.2064%" y="629" width="0.2657%" height="15" fill="rgb(241,136,10)"/><text x="30.4564%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (9 samples, 0.18%)</title><rect x="30.2882%" y="613" width="0.1839%" height="15" fill="rgb(208,32,45)"/><text x="30.5382%" y="623.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (26 samples, 0.53%)</title><rect x="30.0429%" y="693" width="0.5314%" height="15" fill="rgb(207,135,9)"/><text x="30.2929%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="30.4721%" y="677" width="0.1022%" height="15" fill="rgb(206,86,44)"/><text x="30.7221%" y="687.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="30.4721%" y="661" width="0.1022%" height="15" fill="rgb(245,177,15)"/><text x="30.7221%" y="671.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="30.6969%" y="661" width="0.1839%" height="15" fill="rgb(206,64,50)"/><text x="30.9469%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.10%)</title><rect x="30.8809%" y="661" width="0.1022%" height="15" fill="rgb(234,36,40)"/><text x="31.1309%" y="671.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="30.8809%" y="645" width="0.1022%" height="15" fill="rgb(213,64,8)"/><text x="31.1309%" y="655.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="30.8809%" y="629" width="0.1022%" height="15" fill="rgb(210,75,36)"/><text x="31.1309%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="30.9830%" y="661" width="0.1431%" height="15" fill="rgb(229,88,21)"/><text x="31.2330%" y="671.50"></text></g><g><title>__GI___libc_realloc (28 samples, 0.57%)</title><rect x="31.4122%" y="629" width="0.5722%" height="15" fill="rgb(252,204,47)"/><text x="31.6622%" y="639.50"></text></g><g><title>_int_realloc (28 samples, 0.57%)</title><rect x="31.4122%" y="613" width="0.5722%" height="15" fill="rgb(208,77,27)"/><text x="31.6622%" y="623.50"></text></g><g><title>_int_malloc (22 samples, 0.45%)</title><rect x="31.5348%" y="597" width="0.4496%" height="15" fill="rgb(221,76,26)"/><text x="31.7848%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.63%)</title><rect x="31.4122%" y="645" width="0.6336%" height="15" fill="rgb(225,139,18)"/><text x="31.6622%" y="655.50"></text></g><g><title>sql_parser::tokenizer::PeekableChars::next (6 samples, 0.12%)</title><rect x="32.5567%" y="629" width="0.1226%" height="15" fill="rgb(230,137,11)"/><text x="32.8067%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (36 samples, 0.74%)</title><rect x="32.0458%" y="645" width="0.7357%" height="15" fill="rgb(212,28,1)"/><text x="32.2958%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (5 samples, 0.10%)</title><rect x="32.6793%" y="629" width="0.1022%" height="15" fill="rgb(248,164,17)"/><text x="32.9293%" y="639.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.14%)</title><rect x="33.1698%" y="613" width="0.1431%" height="15" fill="rgb(222,171,42)"/><text x="33.4198%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.22%)</title><rect x="33.1085%" y="629" width="0.2248%" height="15" fill="rgb(243,84,45)"/><text x="33.3585%" y="639.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (164 samples, 3.35%)</title><rect x="30.0429%" y="741" width="3.3517%" height="15" fill="rgb(252,49,23)"/><text x="30.2929%" y="751.50">dec..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (164 samples, 3.35%)</title><rect x="30.0429%" y="725" width="3.3517%" height="15" fill="rgb(215,19,7)"/><text x="30.2929%" y="735.50">msq..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (164 samples, 3.35%)</title><rect x="30.0429%" y="709" width="3.3517%" height="15" fill="rgb(238,81,41)"/><text x="30.2929%" y="719.50">&lt;de..</text></g><g><title>decor_mem::stats::get_qtype (138 samples, 2.82%)</title><rect x="30.5743%" y="693" width="2.8204%" height="15" fill="rgb(210,199,37)"/><text x="30.8243%" y="703.50">de..</text></g><g><title>sql_parser::parser::parse_statements (138 samples, 2.82%)</title><rect x="30.5743%" y="677" width="2.8204%" height="15" fill="rgb(244,192,49)"/><text x="30.8243%" y="687.50">sq..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (111 samples, 2.27%)</title><rect x="31.1261%" y="661" width="2.2685%" height="15" fill="rgb(226,211,11)"/><text x="31.3761%" y="671.50">s..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (30 samples, 0.61%)</title><rect x="32.7815%" y="645" width="0.6131%" height="15" fill="rgb(236,162,54)"/><text x="33.0315%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.18%)</title><rect x="33.7625%" y="709" width="0.1839%" height="15" fill="rgb(220,229,9)"/><text x="34.0125%" y="719.50"></text></g><g><title>psi_task_change (5 samples, 0.10%)</title><rect x="34.4370%" y="357" width="0.1022%" height="15" fill="rgb(250,87,22)"/><text x="34.6870%" y="367.50"></text></g><g><title>sk_wait_data (25 samples, 0.51%)</title><rect x="34.1508%" y="437" width="0.5109%" height="15" fill="rgb(239,43,17)"/><text x="34.4008%" y="447.50"></text></g><g><title>wait_woken (25 samples, 0.51%)</title><rect x="34.1508%" y="421" width="0.5109%" height="15" fill="rgb(231,177,25)"/><text x="34.4008%" y="431.50"></text></g><g><title>schedule_timeout (25 samples, 0.51%)</title><rect x="34.1508%" y="405" width="0.5109%" height="15" fill="rgb(219,179,1)"/><text x="34.4008%" y="415.50"></text></g><g><title>schedule (25 samples, 0.51%)</title><rect x="34.1508%" y="389" width="0.5109%" height="15" fill="rgb(238,219,53)"/><text x="34.4008%" y="399.50"></text></g><g><title>__schedule (25 samples, 0.51%)</title><rect x="34.1508%" y="373" width="0.5109%" height="15" fill="rgb(232,167,36)"/><text x="34.4008%" y="383.50"></text></g><g><title>do_syscall_64 (34 samples, 0.69%)</title><rect x="34.0895%" y="517" width="0.6949%" height="15" fill="rgb(244,19,51)"/><text x="34.3395%" y="527.50"></text></g><g><title>__x64_sys_recvfrom (33 samples, 0.67%)</title><rect x="34.1100%" y="501" width="0.6744%" height="15" fill="rgb(224,6,22)"/><text x="34.3600%" y="511.50"></text></g><g><title>__sys_recvfrom (33 samples, 0.67%)</title><rect x="34.1100%" y="485" width="0.6744%" height="15" fill="rgb(224,145,5)"/><text x="34.3600%" y="495.50"></text></g><g><title>inet_recvmsg (33 samples, 0.67%)</title><rect x="34.1100%" y="469" width="0.6744%" height="15" fill="rgb(234,130,49)"/><text x="34.3600%" y="479.50"></text></g><g><title>tcp_recvmsg (33 samples, 0.67%)</title><rect x="34.1100%" y="453" width="0.6744%" height="15" fill="rgb(254,6,2)"/><text x="34.3600%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (40 samples, 0.82%)</title><rect x="34.0691%" y="533" width="0.8175%" height="15" fill="rgb(208,96,46)"/><text x="34.3191%" y="543.50"></text></g><g><title>prepare_exit_to_usermode (5 samples, 0.10%)</title><rect x="34.7844%" y="517" width="0.1022%" height="15" fill="rgb(239,3,39)"/><text x="35.0344%" y="527.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (42 samples, 0.86%)</title><rect x="34.0486%" y="629" width="0.8584%" height="15" fill="rgb(233,210,1)"/><text x="34.2986%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (42 samples, 0.86%)</title><rect x="34.0486%" y="613" width="0.8584%" height="15" fill="rgb(244,137,37)"/><text x="34.2986%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (42 samples, 0.86%)</title><rect x="34.0486%" y="597" width="0.8584%" height="15" fill="rgb(240,136,2)"/><text x="34.2986%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (42 samples, 0.86%)</title><rect x="34.0486%" y="581" width="0.8584%" height="15" fill="rgb(239,18,37)"/><text x="34.2986%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (42 samples, 0.86%)</title><rect x="34.0486%" y="565" width="0.8584%" height="15" fill="rgb(218,185,22)"/><text x="34.2986%" y="575.50"></text></g><g><title>__libc_recv (42 samples, 0.86%)</title><rect x="34.0486%" y="549" width="0.8584%" height="15" fill="rgb(225,218,4)"/><text x="34.2986%" y="559.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.92%)</title><rect x="34.0486%" y="645" width="0.9197%" height="15" fill="rgb(230,182,32)"/><text x="34.2986%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (51 samples, 1.04%)</title><rect x="33.9873%" y="661" width="1.0423%" height="15" fill="rgb(242,56,43)"/><text x="34.2373%" y="671.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (56 samples, 1.14%)</title><rect x="33.9669%" y="677" width="1.1445%" height="15" fill="rgb(233,99,24)"/><text x="34.2169%" y="687.50"></text></g><g><title>__dev_queue_xmit (5 samples, 0.10%)</title><rect x="35.4997%" y="389" width="0.1022%" height="15" fill="rgb(234,209,42)"/><text x="35.7497%" y="399.50"></text></g><g><title>sock_def_readable (8 samples, 0.16%)</title><rect x="35.6836%" y="165" width="0.1635%" height="15" fill="rgb(227,7,12)"/><text x="35.9336%" y="175.50"></text></g><g><title>__wake_up_common_lock (7 samples, 0.14%)</title><rect x="35.7041%" y="149" width="0.1431%" height="15" fill="rgb(245,203,43)"/><text x="35.9541%" y="159.50"></text></g><g><title>__wake_up_common (7 samples, 0.14%)</title><rect x="35.7041%" y="133" width="0.1431%" height="15" fill="rgb(238,205,33)"/><text x="35.9541%" y="143.50"></text></g><g><title>try_to_wake_up (7 samples, 0.14%)</title><rect x="35.7041%" y="117" width="0.1431%" height="15" fill="rgb(231,56,7)"/><text x="35.9541%" y="127.50"></text></g><g><title>tcp_ack (10 samples, 0.20%)</title><rect x="35.8471%" y="165" width="0.2044%" height="15" fill="rgb(244,186,29)"/><text x="36.0971%" y="175.50"></text></g><g><title>ip_local_deliver (23 samples, 0.47%)</title><rect x="35.6019%" y="261" width="0.4701%" height="15" fill="rgb(234,111,31)"/><text x="35.8519%" y="271.50"></text></g><g><title>ip_local_deliver_finish (23 samples, 0.47%)</title><rect x="35.6019%" y="245" width="0.4701%" height="15" fill="rgb(241,149,10)"/><text x="35.8519%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (23 samples, 0.47%)</title><rect x="35.6019%" y="229" width="0.4701%" height="15" fill="rgb(249,206,44)"/><text x="35.8519%" y="239.50"></text></g><g><title>tcp_v4_rcv (21 samples, 0.43%)</title><rect x="35.6428%" y="213" width="0.4292%" height="15" fill="rgb(251,153,30)"/><text x="35.8928%" y="223.50"></text></g><g><title>tcp_v4_do_rcv (21 samples, 0.43%)</title><rect x="35.6428%" y="197" width="0.4292%" height="15" fill="rgb(239,152,38)"/><text x="35.8928%" y="207.50"></text></g><g><title>tcp_rcv_established (21 samples, 0.43%)</title><rect x="35.6428%" y="181" width="0.4292%" height="15" fill="rgb(249,139,47)"/><text x="35.8928%" y="191.50"></text></g><g><title>do_softirq (24 samples, 0.49%)</title><rect x="35.6019%" y="373" width="0.4905%" height="15" fill="rgb(244,64,35)"/><text x="35.8519%" y="383.50"></text></g><g><title>do_softirq_own_stack (24 samples, 0.49%)</title><rect x="35.6019%" y="357" width="0.4905%" height="15" fill="rgb(216,46,15)"/><text x="35.8519%" y="367.50"></text></g><g><title>__do_softirq (24 samples, 0.49%)</title><rect x="35.6019%" y="341" width="0.4905%" height="15" fill="rgb(250,74,19)"/><text x="35.8519%" y="351.50"></text></g><g><title>net_rx_action (24 samples, 0.49%)</title><rect x="35.6019%" y="325" width="0.4905%" height="15" fill="rgb(249,42,33)"/><text x="35.8519%" y="335.50"></text></g><g><title>process_backlog (24 samples, 0.49%)</title><rect x="35.6019%" y="309" width="0.4905%" height="15" fill="rgb(242,149,17)"/><text x="35.8519%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (24 samples, 0.49%)</title><rect x="35.6019%" y="293" width="0.4905%" height="15" fill="rgb(244,29,21)"/><text x="35.8519%" y="303.50"></text></g><g><title>ip_rcv (24 samples, 0.49%)</title><rect x="35.6019%" y="277" width="0.4905%" height="15" fill="rgb(220,130,37)"/><text x="35.8519%" y="287.50"></text></g><g><title>ip_finish_output2 (34 samples, 0.69%)</title><rect x="35.4179%" y="405" width="0.6949%" height="15" fill="rgb(211,67,2)"/><text x="35.6679%" y="415.50"></text></g><g><title>__local_bh_enable_ip (25 samples, 0.51%)</title><rect x="35.6019%" y="389" width="0.5109%" height="15" fill="rgb(235,68,52)"/><text x="35.8519%" y="399.50"></text></g><g><title>__ip_queue_xmit (40 samples, 0.82%)</title><rect x="35.3158%" y="437" width="0.8175%" height="15" fill="rgb(246,142,3)"/><text x="35.5658%" y="447.50"></text></g><g><title>ip_output (36 samples, 0.74%)</title><rect x="35.3975%" y="421" width="0.7357%" height="15" fill="rgb(241,25,7)"/><text x="35.6475%" y="431.50"></text></g><g><title>__tcp_push_pending_frames (43 samples, 0.88%)</title><rect x="35.2749%" y="485" width="0.8788%" height="15" fill="rgb(242,119,39)"/><text x="35.5249%" y="495.50"></text></g><g><title>tcp_write_xmit (43 samples, 0.88%)</title><rect x="35.2749%" y="469" width="0.8788%" height="15" fill="rgb(241,98,45)"/><text x="35.5249%" y="479.50"></text></g><g><title>__tcp_transmit_skb (43 samples, 0.88%)</title><rect x="35.2749%" y="453" width="0.8788%" height="15" fill="rgb(254,28,30)"/><text x="35.5249%" y="463.50"></text></g><g><title>sock_sendmsg (57 samples, 1.16%)</title><rect x="35.1931%" y="533" width="1.1649%" height="15" fill="rgb(241,142,54)"/><text x="35.4431%" y="543.50"></text></g><g><title>tcp_sendmsg (57 samples, 1.16%)</title><rect x="35.1931%" y="517" width="1.1649%" height="15" fill="rgb(222,85,15)"/><text x="35.4431%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (55 samples, 1.12%)</title><rect x="35.2340%" y="501" width="1.1241%" height="15" fill="rgb(210,85,47)"/><text x="35.4840%" y="511.50"></text></g><g><title>__x64_sys_sendto (59 samples, 1.21%)</title><rect x="35.1727%" y="565" width="1.2058%" height="15" fill="rgb(224,206,25)"/><text x="35.4227%" y="575.50"></text></g><g><title>__sys_sendto (59 samples, 1.21%)</title><rect x="35.1727%" y="549" width="1.2058%" height="15" fill="rgb(243,201,19)"/><text x="35.4227%" y="559.50"></text></g><g><title>do_syscall_64 (61 samples, 1.25%)</title><rect x="35.1523%" y="581" width="1.2467%" height="15" fill="rgb(236,59,4)"/><text x="35.4023%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (64 samples, 1.31%)</title><rect x="35.1318%" y="597" width="1.3080%" height="15" fill="rgb(254,179,45)"/><text x="35.3818%" y="607.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (123 samples, 2.51%)</title><rect x="33.9465%" y="709" width="2.5138%" height="15" fill="rgb(226,14,10)"/><text x="34.1965%" y="719.50">&lt;m..</text></g><g><title>mysql::conn::Conn::_query (123 samples, 2.51%)</title><rect x="33.9465%" y="693" width="2.5138%" height="15" fill="rgb(244,27,41)"/><text x="34.1965%" y="703.50">my..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (66 samples, 1.35%)</title><rect x="35.1114%" y="677" width="1.3489%" height="15" fill="rgb(235,35,32)"/><text x="35.3614%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (66 samples, 1.35%)</title><rect x="35.1114%" y="661" width="1.3489%" height="15" fill="rgb(218,68,31)"/><text x="35.3614%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (66 samples, 1.35%)</title><rect x="35.1114%" y="645" width="1.3489%" height="15" fill="rgb(207,120,37)"/><text x="35.3614%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (66 samples, 1.35%)</title><rect x="35.1114%" y="629" width="1.3489%" height="15" fill="rgb(227,98,0)"/><text x="35.3614%" y="639.50"></text></g><g><title>__libc_send (66 samples, 1.35%)</title><rect x="35.1114%" y="613" width="1.3489%" height="15" fill="rgb(207,7,3)"/><text x="35.3614%" y="623.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (16 samples, 0.33%)</title><rect x="36.5011%" y="677" width="0.3270%" height="15" fill="rgb(206,98,19)"/><text x="36.7511%" y="687.50"></text></g><g><title>mysql::conn::Conn::next_text (16 samples, 0.33%)</title><rect x="36.5011%" y="661" width="0.3270%" height="15" fill="rgb(217,5,26)"/><text x="36.7511%" y="671.50"></text></g><g><title>mysql_common::value::read_text_values (8 samples, 0.16%)</title><rect x="36.6646%" y="645" width="0.1635%" height="15" fill="rgb(235,190,38)"/><text x="36.9146%" y="655.50"></text></g><g><title>mysql_common::value::read_text_value (5 samples, 0.10%)</title><rect x="36.7259%" y="629" width="0.1022%" height="15" fill="rgb(247,86,24)"/><text x="36.9759%" y="639.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.39%)</title><rect x="36.4602%" y="709" width="0.3883%" height="15" fill="rgb(205,101,16)"/><text x="36.7102%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.39%)</title><rect x="36.4602%" y="693" width="0.3883%" height="15" fill="rgb(246,168,33)"/><text x="36.7102%" y="703.50"></text></g><g><title>&lt;(T1,T2) as mysql_common::row::convert::FromRow&gt;::from_row_opt (8 samples, 0.16%)</title><rect x="36.9099%" y="677" width="0.1635%" height="15" fill="rgb(231,114,1)"/><text x="37.1599%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (5 samples, 0.10%)</title><rect x="37.0938%" y="629" width="0.1022%" height="15" fill="rgb(207,184,53)"/><text x="37.3438%" y="639.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (8 samples, 0.16%)</title><rect x="37.0938%" y="661" width="0.1635%" height="15" fill="rgb(224,95,51)"/><text x="37.3438%" y="671.50"></text></g><g><title>mysql::conn::Conn::next_text (8 samples, 0.16%)</title><rect x="37.0938%" y="645" width="0.1635%" height="15" fill="rgb(212,188,45)"/><text x="37.3438%" y="655.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.20%)</title><rect x="37.0734%" y="677" width="0.2044%" height="15" fill="rgb(223,154,38)"/><text x="37.3234%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 0.43%)</title><rect x="36.8894%" y="693" width="0.4292%" height="15" fill="rgb(251,22,52)"/><text x="37.1394%" y="703.50"></text></g><g><title>__x64_sys_recvfrom (7 samples, 0.14%)</title><rect x="37.3595%" y="501" width="0.1431%" height="15" fill="rgb(229,209,22)"/><text x="37.6095%" y="511.50"></text></g><g><title>__sys_recvfrom (7 samples, 0.14%)</title><rect x="37.3595%" y="485" width="0.1431%" height="15" fill="rgb(234,138,34)"/><text x="37.6095%" y="495.50"></text></g><g><title>inet_recvmsg (6 samples, 0.12%)</title><rect x="37.3799%" y="469" width="0.1226%" height="15" fill="rgb(212,95,11)"/><text x="37.6299%" y="479.50"></text></g><g><title>tcp_recvmsg (6 samples, 0.12%)</title><rect x="37.3799%" y="453" width="0.1226%" height="15" fill="rgb(240,179,47)"/><text x="37.6299%" y="463.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (10 samples, 0.20%)</title><rect x="37.3186%" y="677" width="0.2044%" height="15" fill="rgb(240,163,11)"/><text x="37.5686%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (10 samples, 0.20%)</title><rect x="37.3186%" y="661" width="0.2044%" height="15" fill="rgb(236,37,12)"/><text x="37.5686%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.16%)</title><rect x="37.3595%" y="645" width="0.1635%" height="15" fill="rgb(232,164,16)"/><text x="37.6095%" y="655.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.16%)</title><rect x="37.3595%" y="629" width="0.1635%" height="15" fill="rgb(244,205,15)"/><text x="37.6095%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (8 samples, 0.16%)</title><rect x="37.3595%" y="613" width="0.1635%" height="15" fill="rgb(223,117,47)"/><text x="37.6095%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::read (8 samples, 0.16%)</title><rect x="37.3595%" y="597" width="0.1635%" height="15" fill="rgb(244,107,35)"/><text x="37.6095%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::read (8 samples, 0.16%)</title><rect x="37.3595%" y="581" width="0.1635%" height="15" fill="rgb(205,140,8)"/><text x="37.6095%" y="591.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (8 samples, 0.16%)</title><rect x="37.3595%" y="565" width="0.1635%" height="15" fill="rgb(228,84,46)"/><text x="37.6095%" y="575.50"></text></g><g><title>__libc_recv (8 samples, 0.16%)</title><rect x="37.3595%" y="549" width="0.1635%" height="15" fill="rgb(254,188,9)"/><text x="37.6095%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (8 samples, 0.16%)</title><rect x="37.3595%" y="533" width="0.1635%" height="15" fill="rgb(206,112,54)"/><text x="37.6095%" y="543.50"></text></g><g><title>do_syscall_64 (8 samples, 0.16%)</title><rect x="37.3595%" y="517" width="0.1635%" height="15" fill="rgb(216,84,49)"/><text x="37.6095%" y="527.50"></text></g><g><title>sock_def_readable (5 samples, 0.10%)</title><rect x="37.6252%" y="165" width="0.1022%" height="15" fill="rgb(214,194,35)"/><text x="37.8752%" y="175.50"></text></g><g><title>__wake_up_common_lock (5 samples, 0.10%)</title><rect x="37.6252%" y="149" width="0.1022%" height="15" fill="rgb(249,28,3)"/><text x="37.8752%" y="159.50"></text></g><g><title>__wake_up_common (5 samples, 0.10%)</title><rect x="37.6252%" y="133" width="0.1022%" height="15" fill="rgb(222,56,52)"/><text x="37.8752%" y="143.50"></text></g><g><title>try_to_wake_up (5 samples, 0.10%)</title><rect x="37.6252%" y="117" width="0.1022%" height="15" fill="rgb(245,217,50)"/><text x="37.8752%" y="127.50"></text></g><g><title>__netif_receive_skb_one_core (8 samples, 0.16%)</title><rect x="37.6252%" y="293" width="0.1635%" height="15" fill="rgb(213,201,24)"/><text x="37.8752%" y="303.50"></text></g><g><title>ip_rcv (8 samples, 0.16%)</title><rect x="37.6252%" y="277" width="0.1635%" height="15" fill="rgb(248,116,28)"/><text x="37.8752%" y="287.50"></text></g><g><title>ip_local_deliver (8 samples, 0.16%)</title><rect x="37.6252%" y="261" width="0.1635%" height="15" fill="rgb(219,72,43)"/><text x="37.8752%" y="271.50"></text></g><g><title>ip_local_deliver_finish (8 samples, 0.16%)</title><rect x="37.6252%" y="245" width="0.1635%" height="15" fill="rgb(209,138,14)"/><text x="37.8752%" y="255.50"></text></g><g><title>ip_protocol_deliver_rcu (8 samples, 0.16%)</title><rect x="37.6252%" y="229" width="0.1635%" height="15" fill="rgb(222,18,33)"/><text x="37.8752%" y="239.50"></text></g><g><title>tcp_v4_rcv (8 samples, 0.16%)</title><rect x="37.6252%" y="213" width="0.1635%" height="15" fill="rgb(213,199,7)"/><text x="37.8752%" y="223.50"></text></g><g><title>tcp_v4_do_rcv (8 samples, 0.16%)</title><rect x="37.6252%" y="197" width="0.1635%" height="15" fill="rgb(250,110,10)"/><text x="37.8752%" y="207.50"></text></g><g><title>tcp_rcv_established (8 samples, 0.16%)</title><rect x="37.6252%" y="181" width="0.1635%" height="15" fill="rgb(248,123,6)"/><text x="37.8752%" y="191.50"></text></g><g><title>__ip_queue_xmit (12 samples, 0.25%)</title><rect x="37.5639%" y="437" width="0.2452%" height="15" fill="rgb(206,91,31)"/><text x="37.8139%" y="447.50"></text></g><g><title>ip_output (12 samples, 0.25%)</title><rect x="37.5639%" y="421" width="0.2452%" height="15" fill="rgb(211,154,13)"/><text x="37.8139%" y="431.50"></text></g><g><title>ip_finish_output2 (12 samples, 0.25%)</title><rect x="37.5639%" y="405" width="0.2452%" height="15" fill="rgb(225,148,7)"/><text x="37.8139%" y="415.50"></text></g><g><title>__local_bh_enable_ip (10 samples, 0.20%)</title><rect x="37.6047%" y="389" width="0.2044%" height="15" fill="rgb(220,160,43)"/><text x="37.8547%" y="399.50"></text></g><g><title>do_softirq (9 samples, 0.18%)</title><rect x="37.6252%" y="373" width="0.1839%" height="15" fill="rgb(213,52,39)"/><text x="37.8752%" y="383.50"></text></g><g><title>do_softirq_own_stack (9 samples, 0.18%)</title><rect x="37.6252%" y="357" width="0.1839%" height="15" fill="rgb(243,137,7)"/><text x="37.8752%" y="367.50"></text></g><g><title>__do_softirq (9 samples, 0.18%)</title><rect x="37.6252%" y="341" width="0.1839%" height="15" fill="rgb(230,79,13)"/><text x="37.8752%" y="351.50"></text></g><g><title>net_rx_action (9 samples, 0.18%)</title><rect x="37.6252%" y="325" width="0.1839%" height="15" fill="rgb(247,105,23)"/><text x="37.8752%" y="335.50"></text></g><g><title>process_backlog (9 samples, 0.18%)</title><rect x="37.6252%" y="309" width="0.1839%" height="15" fill="rgb(223,179,41)"/><text x="37.8752%" y="319.50"></text></g><g><title>__tcp_push_pending_frames (13 samples, 0.27%)</title><rect x="37.5639%" y="485" width="0.2657%" height="15" fill="rgb(218,9,34)"/><text x="37.8139%" y="495.50"></text></g><g><title>tcp_write_xmit (13 samples, 0.27%)</title><rect x="37.5639%" y="469" width="0.2657%" height="15" fill="rgb(222,106,8)"/><text x="37.8139%" y="479.50"></text></g><g><title>__tcp_transmit_skb (13 samples, 0.27%)</title><rect x="37.5639%" y="453" width="0.2657%" height="15" fill="rgb(211,220,0)"/><text x="37.8139%" y="463.50"></text></g><g><title>do_syscall_64 (16 samples, 0.33%)</title><rect x="37.5434%" y="581" width="0.3270%" height="15" fill="rgb(229,52,16)"/><text x="37.7934%" y="591.50"></text></g><g><title>__x64_sys_sendto (16 samples, 0.33%)</title><rect x="37.5434%" y="565" width="0.3270%" height="15" fill="rgb(212,155,18)"/><text x="37.7934%" y="575.50"></text></g><g><title>__sys_sendto (15 samples, 0.31%)</title><rect x="37.5639%" y="549" width="0.3066%" height="15" fill="rgb(242,21,14)"/><text x="37.8139%" y="559.50"></text></g><g><title>sock_sendmsg (15 samples, 0.31%)</title><rect x="37.5639%" y="533" width="0.3066%" height="15" fill="rgb(222,19,48)"/><text x="37.8139%" y="543.50"></text></g><g><title>tcp_sendmsg (15 samples, 0.31%)</title><rect x="37.5639%" y="517" width="0.3066%" height="15" fill="rgb(232,45,27)"/><text x="37.8139%" y="527.50"></text></g><g><title>tcp_sendmsg_locked (15 samples, 0.31%)</title><rect x="37.5639%" y="501" width="0.3066%" height="15" fill="rgb(249,103,42)"/><text x="37.8139%" y="511.50"></text></g><g><title>lobsters_microbenchmarks::main (205 samples, 4.19%)</title><rect x="33.7012%" y="741" width="4.1897%" height="15" fill="rgb(246,81,33)"/><text x="33.9512%" y="751.50">lobst..</text></g><g><title>lobsters_microbenchmarks::queriers::frontpage::query_frontpage (202 samples, 4.13%)</title><rect x="33.7625%" y="725" width="4.1283%" height="15" fill="rgb(252,33,42)"/><text x="34.0125%" y="735.50">lobs..</text></g><g><title>mysql::conn::queryable::Queryable::query_map (49 samples, 1.00%)</title><rect x="36.8894%" y="709" width="1.0014%" height="15" fill="rgb(209,212,41)"/><text x="37.1394%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (28 samples, 0.57%)</title><rect x="37.3186%" y="693" width="0.5722%" height="15" fill="rgb(207,154,6)"/><text x="37.5686%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (18 samples, 0.37%)</title><rect x="37.5230%" y="677" width="0.3679%" height="15" fill="rgb(223,64,47)"/><text x="37.7730%" y="687.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (17 samples, 0.35%)</title><rect x="37.5434%" y="661" width="0.3474%" height="15" fill="rgb(211,161,38)"/><text x="37.7934%" y="671.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (17 samples, 0.35%)</title><rect x="37.5434%" y="645" width="0.3474%" height="15" fill="rgb(219,138,40)"/><text x="37.7934%" y="655.50"></text></g><g><title>std::sys_common::net::TcpStream::write (17 samples, 0.35%)</title><rect x="37.5434%" y="629" width="0.3474%" height="15" fill="rgb(241,228,46)"/><text x="37.7934%" y="639.50"></text></g><g><title>__libc_send (17 samples, 0.35%)</title><rect x="37.5434%" y="613" width="0.3474%" height="15" fill="rgb(223,209,38)"/><text x="37.7934%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (17 samples, 0.35%)</title><rect x="37.5434%" y="597" width="0.3474%" height="15" fill="rgb(236,164,45)"/><text x="37.7934%" y="607.50"></text></g><g><title>malloc_consolidate (5 samples, 0.10%)</title><rect x="37.8909%" y="741" width="0.1022%" height="15" fill="rgb(231,15,5)"/><text x="38.1409%" y="751.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="38.1770%" y="677" width="0.1226%" height="15" fill="rgb(252,35,15)"/><text x="38.4270%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="38.1770%" y="661" width="0.1226%" height="15" fill="rgb(248,181,18)"/><text x="38.4270%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="38.1770%" y="645" width="0.1226%" height="15" fill="rgb(233,39,42)"/><text x="38.4270%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="38.1770%" y="629" width="0.1226%" height="15" fill="rgb(238,110,33)"/><text x="38.4270%" y="639.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="38.1974%" y="613" width="0.1022%" height="15" fill="rgb(233,195,10)"/><text x="38.4474%" y="623.50"></text></g><g><title>_int_malloc (5 samples, 0.10%)</title><rect x="38.1974%" y="597" width="0.1022%" height="15" fill="rgb(254,105,3)"/><text x="38.4474%" y="607.50"></text></g><g><title>sysmalloc (5 samples, 0.10%)</title><rect x="38.1974%" y="581" width="0.1022%" height="15" fill="rgb(221,225,9)"/><text x="38.4474%" y="591.50"></text></g><g><title>__ip_queue_xmit (9 samples, 0.18%)</title><rect x="38.4222%" y="389" width="0.1839%" height="15" fill="rgb(224,227,45)"/><text x="38.6722%" y="399.50"></text></g><g><title>ip_output (9 samples, 0.18%)</title><rect x="38.4222%" y="373" width="0.1839%" height="15" fill="rgb(229,198,43)"/><text x="38.6722%" y="383.50"></text></g><g><title>ip_finish_output2 (9 samples, 0.18%)</title><rect x="38.4222%" y="357" width="0.1839%" height="15" fill="rgb(206,209,35)"/><text x="38.6722%" y="367.50"></text></g><g><title>__local_bh_enable_ip (8 samples, 0.16%)</title><rect x="38.4427%" y="341" width="0.1635%" height="15" fill="rgb(245,195,53)"/><text x="38.6927%" y="351.50"></text></g><g><title>do_softirq (8 samples, 0.16%)</title><rect x="38.4427%" y="325" width="0.1635%" height="15" fill="rgb(240,92,26)"/><text x="38.6927%" y="335.50"></text></g><g><title>do_softirq_own_stack (8 samples, 0.16%)</title><rect x="38.4427%" y="309" width="0.1635%" height="15" fill="rgb(207,40,23)"/><text x="38.6927%" y="319.50"></text></g><g><title>__do_softirq (8 samples, 0.16%)</title><rect x="38.4427%" y="293" width="0.1635%" height="15" fill="rgb(223,111,35)"/><text x="38.6927%" y="303.50"></text></g><g><title>net_rx_action (8 samples, 0.16%)</title><rect x="38.4427%" y="277" width="0.1635%" height="15" fill="rgb(229,147,28)"/><text x="38.6927%" y="287.50"></text></g><g><title>process_backlog (6 samples, 0.12%)</title><rect x="38.4835%" y="261" width="0.1226%" height="15" fill="rgb(211,29,28)"/><text x="38.7335%" y="271.50"></text></g><g><title>__netif_receive_skb_one_core (6 samples, 0.12%)</title><rect x="38.4835%" y="245" width="0.1226%" height="15" fill="rgb(228,72,33)"/><text x="38.7335%" y="255.50"></text></g><g><title>ip_rcv (6 samples, 0.12%)</title><rect x="38.4835%" y="229" width="0.1226%" height="15" fill="rgb(205,214,31)"/><text x="38.7335%" y="239.50"></text></g><g><title>ip_local_deliver (6 samples, 0.12%)</title><rect x="38.4835%" y="213" width="0.1226%" height="15" fill="rgb(224,111,15)"/><text x="38.7335%" y="223.50"></text></g><g><title>ip_local_deliver_finish (6 samples, 0.12%)</title><rect x="38.4835%" y="197" width="0.1226%" height="15" fill="rgb(253,21,26)"/><text x="38.7335%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (6 samples, 0.12%)</title><rect x="38.4835%" y="181" width="0.1226%" height="15" fill="rgb(245,139,43)"/><text x="38.7335%" y="191.50"></text></g><g><title>tcp_v4_rcv (6 samples, 0.12%)</title><rect x="38.4835%" y="165" width="0.1226%" height="15" fill="rgb(252,170,7)"/><text x="38.7335%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (6 samples, 0.12%)</title><rect x="38.4835%" y="149" width="0.1226%" height="15" fill="rgb(231,118,14)"/><text x="38.7335%" y="159.50"></text></g><g><title>tcp_rcv_established (6 samples, 0.12%)</title><rect x="38.4835%" y="133" width="0.1226%" height="15" fill="rgb(238,83,0)"/><text x="38.7335%" y="143.50"></text></g><g><title>__tcp_push_pending_frames (11 samples, 0.22%)</title><rect x="38.4018%" y="437" width="0.2248%" height="15" fill="rgb(221,39,39)"/><text x="38.6518%" y="447.50"></text></g><g><title>tcp_write_xmit (11 samples, 0.22%)</title><rect x="38.4018%" y="421" width="0.2248%" height="15" fill="rgb(222,119,46)"/><text x="38.6518%" y="431.50"></text></g><g><title>__tcp_transmit_skb (11 samples, 0.22%)</title><rect x="38.4018%" y="405" width="0.2248%" height="15" fill="rgb(222,165,49)"/><text x="38.6518%" y="415.50"></text></g><g><title>__x64_sys_sendto (14 samples, 0.29%)</title><rect x="38.4018%" y="517" width="0.2861%" height="15" fill="rgb(219,113,52)"/><text x="38.6518%" y="527.50"></text></g><g><title>__sys_sendto (14 samples, 0.29%)</title><rect x="38.4018%" y="501" width="0.2861%" height="15" fill="rgb(214,7,15)"/><text x="38.6518%" y="511.50"></text></g><g><title>sock_sendmsg (14 samples, 0.29%)</title><rect x="38.4018%" y="485" width="0.2861%" height="15" fill="rgb(235,32,4)"/><text x="38.6518%" y="495.50"></text></g><g><title>tcp_sendmsg (14 samples, 0.29%)</title><rect x="38.4018%" y="469" width="0.2861%" height="15" fill="rgb(238,90,54)"/><text x="38.6518%" y="479.50"></text></g><g><title>tcp_sendmsg_locked (14 samples, 0.29%)</title><rect x="38.4018%" y="453" width="0.2861%" height="15" fill="rgb(213,208,19)"/><text x="38.6518%" y="463.50"></text></g><g><title>do_syscall_64 (16 samples, 0.33%)</title><rect x="38.4018%" y="533" width="0.3270%" height="15" fill="rgb(233,156,4)"/><text x="38.6518%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (17 samples, 0.35%)</title><rect x="38.4018%" y="549" width="0.3474%" height="15" fill="rgb(207,194,5)"/><text x="38.6518%" y="559.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (19 samples, 0.39%)</title><rect x="38.3814%" y="677" width="0.3883%" height="15" fill="rgb(206,111,30)"/><text x="38.6314%" y="687.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (19 samples, 0.39%)</title><rect x="38.3814%" y="661" width="0.3883%" height="15" fill="rgb(243,70,54)"/><text x="38.6314%" y="671.50"></text></g><g><title>mysql::conn::Conn::_query (19 samples, 0.39%)</title><rect x="38.3814%" y="645" width="0.3883%" height="15" fill="rgb(242,28,8)"/><text x="38.6314%" y="655.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (19 samples, 0.39%)</title><rect x="38.3814%" y="629" width="0.3883%" height="15" fill="rgb(219,106,18)"/><text x="38.6314%" y="639.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (18 samples, 0.37%)</title><rect x="38.4018%" y="613" width="0.3679%" height="15" fill="rgb(244,222,10)"/><text x="38.6518%" y="623.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (18 samples, 0.37%)</title><rect x="38.4018%" y="597" width="0.3679%" height="15" fill="rgb(236,179,52)"/><text x="38.6518%" y="607.50"></text></g><g><title>std::sys_common::net::TcpStream::write (18 samples, 0.37%)</title><rect x="38.4018%" y="581" width="0.3679%" height="15" fill="rgb(213,23,39)"/><text x="38.6518%" y="591.50"></text></g><g><title>__libc_send (18 samples, 0.37%)</title><rect x="38.4018%" y="565" width="0.3679%" height="15" fill="rgb(238,48,10)"/><text x="38.6518%" y="575.50"></text></g><g><title>_int_free (22 samples, 0.45%)</title><rect x="38.9536%" y="645" width="0.4496%" height="15" fill="rgb(251,196,23)"/><text x="39.2036%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (32 samples, 0.65%)</title><rect x="38.7697%" y="661" width="0.6540%" height="15" fill="rgb(250,152,24)"/><text x="39.0197%" y="671.50"></text></g><g><title>page_fault (6 samples, 0.12%)</title><rect x="40.5886%" y="437" width="0.1226%" height="15" fill="rgb(209,150,17)"/><text x="40.8386%" y="447.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.12%)</title><rect x="40.5886%" y="421" width="0.1226%" height="15" fill="rgb(234,202,34)"/><text x="40.8386%" y="431.50"></text></g><g><title>handle_mm_fault (6 samples, 0.12%)</title><rect x="40.5886%" y="405" width="0.1226%" height="15" fill="rgb(253,148,53)"/><text x="40.8386%" y="415.50"></text></g><g><title>perf_event_mmap (6 samples, 0.12%)</title><rect x="40.7725%" y="325" width="0.1226%" height="15" fill="rgb(218,129,16)"/><text x="41.0225%" y="335.50"></text></g><g><title>perf_iterate_sb (6 samples, 0.12%)</title><rect x="40.7725%" y="309" width="0.1226%" height="15" fill="rgb(216,85,19)"/><text x="41.0225%" y="319.50"></text></g><g><title>perf_iterate_ctx (6 samples, 0.12%)</title><rect x="40.7725%" y="293" width="0.1226%" height="15" fill="rgb(235,228,7)"/><text x="41.0225%" y="303.50"></text></g><g><title>perf_event_mmap_output (6 samples, 0.12%)</title><rect x="40.7725%" y="277" width="0.1226%" height="15" fill="rgb(245,175,0)"/><text x="41.0225%" y="287.50"></text></g><g><title>do_syscall_64 (8 samples, 0.16%)</title><rect x="40.7521%" y="389" width="0.1635%" height="15" fill="rgb(208,168,36)"/><text x="41.0021%" y="399.50"></text></g><g><title>__x64_sys_mprotect (8 samples, 0.16%)</title><rect x="40.7521%" y="373" width="0.1635%" height="15" fill="rgb(246,171,24)"/><text x="41.0021%" y="383.50"></text></g><g><title>do_mprotect_pkey (8 samples, 0.16%)</title><rect x="40.7521%" y="357" width="0.1635%" height="15" fill="rgb(215,142,24)"/><text x="41.0021%" y="367.50"></text></g><g><title>mprotect_fixup (8 samples, 0.16%)</title><rect x="40.7521%" y="341" width="0.1635%" height="15" fill="rgb(250,187,7)"/><text x="41.0021%" y="351.50"></text></g><g><title>__GI___mprotect (9 samples, 0.18%)</title><rect x="40.7521%" y="421" width="0.1839%" height="15" fill="rgb(228,66,33)"/><text x="41.0021%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (9 samples, 0.18%)</title><rect x="40.7521%" y="405" width="0.1839%" height="15" fill="rgb(234,215,21)"/><text x="41.0021%" y="415.50"></text></g><g><title>__GI___libc_malloc (58 samples, 1.19%)</title><rect x="39.9346%" y="469" width="1.1854%" height="15" fill="rgb(222,191,20)"/><text x="40.1846%" y="479.50"></text></g><g><title>_int_malloc (45 samples, 0.92%)</title><rect x="40.2003%" y="453" width="0.9197%" height="15" fill="rgb(245,79,54)"/><text x="40.4503%" y="463.50"></text></g><g><title>sysmalloc (19 samples, 0.39%)</title><rect x="40.7317%" y="437" width="0.3883%" height="15" fill="rgb(240,10,37)"/><text x="40.9817%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (63 samples, 1.29%)</title><rect x="39.8733%" y="645" width="1.2876%" height="15" fill="rgb(214,192,32)"/><text x="40.1233%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (63 samples, 1.29%)</title><rect x="39.8733%" y="629" width="1.2876%" height="15" fill="rgb(209,36,54)"/><text x="40.1233%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (63 samples, 1.29%)</title><rect x="39.8733%" y="613" width="1.2876%" height="15" fill="rgb(220,10,11)"/><text x="40.1233%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (61 samples, 1.25%)</title><rect x="39.9142%" y="597" width="1.2467%" height="15" fill="rgb(221,106,17)"/><text x="40.1642%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (60 samples, 1.23%)</title><rect x="39.9346%" y="581" width="1.2262%" height="15" fill="rgb(251,142,44)"/><text x="40.1846%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (60 samples, 1.23%)</title><rect x="39.9346%" y="565" width="1.2262%" height="15" fill="rgb(238,13,15)"/><text x="40.1846%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (60 samples, 1.23%)</title><rect x="39.9346%" y="549" width="1.2262%" height="15" fill="rgb(208,107,27)"/><text x="40.1846%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (60 samples, 1.23%)</title><rect x="39.9346%" y="533" width="1.2262%" height="15" fill="rgb(205,136,37)"/><text x="40.1846%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (60 samples, 1.23%)</title><rect x="39.9346%" y="517" width="1.2262%" height="15" fill="rgb(250,205,27)"/><text x="40.1846%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (60 samples, 1.23%)</title><rect x="39.9346%" y="501" width="1.2262%" height="15" fill="rgb(210,80,43)"/><text x="40.1846%" y="511.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 1.23%)</title><rect x="39.9346%" y="485" width="1.2262%" height="15" fill="rgb(247,160,36)"/><text x="40.1846%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="43.1433%" y="565" width="0.1022%" height="15" fill="rgb(234,13,49)"/><text x="43.3933%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (16 samples, 0.33%)</title><rect x="43.2455%" y="549" width="0.3270%" height="15" fill="rgb(234,122,0)"/><text x="43.4955%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.33%)</title><rect x="43.2455%" y="533" width="0.3270%" height="15" fill="rgb(207,146,38)"/><text x="43.4955%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (16 samples, 0.33%)</title><rect x="43.2455%" y="517" width="0.3270%" height="15" fill="rgb(207,177,25)"/><text x="43.4955%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.29%)</title><rect x="43.2863%" y="501" width="0.2861%" height="15" fill="rgb(211,178,42)"/><text x="43.5363%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.18%)</title><rect x="43.3885%" y="485" width="0.1839%" height="15" fill="rgb(230,69,54)"/><text x="43.6385%" y="495.50"></text></g><g><title>__GI___libc_malloc (269 samples, 5.50%)</title><rect x="43.8790%" y="437" width="5.4976%" height="15" fill="rgb(214,135,41)"/><text x="44.1290%" y="447.50">__GI___..</text></g><g><title>_int_malloc (193 samples, 3.94%)</title><rect x="45.4323%" y="421" width="3.9444%" height="15" fill="rgb(237,67,25)"/><text x="45.6823%" y="431.50">_int..</text></g><g><title>__rdl_alloc (18 samples, 0.37%)</title><rect x="49.3767%" y="437" width="0.3679%" height="15" fill="rgb(222,189,50)"/><text x="49.6267%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.37%)</title><rect x="49.3767%" y="421" width="0.3679%" height="15" fill="rgb(245,148,34)"/><text x="49.6267%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (416 samples, 8.50%)</title><rect x="41.3243%" y="629" width="8.5019%" height="15" fill="rgb(222,29,6)"/><text x="41.5743%" y="639.50">&lt;core::iter:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (335 samples, 6.85%)</title><rect x="42.9798%" y="613" width="6.8465%" height="15" fill="rgb(221,189,43)"/><text x="43.2298%" y="623.50">&lt;alloc::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (330 samples, 6.74%)</title><rect x="43.0820%" y="597" width="6.7443%" height="15" fill="rgb(207,36,27)"/><text x="43.3320%" y="607.50">&lt;alloc::v..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (327 samples, 6.68%)</title><rect x="43.1433%" y="581" width="6.6830%" height="15" fill="rgb(217,90,24)"/><text x="43.3933%" y="591.50">alloc::sl..</text></g><g><title>alloc::slice::hack::to_vec (322 samples, 6.58%)</title><rect x="43.2455%" y="565" width="6.5808%" height="15" fill="rgb(224,66,35)"/><text x="43.4955%" y="575.50">alloc::sl..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (306 samples, 6.25%)</title><rect x="43.5725%" y="549" width="6.2538%" height="15" fill="rgb(221,13,50)"/><text x="43.8225%" y="559.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (306 samples, 6.25%)</title><rect x="43.5725%" y="533" width="6.2538%" height="15" fill="rgb(236,68,49)"/><text x="43.8225%" y="543.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (306 samples, 6.25%)</title><rect x="43.5725%" y="517" width="6.2538%" height="15" fill="rgb(229,146,28)"/><text x="43.8225%" y="527.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (306 samples, 6.25%)</title><rect x="43.5725%" y="501" width="6.2538%" height="15" fill="rgb(225,31,38)"/><text x="43.8225%" y="511.50">alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (306 samples, 6.25%)</title><rect x="43.5725%" y="485" width="6.2538%" height="15" fill="rgb(250,208,3)"/><text x="43.8225%" y="495.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (306 samples, 6.25%)</title><rect x="43.5725%" y="469" width="6.2538%" height="15" fill="rgb(246,54,23)"/><text x="43.8225%" y="479.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (300 samples, 6.13%)</title><rect x="43.6951%" y="453" width="6.1312%" height="15" fill="rgb(243,76,11)"/><text x="43.9451%" y="463.50">alloc::a..</text></g><g><title>&lt;sql_parser::ast::defs::ddl::ColumnDef as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="49.8263%" y="629" width="0.1022%" height="15" fill="rgb(245,21,50)"/><text x="50.0763%" y="639.50"></text></g><g><title>__GI___libc_malloc (52 samples, 1.06%)</title><rect x="49.9285%" y="629" width="1.0627%" height="15" fill="rgb(228,9,43)"/><text x="50.1785%" y="639.50"></text></g><g><title>_int_malloc (32 samples, 0.65%)</title><rect x="50.3372%" y="613" width="0.6540%" height="15" fill="rgb(208,100,47)"/><text x="50.5872%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (488 samples, 9.97%)</title><rect x="41.1608%" y="645" width="9.9734%" height="15" fill="rgb(232,26,8)"/><text x="41.4108%" y="655.50">&lt;alloc::vec::V..</text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.14%)</title><rect x="50.9912%" y="629" width="0.1431%" height="15" fill="rgb(216,166,38)"/><text x="51.2412%" y="639.50"></text></g><g><title>perf_iterate_sb (26 samples, 0.53%)</title><rect x="51.8905%" y="469" width="0.5314%" height="15" fill="rgb(251,202,51)"/><text x="52.1405%" y="479.50"></text></g><g><title>perf_iterate_ctx (24 samples, 0.49%)</title><rect x="51.9313%" y="453" width="0.4905%" height="15" fill="rgb(254,216,34)"/><text x="52.1813%" y="463.50"></text></g><g><title>perf_event_mmap_output (8 samples, 0.16%)</title><rect x="52.2583%" y="437" width="0.1635%" height="15" fill="rgb(251,32,27)"/><text x="52.5083%" y="447.50"></text></g><g><title>mprotect_fixup (31 samples, 0.63%)</title><rect x="51.8087%" y="501" width="0.6336%" height="15" fill="rgb(208,127,28)"/><text x="52.0587%" y="511.50"></text></g><g><title>perf_event_mmap (29 samples, 0.59%)</title><rect x="51.8496%" y="485" width="0.5927%" height="15" fill="rgb(224,137,22)"/><text x="52.0996%" y="495.50"></text></g><g><title>__x64_sys_mprotect (33 samples, 0.67%)</title><rect x="51.7883%" y="533" width="0.6744%" height="15" fill="rgb(254,70,32)"/><text x="52.0383%" y="543.50"></text></g><g><title>do_mprotect_pkey (33 samples, 0.67%)</title><rect x="51.7883%" y="517" width="0.6744%" height="15" fill="rgb(229,75,37)"/><text x="52.0383%" y="527.50"></text></g><g><title>do_syscall_64 (34 samples, 0.69%)</title><rect x="51.7883%" y="549" width="0.6949%" height="15" fill="rgb(252,64,23)"/><text x="52.0383%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (37 samples, 0.76%)</title><rect x="51.7678%" y="565" width="0.7562%" height="15" fill="rgb(232,162,48)"/><text x="52.0178%" y="575.50"></text></g><g><title>__GI___mprotect (40 samples, 0.82%)</title><rect x="51.7678%" y="581" width="0.8175%" height="15" fill="rgb(246,160,12)"/><text x="52.0178%" y="591.50"></text></g><g><title>__lru_cache_add (5 samples, 0.10%)</title><rect x="52.7080%" y="517" width="0.1022%" height="15" fill="rgb(247,166,0)"/><text x="52.9580%" y="527.50"></text></g><g><title>pagevec_lru_move_fn (5 samples, 0.10%)</title><rect x="52.7080%" y="501" width="0.1022%" height="15" fill="rgb(249,219,21)"/><text x="52.9580%" y="511.50"></text></g><g><title>alloc_pages_vma (12 samples, 0.25%)</title><rect x="52.8510%" y="517" width="0.2452%" height="15" fill="rgb(205,209,3)"/><text x="53.1010%" y="527.50"></text></g><g><title>__alloc_pages_nodemask (12 samples, 0.25%)</title><rect x="52.8510%" y="501" width="0.2452%" height="15" fill="rgb(243,44,1)"/><text x="53.1010%" y="511.50"></text></g><g><title>get_page_from_freelist (12 samples, 0.25%)</title><rect x="52.8510%" y="485" width="0.2452%" height="15" fill="rgb(206,159,16)"/><text x="53.1010%" y="495.50"></text></g><g><title>prep_new_page (11 samples, 0.22%)</title><rect x="52.8714%" y="469" width="0.2248%" height="15" fill="rgb(244,77,30)"/><text x="53.1214%" y="479.50"></text></g><g><title>kernel_init_free_pages (10 samples, 0.20%)</title><rect x="52.8919%" y="453" width="0.2044%" height="15" fill="rgb(218,69,12)"/><text x="53.1419%" y="463.50"></text></g><g><title>clear_page_erms (10 samples, 0.20%)</title><rect x="52.8919%" y="437" width="0.2044%" height="15" fill="rgb(212,87,7)"/><text x="53.1419%" y="447.50"></text></g><g><title>page_fault (24 samples, 0.49%)</title><rect x="52.6466%" y="581" width="0.4905%" height="15" fill="rgb(245,114,25)"/><text x="52.8966%" y="591.50"></text></g><g><title>do_user_addr_fault (24 samples, 0.49%)</title><rect x="52.6466%" y="565" width="0.4905%" height="15" fill="rgb(210,61,42)"/><text x="52.8966%" y="575.50"></text></g><g><title>handle_mm_fault (22 samples, 0.45%)</title><rect x="52.6875%" y="549" width="0.4496%" height="15" fill="rgb(211,52,33)"/><text x="52.9375%" y="559.50"></text></g><g><title>__handle_mm_fault (22 samples, 0.45%)</title><rect x="52.6875%" y="533" width="0.4496%" height="15" fill="rgb(234,58,33)"/><text x="52.9375%" y="543.50"></text></g><g><title>__GI___libc_malloc (88 samples, 1.80%)</title><rect x="51.4204%" y="629" width="1.7985%" height="15" fill="rgb(220,115,36)"/><text x="51.6704%" y="639.50">_..</text></g><g><title>_int_malloc (84 samples, 1.72%)</title><rect x="51.5021%" y="613" width="1.7167%" height="15" fill="rgb(243,153,54)"/><text x="51.7521%" y="623.50"></text></g><g><title>sysmalloc (73 samples, 1.49%)</title><rect x="51.7270%" y="597" width="1.4919%" height="15" fill="rgb(251,47,18)"/><text x="51.9770%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (101 samples, 2.06%)</title><rect x="51.2978%" y="645" width="2.0642%" height="15" fill="rgb(242,102,42)"/><text x="51.5478%" y="655.50">a..</text></g><g><title>alloc::slice::merge_sort (7 samples, 0.14%)</title><rect x="53.3619%" y="645" width="0.1431%" height="15" fill="rgb(234,31,38)"/><text x="53.6119%" y="655.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (6 samples, 0.12%)</title><rect x="53.3824%" y="629" width="0.1226%" height="15" fill="rgb(221,117,51)"/><text x="53.6324%" y="639.50"></text></g><g><title>alloc::vec::from_elem (7 samples, 0.14%)</title><rect x="53.5050%" y="645" width="0.1431%" height="15" fill="rgb(212,20,18)"/><text x="53.7550%" y="655.50"></text></g><g><title>__GI___libc_free (24 samples, 0.49%)</title><rect x="53.8729%" y="629" width="0.4905%" height="15" fill="rgb(245,133,36)"/><text x="54.1229%" y="639.50"></text></g><g><title>__rust_dealloc (9 samples, 0.18%)</title><rect x="54.3838%" y="629" width="0.1839%" height="15" fill="rgb(212,6,19)"/><text x="54.6338%" y="639.50"></text></g><g><title>_int_free (50 samples, 1.02%)</title><rect x="54.5677%" y="629" width="1.0219%" height="15" fill="rgb(218,1,36)"/><text x="54.8177%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (106 samples, 2.17%)</title><rect x="53.6889%" y="645" width="2.1664%" height="15" fill="rgb(246,84,54)"/><text x="53.9389%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place (13 samples, 0.27%)</title><rect x="55.5896%" y="629" width="0.2657%" height="15" fill="rgb(242,110,6)"/><text x="55.8396%" y="639.50"></text></g><g><title>decor_mem::select::expr_to_col (9 samples, 0.18%)</title><rect x="55.8553%" y="645" width="0.1839%" height="15" fill="rgb(214,47,5)"/><text x="56.1053%" y="655.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="55.8553%" y="629" width="0.1839%" height="15" fill="rgb(218,159,25)"/><text x="56.1053%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="55.8553%" y="613" width="0.1839%" height="15" fill="rgb(215,211,28)"/><text x="56.1053%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (6 samples, 0.12%)</title><rect x="56.4480%" y="629" width="0.1226%" height="15" fill="rgb(238,59,32)"/><text x="56.6980%" y="639.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (42 samples, 0.86%)</title><rect x="56.0392%" y="645" width="0.8584%" height="15" fill="rgb(226,82,3)"/><text x="56.2892%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (16 samples, 0.33%)</title><rect x="56.5706%" y="629" width="0.3270%" height="15" fill="rgb(240,164,32)"/><text x="56.8206%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (8 samples, 0.16%)</title><rect x="56.9589%" y="597" width="0.1635%" height="15" fill="rgb(232,46,7)"/><text x="57.2089%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (8 samples, 0.16%)</title><rect x="56.9589%" y="581" width="0.1635%" height="15" fill="rgb(229,129,53)"/><text x="57.2089%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (8 samples, 0.16%)</title><rect x="56.9589%" y="565" width="0.1635%" height="15" fill="rgb(234,188,29)"/><text x="57.2089%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (7 samples, 0.14%)</title><rect x="56.9794%" y="549" width="0.1431%" height="15" fill="rgb(246,141,4)"/><text x="57.2294%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (6 samples, 0.12%)</title><rect x="56.9998%" y="533" width="0.1226%" height="15" fill="rgb(229,23,39)"/><text x="57.2498%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (6 samples, 0.12%)</title><rect x="56.9998%" y="517" width="0.1226%" height="15" fill="rgb(206,12,3)"/><text x="57.2498%" y="527.50"></text></g><g><title>core::fmt::write (13 samples, 0.27%)</title><rect x="56.9589%" y="629" width="0.2657%" height="15" fill="rgb(252,226,20)"/><text x="57.2089%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (13 samples, 0.27%)</title><rect x="56.9589%" y="613" width="0.2657%" height="15" fill="rgb(216,123,35)"/><text x="57.2089%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (5 samples, 0.10%)</title><rect x="57.1224%" y="597" width="0.1022%" height="15" fill="rgb(212,68,40)"/><text x="57.3724%" y="607.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (17 samples, 0.35%)</title><rect x="56.8976%" y="645" width="0.3474%" height="15" fill="rgb(254,125,32)"/><text x="57.1476%" y="655.50"></text></g><g><title>decor_mem::select::tablefactor_to_view (8 samples, 0.16%)</title><rect x="57.2450%" y="645" width="0.1635%" height="15" fill="rgb(253,97,22)"/><text x="57.4950%" y="655.50"></text></g><g><title>core::fmt::write (7 samples, 0.14%)</title><rect x="57.2655%" y="629" width="0.1431%" height="15" fill="rgb(241,101,14)"/><text x="57.5155%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::ObjectName as core::fmt::Display&gt;::fmt (7 samples, 0.14%)</title><rect x="57.2655%" y="613" width="0.1431%" height="15" fill="rgb(238,103,29)"/><text x="57.5155%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="57.4085%" y="645" width="0.1022%" height="15" fill="rgb(233,195,47)"/><text x="57.6585%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="57.4085%" y="629" width="0.1022%" height="15" fill="rgb(246,218,30)"/><text x="57.6585%" y="639.50"></text></g><g><title>decor_mem::select::get_query_results (918 samples, 18.76%)</title><rect x="38.7697%" y="677" width="18.7615%" height="15" fill="rgb(219,145,47)"/><text x="39.0197%" y="687.50">decor_mem::select::get_query_..</text></g><g><title>decor_mem::select::get_setexpr_results (886 samples, 18.11%)</title><rect x="39.4237%" y="661" width="18.1075%" height="15" fill="rgb(243,12,26)"/><text x="39.6737%" y="671.50">decor_mem::select::get_setex..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (14 samples, 0.29%)</title><rect x="57.5720%" y="581" width="0.2861%" height="15" fill="rgb(214,87,16)"/><text x="57.8220%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (8 samples, 0.16%)</title><rect x="57.6947%" y="565" width="0.1635%" height="15" fill="rgb(208,99,42)"/><text x="57.9447%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (5 samples, 0.10%)</title><rect x="57.7560%" y="549" width="0.1022%" height="15" fill="rgb(253,99,2)"/><text x="58.0060%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (5 samples, 0.10%)</title><rect x="57.7560%" y="533" width="0.1022%" height="15" fill="rgb(220,168,23)"/><text x="58.0060%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (15 samples, 0.31%)</title><rect x="57.5720%" y="613" width="0.3066%" height="15" fill="rgb(242,38,24)"/><text x="57.8220%" y="623.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (15 samples, 0.31%)</title><rect x="57.5720%" y="597" width="0.3066%" height="15" fill="rgb(225,182,9)"/><text x="57.8220%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (16 samples, 0.33%)</title><rect x="57.5720%" y="629" width="0.3270%" height="15" fill="rgb(243,178,37)"/><text x="57.8220%" y="639.50"></text></g><g><title>core::fmt::write (22 samples, 0.45%)</title><rect x="57.5720%" y="645" width="0.4496%" height="15" fill="rgb(232,139,19)"/><text x="57.8220%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.12%)</title><rect x="57.8990%" y="629" width="0.1226%" height="15" fill="rgb(225,201,24)"/><text x="58.1490%" y="639.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (979 samples, 20.01%)</title><rect x="38.0544%" y="709" width="20.0082%" height="15" fill="rgb(221,47,46)"/><text x="38.3044%" y="719.50">decor_mem::query_transformer::Q..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (979 samples, 20.01%)</title><rect x="38.0544%" y="693" width="20.0082%" height="15" fill="rgb(249,23,13)"/><text x="38.3044%" y="703.50">decor_mem::query_transformer::Q..</text></g><g><title>decor_mem::views::Views::insert (26 samples, 0.53%)</title><rect x="57.5312%" y="677" width="0.5314%" height="15" fill="rgb(219,9,5)"/><text x="57.7812%" y="687.50"></text></g><g><title>decor_mem::views::View::insert_into_index (25 samples, 0.51%)</title><rect x="57.5516%" y="661" width="0.5109%" height="15" fill="rgb(254,171,16)"/><text x="57.8016%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="58.1852%" y="645" width="0.1431%" height="15" fill="rgb(230,171,20)"/><text x="58.4352%" y="655.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.10%)</title><rect x="58.2260%" y="629" width="0.1022%" height="15" fill="rgb(210,71,41)"/><text x="58.4760%" y="639.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="58.1647%" y="661" width="0.2044%" height="15" fill="rgb(206,173,20)"/><text x="58.4147%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (16 samples, 0.33%)</title><rect x="58.0625%" y="677" width="0.3270%" height="15" fill="rgb(233,88,34)"/><text x="58.3125%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (21 samples, 0.43%)</title><rect x="58.0625%" y="693" width="0.4292%" height="15" fill="rgb(223,209,46)"/><text x="58.3125%" y="703.50"></text></g><g><title>page_fault (6 samples, 0.12%)</title><rect x="58.7574%" y="629" width="0.1226%" height="15" fill="rgb(250,43,18)"/><text x="59.0074%" y="639.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.12%)</title><rect x="58.7574%" y="613" width="0.1226%" height="15" fill="rgb(208,13,10)"/><text x="59.0074%" y="623.50"></text></g><g><title>handle_mm_fault (6 samples, 0.12%)</title><rect x="58.7574%" y="597" width="0.1226%" height="15" fill="rgb(212,200,36)"/><text x="59.0074%" y="607.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.12%)</title><rect x="58.7574%" y="581" width="0.1226%" height="15" fill="rgb(225,90,30)"/><text x="59.0074%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.20%)</title><rect x="58.6961%" y="645" width="0.2044%" height="15" fill="rgb(236,182,39)"/><text x="58.9461%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (31 samples, 0.63%)</title><rect x="58.4917%" y="693" width="0.6336%" height="15" fill="rgb(212,144,35)"/><text x="58.7417%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (25 samples, 0.51%)</title><rect x="58.6143%" y="677" width="0.5109%" height="15" fill="rgb(228,63,44)"/><text x="58.8643%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (22 samples, 0.45%)</title><rect x="58.6757%" y="661" width="0.4496%" height="15" fill="rgb(228,109,6)"/><text x="58.9257%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.22%)</title><rect x="58.9005%" y="645" width="0.2248%" height="15" fill="rgb(238,117,24)"/><text x="59.1505%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.20%)</title><rect x="58.9209%" y="629" width="0.2044%" height="15" fill="rgb(242,26,26)"/><text x="59.1709%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.33%)</title><rect x="59.6362%" y="661" width="0.3270%" height="15" fill="rgb(221,92,48)"/><text x="59.8862%" y="671.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.29%)</title><rect x="59.6771%" y="645" width="0.2861%" height="15" fill="rgb(209,209,32)"/><text x="59.9271%" y="655.50"></text></g><g><title>_int_realloc (13 samples, 0.27%)</title><rect x="59.6975%" y="629" width="0.2657%" height="15" fill="rgb(221,70,22)"/><text x="59.9475%" y="639.50"></text></g><g><title>_int_malloc (9 samples, 0.18%)</title><rect x="59.7793%" y="613" width="0.1839%" height="15" fill="rgb(248,145,5)"/><text x="60.0293%" y="623.50"></text></g><g><title>malloc_consolidate (8 samples, 0.16%)</title><rect x="59.7997%" y="597" width="0.1635%" height="15" fill="rgb(226,116,26)"/><text x="60.0497%" y="607.50"></text></g><g><title>sql_parser::tokenizer::PeekableChars::next (5 samples, 0.10%)</title><rect x="60.2902%" y="645" width="0.1022%" height="15" fill="rgb(244,5,17)"/><text x="60.5402%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (11 samples, 0.22%)</title><rect x="60.6785%" y="629" width="0.2248%" height="15" fill="rgb(252,159,33)"/><text x="60.9285%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (49 samples, 1.00%)</title><rect x="60.3924%" y="645" width="1.0014%" height="15" fill="rgb(206,71,0)"/><text x="60.6424%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (24 samples, 0.49%)</title><rect x="60.9033%" y="629" width="0.4905%" height="15" fill="rgb(233,118,54)"/><text x="61.1533%" y="639.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (14 samples, 0.29%)</title><rect x="61.1077%" y="613" width="0.2861%" height="15" fill="rgb(234,83,48)"/><text x="61.3577%" y="623.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (12 samples, 0.25%)</title><rect x="61.1486%" y="597" width="0.2452%" height="15" fill="rgb(228,3,54)"/><text x="61.3986%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (12 samples, 0.25%)</title><rect x="61.1486%" y="581" width="0.2452%" height="15" fill="rgb(226,155,13)"/><text x="61.3986%" y="591.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (6 samples, 0.12%)</title><rect x="61.2712%" y="565" width="0.1226%" height="15" fill="rgb(241,28,37)"/><text x="61.5212%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (80 samples, 1.63%)</title><rect x="59.9837%" y="661" width="1.6350%" height="15" fill="rgb(233,93,10)"/><text x="60.2337%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (10 samples, 0.20%)</title><rect x="61.4143%" y="645" width="0.2044%" height="15" fill="rgb(225,113,19)"/><text x="61.6643%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="61.4960%" y="629" width="0.1226%" height="15" fill="rgb(241,2,18)"/><text x="61.7460%" y="639.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.31%)</title><rect x="62.0478%" y="629" width="0.3066%" height="15" fill="rgb(228,207,21)"/><text x="62.2978%" y="639.50"></text></g><g><title>_int_malloc (10 samples, 0.20%)</title><rect x="62.1500%" y="613" width="0.2044%" height="15" fill="rgb(213,211,35)"/><text x="62.4000%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.45%)</title><rect x="61.9456%" y="645" width="0.4496%" height="15" fill="rgb(209,83,10)"/><text x="62.1956%" y="655.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (214 samples, 4.37%)</title><rect x="58.0625%" y="709" width="4.3736%" height="15" fill="rgb(209,164,1)"/><text x="58.3125%" y="719.50">decor..</text></g><g><title>sql_parser::parser::parse_statements (162 samples, 3.31%)</title><rect x="59.1253%" y="693" width="3.3109%" height="15" fill="rgb(213,184,43)"/><text x="59.3753%" y="703.50">sql..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (152 samples, 3.11%)</title><rect x="59.3297%" y="677" width="3.1065%" height="15" fill="rgb(231,61,34)"/><text x="59.5797%" y="687.50">sql..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (40 samples, 0.82%)</title><rect x="61.6186%" y="661" width="0.8175%" height="15" fill="rgb(235,75,3)"/><text x="61.8686%" y="671.50"></text></g><g><title>malloc_consolidate (73 samples, 1.49%)</title><rect x="62.4361%" y="597" width="1.4919%" height="15" fill="rgb(220,106,47)"/><text x="62.6861%" y="607.50"></text></g><g><title>unlink_chunk.constprop.0 (20 samples, 0.41%)</title><rect x="63.5193%" y="581" width="0.4087%" height="15" fill="rgb(210,196,33)"/><text x="63.7693%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (74 samples, 1.51%)</title><rect x="62.4361%" y="661" width="1.5124%" height="15" fill="rgb(229,154,42)"/><text x="62.6861%" y="671.50"></text></g><g><title>__GI___libc_realloc (74 samples, 1.51%)</title><rect x="62.4361%" y="645" width="1.5124%" height="15" fill="rgb(228,114,26)"/><text x="62.6861%" y="655.50"></text></g><g><title>_int_realloc (74 samples, 1.51%)</title><rect x="62.4361%" y="629" width="1.5124%" height="15" fill="rgb(208,144,1)"/><text x="62.6861%" y="639.50"></text></g><g><title>_int_malloc (74 samples, 1.51%)</title><rect x="62.4361%" y="613" width="1.5124%" height="15" fill="rgb(239,112,37)"/><text x="62.6861%" y="623.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.16%)</title><rect x="64.7047%" y="629" width="0.1635%" height="15" fill="rgb(210,96,50)"/><text x="64.9547%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (71 samples, 1.45%)</title><rect x="64.0302%" y="645" width="1.4511%" height="15" fill="rgb(222,178,2)"/><text x="64.2802%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (30 samples, 0.61%)</title><rect x="64.8682%" y="629" width="0.6131%" height="15" fill="rgb(226,74,18)"/><text x="65.1182%" y="639.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (20 samples, 0.41%)</title><rect x="65.0726%" y="613" width="0.4087%" height="15" fill="rgb(225,67,54)"/><text x="65.3226%" y="623.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (18 samples, 0.37%)</title><rect x="65.1134%" y="597" width="0.3679%" height="15" fill="rgb(251,92,32)"/><text x="65.3634%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (18 samples, 0.37%)</title><rect x="65.1134%" y="581" width="0.3679%" height="15" fill="rgb(228,149,22)"/><text x="65.3634%" y="591.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (7 samples, 0.14%)</title><rect x="65.3382%" y="565" width="0.1431%" height="15" fill="rgb(243,54,13)"/><text x="65.5882%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (79 samples, 1.61%)</title><rect x="63.9485%" y="661" width="1.6146%" height="15" fill="rgb(243,180,28)"/><text x="64.1985%" y="671.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,361 samples, 27.82%)</title><rect x="37.9931%" y="741" width="27.8152%" height="15" fill="rgb(208,167,24)"/><text x="38.2431%" y="751.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (1,358 samples, 27.75%)</title><rect x="38.0544%" y="725" width="27.7539%" height="15" fill="rgb(245,73,45)"/><text x="38.3044%" y="735.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::..</text></g><g><title>decor_mem::stats::get_qtype (165 samples, 3.37%)</title><rect x="62.4361%" y="709" width="3.3722%" height="15" fill="rgb(237,203,48)"/><text x="62.6861%" y="719.50">dec..</text></g><g><title>sql_parser::parser::parse_statements (165 samples, 3.37%)</title><rect x="62.4361%" y="693" width="3.3722%" height="15" fill="rgb(211,197,16)"/><text x="62.6861%" y="703.50">sql..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (165 samples, 3.37%)</title><rect x="62.4361%" y="677" width="3.3722%" height="15" fill="rgb(243,99,51)"/><text x="62.6861%" y="687.50">sql..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (12 samples, 0.25%)</title><rect x="65.5630%" y="661" width="0.2452%" height="15" fill="rgb(215,123,29)"/><text x="65.8130%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.25%)</title><rect x="65.5630%" y="645" width="0.2452%" height="15" fill="rgb(239,186,37)"/><text x="65.8130%" y="655.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.25%)</title><rect x="65.5630%" y="629" width="0.2452%" height="15" fill="rgb(252,136,39)"/><text x="65.8130%" y="639.50"></text></g><g><title>_int_malloc (12 samples, 0.25%)</title><rect x="65.5630%" y="613" width="0.2452%" height="15" fill="rgb(223,213,32)"/><text x="65.8130%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (13 samples, 0.27%)</title><rect x="66.0535%" y="693" width="0.2657%" height="15" fill="rgb(233,115,5)"/><text x="66.3035%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (13 samples, 0.27%)</title><rect x="66.0535%" y="677" width="0.2657%" height="15" fill="rgb(207,226,44)"/><text x="66.3035%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (13 samples, 0.27%)</title><rect x="66.0535%" y="661" width="0.2657%" height="15" fill="rgb(208,126,0)"/><text x="66.3035%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::get_next_precedence (8 samples, 0.16%)</title><rect x="66.1557%" y="645" width="0.1635%" height="15" fill="rgb(244,66,21)"/><text x="66.4057%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (17 samples, 0.35%)</title><rect x="66.0535%" y="709" width="0.3474%" height="15" fill="rgb(222,97,12)"/><text x="66.3035%" y="719.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="67.2185%" y="661" width="0.1635%" height="15" fill="rgb(219,213,19)"/><text x="67.4685%" y="671.50"></text></g><g><title>__GI___libc_free (5 samples, 0.10%)</title><rect x="67.3820%" y="661" width="0.1022%" height="15" fill="rgb(252,169,30)"/><text x="67.6320%" y="671.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.43%)</title><rect x="67.4842%" y="661" width="0.4292%" height="15" fill="rgb(206,32,51)"/><text x="67.7342%" y="671.50"></text></g><g><title>_int_free (14 samples, 0.29%)</title><rect x="68.0155%" y="661" width="0.2861%" height="15" fill="rgb(250,172,42)"/><text x="68.2655%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="68.6900%" y="645" width="0.2044%" height="15" fill="rgb(209,34,43)"/><text x="68.9400%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="68.7104%" y="629" width="0.1839%" height="15" fill="rgb(223,11,35)"/><text x="68.9604%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="68.7104%" y="613" width="0.1839%" height="15" fill="rgb(251,219,26)"/><text x="68.9604%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.18%)</title><rect x="68.7104%" y="597" width="0.1839%" height="15" fill="rgb(231,119,3)"/><text x="68.9604%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.18%)</title><rect x="68.7104%" y="581" width="0.1839%" height="15" fill="rgb(216,97,11)"/><text x="68.9604%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="68.7717%" y="565" width="0.1226%" height="15" fill="rgb(223,59,9)"/><text x="69.0217%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (6 samples, 0.12%)</title><rect x="68.7717%" y="549" width="0.1226%" height="15" fill="rgb(233,93,31)"/><text x="69.0217%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.12%)</title><rect x="68.7717%" y="533" width="0.1226%" height="15" fill="rgb(239,81,33)"/><text x="69.0217%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.12%)</title><rect x="68.7717%" y="517" width="0.1226%" height="15" fill="rgb(213,120,34)"/><text x="69.0217%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (6 samples, 0.12%)</title><rect x="68.7717%" y="501" width="0.1226%" height="15" fill="rgb(243,49,53)"/><text x="69.0217%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.12%)</title><rect x="68.7717%" y="485" width="0.1226%" height="15" fill="rgb(247,216,33)"/><text x="69.0217%" y="495.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.12%)</title><rect x="68.7717%" y="469" width="0.1226%" height="15" fill="rgb(226,26,14)"/><text x="69.0217%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (6 samples, 0.12%)</title><rect x="69.3235%" y="565" width="0.1226%" height="15" fill="rgb(215,49,53)"/><text x="69.5735%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.12%)</title><rect x="69.3235%" y="549" width="0.1226%" height="15" fill="rgb(245,162,40)"/><text x="69.5735%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (6 samples, 0.12%)</title><rect x="69.3235%" y="533" width="0.1226%" height="15" fill="rgb(229,68,17)"/><text x="69.5735%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.12%)</title><rect x="69.3235%" y="517" width="0.1226%" height="15" fill="rgb(213,182,10)"/><text x="69.5735%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.10%)</title><rect x="69.3440%" y="501" width="0.1022%" height="15" fill="rgb(245,125,30)"/><text x="69.5940%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.22%)</title><rect x="69.2826%" y="629" width="0.2248%" height="15" fill="rgb(232,202,2)"/><text x="69.5326%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.20%)</title><rect x="69.3031%" y="613" width="0.2044%" height="15" fill="rgb(237,140,51)"/><text x="69.5531%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (10 samples, 0.20%)</title><rect x="69.3031%" y="597" width="0.2044%" height="15" fill="rgb(236,157,25)"/><text x="69.5531%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.18%)</title><rect x="69.3235%" y="581" width="0.1839%" height="15" fill="rgb(219,209,0)"/><text x="69.5735%" y="591.50"></text></g><g><title>__GI___libc_free (6 samples, 0.12%)</title><rect x="69.5075%" y="629" width="0.1226%" height="15" fill="rgb(240,116,54)"/><text x="69.7575%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.12%)</title><rect x="69.7323%" y="533" width="0.1226%" height="15" fill="rgb(216,10,36)"/><text x="69.9823%" y="543.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (10 samples, 0.20%)</title><rect x="69.7118%" y="613" width="0.2044%" height="15" fill="rgb(222,72,44)"/><text x="69.9618%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (9 samples, 0.18%)</title><rect x="69.7323%" y="597" width="0.1839%" height="15" fill="rgb(232,159,9)"/><text x="69.9823%" y="607.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (9 samples, 0.18%)</title><rect x="69.7323%" y="581" width="0.1839%" height="15" fill="rgb(210,39,32)"/><text x="69.9823%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.18%)</title><rect x="69.7323%" y="565" width="0.1839%" height="15" fill="rgb(216,194,45)"/><text x="69.9823%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.18%)</title><rect x="69.7323%" y="549" width="0.1839%" height="15" fill="rgb(218,18,35)"/><text x="69.9823%" y="559.50"></text></g><g><title>alloc::fmt::format (14 samples, 0.29%)</title><rect x="69.6710%" y="629" width="0.2861%" height="15" fill="rgb(207,83,51)"/><text x="69.9210%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (81 samples, 1.66%)</title><rect x="68.3221%" y="661" width="1.6554%" height="15" fill="rgb(225,63,43)"/><text x="68.5721%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::expected (52 samples, 1.06%)</title><rect x="68.9148%" y="645" width="1.0627%" height="15" fill="rgb(207,57,36)"/><text x="69.1648%" y="655.50"></text></g><g><title>__memcmp_avx2_movbe (7 samples, 0.14%)</title><rect x="70.8768%" y="645" width="0.1431%" height="15" fill="rgb(216,99,33)"/><text x="71.1268%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (52 samples, 1.06%)</title><rect x="69.9775%" y="661" width="1.0627%" height="15" fill="rgb(225,42,16)"/><text x="70.2275%" y="671.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.65%)</title><rect x="71.3264%" y="469" width="0.6540%" height="15" fill="rgb(220,201,45)"/><text x="71.5764%" y="479.50"></text></g><g><title>_int_malloc (21 samples, 0.43%)</title><rect x="71.5512%" y="453" width="0.4292%" height="15" fill="rgb(225,33,4)"/><text x="71.8012%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (41 samples, 0.84%)</title><rect x="71.2242%" y="645" width="0.8379%" height="15" fill="rgb(224,33,50)"/><text x="71.4742%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (41 samples, 0.84%)</title><rect x="71.2242%" y="629" width="0.8379%" height="15" fill="rgb(246,198,51)"/><text x="71.4742%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (40 samples, 0.82%)</title><rect x="71.2446%" y="613" width="0.8175%" height="15" fill="rgb(205,22,4)"/><text x="71.4946%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (39 samples, 0.80%)</title><rect x="71.2651%" y="597" width="0.7971%" height="15" fill="rgb(206,3,8)"/><text x="71.5151%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36 samples, 0.74%)</title><rect x="71.3264%" y="581" width="0.7357%" height="15" fill="rgb(251,23,15)"/><text x="71.5764%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (36 samples, 0.74%)</title><rect x="71.3264%" y="565" width="0.7357%" height="15" fill="rgb(252,88,28)"/><text x="71.5764%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 0.74%)</title><rect x="71.3264%" y="549" width="0.7357%" height="15" fill="rgb(212,127,14)"/><text x="71.5764%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 0.74%)</title><rect x="71.3264%" y="533" width="0.7357%" height="15" fill="rgb(247,145,37)"/><text x="71.5764%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (36 samples, 0.74%)</title><rect x="71.3264%" y="517" width="0.7357%" height="15" fill="rgb(209,117,53)"/><text x="71.5764%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.74%)</title><rect x="71.3264%" y="501" width="0.7357%" height="15" fill="rgb(212,90,42)"/><text x="71.5764%" y="511.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.74%)</title><rect x="71.3264%" y="485" width="0.7357%" height="15" fill="rgb(218,164,37)"/><text x="71.5764%" y="495.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (9 samples, 0.18%)</title><rect x="72.0621%" y="645" width="0.1839%" height="15" fill="rgb(246,65,34)"/><text x="72.3121%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.16%)</title><rect x="72.0826%" y="629" width="0.1635%" height="15" fill="rgb(231,100,33)"/><text x="72.3326%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="72.1234%" y="613" width="0.1226%" height="15" fill="rgb(228,126,14)"/><text x="72.3734%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.12%)</title><rect x="72.1234%" y="597" width="0.1226%" height="15" fill="rgb(215,173,21)"/><text x="72.3734%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.12%)</title><rect x="72.1234%" y="581" width="0.1226%" height="15" fill="rgb(210,6,40)"/><text x="72.3734%" y="591.50"></text></g><g><title>__GI___libc_free (7 samples, 0.14%)</title><rect x="72.2461%" y="645" width="0.1431%" height="15" fill="rgb(212,48,18)"/><text x="72.4961%" y="655.50"></text></g><g><title>_int_free (9 samples, 0.18%)</title><rect x="72.4504%" y="645" width="0.1839%" height="15" fill="rgb(230,214,11)"/><text x="72.7004%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (326 samples, 6.66%)</title><rect x="66.0535%" y="725" width="6.6626%" height="15" fill="rgb(254,105,39)"/><text x="66.3035%" y="735.50">sql_parse..</text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (309 samples, 6.32%)</title><rect x="66.4010%" y="709" width="6.3151%" height="15" fill="rgb(245,158,5)"/><text x="66.6510%" y="719.50">sql_pars..</text></g><g><title>sql_parser::parser::Parser::check_descent (309 samples, 6.32%)</title><rect x="66.4010%" y="693" width="6.3151%" height="15" fill="rgb(249,208,11)"/><text x="66.6510%" y="703.50">sql_pars..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (309 samples, 6.32%)</title><rect x="66.4010%" y="677" width="6.3151%" height="15" fill="rgb(210,39,28)"/><text x="66.6510%" y="687.50">sql_pars..</text></g><g><title>sql_parser::parser::Parser::parse_value (82 samples, 1.68%)</title><rect x="71.0403%" y="661" width="1.6759%" height="15" fill="rgb(211,56,53)"/><text x="71.2903%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (31 samples, 0.63%)</title><rect x="72.7366%" y="661" width="0.6336%" height="15" fill="rgb(226,201,30)"/><text x="72.9866%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::expected (30 samples, 0.61%)</title><rect x="72.7570%" y="645" width="0.6131%" height="15" fill="rgb(239,101,34)"/><text x="73.0070%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (28 samples, 0.57%)</title><rect x="72.7979%" y="629" width="0.5722%" height="15" fill="rgb(226,209,5)"/><text x="73.0479%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.57%)</title><rect x="72.7979%" y="613" width="0.5722%" height="15" fill="rgb(250,105,47)"/><text x="73.0479%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.57%)</title><rect x="72.7979%" y="597" width="0.5722%" height="15" fill="rgb(230,72,3)"/><text x="73.0479%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.57%)</title><rect x="72.7979%" y="581" width="0.5722%" height="15" fill="rgb(232,218,39)"/><text x="73.0479%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (28 samples, 0.57%)</title><rect x="72.7979%" y="565" width="0.5722%" height="15" fill="rgb(248,166,6)"/><text x="73.0479%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 0.57%)</title><rect x="72.7979%" y="549" width="0.5722%" height="15" fill="rgb(247,89,20)"/><text x="73.0479%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (28 samples, 0.57%)</title><rect x="72.7979%" y="533" width="0.5722%" height="15" fill="rgb(248,130,54)"/><text x="73.0479%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.57%)</title><rect x="72.7979%" y="517" width="0.5722%" height="15" fill="rgb(234,196,4)"/><text x="73.0479%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (28 samples, 0.57%)</title><rect x="72.7979%" y="501" width="0.5722%" height="15" fill="rgb(250,143,31)"/><text x="73.0479%" y="511.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (36 samples, 0.74%)</title><rect x="72.7161%" y="709" width="0.7357%" height="15" fill="rgb(211,110,34)"/><text x="72.9661%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (36 samples, 0.74%)</title><rect x="72.7161%" y="693" width="0.7357%" height="15" fill="rgb(215,124,48)"/><text x="72.9661%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (36 samples, 0.74%)</title><rect x="72.7161%" y="677" width="0.7357%" height="15" fill="rgb(216,46,13)"/><text x="72.9661%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="73.9832%" y="645" width="0.1226%" height="15" fill="rgb(205,184,25)"/><text x="74.2332%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (31 samples, 0.63%)</title><rect x="73.5949%" y="661" width="0.6336%" height="15" fill="rgb(228,1,10)"/><text x="73.8449%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="74.1059%" y="645" width="0.1226%" height="15" fill="rgb(213,116,27)"/><text x="74.3559%" y="655.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="74.1059%" y="629" width="0.1226%" height="15" fill="rgb(241,95,50)"/><text x="74.3559%" y="639.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="74.1059%" y="613" width="0.1226%" height="15" fill="rgb(238,48,32)"/><text x="74.3559%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.12%)</title><rect x="74.1059%" y="597" width="0.1226%" height="15" fill="rgb(235,113,49)"/><text x="74.3559%" y="607.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (10 samples, 0.20%)</title><rect x="74.2285%" y="661" width="0.2044%" height="15" fill="rgb(205,127,43)"/><text x="74.4785%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (13 samples, 0.27%)</title><rect x="74.9642%" y="645" width="0.2657%" height="15" fill="rgb(250,162,2)"/><text x="75.2142%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (88 samples, 1.80%)</title><rect x="73.4519%" y="677" width="1.7985%" height="15" fill="rgb(220,13,41)"/><text x="73.7019%" y="687.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (40 samples, 0.82%)</title><rect x="74.4329%" y="661" width="0.8175%" height="15" fill="rgb(249,221,25)"/><text x="74.6829%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (6 samples, 0.12%)</title><rect x="75.4956%" y="661" width="0.1226%" height="15" fill="rgb(215,208,19)"/><text x="75.7456%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (117 samples, 2.39%)</title><rect x="73.4519%" y="693" width="2.3912%" height="15" fill="rgb(236,175,2)"/><text x="73.7019%" y="703.50">sq..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (29 samples, 0.59%)</title><rect x="75.2504%" y="677" width="0.5927%" height="15" fill="rgb(241,52,2)"/><text x="75.5004%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (5 samples, 0.10%)</title><rect x="75.9248%" y="661" width="0.1022%" height="15" fill="rgb(248,140,14)"/><text x="76.1748%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_object_name (8 samples, 0.16%)</title><rect x="76.0270%" y="661" width="0.1635%" height="15" fill="rgb(253,22,42)"/><text x="76.2770%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (502 samples, 10.26%)</title><rect x="65.9922%" y="741" width="10.2596%" height="15" fill="rgb(234,61,47)"/><text x="66.2422%" y="751.50">sql_parser::par..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (173 samples, 3.54%)</title><rect x="72.7161%" y="725" width="3.5357%" height="15" fill="rgb(208,226,15)"/><text x="72.9661%" y="735.50">sql..</text></g><g><title>sql_parser::parser::Parser::parse_select (137 samples, 2.80%)</title><rect x="73.4519%" y="709" width="2.7999%" height="15" fill="rgb(217,221,4)"/><text x="73.7019%" y="719.50">sq..</text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (20 samples, 0.41%)</title><rect x="75.8430%" y="693" width="0.4087%" height="15" fill="rgb(212,174,34)"/><text x="76.0930%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (20 samples, 0.41%)</title><rect x="75.8430%" y="677" width="0.4087%" height="15" fill="rgb(253,83,4)"/><text x="76.0930%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (6 samples, 0.12%)</title><rect x="76.3540%" y="725" width="0.1226%" height="15" fill="rgb(250,195,49)"/><text x="76.6040%" y="735.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="76.4766%" y="645" width="0.1226%" height="15" fill="rgb(241,192,25)"/><text x="76.7266%" y="655.50"></text></g><g><title>__GI___libc_realloc (20 samples, 0.41%)</title><rect x="77.2328%" y="373" width="0.4087%" height="15" fill="rgb(208,124,10)"/><text x="77.4828%" y="383.50"></text></g><g><title>_int_realloc (14 samples, 0.29%)</title><rect x="77.3554%" y="357" width="0.2861%" height="15" fill="rgb(222,33,0)"/><text x="77.6054%" y="367.50"></text></g><g><title>_int_malloc (8 samples, 0.16%)</title><rect x="77.4780%" y="341" width="0.1635%" height="15" fill="rgb(234,209,28)"/><text x="77.7280%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (31 samples, 0.63%)</title><rect x="77.0284%" y="501" width="0.6336%" height="15" fill="rgb(224,11,23)"/><text x="77.2784%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (30 samples, 0.61%)</title><rect x="77.0488%" y="485" width="0.6131%" height="15" fill="rgb(232,99,1)"/><text x="77.2988%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (30 samples, 0.61%)</title><rect x="77.0488%" y="469" width="0.6131%" height="15" fill="rgb(237,95,45)"/><text x="77.2988%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (25 samples, 0.51%)</title><rect x="77.1510%" y="453" width="0.5109%" height="15" fill="rgb(208,109,11)"/><text x="77.4010%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.49%)</title><rect x="77.1715%" y="437" width="0.4905%" height="15" fill="rgb(216,190,48)"/><text x="77.4215%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (21 samples, 0.43%)</title><rect x="77.2328%" y="421" width="0.4292%" height="15" fill="rgb(251,171,36)"/><text x="77.4828%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.43%)</title><rect x="77.2328%" y="405" width="0.4292%" height="15" fill="rgb(230,62,22)"/><text x="77.4828%" y="415.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.43%)</title><rect x="77.2328%" y="389" width="0.4292%" height="15" fill="rgb(225,114,35)"/><text x="77.4828%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (50 samples, 1.02%)</title><rect x="76.8649%" y="597" width="1.0219%" height="15" fill="rgb(215,118,42)"/><text x="77.1149%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (46 samples, 0.94%)</title><rect x="76.9467%" y="581" width="0.9401%" height="15" fill="rgb(243,119,21)"/><text x="77.1967%" y="591.50"></text></g><g><title>alloc::string::String::push_str (46 samples, 0.94%)</title><rect x="76.9467%" y="565" width="0.9401%" height="15" fill="rgb(252,177,53)"/><text x="77.1967%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (46 samples, 0.94%)</title><rect x="76.9467%" y="549" width="0.9401%" height="15" fill="rgb(237,209,29)"/><text x="77.1967%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.94%)</title><rect x="76.9467%" y="533" width="0.9401%" height="15" fill="rgb(212,65,23)"/><text x="77.1967%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (46 samples, 0.94%)</title><rect x="76.9467%" y="517" width="0.9401%" height="15" fill="rgb(230,222,46)"/><text x="77.1967%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.22%)</title><rect x="77.6620%" y="501" width="0.2248%" height="15" fill="rgb(215,135,32)"/><text x="77.9120%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.20%)</title><rect x="77.6824%" y="485" width="0.2044%" height="15" fill="rgb(246,101,22)"/><text x="77.9324%" y="495.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (84 samples, 1.72%)</title><rect x="76.3335%" y="741" width="1.7167%" height="15" fill="rgb(206,107,13)"/><text x="76.5835%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (77 samples, 1.57%)</title><rect x="76.4766%" y="725" width="1.5737%" height="15" fill="rgb(250,100,44)"/><text x="76.7266%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (77 samples, 1.57%)</title><rect x="76.4766%" y="709" width="1.5737%" height="15" fill="rgb(231,147,38)"/><text x="76.7266%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (77 samples, 1.57%)</title><rect x="76.4766%" y="693" width="1.5737%" height="15" fill="rgb(229,8,40)"/><text x="76.7266%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (77 samples, 1.57%)</title><rect x="76.4766%" y="677" width="1.5737%" height="15" fill="rgb(221,135,30)"/><text x="76.7266%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (77 samples, 1.57%)</title><rect x="76.4766%" y="661" width="1.5737%" height="15" fill="rgb(249,193,18)"/><text x="76.7266%" y="671.50"></text></g><g><title>alloc::fmt::format (71 samples, 1.45%)</title><rect x="76.5992%" y="645" width="1.4511%" height="15" fill="rgb(209,133,39)"/><text x="76.8492%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (69 samples, 1.41%)</title><rect x="76.6401%" y="629" width="1.4102%" height="15" fill="rgb(232,100,14)"/><text x="76.8901%" y="639.50"></text></g><g><title>core::fmt::write (69 samples, 1.41%)</title><rect x="76.6401%" y="613" width="1.4102%" height="15" fill="rgb(224,185,1)"/><text x="76.8901%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.25%)</title><rect x="78.4999%" y="645" width="0.2452%" height="15" fill="rgb(223,139,8)"/><text x="78.7499%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::get_next_precedence (10 samples, 0.20%)</title><rect x="78.7451%" y="645" width="0.2044%" height="15" fill="rgb(232,213,38)"/><text x="78.9951%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (33 samples, 0.67%)</title><rect x="78.2955%" y="693" width="0.6744%" height="15" fill="rgb(207,94,22)"/><text x="78.5455%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (31 samples, 0.63%)</title><rect x="78.3364%" y="677" width="0.6336%" height="15" fill="rgb(219,183,54)"/><text x="78.5864%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (28 samples, 0.57%)</title><rect x="78.3977%" y="661" width="0.5722%" height="15" fill="rgb(216,185,54)"/><text x="78.6477%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.12%)</title><rect x="79.3378%" y="405" width="0.1226%" height="15" fill="rgb(254,217,39)"/><text x="79.5878%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="79.3378%" y="389" width="0.1226%" height="15" fill="rgb(240,178,23)"/><text x="79.5878%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (6 samples, 0.12%)</title><rect x="79.3378%" y="373" width="0.1226%" height="15" fill="rgb(218,11,47)"/><text x="79.5878%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.10%)</title><rect x="79.3583%" y="357" width="0.1022%" height="15" fill="rgb(218,51,51)"/><text x="79.6083%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.10%)</title><rect x="79.3583%" y="341" width="0.1022%" height="15" fill="rgb(238,126,27)"/><text x="79.6083%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (5 samples, 0.10%)</title><rect x="79.3583%" y="325" width="0.1022%" height="15" fill="rgb(249,202,22)"/><text x="79.6083%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.10%)</title><rect x="79.3583%" y="309" width="0.1022%" height="15" fill="rgb(254,195,49)"/><text x="79.6083%" y="319.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.10%)</title><rect x="79.3583%" y="293" width="0.1022%" height="15" fill="rgb(208,123,14)"/><text x="79.6083%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (8 samples, 0.16%)</title><rect x="79.3378%" y="501" width="0.1635%" height="15" fill="rgb(224,200,8)"/><text x="79.5878%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (8 samples, 0.16%)</title><rect x="79.3378%" y="485" width="0.1635%" height="15" fill="rgb(217,61,36)"/><text x="79.5878%" y="495.50"></text></g><g><title>alloc::string::String::push_str (8 samples, 0.16%)</title><rect x="79.3378%" y="469" width="0.1635%" height="15" fill="rgb(206,35,45)"/><text x="79.5878%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (8 samples, 0.16%)</title><rect x="79.3378%" y="453" width="0.1635%" height="15" fill="rgb(217,65,33)"/><text x="79.5878%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.16%)</title><rect x="79.3378%" y="437" width="0.1635%" height="15" fill="rgb(222,158,48)"/><text x="79.5878%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (8 samples, 0.16%)</title><rect x="79.3378%" y="421" width="0.1635%" height="15" fill="rgb(254,2,54)"/><text x="79.5878%" y="431.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::fmt::Display&gt;::fmt (11 samples, 0.22%)</title><rect x="79.2970%" y="597" width="0.2248%" height="15" fill="rgb(250,143,38)"/><text x="79.5470%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (10 samples, 0.20%)</title><rect x="79.3174%" y="581" width="0.2044%" height="15" fill="rgb(248,25,0)"/><text x="79.5674%" y="591.50"></text></g><g><title>core::fmt::write (10 samples, 0.20%)</title><rect x="79.3174%" y="565" width="0.2044%" height="15" fill="rgb(206,152,27)"/><text x="79.5674%" y="575.50"></text></g><g><title>&lt;sql_parser::tokenizer::Word as core::fmt::Display&gt;::fmt (9 samples, 0.18%)</title><rect x="79.3378%" y="549" width="0.1839%" height="15" fill="rgb(240,77,30)"/><text x="79.5878%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (9 samples, 0.18%)</title><rect x="79.3378%" y="533" width="0.1839%" height="15" fill="rgb(231,5,3)"/><text x="79.5878%" y="543.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="79.3378%" y="517" width="0.1839%" height="15" fill="rgb(207,226,32)"/><text x="79.5878%" y="527.50"></text></g><g><title>alloc::fmt::format (17 samples, 0.35%)</title><rect x="79.1948%" y="645" width="0.3474%" height="15" fill="rgb(222,207,47)"/><text x="79.4448%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (16 samples, 0.33%)</title><rect x="79.2152%" y="629" width="0.3270%" height="15" fill="rgb(229,115,45)"/><text x="79.4652%" y="639.50"></text></g><g><title>core::fmt::write (16 samples, 0.33%)</title><rect x="79.2152%" y="613" width="0.3270%" height="15" fill="rgb(224,191,6)"/><text x="79.4652%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (26 samples, 0.53%)</title><rect x="79.0313%" y="677" width="0.5314%" height="15" fill="rgb(230,227,24)"/><text x="79.2813%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::expected (22 samples, 0.45%)</title><rect x="79.1130%" y="661" width="0.4496%" height="15" fill="rgb(228,80,19)"/><text x="79.3630%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (70 samples, 1.43%)</title><rect x="78.2138%" y="741" width="1.4306%" height="15" fill="rgb(247,229,0)"/><text x="78.4638%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (66 samples, 1.35%)</title><rect x="78.2955%" y="725" width="1.3489%" height="15" fill="rgb(237,194,15)"/><text x="78.5455%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (66 samples, 1.35%)</title><rect x="78.2955%" y="709" width="1.3489%" height="15" fill="rgb(219,203,20)"/><text x="78.5455%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (33 samples, 0.67%)</title><rect x="78.9700%" y="693" width="0.6744%" height="15" fill="rgb(234,128,8)"/><text x="79.2200%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.12%)</title><rect x="80.0736%" y="645" width="0.1226%" height="15" fill="rgb(248,202,8)"/><text x="80.3236%" y="655.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.12%)</title><rect x="80.0736%" y="629" width="0.1226%" height="15" fill="rgb(206,104,37)"/><text x="80.3236%" y="639.50"></text></g><g><title>_int_realloc (6 samples, 0.12%)</title><rect x="80.0736%" y="613" width="0.1226%" height="15" fill="rgb(223,8,27)"/><text x="80.3236%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (27 samples, 0.55%)</title><rect x="79.6853%" y="661" width="0.5518%" height="15" fill="rgb(216,217,28)"/><text x="79.9353%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="80.4006%" y="645" width="0.1022%" height="15" fill="rgb(249,199,1)"/><text x="80.6506%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="80.4006%" y="629" width="0.1022%" height="15" fill="rgb(240,85,17)"/><text x="80.6506%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="80.4006%" y="613" width="0.1022%" height="15" fill="rgb(206,108,45)"/><text x="80.6506%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.10%)</title><rect x="80.4006%" y="597" width="0.1022%" height="15" fill="rgb(245,210,41)"/><text x="80.6506%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.10%)</title><rect x="80.4006%" y="581" width="0.1022%" height="15" fill="rgb(206,13,37)"/><text x="80.6506%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.10%)</title><rect x="80.4006%" y="565" width="0.1022%" height="15" fill="rgb(250,61,18)"/><text x="80.6506%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (5 samples, 0.10%)</title><rect x="80.4006%" y="549" width="0.1022%" height="15" fill="rgb(235,172,48)"/><text x="80.6506%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.10%)</title><rect x="80.4006%" y="533" width="0.1022%" height="15" fill="rgb(249,201,17)"/><text x="80.6506%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.10%)</title><rect x="80.4006%" y="517" width="0.1022%" height="15" fill="rgb(219,208,6)"/><text x="80.6506%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (5 samples, 0.10%)</title><rect x="80.4006%" y="501" width="0.1022%" height="15" fill="rgb(248,31,23)"/><text x="80.6506%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.10%)</title><rect x="80.4006%" y="485" width="0.1022%" height="15" fill="rgb(245,15,42)"/><text x="80.6506%" y="495.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.10%)</title><rect x="80.4006%" y="469" width="0.1022%" height="15" fill="rgb(222,217,39)"/><text x="80.6506%" y="479.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (14 samples, 0.29%)</title><rect x="80.2371%" y="661" width="0.2861%" height="15" fill="rgb(210,219,27)"/><text x="80.4871%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (57 samples, 1.16%)</title><rect x="79.6444%" y="677" width="1.1649%" height="15" fill="rgb(252,166,36)"/><text x="79.8944%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (14 samples, 0.29%)</title><rect x="80.5232%" y="661" width="0.2861%" height="15" fill="rgb(245,132,34)"/><text x="80.7732%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (73 samples, 1.49%)</title><rect x="79.6444%" y="741" width="1.4919%" height="15" fill="rgb(236,54,3)"/><text x="79.8944%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (73 samples, 1.49%)</title><rect x="79.6444%" y="725" width="1.4919%" height="15" fill="rgb(241,173,43)"/><text x="79.8944%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (73 samples, 1.49%)</title><rect x="79.6444%" y="709" width="1.4919%" height="15" fill="rgb(215,190,9)"/><text x="79.8944%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (73 samples, 1.49%)</title><rect x="79.6444%" y="693" width="1.4919%" height="15" fill="rgb(242,101,16)"/><text x="79.8944%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (16 samples, 0.33%)</title><rect x="80.8093%" y="677" width="0.3270%" height="15" fill="rgb(223,190,21)"/><text x="81.0593%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (5 samples, 0.10%)</title><rect x="81.0341%" y="661" width="0.1022%" height="15" fill="rgb(215,228,25)"/><text x="81.2841%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (10 samples, 0.20%)</title><rect x="81.4020%" y="677" width="0.2044%" height="15" fill="rgb(225,36,22)"/><text x="81.6520%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (17 samples, 0.35%)</title><rect x="81.2794%" y="693" width="0.3474%" height="15" fill="rgb(251,106,46)"/><text x="81.5294%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (9 samples, 0.18%)</title><rect x="81.8516%" y="677" width="0.1839%" height="15" fill="rgb(208,90,1)"/><text x="82.1016%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::get_next_precedence (5 samples, 0.10%)</title><rect x="81.9334%" y="661" width="0.1022%" height="15" fill="rgb(243,10,4)"/><text x="82.1834%" y="671.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (7 samples, 0.14%)</title><rect x="82.4647%" y="661" width="0.1431%" height="15" fill="rgb(212,137,27)"/><text x="82.7147%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="82.5056%" y="645" width="0.1022%" height="15" fill="rgb(231,220,49)"/><text x="82.7556%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.10%)</title><rect x="82.5056%" y="629" width="0.1022%" height="15" fill="rgb(237,96,20)"/><text x="82.7556%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.10%)</title><rect x="82.5056%" y="613" width="0.1022%" height="15" fill="rgb(239,229,30)"/><text x="82.7556%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.10%)</title><rect x="82.5056%" y="597" width="0.1022%" height="15" fill="rgb(219,65,33)"/><text x="82.7556%" y="607.50"></text></g><g><title>__memcmp_avx2_movbe (14 samples, 0.29%)</title><rect x="82.6282%" y="661" width="0.2861%" height="15" fill="rgb(243,134,7)"/><text x="82.8782%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (44 samples, 0.90%)</title><rect x="82.0356%" y="677" width="0.8992%" height="15" fill="rgb(216,177,54)"/><text x="82.2856%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (110 samples, 2.25%)</title><rect x="81.1363%" y="741" width="2.2481%" height="15" fill="rgb(211,160,20)"/><text x="81.3863%" y="751.50">s..</text></g><g><title>sql_parser::parser::Parser::check_descent (110 samples, 2.25%)</title><rect x="81.1363%" y="725" width="2.2481%" height="15" fill="rgb(239,85,39)"/><text x="81.3863%" y="735.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (109 samples, 2.23%)</title><rect x="81.1568%" y="709" width="2.2277%" height="15" fill="rgb(232,125,22)"/><text x="81.4068%" y="719.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_select (86 samples, 1.76%)</title><rect x="81.6268%" y="693" width="1.7576%" height="15" fill="rgb(244,57,34)"/><text x="81.8768%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (19 samples, 0.39%)</title><rect x="82.9961%" y="677" width="0.3883%" height="15" fill="rgb(214,203,32)"/><text x="83.2461%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (17 samples, 0.35%)</title><rect x="83.0370%" y="661" width="0.3474%" height="15" fill="rgb(207,58,43)"/><text x="83.2870%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (16 samples, 0.33%)</title><rect x="84.2632%" y="677" width="0.3270%" height="15" fill="rgb(215,193,15)"/><text x="84.5132%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (48 samples, 0.98%)</title><rect x="83.6501%" y="693" width="0.9810%" height="15" fill="rgb(232,15,44)"/><text x="83.9001%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (60 samples, 1.23%)</title><rect x="83.4457%" y="709" width="1.2262%" height="15" fill="rgb(212,3,48)"/><text x="83.6957%" y="719.50"></text></g><g><title>sql_parser::parser::parse_statements (61 samples, 1.25%)</title><rect x="83.4457%" y="741" width="1.2467%" height="15" fill="rgb(218,128,7)"/><text x="83.6957%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (61 samples, 1.25%)</title><rect x="83.4457%" y="725" width="1.2467%" height="15" fill="rgb(226,216,39)"/><text x="83.6957%" y="735.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (12 samples, 0.25%)</title><rect x="84.8764%" y="485" width="0.2452%" height="15" fill="rgb(243,47,51)"/><text x="85.1264%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (13 samples, 0.27%)</title><rect x="84.8764%" y="517" width="0.2657%" height="15" fill="rgb(241,183,40)"/><text x="85.1264%" y="527.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (13 samples, 0.27%)</title><rect x="84.8764%" y="501" width="0.2657%" height="15" fill="rgb(231,217,32)"/><text x="85.1264%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.33%)</title><rect x="84.8764%" y="565" width="0.3270%" height="15" fill="rgb(229,61,38)"/><text x="85.1264%" y="575.50"></text></g><g><title>core::fmt::write (16 samples, 0.33%)</title><rect x="84.8764%" y="549" width="0.3270%" height="15" fill="rgb(225,210,5)"/><text x="85.1264%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (16 samples, 0.33%)</title><rect x="84.8764%" y="533" width="0.3270%" height="15" fill="rgb(231,79,45)"/><text x="85.1264%" y="543.50"></text></g><g><title>start_thread (17 samples, 0.35%)</title><rect x="84.8764%" y="741" width="0.3474%" height="15" fill="rgb(224,100,7)"/><text x="85.1264%" y="751.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (17 samples, 0.35%)</title><rect x="84.8764%" y="725" width="0.3474%" height="15" fill="rgb(241,198,18)"/><text x="85.1264%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (17 samples, 0.35%)</title><rect x="84.8764%" y="709" width="0.3474%" height="15" fill="rgb(252,97,53)"/><text x="85.1264%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (17 samples, 0.35%)</title><rect x="84.8764%" y="693" width="0.3474%" height="15" fill="rgb(220,88,7)"/><text x="85.1264%" y="703.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (17 samples, 0.35%)</title><rect x="84.8764%" y="677" width="0.3474%" height="15" fill="rgb(213,176,14)"/><text x="85.1264%" y="687.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (17 samples, 0.35%)</title><rect x="84.8764%" y="661" width="0.3474%" height="15" fill="rgb(246,73,7)"/><text x="85.1264%" y="671.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (17 samples, 0.35%)</title><rect x="84.8764%" y="645" width="0.3474%" height="15" fill="rgb(245,64,36)"/><text x="85.1264%" y="655.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (17 samples, 0.35%)</title><rect x="84.8764%" y="629" width="0.3474%" height="15" fill="rgb(245,80,10)"/><text x="85.1264%" y="639.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (17 samples, 0.35%)</title><rect x="84.8764%" y="613" width="0.3474%" height="15" fill="rgb(232,107,50)"/><text x="85.1264%" y="623.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (17 samples, 0.35%)</title><rect x="84.8764%" y="597" width="0.3474%" height="15" fill="rgb(253,3,0)"/><text x="85.1264%" y="607.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (17 samples, 0.35%)</title><rect x="84.8764%" y="581" width="0.3474%" height="15" fill="rgb(212,99,53)"/><text x="85.1264%" y="591.50"></text></g><g><title>[unknown] (3,710 samples, 75.82%)</title><rect x="9.6260%" y="757" width="75.8226%" height="15" fill="rgb(249,111,54)"/><text x="9.8760%" y="767.50">[unknown]</text></g><g><title>__malloc_arena_thread_freeres (5 samples, 0.10%)</title><rect x="85.4486%" y="725" width="0.1022%" height="15" fill="rgb(249,55,30)"/><text x="85.6986%" y="735.50"></text></g><g><title>_int_free (5 samples, 0.10%)</title><rect x="85.4486%" y="709" width="0.1022%" height="15" fill="rgb(237,47,42)"/><text x="85.6986%" y="719.50"></text></g><g><title>malloc_consolidate (8 samples, 0.16%)</title><rect x="85.8369%" y="533" width="0.1635%" height="15" fill="rgb(211,20,18)"/><text x="86.0869%" y="543.50"></text></g><g><title>_int_free (11 samples, 0.22%)</title><rect x="85.7960%" y="549" width="0.2248%" height="15" fill="rgb(231,203,46)"/><text x="86.0460%" y="559.50"></text></g><g><title>_int_free (7 samples, 0.14%)</title><rect x="86.0208%" y="533" width="0.1431%" height="15" fill="rgb(237,142,3)"/><text x="86.2708%" y="543.50"></text></g><g><title>_int_free (6 samples, 0.12%)</title><rect x="86.2661%" y="517" width="0.1226%" height="15" fill="rgb(241,107,1)"/><text x="86.5161%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (34 samples, 0.69%)</title><rect x="85.7143%" y="597" width="0.6949%" height="15" fill="rgb(229,83,13)"/><text x="85.9643%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (32 samples, 0.65%)</title><rect x="85.7552%" y="581" width="0.6540%" height="15" fill="rgb(241,91,40)"/><text x="86.0052%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.63%)</title><rect x="85.7756%" y="565" width="0.6336%" height="15" fill="rgb(225,3,45)"/><text x="86.0256%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (19 samples, 0.39%)</title><rect x="86.0208%" y="549" width="0.3883%" height="15" fill="rgb(244,223,14)"/><text x="86.2708%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.25%)</title><rect x="86.1639%" y="533" width="0.2452%" height="15" fill="rgb(224,124,37)"/><text x="86.4139%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.12%)</title><rect x="86.4296%" y="581" width="0.1226%" height="15" fill="rgb(251,171,30)"/><text x="86.6796%" y="591.50"></text></g><g><title>core::fmt::write (5 samples, 0.10%)</title><rect x="86.5727%" y="549" width="0.1022%" height="15" fill="rgb(236,46,54)"/><text x="86.8227%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.12%)</title><rect x="86.5727%" y="565" width="0.1226%" height="15" fill="rgb(245,213,5)"/><text x="86.8227%" y="575.50"></text></g><g><title>msql_srv::resultset::QueryResultWriter&lt;W&gt;::start (6 samples, 0.12%)</title><rect x="86.7975%" y="565" width="0.1226%" height="15" fill="rgb(230,144,27)"/><text x="87.0475%" y="575.50"></text></g><g><title>msql_srv::writers::column_definitions (6 samples, 0.12%)</title><rect x="86.7975%" y="549" width="0.1226%" height="15" fill="rgb(220,86,6)"/><text x="87.0475%" y="559.50"></text></g><g><title>&lt;i64 as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (7 samples, 0.14%)</title><rect x="86.9814%" y="533" width="0.1431%" height="15" fill="rgb(240,20,13)"/><text x="87.2314%" y="543.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (36 samples, 0.74%)</title><rect x="86.4092%" y="597" width="0.7357%" height="15" fill="rgb(217,89,34)"/><text x="86.6592%" y="607.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (29 samples, 0.59%)</title><rect x="86.5522%" y="581" width="0.5927%" height="15" fill="rgb(229,13,5)"/><text x="86.8022%" y="591.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (9 samples, 0.18%)</title><rect x="86.9610%" y="565" width="0.1839%" height="15" fill="rgb(244,67,35)"/><text x="87.2110%" y="575.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (9 samples, 0.18%)</title><rect x="86.9610%" y="549" width="0.1839%" height="15" fill="rgb(221,40,2)"/><text x="87.2110%" y="559.50"></text></g><g><title>decor_mem::stats::get_qtype (25 samples, 0.51%)</title><rect x="87.1449%" y="597" width="0.5109%" height="15" fill="rgb(237,157,21)"/><text x="87.3949%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (22 samples, 0.45%)</title><rect x="87.2062%" y="581" width="0.4496%" height="15" fill="rgb(222,94,11)"/><text x="87.4562%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (21 samples, 0.43%)</title><rect x="87.2267%" y="565" width="0.4292%" height="15" fill="rgb(249,113,6)"/><text x="87.4767%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (21 samples, 0.43%)</title><rect x="87.2267%" y="549" width="0.4292%" height="15" fill="rgb(238,137,36)"/><text x="87.4767%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.37%)</title><rect x="87.2880%" y="533" width="0.3679%" height="15" fill="rgb(210,102,26)"/><text x="87.5380%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.29%)</title><rect x="87.3697%" y="517" width="0.2861%" height="15" fill="rgb(218,30,30)"/><text x="87.6197%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.10%)</title><rect x="87.5536%" y="501" width="0.1022%" height="15" fill="rgb(214,67,26)"/><text x="87.8036%" y="511.50"></text></g><g><title>log::__private_api_log (8 samples, 0.16%)</title><rect x="87.6558%" y="597" width="0.1635%" height="15" fill="rgb(251,9,53)"/><text x="87.9058%" y="607.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log (8 samples, 0.16%)</title><rect x="87.6558%" y="581" width="0.1635%" height="15" fill="rgb(228,204,25)"/><text x="87.9058%" y="591.50"></text></g><g><title>&lt;env_logger::Logger as log::Log&gt;::log::{{closure}} (8 samples, 0.16%)</title><rect x="87.6558%" y="565" width="0.1635%" height="15" fill="rgb(207,153,8)"/><text x="87.9058%" y="575.50"></text></g><g><title>env_logger::fmt::writer::termcolor::imp::BufferWriter::print (7 samples, 0.14%)</title><rect x="87.6763%" y="549" width="0.1431%" height="15" fill="rgb(242,9,16)"/><text x="87.9263%" y="559.50"></text></g><g><title>std::io::stdio::_eprint (6 samples, 0.12%)</title><rect x="87.6967%" y="533" width="0.1226%" height="15" fill="rgb(217,211,10)"/><text x="87.9467%" y="543.50"></text></g><g><title>std::io::stdio::print_to (6 samples, 0.12%)</title><rect x="87.6967%" y="517" width="0.1226%" height="15" fill="rgb(219,228,52)"/><text x="87.9467%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (6 samples, 0.12%)</title><rect x="87.6967%" y="501" width="0.1226%" height="15" fill="rgb(231,92,29)"/><text x="87.9467%" y="511.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (6 samples, 0.12%)</title><rect x="87.6967%" y="485" width="0.1226%" height="15" fill="rgb(232,8,23)"/><text x="87.9467%" y="495.50"></text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (6 samples, 0.12%)</title><rect x="87.6967%" y="469" width="0.1226%" height="15" fill="rgb(216,211,34)"/><text x="87.9467%" y="479.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (6 samples, 0.12%)</title><rect x="87.6967%" y="453" width="0.1226%" height="15" fill="rgb(236,151,0)"/><text x="87.9467%" y="463.50"></text></g><g><title>std::io::Write::write_fmt (6 samples, 0.12%)</title><rect x="87.6967%" y="437" width="0.1226%" height="15" fill="rgb(209,168,3)"/><text x="87.9467%" y="447.50"></text></g><g><title>core::fmt::write (6 samples, 0.12%)</title><rect x="87.6967%" y="421" width="0.1226%" height="15" fill="rgb(208,129,28)"/><text x="87.9467%" y="431.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.12%)</title><rect x="87.6967%" y="405" width="0.1226%" height="15" fill="rgb(229,78,22)"/><text x="87.9467%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (6 samples, 0.12%)</title><rect x="87.6967%" y="389" width="0.1226%" height="15" fill="rgb(228,187,13)"/><text x="87.9467%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (6 samples, 0.12%)</title><rect x="87.6967%" y="373" width="0.1226%" height="15" fill="rgb(240,119,24)"/><text x="87.9467%" y="383.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.12%)</title><rect x="87.6967%" y="357" width="0.1226%" height="15" fill="rgb(209,194,42)"/><text x="87.9467%" y="367.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (6 samples, 0.12%)</title><rect x="87.6967%" y="341" width="0.1226%" height="15" fill="rgb(247,200,46)"/><text x="87.9467%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (6 samples, 0.12%)</title><rect x="87.6967%" y="325" width="0.1226%" height="15" fill="rgb(218,76,16)"/><text x="87.9467%" y="335.50"></text></g><g><title>__libc_write (6 samples, 0.12%)</title><rect x="87.6967%" y="309" width="0.1226%" height="15" fill="rgb(225,21,48)"/><text x="87.9467%" y="319.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="87.6967%" y="293" width="0.1226%" height="15" fill="rgb(239,223,50)"/><text x="87.9467%" y="303.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="87.6967%" y="277" width="0.1226%" height="15" fill="rgb(244,45,21)"/><text x="87.9467%" y="287.50"></text></g><g><title>ksys_write (6 samples, 0.12%)</title><rect x="87.6967%" y="261" width="0.1226%" height="15" fill="rgb(232,33,43)"/><text x="87.9467%" y="271.50"></text></g><g><title>vfs_write (6 samples, 0.12%)</title><rect x="87.6967%" y="245" width="0.1226%" height="15" fill="rgb(209,8,3)"/><text x="87.9467%" y="255.50"></text></g><g><title>tty_write (5 samples, 0.10%)</title><rect x="87.7171%" y="229" width="0.1022%" height="15" fill="rgb(214,25,53)"/><text x="87.9671%" y="239.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (114 samples, 2.33%)</title><rect x="85.5917%" y="613" width="2.3299%" height="15" fill="rgb(254,186,54)"/><text x="85.8417%" y="623.50">&lt;..</text></g><g><title>malloc_consolidate (8 samples, 0.16%)</title><rect x="88.2076%" y="501" width="0.1635%" height="15" fill="rgb(208,174,49)"/><text x="88.4576%" y="511.50"></text></g><g><title>_int_free (10 samples, 0.20%)</title><rect x="88.2076%" y="517" width="0.2044%" height="15" fill="rgb(233,191,51)"/><text x="88.4576%" y="527.50"></text></g><g><title>_int_free (8 samples, 0.16%)</title><rect x="88.4733%" y="501" width="0.1635%" height="15" fill="rgb(222,134,10)"/><text x="88.7233%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.22%)</title><rect x="88.7799%" y="485" width="0.2248%" height="15" fill="rgb(230,226,20)"/><text x="89.0299%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (22 samples, 0.45%)</title><rect x="88.6368%" y="501" width="0.4496%" height="15" fill="rgb(251,111,25)"/><text x="88.8868%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 1.19%)</title><rect x="87.9215%" y="581" width="1.1854%" height="15" fill="rgb(224,40,46)"/><text x="88.1715%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (53 samples, 1.08%)</title><rect x="88.0237%" y="565" width="1.0832%" height="15" fill="rgb(236,108,47)"/><text x="88.2737%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (52 samples, 1.06%)</title><rect x="88.0441%" y="549" width="1.0627%" height="15" fill="rgb(234,93,0)"/><text x="88.2941%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (48 samples, 0.98%)</title><rect x="88.1259%" y="533" width="0.9810%" height="15" fill="rgb(224,213,32)"/><text x="88.3759%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (34 samples, 0.69%)</title><rect x="88.4120%" y="517" width="0.6949%" height="15" fill="rgb(251,11,48)"/><text x="88.6620%" y="527.50"></text></g><g><title>do_syscall_64 (11 samples, 0.22%)</title><rect x="89.1478%" y="485" width="0.2248%" height="15" fill="rgb(236,173,5)"/><text x="89.3978%" y="495.50"></text></g><g><title>ksys_write (11 samples, 0.22%)</title><rect x="89.1478%" y="469" width="0.2248%" height="15" fill="rgb(230,95,12)"/><text x="89.3978%" y="479.50"></text></g><g><title>vfs_write (11 samples, 0.22%)</title><rect x="89.1478%" y="453" width="0.2248%" height="15" fill="rgb(232,209,1)"/><text x="89.3978%" y="463.50"></text></g><g><title>new_sync_write (10 samples, 0.20%)</title><rect x="89.1682%" y="437" width="0.2044%" height="15" fill="rgb(232,6,1)"/><text x="89.4182%" y="447.50"></text></g><g><title>ext4_buffered_write_iter (8 samples, 0.16%)</title><rect x="89.2091%" y="421" width="0.1635%" height="15" fill="rgb(210,224,50)"/><text x="89.4591%" y="431.50"></text></g><g><title>generic_perform_write (8 samples, 0.16%)</title><rect x="89.2091%" y="405" width="0.1635%" height="15" fill="rgb(228,127,35)"/><text x="89.4591%" y="415.50"></text></g><g><title>ext4_da_write_end (7 samples, 0.14%)</title><rect x="89.2295%" y="389" width="0.1431%" height="15" fill="rgb(245,102,45)"/><text x="89.4795%" y="399.50"></text></g><g><title>generic_write_end (7 samples, 0.14%)</title><rect x="89.2295%" y="373" width="0.1431%" height="15" fill="rgb(214,1,49)"/><text x="89.4795%" y="383.50"></text></g><g><title>__mark_inode_dirty (5 samples, 0.10%)</title><rect x="89.2704%" y="357" width="0.1022%" height="15" fill="rgb(226,163,40)"/><text x="89.5204%" y="367.50"></text></g><g><title>ext4_dirty_inode (5 samples, 0.10%)</title><rect x="89.2704%" y="341" width="0.1022%" height="15" fill="rgb(239,212,28)"/><text x="89.5204%" y="351.50"></text></g><g><title>__ext4_mark_inode_dirty (5 samples, 0.10%)</title><rect x="89.2704%" y="325" width="0.1022%" height="15" fill="rgb(220,20,13)"/><text x="89.5204%" y="335.50"></text></g><g><title>entry_SYSCALL_64 (13 samples, 0.27%)</title><rect x="89.1478%" y="501" width="0.2657%" height="15" fill="rgb(210,164,35)"/><text x="89.3978%" y="511.50"></text></g><g><title>__libc_write (15 samples, 0.31%)</title><rect x="89.1478%" y="517" width="0.3066%" height="15" fill="rgb(248,109,41)"/><text x="89.3978%" y="527.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (16 samples, 0.33%)</title><rect x="89.1478%" y="565" width="0.3270%" height="15" fill="rgb(238,23,50)"/><text x="89.3978%" y="575.50"></text></g><g><title>std::sys::unix::fs::File::write (16 samples, 0.33%)</title><rect x="89.1478%" y="549" width="0.3270%" height="15" fill="rgb(211,48,49)"/><text x="89.3978%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (16 samples, 0.33%)</title><rect x="89.1478%" y="533" width="0.3270%" height="15" fill="rgb(223,36,21)"/><text x="89.3978%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (79 samples, 1.61%)</title><rect x="87.9215%" y="613" width="1.6146%" height="15" fill="rgb(207,123,46)"/><text x="88.1715%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (79 samples, 1.61%)</title><rect x="87.9215%" y="597" width="1.6146%" height="15" fill="rgb(240,218,32)"/><text x="88.1715%" y="607.50"></text></g><g><title>decor_mem::stats::print_stats (19 samples, 0.39%)</title><rect x="89.1478%" y="581" width="0.3883%" height="15" fill="rgb(252,5,43)"/><text x="89.3978%" y="591.50"></text></g><g><title>dequeue_task_fair (6 samples, 0.12%)</title><rect x="90.2718%" y="325" width="0.1226%" height="15" fill="rgb(252,84,19)"/><text x="90.5218%" y="335.50"></text></g><g><title>sk_wait_data (30 samples, 0.61%)</title><rect x="89.9857%" y="405" width="0.6131%" height="15" fill="rgb(243,152,39)"/><text x="90.2357%" y="415.50"></text></g><g><title>wait_woken (25 samples, 0.51%)</title><rect x="90.0879%" y="389" width="0.5109%" height="15" fill="rgb(234,160,15)"/><text x="90.3379%" y="399.50"></text></g><g><title>schedule_timeout (25 samples, 0.51%)</title><rect x="90.0879%" y="373" width="0.5109%" height="15" fill="rgb(237,34,20)"/><text x="90.3379%" y="383.50"></text></g><g><title>schedule (25 samples, 0.51%)</title><rect x="90.0879%" y="357" width="0.5109%" height="15" fill="rgb(229,97,13)"/><text x="90.3379%" y="367.50"></text></g><g><title>__schedule (24 samples, 0.49%)</title><rect x="90.1083%" y="341" width="0.4905%" height="15" fill="rgb(234,71,50)"/><text x="90.3583%" y="351.50"></text></g><g><title>skb_copy_datagram_iter (6 samples, 0.12%)</title><rect x="90.5988%" y="405" width="0.1226%" height="15" fill="rgb(253,155,4)"/><text x="90.8488%" y="415.50"></text></g><g><title>__skb_datagram_iter (5 samples, 0.10%)</title><rect x="90.6193%" y="389" width="0.1022%" height="15" fill="rgb(222,185,37)"/><text x="90.8693%" y="399.50"></text></g><g><title>inet_recvmsg (48 samples, 0.98%)</title><rect x="89.7609%" y="437" width="0.9810%" height="15" fill="rgb(251,177,13)"/><text x="90.0109%" y="447.50"></text></g><g><title>tcp_recvmsg (46 samples, 0.94%)</title><rect x="89.8018%" y="421" width="0.9401%" height="15" fill="rgb(250,179,40)"/><text x="90.0518%" y="431.50"></text></g><g><title>__x64_sys_recvfrom (55 samples, 1.12%)</title><rect x="89.6791%" y="469" width="1.1241%" height="15" fill="rgb(242,44,2)"/><text x="89.9291%" y="479.50"></text></g><g><title>__sys_recvfrom (55 samples, 1.12%)</title><rect x="89.6791%" y="453" width="1.1241%" height="15" fill="rgb(216,177,13)"/><text x="89.9291%" y="463.50"></text></g><g><title>do_syscall_64 (57 samples, 1.16%)</title><rect x="89.6791%" y="485" width="1.1649%" height="15" fill="rgb(216,106,43)"/><text x="89.9291%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (60 samples, 1.23%)</title><rect x="89.6791%" y="501" width="1.2262%" height="15" fill="rgb(216,183,2)"/><text x="89.9291%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (64 samples, 1.31%)</title><rect x="89.6178%" y="597" width="1.3080%" height="15" fill="rgb(249,75,3)"/><text x="89.8678%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (62 samples, 1.27%)</title><rect x="89.6587%" y="581" width="1.2671%" height="15" fill="rgb(219,67,39)"/><text x="89.9087%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (62 samples, 1.27%)</title><rect x="89.6587%" y="565" width="1.2671%" height="15" fill="rgb(253,228,2)"/><text x="89.9087%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (62 samples, 1.27%)</title><rect x="89.6587%" y="549" width="1.2671%" height="15" fill="rgb(235,138,27)"/><text x="89.9087%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (62 samples, 1.27%)</title><rect x="89.6587%" y="533" width="1.2671%" height="15" fill="rgb(236,97,51)"/><text x="89.9087%" y="543.50"></text></g><g><title>__libc_recv (62 samples, 1.27%)</title><rect x="89.6587%" y="517" width="1.2671%" height="15" fill="rgb(240,80,30)"/><text x="89.9087%" y="527.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (67 samples, 1.37%)</title><rect x="89.5769%" y="613" width="1.3693%" height="15" fill="rgb(230,178,19)"/><text x="89.8269%" y="623.50"></text></g><g><title>__dev_queue_xmit (14 samples, 0.29%)</title><rect x="91.5185%" y="341" width="0.2861%" height="15" fill="rgb(210,190,27)"/><text x="91.7685%" y="351.50"></text></g><g><title>enqueue_task (5 samples, 0.10%)</title><rect x="92.3360%" y="53" width="0.1022%" height="15" fill="rgb(222,107,31)"/><text x="92.5860%" y="63.50"></text></g><g><title>enqueue_task_fair (6 samples, 0.12%)</title><rect x="92.4382%" y="53" width="0.1226%" height="15" fill="rgb(216,127,34)"/><text x="92.6882%" y="63.50"></text></g><g><title>enqueue_entity (5 samples, 0.10%)</title><rect x="92.4586%" y="37" width="0.1022%" height="15" fill="rgb(234,116,52)"/><text x="92.7086%" y="47.50"></text></g><g><title>sock_def_readable (22 samples, 0.45%)</title><rect x="92.2542%" y="117" width="0.4496%" height="15" fill="rgb(222,124,15)"/><text x="92.5042%" y="127.50"></text></g><g><title>__wake_up_common_lock (22 samples, 0.45%)</title><rect x="92.2542%" y="101" width="0.4496%" height="15" fill="rgb(231,179,28)"/><text x="92.5042%" y="111.50"></text></g><g><title>__wake_up_common (22 samples, 0.45%)</title><rect x="92.2542%" y="85" width="0.4496%" height="15" fill="rgb(226,93,45)"/><text x="92.5042%" y="95.50"></text></g><g><title>try_to_wake_up (21 samples, 0.43%)</title><rect x="92.2747%" y="69" width="0.4292%" height="15" fill="rgb(215,8,51)"/><text x="92.5247%" y="79.50"></text></g><g><title>__kfree_skb (5 samples, 0.10%)</title><rect x="92.8469%" y="101" width="0.1022%" height="15" fill="rgb(223,106,5)"/><text x="93.0969%" y="111.50"></text></g><g><title>tcp_ack (24 samples, 0.49%)</title><rect x="92.7039%" y="117" width="0.4905%" height="15" fill="rgb(250,191,5)"/><text x="92.9539%" y="127.50"></text></g><g><title>tcp_v4_do_rcv (51 samples, 1.04%)</title><rect x="92.1725%" y="149" width="1.0423%" height="15" fill="rgb(242,132,44)"/><text x="92.4225%" y="159.50"></text></g><g><title>tcp_rcv_established (51 samples, 1.04%)</title><rect x="92.1725%" y="133" width="1.0423%" height="15" fill="rgb(251,152,29)"/><text x="92.4225%" y="143.50"></text></g><g><title>ip_local_deliver (58 samples, 1.19%)</title><rect x="92.0499%" y="213" width="1.1854%" height="15" fill="rgb(218,179,5)"/><text x="92.2999%" y="223.50"></text></g><g><title>ip_local_deliver_finish (58 samples, 1.19%)</title><rect x="92.0499%" y="197" width="1.1854%" height="15" fill="rgb(227,67,19)"/><text x="92.2999%" y="207.50"></text></g><g><title>ip_protocol_deliver_rcu (58 samples, 1.19%)</title><rect x="92.0499%" y="181" width="1.1854%" height="15" fill="rgb(233,119,31)"/><text x="92.2999%" y="191.50"></text></g><g><title>tcp_v4_rcv (57 samples, 1.16%)</title><rect x="92.0703%" y="165" width="1.1649%" height="15" fill="rgb(241,120,22)"/><text x="92.3203%" y="175.50"></text></g><g><title>__netif_receive_skb_one_core (60 samples, 1.23%)</title><rect x="92.0294%" y="245" width="1.2262%" height="15" fill="rgb(224,102,30)"/><text x="92.2794%" y="255.50"></text></g><g><title>ip_rcv (60 samples, 1.23%)</title><rect x="92.0294%" y="229" width="1.2262%" height="15" fill="rgb(210,164,37)"/><text x="92.2794%" y="239.50"></text></g><g><title>net_rx_action (66 samples, 1.35%)</title><rect x="91.9272%" y="277" width="1.3489%" height="15" fill="rgb(226,191,16)"/><text x="92.1772%" y="287.50"></text></g><g><title>process_backlog (62 samples, 1.27%)</title><rect x="92.0090%" y="261" width="1.2671%" height="15" fill="rgb(214,40,45)"/><text x="92.2590%" y="271.50"></text></g><g><title>__local_bh_enable_ip (73 samples, 1.49%)</title><rect x="91.8046%" y="341" width="1.4919%" height="15" fill="rgb(244,29,26)"/><text x="92.0546%" y="351.50"></text></g><g><title>do_softirq (73 samples, 1.49%)</title><rect x="91.8046%" y="325" width="1.4919%" height="15" fill="rgb(216,16,5)"/><text x="92.0546%" y="335.50"></text></g><g><title>do_softirq_own_stack (71 samples, 1.45%)</title><rect x="91.8455%" y="309" width="1.4511%" height="15" fill="rgb(249,76,35)"/><text x="92.0955%" y="319.50"></text></g><g><title>__do_softirq (71 samples, 1.45%)</title><rect x="91.8455%" y="293" width="1.4511%" height="15" fill="rgb(207,11,44)"/><text x="92.0955%" y="303.50"></text></g><g><title>ip_finish_output2 (91 samples, 1.86%)</title><rect x="91.4572%" y="357" width="1.8598%" height="15" fill="rgb(228,190,49)"/><text x="91.7072%" y="367.50">i..</text></g><g><title>__ip_queue_xmit (99 samples, 2.02%)</title><rect x="91.3141%" y="389" width="2.0233%" height="15" fill="rgb(214,173,12)"/><text x="91.5641%" y="399.50">_..</text></g><g><title>ip_output (93 samples, 1.90%)</title><rect x="91.4367%" y="373" width="1.9007%" height="15" fill="rgb(218,26,35)"/><text x="91.6867%" y="383.50">i..</text></g><g><title>__tcp_transmit_skb (106 samples, 2.17%)</title><rect x="91.2528%" y="405" width="2.1664%" height="15" fill="rgb(220,200,19)"/><text x="91.5028%" y="415.50">_..</text></g><g><title>__tcp_push_pending_frames (115 samples, 2.35%)</title><rect x="91.1506%" y="437" width="2.3503%" height="15" fill="rgb(239,95,49)"/><text x="91.4006%" y="447.50">_..</text></g><g><title>tcp_write_xmit (113 samples, 2.31%)</title><rect x="91.1915%" y="421" width="2.3094%" height="15" fill="rgb(235,85,53)"/><text x="91.4415%" y="431.50">t..</text></g><g><title>sk_stream_alloc_skb (6 samples, 0.12%)</title><rect x="93.5418%" y="437" width="0.1226%" height="15" fill="rgb(233,133,31)"/><text x="93.7918%" y="447.50"></text></g><g><title>__alloc_skb (6 samples, 0.12%)</title><rect x="93.5418%" y="421" width="0.1226%" height="15" fill="rgb(218,25,20)"/><text x="93.7918%" y="431.50"></text></g><g><title>sock_sendmsg (136 samples, 2.78%)</title><rect x="91.0484%" y="485" width="2.7795%" height="15" fill="rgb(252,210,38)"/><text x="91.2984%" y="495.50">so..</text></g><g><title>tcp_sendmsg (136 samples, 2.78%)</title><rect x="91.0484%" y="469" width="2.7795%" height="15" fill="rgb(242,134,21)"/><text x="91.2984%" y="479.50">tc..</text></g><g><title>tcp_sendmsg_locked (132 samples, 2.70%)</title><rect x="91.1302%" y="453" width="2.6977%" height="15" fill="rgb(213,28,48)"/><text x="91.3802%" y="463.50">tc..</text></g><g><title>tcp_send_mss (5 samples, 0.10%)</title><rect x="93.7257%" y="437" width="0.1022%" height="15" fill="rgb(250,196,2)"/><text x="93.9757%" y="447.50"></text></g><g><title>tcp_current_mss (5 samples, 0.10%)</title><rect x="93.7257%" y="421" width="0.1022%" height="15" fill="rgb(227,5,17)"/><text x="93.9757%" y="431.50"></text></g><g><title>__x64_sys_sendto (140 samples, 2.86%)</title><rect x="91.0076%" y="517" width="2.8612%" height="15" fill="rgb(221,226,24)"/><text x="91.2576%" y="527.50">__..</text></g><g><title>__sys_sendto (138 samples, 2.82%)</title><rect x="91.0484%" y="501" width="2.8204%" height="15" fill="rgb(211,5,48)"/><text x="91.2984%" y="511.50">__..</text></g><g><title>do_syscall_64 (144 samples, 2.94%)</title><rect x="90.9871%" y="533" width="2.9430%" height="15" fill="rgb(219,150,6)"/><text x="91.2371%" y="543.50">do..</text></g><g><title>__GI___clone (424 samples, 8.67%)</title><rect x="85.4486%" y="757" width="8.6654%" height="15" fill="rgb(251,46,16)"/><text x="85.6986%" y="767.50">__GI___clone</text></g><g><title>start_thread (424 samples, 8.67%)</title><rect x="85.4486%" y="741" width="8.6654%" height="15" fill="rgb(220,204,40)"/><text x="85.6986%" y="751.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (419 samples, 8.56%)</title><rect x="85.5508%" y="725" width="8.5633%" height="15" fill="rgb(211,85,2)"/><text x="85.8008%" y="735.50">std::sys::un..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (419 samples, 8.56%)</title><rect x="85.5508%" y="709" width="8.5633%" height="15" fill="rgb(229,17,7)"/><text x="85.8008%" y="719.50">&lt;alloc::boxe..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (419 samples, 8.56%)</title><rect x="85.5508%" y="693" width="8.5633%" height="15" fill="rgb(239,72,28)"/><text x="85.8008%" y="703.50">&lt;alloc::boxe..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (419 samples, 8.56%)</title><rect x="85.5508%" y="677" width="8.5633%" height="15" fill="rgb(230,47,54)"/><text x="85.8008%" y="687.50">core::ops::f..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (419 samples, 8.56%)</title><rect x="85.5508%" y="661" width="8.5633%" height="15" fill="rgb(214,50,8)"/><text x="85.8008%" y="671.50">std::sys_com..</text></g><g><title>decor_mem::Shim::run_on_tcp (419 samples, 8.56%)</title><rect x="85.5508%" y="645" width="8.5633%" height="15" fill="rgb(216,198,43)"/><text x="85.8008%" y="655.50">decor_mem::S..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (419 samples, 8.56%)</title><rect x="85.5508%" y="629" width="8.5633%" height="15" fill="rgb(234,20,35)"/><text x="85.8008%" y="639.50">msql_srv::My..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (155 samples, 3.17%)</title><rect x="90.9462%" y="613" width="3.1678%" height="15" fill="rgb(254,45,19)"/><text x="91.1962%" y="623.50">std..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (154 samples, 3.15%)</title><rect x="90.9667%" y="597" width="3.1474%" height="15" fill="rgb(219,14,44)"/><text x="91.2167%" y="607.50">&lt;st..</text></g><g><title>std::sys_common::net::TcpStream::write (154 samples, 3.15%)</title><rect x="90.9667%" y="581" width="3.1474%" height="15" fill="rgb(217,220,26)"/><text x="91.2167%" y="591.50">std..</text></g><g><title>__libc_send (154 samples, 3.15%)</title><rect x="90.9667%" y="565" width="3.1474%" height="15" fill="rgb(213,158,28)"/><text x="91.2167%" y="575.50">__l..</text></g><g><title>entry_SYSCALL_64 (153 samples, 3.13%)</title><rect x="90.9871%" y="549" width="3.1269%" height="15" fill="rgb(252,51,52)"/><text x="91.2371%" y="559.50">ent..</text></g><g><title>prepare_exit_to_usermode (9 samples, 0.18%)</title><rect x="93.9301%" y="533" width="0.1839%" height="15" fill="rgb(246,89,16)"/><text x="94.1801%" y="543.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (228 samples, 4.66%)</title><rect x="94.4206%" y="277" width="4.6597%" height="15" fill="rgb(216,158,49)"/><text x="94.6706%" y="287.50">__int..</text></g><g><title>native_write_msr (228 samples, 4.66%)</title><rect x="94.4206%" y="261" width="4.6597%" height="15" fill="rgb(236,107,19)"/><text x="94.6706%" y="271.50">nativ..</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 4.78%)</title><rect x="94.3389%" y="437" width="4.7823%" height="15" fill="rgb(228,185,30)"/><text x="94.5889%" y="447.50">__x64_..</text></g><g><title>sched_setaffinity (234 samples, 4.78%)</title><rect x="94.3389%" y="421" width="4.7823%" height="15" fill="rgb(246,134,8)"/><text x="94.5889%" y="431.50">sched_..</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 4.78%)</title><rect x="94.3389%" y="405" width="4.7823%" height="15" fill="rgb(214,143,50)"/><text x="94.5889%" y="415.50">__set_..</text></g><g><title>stop_one_cpu (234 samples, 4.78%)</title><rect x="94.3389%" y="389" width="4.7823%" height="15" fill="rgb(228,75,8)"/><text x="94.5889%" y="399.50">stop_o..</text></g><g><title>cpu_stop_queue_work (234 samples, 4.78%)</title><rect x="94.3389%" y="373" width="4.7823%" height="15" fill="rgb(207,175,4)"/><text x="94.5889%" y="383.50">cpu_st..</text></g><g><title>preempt_schedule_thunk (234 samples, 4.78%)</title><rect x="94.3389%" y="357" width="4.7823%" height="15" fill="rgb(205,108,24)"/><text x="94.5889%" y="367.50">preemp..</text></g><g><title>preempt_schedule_common (234 samples, 4.78%)</title><rect x="94.3389%" y="341" width="4.7823%" height="15" fill="rgb(244,120,49)"/><text x="94.5889%" y="351.50">preemp..</text></g><g><title>__schedule (234 samples, 4.78%)</title><rect x="94.3389%" y="325" width="4.7823%" height="15" fill="rgb(223,47,38)"/><text x="94.5889%" y="335.50">__sche..</text></g><g><title>finish_task_switch (234 samples, 4.78%)</title><rect x="94.3389%" y="309" width="4.7823%" height="15" fill="rgb(229,179,11)"/><text x="94.5889%" y="319.50">finish..</text></g><g><title>__perf_event_task_sched_in (233 samples, 4.76%)</title><rect x="94.3593%" y="293" width="4.7619%" height="15" fill="rgb(231,122,1)"/><text x="94.6093%" y="303.50">__perf..</text></g><g><title>__GI___sched_setaffinity_new (235 samples, 4.80%)</title><rect x="94.3389%" y="485" width="4.8028%" height="15" fill="rgb(245,119,9)"/><text x="94.5889%" y="495.50">__GI__..</text></g><g><title>entry_SYSCALL_64 (235 samples, 4.80%)</title><rect x="94.3389%" y="469" width="4.8028%" height="15" fill="rgb(241,163,25)"/><text x="94.5889%" y="479.50">entry_..</text></g><g><title>do_syscall_64 (235 samples, 4.80%)</title><rect x="94.3389%" y="453" width="4.8028%" height="15" fill="rgb(217,214,3)"/><text x="94.5889%" y="463.50">do_sys..</text></g><g><title>hwloc::Topology::new (237 samples, 4.84%)</title><rect x="94.3184%" y="581" width="4.8437%" height="15" fill="rgb(240,86,28)"/><text x="94.5684%" y="591.50">hwloc:..</text></g><g><title>hwloc_topology_load (237 samples, 4.84%)</title><rect x="94.3184%" y="565" width="4.8437%" height="15" fill="rgb(215,47,9)"/><text x="94.5684%" y="575.50">hwloc_..</text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 4.84%)</title><rect x="94.3184%" y="549" width="4.8437%" height="15" fill="rgb(252,25,45)"/><text x="94.5684%" y="559.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 4.84%)</title><rect x="94.3184%" y="533" width="4.8437%" height="15" fill="rgb(251,164,9)"/><text x="94.5684%" y="543.50">[libhw..</text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 4.84%)</title><rect x="94.3184%" y="517" width="4.8437%" height="15" fill="rgb(233,194,0)"/><text x="94.5684%" y="527.50">[libhw..</text></g><g><title>hwloc_linux_set_tid_cpubind (236 samples, 4.82%)</title><rect x="94.3389%" y="501" width="4.8232%" height="15" fill="rgb(249,111,24)"/><text x="94.5889%" y="511.50">hwloc_..</text></g><g><title>__libc_start_main (238 samples, 4.86%)</title><rect x="94.3184%" y="741" width="4.8641%" height="15" fill="rgb(250,223,3)"/><text x="94.5684%" y="751.50">__libc..</text></g><g><title>main (238 samples, 4.86%)</title><rect x="94.3184%" y="725" width="4.8641%" height="15" fill="rgb(236,178,37)"/><text x="94.5684%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (238 samples, 4.86%)</title><rect x="94.3184%" y="709" width="4.8641%" height="15" fill="rgb(241,158,50)"/><text x="94.5684%" y="719.50">std::r..</text></g><g><title>std::panic::catch_unwind (238 samples, 4.86%)</title><rect x="94.3184%" y="693" width="4.8641%" height="15" fill="rgb(213,121,41)"/><text x="94.5684%" y="703.50">std::p..</text></g><g><title>std::panicking::try (238 samples, 4.86%)</title><rect x="94.3184%" y="677" width="4.8641%" height="15" fill="rgb(240,92,3)"/><text x="94.5684%" y="687.50">std::p..</text></g><g><title>std::panicking::try::do_call (238 samples, 4.86%)</title><rect x="94.3184%" y="661" width="4.8641%" height="15" fill="rgb(205,123,3)"/><text x="94.5684%" y="671.50">std::p..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (238 samples, 4.86%)</title><rect x="94.3184%" y="645" width="4.8641%" height="15" fill="rgb(205,97,47)"/><text x="94.5684%" y="655.50">core::..</text></g><g><title>std::rt::lang_start::_{{closure}} (238 samples, 4.86%)</title><rect x="94.3184%" y="629" width="4.8641%" height="15" fill="rgb(247,152,14)"/><text x="94.5684%" y="639.50">std::r..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (238 samples, 4.86%)</title><rect x="94.3184%" y="613" width="4.8641%" height="15" fill="rgb(248,195,53)"/><text x="94.5684%" y="623.50">std::s..</text></g><g><title>lobsters_microbenchmarks::main (238 samples, 4.86%)</title><rect x="94.3184%" y="597" width="4.8641%" height="15" fill="rgb(226,201,16)"/><text x="94.5684%" y="607.50">lobste..</text></g><g><title>_start (239 samples, 4.88%)</title><rect x="94.3184%" y="757" width="4.8845%" height="15" fill="rgb(205,98,0)"/><text x="94.5684%" y="767.50">_start</text></g><g><title>entry_SYSCALL_64 (7 samples, 0.14%)</title><rect x="99.3460%" y="757" width="0.1431%" height="15" fill="rgb(214,191,48)"/><text x="99.5960%" y="767.50"></text></g><g><title>page_fault (10 samples, 0.20%)</title><rect x="99.5913%" y="757" width="0.2044%" height="15" fill="rgb(237,112,39)"/><text x="99.8413%" y="767.50"></text></g><g><title>lobsters-microb (4,887 samples, 99.88%)</title><rect x="0.0000%" y="773" width="99.8774%" height="15" fill="rgb(247,203,27)"/><text x="0.2500%" y="783.50">lobsters-microb</text></g><g><title>all (4,893 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(235,124,28)"/><text x="0.2500%" y="799.50"></text></g><g><title>perf (6 samples, 0.12%)</title><rect x="99.8774%" y="773" width="0.1226%" height="15" fill="rgb(208,207,46)"/><text x="100.1274%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.12%)</title><rect x="99.8774%" y="757" width="0.1226%" height="15" fill="rgb(234,176,4)"/><text x="100.1274%" y="767.50"></text></g><g><title>do_syscall_64 (6 samples, 0.12%)</title><rect x="99.8774%" y="741" width="0.1226%" height="15" fill="rgb(230,133,28)"/><text x="100.1274%" y="751.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.12%)</title><rect x="99.8774%" y="725" width="0.1226%" height="15" fill="rgb(211,137,40)"/><text x="100.1274%" y="735.50"></text></g><g><title>do_execve (6 samples, 0.12%)</title><rect x="99.8774%" y="709" width="0.1226%" height="15" fill="rgb(254,35,13)"/><text x="100.1274%" y="719.50"></text></g><g><title>__do_execve_file (6 samples, 0.12%)</title><rect x="99.8774%" y="693" width="0.1226%" height="15" fill="rgb(225,49,51)"/><text x="100.1274%" y="703.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.12%)</title><rect x="99.8774%" y="677" width="0.1226%" height="15" fill="rgb(251,10,15)"/><text x="100.1274%" y="687.50"></text></g><g><title>load_elf_binary (6 samples, 0.12%)</title><rect x="99.8774%" y="661" width="0.1226%" height="15" fill="rgb(228,207,15)"/><text x="100.1274%" y="671.50"></text></g><g><title>setup_new_exec (6 samples, 0.12%)</title><rect x="99.8774%" y="645" width="0.1226%" height="15" fill="rgb(241,99,19)"/><text x="100.1274%" y="655.50"></text></g><g><title>perf_event_exec (6 samples, 0.12%)</title><rect x="99.8774%" y="629" width="0.1226%" height="15" fill="rgb(207,104,49)"/><text x="100.1274%" y="639.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.10%)</title><rect x="99.8978%" y="613" width="0.1022%" height="15" fill="rgb(234,99,18)"/><text x="100.1478%" y="623.50"></text></g><g><title>native_write_msr (5 samples, 0.10%)</title><rect x="99.8978%" y="597" width="0.1022%" height="15" fill="rgb(213,191,49)"/><text x="100.1478%" y="607.50"></text></g></svg></svg>