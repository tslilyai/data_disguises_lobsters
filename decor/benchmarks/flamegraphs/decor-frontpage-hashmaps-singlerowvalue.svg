<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (18 samples, 0.12%)</title><rect x="0.0000%" y="725" width="0.1155%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (192 samples, 1.23%)</title><rect x="0.2760%" y="709" width="1.2323%" height="15" fill="rgb(217,0,24)"/><text x="0.5260%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (25 samples, 0.16%)</title><rect x="1.3479%" y="693" width="0.1605%" height="15" fill="rgb(221,193,54)"/><text x="1.5979%" y="703.50"></text></g><g><title>alloc::string::String::push_str (25 samples, 0.16%)</title><rect x="1.3479%" y="677" width="0.1605%" height="15" fill="rgb(248,212,6)"/><text x="1.5979%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (25 samples, 0.16%)</title><rect x="1.3479%" y="661" width="0.1605%" height="15" fill="rgb(208,68,35)"/><text x="1.5979%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.16%)</title><rect x="1.3479%" y="645" width="0.1605%" height="15" fill="rgb(232,128,0)"/><text x="1.5979%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (25 samples, 0.16%)</title><rect x="1.3479%" y="629" width="0.1605%" height="15" fill="rgb(207,160,47)"/><text x="1.5979%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.10%)</title><rect x="1.4056%" y="613" width="0.1027%" height="15" fill="rgb(228,23,34)"/><text x="1.6556%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (49 samples, 0.31%)</title><rect x="1.5148%" y="709" width="0.3145%" height="15" fill="rgb(218,30,26)"/><text x="1.7648%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.11%)</title><rect x="1.7202%" y="693" width="0.1091%" height="15" fill="rgb(220,122,19)"/><text x="1.9702%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.11%)</title><rect x="1.7202%" y="677" width="0.1091%" height="15" fill="rgb(250,228,42)"/><text x="1.9702%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.11%)</title><rect x="1.7202%" y="661" width="0.1091%" height="15" fill="rgb(240,193,28)"/><text x="1.9702%" y="671.50"></text></g><g><title>__GI___libc_malloc (34 samples, 0.22%)</title><rect x="2.2593%" y="709" width="0.2182%" height="15" fill="rgb(216,20,37)"/><text x="2.5093%" y="719.50"></text></g><g><title>__GI___libc_realloc (80 samples, 0.51%)</title><rect x="2.4775%" y="709" width="0.5135%" height="15" fill="rgb(206,188,39)"/><text x="2.7275%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (50 samples, 0.32%)</title><rect x="3.0167%" y="709" width="0.3209%" height="15" fill="rgb(217,207,13)"/><text x="3.2667%" y="719.50"></text></g><g><title>__rdl_realloc (46 samples, 0.30%)</title><rect x="3.3761%" y="709" width="0.2953%" height="15" fill="rgb(231,73,38)"/><text x="3.6261%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (39 samples, 0.25%)</title><rect x="3.4211%" y="693" width="0.2503%" height="15" fill="rgb(225,20,46)"/><text x="3.6711%" y="703.50"></text></g><g><title>_int_free (178 samples, 1.14%)</title><rect x="3.6714%" y="709" width="1.1425%" height="15" fill="rgb(210,31,41)"/><text x="3.9214%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (97 samples, 0.62%)</title><rect x="4.9807%" y="709" width="0.6226%" height="15" fill="rgb(221,200,47)"/><text x="5.2307%" y="719.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (396 samples, 2.54%)</title><rect x="5.6033%" y="709" width="2.5417%" height="15" fill="rgb(226,26,5)"/><text x="5.8533%" y="719.50">al..</text></g><g><title>alloc::string::String::with_capacity (38 samples, 0.24%)</title><rect x="7.9012%" y="693" width="0.2439%" height="15" fill="rgb(249,33,26)"/><text x="8.1512%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (38 samples, 0.24%)</title><rect x="7.9012%" y="677" width="0.2439%" height="15" fill="rgb(235,183,28)"/><text x="8.1512%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (38 samples, 0.24%)</title><rect x="7.9012%" y="661" width="0.2439%" height="15" fill="rgb(221,5,38)"/><text x="8.1512%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.24%)</title><rect x="7.9012%" y="645" width="0.2439%" height="15" fill="rgb(247,18,42)"/><text x="8.1512%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.24%)</title><rect x="7.9012%" y="629" width="0.2439%" height="15" fill="rgb(241,131,45)"/><text x="8.1512%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (38 samples, 0.24%)</title><rect x="7.9012%" y="613" width="0.2439%" height="15" fill="rgb(249,31,29)"/><text x="8.1512%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.24%)</title><rect x="7.9012%" y="597" width="0.2439%" height="15" fill="rgb(225,111,53)"/><text x="8.1512%" y="607.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.24%)</title><rect x="7.9012%" y="581" width="0.2439%" height="15" fill="rgb(238,160,17)"/><text x="8.1512%" y="591.50"></text></g><g><title>alloc::string::String::push (242 samples, 1.55%)</title><rect x="8.1451%" y="709" width="1.5533%" height="15" fill="rgb(214,148,48)"/><text x="8.3951%" y="719.50"></text></g><g><title>core::fmt::write (69 samples, 0.44%)</title><rect x="9.7497%" y="709" width="0.4429%" height="15" fill="rgb(232,36,49)"/><text x="9.9997%" y="719.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (17 samples, 0.11%)</title><rect x="10.5135%" y="709" width="0.1091%" height="15" fill="rgb(209,103,24)"/><text x="10.7635%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (72 samples, 0.46%)</title><rect x="10.7317%" y="709" width="0.4621%" height="15" fill="rgb(229,88,8)"/><text x="10.9817%" y="719.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (27 samples, 0.17%)</title><rect x="11.3479%" y="709" width="0.1733%" height="15" fill="rgb(213,181,19)"/><text x="11.5979%" y="719.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (59 samples, 0.38%)</title><rect x="11.5212%" y="709" width="0.3787%" height="15" fill="rgb(254,191,54)"/><text x="11.7712%" y="719.50"></text></g><g><title>[anon] (1,877 samples, 12.05%)</title><rect x="0.2760%" y="725" width="12.0475%" height="15" fill="rgb(241,83,37)"/><text x="0.5260%" y="735.50">[anon]</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (44 samples, 0.28%)</title><rect x="12.7343%" y="709" width="0.2824%" height="15" fill="rgb(233,36,39)"/><text x="12.9843%" y="719.50"></text></g><g><title>[lobsters-microbenchmarks] (125 samples, 0.80%)</title><rect x="12.3427%" y="725" width="0.8023%" height="15" fill="rgb(226,3,54)"/><text x="12.5927%" y="735.50"></text></g><g><title>decor_mem::helpers::parser_vals_cmp (22 samples, 0.14%)</title><rect x="13.7356%" y="597" width="0.1412%" height="15" fill="rgb(245,192,40)"/><text x="13.9856%" y="607.50"></text></g><g><title>core::num::dec2flt::dec2flt (20 samples, 0.13%)</title><rect x="13.7484%" y="581" width="0.1284%" height="15" fill="rgb(238,167,29)"/><text x="13.9984%" y="591.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (23 samples, 0.15%)</title><rect x="13.9987%" y="581" width="0.1476%" height="15" fill="rgb(232,182,51)"/><text x="14.2487%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (16 samples, 0.10%)</title><rect x="14.2490%" y="501" width="0.1027%" height="15" fill="rgb(231,60,39)"/><text x="14.4990%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (22 samples, 0.14%)</title><rect x="14.2234%" y="533" width="0.1412%" height="15" fill="rgb(208,69,12)"/><text x="14.4734%" y="543.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (22 samples, 0.14%)</title><rect x="14.2234%" y="517" width="0.1412%" height="15" fill="rgb(235,93,37)"/><text x="14.4734%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (27 samples, 0.17%)</title><rect x="14.2169%" y="549" width="0.1733%" height="15" fill="rgb(213,116,39)"/><text x="14.4669%" y="559.50"></text></g><g><title>core::fmt::write (36 samples, 0.23%)</title><rect x="14.2105%" y="565" width="0.2311%" height="15" fill="rgb(222,207,29)"/><text x="14.4605%" y="575.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (49 samples, 0.31%)</title><rect x="14.1463%" y="581" width="0.3145%" height="15" fill="rgb(206,96,30)"/><text x="14.3963%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (38 samples, 0.24%)</title><rect x="14.7754%" y="533" width="0.2439%" height="15" fill="rgb(218,138,4)"/><text x="15.0254%" y="543.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (176 samples, 1.13%)</title><rect x="13.9153%" y="597" width="1.1297%" height="15" fill="rgb(250,191,14)"/><text x="14.1653%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (91 samples, 0.58%)</title><rect x="14.4608%" y="581" width="0.5841%" height="15" fill="rgb(239,60,40)"/><text x="14.7108%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (67 samples, 0.43%)</title><rect x="14.6149%" y="565" width="0.4300%" height="15" fill="rgb(206,27,48)"/><text x="14.8649%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (58 samples, 0.37%)</title><rect x="14.6727%" y="549" width="0.3723%" height="15" fill="rgb(225,35,8)"/><text x="14.9227%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.13%)</title><rect x="15.2311%" y="581" width="0.1348%" height="15" fill="rgb(250,213,24)"/><text x="15.4811%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.12%)</title><rect x="15.2439%" y="565" width="0.1220%" height="15" fill="rgb(247,123,22)"/><text x="15.4939%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (19 samples, 0.12%)</title><rect x="15.2439%" y="549" width="0.1220%" height="15" fill="rgb(231,138,38)"/><text x="15.4939%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.12%)</title><rect x="15.2439%" y="533" width="0.1220%" height="15" fill="rgb(231,145,46)"/><text x="15.4939%" y="543.50"></text></g><g><title>_int_free (18 samples, 0.12%)</title><rect x="15.4493%" y="581" width="0.1155%" height="15" fill="rgb(251,118,11)"/><text x="15.6993%" y="591.50"></text></g><g><title>core::fmt::write (24 samples, 0.15%)</title><rect x="15.6547%" y="565" width="0.1540%" height="15" fill="rgb(217,147,25)"/><text x="15.9047%" y="575.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (21 samples, 0.13%)</title><rect x="15.6739%" y="549" width="0.1348%" height="15" fill="rgb(247,81,37)"/><text x="15.9239%" y="559.50"></text></g><g><title>decor_mem::helpers::minus_parser_vals (61 samples, 0.39%)</title><rect x="15.5648%" y="581" width="0.3915%" height="15" fill="rgb(209,12,38)"/><text x="15.8148%" y="591.50"></text></g><g><title>core::num::dec2flt::dec2flt (23 samples, 0.15%)</title><rect x="15.8087%" y="565" width="0.1476%" height="15" fill="rgb(227,1,9)"/><text x="16.0587%" y="575.50"></text></g><g><title>__GI___libc_realloc (35 samples, 0.22%)</title><rect x="16.0655%" y="565" width="0.2246%" height="15" fill="rgb(248,47,43)"/><text x="16.3155%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (18 samples, 0.12%)</title><rect x="16.4185%" y="533" width="0.1155%" height="15" fill="rgb(221,10,30)"/><text x="16.6685%" y="543.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (31 samples, 0.20%)</title><rect x="17.3877%" y="469" width="0.1990%" height="15" fill="rgb(210,229,1)"/><text x="17.6377%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.35%)</title><rect x="17.3877%" y="485" width="0.3530%" height="15" fill="rgb(222,148,37)"/><text x="17.6377%" y="495.50"></text></g><g><title>core::str::validations::next_code_point (24 samples, 0.15%)</title><rect x="17.5866%" y="469" width="0.1540%" height="15" fill="rgb(234,67,33)"/><text x="17.8366%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (17 samples, 0.11%)</title><rect x="17.9718%" y="453" width="0.1091%" height="15" fill="rgb(247,98,35)"/><text x="18.2218%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (53 samples, 0.34%)</title><rect x="17.7471%" y="469" width="0.3402%" height="15" fill="rgb(247,138,52)"/><text x="17.9971%" y="479.50"></text></g><g><title>alloc::string::String::push (78 samples, 0.50%)</title><rect x="17.7407%" y="485" width="0.5006%" height="15" fill="rgb(213,79,30)"/><text x="17.9907%" y="495.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (24 samples, 0.15%)</title><rect x="18.0873%" y="469" width="0.1540%" height="15" fill="rgb(246,177,23)"/><text x="18.3373%" y="479.50"></text></g><g><title>core::char::methods::len_utf8 (24 samples, 0.15%)</title><rect x="18.0873%" y="453" width="0.1540%" height="15" fill="rgb(230,62,27)"/><text x="18.3373%" y="463.50"></text></g><g><title>alloc::string::String::with_capacity (22 samples, 0.14%)</title><rect x="18.2413%" y="485" width="0.1412%" height="15" fill="rgb(216,154,8)"/><text x="18.4913%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.12%)</title><rect x="18.2606%" y="469" width="0.1220%" height="15" fill="rgb(244,35,45)"/><text x="18.5106%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (19 samples, 0.12%)</title><rect x="18.2606%" y="453" width="0.1220%" height="15" fill="rgb(251,115,12)"/><text x="18.5106%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.12%)</title><rect x="18.2606%" y="437" width="0.1220%" height="15" fill="rgb(240,54,50)"/><text x="18.5106%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.12%)</title><rect x="18.2606%" y="421" width="0.1220%" height="15" fill="rgb(233,84,52)"/><text x="18.5106%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (19 samples, 0.12%)</title><rect x="18.2606%" y="405" width="0.1220%" height="15" fill="rgb(207,117,47)"/><text x="18.5106%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.12%)</title><rect x="18.2606%" y="389" width="0.1220%" height="15" fill="rgb(249,43,39)"/><text x="18.5106%" y="399.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.12%)</title><rect x="18.2606%" y="373" width="0.1220%" height="15" fill="rgb(209,38,44)"/><text x="18.5106%" y="383.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (110 samples, 0.71%)</title><rect x="19.8267%" y="437" width="0.7060%" height="15" fill="rgb(236,212,23)"/><text x="20.0767%" y="447.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (534 samples, 3.43%)</title><rect x="17.1245%" y="501" width="3.4275%" height="15" fill="rgb(242,79,21)"/><text x="17.3745%" y="511.50">all..</text></g><g><title>core::unicode::unicode_data::conversions::to_upper (338 samples, 2.17%)</title><rect x="18.3825%" y="485" width="2.1694%" height="15" fill="rgb(211,96,35)"/><text x="18.6325%" y="495.50">c..</text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (257 samples, 1.65%)</title><rect x="18.9024%" y="469" width="1.6496%" height="15" fill="rgb(253,215,40)"/><text x="19.1524%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (257 samples, 1.65%)</title><rect x="18.9024%" y="453" width="1.6496%" height="15" fill="rgb(211,81,21)"/><text x="19.1524%" y="463.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (666 samples, 4.27%)</title><rect x="16.5340%" y="533" width="4.2747%" height="15" fill="rgb(208,190,38)"/><text x="16.7840%" y="543.50">&lt;sql_..</text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (664 samples, 4.26%)</title><rect x="16.5469%" y="517" width="4.2619%" height="15" fill="rgb(235,213,38)"/><text x="16.7969%" y="527.50">sql_p..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (40 samples, 0.26%)</title><rect x="20.5520%" y="501" width="0.2567%" height="15" fill="rgb(237,122,38)"/><text x="20.8020%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (34 samples, 0.22%)</title><rect x="20.5905%" y="485" width="0.2182%" height="15" fill="rgb(244,218,35)"/><text x="20.8405%" y="495.50"></text></g><g><title>_int_free (19 samples, 0.12%)</title><rect x="20.8601%" y="533" width="0.1220%" height="15" fill="rgb(240,68,47)"/><text x="21.1101%" y="543.50"></text></g><g><title>__GI___libc_realloc (25 samples, 0.16%)</title><rect x="21.1168%" y="517" width="0.1605%" height="15" fill="rgb(210,16,53)"/><text x="21.3668%" y="527.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.10%)</title><rect x="21.4377%" y="501" width="0.1027%" height="15" fill="rgb(235,124,12)"/><text x="21.6877%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.20%)</title><rect x="21.3607%" y="517" width="0.1990%" height="15" fill="rgb(224,169,11)"/><text x="21.6107%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (25 samples, 0.16%)</title><rect x="21.6367%" y="501" width="0.1605%" height="15" fill="rgb(250,166,2)"/><text x="21.8867%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (849 samples, 5.45%)</title><rect x="16.3864%" y="549" width="5.4493%" height="15" fill="rgb(242,216,29)"/><text x="16.6364%" y="559.50">&lt;sql_pa..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (131 samples, 0.84%)</title><rect x="20.9949%" y="533" width="0.8408%" height="15" fill="rgb(230,116,27)"/><text x="21.2449%" y="543.50"></text></g><g><title>core::fmt::write (43 samples, 0.28%)</title><rect x="21.5597%" y="517" width="0.2760%" height="15" fill="rgb(228,99,48)"/><text x="21.8097%" y="527.50"></text></g><g><title>decor_mem::select::expr_to_col (918 samples, 5.89%)</title><rect x="15.9564%" y="581" width="5.8922%" height="15" fill="rgb(253,11,6)"/><text x="16.2064%" y="591.50">decor_m..</text></g><g><title>core::fmt::write (864 samples, 5.55%)</title><rect x="16.3030%" y="565" width="5.5456%" height="15" fill="rgb(247,143,39)"/><text x="16.5530%" y="575.50">core::f..</text></g><g><title>__GI___libc_free (61 samples, 0.39%)</title><rect x="22.3941%" y="565" width="0.3915%" height="15" fill="rgb(236,97,10)"/><text x="22.6441%" y="575.50"></text></g><g><title>__GI___libc_realloc (82 samples, 0.53%)</title><rect x="22.7856%" y="565" width="0.5263%" height="15" fill="rgb(233,208,19)"/><text x="23.0356%" y="575.50"></text></g><g><title>_int_realloc (37 samples, 0.24%)</title><rect x="23.0745%" y="549" width="0.2375%" height="15" fill="rgb(216,164,2)"/><text x="23.3245%" y="559.50"></text></g><g><title>__memcmp_avx2_movbe (24 samples, 0.15%)</title><rect x="23.3119%" y="565" width="0.1540%" height="15" fill="rgb(220,129,5)"/><text x="23.5619%" y="575.50"></text></g><g><title>_int_free (99 samples, 0.64%)</title><rect x="23.6008%" y="565" width="0.6354%" height="15" fill="rgb(242,17,10)"/><text x="23.8508%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (32 samples, 0.21%)</title><rect x="24.5250%" y="549" width="0.2054%" height="15" fill="rgb(242,107,0)"/><text x="24.7750%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.13%)</title><rect x="25.0385%" y="517" width="0.1348%" height="15" fill="rgb(251,28,31)"/><text x="25.2885%" y="527.50"></text></g><g><title>__GI___libc_malloc (58 samples, 0.37%)</title><rect x="25.3530%" y="501" width="0.3723%" height="15" fill="rgb(233,223,10)"/><text x="25.6030%" y="511.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (130 samples, 0.83%)</title><rect x="24.9487%" y="533" width="0.8344%" height="15" fill="rgb(215,21,27)"/><text x="25.1987%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (95 samples, 0.61%)</title><rect x="25.1733%" y="517" width="0.6098%" height="15" fill="rgb(232,23,21)"/><text x="25.4233%" y="527.50"></text></g><g><title>_int_free (29 samples, 0.19%)</title><rect x="27.1245%" y="501" width="0.1861%" height="15" fill="rgb(244,5,23)"/><text x="27.3745%" y="511.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (128 samples, 0.82%)</title><rect x="28.5237%" y="469" width="0.8216%" height="15" fill="rgb(226,81,46)"/><text x="28.7737%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (230 samples, 1.48%)</title><rect x="28.5237%" y="485" width="1.4763%" height="15" fill="rgb(247,70,30)"/><text x="28.7737%" y="495.50"></text></g><g><title>core::str::validations::next_code_point (102 samples, 0.65%)</title><rect x="29.3453%" y="469" width="0.6547%" height="15" fill="rgb(212,68,19)"/><text x="29.5953%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (84 samples, 0.54%)</title><rect x="31.1425%" y="453" width="0.5392%" height="15" fill="rgb(240,187,13)"/><text x="31.3925%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (248 samples, 1.59%)</title><rect x="30.0963%" y="469" width="1.5918%" height="15" fill="rgb(223,113,26)"/><text x="30.3463%" y="479.50"></text></g><g><title>alloc::string::String::push (343 samples, 2.20%)</title><rect x="30.0321%" y="485" width="2.2015%" height="15" fill="rgb(206,192,2)"/><text x="30.2821%" y="495.50">a..</text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (85 samples, 0.55%)</title><rect x="31.6881%" y="469" width="0.5456%" height="15" fill="rgb(241,108,4)"/><text x="31.9381%" y="479.50"></text></g><g><title>core::char::methods::len_utf8 (85 samples, 0.55%)</title><rect x="31.6881%" y="453" width="0.5456%" height="15" fill="rgb(247,173,49)"/><text x="31.9381%" y="463.50"></text></g><g><title>__GI___libc_malloc (64 samples, 0.41%)</title><rect x="32.2914%" y="357" width="0.4108%" height="15" fill="rgb(224,114,35)"/><text x="32.5414%" y="367.50"></text></g><g><title>alloc::string::String::with_capacity (92 samples, 0.59%)</title><rect x="32.2336%" y="485" width="0.5905%" height="15" fill="rgb(245,159,27)"/><text x="32.4836%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (84 samples, 0.54%)</title><rect x="32.2850%" y="469" width="0.5392%" height="15" fill="rgb(245,172,44)"/><text x="32.5350%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (84 samples, 0.54%)</title><rect x="32.2850%" y="453" width="0.5392%" height="15" fill="rgb(236,23,11)"/><text x="32.5350%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (84 samples, 0.54%)</title><rect x="32.2850%" y="437" width="0.5392%" height="15" fill="rgb(205,117,38)"/><text x="32.5350%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (84 samples, 0.54%)</title><rect x="32.2850%" y="421" width="0.5392%" height="15" fill="rgb(237,72,25)"/><text x="32.5350%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (84 samples, 0.54%)</title><rect x="32.2850%" y="405" width="0.5392%" height="15" fill="rgb(244,70,9)"/><text x="32.5350%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.54%)</title><rect x="32.2850%" y="389" width="0.5392%" height="15" fill="rgb(217,125,39)"/><text x="32.5350%" y="399.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 0.53%)</title><rect x="32.2914%" y="373" width="0.5327%" height="15" fill="rgb(235,36,10)"/><text x="32.5414%" y="383.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (467 samples, 3.00%)</title><rect x="38.6650%" y="437" width="2.9974%" height="15" fill="rgb(251,123,47)"/><text x="38.9150%" y="447.50">&lt;co..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2,249 samples, 14.44%)</title><rect x="27.3107%" y="501" width="14.4352%" height="15" fill="rgb(221,13,13)"/><text x="27.5607%" y="511.50">alloc::str::&lt;impl str&gt;..</text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1,386 samples, 8.90%)</title><rect x="32.8498%" y="485" width="8.8960%" height="15" fill="rgb(238,131,9)"/><text x="33.0998%" y="495.50">core::unicode..</text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (1,060 samples, 6.80%)</title><rect x="34.9422%" y="469" width="6.8036%" height="15" fill="rgb(211,50,8)"/><text x="35.1922%" y="479.50">core::uni..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1,060 samples, 6.80%)</title><rect x="34.9422%" y="453" width="6.8036%" height="15" fill="rgb(245,182,24)"/><text x="35.1922%" y="463.50">core::sli..</text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2,703 samples, 17.35%)</title><rect x="25.7831%" y="533" width="17.3492%" height="15" fill="rgb(242,14,37)"/><text x="26.0331%" y="543.50">&lt;sql_parser::ast::defs::nam..</text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2,696 samples, 17.30%)</title><rect x="25.8280%" y="517" width="17.3042%" height="15" fill="rgb(246,228,12)"/><text x="26.0780%" y="527.50">sql_parser::ast::defs::name..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (216 samples, 1.39%)</title><rect x="41.7458%" y="501" width="1.3864%" height="15" fill="rgb(213,55,15)"/><text x="41.9958%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (176 samples, 1.13%)</title><rect x="42.0026%" y="485" width="1.1297%" height="15" fill="rgb(209,9,3)"/><text x="42.2526%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (79 samples, 0.51%)</title><rect x="42.6252%" y="469" width="0.5071%" height="15" fill="rgb(230,59,30)"/><text x="42.8752%" y="479.50"></text></g><g><title>__GI___libc_free (31 samples, 0.20%)</title><rect x="43.1322%" y="533" width="0.1990%" height="15" fill="rgb(209,121,21)"/><text x="43.3822%" y="543.50"></text></g><g><title>_int_free (47 samples, 0.30%)</title><rect x="43.4082%" y="533" width="0.3017%" height="15" fill="rgb(220,109,13)"/><text x="43.6582%" y="543.50"></text></g><g><title>__GI___libc_free (29 samples, 0.19%)</title><rect x="44.0501%" y="517" width="0.1861%" height="15" fill="rgb(232,18,1)"/><text x="44.3001%" y="527.50"></text></g><g><title>__GI___libc_realloc (93 samples, 0.60%)</title><rect x="44.2362%" y="517" width="0.5969%" height="15" fill="rgb(215,41,42)"/><text x="44.4862%" y="527.50"></text></g><g><title>_int_realloc (30 samples, 0.19%)</title><rect x="44.6406%" y="501" width="0.1926%" height="15" fill="rgb(224,123,36)"/><text x="44.8906%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.16%)</title><rect x="44.8331%" y="517" width="0.1605%" height="15" fill="rgb(240,125,3)"/><text x="45.0831%" y="527.50"></text></g><g><title>_int_free (53 samples, 0.34%)</title><rect x="45.0899%" y="517" width="0.3402%" height="15" fill="rgb(205,98,50)"/><text x="45.3399%" y="527.50"></text></g><g><title>__GI___libc_malloc (50 samples, 0.32%)</title><rect x="45.6675%" y="501" width="0.3209%" height="15" fill="rgb(205,185,37)"/><text x="45.9175%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (95 samples, 0.61%)</title><rect x="45.4300%" y="517" width="0.6098%" height="15" fill="rgb(238,207,15)"/><text x="45.6800%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (29 samples, 0.19%)</title><rect x="46.5019%" y="485" width="0.1861%" height="15" fill="rgb(213,199,42)"/><text x="46.7519%" y="495.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.21%)</title><rect x="46.8935%" y="469" width="0.2054%" height="15" fill="rgb(235,201,11)"/><text x="47.1435%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (124 samples, 0.80%)</title><rect x="46.3286%" y="501" width="0.7959%" height="15" fill="rgb(207,46,11)"/><text x="46.5786%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (68 samples, 0.44%)</title><rect x="46.6881%" y="485" width="0.4365%" height="15" fill="rgb(241,35,35)"/><text x="46.9381%" y="495.50"></text></g><g><title>core::fmt::write (204 samples, 1.31%)</title><rect x="46.0462%" y="517" width="1.3094%" height="15" fill="rgb(243,32,47)"/><text x="46.2962%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (3,514 samples, 22.55%)</title><rect x="24.8074%" y="549" width="22.5546%" height="15" fill="rgb(247,202,23)"/><text x="25.0574%" y="559.50">&lt;sql_parser::ast::defs::name::Ident ..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (566 samples, 3.63%)</title><rect x="43.7291%" y="533" width="3.6329%" height="15" fill="rgb(219,102,11)"/><text x="43.9791%" y="543.50">sql_..</text></g><g><title>core::fmt::write (3,609 samples, 23.16%)</title><rect x="24.2362%" y="565" width="23.1643%" height="15" fill="rgb(243,110,44)"/><text x="24.4862%" y="575.50">core::fmt::write</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.13%)</title><rect x="47.7407%" y="453" width="0.1284%" height="15" fill="rgb(222,74,54)"/><text x="47.9907%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (40 samples, 0.26%)</title><rect x="47.7407%" y="517" width="0.2567%" height="15" fill="rgb(216,99,12)"/><text x="47.9907%" y="527.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (40 samples, 0.26%)</title><rect x="47.7407%" y="501" width="0.2567%" height="15" fill="rgb(226,22,26)"/><text x="47.9907%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.26%)</title><rect x="47.7407%" y="485" width="0.2567%" height="15" fill="rgb(217,163,10)"/><text x="47.9907%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (40 samples, 0.26%)</title><rect x="47.7407%" y="469" width="0.2567%" height="15" fill="rgb(213,25,53)"/><text x="47.9907%" y="479.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (16 samples, 0.10%)</title><rect x="47.8947%" y="453" width="0.1027%" height="15" fill="rgb(252,105,26)"/><text x="48.1447%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (16 samples, 0.10%)</title><rect x="47.8947%" y="437" width="0.1027%" height="15" fill="rgb(220,39,43)"/><text x="48.1447%" y="447.50"></text></g><g><title>&lt;usize as core::ops::arith::Add&gt;::add (16 samples, 0.10%)</title><rect x="47.8947%" y="421" width="0.1027%" height="15" fill="rgb(229,68,48)"/><text x="48.1447%" y="431.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (60 samples, 0.39%)</title><rect x="47.6444%" y="533" width="0.3851%" height="15" fill="rgb(252,8,32)"/><text x="47.8944%" y="543.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.30%)</title><rect x="48.7099%" y="277" width="0.3017%" height="15" fill="rgb(223,20,43)"/><text x="48.9599%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (56 samples, 0.36%)</title><rect x="48.7099%" y="325" width="0.3594%" height="15" fill="rgb(229,81,49)"/><text x="48.9599%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.36%)</title><rect x="48.7099%" y="309" width="0.3594%" height="15" fill="rgb(236,28,36)"/><text x="48.9599%" y="319.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.36%)</title><rect x="48.7099%" y="293" width="0.3594%" height="15" fill="rgb(249,185,26)"/><text x="48.9599%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (60 samples, 0.39%)</title><rect x="48.7099%" y="341" width="0.3851%" height="15" fill="rgb(249,174,33)"/><text x="48.9599%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (75 samples, 0.48%)</title><rect x="48.7099%" y="357" width="0.4814%" height="15" fill="rgb(233,201,37)"/><text x="48.9599%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (97 samples, 0.62%)</title><rect x="48.5815%" y="405" width="0.6226%" height="15" fill="rgb(221,78,26)"/><text x="48.8315%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (96 samples, 0.62%)</title><rect x="48.5879%" y="389" width="0.6162%" height="15" fill="rgb(250,127,30)"/><text x="48.8379%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (96 samples, 0.62%)</title><rect x="48.5879%" y="373" width="0.6162%" height="15" fill="rgb(230,49,44)"/><text x="48.8379%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.28%)</title><rect x="49.2041%" y="405" width="0.2760%" height="15" fill="rgb(229,67,23)"/><text x="49.4541%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (43 samples, 0.28%)</title><rect x="49.2041%" y="389" width="0.2760%" height="15" fill="rgb(249,83,47)"/><text x="49.4541%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (174 samples, 1.12%)</title><rect x="48.4211%" y="501" width="1.1168%" height="15" fill="rgb(215,43,3)"/><text x="48.6711%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (158 samples, 1.01%)</title><rect x="48.5237%" y="485" width="1.0141%" height="15" fill="rgb(238,154,13)"/><text x="48.7737%" y="495.50"></text></g><g><title>alloc::string::String::push_str (158 samples, 1.01%)</title><rect x="48.5237%" y="469" width="1.0141%" height="15" fill="rgb(219,56,2)"/><text x="48.7737%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (158 samples, 1.01%)</title><rect x="48.5237%" y="453" width="1.0141%" height="15" fill="rgb(233,0,4)"/><text x="48.7737%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (158 samples, 1.01%)</title><rect x="48.5237%" y="437" width="1.0141%" height="15" fill="rgb(235,30,7)"/><text x="48.7737%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (158 samples, 1.01%)</title><rect x="48.5237%" y="421" width="1.0141%" height="15" fill="rgb(250,79,13)"/><text x="48.7737%" y="431.50"></text></g><g><title>__GI___libc_realloc (166 samples, 1.07%)</title><rect x="49.9422%" y="261" width="1.0655%" height="15" fill="rgb(211,146,34)"/><text x="50.1922%" y="271.50"></text></g><g><title>_int_realloc (34 samples, 0.22%)</title><rect x="50.7895%" y="245" width="0.2182%" height="15" fill="rgb(228,22,38)"/><text x="51.0395%" y="255.50"></text></g><g><title>__rdl_realloc (21 samples, 0.13%)</title><rect x="51.0077%" y="261" width="0.1348%" height="15" fill="rgb(235,168,5)"/><text x="51.2577%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (201 samples, 1.29%)</title><rect x="49.8973%" y="325" width="1.2901%" height="15" fill="rgb(221,155,16)"/><text x="50.1473%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (201 samples, 1.29%)</title><rect x="49.8973%" y="309" width="1.2901%" height="15" fill="rgb(215,215,53)"/><text x="50.1473%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (201 samples, 1.29%)</title><rect x="49.8973%" y="293" width="1.2901%" height="15" fill="rgb(223,4,10)"/><text x="50.1473%" y="303.50"></text></g><g><title>alloc::alloc::realloc (201 samples, 1.29%)</title><rect x="49.8973%" y="277" width="1.2901%" height="15" fill="rgb(234,103,6)"/><text x="50.1473%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (221 samples, 1.42%)</title><rect x="49.8780%" y="341" width="1.4185%" height="15" fill="rgb(227,97,0)"/><text x="50.1280%" y="351.50"></text></g><g><title>core::cmp::max (17 samples, 0.11%)</title><rect x="51.1874%" y="325" width="0.1091%" height="15" fill="rgb(234,150,53)"/><text x="51.4374%" y="335.50"></text></g><g><title>core::cmp::Ord::max (17 samples, 0.11%)</title><rect x="51.1874%" y="309" width="0.1091%" height="15" fill="rgb(228,201,54)"/><text x="51.4374%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (17 samples, 0.11%)</title><rect x="51.1874%" y="293" width="0.1091%" height="15" fill="rgb(222,22,37)"/><text x="51.4374%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (237 samples, 1.52%)</title><rect x="49.8331%" y="389" width="1.5212%" height="15" fill="rgb(237,53,32)"/><text x="50.0831%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (237 samples, 1.52%)</title><rect x="49.8331%" y="373" width="1.5212%" height="15" fill="rgb(233,25,53)"/><text x="50.0831%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (237 samples, 1.52%)</title><rect x="49.8331%" y="357" width="1.5212%" height="15" fill="rgb(210,40,34)"/><text x="50.0831%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (272 samples, 1.75%)</title><rect x="49.7946%" y="485" width="1.7458%" height="15" fill="rgb(241,220,44)"/><text x="50.0446%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (271 samples, 1.74%)</title><rect x="49.8010%" y="469" width="1.7394%" height="15" fill="rgb(235,28,35)"/><text x="50.0510%" y="479.50"></text></g><g><title>alloc::string::String::push_str (271 samples, 1.74%)</title><rect x="49.8010%" y="453" width="1.7394%" height="15" fill="rgb(210,56,17)"/><text x="50.0510%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (271 samples, 1.74%)</title><rect x="49.8010%" y="437" width="1.7394%" height="15" fill="rgb(224,130,29)"/><text x="50.0510%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (271 samples, 1.74%)</title><rect x="49.8010%" y="421" width="1.7394%" height="15" fill="rgb(235,212,8)"/><text x="50.0510%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (271 samples, 1.74%)</title><rect x="49.8010%" y="405" width="1.7394%" height="15" fill="rgb(223,33,50)"/><text x="50.0510%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.19%)</title><rect x="51.3543%" y="389" width="0.1861%" height="15" fill="rgb(219,149,13)"/><text x="51.6043%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.16%)</title><rect x="51.3800%" y="373" width="0.1605%" height="15" fill="rgb(250,156,29)"/><text x="51.6300%" y="383.50"></text></g><g><title>__GI___libc_free (16 samples, 0.10%)</title><rect x="52.8755%" y="453" width="0.1027%" height="15" fill="rgb(216,193,19)"/><text x="53.1255%" y="463.50"></text></g><g><title>_int_free (38 samples, 0.24%)</title><rect x="53.0167%" y="453" width="0.2439%" height="15" fill="rgb(216,135,14)"/><text x="53.2667%" y="463.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (79 samples, 0.51%)</title><rect x="54.2619%" y="421" width="0.5071%" height="15" fill="rgb(241,47,5)"/><text x="54.5119%" y="431.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (163 samples, 1.05%)</title><rect x="54.2619%" y="437" width="1.0462%" height="15" fill="rgb(233,42,35)"/><text x="54.5119%" y="447.50"></text></g><g><title>core::str::validations::next_code_point (84 samples, 0.54%)</title><rect x="54.7689%" y="421" width="0.5392%" height="15" fill="rgb(231,13,6)"/><text x="55.0189%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (78 samples, 0.50%)</title><rect x="56.3350%" y="405" width="0.5006%" height="15" fill="rgb(207,181,40)"/><text x="56.5850%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (230 samples, 1.48%)</title><rect x="55.3915%" y="421" width="1.4763%" height="15" fill="rgb(254,173,49)"/><text x="55.6415%" y="431.50"></text></g><g><title>alloc::string::String::push (342 samples, 2.20%)</title><rect x="55.3273%" y="437" width="2.1951%" height="15" fill="rgb(221,1,38)"/><text x="55.5773%" y="447.50">a..</text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (102 samples, 0.65%)</title><rect x="56.8678%" y="421" width="0.6547%" height="15" fill="rgb(206,124,46)"/><text x="57.1178%" y="431.50"></text></g><g><title>core::char::methods::len_utf8 (102 samples, 0.65%)</title><rect x="56.8678%" y="405" width="0.6547%" height="15" fill="rgb(249,21,11)"/><text x="57.1178%" y="415.50"></text></g><g><title>__GI___libc_malloc (51 samples, 0.33%)</title><rect x="57.6059%" y="309" width="0.3273%" height="15" fill="rgb(222,201,40)"/><text x="57.8559%" y="319.50"></text></g><g><title>alloc::string::String::with_capacity (86 samples, 0.55%)</title><rect x="57.5225%" y="437" width="0.5520%" height="15" fill="rgb(235,61,29)"/><text x="57.7725%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (80 samples, 0.51%)</title><rect x="57.5610%" y="421" width="0.5135%" height="15" fill="rgb(219,207,3)"/><text x="57.8110%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (80 samples, 0.51%)</title><rect x="57.5610%" y="405" width="0.5135%" height="15" fill="rgb(222,56,46)"/><text x="57.8110%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (80 samples, 0.51%)</title><rect x="57.5610%" y="389" width="0.5135%" height="15" fill="rgb(239,76,54)"/><text x="57.8110%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (80 samples, 0.51%)</title><rect x="57.5610%" y="373" width="0.5135%" height="15" fill="rgb(231,124,27)"/><text x="57.8110%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (80 samples, 0.51%)</title><rect x="57.5610%" y="357" width="0.5135%" height="15" fill="rgb(249,195,6)"/><text x="57.8110%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (80 samples, 0.51%)</title><rect x="57.5610%" y="341" width="0.5135%" height="15" fill="rgb(237,174,47)"/><text x="57.8110%" y="351.50"></text></g><g><title>alloc::alloc::alloc (76 samples, 0.49%)</title><rect x="57.5866%" y="325" width="0.4878%" height="15" fill="rgb(206,201,31)"/><text x="57.8366%" y="335.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (389 samples, 2.50%)</title><rect x="63.2606%" y="389" width="2.4968%" height="15" fill="rgb(231,57,52)"/><text x="63.5106%" y="399.50">&lt;c..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1,960 samples, 12.58%)</title><rect x="53.2606%" y="453" width="12.5802%" height="15" fill="rgb(248,177,22)"/><text x="53.5106%" y="463.50">alloc::str::&lt;impl s..</text></g><g><title>core::unicode::unicode_data::conversions::to_upper (1,205 samples, 7.73%)</title><rect x="58.1065%" y="437" width="7.7343%" height="15" fill="rgb(215,211,37)"/><text x="58.3565%" y="447.50">core::unico..</text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (893 samples, 5.73%)</title><rect x="60.1091%" y="421" width="5.7317%" height="15" fill="rgb(241,128,51)"/><text x="60.3591%" y="431.50">core::u..</text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (893 samples, 5.73%)</title><rect x="60.1091%" y="405" width="5.7317%" height="15" fill="rgb(227,165,31)"/><text x="60.3591%" y="415.50">core::s..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (51 samples, 0.33%)</title><rect x="66.5533%" y="421" width="0.3273%" height="15" fill="rgb(228,167,24)"/><text x="66.8033%" y="431.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (2,391 samples, 15.35%)</title><rect x="51.5404%" y="485" width="15.3466%" height="15" fill="rgb(228,143,12)"/><text x="51.7904%" y="495.50">&lt;sql_parser::ast::defs::..</text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (2,385 samples, 15.31%)</title><rect x="51.5789%" y="469" width="15.3081%" height="15" fill="rgb(249,149,8)"/><text x="51.8289%" y="479.50">sql_parser::ast::defs::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (163 samples, 1.05%)</title><rect x="65.8408%" y="453" width="1.0462%" height="15" fill="rgb(243,35,44)"/><text x="66.0908%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (139 samples, 0.89%)</title><rect x="65.9949%" y="437" width="0.8922%" height="15" fill="rgb(246,89,9)"/><text x="66.2449%" y="447.50"></text></g><g><title>_int_free (44 samples, 0.28%)</title><rect x="67.0282%" y="485" width="0.2824%" height="15" fill="rgb(233,213,13)"/><text x="67.2782%" y="495.50"></text></g><g><title>__GI___libc_free (27 samples, 0.17%)</title><rect x="67.6187%" y="469" width="0.1733%" height="15" fill="rgb(233,141,41)"/><text x="67.8687%" y="479.50"></text></g><g><title>__GI___libc_realloc (99 samples, 0.64%)</title><rect x="67.7920%" y="469" width="0.6354%" height="15" fill="rgb(239,167,4)"/><text x="68.0420%" y="479.50"></text></g><g><title>_int_realloc (31 samples, 0.20%)</title><rect x="68.2285%" y="453" width="0.1990%" height="15" fill="rgb(209,217,16)"/><text x="68.4785%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (22 samples, 0.14%)</title><rect x="68.4275%" y="469" width="0.1412%" height="15" fill="rgb(219,88,35)"/><text x="68.6775%" y="479.50"></text></g><g><title>_int_free (41 samples, 0.26%)</title><rect x="68.6329%" y="469" width="0.2632%" height="15" fill="rgb(220,193,23)"/><text x="68.8829%" y="479.50"></text></g><g><title>__GI___libc_malloc (46 samples, 0.30%)</title><rect x="69.1656%" y="453" width="0.2953%" height="15" fill="rgb(230,90,52)"/><text x="69.4156%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (102 samples, 0.65%)</title><rect x="68.8960%" y="469" width="0.6547%" height="15" fill="rgb(252,106,19)"/><text x="69.1460%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.17%)</title><rect x="69.9037%" y="437" width="0.1733%" height="15" fill="rgb(206,74,20)"/><text x="70.1537%" y="447.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.19%)</title><rect x="70.2696%" y="421" width="0.1926%" height="15" fill="rgb(230,138,44)"/><text x="70.5196%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (66 samples, 0.42%)</title><rect x="70.0770%" y="437" width="0.4236%" height="15" fill="rgb(235,182,43)"/><text x="70.3270%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (112 samples, 0.72%)</title><rect x="69.7882%" y="453" width="0.7189%" height="15" fill="rgb(242,16,51)"/><text x="70.0382%" y="463.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (3,279 samples, 21.05%)</title><rect x="49.6213%" y="501" width="21.0462%" height="15" fill="rgb(248,9,4)"/><text x="49.8713%" y="511.50">&lt;sql_parser::ast::defs::name::Ide..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (518 samples, 3.32%)</title><rect x="67.3427%" y="485" width="3.3248%" height="15" fill="rgb(210,31,22)"/><text x="67.5927%" y="495.50">sql..</text></g><g><title>core::fmt::write (174 samples, 1.12%)</title><rect x="69.5507%" y="469" width="1.1168%" height="15" fill="rgb(239,54,39)"/><text x="69.8007%" y="479.50"></text></g><g><title>decor_mem::select::get_value_for_row (8,698 samples, 55.83%)</title><rect x="15.0449%" y="597" width="55.8280%" height="15" fill="rgb(230,99,41)"/><text x="15.2949%" y="607.50">decor_mem::select::get_value_for_row</text></g><g><title>decor_mem::select::tablecolumn_matches_col (7,638 samples, 49.02%)</title><rect x="21.8485%" y="581" width="49.0244%" height="15" fill="rgb(253,106,12)"/><text x="22.0985%" y="591.50">decor_mem::select::tablecolumn_matches_col</text></g><g><title>decor_mem::views::TableColumnDef::name (3,657 samples, 23.47%)</title><rect x="47.4005%" y="565" width="23.4724%" height="15" fill="rgb(213,46,41)"/><text x="47.6505%" y="575.50">decor_mem::views::TableColumnDef::name</text></g><g><title>alloc::fmt::format (3,625 samples, 23.27%)</title><rect x="47.6059%" y="549" width="23.2670%" height="15" fill="rgb(215,133,35)"/><text x="47.8559%" y="559.50">alloc::fmt::format</text></g><g><title>core::fmt::Write::write_fmt (3,559 samples, 22.84%)</title><rect x="48.0295%" y="533" width="22.8434%" height="15" fill="rgb(213,28,5)"/><text x="48.2795%" y="543.50">core::fmt::Write::write_fmt</text></g><g><title>core::fmt::write (3,548 samples, 22.77%)</title><rect x="48.1001%" y="517" width="22.7728%" height="15" fill="rgb(215,77,49)"/><text x="48.3501%" y="527.50">core::fmt::write</text></g><g><title>decor_mem::select::tablecolumn_matches_col (17 samples, 0.11%)</title><rect x="70.8729%" y="597" width="0.1091%" height="15" fill="rgb(248,100,22)"/><text x="71.1229%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (24 samples, 0.15%)</title><rect x="71.0719%" y="517" width="0.1540%" height="15" fill="rgb(208,67,9)"/><text x="71.3219%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (36 samples, 0.23%)</title><rect x="71.0270%" y="549" width="0.2311%" height="15" fill="rgb(219,133,21)"/><text x="71.2770%" y="559.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (36 samples, 0.23%)</title><rect x="71.0270%" y="533" width="0.2311%" height="15" fill="rgb(246,46,29)"/><text x="71.2770%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (45 samples, 0.29%)</title><rect x="71.0205%" y="565" width="0.2888%" height="15" fill="rgb(246,185,52)"/><text x="71.2705%" y="575.50"></text></g><g><title>core::fmt::write (55 samples, 0.35%)</title><rect x="71.0141%" y="581" width="0.3530%" height="15" fill="rgb(252,136,11)"/><text x="71.2641%" y="591.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (64 samples, 0.41%)</title><rect x="70.9820%" y="597" width="0.4108%" height="15" fill="rgb(219,138,53)"/><text x="71.2320%" y="607.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (9,090 samples, 58.34%)</title><rect x="13.6072%" y="613" width="58.3440%" height="15" fill="rgb(211,51,23)"/><text x="13.8572%" y="623.50">decor_mem::select::get_ris_matching_constraint</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (79 samples, 0.51%)</title><rect x="71.4442%" y="597" width="0.5071%" height="15" fill="rgb(247,221,28)"/><text x="71.6942%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (57 samples, 0.37%)</title><rect x="71.5854%" y="581" width="0.3659%" height="15" fill="rgb(251,222,45)"/><text x="71.8354%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (46 samples, 0.30%)</title><rect x="71.6560%" y="565" width="0.2953%" height="15" fill="rgb(217,162,53)"/><text x="71.9060%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 0.20%)</title><rect x="71.7522%" y="549" width="0.1990%" height="15" fill="rgb(229,93,14)"/><text x="72.0022%" y="559.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (61 samples, 0.39%)</title><rect x="72.2657%" y="533" width="0.3915%" height="15" fill="rgb(209,67,49)"/><text x="72.5157%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (34 samples, 0.22%)</title><rect x="72.4390%" y="517" width="0.2182%" height="15" fill="rgb(213,87,29)"/><text x="72.6890%" y="527.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (28 samples, 0.18%)</title><rect x="72.4775%" y="501" width="0.1797%" height="15" fill="rgb(205,151,52)"/><text x="72.7275%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (28 samples, 0.18%)</title><rect x="72.4775%" y="485" width="0.1797%" height="15" fill="rgb(253,215,39)"/><text x="72.7275%" y="495.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (76 samples, 0.49%)</title><rect x="72.2144%" y="565" width="0.4878%" height="15" fill="rgb(221,220,41)"/><text x="72.4644%" y="575.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (76 samples, 0.49%)</title><rect x="72.2144%" y="549" width="0.4878%" height="15" fill="rgb(218,133,21)"/><text x="72.4644%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (95 samples, 0.61%)</title><rect x="72.2015%" y="581" width="0.6098%" height="15" fill="rgb(221,193,43)"/><text x="72.4515%" y="591.50"></text></g><g><title>core::fmt::write (115 samples, 0.74%)</title><rect x="72.1759%" y="597" width="0.7381%" height="15" fill="rgb(240,128,52)"/><text x="72.4259%" y="607.50"></text></g><g><title>decor_mem::views::View::get_ris_of_col (147 samples, 0.94%)</title><rect x="72.0347%" y="613" width="0.9435%" height="15" fill="rgb(253,114,12)"/><text x="72.2847%" y="623.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (9,300 samples, 59.69%)</title><rect x="13.4917%" y="629" width="59.6919%" height="15" fill="rgb(215,223,47)"/><text x="13.7417%" y="639.50">decor_mem::select::get_ris_matching_constraint</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (32 samples, 0.21%)</title><rect x="72.9782%" y="613" width="0.2054%" height="15" fill="rgb(248,225,23)"/><text x="73.2282%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (29 samples, 0.19%)</title><rect x="72.9974%" y="597" width="0.1861%" height="15" fill="rgb(250,108,0)"/><text x="73.2474%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (26 samples, 0.17%)</title><rect x="73.0167%" y="581" width="0.1669%" height="15" fill="rgb(228,208,7)"/><text x="73.2667%" y="591.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (9,340 samples, 59.95%)</title><rect x="13.3633%" y="693" width="59.9487%" height="15" fill="rgb(244,45,10)"/><text x="13.6133%" y="703.50">decor_mem::query_transformer::QueryTransformer::query</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (9,340 samples, 59.95%)</title><rect x="13.3633%" y="677" width="59.9487%" height="15" fill="rgb(207,125,25)"/><text x="13.6133%" y="687.50">decor_mem::query_transformer::QueryTransformer::issue_statement</text></g><g><title>decor_mem::select::get_query_results (9,333 samples, 59.90%)</title><rect x="13.4082%" y="661" width="59.9037%" height="15" fill="rgb(210,195,18)"/><text x="13.6582%" y="671.50">decor_mem::select::get_query_results</text></g><g><title>decor_mem::select::get_setexpr_results (9,333 samples, 59.90%)</title><rect x="13.4082%" y="645" width="59.9037%" height="15" fill="rgb(249,80,12)"/><text x="13.6582%" y="655.50">decor_mem::select::get_setexpr_results</text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (40 samples, 0.26%)</title><rect x="73.3761%" y="597" width="0.2567%" height="15" fill="rgb(221,65,9)"/><text x="73.6261%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (35 samples, 0.22%)</title><rect x="73.4082%" y="581" width="0.2246%" height="15" fill="rgb(235,49,36)"/><text x="73.6582%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.22%)</title><rect x="73.4146%" y="565" width="0.2182%" height="15" fill="rgb(225,32,20)"/><text x="73.6646%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34 samples, 0.22%)</title><rect x="73.4146%" y="549" width="0.2182%" height="15" fill="rgb(215,141,46)"/><text x="73.6646%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (33 samples, 0.21%)</title><rect x="73.4211%" y="533" width="0.2118%" height="15" fill="rgb(250,160,47)"/><text x="73.6711%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (33 samples, 0.21%)</title><rect x="73.4211%" y="517" width="0.2118%" height="15" fill="rgb(216,222,40)"/><text x="73.6711%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (33 samples, 0.21%)</title><rect x="73.4211%" y="501" width="0.2118%" height="15" fill="rgb(234,217,39)"/><text x="73.6711%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 0.21%)</title><rect x="73.4211%" y="485" width="0.2118%" height="15" fill="rgb(207,178,40)"/><text x="73.6711%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 0.21%)</title><rect x="73.4211%" y="469" width="0.2118%" height="15" fill="rgb(221,136,13)"/><text x="73.6711%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (33 samples, 0.21%)</title><rect x="73.4211%" y="453" width="0.2118%" height="15" fill="rgb(249,199,10)"/><text x="73.6711%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.21%)</title><rect x="73.4211%" y="437" width="0.2118%" height="15" fill="rgb(249,222,13)"/><text x="73.6711%" y="447.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.21%)</title><rect x="73.4211%" y="421" width="0.2118%" height="15" fill="rgb(244,185,38)"/><text x="73.6711%" y="431.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.21%)</title><rect x="73.4275%" y="405" width="0.2054%" height="15" fill="rgb(236,202,9)"/><text x="73.6775%" y="415.50"></text></g><g><title>_int_malloc (21 samples, 0.13%)</title><rect x="73.4981%" y="389" width="0.1348%" height="15" fill="rgb(250,229,37)"/><text x="73.7481%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (54 samples, 0.35%)</title><rect x="73.3697%" y="613" width="0.3466%" height="15" fill="rgb(206,174,23)"/><text x="73.6197%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (27 samples, 0.17%)</title><rect x="73.7163%" y="613" width="0.1733%" height="15" fill="rgb(211,33,43)"/><text x="73.9663%" y="623.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (92 samples, 0.59%)</title><rect x="73.3119%" y="693" width="0.5905%" height="15" fill="rgb(245,58,50)"/><text x="73.5619%" y="703.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::clone::Clone&gt;::clone (92 samples, 0.59%)</title><rect x="73.3119%" y="677" width="0.5905%" height="15" fill="rgb(244,68,36)"/><text x="73.5619%" y="687.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as core::clone::Clone&gt;::clone (92 samples, 0.59%)</title><rect x="73.3119%" y="661" width="0.5905%" height="15" fill="rgb(232,229,15)"/><text x="73.5619%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::SetExpr as core::clone::Clone&gt;::clone (92 samples, 0.59%)</title><rect x="73.3119%" y="645" width="0.5905%" height="15" fill="rgb(254,30,23)"/><text x="73.5619%" y="655.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as core::clone::Clone&gt;::clone (83 samples, 0.53%)</title><rect x="73.3697%" y="629" width="0.5327%" height="15" fill="rgb(235,160,14)"/><text x="73.6197%" y="639.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (9,436 samples, 60.56%)</title><rect x="13.3633%" y="709" width="60.5648%" height="15" fill="rgb(212,155,44)"/><text x="13.6133%" y="719.50">&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query</text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (23 samples, 0.15%)</title><rect x="73.9538%" y="709" width="0.1476%" height="15" fill="rgb(226,2,50)"/><text x="74.2038%" y="719.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (39 samples, 0.25%)</title><rect x="74.1014%" y="709" width="0.2503%" height="15" fill="rgb(234,177,6)"/><text x="74.3514%" y="719.50"></text></g><g><title>__GI___libc_free (39 samples, 0.25%)</title><rect x="74.5828%" y="709" width="0.2503%" height="15" fill="rgb(217,24,9)"/><text x="74.8328%" y="719.50"></text></g><g><title>__GI___libc_malloc (45 samples, 0.29%)</title><rect x="74.8331%" y="709" width="0.2888%" height="15" fill="rgb(220,13,46)"/><text x="75.0831%" y="719.50"></text></g><g><title>__GI___libc_realloc (18 samples, 0.12%)</title><rect x="75.1220%" y="709" width="0.1155%" height="15" fill="rgb(239,221,27)"/><text x="75.3720%" y="719.50"></text></g><g><title>_int_free (35 samples, 0.22%)</title><rect x="75.3466%" y="709" width="0.2246%" height="15" fill="rgb(222,198,25)"/><text x="75.5966%" y="719.50"></text></g><g><title>_int_realloc (44 samples, 0.28%)</title><rect x="75.6483%" y="709" width="0.2824%" height="15" fill="rgb(211,99,13)"/><text x="75.8983%" y="719.50"></text></g><g><title>alloc::string::String::push (173 samples, 1.11%)</title><rect x="76.0270%" y="709" width="1.1104%" height="15" fill="rgb(232,111,31)"/><text x="76.2770%" y="719.50"></text></g><g><title>core::fmt::Formatter::pad (43 samples, 0.28%)</title><rect x="77.1566%" y="709" width="0.2760%" height="15" fill="rgb(245,82,37)"/><text x="77.4066%" y="719.50"></text></g><g><title>core::fmt::write (67 samples, 0.43%)</title><rect x="77.4583%" y="709" width="0.4300%" height="15" fill="rgb(227,149,46)"/><text x="77.7083%" y="719.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (23 samples, 0.15%)</title><rect x="78.0616%" y="661" width="0.1476%" height="15" fill="rgb(218,36,50)"/><text x="78.3116%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.11%)</title><rect x="78.3954%" y="613" width="0.1091%" height="15" fill="rgb(226,80,48)"/><text x="78.6454%" y="623.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.11%)</title><rect x="78.3954%" y="597" width="0.1091%" height="15" fill="rgb(238,224,15)"/><text x="78.6454%" y="607.50"></text></g><g><title>_int_realloc (16 samples, 0.10%)</title><rect x="78.4018%" y="581" width="0.1027%" height="15" fill="rgb(241,136,10)"/><text x="78.6518%" y="591.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (27 samples, 0.17%)</title><rect x="78.5045%" y="613" width="0.1733%" height="15" fill="rgb(208,32,45)"/><text x="78.7545%" y="623.50"></text></g><g><title>decor_mem::Shim::run_on_tcp (124 samples, 0.80%)</title><rect x="78.0616%" y="709" width="0.7959%" height="15" fill="rgb(207,135,9)"/><text x="78.3116%" y="719.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (124 samples, 0.80%)</title><rect x="78.0616%" y="693" width="0.7959%" height="15" fill="rgb(206,86,44)"/><text x="78.3116%" y="703.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (124 samples, 0.80%)</title><rect x="78.0616%" y="677" width="0.7959%" height="15" fill="rgb(245,177,15)"/><text x="78.3116%" y="687.50"></text></g><g><title>decor_mem::stats::get_qtype (101 samples, 0.65%)</title><rect x="78.2092%" y="661" width="0.6483%" height="15" fill="rgb(206,64,50)"/><text x="78.4592%" y="671.50"></text></g><g><title>sql_parser::parser::parse_statements (101 samples, 0.65%)</title><rect x="78.2092%" y="645" width="0.6483%" height="15" fill="rgb(234,36,40)"/><text x="78.4592%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (81 samples, 0.52%)</title><rect x="78.3376%" y="629" width="0.5199%" height="15" fill="rgb(213,64,8)"/><text x="78.5876%" y="639.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (28 samples, 0.18%)</title><rect x="78.6778%" y="613" width="0.1797%" height="15" fill="rgb(210,75,36)"/><text x="78.9278%" y="623.50"></text></g><g><title>decor_mem::select::tablecolumn_matches_col (23 samples, 0.15%)</title><rect x="78.9795%" y="709" width="0.1476%" height="15" fill="rgb(229,88,21)"/><text x="79.2295%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (24 samples, 0.15%)</title><rect x="79.2041%" y="677" width="0.1540%" height="15" fill="rgb(252,204,47)"/><text x="79.4541%" y="687.50"></text></g><g><title>sk_wait_data (32 samples, 0.21%)</title><rect x="79.4608%" y="405" width="0.2054%" height="15" fill="rgb(208,77,27)"/><text x="79.7108%" y="415.50"></text></g><g><title>wait_woken (28 samples, 0.18%)</title><rect x="79.4865%" y="389" width="0.1797%" height="15" fill="rgb(221,76,26)"/><text x="79.7365%" y="399.50"></text></g><g><title>schedule_timeout (26 samples, 0.17%)</title><rect x="79.4994%" y="373" width="0.1669%" height="15" fill="rgb(225,139,18)"/><text x="79.7494%" y="383.50"></text></g><g><title>schedule (25 samples, 0.16%)</title><rect x="79.5058%" y="357" width="0.1605%" height="15" fill="rgb(230,137,11)"/><text x="79.7558%" y="367.50"></text></g><g><title>__schedule (25 samples, 0.16%)</title><rect x="79.5058%" y="341" width="0.1605%" height="15" fill="rgb(212,28,1)"/><text x="79.7558%" y="351.50"></text></g><g><title>inet_recvmsg (43 samples, 0.28%)</title><rect x="79.4159%" y="437" width="0.2760%" height="15" fill="rgb(248,164,17)"/><text x="79.6659%" y="447.50"></text></g><g><title>tcp_recvmsg (43 samples, 0.28%)</title><rect x="79.4159%" y="421" width="0.2760%" height="15" fill="rgb(222,171,42)"/><text x="79.6659%" y="431.50"></text></g><g><title>do_syscall_64 (44 samples, 0.28%)</title><rect x="79.4159%" y="485" width="0.2824%" height="15" fill="rgb(243,84,45)"/><text x="79.6659%" y="495.50"></text></g><g><title>__x64_sys_recvfrom (44 samples, 0.28%)</title><rect x="79.4159%" y="469" width="0.2824%" height="15" fill="rgb(252,49,23)"/><text x="79.6659%" y="479.50"></text></g><g><title>__sys_recvfrom (44 samples, 0.28%)</title><rect x="79.4159%" y="453" width="0.2824%" height="15" fill="rgb(215,19,7)"/><text x="79.6659%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (51 samples, 0.33%)</title><rect x="79.4095%" y="501" width="0.3273%" height="15" fill="rgb(238,81,41)"/><text x="79.6595%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (53 samples, 0.34%)</title><rect x="79.4031%" y="597" width="0.3402%" height="15" fill="rgb(210,199,37)"/><text x="79.6531%" y="607.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (53 samples, 0.34%)</title><rect x="79.4031%" y="581" width="0.3402%" height="15" fill="rgb(244,192,49)"/><text x="79.6531%" y="591.50"></text></g><g><title>std::sys_common::net::TcpStream::read (53 samples, 0.34%)</title><rect x="79.4031%" y="565" width="0.3402%" height="15" fill="rgb(226,211,11)"/><text x="79.6531%" y="575.50"></text></g><g><title>std::sys::unix::net::Socket::read (53 samples, 0.34%)</title><rect x="79.4031%" y="549" width="0.3402%" height="15" fill="rgb(236,162,54)"/><text x="79.6531%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (53 samples, 0.34%)</title><rect x="79.4031%" y="533" width="0.3402%" height="15" fill="rgb(220,229,9)"/><text x="79.6531%" y="543.50"></text></g><g><title>__libc_recv (53 samples, 0.34%)</title><rect x="79.4031%" y="517" width="0.3402%" height="15" fill="rgb(250,87,22)"/><text x="79.6531%" y="527.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.39%)</title><rect x="79.4031%" y="613" width="0.3851%" height="15" fill="rgb(239,43,17)"/><text x="79.6531%" y="623.50"></text></g><g><title>mysql::conn::Conn::read_packet (68 samples, 0.44%)</title><rect x="79.3774%" y="629" width="0.4365%" height="15" fill="rgb(231,177,25)"/><text x="79.6274%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (72 samples, 0.46%)</title><rect x="79.3710%" y="645" width="0.4621%" height="15" fill="rgb(219,179,1)"/><text x="79.6210%" y="655.50"></text></g><g><title>tcp_v4_do_rcv (22 samples, 0.14%)</title><rect x="80.1220%" y="165" width="0.1412%" height="15" fill="rgb(238,219,53)"/><text x="80.3720%" y="175.50"></text></g><g><title>tcp_rcv_established (22 samples, 0.14%)</title><rect x="80.1220%" y="149" width="0.1412%" height="15" fill="rgb(232,167,36)"/><text x="80.3720%" y="159.50"></text></g><g><title>ip_local_deliver (34 samples, 0.22%)</title><rect x="80.0513%" y="229" width="0.2182%" height="15" fill="rgb(244,19,51)"/><text x="80.3013%" y="239.50"></text></g><g><title>ip_local_deliver_finish (34 samples, 0.22%)</title><rect x="80.0513%" y="213" width="0.2182%" height="15" fill="rgb(224,6,22)"/><text x="80.3013%" y="223.50"></text></g><g><title>ip_protocol_deliver_rcu (33 samples, 0.21%)</title><rect x="80.0578%" y="197" width="0.2118%" height="15" fill="rgb(224,145,5)"/><text x="80.3078%" y="207.50"></text></g><g><title>tcp_v4_rcv (29 samples, 0.19%)</title><rect x="80.0834%" y="181" width="0.1861%" height="15" fill="rgb(234,130,49)"/><text x="80.3334%" y="191.50"></text></g><g><title>__netif_receive_skb_one_core (38 samples, 0.24%)</title><rect x="80.0321%" y="261" width="0.2439%" height="15" fill="rgb(254,6,2)"/><text x="80.2821%" y="271.50"></text></g><g><title>ip_rcv (37 samples, 0.24%)</title><rect x="80.0385%" y="245" width="0.2375%" height="15" fill="rgb(208,96,46)"/><text x="80.2885%" y="255.50"></text></g><g><title>do_softirq (46 samples, 0.30%)</title><rect x="80.0000%" y="341" width="0.2953%" height="15" fill="rgb(239,3,39)"/><text x="80.2500%" y="351.50"></text></g><g><title>do_softirq_own_stack (45 samples, 0.29%)</title><rect x="80.0064%" y="325" width="0.2888%" height="15" fill="rgb(233,210,1)"/><text x="80.2564%" y="335.50"></text></g><g><title>__do_softirq (45 samples, 0.29%)</title><rect x="80.0064%" y="309" width="0.2888%" height="15" fill="rgb(244,137,37)"/><text x="80.2564%" y="319.50"></text></g><g><title>net_rx_action (42 samples, 0.27%)</title><rect x="80.0257%" y="293" width="0.2696%" height="15" fill="rgb(240,136,2)"/><text x="80.2757%" y="303.50"></text></g><g><title>process_backlog (41 samples, 0.26%)</title><rect x="80.0321%" y="277" width="0.2632%" height="15" fill="rgb(239,18,37)"/><text x="80.2821%" y="287.50"></text></g><g><title>__ip_queue_xmit (61 samples, 0.39%)</title><rect x="79.9101%" y="405" width="0.3915%" height="15" fill="rgb(218,185,22)"/><text x="80.1601%" y="415.50"></text></g><g><title>ip_output (60 samples, 0.39%)</title><rect x="79.9166%" y="389" width="0.3851%" height="15" fill="rgb(225,218,4)"/><text x="80.1666%" y="399.50"></text></g><g><title>ip_finish_output2 (59 samples, 0.38%)</title><rect x="79.9230%" y="373" width="0.3787%" height="15" fill="rgb(230,182,32)"/><text x="80.1730%" y="383.50"></text></g><g><title>__local_bh_enable_ip (47 samples, 0.30%)</title><rect x="80.0000%" y="357" width="0.3017%" height="15" fill="rgb(242,56,43)"/><text x="80.2500%" y="367.50"></text></g><g><title>__tcp_transmit_skb (63 samples, 0.40%)</title><rect x="79.9037%" y="421" width="0.4044%" height="15" fill="rgb(233,99,24)"/><text x="80.1537%" y="431.50"></text></g><g><title>__tcp_push_pending_frames (65 samples, 0.42%)</title><rect x="79.8973%" y="453" width="0.4172%" height="15" fill="rgb(234,209,42)"/><text x="80.1473%" y="463.50"></text></g><g><title>tcp_write_xmit (65 samples, 0.42%)</title><rect x="79.8973%" y="437" width="0.4172%" height="15" fill="rgb(227,7,12)"/><text x="80.1473%" y="447.50"></text></g><g><title>__x64_sys_sendto (75 samples, 0.48%)</title><rect x="79.8588%" y="533" width="0.4814%" height="15" fill="rgb(245,203,43)"/><text x="80.1088%" y="543.50"></text></g><g><title>__sys_sendto (75 samples, 0.48%)</title><rect x="79.8588%" y="517" width="0.4814%" height="15" fill="rgb(238,205,33)"/><text x="80.1088%" y="527.50"></text></g><g><title>sock_sendmsg (74 samples, 0.47%)</title><rect x="79.8652%" y="501" width="0.4750%" height="15" fill="rgb(231,56,7)"/><text x="80.1152%" y="511.50"></text></g><g><title>tcp_sendmsg (74 samples, 0.47%)</title><rect x="79.8652%" y="485" width="0.4750%" height="15" fill="rgb(244,186,29)"/><text x="80.1152%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (71 samples, 0.46%)</title><rect x="79.8845%" y="469" width="0.4557%" height="15" fill="rgb(234,111,31)"/><text x="80.1345%" y="479.50"></text></g><g><title>do_syscall_64 (80 samples, 0.51%)</title><rect x="79.8588%" y="549" width="0.5135%" height="15" fill="rgb(241,149,10)"/><text x="80.1088%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (84 samples, 0.54%)</title><rect x="79.8588%" y="565" width="0.5392%" height="15" fill="rgb(249,206,44)"/><text x="80.1088%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (163 samples, 1.05%)</title><rect x="79.3582%" y="677" width="1.0462%" height="15" fill="rgb(251,153,30)"/><text x="79.6082%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (161 samples, 1.03%)</title><rect x="79.3710%" y="661" width="1.0334%" height="15" fill="rgb(239,152,38)"/><text x="79.6210%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (89 samples, 0.57%)</title><rect x="79.8331%" y="645" width="0.5712%" height="15" fill="rgb(249,139,47)"/><text x="80.0831%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (86 samples, 0.55%)</title><rect x="79.8524%" y="629" width="0.5520%" height="15" fill="rgb(244,64,35)"/><text x="80.1024%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (86 samples, 0.55%)</title><rect x="79.8524%" y="613" width="0.5520%" height="15" fill="rgb(216,46,15)"/><text x="80.1024%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (86 samples, 0.55%)</title><rect x="79.8524%" y="597" width="0.5520%" height="15" fill="rgb(250,74,19)"/><text x="80.1024%" y="607.50"></text></g><g><title>__libc_send (86 samples, 0.55%)</title><rect x="79.8524%" y="581" width="0.5520%" height="15" fill="rgb(249,42,33)"/><text x="80.1024%" y="591.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (18 samples, 0.12%)</title><rect x="80.4172%" y="645" width="0.1155%" height="15" fill="rgb(242,149,17)"/><text x="80.6672%" y="655.50"></text></g><g><title>mysql::conn::Conn::next_text (18 samples, 0.12%)</title><rect x="80.4172%" y="629" width="0.1155%" height="15" fill="rgb(244,29,21)"/><text x="80.6672%" y="639.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.16%)</title><rect x="80.4044%" y="661" width="0.1605%" height="15" fill="rgb(220,130,37)"/><text x="80.6544%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.18%)</title><rect x="80.4044%" y="677" width="0.1797%" height="15" fill="rgb(211,67,2)"/><text x="80.6544%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.12%)</title><rect x="80.7189%" y="645" width="0.1155%" height="15" fill="rgb(235,68,52)"/><text x="80.9689%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 0.22%)</title><rect x="80.6611%" y="661" width="0.2246%" height="15" fill="rgb(246,142,3)"/><text x="80.9111%" y="671.50"></text></g><g><title>__tcp_push_pending_frames (16 samples, 0.10%)</title><rect x="80.9820%" y="453" width="0.1027%" height="15" fill="rgb(241,25,7)"/><text x="81.2320%" y="463.50"></text></g><g><title>tcp_write_xmit (16 samples, 0.10%)</title><rect x="80.9820%" y="437" width="0.1027%" height="15" fill="rgb(242,119,39)"/><text x="81.2320%" y="447.50"></text></g><g><title>__x64_sys_sendto (19 samples, 0.12%)</title><rect x="80.9692%" y="533" width="0.1220%" height="15" fill="rgb(241,98,45)"/><text x="81.2192%" y="543.50"></text></g><g><title>__sys_sendto (19 samples, 0.12%)</title><rect x="80.9692%" y="517" width="0.1220%" height="15" fill="rgb(254,28,30)"/><text x="81.2192%" y="527.50"></text></g><g><title>sock_sendmsg (19 samples, 0.12%)</title><rect x="80.9692%" y="501" width="0.1220%" height="15" fill="rgb(241,142,54)"/><text x="81.2192%" y="511.50"></text></g><g><title>tcp_sendmsg (19 samples, 0.12%)</title><rect x="80.9692%" y="485" width="0.1220%" height="15" fill="rgb(222,85,15)"/><text x="81.2192%" y="495.50"></text></g><g><title>tcp_sendmsg_locked (18 samples, 0.12%)</title><rect x="80.9756%" y="469" width="0.1155%" height="15" fill="rgb(210,85,47)"/><text x="81.2256%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (20 samples, 0.13%)</title><rect x="80.9692%" y="565" width="0.1284%" height="15" fill="rgb(224,206,25)"/><text x="81.2192%" y="575.50"></text></g><g><title>do_syscall_64 (20 samples, 0.13%)</title><rect x="80.9692%" y="549" width="0.1284%" height="15" fill="rgb(243,201,19)"/><text x="81.2192%" y="559.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_map (70 samples, 0.45%)</title><rect x="80.6547%" y="677" width="0.4493%" height="15" fill="rgb(236,59,4)"/><text x="80.9047%" y="687.50"></text></g><g><title>mysql::conn::Conn::_query (33 samples, 0.21%)</title><rect x="80.8922%" y="661" width="0.2118%" height="15" fill="rgb(254,179,45)"/><text x="81.1422%" y="671.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (22 samples, 0.14%)</title><rect x="80.9628%" y="645" width="0.1412%" height="15" fill="rgb(226,14,10)"/><text x="81.2128%" y="655.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (22 samples, 0.14%)</title><rect x="80.9628%" y="629" width="0.1412%" height="15" fill="rgb(244,27,41)"/><text x="81.2128%" y="639.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (21 samples, 0.13%)</title><rect x="80.9692%" y="613" width="0.1348%" height="15" fill="rgb(235,35,32)"/><text x="81.2192%" y="623.50"></text></g><g><title>std::sys_common::net::TcpStream::write (21 samples, 0.13%)</title><rect x="80.9692%" y="597" width="0.1348%" height="15" fill="rgb(218,68,31)"/><text x="81.2192%" y="607.50"></text></g><g><title>__libc_send (21 samples, 0.13%)</title><rect x="80.9692%" y="581" width="0.1348%" height="15" fill="rgb(207,120,37)"/><text x="81.2192%" y="591.50"></text></g><g><title>lobsters_microbenchmarks::main (299 samples, 1.92%)</title><rect x="79.1913%" y="709" width="1.9191%" height="15" fill="rgb(227,98,0)"/><text x="79.4413%" y="719.50">l..</text></g><g><title>lobsters_microbenchmarks::queriers::frontpage::query_frontpage (298 samples, 1.91%)</title><rect x="79.1977%" y="693" width="1.9127%" height="15" fill="rgb(207,7,3)"/><text x="79.4477%" y="703.50">l..</text></g><g><title>__tcp_push_pending_frames (16 samples, 0.10%)</title><rect x="81.2837%" y="405" width="0.1027%" height="15" fill="rgb(206,98,19)"/><text x="81.5337%" y="415.50"></text></g><g><title>tcp_write_xmit (16 samples, 0.10%)</title><rect x="81.2837%" y="389" width="0.1027%" height="15" fill="rgb(217,5,26)"/><text x="81.5337%" y="399.50"></text></g><g><title>do_syscall_64 (19 samples, 0.12%)</title><rect x="81.2709%" y="501" width="0.1220%" height="15" fill="rgb(235,190,38)"/><text x="81.5209%" y="511.50"></text></g><g><title>__x64_sys_sendto (19 samples, 0.12%)</title><rect x="81.2709%" y="485" width="0.1220%" height="15" fill="rgb(247,86,24)"/><text x="81.5209%" y="495.50"></text></g><g><title>__sys_sendto (19 samples, 0.12%)</title><rect x="81.2709%" y="469" width="0.1220%" height="15" fill="rgb(205,101,16)"/><text x="81.5209%" y="479.50"></text></g><g><title>sock_sendmsg (19 samples, 0.12%)</title><rect x="81.2709%" y="453" width="0.1220%" height="15" fill="rgb(246,168,33)"/><text x="81.5209%" y="463.50"></text></g><g><title>tcp_sendmsg (19 samples, 0.12%)</title><rect x="81.2709%" y="437" width="0.1220%" height="15" fill="rgb(231,114,1)"/><text x="81.5209%" y="447.50"></text></g><g><title>tcp_sendmsg_locked (18 samples, 0.12%)</title><rect x="81.2773%" y="421" width="0.1155%" height="15" fill="rgb(207,184,53)"/><text x="81.5273%" y="431.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (21 samples, 0.13%)</title><rect x="81.2644%" y="629" width="0.1348%" height="15" fill="rgb(224,95,51)"/><text x="81.5144%" y="639.50"></text></g><g><title>mysql::conn::Conn::_query (21 samples, 0.13%)</title><rect x="81.2644%" y="613" width="0.1348%" height="15" fill="rgb(212,188,45)"/><text x="81.5144%" y="623.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (21 samples, 0.13%)</title><rect x="81.2644%" y="597" width="0.1348%" height="15" fill="rgb(223,154,38)"/><text x="81.5144%" y="607.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (21 samples, 0.13%)</title><rect x="81.2644%" y="581" width="0.1348%" height="15" fill="rgb(251,22,52)"/><text x="81.5144%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (21 samples, 0.13%)</title><rect x="81.2644%" y="565" width="0.1348%" height="15" fill="rgb(229,209,22)"/><text x="81.5144%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::write (21 samples, 0.13%)</title><rect x="81.2644%" y="549" width="0.1348%" height="15" fill="rgb(234,138,34)"/><text x="81.5144%" y="559.50"></text></g><g><title>__libc_send (21 samples, 0.13%)</title><rect x="81.2644%" y="533" width="0.1348%" height="15" fill="rgb(212,95,11)"/><text x="81.5144%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (20 samples, 0.13%)</title><rect x="81.2709%" y="517" width="0.1284%" height="15" fill="rgb(240,179,47)"/><text x="81.5209%" y="527.50"></text></g><g><title>decor_mem::ghosts_map::GhostsMap::insert_uid2gids_for_values (23 samples, 0.15%)</title><rect x="81.2644%" y="645" width="0.1476%" height="15" fill="rgb(240,163,11)"/><text x="81.5144%" y="655.50"></text></g><g><title>_int_free (18 samples, 0.12%)</title><rect x="81.4377%" y="613" width="0.1155%" height="15" fill="rgb(236,37,12)"/><text x="81.6877%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (24 samples, 0.15%)</title><rect x="81.4121%" y="629" width="0.1540%" height="15" fill="rgb(232,164,16)"/><text x="81.6621%" y="639.50"></text></g><g><title>__GI___libc_malloc (63 samples, 0.40%)</title><rect x="81.8164%" y="437" width="0.4044%" height="15" fill="rgb(244,205,15)"/><text x="82.0664%" y="447.50"></text></g><g><title>_int_malloc (48 samples, 0.31%)</title><rect x="81.9127%" y="421" width="0.3081%" height="15" fill="rgb(223,117,47)"/><text x="82.1627%" y="431.50"></text></g><g><title>sysmalloc (19 samples, 0.12%)</title><rect x="82.0988%" y="405" width="0.1220%" height="15" fill="rgb(244,107,35)"/><text x="82.3488%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (70 samples, 0.45%)</title><rect x="81.7843%" y="613" width="0.4493%" height="15" fill="rgb(205,140,8)"/><text x="82.0343%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.45%)</title><rect x="81.7843%" y="597" width="0.4493%" height="15" fill="rgb(228,84,46)"/><text x="82.0343%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (70 samples, 0.45%)</title><rect x="81.7843%" y="581" width="0.4493%" height="15" fill="rgb(254,188,9)"/><text x="82.0343%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (70 samples, 0.45%)</title><rect x="81.7843%" y="565" width="0.4493%" height="15" fill="rgb(206,112,54)"/><text x="82.0343%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (65 samples, 0.42%)</title><rect x="81.8164%" y="549" width="0.4172%" height="15" fill="rgb(216,84,49)"/><text x="82.0664%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (65 samples, 0.42%)</title><rect x="81.8164%" y="533" width="0.4172%" height="15" fill="rgb(214,194,35)"/><text x="82.0664%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 0.42%)</title><rect x="81.8164%" y="517" width="0.4172%" height="15" fill="rgb(249,28,3)"/><text x="82.0664%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.42%)</title><rect x="81.8164%" y="501" width="0.4172%" height="15" fill="rgb(222,56,52)"/><text x="82.0664%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (65 samples, 0.42%)</title><rect x="81.8164%" y="485" width="0.4172%" height="15" fill="rgb(245,217,50)"/><text x="82.0664%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.42%)</title><rect x="81.8164%" y="469" width="0.4172%" height="15" fill="rgb(213,201,24)"/><text x="82.0664%" y="479.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.42%)</title><rect x="81.8164%" y="453" width="0.4172%" height="15" fill="rgb(248,116,28)"/><text x="82.0664%" y="463.50"></text></g><g><title>__GI___libc_malloc (212 samples, 1.36%)</title><rect x="83.0488%" y="405" width="1.3607%" height="15" fill="rgb(219,72,43)"/><text x="83.2988%" y="415.50"></text></g><g><title>_int_malloc (168 samples, 1.08%)</title><rect x="83.3312%" y="389" width="1.0783%" height="15" fill="rgb(209,138,14)"/><text x="83.5812%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (257 samples, 1.65%)</title><rect x="82.8498%" y="581" width="1.6496%" height="15" fill="rgb(222,18,33)"/><text x="83.0998%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (252 samples, 1.62%)</title><rect x="82.8819%" y="565" width="1.6175%" height="15" fill="rgb(213,199,7)"/><text x="83.1319%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (245 samples, 1.57%)</title><rect x="82.9268%" y="549" width="1.5725%" height="15" fill="rgb(250,110,10)"/><text x="83.1768%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (242 samples, 1.55%)</title><rect x="82.9461%" y="533" width="1.5533%" height="15" fill="rgb(248,123,6)"/><text x="83.1961%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (227 samples, 1.46%)</title><rect x="83.0424%" y="517" width="1.4570%" height="15" fill="rgb(206,91,31)"/><text x="83.2924%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (227 samples, 1.46%)</title><rect x="83.0424%" y="501" width="1.4570%" height="15" fill="rgb(211,154,13)"/><text x="83.2924%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (227 samples, 1.46%)</title><rect x="83.0424%" y="485" width="1.4570%" height="15" fill="rgb(225,148,7)"/><text x="83.2924%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (227 samples, 1.46%)</title><rect x="83.0424%" y="469" width="1.4570%" height="15" fill="rgb(220,160,43)"/><text x="83.2924%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (227 samples, 1.46%)</title><rect x="83.0424%" y="453" width="1.4570%" height="15" fill="rgb(213,52,39)"/><text x="83.2924%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (227 samples, 1.46%)</title><rect x="83.0424%" y="437" width="1.4570%" height="15" fill="rgb(243,137,7)"/><text x="83.2924%" y="447.50"></text></g><g><title>alloc::alloc::alloc (227 samples, 1.46%)</title><rect x="83.0424%" y="421" width="1.4570%" height="15" fill="rgb(230,79,13)"/><text x="83.2924%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (345 samples, 2.21%)</title><rect x="82.2914%" y="597" width="2.2144%" height="15" fill="rgb(247,105,23)"/><text x="82.5414%" y="607.50">&lt;..</text></g><g><title>__GI___libc_malloc (49 samples, 0.31%)</title><rect x="84.5443%" y="597" width="0.3145%" height="15" fill="rgb(223,179,41)"/><text x="84.7943%" y="607.50"></text></g><g><title>_int_malloc (35 samples, 0.22%)</title><rect x="84.6341%" y="581" width="0.2246%" height="15" fill="rgb(218,9,34)"/><text x="84.8841%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (411 samples, 2.64%)</title><rect x="82.2336%" y="613" width="2.6380%" height="15" fill="rgb(222,106,8)"/><text x="82.4836%" y="623.50">&lt;a..</text></g><g><title>__x64_sys_mprotect (19 samples, 0.12%)</title><rect x="85.0706%" y="501" width="0.1220%" height="15" fill="rgb(211,220,0)"/><text x="85.3206%" y="511.50"></text></g><g><title>do_mprotect_pkey (19 samples, 0.12%)</title><rect x="85.0706%" y="485" width="0.1220%" height="15" fill="rgb(229,52,16)"/><text x="85.3206%" y="495.50"></text></g><g><title>mprotect_fixup (17 samples, 0.11%)</title><rect x="85.0834%" y="469" width="0.1091%" height="15" fill="rgb(212,155,18)"/><text x="85.3334%" y="479.50"></text></g><g><title>do_syscall_64 (20 samples, 0.13%)</title><rect x="85.0706%" y="517" width="0.1284%" height="15" fill="rgb(242,21,14)"/><text x="85.3206%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (24 samples, 0.15%)</title><rect x="85.0706%" y="533" width="0.1540%" height="15" fill="rgb(222,19,48)"/><text x="85.3206%" y="543.50"></text></g><g><title>__GI___mprotect (29 samples, 0.19%)</title><rect x="85.0706%" y="549" width="0.1861%" height="15" fill="rgb(232,45,27)"/><text x="85.3206%" y="559.50"></text></g><g><title>__handle_mm_fault (25 samples, 0.16%)</title><rect x="85.2824%" y="501" width="0.1605%" height="15" fill="rgb(249,103,42)"/><text x="85.5324%" y="511.50"></text></g><g><title>page_fault (28 samples, 0.18%)</title><rect x="85.2696%" y="549" width="0.1797%" height="15" fill="rgb(246,81,33)"/><text x="85.5196%" y="559.50"></text></g><g><title>do_user_addr_fault (28 samples, 0.18%)</title><rect x="85.2696%" y="533" width="0.1797%" height="15" fill="rgb(252,33,42)"/><text x="85.5196%" y="543.50"></text></g><g><title>handle_mm_fault (27 samples, 0.17%)</title><rect x="85.2760%" y="517" width="0.1733%" height="15" fill="rgb(209,212,41)"/><text x="85.5260%" y="527.50"></text></g><g><title>__GI___libc_malloc (86 samples, 0.55%)</title><rect x="84.9358%" y="597" width="0.5520%" height="15" fill="rgb(207,154,6)"/><text x="85.1858%" y="607.50"></text></g><g><title>_int_malloc (81 samples, 0.52%)</title><rect x="84.9679%" y="581" width="0.5199%" height="15" fill="rgb(223,64,47)"/><text x="85.2179%" y="591.50"></text></g><g><title>sysmalloc (70 samples, 0.45%)</title><rect x="85.0385%" y="565" width="0.4493%" height="15" fill="rgb(211,161,38)"/><text x="85.2885%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (103 samples, 0.66%)</title><rect x="84.9037%" y="613" width="0.6611%" height="15" fill="rgb(219,138,40)"/><text x="85.1537%" y="623.50"></text></g><g><title>__GI___libc_free (22 samples, 0.14%)</title><rect x="85.7381%" y="597" width="0.1412%" height="15" fill="rgb(241,228,46)"/><text x="85.9881%" y="607.50"></text></g><g><title>_int_free (53 samples, 0.34%)</title><rect x="85.9371%" y="597" width="0.3402%" height="15" fill="rgb(223,209,38)"/><text x="86.1871%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (112 samples, 0.72%)</title><rect x="85.6739%" y="613" width="0.7189%" height="15" fill="rgb(236,164,45)"/><text x="85.9239%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.12%)</title><rect x="86.2773%" y="597" width="0.1155%" height="15" fill="rgb(231,15,5)"/><text x="86.5273%" y="607.50"></text></g><g><title>decor_mem::select::get_ris_matching_constraint (29 samples, 0.19%)</title><rect x="86.4634%" y="613" width="0.1861%" height="15" fill="rgb(252,35,15)"/><text x="86.7134%" y="623.50"></text></g><g><title>decor_mem::select::get_query_results (842 samples, 5.40%)</title><rect x="81.4121%" y="645" width="5.4044%" height="15" fill="rgb(248,181,18)"/><text x="81.6621%" y="655.50">decor_m..</text></g><g><title>decor_mem::select::get_setexpr_results (818 samples, 5.25%)</title><rect x="81.5661%" y="629" width="5.2503%" height="15" fill="rgb(233,39,42)"/><text x="81.8161%" y="639.50">decor_..</text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (16 samples, 0.10%)</title><rect x="86.8357%" y="581" width="0.1027%" height="15" fill="rgb(238,110,33)"/><text x="87.0857%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (16 samples, 0.10%)</title><rect x="86.8357%" y="565" width="0.1027%" height="15" fill="rgb(233,195,10)"/><text x="87.0857%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as core::fmt::Display&gt;::fmt (17 samples, 0.11%)</title><rect x="86.8357%" y="597" width="0.1091%" height="15" fill="rgb(254,105,3)"/><text x="87.0857%" y="607.50"></text></g><g><title>core::fmt::write (20 samples, 0.13%)</title><rect x="86.8357%" y="613" width="0.1284%" height="15" fill="rgb(221,225,9)"/><text x="87.0857%" y="623.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (909 samples, 5.83%)</title><rect x="81.1489%" y="677" width="5.8344%" height="15" fill="rgb(224,227,45)"/><text x="81.3989%" y="687.50">decor_m..</text></g><g><title>decor_mem::query_transformer::QueryTransformer::issue_statement (909 samples, 5.83%)</title><rect x="81.1489%" y="661" width="5.8344%" height="15" fill="rgb(229,198,43)"/><text x="81.3989%" y="671.50">decor_m..</text></g><g><title>decor_mem::views::Views::insert (26 samples, 0.17%)</title><rect x="86.8164%" y="645" width="0.1669%" height="15" fill="rgb(206,209,35)"/><text x="87.0664%" y="655.50"></text></g><g><title>decor_mem::views::View::insert_into_index (26 samples, 0.17%)</title><rect x="86.8164%" y="629" width="0.1669%" height="15" fill="rgb(245,195,53)"/><text x="87.0664%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (28 samples, 0.18%)</title><rect x="87.0668%" y="661" width="0.1797%" height="15" fill="rgb(240,92,26)"/><text x="87.3168%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (26 samples, 0.17%)</title><rect x="87.0796%" y="645" width="0.1669%" height="15" fill="rgb(207,40,23)"/><text x="87.3296%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (20 samples, 0.13%)</title><rect x="87.1181%" y="629" width="0.1284%" height="15" fill="rgb(223,111,35)"/><text x="87.3681%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (25 samples, 0.16%)</title><rect x="87.4390%" y="629" width="0.1605%" height="15" fill="rgb(229,147,28)"/><text x="87.6890%" y="639.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.14%)</title><rect x="87.4583%" y="613" width="0.1412%" height="15" fill="rgb(211,29,28)"/><text x="87.7083%" y="623.50"></text></g><g><title>_int_realloc (20 samples, 0.13%)</title><rect x="87.4711%" y="597" width="0.1284%" height="15" fill="rgb(228,72,33)"/><text x="87.7211%" y="607.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (39 samples, 0.25%)</title><rect x="87.7728%" y="613" width="0.2503%" height="15" fill="rgb(205,214,31)"/><text x="88.0228%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (25 samples, 0.16%)</title><rect x="87.8626%" y="597" width="0.1605%" height="15" fill="rgb(224,111,15)"/><text x="88.1126%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (17 samples, 0.11%)</title><rect x="87.9140%" y="581" width="0.1091%" height="15" fill="rgb(253,21,26)"/><text x="88.1640%" y="591.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (73 samples, 0.47%)</title><rect x="87.6059%" y="629" width="0.4685%" height="15" fill="rgb(245,139,43)"/><text x="87.8559%" y="639.50"></text></g><g><title>decor_mem::sqlparser_cache::ParserCache::get_single_parsed_stmt (203 samples, 1.30%)</title><rect x="86.9833%" y="677" width="1.3030%" height="15" fill="rgb(252,170,7)"/><text x="87.2333%" y="687.50"></text></g><g><title>sql_parser::parser::parse_statements (162 samples, 1.04%)</title><rect x="87.2465%" y="661" width="1.0398%" height="15" fill="rgb(231,118,14)"/><text x="87.4965%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (142 samples, 0.91%)</title><rect x="87.3748%" y="645" width="0.9114%" height="15" fill="rgb(238,83,0)"/><text x="87.6248%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_number (33 samples, 0.21%)</title><rect x="88.0745%" y="629" width="0.2118%" height="15" fill="rgb(221,39,39)"/><text x="88.3245%" y="639.50"></text></g><g><title>malloc_consolidate (56 samples, 0.36%)</title><rect x="88.2863%" y="565" width="0.3594%" height="15" fill="rgb(222,119,46)"/><text x="88.5363%" y="575.50"></text></g><g><title>unlink_chunk.constprop.0 (17 samples, 0.11%)</title><rect x="88.5366%" y="549" width="0.1091%" height="15" fill="rgb(222,165,49)"/><text x="88.7866%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (57 samples, 0.37%)</title><rect x="88.2863%" y="629" width="0.3659%" height="15" fill="rgb(219,113,52)"/><text x="88.5363%" y="639.50"></text></g><g><title>__GI___libc_realloc (57 samples, 0.37%)</title><rect x="88.2863%" y="613" width="0.3659%" height="15" fill="rgb(214,7,15)"/><text x="88.5363%" y="623.50"></text></g><g><title>_int_realloc (57 samples, 0.37%)</title><rect x="88.2863%" y="597" width="0.3659%" height="15" fill="rgb(235,32,4)"/><text x="88.5363%" y="607.50"></text></g><g><title>_int_malloc (57 samples, 0.37%)</title><rect x="88.2863%" y="581" width="0.3659%" height="15" fill="rgb(238,90,54)"/><text x="88.5363%" y="591.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (60 samples, 0.39%)</title><rect x="88.6650%" y="613" width="0.3851%" height="15" fill="rgb(213,208,19)"/><text x="88.9150%" y="623.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (25 samples, 0.16%)</title><rect x="88.8896%" y="597" width="0.1605%" height="15" fill="rgb(233,156,4)"/><text x="89.1396%" y="607.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (20 samples, 0.13%)</title><rect x="88.9217%" y="581" width="0.1284%" height="15" fill="rgb(207,194,5)"/><text x="89.1717%" y="591.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (18 samples, 0.12%)</title><rect x="88.9345%" y="565" width="0.1155%" height="15" fill="rgb(206,111,30)"/><text x="89.1845%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (18 samples, 0.12%)</title><rect x="88.9345%" y="549" width="0.1155%" height="15" fill="rgb(243,70,54)"/><text x="89.1845%" y="559.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (70 samples, 0.45%)</title><rect x="88.6521%" y="629" width="0.4493%" height="15" fill="rgb(242,28,8)"/><text x="88.9021%" y="639.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (1,253 samples, 8.04%)</title><rect x="81.1232%" y="709" width="8.0424%" height="15" fill="rgb(219,106,18)"/><text x="81.3732%" y="719.50">msql_srv::M..</text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (1,249 samples, 8.02%)</title><rect x="81.1489%" y="693" width="8.0167%" height="15" fill="rgb(244,222,10)"/><text x="81.3989%" y="703.50">&lt;decor_mem:..</text></g><g><title>decor_mem::stats::get_qtype (137 samples, 0.88%)</title><rect x="88.2863%" y="677" width="0.8793%" height="15" fill="rgb(236,179,52)"/><text x="88.5363%" y="687.50"></text></g><g><title>sql_parser::parser::parse_statements (137 samples, 0.88%)</title><rect x="88.2863%" y="661" width="0.8793%" height="15" fill="rgb(213,23,39)"/><text x="88.5363%" y="671.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (137 samples, 0.88%)</title><rect x="88.2863%" y="645" width="0.8793%" height="15" fill="rgb(238,48,10)"/><text x="88.5363%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (16 samples, 0.10%)</title><rect x="89.2619%" y="677" width="0.1027%" height="15" fill="rgb(251,196,23)"/><text x="89.5119%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (24 samples, 0.15%)</title><rect x="89.6919%" y="629" width="0.1540%" height="15" fill="rgb(250,152,24)"/><text x="89.9419%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.13%)</title><rect x="90.2567%" y="597" width="0.1284%" height="15" fill="rgb(209,150,17)"/><text x="90.5067%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 0.13%)</title><rect x="90.2567%" y="581" width="0.1284%" height="15" fill="rgb(234,202,34)"/><text x="90.5067%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.13%)</title><rect x="90.2567%" y="565" width="0.1284%" height="15" fill="rgb(253,148,53)"/><text x="90.5067%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.12%)</title><rect x="90.2632%" y="549" width="0.1220%" height="15" fill="rgb(218,129,16)"/><text x="90.5132%" y="559.50"></text></g><g><title>alloc::fmt::format (18 samples, 0.12%)</title><rect x="90.4172%" y="597" width="0.1155%" height="15" fill="rgb(216,85,19)"/><text x="90.6672%" y="607.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (86 samples, 0.55%)</title><rect x="89.9872%" y="629" width="0.5520%" height="15" fill="rgb(235,228,7)"/><text x="90.2372%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::expected (58 samples, 0.37%)</title><rect x="90.1669%" y="613" width="0.3723%" height="15" fill="rgb(245,175,0)"/><text x="90.4169%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (48 samples, 0.31%)</title><rect x="90.5392%" y="629" width="0.3081%" height="15" fill="rgb(208,168,36)"/><text x="90.7892%" y="639.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.19%)</title><rect x="91.0013%" y="437" width="0.1926%" height="15" fill="rgb(246,171,24)"/><text x="91.2513%" y="447.50"></text></g><g><title>_int_malloc (27 samples, 0.17%)</title><rect x="91.0205%" y="421" width="0.1733%" height="15" fill="rgb(215,142,24)"/><text x="91.2705%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (46 samples, 0.30%)</title><rect x="90.9307%" y="613" width="0.2953%" height="15" fill="rgb(250,187,7)"/><text x="91.1807%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (44 samples, 0.28%)</title><rect x="90.9435%" y="597" width="0.2824%" height="15" fill="rgb(228,66,33)"/><text x="91.1935%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (42 samples, 0.27%)</title><rect x="90.9564%" y="581" width="0.2696%" height="15" fill="rgb(234,215,21)"/><text x="91.2064%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.26%)</title><rect x="90.9692%" y="565" width="0.2567%" height="15" fill="rgb(222,191,20)"/><text x="91.2192%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36 samples, 0.23%)</title><rect x="90.9949%" y="549" width="0.2311%" height="15" fill="rgb(245,79,54)"/><text x="91.2449%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (36 samples, 0.23%)</title><rect x="90.9949%" y="533" width="0.2311%" height="15" fill="rgb(240,10,37)"/><text x="91.2449%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 0.23%)</title><rect x="90.9949%" y="517" width="0.2311%" height="15" fill="rgb(214,192,32)"/><text x="91.2449%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 0.23%)</title><rect x="90.9949%" y="501" width="0.2311%" height="15" fill="rgb(209,36,54)"/><text x="91.2449%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (36 samples, 0.23%)</title><rect x="90.9949%" y="485" width="0.2311%" height="15" fill="rgb(220,10,11)"/><text x="91.2449%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.23%)</title><rect x="90.9949%" y="469" width="0.2311%" height="15" fill="rgb(221,106,17)"/><text x="91.2449%" y="479.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.22%)</title><rect x="91.0013%" y="453" width="0.2246%" height="15" fill="rgb(251,142,44)"/><text x="91.2513%" y="463.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (327 samples, 2.10%)</title><rect x="89.2619%" y="693" width="2.0988%" height="15" fill="rgb(238,13,15)"/><text x="89.5119%" y="703.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (311 samples, 2.00%)</title><rect x="89.3646%" y="677" width="1.9961%" height="15" fill="rgb(208,107,27)"/><text x="89.6146%" y="687.50">s..</text></g><g><title>sql_parser::parser::Parser::check_descent (311 samples, 2.00%)</title><rect x="89.3646%" y="661" width="1.9961%" height="15" fill="rgb(205,136,37)"/><text x="89.6146%" y="671.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (311 samples, 2.00%)</title><rect x="89.3646%" y="645" width="1.9961%" height="15" fill="rgb(250,205,27)"/><text x="89.6146%" y="655.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_value (80 samples, 0.51%)</title><rect x="90.8472%" y="629" width="0.5135%" height="15" fill="rgb(210,80,43)"/><text x="91.0972%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (34 samples, 0.22%)</title><rect x="91.3800%" y="597" width="0.2182%" height="15" fill="rgb(247,160,36)"/><text x="91.6300%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.22%)</title><rect x="91.3800%" y="581" width="0.2182%" height="15" fill="rgb(234,13,49)"/><text x="91.6300%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34 samples, 0.22%)</title><rect x="91.3800%" y="565" width="0.2182%" height="15" fill="rgb(234,122,0)"/><text x="91.6300%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 0.22%)</title><rect x="91.3800%" y="549" width="0.2182%" height="15" fill="rgb(207,146,38)"/><text x="91.6300%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (34 samples, 0.22%)</title><rect x="91.3800%" y="533" width="0.2182%" height="15" fill="rgb(207,177,25)"/><text x="91.6300%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34 samples, 0.22%)</title><rect x="91.3800%" y="517" width="0.2182%" height="15" fill="rgb(211,178,42)"/><text x="91.6300%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (34 samples, 0.22%)</title><rect x="91.3800%" y="501" width="0.2182%" height="15" fill="rgb(230,69,54)"/><text x="91.6300%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.22%)</title><rect x="91.3800%" y="485" width="0.2182%" height="15" fill="rgb(214,135,41)"/><text x="91.6300%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (34 samples, 0.22%)</title><rect x="91.3800%" y="469" width="0.2182%" height="15" fill="rgb(237,67,25)"/><text x="91.6300%" y="479.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (38 samples, 0.24%)</title><rect x="91.3671%" y="629" width="0.2439%" height="15" fill="rgb(222,189,50)"/><text x="91.6171%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::expected (37 samples, 0.24%)</title><rect x="91.3736%" y="613" width="0.2375%" height="15" fill="rgb(245,148,34)"/><text x="91.6236%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (40 samples, 0.26%)</title><rect x="91.3607%" y="677" width="0.2567%" height="15" fill="rgb(222,29,6)"/><text x="91.6107%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (40 samples, 0.26%)</title><rect x="91.3607%" y="661" width="0.2567%" height="15" fill="rgb(221,189,43)"/><text x="91.6107%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (40 samples, 0.26%)</title><rect x="91.3607%" y="645" width="0.2567%" height="15" fill="rgb(207,36,27)"/><text x="91.6107%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (33 samples, 0.21%)</title><rect x="91.6431%" y="629" width="0.2118%" height="15" fill="rgb(217,90,24)"/><text x="91.8931%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (86 samples, 0.55%)</title><rect x="91.6175%" y="645" width="0.5520%" height="15" fill="rgb(224,66,35)"/><text x="91.8675%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (36 samples, 0.23%)</title><rect x="91.9384%" y="629" width="0.2311%" height="15" fill="rgb(221,13,50)"/><text x="92.1884%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (107 samples, 0.69%)</title><rect x="91.6175%" y="661" width="0.6868%" height="15" fill="rgb(236,68,49)"/><text x="91.8675%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (21 samples, 0.13%)</title><rect x="92.1694%" y="645" width="0.1348%" height="15" fill="rgb(229,146,28)"/><text x="92.4194%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (507 samples, 3.25%)</title><rect x="89.2490%" y="709" width="3.2542%" height="15" fill="rgb(225,31,38)"/><text x="89.4990%" y="719.50">sql..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (178 samples, 1.14%)</title><rect x="91.3607%" y="693" width="1.1425%" height="15" fill="rgb(250,208,3)"/><text x="91.6107%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (138 samples, 0.89%)</title><rect x="91.6175%" y="677" width="0.8858%" height="15" fill="rgb(246,54,23)"/><text x="91.8675%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (31 samples, 0.20%)</title><rect x="92.3042%" y="661" width="0.1990%" height="15" fill="rgb(243,76,11)"/><text x="92.5542%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (31 samples, 0.20%)</title><rect x="92.3042%" y="645" width="0.1990%" height="15" fill="rgb(245,21,50)"/><text x="92.5542%" y="655.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.12%)</title><rect x="92.7279%" y="341" width="0.1220%" height="15" fill="rgb(228,9,43)"/><text x="92.9779%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (27 samples, 0.17%)</title><rect x="92.6958%" y="405" width="0.1733%" height="15" fill="rgb(208,100,47)"/><text x="92.9458%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (23 samples, 0.15%)</title><rect x="92.7214%" y="389" width="0.1476%" height="15" fill="rgb(232,26,8)"/><text x="92.9714%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (23 samples, 0.15%)</title><rect x="92.7214%" y="373" width="0.1476%" height="15" fill="rgb(216,166,38)"/><text x="92.9714%" y="383.50"></text></g><g><title>alloc::alloc::realloc (23 samples, 0.15%)</title><rect x="92.7214%" y="357" width="0.1476%" height="15" fill="rgb(251,202,51)"/><text x="92.9714%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (29 samples, 0.19%)</title><rect x="92.6958%" y="421" width="0.1861%" height="15" fill="rgb(254,216,34)"/><text x="92.9458%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (32 samples, 0.21%)</title><rect x="92.6829%" y="469" width="0.2054%" height="15" fill="rgb(251,32,27)"/><text x="92.9329%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32 samples, 0.21%)</title><rect x="92.6829%" y="453" width="0.2054%" height="15" fill="rgb(208,127,28)"/><text x="92.9329%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (32 samples, 0.21%)</title><rect x="92.6829%" y="437" width="0.2054%" height="15" fill="rgb(224,137,22)"/><text x="92.9329%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (40 samples, 0.26%)</title><rect x="92.6701%" y="565" width="0.2567%" height="15" fill="rgb(254,70,32)"/><text x="92.9201%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (40 samples, 0.26%)</title><rect x="92.6701%" y="549" width="0.2567%" height="15" fill="rgb(229,75,37)"/><text x="92.9201%" y="559.50"></text></g><g><title>alloc::string::String::push_str (40 samples, 0.26%)</title><rect x="92.6701%" y="533" width="0.2567%" height="15" fill="rgb(252,64,23)"/><text x="92.9201%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (40 samples, 0.26%)</title><rect x="92.6701%" y="517" width="0.2567%" height="15" fill="rgb(232,162,48)"/><text x="92.9201%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (40 samples, 0.26%)</title><rect x="92.6701%" y="501" width="0.2567%" height="15" fill="rgb(246,160,12)"/><text x="92.9201%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (40 samples, 0.26%)</title><rect x="92.6701%" y="485" width="0.2567%" height="15" fill="rgb(247,166,0)"/><text x="92.9201%" y="495.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (77 samples, 0.49%)</title><rect x="92.5160%" y="709" width="0.4942%" height="15" fill="rgb(249,219,21)"/><text x="92.7660%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (73 samples, 0.47%)</title><rect x="92.5417%" y="693" width="0.4685%" height="15" fill="rgb(205,209,3)"/><text x="92.7917%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (73 samples, 0.47%)</title><rect x="92.5417%" y="677" width="0.4685%" height="15" fill="rgb(243,44,1)"/><text x="92.7917%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (73 samples, 0.47%)</title><rect x="92.5417%" y="661" width="0.4685%" height="15" fill="rgb(206,159,16)"/><text x="92.7917%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (73 samples, 0.47%)</title><rect x="92.5417%" y="645" width="0.4685%" height="15" fill="rgb(244,77,30)"/><text x="92.7917%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::expected (73 samples, 0.47%)</title><rect x="92.5417%" y="629" width="0.4685%" height="15" fill="rgb(218,69,12)"/><text x="92.7917%" y="639.50"></text></g><g><title>alloc::fmt::format (66 samples, 0.42%)</title><rect x="92.5866%" y="613" width="0.4236%" height="15" fill="rgb(212,87,7)"/><text x="92.8366%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (61 samples, 0.39%)</title><rect x="92.6187%" y="597" width="0.3915%" height="15" fill="rgb(245,114,25)"/><text x="92.8687%" y="607.50"></text></g><g><title>core::fmt::write (61 samples, 0.39%)</title><rect x="92.6187%" y="581" width="0.3915%" height="15" fill="rgb(210,61,42)"/><text x="92.8687%" y="591.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (34 samples, 0.22%)</title><rect x="93.0680%" y="661" width="0.2182%" height="15" fill="rgb(211,52,33)"/><text x="93.3180%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (33 samples, 0.21%)</title><rect x="93.0745%" y="645" width="0.2118%" height="15" fill="rgb(234,58,33)"/><text x="93.3245%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (26 samples, 0.17%)</title><rect x="93.1194%" y="629" width="0.1669%" height="15" fill="rgb(220,115,36)"/><text x="93.3694%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (61 samples, 0.39%)</title><rect x="93.0616%" y="709" width="0.3915%" height="15" fill="rgb(243,153,54)"/><text x="93.3116%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (60 samples, 0.39%)</title><rect x="93.0680%" y="693" width="0.3851%" height="15" fill="rgb(251,47,18)"/><text x="93.3180%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (60 samples, 0.39%)</title><rect x="93.0680%" y="677" width="0.3851%" height="15" fill="rgb(242,102,42)"/><text x="93.3180%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (26 samples, 0.17%)</title><rect x="93.2863%" y="661" width="0.1669%" height="15" fill="rgb(234,31,38)"/><text x="93.5363%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (23 samples, 0.15%)</title><rect x="93.3055%" y="645" width="0.1476%" height="15" fill="rgb(221,117,51)"/><text x="93.5555%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::expected (19 samples, 0.12%)</title><rect x="93.3312%" y="629" width="0.1220%" height="15" fill="rgb(212,20,18)"/><text x="93.5812%" y="639.50"></text></g><g><title>alloc::fmt::format (17 samples, 0.11%)</title><rect x="93.3440%" y="613" width="0.1091%" height="15" fill="rgb(245,133,36)"/><text x="93.5940%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (17 samples, 0.11%)</title><rect x="93.3440%" y="597" width="0.1091%" height="15" fill="rgb(212,6,19)"/><text x="93.5940%" y="607.50"></text></g><g><title>core::fmt::write (16 samples, 0.10%)</title><rect x="93.3504%" y="581" width="0.1027%" height="15" fill="rgb(218,1,36)"/><text x="93.6004%" y="591.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (25 samples, 0.16%)</title><rect x="93.4788%" y="629" width="0.1605%" height="15" fill="rgb(246,84,54)"/><text x="93.7288%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (47 samples, 0.30%)</title><rect x="93.4531%" y="645" width="0.3017%" height="15" fill="rgb(242,110,6)"/><text x="93.7031%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (60 samples, 0.39%)</title><rect x="93.4531%" y="709" width="0.3851%" height="15" fill="rgb(214,47,5)"/><text x="93.7031%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (60 samples, 0.39%)</title><rect x="93.4531%" y="693" width="0.3851%" height="15" fill="rgb(218,159,25)"/><text x="93.7031%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (60 samples, 0.39%)</title><rect x="93.4531%" y="677" width="0.3851%" height="15" fill="rgb(215,211,28)"/><text x="93.7031%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (60 samples, 0.39%)</title><rect x="93.4531%" y="661" width="0.3851%" height="15" fill="rgb(238,59,32)"/><text x="93.7031%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (19 samples, 0.12%)</title><rect x="93.8768%" y="661" width="0.1220%" height="15" fill="rgb(226,82,3)"/><text x="94.1268%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (18 samples, 0.12%)</title><rect x="94.3582%" y="629" width="0.1155%" height="15" fill="rgb(240,164,32)"/><text x="94.6082%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (52 samples, 0.33%)</title><rect x="94.1463%" y="645" width="0.3338%" height="15" fill="rgb(232,46,7)"/><text x="94.3963%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (124 samples, 0.80%)</title><rect x="93.8383%" y="709" width="0.7959%" height="15" fill="rgb(229,129,53)"/><text x="94.0883%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (124 samples, 0.80%)</title><rect x="93.8383%" y="693" width="0.7959%" height="15" fill="rgb(234,188,29)"/><text x="94.0883%" y="703.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (123 samples, 0.79%)</title><rect x="93.8447%" y="677" width="0.7895%" height="15" fill="rgb(246,141,4)"/><text x="94.0947%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (99 samples, 0.64%)</title><rect x="93.9987%" y="661" width="0.6354%" height="15" fill="rgb(229,23,39)"/><text x="94.2487%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (20 samples, 0.13%)</title><rect x="94.5058%" y="645" width="0.1284%" height="15" fill="rgb(206,12,3)"/><text x="94.7558%" y="655.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (16 samples, 0.10%)</title><rect x="94.5315%" y="629" width="0.1027%" height="15" fill="rgb(252,226,20)"/><text x="94.7815%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (48 samples, 0.31%)</title><rect x="94.6470%" y="677" width="0.3081%" height="15" fill="rgb(216,123,35)"/><text x="94.8970%" y="687.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (36 samples, 0.23%)</title><rect x="94.7240%" y="661" width="0.2311%" height="15" fill="rgb(212,68,40)"/><text x="94.9740%" y="671.50"></text></g><g><title>sql_parser::parser::parse_statements (51 samples, 0.33%)</title><rect x="94.6341%" y="709" width="0.3273%" height="15" fill="rgb(254,125,32)"/><text x="94.8841%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (49 samples, 0.31%)</title><rect x="94.6470%" y="693" width="0.3145%" height="15" fill="rgb(253,97,22)"/><text x="94.8970%" y="703.50"></text></g><g><title>[unknown] (12,766 samples, 81.94%)</title><rect x="13.1451%" y="725" width="81.9384%" height="15" fill="rgb(241,101,14)"/><text x="13.3951%" y="735.50">[unknown]</text></g><g><title>core::ptr::drop_in_place (26 samples, 0.17%)</title><rect x="95.1733%" y="565" width="0.1669%" height="15" fill="rgb(238,103,29)"/><text x="95.4233%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (23 samples, 0.15%)</title><rect x="95.1926%" y="549" width="0.1476%" height="15" fill="rgb(233,195,47)"/><text x="95.4426%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (20 samples, 0.13%)</title><rect x="95.2118%" y="533" width="0.1284%" height="15" fill="rgb(246,218,30)"/><text x="95.4618%" y="543.50"></text></g><g><title>decor_mem::query_transformer::QueryTransformer::query (53 samples, 0.34%)</title><rect x="95.3402%" y="565" width="0.3402%" height="15" fill="rgb(219,145,47)"/><text x="95.5902%" y="575.50"></text></g><g><title>decor_mem::views::view_cols_rows_to_answer_rows (39 samples, 0.25%)</title><rect x="95.4300%" y="549" width="0.2503%" height="15" fill="rgb(243,12,26)"/><text x="95.6800%" y="559.50"></text></g><g><title>decor_mem::stats::get_qtype (17 samples, 0.11%)</title><rect x="95.6804%" y="565" width="0.1091%" height="15" fill="rgb(214,87,16)"/><text x="95.9304%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (17 samples, 0.11%)</title><rect x="95.6804%" y="549" width="0.1091%" height="15" fill="rgb(208,99,42)"/><text x="95.9304%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.10%)</title><rect x="95.6868%" y="533" width="0.1027%" height="15" fill="rgb(253,99,2)"/><text x="95.9368%" y="543.50"></text></g><g><title>&lt;decor_mem::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (115 samples, 0.74%)</title><rect x="95.1476%" y="581" width="0.7381%" height="15" fill="rgb(220,168,23)"/><text x="95.3976%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.32%)</title><rect x="95.8858%" y="549" width="0.3209%" height="15" fill="rgb(242,38,24)"/><text x="96.1358%" y="559.50"></text></g><g><title>core::ptr::drop_in_place (47 samples, 0.30%)</title><rect x="95.9050%" y="533" width="0.3017%" height="15" fill="rgb(225,182,9)"/><text x="96.1550%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (45 samples, 0.29%)</title><rect x="95.9178%" y="517" width="0.2888%" height="15" fill="rgb(243,178,37)"/><text x="96.1678%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.26%)</title><rect x="95.9435%" y="501" width="0.2632%" height="15" fill="rgb(232,139,19)"/><text x="96.1935%" y="511.50"></text></g><g><title>core::ptr::drop_in_place (31 samples, 0.20%)</title><rect x="96.0077%" y="485" width="0.1990%" height="15" fill="rgb(225,201,24)"/><text x="96.2577%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (18 samples, 0.12%)</title><rect x="96.0911%" y="469" width="0.1155%" height="15" fill="rgb(221,47,46)"/><text x="96.3411%" y="479.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (16 samples, 0.10%)</title><rect x="96.2259%" y="533" width="0.1027%" height="15" fill="rgb(249,23,13)"/><text x="96.4759%" y="543.50"></text></g><g><title>std::sys::unix::fs::File::write (16 samples, 0.10%)</title><rect x="96.2259%" y="517" width="0.1027%" height="15" fill="rgb(219,9,5)"/><text x="96.4759%" y="527.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (16 samples, 0.10%)</title><rect x="96.2259%" y="501" width="0.1027%" height="15" fill="rgb(254,171,16)"/><text x="96.4759%" y="511.50"></text></g><g><title>__libc_write (16 samples, 0.10%)</title><rect x="96.2259%" y="485" width="0.1027%" height="15" fill="rgb(230,171,20)"/><text x="96.4759%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (16 samples, 0.10%)</title><rect x="96.2259%" y="469" width="0.1027%" height="15" fill="rgb(210,71,41)"/><text x="96.4759%" y="479.50"></text></g><g><title>core::ptr::drop_in_place (71 samples, 0.46%)</title><rect x="95.8858%" y="581" width="0.4557%" height="15" fill="rgb(206,173,20)"/><text x="96.1358%" y="591.50"></text></g><g><title>core::ptr::drop_in_place (71 samples, 0.46%)</title><rect x="95.8858%" y="565" width="0.4557%" height="15" fill="rgb(233,88,34)"/><text x="96.1358%" y="575.50"></text></g><g><title>decor_mem::stats::print_stats (18 samples, 0.12%)</title><rect x="96.2259%" y="549" width="0.1155%" height="15" fill="rgb(223,209,46)"/><text x="96.4759%" y="559.50"></text></g><g><title>sk_wait_data (37 samples, 0.24%)</title><rect x="96.4570%" y="373" width="0.2375%" height="15" fill="rgb(250,43,18)"/><text x="96.7070%" y="383.50"></text></g><g><title>wait_woken (34 samples, 0.22%)</title><rect x="96.4763%" y="357" width="0.2182%" height="15" fill="rgb(208,13,10)"/><text x="96.7263%" y="367.50"></text></g><g><title>schedule_timeout (32 samples, 0.21%)</title><rect x="96.4891%" y="341" width="0.2054%" height="15" fill="rgb(212,200,36)"/><text x="96.7391%" y="351.50"></text></g><g><title>schedule (32 samples, 0.21%)</title><rect x="96.4891%" y="325" width="0.2054%" height="15" fill="rgb(225,90,30)"/><text x="96.7391%" y="335.50"></text></g><g><title>__schedule (30 samples, 0.19%)</title><rect x="96.5019%" y="309" width="0.1926%" height="15" fill="rgb(236,182,39)"/><text x="96.7519%" y="319.50"></text></g><g><title>inet_recvmsg (53 samples, 0.34%)</title><rect x="96.3928%" y="405" width="0.3402%" height="15" fill="rgb(212,144,35)"/><text x="96.6428%" y="415.50"></text></g><g><title>tcp_recvmsg (53 samples, 0.34%)</title><rect x="96.3928%" y="389" width="0.3402%" height="15" fill="rgb(228,63,44)"/><text x="96.6428%" y="399.50"></text></g><g><title>do_syscall_64 (58 samples, 0.37%)</title><rect x="96.3736%" y="453" width="0.3723%" height="15" fill="rgb(228,109,6)"/><text x="96.6236%" y="463.50"></text></g><g><title>__x64_sys_recvfrom (58 samples, 0.37%)</title><rect x="96.3736%" y="437" width="0.3723%" height="15" fill="rgb(238,117,24)"/><text x="96.6236%" y="447.50"></text></g><g><title>__sys_recvfrom (58 samples, 0.37%)</title><rect x="96.3736%" y="421" width="0.3723%" height="15" fill="rgb(242,26,26)"/><text x="96.6236%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (62 samples, 0.40%)</title><rect x="96.3736%" y="469" width="0.3979%" height="15" fill="rgb(221,92,48)"/><text x="96.6236%" y="479.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (65 samples, 0.42%)</title><rect x="96.3607%" y="565" width="0.4172%" height="15" fill="rgb(209,209,32)"/><text x="96.6107%" y="575.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (64 samples, 0.41%)</title><rect x="96.3671%" y="549" width="0.4108%" height="15" fill="rgb(221,70,22)"/><text x="96.6171%" y="559.50"></text></g><g><title>std::sys_common::net::TcpStream::read (64 samples, 0.41%)</title><rect x="96.3671%" y="533" width="0.4108%" height="15" fill="rgb(248,145,5)"/><text x="96.6171%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::read (64 samples, 0.41%)</title><rect x="96.3671%" y="517" width="0.4108%" height="15" fill="rgb(226,116,26)"/><text x="96.6171%" y="527.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (64 samples, 0.41%)</title><rect x="96.3671%" y="501" width="0.4108%" height="15" fill="rgb(244,5,17)"/><text x="96.6171%" y="511.50"></text></g><g><title>__libc_recv (64 samples, 0.41%)</title><rect x="96.3671%" y="485" width="0.4108%" height="15" fill="rgb(252,159,33)"/><text x="96.6171%" y="495.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (69 samples, 0.44%)</title><rect x="96.3479%" y="581" width="0.4429%" height="15" fill="rgb(206,71,0)"/><text x="96.5979%" y="591.50"></text></g><g><title>__wake_up_common (23 samples, 0.15%)</title><rect x="97.1694%" y="53" width="0.1476%" height="15" fill="rgb(233,118,54)"/><text x="97.4194%" y="63.50"></text></g><g><title>try_to_wake_up (23 samples, 0.15%)</title><rect x="97.1694%" y="37" width="0.1476%" height="15" fill="rgb(234,83,48)"/><text x="97.4194%" y="47.50"></text></g><g><title>sock_def_readable (26 samples, 0.17%)</title><rect x="97.1566%" y="85" width="0.1669%" height="15" fill="rgb(228,3,54)"/><text x="97.4066%" y="95.50"></text></g><g><title>__wake_up_common_lock (25 samples, 0.16%)</title><rect x="97.1630%" y="69" width="0.1605%" height="15" fill="rgb(226,155,13)"/><text x="97.4130%" y="79.50"></text></g><g><title>__netif_receive_skb_one_core (57 samples, 0.37%)</title><rect x="97.0347%" y="213" width="0.3659%" height="15" fill="rgb(241,28,37)"/><text x="97.2847%" y="223.50"></text></g><g><title>ip_rcv (55 samples, 0.35%)</title><rect x="97.0475%" y="197" width="0.3530%" height="15" fill="rgb(233,93,10)"/><text x="97.2975%" y="207.50"></text></g><g><title>ip_local_deliver (54 samples, 0.35%)</title><rect x="97.0539%" y="181" width="0.3466%" height="15" fill="rgb(225,113,19)"/><text x="97.3039%" y="191.50"></text></g><g><title>ip_local_deliver_finish (53 samples, 0.34%)</title><rect x="97.0603%" y="165" width="0.3402%" height="15" fill="rgb(241,2,18)"/><text x="97.3103%" y="175.50"></text></g><g><title>ip_protocol_deliver_rcu (52 samples, 0.33%)</title><rect x="97.0668%" y="149" width="0.3338%" height="15" fill="rgb(228,207,21)"/><text x="97.3168%" y="159.50"></text></g><g><title>tcp_v4_rcv (51 samples, 0.33%)</title><rect x="97.0732%" y="133" width="0.3273%" height="15" fill="rgb(213,211,35)"/><text x="97.3232%" y="143.50"></text></g><g><title>tcp_v4_do_rcv (41 samples, 0.26%)</title><rect x="97.1374%" y="117" width="0.2632%" height="15" fill="rgb(209,83,10)"/><text x="97.3874%" y="127.50"></text></g><g><title>tcp_rcv_established (41 samples, 0.26%)</title><rect x="97.1374%" y="101" width="0.2632%" height="15" fill="rgb(209,164,1)"/><text x="97.3874%" y="111.50"></text></g><g><title>ip_finish_output2 (76 samples, 0.49%)</title><rect x="96.9191%" y="325" width="0.4878%" height="15" fill="rgb(213,184,43)"/><text x="97.1691%" y="335.50"></text></g><g><title>__local_bh_enable_ip (64 samples, 0.41%)</title><rect x="96.9961%" y="309" width="0.4108%" height="15" fill="rgb(231,61,34)"/><text x="97.2461%" y="319.50"></text></g><g><title>do_softirq (64 samples, 0.41%)</title><rect x="96.9961%" y="293" width="0.4108%" height="15" fill="rgb(235,75,3)"/><text x="97.2461%" y="303.50"></text></g><g><title>do_softirq_own_stack (64 samples, 0.41%)</title><rect x="96.9961%" y="277" width="0.4108%" height="15" fill="rgb(220,106,47)"/><text x="97.2461%" y="287.50"></text></g><g><title>__do_softirq (64 samples, 0.41%)</title><rect x="96.9961%" y="261" width="0.4108%" height="15" fill="rgb(210,196,33)"/><text x="97.2461%" y="271.50"></text></g><g><title>net_rx_action (63 samples, 0.40%)</title><rect x="97.0026%" y="245" width="0.4044%" height="15" fill="rgb(229,154,42)"/><text x="97.2526%" y="255.50"></text></g><g><title>process_backlog (60 samples, 0.39%)</title><rect x="97.0218%" y="229" width="0.3851%" height="15" fill="rgb(228,114,26)"/><text x="97.2718%" y="239.50"></text></g><g><title>__ip_queue_xmit (83 samples, 0.53%)</title><rect x="96.8935%" y="357" width="0.5327%" height="15" fill="rgb(208,144,1)"/><text x="97.1435%" y="367.50"></text></g><g><title>ip_output (81 samples, 0.52%)</title><rect x="96.9063%" y="341" width="0.5199%" height="15" fill="rgb(239,112,37)"/><text x="97.1563%" y="351.50"></text></g><g><title>__tcp_transmit_skb (89 samples, 0.57%)</title><rect x="96.8742%" y="373" width="0.5712%" height="15" fill="rgb(210,96,50)"/><text x="97.1242%" y="383.50"></text></g><g><title>__tcp_push_pending_frames (95 samples, 0.61%)</title><rect x="96.8678%" y="405" width="0.6098%" height="15" fill="rgb(222,178,2)"/><text x="97.1178%" y="415.50"></text></g><g><title>tcp_write_xmit (95 samples, 0.61%)</title><rect x="96.8678%" y="389" width="0.6098%" height="15" fill="rgb(226,74,18)"/><text x="97.1178%" y="399.50"></text></g><g><title>__x64_sys_sendto (114 samples, 0.73%)</title><rect x="96.8228%" y="485" width="0.7317%" height="15" fill="rgb(225,67,54)"/><text x="97.0728%" y="495.50"></text></g><g><title>__sys_sendto (112 samples, 0.72%)</title><rect x="96.8357%" y="469" width="0.7189%" height="15" fill="rgb(251,92,32)"/><text x="97.0857%" y="479.50"></text></g><g><title>sock_sendmsg (111 samples, 0.71%)</title><rect x="96.8421%" y="453" width="0.7125%" height="15" fill="rgb(228,149,22)"/><text x="97.0921%" y="463.50"></text></g><g><title>tcp_sendmsg (111 samples, 0.71%)</title><rect x="96.8421%" y="437" width="0.7125%" height="15" fill="rgb(243,54,13)"/><text x="97.0921%" y="447.50"></text></g><g><title>tcp_sendmsg_locked (110 samples, 0.71%)</title><rect x="96.8485%" y="421" width="0.7060%" height="15" fill="rgb(243,180,28)"/><text x="97.0985%" y="431.50"></text></g><g><title>do_syscall_64 (118 samples, 0.76%)</title><rect x="96.8228%" y="501" width="0.7574%" height="15" fill="rgb(208,167,24)"/><text x="97.0728%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (123 samples, 0.79%)</title><rect x="96.8100%" y="517" width="0.7895%" height="15" fill="rgb(245,73,45)"/><text x="97.0600%" y="527.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (387 samples, 2.48%)</title><rect x="95.1220%" y="597" width="2.4840%" height="15" fill="rgb(237,203,48)"/><text x="95.3720%" y="607.50">ms..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (127 samples, 0.82%)</title><rect x="96.7908%" y="581" width="0.8151%" height="15" fill="rgb(211,197,16)"/><text x="97.0408%" y="591.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (126 samples, 0.81%)</title><rect x="96.7972%" y="565" width="0.8087%" height="15" fill="rgb(243,99,51)"/><text x="97.0472%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::write (126 samples, 0.81%)</title><rect x="96.7972%" y="549" width="0.8087%" height="15" fill="rgb(215,123,29)"/><text x="97.0472%" y="559.50"></text></g><g><title>__libc_send (126 samples, 0.81%)</title><rect x="96.7972%" y="533" width="0.8087%" height="15" fill="rgb(239,186,37)"/><text x="97.0472%" y="543.50"></text></g><g><title>__GI___clone (394 samples, 2.53%)</title><rect x="95.0834%" y="725" width="2.5289%" height="15" fill="rgb(252,136,39)"/><text x="95.3334%" y="735.50">__..</text></g><g><title>start_thread (394 samples, 2.53%)</title><rect x="95.0834%" y="709" width="2.5289%" height="15" fill="rgb(223,213,32)"/><text x="95.3334%" y="719.50">st..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (389 samples, 2.50%)</title><rect x="95.1155%" y="693" width="2.4968%" height="15" fill="rgb(233,115,5)"/><text x="95.3655%" y="703.50">st..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (389 samples, 2.50%)</title><rect x="95.1155%" y="677" width="2.4968%" height="15" fill="rgb(207,226,44)"/><text x="95.3655%" y="687.50">&lt;a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (389 samples, 2.50%)</title><rect x="95.1155%" y="661" width="2.4968%" height="15" fill="rgb(208,126,0)"/><text x="95.3655%" y="671.50">&lt;a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (389 samples, 2.50%)</title><rect x="95.1155%" y="645" width="2.4968%" height="15" fill="rgb(244,66,21)"/><text x="95.3655%" y="655.50">co..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (389 samples, 2.50%)</title><rect x="95.1155%" y="629" width="2.4968%" height="15" fill="rgb(222,97,12)"/><text x="95.3655%" y="639.50">st..</text></g><g><title>decor_mem::Shim::run_on_tcp (389 samples, 2.50%)</title><rect x="95.1155%" y="613" width="2.4968%" height="15" fill="rgb(219,213,19)"/><text x="95.3655%" y="623.50">de..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (231 samples, 1.48%)</title><rect x="97.7856%" y="245" width="1.4827%" height="15" fill="rgb(252,169,30)"/><text x="98.0356%" y="255.50"></text></g><g><title>native_write_msr (231 samples, 1.48%)</title><rect x="97.7856%" y="229" width="1.4827%" height="15" fill="rgb(206,32,51)"/><text x="98.0356%" y="239.50"></text></g><g><title>do_syscall_64 (234 samples, 1.50%)</title><rect x="97.7728%" y="421" width="1.5019%" height="15" fill="rgb(250,172,42)"/><text x="98.0228%" y="431.50"></text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 1.50%)</title><rect x="97.7728%" y="405" width="1.5019%" height="15" fill="rgb(209,34,43)"/><text x="98.0228%" y="415.50"></text></g><g><title>sched_setaffinity (234 samples, 1.50%)</title><rect x="97.7728%" y="389" width="1.5019%" height="15" fill="rgb(223,11,35)"/><text x="98.0228%" y="399.50"></text></g><g><title>__set_cpus_allowed_ptr (234 samples, 1.50%)</title><rect x="97.7728%" y="373" width="1.5019%" height="15" fill="rgb(251,219,26)"/><text x="98.0228%" y="383.50"></text></g><g><title>stop_one_cpu (234 samples, 1.50%)</title><rect x="97.7728%" y="357" width="1.5019%" height="15" fill="rgb(231,119,3)"/><text x="98.0228%" y="367.50"></text></g><g><title>cpu_stop_queue_work (234 samples, 1.50%)</title><rect x="97.7728%" y="341" width="1.5019%" height="15" fill="rgb(216,97,11)"/><text x="98.0228%" y="351.50"></text></g><g><title>preempt_schedule_thunk (234 samples, 1.50%)</title><rect x="97.7728%" y="325" width="1.5019%" height="15" fill="rgb(223,59,9)"/><text x="98.0228%" y="335.50"></text></g><g><title>preempt_schedule_common (234 samples, 1.50%)</title><rect x="97.7728%" y="309" width="1.5019%" height="15" fill="rgb(233,93,31)"/><text x="98.0228%" y="319.50"></text></g><g><title>__schedule (234 samples, 1.50%)</title><rect x="97.7728%" y="293" width="1.5019%" height="15" fill="rgb(239,81,33)"/><text x="98.0228%" y="303.50"></text></g><g><title>finish_task_switch (234 samples, 1.50%)</title><rect x="97.7728%" y="277" width="1.5019%" height="15" fill="rgb(213,120,34)"/><text x="98.0228%" y="287.50"></text></g><g><title>__perf_event_task_sched_in (233 samples, 1.50%)</title><rect x="97.7792%" y="261" width="1.4955%" height="15" fill="rgb(243,49,53)"/><text x="98.0292%" y="271.50"></text></g><g><title>entry_SYSCALL_64 (235 samples, 1.51%)</title><rect x="97.7728%" y="437" width="1.5083%" height="15" fill="rgb(247,216,33)"/><text x="98.0228%" y="447.50"></text></g><g><title>hwloc::Topology::new (237 samples, 1.52%)</title><rect x="97.7664%" y="549" width="1.5212%" height="15" fill="rgb(226,26,14)"/><text x="98.0164%" y="559.50"></text></g><g><title>hwloc_topology_load (237 samples, 1.52%)</title><rect x="97.7664%" y="533" width="1.5212%" height="15" fill="rgb(215,49,53)"/><text x="98.0164%" y="543.50"></text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 1.52%)</title><rect x="97.7664%" y="517" width="1.5212%" height="15" fill="rgb(245,162,40)"/><text x="98.0164%" y="527.50"></text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 1.52%)</title><rect x="97.7664%" y="501" width="1.5212%" height="15" fill="rgb(229,68,17)"/><text x="98.0164%" y="511.50"></text></g><g><title>[libhwloc.so.15.2.0] (236 samples, 1.51%)</title><rect x="97.7728%" y="485" width="1.5148%" height="15" fill="rgb(213,182,10)"/><text x="98.0228%" y="495.50"></text></g><g><title>hwloc_linux_set_tid_cpubind (236 samples, 1.51%)</title><rect x="97.7728%" y="469" width="1.5148%" height="15" fill="rgb(245,125,30)"/><text x="98.0228%" y="479.50"></text></g><g><title>__GI___sched_setaffinity_new (236 samples, 1.51%)</title><rect x="97.7728%" y="453" width="1.5148%" height="15" fill="rgb(232,202,2)"/><text x="98.0228%" y="463.50"></text></g><g><title>__libc_start_main (239 samples, 1.53%)</title><rect x="97.7664%" y="709" width="1.5340%" height="15" fill="rgb(237,140,51)"/><text x="98.0164%" y="719.50"></text></g><g><title>main (239 samples, 1.53%)</title><rect x="97.7664%" y="693" width="1.5340%" height="15" fill="rgb(236,157,25)"/><text x="98.0164%" y="703.50"></text></g><g><title>std::rt::lang_start_internal (239 samples, 1.53%)</title><rect x="97.7664%" y="677" width="1.5340%" height="15" fill="rgb(219,209,0)"/><text x="98.0164%" y="687.50"></text></g><g><title>std::panic::catch_unwind (239 samples, 1.53%)</title><rect x="97.7664%" y="661" width="1.5340%" height="15" fill="rgb(240,116,54)"/><text x="98.0164%" y="671.50"></text></g><g><title>std::panicking::try (239 samples, 1.53%)</title><rect x="97.7664%" y="645" width="1.5340%" height="15" fill="rgb(216,10,36)"/><text x="98.0164%" y="655.50"></text></g><g><title>std::panicking::try::do_call (239 samples, 1.53%)</title><rect x="97.7664%" y="629" width="1.5340%" height="15" fill="rgb(222,72,44)"/><text x="98.0164%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (239 samples, 1.53%)</title><rect x="97.7664%" y="613" width="1.5340%" height="15" fill="rgb(232,159,9)"/><text x="98.0164%" y="623.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (239 samples, 1.53%)</title><rect x="97.7664%" y="597" width="1.5340%" height="15" fill="rgb(210,39,32)"/><text x="98.0164%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (239 samples, 1.53%)</title><rect x="97.7664%" y="581" width="1.5340%" height="15" fill="rgb(216,194,45)"/><text x="98.0164%" y="591.50"></text></g><g><title>lobsters_microbenchmarks::main (239 samples, 1.53%)</title><rect x="97.7664%" y="565" width="1.5340%" height="15" fill="rgb(218,18,35)"/><text x="98.0164%" y="575.50"></text></g><g><title>_start (240 samples, 1.54%)</title><rect x="97.7664%" y="725" width="1.5404%" height="15" fill="rgb(207,83,51)"/><text x="98.0164%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.13%)</title><rect x="99.3068%" y="725" width="0.1284%" height="15" fill="rgb(225,63,43)"/><text x="99.5568%" y="735.50"></text></g><g><title>core::fmt::Formatter::pad (26 samples, 0.17%)</title><rect x="99.4994%" y="725" width="0.1669%" height="15" fill="rgb(207,57,36)"/><text x="99.7494%" y="735.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (16 samples, 0.10%)</title><rect x="99.8524%" y="725" width="0.1027%" height="15" fill="rgb(216,99,33)"/><text x="100.1024%" y="735.50"></text></g><g><title>lobsters-microb (15,574 samples, 99.96%)</title><rect x="0.0000%" y="741" width="99.9615%" height="15" fill="rgb(225,42,16)"/><text x="0.2500%" y="751.50">lobsters-microb</text></g><g><title>all (15,580 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(220,201,45)"/><text x="0.2500%" y="767.50"></text></g></svg></svg>