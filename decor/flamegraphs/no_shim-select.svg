<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="949.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="949.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="0.0000%" y="869" width="0.1422%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="879.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.14%)</title><rect x="0.1422%" y="869" width="0.1422%" height="15" fill="rgb(217,0,24)"/><text x="0.3922%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.14%)</title><rect x="0.2845%" y="869" width="0.1422%" height="15" fill="rgb(221,193,54)"/><text x="0.5345%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.14%)</title><rect x="0.4267%" y="869" width="0.1422%" height="15" fill="rgb(248,212,6)"/><text x="0.6767%" y="879.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (3 samples, 0.43%)</title><rect x="0.5690%" y="869" width="0.4267%" height="15" fill="rgb(208,68,35)"/><text x="0.8190%" y="879.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.14%)</title><rect x="0.9957%" y="869" width="0.1422%" height="15" fill="rgb(232,128,0)"/><text x="1.2457%" y="879.50"></text></g><g><title>[[heap]] (9 samples, 1.28%)</title><rect x="0.0000%" y="885" width="1.2802%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="895.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.14%)</title><rect x="1.1380%" y="869" width="0.1422%" height="15" fill="rgb(228,23,34)"/><text x="1.3880%" y="879.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.28%)</title><rect x="1.2802%" y="869" width="0.2845%" height="15" fill="rgb(218,30,26)"/><text x="1.5302%" y="879.50"></text></g><g><title>&lt;mysql::conn::ConnMut as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.14%)</title><rect x="1.4225%" y="853" width="0.1422%" height="15" fill="rgb(220,122,19)"/><text x="1.6725%" y="863.50"></text></g><g><title>&lt;mysql::conn::query_result::SetIteratorState as core::convert::From&lt;mysql::conn::query_result::Or&lt;alloc::vec::Vec&lt;mysql_common::packets::Column&gt;,mysql_common::packets::OkPacket&gt;&gt;&gt;::from (1 samples, 0.14%)</title><rect x="1.5647%" y="869" width="0.1422%" height="15" fill="rgb(250,228,42)"/><text x="1.8147%" y="879.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (1 samples, 0.14%)</title><rect x="1.7070%" y="869" width="0.1422%" height="15" fill="rgb(240,193,28)"/><text x="1.9570%" y="879.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="1.8492%" y="869" width="0.1422%" height="15" fill="rgb(216,20,37)"/><text x="2.0992%" y="879.50"></text></g><g><title>__libc_send (1 samples, 0.14%)</title><rect x="1.9915%" y="869" width="0.1422%" height="15" fill="rgb(206,188,39)"/><text x="2.2415%" y="879.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.14%)</title><rect x="1.9915%" y="853" width="0.1422%" height="15" fill="rgb(217,207,13)"/><text x="2.2415%" y="863.50"></text></g><g><title>_int_free (3 samples, 0.43%)</title><rect x="2.1337%" y="869" width="0.4267%" height="15" fill="rgb(231,73,38)"/><text x="2.3837%" y="879.50"></text></g><g><title>core::fmt::write (1 samples, 0.14%)</title><rect x="2.5605%" y="869" width="0.1422%" height="15" fill="rgb(225,20,46)"/><text x="2.8105%" y="879.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (1 samples, 0.14%)</title><rect x="2.7027%" y="869" width="0.1422%" height="15" fill="rgb(210,31,41)"/><text x="2.9527%" y="879.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.14%)</title><rect x="2.8450%" y="869" width="0.1422%" height="15" fill="rgb(221,200,47)"/><text x="3.0950%" y="879.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (2 samples, 0.28%)</title><rect x="2.9872%" y="869" width="0.2845%" height="15" fill="rgb(226,26,5)"/><text x="3.2372%" y="879.50"></text></g><g><title>[[stack]] (15 samples, 2.13%)</title><rect x="1.2802%" y="885" width="2.1337%" height="15" fill="rgb(249,33,26)"/><text x="1.5302%" y="895.50">[..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.14%)</title><rect x="3.2717%" y="869" width="0.1422%" height="15" fill="rgb(235,183,28)"/><text x="3.5217%" y="879.50"></text></g><g><title>[lobsters] (1 samples, 0.14%)</title><rect x="3.4139%" y="885" width="0.1422%" height="15" fill="rgb(221,5,38)"/><text x="3.6639%" y="895.50"></text></g><g><title>mysql_common::value::read_text_value (1 samples, 0.14%)</title><rect x="3.4139%" y="869" width="0.1422%" height="15" fill="rgb(247,18,42)"/><text x="3.6639%" y="879.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.14%)</title><rect x="3.5562%" y="869" width="0.1422%" height="15" fill="rgb(241,131,45)"/><text x="3.8062%" y="879.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="3.6984%" y="869" width="0.1422%" height="15" fill="rgb(249,31,29)"/><text x="3.9484%" y="879.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.14%)</title><rect x="3.8407%" y="869" width="0.1422%" height="15" fill="rgb(225,111,53)"/><text x="4.0907%" y="879.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.14%)</title><rect x="3.8407%" y="853" width="0.1422%" height="15" fill="rgb(238,160,17)"/><text x="4.0907%" y="863.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.14%)</title><rect x="3.8407%" y="837" width="0.1422%" height="15" fill="rgb(214,148,48)"/><text x="4.0907%" y="847.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.14%)</title><rect x="3.8407%" y="821" width="0.1422%" height="15" fill="rgb(232,36,49)"/><text x="4.0907%" y="831.50"></text></g><g><title>[lobsters] (1 samples, 0.14%)</title><rect x="3.9829%" y="869" width="0.1422%" height="15" fill="rgb(209,103,24)"/><text x="4.2329%" y="879.50"></text></g><g><title>mysql_common::value::read_text_value (1 samples, 0.14%)</title><rect x="3.9829%" y="853" width="0.1422%" height="15" fill="rgb(229,88,8)"/><text x="4.2329%" y="863.50"></text></g><g><title>__GI___libc_free (1 samples, 0.14%)</title><rect x="4.1252%" y="869" width="0.1422%" height="15" fill="rgb(213,181,19)"/><text x="4.3752%" y="879.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.43%)</title><rect x="4.2674%" y="869" width="0.4267%" height="15" fill="rgb(254,191,54)"/><text x="4.5174%" y="879.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.28%)</title><rect x="4.6942%" y="853" width="0.2845%" height="15" fill="rgb(241,83,37)"/><text x="4.9442%" y="863.50"></text></g><g><title>__libc_recv (3 samples, 0.43%)</title><rect x="4.6942%" y="869" width="0.4267%" height="15" fill="rgb(233,36,39)"/><text x="4.9442%" y="879.50"></text></g><g><title>interrupt_entry (1 samples, 0.14%)</title><rect x="4.9787%" y="853" width="0.1422%" height="15" fill="rgb(226,3,54)"/><text x="5.2287%" y="863.50"></text></g><g><title>_int_free (1 samples, 0.14%)</title><rect x="5.1209%" y="661" width="0.1422%" height="15" fill="rgb(245,192,40)"/><text x="5.3709%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.71%)</title><rect x="5.1209%" y="709" width="0.7112%" height="15" fill="rgb(238,167,29)"/><text x="5.3709%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (5 samples, 0.71%)</title><rect x="5.1209%" y="693" width="0.7112%" height="15" fill="rgb(232,182,51)"/><text x="5.3709%" y="703.50"></text></g><g><title>mysql::conn::Conn::next_text (5 samples, 0.71%)</title><rect x="5.1209%" y="677" width="0.7112%" height="15" fill="rgb(231,60,39)"/><text x="5.3709%" y="687.50"></text></g><g><title>mysql_common::value::read_text_values (4 samples, 0.57%)</title><rect x="5.2632%" y="661" width="0.5690%" height="15" fill="rgb(208,69,12)"/><text x="5.5132%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.28%)</title><rect x="5.5477%" y="645" width="0.2845%" height="15" fill="rgb(235,93,37)"/><text x="5.7977%" y="655.50"></text></g><g><title>apic_timer_interrupt (1 samples, 0.14%)</title><rect x="5.6899%" y="629" width="0.1422%" height="15" fill="rgb(213,116,39)"/><text x="5.9399%" y="639.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.14%)</title><rect x="5.6899%" y="613" width="0.1422%" height="15" fill="rgb(222,207,29)"/><text x="5.9399%" y="623.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.14%)</title><rect x="5.6899%" y="597" width="0.1422%" height="15" fill="rgb(206,96,30)"/><text x="5.9399%" y="607.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.14%)</title><rect x="5.6899%" y="581" width="0.1422%" height="15" fill="rgb(218,138,4)"/><text x="5.9399%" y="591.50"></text></g><g><title>tick_sched_timer (1 samples, 0.14%)</title><rect x="5.6899%" y="565" width="0.1422%" height="15" fill="rgb(250,191,14)"/><text x="5.9399%" y="575.50"></text></g><g><title>tick_sched_handle (1 samples, 0.14%)</title><rect x="5.6899%" y="549" width="0.1422%" height="15" fill="rgb(239,60,40)"/><text x="5.9399%" y="559.50"></text></g><g><title>update_process_times (1 samples, 0.14%)</title><rect x="5.6899%" y="533" width="0.1422%" height="15" fill="rgb(206,27,48)"/><text x="5.9399%" y="543.50"></text></g><g><title>account_user_time (1 samples, 0.14%)</title><rect x="5.6899%" y="517" width="0.1422%" height="15" fill="rgb(225,35,8)"/><text x="5.9399%" y="527.50"></text></g><g><title>__cgroup_account_cputime_field (1 samples, 0.14%)</title><rect x="5.6899%" y="501" width="0.1422%" height="15" fill="rgb(250,213,24)"/><text x="5.9399%" y="511.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.14%)</title><rect x="5.8321%" y="709" width="0.1422%" height="15" fill="rgb(247,123,22)"/><text x="6.0821%" y="719.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.14%)</title><rect x="5.8321%" y="693" width="0.1422%" height="15" fill="rgb(231,138,38)"/><text x="6.0821%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="5.8321%" y="677" width="0.1422%" height="15" fill="rgb(231,145,46)"/><text x="6.0821%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="5.8321%" y="661" width="0.1422%" height="15" fill="rgb(251,118,11)"/><text x="6.0821%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="5.8321%" y="645" width="0.1422%" height="15" fill="rgb(217,147,25)"/><text x="6.0821%" y="655.50"></text></g><g><title>__libc_read (1 samples, 0.14%)</title><rect x="5.8321%" y="629" width="0.1422%" height="15" fill="rgb(247,81,37)"/><text x="6.0821%" y="639.50"></text></g><g><title>syscall_return_via_sysret (1 samples, 0.14%)</title><rect x="5.8321%" y="613" width="0.1422%" height="15" fill="rgb(209,12,38)"/><text x="6.0821%" y="623.50"></text></g><g><title>mysql::conn::Conn::read_packet (3 samples, 0.43%)</title><rect x="5.9744%" y="677" width="0.4267%" height="15" fill="rgb(227,1,9)"/><text x="6.2244%" y="687.50"></text></g><g><title>__libc_start_main (14 samples, 1.99%)</title><rect x="5.1209%" y="869" width="1.9915%" height="15" fill="rgb(248,47,43)"/><text x="5.3709%" y="879.50">_..</text></g><g><title>main (14 samples, 1.99%)</title><rect x="5.1209%" y="853" width="1.9915%" height="15" fill="rgb(221,10,30)"/><text x="5.3709%" y="863.50">m..</text></g><g><title>std::rt::lang_start_internal (14 samples, 1.99%)</title><rect x="5.1209%" y="837" width="1.9915%" height="15" fill="rgb(210,229,1)"/><text x="5.3709%" y="847.50">s..</text></g><g><title>std::panic::catch_unwind (14 samples, 1.99%)</title><rect x="5.1209%" y="821" width="1.9915%" height="15" fill="rgb(222,148,37)"/><text x="5.3709%" y="831.50">s..</text></g><g><title>std::panicking::try (14 samples, 1.99%)</title><rect x="5.1209%" y="805" width="1.9915%" height="15" fill="rgb(234,67,33)"/><text x="5.3709%" y="815.50">s..</text></g><g><title>std::panicking::try::do_call (14 samples, 1.99%)</title><rect x="5.1209%" y="789" width="1.9915%" height="15" fill="rgb(247,98,35)"/><text x="5.3709%" y="799.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (14 samples, 1.99%)</title><rect x="5.1209%" y="773" width="1.9915%" height="15" fill="rgb(247,138,52)"/><text x="5.3709%" y="783.50">c..</text></g><g><title>std::rt::lang_start::_{{closure}} (14 samples, 1.99%)</title><rect x="5.1209%" y="757" width="1.9915%" height="15" fill="rgb(213,79,30)"/><text x="5.3709%" y="767.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14 samples, 1.99%)</title><rect x="5.1209%" y="741" width="1.9915%" height="15" fill="rgb(246,177,23)"/><text x="5.3709%" y="751.50">s..</text></g><g><title>lobsters::main (14 samples, 1.99%)</title><rect x="5.1209%" y="725" width="1.9915%" height="15" fill="rgb(230,62,27)"/><text x="5.3709%" y="735.50">l..</text></g><g><title>mysql::conn::Conn::_query (8 samples, 1.14%)</title><rect x="5.9744%" y="709" width="1.1380%" height="15" fill="rgb(216,154,8)"/><text x="6.2244%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (8 samples, 1.14%)</title><rect x="5.9744%" y="693" width="1.1380%" height="15" fill="rgb(244,35,45)"/><text x="6.2244%" y="703.50"></text></g><g><title>mysql_common::packets::column_from_payload (5 samples, 0.71%)</title><rect x="6.4011%" y="677" width="0.7112%" height="15" fill="rgb(251,115,12)"/><text x="6.6511%" y="687.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (1 samples, 0.14%)</title><rect x="6.9701%" y="661" width="0.1422%" height="15" fill="rgb(240,54,50)"/><text x="7.2201%" y="671.50"></text></g><g><title>_int_free (2 samples, 0.28%)</title><rect x="7.1124%" y="869" width="0.2845%" height="15" fill="rgb(233,84,52)"/><text x="7.3624%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.14%)</title><rect x="7.3969%" y="869" width="0.1422%" height="15" fill="rgb(207,117,47)"/><text x="7.6469%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.28%)</title><rect x="7.9659%" y="725" width="0.2845%" height="15" fill="rgb(249,43,39)"/><text x="8.2159%" y="735.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.28%)</title><rect x="7.9659%" y="709" width="0.2845%" height="15" fill="rgb(209,38,44)"/><text x="8.2159%" y="719.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="8.8193%" y="709" width="0.1422%" height="15" fill="rgb(236,212,23)"/><text x="9.0693%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="8.9616%" y="709" width="0.1422%" height="15" fill="rgb(242,79,21)"/><text x="9.2116%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 1.71%)</title><rect x="7.6814%" y="853" width="1.7070%" height="15" fill="rgb(211,96,35)"/><text x="7.9314%" y="863.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (12 samples, 1.71%)</title><rect x="7.6814%" y="837" width="1.7070%" height="15" fill="rgb(253,215,40)"/><text x="7.9314%" y="847.50"></text></g><g><title>mysql::conn::Conn::next_text (12 samples, 1.71%)</title><rect x="7.6814%" y="821" width="1.7070%" height="15" fill="rgb(211,81,21)"/><text x="7.9314%" y="831.50"></text></g><g><title>mysql::conn::Conn::read_packet (12 samples, 1.71%)</title><rect x="7.6814%" y="805" width="1.7070%" height="15" fill="rgb(208,190,38)"/><text x="7.9314%" y="815.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 1.71%)</title><rect x="7.6814%" y="789" width="1.7070%" height="15" fill="rgb(235,213,38)"/><text x="7.9314%" y="799.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (12 samples, 1.71%)</title><rect x="7.6814%" y="773" width="1.7070%" height="15" fill="rgb(237,122,38)"/><text x="7.9314%" y="783.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (12 samples, 1.71%)</title><rect x="7.6814%" y="757" width="1.7070%" height="15" fill="rgb(244,218,35)"/><text x="7.9314%" y="767.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (12 samples, 1.71%)</title><rect x="7.6814%" y="741" width="1.7070%" height="15" fill="rgb(240,68,47)"/><text x="7.9314%" y="751.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (8 samples, 1.14%)</title><rect x="8.2504%" y="725" width="1.1380%" height="15" fill="rgb(210,16,53)"/><text x="8.5004%" y="735.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.28%)</title><rect x="9.1038%" y="709" width="0.2845%" height="15" fill="rgb(235,124,12)"/><text x="9.3538%" y="719.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.14%)</title><rect x="9.3883%" y="853" width="0.1422%" height="15" fill="rgb(224,169,11)"/><text x="9.6383%" y="863.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="9.3883%" y="837" width="0.1422%" height="15" fill="rgb(250,166,2)"/><text x="9.6383%" y="847.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="9.3883%" y="821" width="0.1422%" height="15" fill="rgb(242,216,29)"/><text x="9.6383%" y="831.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="9.3883%" y="805" width="0.1422%" height="15" fill="rgb(230,116,27)"/><text x="9.6383%" y="815.50"></text></g><g><title>dlopen (1 samples, 0.14%)</title><rect x="9.3883%" y="789" width="0.1422%" height="15" fill="rgb(228,99,48)"/><text x="9.6383%" y="799.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.14%)</title><rect x="9.3883%" y="773" width="0.1422%" height="15" fill="rgb(253,11,6)"/><text x="9.6383%" y="783.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.14%)</title><rect x="9.3883%" y="757" width="0.1422%" height="15" fill="rgb(247,143,39)"/><text x="9.6383%" y="767.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.14%)</title><rect x="9.3883%" y="741" width="0.1422%" height="15" fill="rgb(236,97,10)"/><text x="9.6383%" y="751.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.14%)</title><rect x="9.3883%" y="725" width="0.1422%" height="15" fill="rgb(233,208,19)"/><text x="9.6383%" y="735.50"></text></g><g><title>_dl_open (1 samples, 0.14%)</title><rect x="9.3883%" y="709" width="0.1422%" height="15" fill="rgb(216,164,2)"/><text x="9.6383%" y="719.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.14%)</title><rect x="9.3883%" y="693" width="0.1422%" height="15" fill="rgb(220,129,5)"/><text x="9.6383%" y="703.50"></text></g><g><title>dl_open_worker (1 samples, 0.14%)</title><rect x="9.3883%" y="677" width="0.1422%" height="15" fill="rgb(242,17,10)"/><text x="9.6383%" y="687.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.14%)</title><rect x="9.3883%" y="661" width="0.1422%" height="15" fill="rgb(242,107,0)"/><text x="9.6383%" y="671.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.14%)</title><rect x="9.3883%" y="645" width="0.1422%" height="15" fill="rgb(251,28,31)"/><text x="9.6383%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 1.00%)</title><rect x="9.8151%" y="741" width="0.9957%" height="15" fill="rgb(233,223,10)"/><text x="10.0651%" y="751.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.85%)</title><rect x="9.9573%" y="725" width="0.8535%" height="15" fill="rgb(215,21,27)"/><text x="10.2073%" y="735.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="10.8108%" y="725" width="0.1422%" height="15" fill="rgb(232,23,21)"/><text x="11.0608%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (11 samples, 1.56%)</title><rect x="9.5306%" y="853" width="1.5647%" height="15" fill="rgb(244,5,23)"/><text x="9.7806%" y="863.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (11 samples, 1.56%)</title><rect x="9.5306%" y="837" width="1.5647%" height="15" fill="rgb(226,81,46)"/><text x="9.7806%" y="847.50"></text></g><g><title>mysql::conn::Conn::read_packet (11 samples, 1.56%)</title><rect x="9.5306%" y="821" width="1.5647%" height="15" fill="rgb(247,70,30)"/><text x="9.7806%" y="831.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 1.56%)</title><rect x="9.5306%" y="805" width="1.5647%" height="15" fill="rgb(212,68,19)"/><text x="9.7806%" y="815.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (11 samples, 1.56%)</title><rect x="9.5306%" y="789" width="1.5647%" height="15" fill="rgb(240,187,13)"/><text x="9.7806%" y="799.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (11 samples, 1.56%)</title><rect x="9.5306%" y="773" width="1.5647%" height="15" fill="rgb(223,113,26)"/><text x="9.7806%" y="783.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (11 samples, 1.56%)</title><rect x="9.5306%" y="757" width="1.5647%" height="15" fill="rgb(206,192,2)"/><text x="9.7806%" y="767.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (2 samples, 0.28%)</title><rect x="10.8108%" y="741" width="0.2845%" height="15" fill="rgb(241,108,4)"/><text x="11.0608%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="10.9531%" y="725" width="0.1422%" height="15" fill="rgb(247,173,49)"/><text x="11.2031%" y="735.50"></text></g><g><title>lobsters::main (26 samples, 3.70%)</title><rect x="7.5391%" y="869" width="3.6984%" height="15" fill="rgb(224,114,35)"/><text x="7.7891%" y="879.50">lobs..</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.14%)</title><rect x="11.0953%" y="853" width="0.1422%" height="15" fill="rgb(245,159,27)"/><text x="11.3453%" y="863.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 0.14%)</title><rect x="11.0953%" y="837" width="0.1422%" height="15" fill="rgb(245,172,44)"/><text x="11.3453%" y="847.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.14%)</title><rect x="11.0953%" y="821" width="0.1422%" height="15" fill="rgb(236,23,11)"/><text x="11.3453%" y="831.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.14%)</title><rect x="11.0953%" y="805" width="0.1422%" height="15" fill="rgb(205,117,38)"/><text x="11.3453%" y="815.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.14%)</title><rect x="11.0953%" y="789" width="0.1422%" height="15" fill="rgb(237,72,25)"/><text x="11.3453%" y="799.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="11.0953%" y="773" width="0.1422%" height="15" fill="rgb(244,70,9)"/><text x="11.3453%" y="783.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.14%)</title><rect x="11.0953%" y="757" width="0.1422%" height="15" fill="rgb(217,125,39)"/><text x="11.3453%" y="767.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.14%)</title><rect x="11.0953%" y="741" width="0.1422%" height="15" fill="rgb(235,36,10)"/><text x="11.3453%" y="751.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.14%)</title><rect x="11.0953%" y="725" width="0.1422%" height="15" fill="rgb(251,123,47)"/><text x="11.3453%" y="735.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.14%)</title><rect x="11.0953%" y="709" width="0.1422%" height="15" fill="rgb(221,13,13)"/><text x="11.3453%" y="719.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.14%)</title><rect x="11.0953%" y="693" width="0.1422%" height="15" fill="rgb(238,131,9)"/><text x="11.3453%" y="703.50"></text></g><g><title>__libc_recv (1 samples, 0.14%)</title><rect x="11.0953%" y="677" width="0.1422%" height="15" fill="rgb(211,50,8)"/><text x="11.3453%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.14%)</title><rect x="11.0953%" y="661" width="0.1422%" height="15" fill="rgb(245,182,24)"/><text x="11.3453%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.14%)</title><rect x="11.0953%" y="645" width="0.1422%" height="15" fill="rgb(242,14,37)"/><text x="11.3453%" y="655.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 0.14%)</title><rect x="11.0953%" y="629" width="0.1422%" height="15" fill="rgb(246,228,12)"/><text x="11.3453%" y="639.50"></text></g><g><title>__sys_recvfrom (1 samples, 0.14%)</title><rect x="11.0953%" y="613" width="0.1422%" height="15" fill="rgb(213,55,15)"/><text x="11.3453%" y="623.50"></text></g><g><title>inet_recvmsg (1 samples, 0.14%)</title><rect x="11.0953%" y="597" width="0.1422%" height="15" fill="rgb(209,9,3)"/><text x="11.3453%" y="607.50"></text></g><g><title>tcp_recvmsg (1 samples, 0.14%)</title><rect x="11.0953%" y="581" width="0.1422%" height="15" fill="rgb(230,59,30)"/><text x="11.3453%" y="591.50"></text></g><g><title>__tcp_transmit_skb (1 samples, 0.14%)</title><rect x="11.0953%" y="565" width="0.1422%" height="15" fill="rgb(209,121,21)"/><text x="11.3453%" y="575.50"></text></g><g><title>__ip_queue_xmit (1 samples, 0.14%)</title><rect x="11.0953%" y="549" width="0.1422%" height="15" fill="rgb(220,109,13)"/><text x="11.3453%" y="559.50"></text></g><g><title>ip_output (1 samples, 0.14%)</title><rect x="11.0953%" y="533" width="0.1422%" height="15" fill="rgb(232,18,1)"/><text x="11.3453%" y="543.50"></text></g><g><title>ip_finish_output2 (1 samples, 0.14%)</title><rect x="11.0953%" y="517" width="0.1422%" height="15" fill="rgb(215,41,42)"/><text x="11.3453%" y="527.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.14%)</title><rect x="11.0953%" y="501" width="0.1422%" height="15" fill="rgb(224,123,36)"/><text x="11.3453%" y="511.50"></text></g><g><title>do_softirq (1 samples, 0.14%)</title><rect x="11.0953%" y="485" width="0.1422%" height="15" fill="rgb(240,125,3)"/><text x="11.3453%" y="495.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.14%)</title><rect x="11.0953%" y="469" width="0.1422%" height="15" fill="rgb(205,98,50)"/><text x="11.3453%" y="479.50"></text></g><g><title>__do_softirq (1 samples, 0.14%)</title><rect x="11.0953%" y="453" width="0.1422%" height="15" fill="rgb(205,185,37)"/><text x="11.3453%" y="463.50"></text></g><g><title>net_rx_action (1 samples, 0.14%)</title><rect x="11.0953%" y="437" width="0.1422%" height="15" fill="rgb(238,207,15)"/><text x="11.3453%" y="447.50"></text></g><g><title>process_backlog (1 samples, 0.14%)</title><rect x="11.0953%" y="421" width="0.1422%" height="15" fill="rgb(213,199,42)"/><text x="11.3453%" y="431.50"></text></g><g><title>__netif_receive_skb_one_core (1 samples, 0.14%)</title><rect x="11.0953%" y="405" width="0.1422%" height="15" fill="rgb(235,201,11)"/><text x="11.3453%" y="415.50"></text></g><g><title>ip_rcv (1 samples, 0.14%)</title><rect x="11.0953%" y="389" width="0.1422%" height="15" fill="rgb(207,46,11)"/><text x="11.3453%" y="399.50"></text></g><g><title>ip_local_deliver (1 samples, 0.14%)</title><rect x="11.0953%" y="373" width="0.1422%" height="15" fill="rgb(241,35,35)"/><text x="11.3453%" y="383.50"></text></g><g><title>ip_local_deliver_finish (1 samples, 0.14%)</title><rect x="11.0953%" y="357" width="0.1422%" height="15" fill="rgb(243,32,47)"/><text x="11.3453%" y="367.50"></text></g><g><title>ip_protocol_deliver_rcu (1 samples, 0.14%)</title><rect x="11.0953%" y="341" width="0.1422%" height="15" fill="rgb(247,202,23)"/><text x="11.3453%" y="351.50"></text></g><g><title>tcp_v4_rcv (1 samples, 0.14%)</title><rect x="11.0953%" y="325" width="0.1422%" height="15" fill="rgb(219,102,11)"/><text x="11.3453%" y="335.50"></text></g><g><title>tcp_v4_do_rcv (1 samples, 0.14%)</title><rect x="11.0953%" y="309" width="0.1422%" height="15" fill="rgb(243,110,44)"/><text x="11.3453%" y="319.50"></text></g><g><title>tcp_rcv_established (1 samples, 0.14%)</title><rect x="11.0953%" y="293" width="0.1422%" height="15" fill="rgb(222,74,54)"/><text x="11.3453%" y="303.50"></text></g><g><title>tcp_ack (1 samples, 0.14%)</title><rect x="11.0953%" y="277" width="0.1422%" height="15" fill="rgb(216,99,12)"/><text x="11.3453%" y="287.50"></text></g><g><title>tcp_update_pacing_rate (1 samples, 0.14%)</title><rect x="11.0953%" y="261" width="0.1422%" height="15" fill="rgb(226,22,26)"/><text x="11.3453%" y="271.50"></text></g><g><title>main (3 samples, 0.43%)</title><rect x="11.2376%" y="869" width="0.4267%" height="15" fill="rgb(217,163,10)"/><text x="11.4876%" y="879.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.43%)</title><rect x="11.2376%" y="853" width="0.4267%" height="15" fill="rgb(213,25,53)"/><text x="11.4876%" y="863.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.43%)</title><rect x="11.2376%" y="837" width="0.4267%" height="15" fill="rgb(252,105,26)"/><text x="11.4876%" y="847.50"></text></g><g><title>std::panicking::try (3 samples, 0.43%)</title><rect x="11.2376%" y="821" width="0.4267%" height="15" fill="rgb(220,39,43)"/><text x="11.4876%" y="831.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.43%)</title><rect x="11.2376%" y="805" width="0.4267%" height="15" fill="rgb(229,68,48)"/><text x="11.4876%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.43%)</title><rect x="11.2376%" y="789" width="0.4267%" height="15" fill="rgb(252,8,32)"/><text x="11.4876%" y="799.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.43%)</title><rect x="11.2376%" y="773" width="0.4267%" height="15" fill="rgb(223,20,43)"/><text x="11.4876%" y="783.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.43%)</title><rect x="11.2376%" y="757" width="0.4267%" height="15" fill="rgb(229,81,49)"/><text x="11.4876%" y="767.50"></text></g><g><title>lobsters::main (3 samples, 0.43%)</title><rect x="11.2376%" y="741" width="0.4267%" height="15" fill="rgb(236,28,36)"/><text x="11.4876%" y="751.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.43%)</title><rect x="11.2376%" y="725" width="0.4267%" height="15" fill="rgb(249,185,26)"/><text x="11.4876%" y="735.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (3 samples, 0.43%)</title><rect x="11.2376%" y="709" width="0.4267%" height="15" fill="rgb(249,174,33)"/><text x="11.4876%" y="719.50"></text></g><g><title>mysql::conn::Conn::next_text (3 samples, 0.43%)</title><rect x="11.2376%" y="693" width="0.4267%" height="15" fill="rgb(233,201,37)"/><text x="11.4876%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (3 samples, 0.43%)</title><rect x="11.2376%" y="677" width="0.4267%" height="15" fill="rgb(221,78,26)"/><text x="11.4876%" y="687.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.14%)</title><rect x="11.6643%" y="869" width="0.1422%" height="15" fill="rgb(250,127,30)"/><text x="11.9143%" y="879.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (2 samples, 0.28%)</title><rect x="11.8065%" y="869" width="0.2845%" height="15" fill="rgb(230,49,44)"/><text x="12.0565%" y="879.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.14%)</title><rect x="12.0910%" y="869" width="0.1422%" height="15" fill="rgb(229,67,23)"/><text x="12.3410%" y="879.50"></text></g><g><title>mysql_common::value::read_text_value (1 samples, 0.14%)</title><rect x="12.2333%" y="869" width="0.1422%" height="15" fill="rgb(249,83,47)"/><text x="12.4833%" y="879.50"></text></g><g><title>mysql_common::value::read_text_values (1 samples, 0.14%)</title><rect x="12.3755%" y="869" width="0.1422%" height="15" fill="rgb(215,43,3)"/><text x="12.6255%" y="879.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.14%)</title><rect x="12.5178%" y="869" width="0.1422%" height="15" fill="rgb(238,154,13)"/><text x="12.7678%" y="879.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.14%)</title><rect x="12.5178%" y="853" width="0.1422%" height="15" fill="rgb(219,56,2)"/><text x="12.7678%" y="863.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.14%)</title><rect x="12.5178%" y="837" width="0.1422%" height="15" fill="rgb(233,0,4)"/><text x="12.7678%" y="847.50"></text></g><g><title>regex::compile::Compiler::c_repeat_range (1 samples, 0.14%)</title><rect x="12.5178%" y="821" width="0.1422%" height="15" fill="rgb(235,30,7)"/><text x="12.7678%" y="831.50"></text></g><g><title>regex::compile::Compiler::c_class (1 samples, 0.14%)</title><rect x="12.5178%" y="805" width="0.1422%" height="15" fill="rgb(250,79,13)"/><text x="12.7678%" y="815.50"></text></g><g><title>page_fault (1 samples, 0.14%)</title><rect x="12.5178%" y="789" width="0.1422%" height="15" fill="rgb(211,146,34)"/><text x="12.7678%" y="799.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.14%)</title><rect x="12.5178%" y="773" width="0.1422%" height="15" fill="rgb(228,22,38)"/><text x="12.7678%" y="783.50"></text></g><g><title>handle_mm_fault (1 samples, 0.14%)</title><rect x="12.5178%" y="757" width="0.1422%" height="15" fill="rgb(235,168,5)"/><text x="12.7678%" y="767.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.14%)</title><rect x="12.5178%" y="741" width="0.1422%" height="15" fill="rgb(221,155,16)"/><text x="12.7678%" y="751.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.43%)</title><rect x="12.6600%" y="869" width="0.4267%" height="15" fill="rgb(215,215,53)"/><text x="12.9100%" y="879.50"></text></g><g><title>mysql::conn::Conn::handle_ok (4 samples, 0.57%)</title><rect x="13.0868%" y="693" width="0.5690%" height="15" fill="rgb(223,4,10)"/><text x="13.3368%" y="703.50"></text></g><g><title>mysql_common::packets::OkPacket::into_owned (2 samples, 0.28%)</title><rect x="13.3713%" y="677" width="0.2845%" height="15" fill="rgb(234,103,6)"/><text x="13.6213%" y="687.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.28%)</title><rect x="13.7980%" y="661" width="0.2845%" height="15" fill="rgb(227,97,0)"/><text x="14.0480%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.57%)</title><rect x="13.6558%" y="677" width="0.5690%" height="15" fill="rgb(234,150,53)"/><text x="13.9058%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="14.0825%" y="661" width="0.1422%" height="15" fill="rgb(228,201,54)"/><text x="14.3325%" y="671.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.85%)</title><rect x="14.2248%" y="677" width="0.8535%" height="15" fill="rgb(222,22,37)"/><text x="14.4748%" y="687.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (2 samples, 0.28%)</title><rect x="14.7937%" y="661" width="0.2845%" height="15" fill="rgb(237,53,32)"/><text x="15.0437%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (12 samples, 1.71%)</title><rect x="13.6558%" y="693" width="1.7070%" height="15" fill="rgb(233,25,53)"/><text x="13.9058%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.28%)</title><rect x="15.0782%" y="677" width="0.2845%" height="15" fill="rgb(210,40,34)"/><text x="15.3282%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 2.56%)</title><rect x="13.0868%" y="741" width="2.5605%" height="15" fill="rgb(241,220,44)"/><text x="13.3368%" y="751.50">&lt;m..</text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (18 samples, 2.56%)</title><rect x="13.0868%" y="725" width="2.5605%" height="15" fill="rgb(235,28,35)"/><text x="13.3368%" y="735.50">&lt;m..</text></g><g><title>mysql::conn::Conn::next_text (18 samples, 2.56%)</title><rect x="13.0868%" y="709" width="2.5605%" height="15" fill="rgb(210,56,17)"/><text x="13.3368%" y="719.50">my..</text></g><g><title>mysql_common::value::read_text_values (2 samples, 0.28%)</title><rect x="15.3627%" y="693" width="0.2845%" height="15" fill="rgb(224,130,29)"/><text x="15.6127%" y="703.50"></text></g><g><title>mysql_common::value::read_text_value (2 samples, 0.28%)</title><rect x="15.3627%" y="677" width="0.2845%" height="15" fill="rgb(235,212,8)"/><text x="15.6127%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="15.5050%" y="661" width="0.1422%" height="15" fill="rgb(223,33,50)"/><text x="15.7550%" y="671.50"></text></g><g><title>do_dentry_open (1 samples, 0.14%)</title><rect x="15.6472%" y="549" width="0.1422%" height="15" fill="rgb(219,149,13)"/><text x="15.8972%" y="559.50"></text></g><g><title>file_ra_state_init (1 samples, 0.14%)</title><rect x="15.6472%" y="533" width="0.1422%" height="15" fill="rgb(250,156,29)"/><text x="15.8972%" y="543.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.28%)</title><rect x="15.6472%" y="741" width="0.2845%" height="15" fill="rgb(216,193,19)"/><text x="15.8972%" y="751.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.28%)</title><rect x="15.6472%" y="725" width="0.2845%" height="15" fill="rgb(216,135,14)"/><text x="15.8972%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.28%)</title><rect x="15.6472%" y="709" width="0.2845%" height="15" fill="rgb(241,47,5)"/><text x="15.8972%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.28%)</title><rect x="15.6472%" y="693" width="0.2845%" height="15" fill="rgb(233,42,35)"/><text x="15.8972%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.28%)</title><rect x="15.6472%" y="677" width="0.2845%" height="15" fill="rgb(231,13,6)"/><text x="15.8972%" y="687.50"></text></g><g><title>__GI___openat (2 samples, 0.28%)</title><rect x="15.6472%" y="661" width="0.2845%" height="15" fill="rgb(207,181,40)"/><text x="15.8972%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.28%)</title><rect x="15.6472%" y="645" width="0.2845%" height="15" fill="rgb(254,173,49)"/><text x="15.8972%" y="655.50"></text></g><g><title>do_syscall_64 (2 samples, 0.28%)</title><rect x="15.6472%" y="629" width="0.2845%" height="15" fill="rgb(221,1,38)"/><text x="15.8972%" y="639.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.28%)</title><rect x="15.6472%" y="613" width="0.2845%" height="15" fill="rgb(206,124,46)"/><text x="15.8972%" y="623.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.28%)</title><rect x="15.6472%" y="597" width="0.2845%" height="15" fill="rgb(249,21,11)"/><text x="15.8972%" y="607.50"></text></g><g><title>do_filp_open (2 samples, 0.28%)</title><rect x="15.6472%" y="581" width="0.2845%" height="15" fill="rgb(222,201,40)"/><text x="15.8972%" y="591.50"></text></g><g><title>path_openat (2 samples, 0.28%)</title><rect x="15.6472%" y="565" width="0.2845%" height="15" fill="rgb(235,61,29)"/><text x="15.8972%" y="575.50"></text></g><g><title>link_path_walk (1 samples, 0.14%)</title><rect x="15.7895%" y="549" width="0.1422%" height="15" fill="rgb(219,207,3)"/><text x="16.0395%" y="559.50"></text></g><g><title>inode_permission.part.0 (1 samples, 0.14%)</title><rect x="15.7895%" y="533" width="0.1422%" height="15" fill="rgb(222,56,46)"/><text x="16.0395%" y="543.50"></text></g><g><title>generic_permission (1 samples, 0.14%)</title><rect x="15.7895%" y="517" width="0.1422%" height="15" fill="rgb(239,76,54)"/><text x="16.0395%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.43%)</title><rect x="15.9317%" y="693" width="0.4267%" height="15" fill="rgb(231,124,27)"/><text x="16.1817%" y="703.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.28%)</title><rect x="16.0740%" y="677" width="0.2845%" height="15" fill="rgb(249,195,6)"/><text x="16.3240%" y="687.50"></text></g><g><title>skb_release_data (2 samples, 0.28%)</title><rect x="18.6344%" y="469" width="0.2845%" height="15" fill="rgb(237,174,47)"/><text x="18.8844%" y="479.50"></text></g><g><title>dst_release (3 samples, 0.43%)</title><rect x="18.9189%" y="453" width="0.4267%" height="15" fill="rgb(206,201,31)"/><text x="19.1689%" y="463.50"></text></g><g><title>__kfree_skb (6 samples, 0.85%)</title><rect x="18.6344%" y="485" width="0.8535%" height="15" fill="rgb(231,57,52)"/><text x="18.8844%" y="495.50"></text></g><g><title>skb_release_head_state (4 samples, 0.57%)</title><rect x="18.9189%" y="469" width="0.5690%" height="15" fill="rgb(248,177,22)"/><text x="19.1689%" y="479.50"></text></g><g><title>sock_rfree (1 samples, 0.14%)</title><rect x="19.3457%" y="453" width="0.1422%" height="15" fill="rgb(215,211,37)"/><text x="19.5957%" y="463.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.14%)</title><rect x="19.4879%" y="485" width="0.1422%" height="15" fill="rgb(241,128,51)"/><text x="19.7379%" y="495.50"></text></g><g><title>kfree_skbmem (1 samples, 0.14%)</title><rect x="19.6302%" y="485" width="0.1422%" height="15" fill="rgb(227,165,31)"/><text x="19.8802%" y="495.50"></text></g><g><title>release_sock (1 samples, 0.14%)</title><rect x="19.7724%" y="485" width="0.1422%" height="15" fill="rgb(228,167,24)"/><text x="20.0224%" y="495.50"></text></g><g><title>tcp_release_cb (1 samples, 0.14%)</title><rect x="19.7724%" y="469" width="0.1422%" height="15" fill="rgb(228,143,12)"/><text x="20.0224%" y="479.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.28%)</title><rect x="20.0569%" y="469" width="0.2845%" height="15" fill="rgb(249,149,8)"/><text x="20.3069%" y="479.50"></text></g><g><title>preempt_count_add (1 samples, 0.14%)</title><rect x="20.1991%" y="453" width="0.1422%" height="15" fill="rgb(243,35,44)"/><text x="20.4491%" y="463.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.14%)</title><rect x="20.3414%" y="469" width="0.1422%" height="15" fill="rgb(246,89,9)"/><text x="20.5914%" y="479.50"></text></g><g><title>release_sock (1 samples, 0.14%)</title><rect x="20.4836%" y="469" width="0.1422%" height="15" fill="rgb(233,213,13)"/><text x="20.7336%" y="479.50"></text></g><g><title>_raw_spin_lock_bh (1 samples, 0.14%)</title><rect x="20.4836%" y="453" width="0.1422%" height="15" fill="rgb(233,141,41)"/><text x="20.7336%" y="463.50"></text></g><g><title>remove_wait_queue (2 samples, 0.28%)</title><rect x="20.6259%" y="469" width="0.2845%" height="15" fill="rgb(239,167,4)"/><text x="20.8759%" y="479.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.28%)</title><rect x="20.6259%" y="453" width="0.2845%" height="15" fill="rgb(209,217,16)"/><text x="20.8759%" y="463.50"></text></g><g><title>preempt_count_add (1 samples, 0.14%)</title><rect x="20.7681%" y="437" width="0.1422%" height="15" fill="rgb(219,88,35)"/><text x="21.0181%" y="447.50"></text></g><g><title>in_lock_functions (1 samples, 0.14%)</title><rect x="20.7681%" y="421" width="0.1422%" height="15" fill="rgb(220,193,23)"/><text x="21.0181%" y="431.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.28%)</title><rect x="22.1906%" y="389" width="0.2845%" height="15" fill="rgb(230,90,52)"/><text x="22.4406%" y="399.50"></text></g><g><title>__perf_event_task_sched_out (7 samples, 1.00%)</title><rect x="21.9061%" y="405" width="0.9957%" height="15" fill="rgb(252,106,19)"/><text x="22.1561%" y="415.50"></text></g><g><title>ctx_sched_out (3 samples, 0.43%)</title><rect x="22.4751%" y="389" width="0.4267%" height="15" fill="rgb(206,74,20)"/><text x="22.7251%" y="399.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.14%)</title><rect x="22.7596%" y="373" width="0.1422%" height="15" fill="rgb(230,138,44)"/><text x="23.0096%" y="383.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.28%)</title><rect x="22.9018%" y="405" width="0.2845%" height="15" fill="rgb(235,182,43)"/><text x="23.1518%" y="415.50"></text></g><g><title>preempt_count_add (2 samples, 0.28%)</title><rect x="22.9018%" y="389" width="0.2845%" height="15" fill="rgb(242,16,51)"/><text x="23.1518%" y="399.50"></text></g><g><title>account_entity_dequeue (1 samples, 0.14%)</title><rect x="23.4708%" y="373" width="0.1422%" height="15" fill="rgb(248,9,4)"/><text x="23.7208%" y="383.50"></text></g><g><title>update_cfs_group (1 samples, 0.14%)</title><rect x="23.6131%" y="373" width="0.1422%" height="15" fill="rgb(210,31,22)"/><text x="23.8631%" y="383.50"></text></g><g><title>update_curr (1 samples, 0.14%)</title><rect x="23.7553%" y="373" width="0.1422%" height="15" fill="rgb(239,54,39)"/><text x="24.0053%" y="383.50"></text></g><g><title>__cgroup_account_cputime (1 samples, 0.14%)</title><rect x="23.7553%" y="357" width="0.1422%" height="15" fill="rgb(230,99,41)"/><text x="24.0053%" y="367.50"></text></g><g><title>debug_smp_processor_id (1 samples, 0.14%)</title><rect x="23.7553%" y="341" width="0.1422%" height="15" fill="rgb(253,106,12)"/><text x="24.0053%" y="351.50"></text></g><g><title>dequeue_task_fair (6 samples, 0.85%)</title><rect x="23.1863%" y="405" width="0.8535%" height="15" fill="rgb(213,46,41)"/><text x="23.4363%" y="415.50"></text></g><g><title>dequeue_entity (4 samples, 0.57%)</title><rect x="23.4708%" y="389" width="0.5690%" height="15" fill="rgb(215,133,35)"/><text x="23.7208%" y="399.50"></text></g><g><title>update_load_avg (1 samples, 0.14%)</title><rect x="23.8976%" y="373" width="0.1422%" height="15" fill="rgb(213,28,5)"/><text x="24.1476%" y="383.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.14%)</title><rect x="23.8976%" y="357" width="0.1422%" height="15" fill="rgb(215,77,49)"/><text x="24.1476%" y="367.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.14%)</title><rect x="24.0398%" y="373" width="0.1422%" height="15" fill="rgb(248,100,22)"/><text x="24.2898%" y="383.50"></text></g><g><title>finish_task_switch (2 samples, 0.28%)</title><rect x="24.0398%" y="405" width="0.2845%" height="15" fill="rgb(208,67,9)"/><text x="24.2898%" y="415.50"></text></g><g><title>__perf_event_task_sched_in (2 samples, 0.28%)</title><rect x="24.0398%" y="389" width="0.2845%" height="15" fill="rgb(219,133,21)"/><text x="24.2898%" y="399.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.14%)</title><rect x="24.1821%" y="373" width="0.1422%" height="15" fill="rgb(246,46,29)"/><text x="24.4321%" y="383.50"></text></g><g><title>preempt_count_sub (1 samples, 0.14%)</title><rect x="24.1821%" y="357" width="0.1422%" height="15" fill="rgb(246,185,52)"/><text x="24.4321%" y="367.50"></text></g><g><title>__msecs_to_jiffies (1 samples, 0.14%)</title><rect x="24.4666%" y="373" width="0.1422%" height="15" fill="rgb(252,136,11)"/><text x="24.7166%" y="383.50"></text></g><g><title>pick_next_task_fair (3 samples, 0.43%)</title><rect x="24.3243%" y="405" width="0.4267%" height="15" fill="rgb(219,138,53)"/><text x="24.5743%" y="415.50"></text></g><g><title>newidle_balance (3 samples, 0.43%)</title><rect x="24.3243%" y="389" width="0.4267%" height="15" fill="rgb(211,51,23)"/><text x="24.5743%" y="399.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.14%)</title><rect x="24.6088%" y="373" width="0.1422%" height="15" fill="rgb(247,221,28)"/><text x="24.8588%" y="383.50"></text></g><g><title>pick_next_task_idle (2 samples, 0.28%)</title><rect x="24.7511%" y="405" width="0.2845%" height="15" fill="rgb(251,222,45)"/><text x="25.0011%" y="415.50"></text></g><g><title>__update_idle_core (1 samples, 0.14%)</title><rect x="24.8933%" y="389" width="0.1422%" height="15" fill="rgb(217,162,53)"/><text x="25.1433%" y="399.50"></text></g><g><title>psi_task_change (6 samples, 0.85%)</title><rect x="25.0356%" y="405" width="0.8535%" height="15" fill="rgb(229,93,14)"/><text x="25.2856%" y="415.50"></text></g><g><title>psi_group_change (6 samples, 0.85%)</title><rect x="25.0356%" y="389" width="0.8535%" height="15" fill="rgb(209,67,49)"/><text x="25.2856%" y="399.50"></text></g><g><title>record_times (2 samples, 0.28%)</title><rect x="25.6046%" y="373" width="0.2845%" height="15" fill="rgb(213,87,29)"/><text x="25.8546%" y="383.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.28%)</title><rect x="25.6046%" y="357" width="0.2845%" height="15" fill="rgb(205,151,52)"/><text x="25.8546%" y="367.50"></text></g><g><title>sched_clock (2 samples, 0.28%)</title><rect x="25.6046%" y="341" width="0.2845%" height="15" fill="rgb(253,215,39)"/><text x="25.8546%" y="351.50"></text></g><g><title>native_sched_clock (1 samples, 0.14%)</title><rect x="25.7468%" y="325" width="0.1422%" height="15" fill="rgb(221,220,41)"/><text x="25.9968%" y="335.50"></text></g><g><title>rcu_note_context_switch (2 samples, 0.28%)</title><rect x="25.8890%" y="405" width="0.2845%" height="15" fill="rgb(218,133,21)"/><text x="26.1390%" y="415.50"></text></g><g><title>rcu_preempt_deferred_qs (1 samples, 0.14%)</title><rect x="26.0313%" y="389" width="0.1422%" height="15" fill="rgb(221,193,43)"/><text x="26.2813%" y="399.50"></text></g><g><title>uclamp_rq_dec_id (5 samples, 0.71%)</title><rect x="26.1735%" y="405" width="0.7112%" height="15" fill="rgb(240,128,52)"/><text x="26.4235%" y="415.50"></text></g><g><title>sk_wait_data (52 samples, 7.40%)</title><rect x="19.9147%" y="485" width="7.3969%" height="15" fill="rgb(253,114,12)"/><text x="20.1647%" y="495.50">sk_wait_da..</text></g><g><title>wait_woken (45 samples, 6.40%)</title><rect x="20.9104%" y="469" width="6.4011%" height="15" fill="rgb(215,223,47)"/><text x="21.1604%" y="479.50">wait_wok..</text></g><g><title>schedule_timeout (42 samples, 5.97%)</title><rect x="21.3371%" y="453" width="5.9744%" height="15" fill="rgb(248,225,23)"/><text x="21.5871%" y="463.50">schedule..</text></g><g><title>schedule (42 samples, 5.97%)</title><rect x="21.3371%" y="437" width="5.9744%" height="15" fill="rgb(250,108,0)"/><text x="21.5871%" y="447.50">schedule</text></g><g><title>__schedule (40 samples, 5.69%)</title><rect x="21.6216%" y="421" width="5.6899%" height="15" fill="rgb(228,208,7)"/><text x="21.8716%" y="431.50">__sched..</text></g><g><title>update_rq_clock (3 samples, 0.43%)</title><rect x="26.8848%" y="405" width="0.4267%" height="15" fill="rgb(244,45,10)"/><text x="27.1348%" y="415.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.14%)</title><rect x="27.1693%" y="389" width="0.1422%" height="15" fill="rgb(207,125,25)"/><text x="27.4193%" y="399.50"></text></g><g><title>_copy_to_iter (2 samples, 0.28%)</title><rect x="27.8805%" y="453" width="0.2845%" height="15" fill="rgb(210,195,18)"/><text x="28.1305%" y="463.50"></text></g><g><title>copy_user_enhanced_fast_string (1 samples, 0.14%)</title><rect x="28.0228%" y="437" width="0.1422%" height="15" fill="rgb(249,80,12)"/><text x="28.2728%" y="447.50"></text></g><g><title>inet_recvmsg (78 samples, 11.10%)</title><rect x="17.3542%" y="517" width="11.0953%" height="15" fill="rgb(221,65,9)"/><text x="17.6042%" y="527.50">inet_recvmsg</text></g><g><title>tcp_recvmsg (75 samples, 10.67%)</title><rect x="17.7809%" y="501" width="10.6686%" height="15" fill="rgb(235,49,36)"/><text x="18.0309%" y="511.50">tcp_recvmsg</text></g><g><title>skb_copy_datagram_iter (8 samples, 1.14%)</title><rect x="27.3115%" y="485" width="1.1380%" height="15" fill="rgb(225,32,20)"/><text x="27.5615%" y="495.50"></text></g><g><title>__skb_datagram_iter (7 samples, 1.00%)</title><rect x="27.4538%" y="469" width="0.9957%" height="15" fill="rgb(215,141,46)"/><text x="27.7038%" y="479.50"></text></g><g><title>simple_copy_to_iter (2 samples, 0.28%)</title><rect x="28.1650%" y="453" width="0.2845%" height="15" fill="rgb(250,160,47)"/><text x="28.4150%" y="463.50"></text></g><g><title>__check_object_size (2 samples, 0.28%)</title><rect x="28.1650%" y="437" width="0.2845%" height="15" fill="rgb(216,222,40)"/><text x="28.4150%" y="447.50"></text></g><g><title>__virt_addr_valid (1 samples, 0.14%)</title><rect x="28.3073%" y="421" width="0.1422%" height="15" fill="rgb(234,217,39)"/><text x="28.5573%" y="431.50"></text></g><g><title>sock_recvmsg (2 samples, 0.28%)</title><rect x="28.4495%" y="517" width="0.2845%" height="15" fill="rgb(207,178,40)"/><text x="28.6995%" y="527.50"></text></g><g><title>security_socket_recvmsg (1 samples, 0.14%)</title><rect x="28.5917%" y="501" width="0.1422%" height="15" fill="rgb(221,136,13)"/><text x="28.8417%" y="511.50"></text></g><g><title>__x64_sys_recvfrom (82 samples, 11.66%)</title><rect x="17.2119%" y="549" width="11.6643%" height="15" fill="rgb(249,199,10)"/><text x="17.4619%" y="559.50">__x64_sys_recvfrom</text></g><g><title>__sys_recvfrom (82 samples, 11.66%)</title><rect x="17.2119%" y="533" width="11.6643%" height="15" fill="rgb(249,222,13)"/><text x="17.4619%" y="543.50">__sys_recvfrom</text></g><g><title>sockfd_lookup_light (1 samples, 0.14%)</title><rect x="28.7340%" y="517" width="0.1422%" height="15" fill="rgb(244,185,38)"/><text x="28.9840%" y="527.50"></text></g><g><title>__fget_light (1 samples, 0.14%)</title><rect x="28.7340%" y="501" width="0.1422%" height="15" fill="rgb(236,202,9)"/><text x="28.9840%" y="511.50"></text></g><g><title>syscall_slow_exit_work (1 samples, 0.14%)</title><rect x="28.8762%" y="549" width="0.1422%" height="15" fill="rgb(250,229,37)"/><text x="29.1262%" y="559.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.14%)</title><rect x="28.8762%" y="533" width="0.1422%" height="15" fill="rgb(206,174,23)"/><text x="29.1262%" y="543.50"></text></g><g><title>path_put (1 samples, 0.14%)</title><rect x="28.8762%" y="517" width="0.1422%" height="15" fill="rgb(211,33,43)"/><text x="29.1262%" y="527.50"></text></g><g><title>dput (1 samples, 0.14%)</title><rect x="28.8762%" y="501" width="0.1422%" height="15" fill="rgb(245,58,50)"/><text x="29.1262%" y="511.50"></text></g><g><title>do_syscall_64 (84 samples, 11.95%)</title><rect x="17.2119%" y="565" width="11.9488%" height="15" fill="rgb(244,68,36)"/><text x="17.4619%" y="575.50">do_syscall_64</text></g><g><title>syscall_trace_enter (1 samples, 0.14%)</title><rect x="29.0185%" y="549" width="0.1422%" height="15" fill="rgb(232,229,15)"/><text x="29.2685%" y="559.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.14%)</title><rect x="29.0185%" y="533" width="0.1422%" height="15" fill="rgb(254,30,23)"/><text x="29.2685%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (97 samples, 13.80%)</title><rect x="16.5007%" y="581" width="13.7980%" height="15" fill="rgb(235,160,14)"/><text x="16.7507%" y="591.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (8 samples, 1.14%)</title><rect x="29.1607%" y="565" width="1.1380%" height="15" fill="rgb(212,155,44)"/><text x="29.4107%" y="575.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (100 samples, 14.22%)</title><rect x="16.3585%" y="677" width="14.2248%" height="15" fill="rgb(226,2,50)"/><text x="16.6085%" y="687.50">&lt;std::io::buffered::Bu..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (99 samples, 14.08%)</title><rect x="16.5007%" y="661" width="14.0825%" height="15" fill="rgb(234,177,6)"/><text x="16.7507%" y="671.50">&lt;std::net::tcp::TcpSt..</text></g><g><title>std::sys_common::net::TcpStream::read (99 samples, 14.08%)</title><rect x="16.5007%" y="645" width="14.0825%" height="15" fill="rgb(217,24,9)"/><text x="16.7507%" y="655.50">std::sys_common::net:..</text></g><g><title>std::sys::unix::net::Socket::read (99 samples, 14.08%)</title><rect x="16.5007%" y="629" width="14.0825%" height="15" fill="rgb(220,13,46)"/><text x="16.7507%" y="639.50">std::sys::unix::net::..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (99 samples, 14.08%)</title><rect x="16.5007%" y="613" width="14.0825%" height="15" fill="rgb(239,221,27)"/><text x="16.7507%" y="623.50">std::sys::unix::net::..</text></g><g><title>__libc_recv (99 samples, 14.08%)</title><rect x="16.5007%" y="597" width="14.0825%" height="15" fill="rgb(222,198,25)"/><text x="16.7507%" y="607.50">__libc_recv</text></g><g><title>syscall_return_via_sysret (2 samples, 0.28%)</title><rect x="30.2987%" y="581" width="0.2845%" height="15" fill="rgb(211,99,13)"/><text x="30.5487%" y="591.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 14.65%)</title><rect x="16.3585%" y="693" width="14.6515%" height="15" fill="rgb(232,111,31)"/><text x="16.6085%" y="703.50">&lt;mysql_common::proto::..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (3 samples, 0.43%)</title><rect x="30.5832%" y="677" width="0.4267%" height="15" fill="rgb(245,82,37)"/><text x="30.8332%" y="687.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.14%)</title><rect x="30.8677%" y="661" width="0.1422%" height="15" fill="rgb(227,149,46)"/><text x="31.1177%" y="671.50"></text></g><g><title>[unknown] (196 samples, 27.88%)</title><rect x="3.5562%" y="885" width="27.8805%" height="15" fill="rgb(218,36,50)"/><text x="3.8062%" y="895.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (129 samples, 18.35%)</title><rect x="13.0868%" y="869" width="18.3499%" height="15" fill="rgb(226,80,48)"/><text x="13.3368%" y="879.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (129 samples, 18.35%)</title><rect x="13.0868%" y="853" width="18.3499%" height="15" fill="rgb(238,224,15)"/><text x="13.3368%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (129 samples, 18.35%)</title><rect x="13.0868%" y="837" width="18.3499%" height="15" fill="rgb(241,136,10)"/><text x="13.3368%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (129 samples, 18.35%)</title><rect x="13.0868%" y="821" width="18.3499%" height="15" fill="rgb(208,32,45)"/><text x="13.3368%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (129 samples, 18.35%)</title><rect x="13.0868%" y="805" width="18.3499%" height="15" fill="rgb(207,135,9)"/><text x="13.3368%" y="815.50">core::ops::function::impls::&lt;..</text></g><g><title>std::rt::lang_start::_{{closure}} (129 samples, 18.35%)</title><rect x="13.0868%" y="789" width="18.3499%" height="15" fill="rgb(206,86,44)"/><text x="13.3368%" y="799.50">std::rt::lang_start::_{{closu..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (129 samples, 18.35%)</title><rect x="13.0868%" y="773" width="18.3499%" height="15" fill="rgb(245,177,15)"/><text x="13.3368%" y="783.50">std::sys_common::backtrace::_..</text></g><g><title>lobsters::main (129 samples, 18.35%)</title><rect x="13.0868%" y="757" width="18.3499%" height="15" fill="rgb(206,64,50)"/><text x="13.3368%" y="767.50">lobsters::main</text></g><g><title>mysql::conn::Conn::_query (109 samples, 15.50%)</title><rect x="15.9317%" y="741" width="15.5050%" height="15" fill="rgb(234,36,40)"/><text x="16.1817%" y="751.50">mysql::conn::Conn::_query</text></g><g><title>mysql::conn::Conn::handle_result_set (109 samples, 15.50%)</title><rect x="15.9317%" y="725" width="15.5050%" height="15" fill="rgb(213,64,8)"/><text x="16.1817%" y="735.50">mysql::conn::Conn::handl..</text></g><g><title>mysql::conn::Conn::read_packet (109 samples, 15.50%)</title><rect x="15.9317%" y="709" width="15.5050%" height="15" fill="rgb(210,75,36)"/><text x="16.1817%" y="719.50">mysql::conn::Conn::read_..</text></g><g><title>_int_free (3 samples, 0.43%)</title><rect x="31.0100%" y="693" width="0.4267%" height="15" fill="rgb(229,88,21)"/><text x="31.2600%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (5 samples, 0.71%)</title><rect x="32.4324%" y="693" width="0.7112%" height="15" fill="rgb(252,204,47)"/><text x="32.6824%" y="703.50"></text></g><g><title>mysql::conn::Conn::next_text (5 samples, 0.71%)</title><rect x="32.4324%" y="677" width="0.7112%" height="15" fill="rgb(208,77,27)"/><text x="32.6824%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.14%)</title><rect x="33.0014%" y="661" width="0.1422%" height="15" fill="rgb(221,76,26)"/><text x="33.2514%" y="671.50"></text></g><g><title>__GI___libc_free (2 samples, 0.28%)</title><rect x="33.1437%" y="693" width="0.2845%" height="15" fill="rgb(225,139,18)"/><text x="33.3937%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.28%)</title><rect x="33.4282%" y="693" width="0.2845%" height="15" fill="rgb(230,137,11)"/><text x="33.6782%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.14%)</title><rect x="33.7127%" y="693" width="0.1422%" height="15" fill="rgb(212,28,1)"/><text x="33.9627%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 2.84%)</title><rect x="31.7212%" y="709" width="2.8450%" height="15" fill="rgb(248,164,17)"/><text x="31.9712%" y="719.50">&lt;m..</text></g><g><title>mysql_common::row::new_row (5 samples, 0.71%)</title><rect x="33.8549%" y="693" width="0.7112%" height="15" fill="rgb(222,171,42)"/><text x="34.1049%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.57%)</title><rect x="33.9972%" y="677" width="0.5690%" height="15" fill="rgb(243,84,45)"/><text x="34.2472%" y="687.50"></text></g><g><title>apic_timer_interrupt (1 samples, 0.14%)</title><rect x="34.4239%" y="661" width="0.1422%" height="15" fill="rgb(252,49,23)"/><text x="34.6739%" y="671.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.14%)</title><rect x="34.4239%" y="645" width="0.1422%" height="15" fill="rgb(215,19,7)"/><text x="34.6739%" y="655.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.14%)</title><rect x="34.4239%" y="629" width="0.1422%" height="15" fill="rgb(238,81,41)"/><text x="34.6739%" y="639.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.14%)</title><rect x="34.4239%" y="613" width="0.1422%" height="15" fill="rgb(210,199,37)"/><text x="34.6739%" y="623.50"></text></g><g><title>tick_sched_timer (1 samples, 0.14%)</title><rect x="34.4239%" y="597" width="0.1422%" height="15" fill="rgb(244,192,49)"/><text x="34.6739%" y="607.50"></text></g><g><title>tick_sched_handle (1 samples, 0.14%)</title><rect x="34.4239%" y="581" width="0.1422%" height="15" fill="rgb(226,211,11)"/><text x="34.6739%" y="591.50"></text></g><g><title>update_process_times (1 samples, 0.14%)</title><rect x="34.4239%" y="565" width="0.1422%" height="15" fill="rgb(236,162,54)"/><text x="34.6739%" y="575.50"></text></g><g><title>scheduler_tick (1 samples, 0.14%)</title><rect x="34.4239%" y="549" width="0.1422%" height="15" fill="rgb(220,229,9)"/><text x="34.6739%" y="559.50"></text></g><g><title>task_tick_fair (1 samples, 0.14%)</title><rect x="34.4239%" y="533" width="0.1422%" height="15" fill="rgb(250,87,22)"/><text x="34.6739%" y="543.50"></text></g><g><title>update_curr (1 samples, 0.14%)</title><rect x="34.4239%" y="517" width="0.1422%" height="15" fill="rgb(239,43,17)"/><text x="34.6739%" y="527.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (2 samples, 0.28%)</title><rect x="34.5661%" y="709" width="0.2845%" height="15" fill="rgb(231,177,25)"/><text x="34.8161%" y="719.50"></text></g><g><title>&lt;rand_hc::hc128::Hc128Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.14%)</title><rect x="34.7084%" y="693" width="0.1422%" height="15" fill="rgb(219,179,1)"/><text x="34.9584%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.14%)</title><rect x="34.8506%" y="709" width="0.1422%" height="15" fill="rgb(238,219,53)"/><text x="35.1006%" y="719.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.14%)</title><rect x="34.9929%" y="693" width="0.1422%" height="15" fill="rgb(232,167,36)"/><text x="35.2429%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.14%)</title><rect x="34.9929%" y="677" width="0.1422%" height="15" fill="rgb(244,19,51)"/><text x="35.2429%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.14%)</title><rect x="34.9929%" y="661" width="0.1422%" height="15" fill="rgb(224,6,22)"/><text x="35.2429%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.14%)</title><rect x="34.9929%" y="645" width="0.1422%" height="15" fill="rgb(224,145,5)"/><text x="35.2429%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.14%)</title><rect x="34.9929%" y="629" width="0.1422%" height="15" fill="rgb(234,130,49)"/><text x="35.2429%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.14%)</title><rect x="34.9929%" y="613" width="0.1422%" height="15" fill="rgb(254,6,2)"/><text x="35.2429%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.14%)</title><rect x="34.9929%" y="597" width="0.1422%" height="15" fill="rgb(208,96,46)"/><text x="35.2429%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.14%)</title><rect x="34.9929%" y="581" width="0.1422%" height="15" fill="rgb(239,3,39)"/><text x="35.2429%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.14%)</title><rect x="34.9929%" y="565" width="0.1422%" height="15" fill="rgb(233,210,1)"/><text x="35.2429%" y="575.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.14%)</title><rect x="35.1351%" y="693" width="0.1422%" height="15" fill="rgb(244,137,37)"/><text x="35.3851%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.14%)</title><rect x="35.1351%" y="677" width="0.1422%" height="15" fill="rgb(240,136,2)"/><text x="35.3851%" y="687.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.14%)</title><rect x="35.1351%" y="661" width="0.1422%" height="15" fill="rgb(239,18,37)"/><text x="35.3851%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.14%)</title><rect x="35.1351%" y="645" width="0.1422%" height="15" fill="rgb(218,185,22)"/><text x="35.3851%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.14%)</title><rect x="35.1351%" y="629" width="0.1422%" height="15" fill="rgb(225,218,4)"/><text x="35.3851%" y="639.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (1 samples, 0.14%)</title><rect x="35.1351%" y="613" width="0.1422%" height="15" fill="rgb(230,182,32)"/><text x="35.3851%" y="623.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.14%)</title><rect x="35.1351%" y="597" width="0.1422%" height="15" fill="rgb(242,56,43)"/><text x="35.3851%" y="607.50"></text></g><g><title>&lt;usize as core::ops::arith::Add&gt;::add (1 samples, 0.14%)</title><rect x="35.1351%" y="581" width="0.1422%" height="15" fill="rgb(233,99,24)"/><text x="35.3851%" y="591.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.43%)</title><rect x="34.9929%" y="709" width="0.4267%" height="15" fill="rgb(234,209,42)"/><text x="35.2429%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.14%)</title><rect x="35.2774%" y="693" width="0.1422%" height="15" fill="rgb(227,7,12)"/><text x="35.5274%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.14%)</title><rect x="35.2774%" y="677" width="0.1422%" height="15" fill="rgb(245,203,43)"/><text x="35.5274%" y="687.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.14%)</title><rect x="35.2774%" y="661" width="0.1422%" height="15" fill="rgb(238,205,33)"/><text x="35.5274%" y="671.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.14%)</title><rect x="35.2774%" y="645" width="0.1422%" height="15" fill="rgb(231,56,7)"/><text x="35.5274%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.14%)</title><rect x="35.2774%" y="629" width="0.1422%" height="15" fill="rgb(244,186,29)"/><text x="35.5274%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.14%)</title><rect x="35.4196%" y="709" width="0.1422%" height="15" fill="rgb(234,111,31)"/><text x="35.6696%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.14%)</title><rect x="35.4196%" y="693" width="0.1422%" height="15" fill="rgb(241,149,10)"/><text x="35.6696%" y="703.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="35.4196%" y="677" width="0.1422%" height="15" fill="rgb(249,206,44)"/><text x="35.6696%" y="687.50"></text></g><g><title>__GI_munmap (1 samples, 0.14%)</title><rect x="35.4196%" y="661" width="0.1422%" height="15" fill="rgb(251,153,30)"/><text x="35.6696%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.14%)</title><rect x="35.4196%" y="645" width="0.1422%" height="15" fill="rgb(239,152,38)"/><text x="35.6696%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.14%)</title><rect x="35.4196%" y="629" width="0.1422%" height="15" fill="rgb(249,139,47)"/><text x="35.6696%" y="639.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.14%)</title><rect x="35.4196%" y="613" width="0.1422%" height="15" fill="rgb(244,64,35)"/><text x="35.6696%" y="623.50"></text></g><g><title>__vm_munmap (1 samples, 0.14%)</title><rect x="35.4196%" y="597" width="0.1422%" height="15" fill="rgb(216,46,15)"/><text x="35.6696%" y="607.50"></text></g><g><title>__do_munmap (1 samples, 0.14%)</title><rect x="35.4196%" y="581" width="0.1422%" height="15" fill="rgb(250,74,19)"/><text x="35.6696%" y="591.50"></text></g><g><title>unmap_region (1 samples, 0.14%)</title><rect x="35.4196%" y="565" width="0.1422%" height="15" fill="rgb(249,42,33)"/><text x="35.6696%" y="575.50"></text></g><g><title>unmap_vmas (1 samples, 0.14%)</title><rect x="35.4196%" y="549" width="0.1422%" height="15" fill="rgb(242,149,17)"/><text x="35.6696%" y="559.50"></text></g><g><title>unmap_page_range (1 samples, 0.14%)</title><rect x="35.4196%" y="533" width="0.1422%" height="15" fill="rgb(244,29,21)"/><text x="35.6696%" y="543.50"></text></g><g><title>core::slice::memchr::memchr_general_case (1 samples, 0.14%)</title><rect x="35.5619%" y="709" width="0.1422%" height="15" fill="rgb(220,130,37)"/><text x="35.8119%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.14%)</title><rect x="35.5619%" y="693" width="0.1422%" height="15" fill="rgb(211,67,2)"/><text x="35.8119%" y="703.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (1 samples, 0.14%)</title><rect x="35.5619%" y="677" width="0.1422%" height="15" fill="rgb(235,68,52)"/><text x="35.8119%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.43%)</title><rect x="35.8464%" y="629" width="0.4267%" height="15" fill="rgb(246,142,3)"/><text x="36.0964%" y="639.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.43%)</title><rect x="35.8464%" y="613" width="0.4267%" height="15" fill="rgb(241,25,7)"/><text x="36.0964%" y="623.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="36.1309%" y="597" width="0.1422%" height="15" fill="rgb(242,119,39)"/><text x="36.3809%" y="607.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.14%)</title><rect x="36.1309%" y="581" width="0.1422%" height="15" fill="rgb(241,98,45)"/><text x="36.3809%" y="591.50"></text></g><g><title>hwloc_bitmap_copy (1 samples, 0.14%)</title><rect x="36.1309%" y="565" width="0.1422%" height="15" fill="rgb(254,28,30)"/><text x="36.3809%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="36.1309%" y="549" width="0.1422%" height="15" fill="rgb(241,142,54)"/><text x="36.3809%" y="559.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (231 samples, 32.86%)</title><rect x="36.6999%" y="405" width="32.8592%" height="15" fill="rgb(222,85,15)"/><text x="36.9499%" y="415.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (229 samples, 32.57%)</title><rect x="36.9844%" y="389" width="32.5747%" height="15" fill="rgb(210,85,47)"/><text x="37.2344%" y="399.50">native_write_msr</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 33.29%)</title><rect x="36.4154%" y="533" width="33.2859%" height="15" fill="rgb(224,206,25)"/><text x="36.6654%" y="543.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (234 samples, 33.29%)</title><rect x="36.4154%" y="517" width="33.2859%" height="15" fill="rgb(243,201,19)"/><text x="36.6654%" y="527.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (234 samples, 33.29%)</title><rect x="36.4154%" y="501" width="33.2859%" height="15" fill="rgb(236,59,4)"/><text x="36.6654%" y="511.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (234 samples, 33.29%)</title><rect x="36.4154%" y="485" width="33.2859%" height="15" fill="rgb(254,179,45)"/><text x="36.6654%" y="495.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (234 samples, 33.29%)</title><rect x="36.4154%" y="469" width="33.2859%" height="15" fill="rgb(226,14,10)"/><text x="36.6654%" y="479.50">preempt_schedule_common</text></g><g><title>__schedule (234 samples, 33.29%)</title><rect x="36.4154%" y="453" width="33.2859%" height="15" fill="rgb(244,27,41)"/><text x="36.6654%" y="463.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 33.29%)</title><rect x="36.4154%" y="437" width="33.2859%" height="15" fill="rgb(235,35,32)"/><text x="36.6654%" y="447.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (234 samples, 33.29%)</title><rect x="36.4154%" y="421" width="33.2859%" height="15" fill="rgb(218,68,31)"/><text x="36.6654%" y="431.50">__perf_event_task_sched_in</text></g><g><title>_raw_spin_unlock (1 samples, 0.14%)</title><rect x="69.5590%" y="405" width="0.1422%" height="15" fill="rgb(207,120,37)"/><text x="69.8090%" y="415.50"></text></g><g><title>preempt_count_sub (1 samples, 0.14%)</title><rect x="69.5590%" y="389" width="0.1422%" height="15" fill="rgb(227,98,0)"/><text x="69.8090%" y="399.50"></text></g><g><title>do_syscall_64 (235 samples, 33.43%)</title><rect x="36.4154%" y="581" width="33.4282%" height="15" fill="rgb(207,7,3)"/><text x="36.6654%" y="591.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 33.43%)</title><rect x="36.4154%" y="565" width="33.4282%" height="15" fill="rgb(206,98,19)"/><text x="36.6654%" y="575.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (235 samples, 33.43%)</title><rect x="36.4154%" y="549" width="33.4282%" height="15" fill="rgb(217,5,26)"/><text x="36.6654%" y="559.50">sched_setaffinity</text></g><g><title>cpuset_cpus_allowed (1 samples, 0.14%)</title><rect x="69.7013%" y="533" width="0.1422%" height="15" fill="rgb(235,190,38)"/><text x="69.9513%" y="543.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.14%)</title><rect x="69.7013%" y="517" width="0.1422%" height="15" fill="rgb(247,86,24)"/><text x="69.9513%" y="527.50"></text></g><g><title>preempt_count_add (1 samples, 0.14%)</title><rect x="69.7013%" y="501" width="0.1422%" height="15" fill="rgb(205,101,16)"/><text x="69.9513%" y="511.50"></text></g><g><title>hwloc::Topology::new (242 samples, 34.42%)</title><rect x="35.7041%" y="709" width="34.4239%" height="15" fill="rgb(246,168,33)"/><text x="35.9541%" y="719.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (242 samples, 34.42%)</title><rect x="35.7041%" y="693" width="34.4239%" height="15" fill="rgb(231,114,1)"/><text x="35.9541%" y="703.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 34.42%)</title><rect x="35.7041%" y="677" width="34.4239%" height="15" fill="rgb(207,184,53)"/><text x="35.9541%" y="687.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 34.42%)</title><rect x="35.7041%" y="661" width="34.4239%" height="15" fill="rgb(224,95,51)"/><text x="35.9541%" y="671.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 34.42%)</title><rect x="35.7041%" y="645" width="34.4239%" height="15" fill="rgb(212,188,45)"/><text x="35.9541%" y="655.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (238 samples, 33.85%)</title><rect x="36.2731%" y="629" width="33.8549%" height="15" fill="rgb(223,154,38)"/><text x="36.5231%" y="639.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (238 samples, 33.85%)</title><rect x="36.2731%" y="613" width="33.8549%" height="15" fill="rgb(251,22,52)"/><text x="36.5231%" y="623.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (237 samples, 33.71%)</title><rect x="36.4154%" y="597" width="33.7127%" height="15" fill="rgb(229,209,22)"/><text x="36.6654%" y="607.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.28%)</title><rect x="69.8435%" y="581" width="0.2845%" height="15" fill="rgb(234,138,34)"/><text x="70.0935%" y="591.50"></text></g><g><title>lobsters::init_database (1 samples, 0.14%)</title><rect x="70.1280%" y="709" width="0.1422%" height="15" fill="rgb(212,95,11)"/><text x="70.3780%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.14%)</title><rect x="70.1280%" y="693" width="0.1422%" height="15" fill="rgb(240,179,47)"/><text x="70.3780%" y="703.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.14%)</title><rect x="70.1280%" y="677" width="0.1422%" height="15" fill="rgb(240,163,11)"/><text x="70.3780%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.14%)</title><rect x="70.6970%" y="677" width="0.1422%" height="15" fill="rgb(236,37,12)"/><text x="70.9470%" y="687.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (3 samples, 0.43%)</title><rect x="70.5548%" y="693" width="0.4267%" height="15" fill="rgb(232,164,16)"/><text x="70.8048%" y="703.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.14%)</title><rect x="70.8393%" y="677" width="0.1422%" height="15" fill="rgb(244,205,15)"/><text x="71.0893%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.14%)</title><rect x="70.8393%" y="661" width="0.1422%" height="15" fill="rgb(223,117,47)"/><text x="71.0893%" y="671.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (1 samples, 0.14%)</title><rect x="71.1238%" y="645" width="0.1422%" height="15" fill="rgb(244,107,35)"/><text x="71.3738%" y="655.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.14%)</title><rect x="71.1238%" y="629" width="0.1422%" height="15" fill="rgb(205,140,8)"/><text x="71.3738%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.14%)</title><rect x="71.2660%" y="645" width="0.1422%" height="15" fill="rgb(228,84,46)"/><text x="71.5160%" y="655.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::encode (4 samples, 0.57%)</title><rect x="70.9815%" y="677" width="0.5690%" height="15" fill="rgb(254,188,9)"/><text x="71.2315%" y="687.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::encode (4 samples, 0.57%)</title><rect x="70.9815%" y="661" width="0.5690%" height="15" fill="rgb(206,112,54)"/><text x="71.2315%" y="671.50"></text></g><g><title>__rust_dealloc (1 samples, 0.14%)</title><rect x="71.4083%" y="645" width="0.1422%" height="15" fill="rgb(216,84,49)"/><text x="71.6583%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.28%)</title><rect x="71.5505%" y="677" width="0.2845%" height="15" fill="rgb(214,194,35)"/><text x="71.8005%" y="687.50"></text></g><g><title>import_single_range (1 samples, 0.14%)</title><rect x="72.9730%" y="549" width="0.1422%" height="15" fill="rgb(249,28,3)"/><text x="73.2230%" y="559.50"></text></g><g><title>release_sock (1 samples, 0.14%)</title><rect x="73.2575%" y="517" width="0.1422%" height="15" fill="rgb(222,56,52)"/><text x="73.5075%" y="527.50"></text></g><g><title>tcp_release_cb (1 samples, 0.14%)</title><rect x="73.2575%" y="501" width="0.1422%" height="15" fill="rgb(245,217,50)"/><text x="73.5075%" y="511.50"></text></g><g><title>__ip_finish_output (2 samples, 0.28%)</title><rect x="75.3912%" y="421" width="0.2845%" height="15" fill="rgb(213,201,24)"/><text x="75.6412%" y="431.50"></text></g><g><title>ipv4_mtu (1 samples, 0.14%)</title><rect x="75.5334%" y="405" width="0.1422%" height="15" fill="rgb(248,116,28)"/><text x="75.7834%" y="415.50"></text></g><g><title>__this_cpu_preempt_check (1 samples, 0.14%)</title><rect x="76.3869%" y="325" width="0.1422%" height="15" fill="rgb(219,72,43)"/><text x="76.6369%" y="335.50"></text></g><g><title>enqueue_to_backlog (1 samples, 0.14%)</title><rect x="76.5292%" y="325" width="0.1422%" height="15" fill="rgb(209,138,14)"/><text x="76.7792%" y="335.50"></text></g><g><title>debug_smp_processor_id (1 samples, 0.14%)</title><rect x="76.5292%" y="309" width="0.1422%" height="15" fill="rgb(222,18,33)"/><text x="76.7792%" y="319.50"></text></g><g><title>netif_rx (6 samples, 0.85%)</title><rect x="76.1024%" y="357" width="0.8535%" height="15" fill="rgb(213,199,7)"/><text x="76.3524%" y="367.50"></text></g><g><title>netif_rx_internal (6 samples, 0.85%)</title><rect x="76.1024%" y="341" width="0.8535%" height="15" fill="rgb(250,110,10)"/><text x="76.3524%" y="351.50"></text></g><g><title>ktime_get_with_offset (2 samples, 0.28%)</title><rect x="76.6714%" y="325" width="0.2845%" height="15" fill="rgb(248,123,6)"/><text x="76.9214%" y="335.50"></text></g><g><title>read_tsc (1 samples, 0.14%)</title><rect x="76.8137%" y="309" width="0.1422%" height="15" fill="rgb(206,91,31)"/><text x="77.0637%" y="319.50"></text></g><g><title>dev_hard_start_xmit (7 samples, 1.00%)</title><rect x="76.1024%" y="389" width="0.9957%" height="15" fill="rgb(211,154,13)"/><text x="76.3524%" y="399.50"></text></g><g><title>loopback_xmit (7 samples, 1.00%)</title><rect x="76.1024%" y="373" width="0.9957%" height="15" fill="rgb(225,148,7)"/><text x="76.3524%" y="383.50"></text></g><g><title>tcp_wfree (1 samples, 0.14%)</title><rect x="76.9559%" y="357" width="0.1422%" height="15" fill="rgb(220,160,43)"/><text x="77.2059%" y="367.50"></text></g><g><title>__dev_queue_xmit (9 samples, 1.28%)</title><rect x="75.9602%" y="405" width="1.2802%" height="15" fill="rgb(213,52,39)"/><text x="76.2102%" y="415.50"></text></g><g><title>preempt_count_add (1 samples, 0.14%)</title><rect x="77.0982%" y="389" width="0.1422%" height="15" fill="rgb(243,137,7)"/><text x="77.3482%" y="399.50"></text></g><g><title>__this_cpu_preempt_check (1 samples, 0.14%)</title><rect x="77.9516%" y="341" width="0.1422%" height="15" fill="rgb(230,79,13)"/><text x="78.2016%" y="351.50"></text></g><g><title>irqtime_account_irq (3 samples, 0.43%)</title><rect x="78.0939%" y="341" width="0.4267%" height="15" fill="rgb(247,105,23)"/><text x="78.3439%" y="351.50"></text></g><g><title>debug_smp_processor_id (1 samples, 0.14%)</title><rect x="78.3784%" y="325" width="0.1422%" height="15" fill="rgb(223,179,41)"/><text x="78.6284%" y="335.50"></text></g><g><title>__kfree_skb_flush (1 samples, 0.14%)</title><rect x="78.6629%" y="325" width="0.1422%" height="15" fill="rgb(218,9,34)"/><text x="78.9129%" y="335.50"></text></g><g><title>__netif_receive_skb_core (4 samples, 0.57%)</title><rect x="79.0896%" y="293" width="0.5690%" height="15" fill="rgb(222,106,8)"/><text x="79.3396%" y="303.50"></text></g><g><title>raw_local_deliver (1 samples, 0.14%)</title><rect x="80.7966%" y="229" width="0.1422%" height="15" fill="rgb(211,220,0)"/><text x="81.0466%" y="239.50"></text></g><g><title>__inet_lookup_established (3 samples, 0.43%)</title><rect x="81.0811%" y="213" width="0.4267%" height="15" fill="rgb(229,52,16)"/><text x="81.3311%" y="223.50"></text></g><g><title>sk_filter_trim_cap (1 samples, 0.14%)</title><rect x="81.5078%" y="213" width="0.1422%" height="15" fill="rgb(212,155,18)"/><text x="81.7578%" y="223.50"></text></g><g><title>__tcp_ack_snd_check (1 samples, 0.14%)</title><rect x="82.7881%" y="181" width="0.1422%" height="15" fill="rgb(242,21,14)"/><text x="83.0381%" y="191.50"></text></g><g><title>sk_reset_timer (2 samples, 0.28%)</title><rect x="82.9303%" y="181" width="0.2845%" height="15" fill="rgb(222,19,48)"/><text x="83.1803%" y="191.50"></text></g><g><title>__mod_timer (2 samples, 0.28%)</title><rect x="82.9303%" y="165" width="0.2845%" height="15" fill="rgb(232,45,27)"/><text x="83.1803%" y="175.50"></text></g><g><title>lock_timer_base.constprop.0 (1 samples, 0.14%)</title><rect x="83.0725%" y="149" width="0.1422%" height="15" fill="rgb(249,103,42)"/><text x="83.3225%" y="159.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.14%)</title><rect x="83.6415%" y="101" width="0.1422%" height="15" fill="rgb(246,81,33)"/><text x="83.8915%" y="111.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.14%)</title><rect x="83.7838%" y="101" width="0.1422%" height="15" fill="rgb(252,33,42)"/><text x="84.0338%" y="111.50"></text></g><g><title>preempt_count_sub (1 samples, 0.14%)</title><rect x="83.7838%" y="85" width="0.1422%" height="15" fill="rgb(209,212,41)"/><text x="84.0338%" y="95.50"></text></g><g><title>psi_task_change (3 samples, 0.43%)</title><rect x="83.9260%" y="85" width="0.4267%" height="15" fill="rgb(207,154,6)"/><text x="84.1760%" y="95.50"></text></g><g><title>psi_group_change (3 samples, 0.43%)</title><rect x="83.9260%" y="69" width="0.4267%" height="15" fill="rgb(223,64,47)"/><text x="84.1760%" y="79.50"></text></g><g><title>record_times (1 samples, 0.14%)</title><rect x="84.2105%" y="53" width="0.1422%" height="15" fill="rgb(211,161,38)"/><text x="84.4605%" y="63.50"></text></g><g><title>enqueue_task (5 samples, 0.71%)</title><rect x="83.9260%" y="101" width="0.7112%" height="15" fill="rgb(219,138,40)"/><text x="84.1760%" y="111.50"></text></g><g><title>uclamp_rq_inc_id (2 samples, 0.28%)</title><rect x="84.3528%" y="85" width="0.2845%" height="15" fill="rgb(241,228,46)"/><text x="84.6028%" y="95.50"></text></g><g><title>update_cfs_group (1 samples, 0.14%)</title><rect x="84.7795%" y="69" width="0.1422%" height="15" fill="rgb(223,209,38)"/><text x="85.0295%" y="79.50"></text></g><g><title>__update_load_avg_cfs_rq (2 samples, 0.28%)</title><rect x="85.0640%" y="53" width="0.2845%" height="15" fill="rgb(236,164,45)"/><text x="85.3140%" y="63.50"></text></g><g><title>enqueue_task_fair (6 samples, 0.85%)</title><rect x="84.6373%" y="101" width="0.8535%" height="15" fill="rgb(231,15,5)"/><text x="84.8873%" y="111.50"></text></g><g><title>enqueue_entity (6 samples, 0.85%)</title><rect x="84.6373%" y="85" width="0.8535%" height="15" fill="rgb(252,35,15)"/><text x="84.8873%" y="95.50"></text></g><g><title>update_load_avg (4 samples, 0.57%)</title><rect x="84.9218%" y="69" width="0.5690%" height="15" fill="rgb(248,181,18)"/><text x="85.1718%" y="79.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.14%)</title><rect x="85.3485%" y="53" width="0.1422%" height="15" fill="rgb(233,39,42)"/><text x="85.5985%" y="63.50"></text></g><g><title>select_task_rq_fair (5 samples, 0.71%)</title><rect x="85.4908%" y="101" width="0.7112%" height="15" fill="rgb(238,110,33)"/><text x="85.7408%" y="111.50"></text></g><g><title>available_idle_cpu (4 samples, 0.57%)</title><rect x="85.6330%" y="85" width="0.5690%" height="15" fill="rgb(233,195,10)"/><text x="85.8830%" y="95.50"></text></g><g><title>__wake_up_common (23 samples, 3.27%)</title><rect x="83.3570%" y="149" width="3.2717%" height="15" fill="rgb(254,105,3)"/><text x="83.6070%" y="159.50">__w..</text></g><g><title>pollwake (23 samples, 3.27%)</title><rect x="83.3570%" y="133" width="3.2717%" height="15" fill="rgb(221,225,9)"/><text x="83.6070%" y="143.50">pol..</text></g><g><title>try_to_wake_up (22 samples, 3.13%)</title><rect x="83.4993%" y="117" width="3.1294%" height="15" fill="rgb(224,227,45)"/><text x="83.7493%" y="127.50">try..</text></g><g><title>update_rq_clock (3 samples, 0.43%)</title><rect x="86.2020%" y="101" width="0.4267%" height="15" fill="rgb(229,198,43)"/><text x="86.4520%" y="111.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.14%)</title><rect x="86.4865%" y="85" width="0.1422%" height="15" fill="rgb(206,209,35)"/><text x="86.7365%" y="95.50"></text></g><g><title>sched_clock (1 samples, 0.14%)</title><rect x="86.4865%" y="69" width="0.1422%" height="15" fill="rgb(245,195,53)"/><text x="86.7365%" y="79.50"></text></g><g><title>native_sched_clock (1 samples, 0.14%)</title><rect x="86.4865%" y="53" width="0.1422%" height="15" fill="rgb(240,92,26)"/><text x="86.7365%" y="63.50"></text></g><g><title>sock_def_readable (26 samples, 3.70%)</title><rect x="83.2148%" y="181" width="3.6984%" height="15" fill="rgb(207,40,23)"/><text x="83.4648%" y="191.50">sock..</text></g><g><title>__wake_up_common_lock (25 samples, 3.56%)</title><rect x="83.3570%" y="165" width="3.5562%" height="15" fill="rgb(223,111,35)"/><text x="83.6070%" y="175.50">__wa..</text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.28%)</title><rect x="86.6287%" y="149" width="0.2845%" height="15" fill="rgb(229,147,28)"/><text x="86.8787%" y="159.50"></text></g><g><title>kfree (3 samples, 0.43%)</title><rect x="87.6245%" y="149" width="0.4267%" height="15" fill="rgb(211,29,28)"/><text x="87.8745%" y="159.50"></text></g><g><title>__slab_free (3 samples, 0.43%)</title><rect x="87.6245%" y="133" width="0.4267%" height="15" fill="rgb(228,72,33)"/><text x="87.8745%" y="143.50"></text></g><g><title>__kfree_skb (5 samples, 0.71%)</title><rect x="87.6245%" y="165" width="0.7112%" height="15" fill="rgb(205,214,31)"/><text x="87.8745%" y="175.50"></text></g><g><title>skb_release_data (2 samples, 0.28%)</title><rect x="88.0512%" y="149" width="0.2845%" height="15" fill="rgb(224,111,15)"/><text x="88.3012%" y="159.50"></text></g><g><title>kmem_cache_free (1 samples, 0.14%)</title><rect x="88.3357%" y="165" width="0.1422%" height="15" fill="rgb(253,21,26)"/><text x="88.5857%" y="175.50"></text></g><g><title>__slab_free (1 samples, 0.14%)</title><rect x="88.3357%" y="149" width="0.1422%" height="15" fill="rgb(245,139,43)"/><text x="88.5857%" y="159.50"></text></g><g><title>rb_first (2 samples, 0.28%)</title><rect x="88.4780%" y="165" width="0.2845%" height="15" fill="rgb(252,170,7)"/><text x="88.7280%" y="175.50"></text></g><g><title>apic_timer_interrupt (1 samples, 0.14%)</title><rect x="88.6202%" y="149" width="0.1422%" height="15" fill="rgb(231,118,14)"/><text x="88.8702%" y="159.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.14%)</title><rect x="88.6202%" y="133" width="0.1422%" height="15" fill="rgb(238,83,0)"/><text x="88.8702%" y="143.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.14%)</title><rect x="88.6202%" y="117" width="0.1422%" height="15" fill="rgb(221,39,39)"/><text x="88.8702%" y="127.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.14%)</title><rect x="88.6202%" y="101" width="0.1422%" height="15" fill="rgb(222,119,46)"/><text x="88.8702%" y="111.50"></text></g><g><title>tick_sched_timer (1 samples, 0.14%)</title><rect x="88.6202%" y="85" width="0.1422%" height="15" fill="rgb(222,165,49)"/><text x="88.8702%" y="95.50"></text></g><g><title>tick_sched_handle (1 samples, 0.14%)</title><rect x="88.6202%" y="69" width="0.1422%" height="15" fill="rgb(219,113,52)"/><text x="88.8702%" y="79.50"></text></g><g><title>update_process_times (1 samples, 0.14%)</title><rect x="88.6202%" y="53" width="0.1422%" height="15" fill="rgb(214,7,15)"/><text x="88.8702%" y="63.50"></text></g><g><title>irqtime_account_process_tick (1 samples, 0.14%)</title><rect x="88.6202%" y="37" width="0.1422%" height="15" fill="rgb(235,32,4)"/><text x="88.8702%" y="47.50"></text></g><g><title>tcp_ack_update_rtt (2 samples, 0.28%)</title><rect x="88.7624%" y="165" width="0.2845%" height="15" fill="rgb(238,90,54)"/><text x="89.0124%" y="175.50"></text></g><g><title>__usecs_to_jiffies (1 samples, 0.14%)</title><rect x="88.9047%" y="149" width="0.1422%" height="15" fill="rgb(213,208,19)"/><text x="89.1547%" y="159.50"></text></g><g><title>tcp_ack (16 samples, 2.28%)</title><rect x="86.9132%" y="181" width="2.2760%" height="15" fill="rgb(233,156,4)"/><text x="87.1632%" y="191.50">t..</text></g><g><title>tcp_sync_mss (1 samples, 0.14%)</title><rect x="89.0469%" y="165" width="0.1422%" height="15" fill="rgb(207,194,5)"/><text x="89.2969%" y="175.50"></text></g><g><title>tcp_check_space (2 samples, 0.28%)</title><rect x="89.1892%" y="181" width="0.2845%" height="15" fill="rgb(206,111,30)"/><text x="89.4392%" y="191.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.14%)</title><rect x="89.7582%" y="85" width="0.1422%" height="15" fill="rgb(243,70,54)"/><text x="90.0082%" y="95.50"></text></g><g><title>enqueue_task_fair (3 samples, 0.43%)</title><rect x="89.9004%" y="85" width="0.4267%" height="15" fill="rgb(242,28,8)"/><text x="90.1504%" y="95.50"></text></g><g><title>enqueue_entity (3 samples, 0.43%)</title><rect x="89.9004%" y="69" width="0.4267%" height="15" fill="rgb(219,106,18)"/><text x="90.1504%" y="79.50"></text></g><g><title>update_load_avg (1 samples, 0.14%)</title><rect x="90.1849%" y="53" width="0.1422%" height="15" fill="rgb(244,222,10)"/><text x="90.4349%" y="63.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.14%)</title><rect x="90.1849%" y="37" width="0.1422%" height="15" fill="rgb(236,179,52)"/><text x="90.4349%" y="47.50"></text></g><g><title>sock_def_readable (7 samples, 1.00%)</title><rect x="89.4737%" y="165" width="0.9957%" height="15" fill="rgb(213,23,39)"/><text x="89.7237%" y="175.50"></text></g><g><title>__wake_up_common_lock (7 samples, 1.00%)</title><rect x="89.4737%" y="149" width="0.9957%" height="15" fill="rgb(238,48,10)"/><text x="89.7237%" y="159.50"></text></g><g><title>__wake_up_common (7 samples, 1.00%)</title><rect x="89.4737%" y="133" width="0.9957%" height="15" fill="rgb(251,196,23)"/><text x="89.7237%" y="143.50"></text></g><g><title>pollwake (6 samples, 0.85%)</title><rect x="89.6159%" y="117" width="0.8535%" height="15" fill="rgb(250,152,24)"/><text x="89.8659%" y="127.50"></text></g><g><title>try_to_wake_up (6 samples, 0.85%)</title><rect x="89.6159%" y="101" width="0.8535%" height="15" fill="rgb(209,150,17)"/><text x="89.8659%" y="111.50"></text></g><g><title>ttwu_do_wakeup (1 samples, 0.14%)</title><rect x="90.3272%" y="85" width="0.1422%" height="15" fill="rgb(234,202,34)"/><text x="90.5772%" y="95.50"></text></g><g><title>check_preempt_curr (1 samples, 0.14%)</title><rect x="90.3272%" y="69" width="0.1422%" height="15" fill="rgb(253,148,53)"/><text x="90.5772%" y="79.50"></text></g><g><title>resched_curr (1 samples, 0.14%)</title><rect x="90.3272%" y="53" width="0.1422%" height="15" fill="rgb(218,129,16)"/><text x="90.5772%" y="63.50"></text></g><g><title>tcp_data_queue (8 samples, 1.14%)</title><rect x="89.4737%" y="181" width="1.1380%" height="15" fill="rgb(216,85,19)"/><text x="89.7237%" y="191.50"></text></g><g><title>tcp_event_data_recv (1 samples, 0.14%)</title><rect x="90.4694%" y="165" width="0.1422%" height="15" fill="rgb(235,228,7)"/><text x="90.7194%" y="175.50"></text></g><g><title>tcp_event_data_recv (1 samples, 0.14%)</title><rect x="90.6117%" y="181" width="0.1422%" height="15" fill="rgb(245,175,0)"/><text x="90.8617%" y="191.50"></text></g><g><title>tcp_mstamp_refresh (2 samples, 0.28%)</title><rect x="90.7539%" y="181" width="0.2845%" height="15" fill="rgb(208,168,36)"/><text x="91.0039%" y="191.50"></text></g><g><title>ktime_get (2 samples, 0.28%)</title><rect x="90.7539%" y="165" width="0.2845%" height="15" fill="rgb(246,171,24)"/><text x="91.0039%" y="175.50"></text></g><g><title>ip_local_deliver (78 samples, 11.10%)</title><rect x="80.0853%" y="277" width="11.0953%" height="15" fill="rgb(215,142,24)"/><text x="80.3353%" y="287.50">ip_local_deliver</text></g><g><title>ip_local_deliver_finish (76 samples, 10.81%)</title><rect x="80.3698%" y="261" width="10.8108%" height="15" fill="rgb(250,187,7)"/><text x="80.6198%" y="271.50">ip_local_deliver..</text></g><g><title>ip_protocol_deliver_rcu (76 samples, 10.81%)</title><rect x="80.3698%" y="245" width="10.8108%" height="15" fill="rgb(228,66,33)"/><text x="80.6198%" y="255.50">ip_protocol_deli..</text></g><g><title>tcp_v4_rcv (72 samples, 10.24%)</title><rect x="80.9388%" y="229" width="10.2418%" height="15" fill="rgb(234,215,21)"/><text x="81.1888%" y="239.50">tcp_v4_rcv</text></g><g><title>tcp_v4_do_rcv (67 samples, 9.53%)</title><rect x="81.6501%" y="213" width="9.5306%" height="15" fill="rgb(222,191,20)"/><text x="81.9001%" y="223.50">tcp_v4_do_rcv</text></g><g><title>tcp_rcv_established (67 samples, 9.53%)</title><rect x="81.6501%" y="197" width="9.5306%" height="15" fill="rgb(245,79,54)"/><text x="81.9001%" y="207.50">tcp_rcv_establ..</text></g><g><title>tcp_send_delayed_ack (1 samples, 0.14%)</title><rect x="91.0384%" y="181" width="0.1422%" height="15" fill="rgb(240,10,37)"/><text x="91.2884%" y="191.50"></text></g><g><title>ip_rcv_core (4 samples, 0.57%)</title><rect x="91.1807%" y="277" width="0.5690%" height="15" fill="rgb(214,192,32)"/><text x="91.4307%" y="287.50"></text></g><g><title>__netif_receive_skb_one_core (91 samples, 12.94%)</title><rect x="79.0896%" y="309" width="12.9445%" height="15" fill="rgb(209,36,54)"/><text x="79.3396%" y="319.50">__netif_receive_skb..</text></g><g><title>ip_rcv (87 samples, 12.38%)</title><rect x="79.6586%" y="293" width="12.3755%" height="15" fill="rgb(220,10,11)"/><text x="79.9086%" y="303.50">ip_rcv</text></g><g><title>ip_rcv_finish (2 samples, 0.28%)</title><rect x="91.7496%" y="277" width="0.2845%" height="15" fill="rgb(221,106,17)"/><text x="91.9996%" y="287.50"></text></g><g><title>ip_rcv_finish_core.constprop.0 (2 samples, 0.28%)</title><rect x="91.7496%" y="261" width="0.2845%" height="15" fill="rgb(251,142,44)"/><text x="91.9996%" y="271.50"></text></g><g><title>do_softirq (104 samples, 14.79%)</title><rect x="77.3826%" y="389" width="14.7937%" height="15" fill="rgb(238,13,15)"/><text x="77.6326%" y="399.50">do_softirq</text></g><g><title>do_softirq_own_stack (103 samples, 14.65%)</title><rect x="77.5249%" y="373" width="14.6515%" height="15" fill="rgb(208,107,27)"/><text x="77.7749%" y="383.50">do_softirq_own_stack</text></g><g><title>__do_softirq (102 samples, 14.51%)</title><rect x="77.6671%" y="357" width="14.5092%" height="15" fill="rgb(205,136,37)"/><text x="77.9171%" y="367.50">__do_softirq</text></g><g><title>net_rx_action (96 samples, 13.66%)</title><rect x="78.5206%" y="341" width="13.6558%" height="15" fill="rgb(250,205,27)"/><text x="78.7706%" y="351.50">net_rx_action</text></g><g><title>process_backlog (94 samples, 13.37%)</title><rect x="78.8051%" y="325" width="13.3713%" height="15" fill="rgb(210,80,43)"/><text x="79.0551%" y="335.50">process_backlog</text></g><g><title>_raw_spin_lock (1 samples, 0.14%)</title><rect x="92.0341%" y="309" width="0.1422%" height="15" fill="rgb(247,160,36)"/><text x="92.2841%" y="319.50"></text></g><g><title>ip_finish_output2 (117 samples, 16.64%)</title><rect x="75.6757%" y="421" width="16.6430%" height="15" fill="rgb(234,13,49)"/><text x="75.9257%" y="431.50">ip_finish_output2</text></g><g><title>__local_bh_enable_ip (106 samples, 15.08%)</title><rect x="77.2404%" y="405" width="15.0782%" height="15" fill="rgb(234,122,0)"/><text x="77.4904%" y="415.50">__local_bh_enable_ip</text></g><g><title>preempt_count_sub (1 samples, 0.14%)</title><rect x="92.1764%" y="389" width="0.1422%" height="15" fill="rgb(207,146,38)"/><text x="92.4264%" y="399.50"></text></g><g><title>ip_output (121 samples, 17.21%)</title><rect x="75.3912%" y="437" width="17.2119%" height="15" fill="rgb(207,177,25)"/><text x="75.6412%" y="447.50">ip_output</text></g><g><title>ip_finish_output (2 samples, 0.28%)</title><rect x="92.3186%" y="421" width="0.2845%" height="15" fill="rgb(211,178,42)"/><text x="92.5686%" y="431.50"></text></g><g><title>__cgroup_bpf_run_filter_skb (2 samples, 0.28%)</title><rect x="92.3186%" y="405" width="0.2845%" height="15" fill="rgb(230,69,54)"/><text x="92.5686%" y="415.50"></text></g><g><title>__ip_queue_xmit (123 samples, 17.50%)</title><rect x="75.2489%" y="453" width="17.4964%" height="15" fill="rgb(214,135,41)"/><text x="75.4989%" y="463.50">__ip_queue_xmit</text></g><g><title>skb_push (1 samples, 0.14%)</title><rect x="92.6031%" y="437" width="0.1422%" height="15" fill="rgb(237,67,25)"/><text x="92.8531%" y="447.50"></text></g><g><title>skb_clone (3 samples, 0.43%)</title><rect x="92.7454%" y="453" width="0.4267%" height="15" fill="rgb(222,189,50)"/><text x="92.9954%" y="463.50"></text></g><g><title>__copy_skb_header (2 samples, 0.28%)</title><rect x="92.8876%" y="437" width="0.2845%" height="15" fill="rgb(245,148,34)"/><text x="93.1376%" y="447.50"></text></g><g><title>tcp_established_options (1 samples, 0.14%)</title><rect x="93.1721%" y="453" width="0.1422%" height="15" fill="rgb(222,29,6)"/><text x="93.4221%" y="463.50"></text></g><g><title>__tcp_transmit_skb (130 samples, 18.49%)</title><rect x="74.9644%" y="469" width="18.4922%" height="15" fill="rgb(221,189,43)"/><text x="75.2144%" y="479.50">__tcp_transmit_skb</text></g><g><title>tcp_update_skb_after_send (1 samples, 0.14%)</title><rect x="93.3144%" y="453" width="0.1422%" height="15" fill="rgb(207,36,27)"/><text x="93.5644%" y="463.50"></text></g><g><title>ktime_get (1 samples, 0.14%)</title><rect x="93.4566%" y="469" width="0.1422%" height="15" fill="rgb(217,90,24)"/><text x="93.7066%" y="479.50"></text></g><g><title>read_tsc (1 samples, 0.14%)</title><rect x="93.4566%" y="453" width="0.1422%" height="15" fill="rgb(224,66,35)"/><text x="93.7066%" y="463.50"></text></g><g><title>tcp_event_new_data_sent (2 samples, 0.28%)</title><rect x="93.5989%" y="469" width="0.2845%" height="15" fill="rgb(221,13,50)"/><text x="93.8489%" y="479.50"></text></g><g><title>sk_reset_timer (1 samples, 0.14%)</title><rect x="93.7411%" y="453" width="0.1422%" height="15" fill="rgb(236,68,49)"/><text x="93.9911%" y="463.50"></text></g><g><title>__mod_timer (1 samples, 0.14%)</title><rect x="93.7411%" y="437" width="0.1422%" height="15" fill="rgb(229,146,28)"/><text x="93.9911%" y="447.50"></text></g><g><title>__tcp_push_pending_frames (135 samples, 19.20%)</title><rect x="74.8222%" y="501" width="19.2034%" height="15" fill="rgb(225,31,38)"/><text x="75.0722%" y="511.50">__tcp_push_pending_frames</text></g><g><title>tcp_write_xmit (135 samples, 19.20%)</title><rect x="74.8222%" y="485" width="19.2034%" height="15" fill="rgb(250,208,3)"/><text x="75.0722%" y="495.50">tcp_write_xmit</text></g><g><title>tcp_small_queue_check.isra.0 (1 samples, 0.14%)</title><rect x="93.8834%" y="469" width="0.1422%" height="15" fill="rgb(246,54,23)"/><text x="94.1334%" y="479.50"></text></g><g><title>__slab_alloc.constprop.0 (1 samples, 0.14%)</title><rect x="94.7368%" y="453" width="0.1422%" height="15" fill="rgb(243,76,11)"/><text x="94.9868%" y="463.50"></text></g><g><title>___slab_alloc (1 samples, 0.14%)</title><rect x="94.7368%" y="437" width="0.1422%" height="15" fill="rgb(245,21,50)"/><text x="94.9868%" y="447.50"></text></g><g><title>kmalloc_slab (1 samples, 0.14%)</title><rect x="94.8791%" y="453" width="0.1422%" height="15" fill="rgb(228,9,43)"/><text x="95.1291%" y="463.50"></text></g><g><title>__kmalloc_node_track_caller (5 samples, 0.71%)</title><rect x="94.5946%" y="469" width="0.7112%" height="15" fill="rgb(208,100,47)"/><text x="94.8446%" y="479.50"></text></g><g><title>memset_erms (2 samples, 0.28%)</title><rect x="95.0213%" y="453" width="0.2845%" height="15" fill="rgb(232,26,8)"/><text x="95.2713%" y="463.50"></text></g><g><title>__ksize (4 samples, 0.57%)</title><rect x="95.3058%" y="469" width="0.5690%" height="15" fill="rgb(216,166,38)"/><text x="95.5558%" y="479.50"></text></g><g><title>sk_stream_alloc_skb (14 samples, 1.99%)</title><rect x="94.0256%" y="501" width="1.9915%" height="15" fill="rgb(251,202,51)"/><text x="94.2756%" y="511.50">s..</text></g><g><title>__alloc_skb (13 samples, 1.85%)</title><rect x="94.1679%" y="485" width="1.8492%" height="15" fill="rgb(254,216,34)"/><text x="94.4179%" y="495.50">_..</text></g><g><title>kmem_cache_alloc_node (1 samples, 0.14%)</title><rect x="95.8748%" y="469" width="0.1422%" height="15" fill="rgb(251,32,27)"/><text x="96.1248%" y="479.50"></text></g><g><title>skb_entail (1 samples, 0.14%)</title><rect x="96.0171%" y="501" width="0.1422%" height="15" fill="rgb(208,127,28)"/><text x="96.2671%" y="511.50"></text></g><g><title>sock_sendmsg (165 samples, 23.47%)</title><rect x="73.1152%" y="549" width="23.4708%" height="15" fill="rgb(224,137,22)"/><text x="73.3652%" y="559.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (165 samples, 23.47%)</title><rect x="73.1152%" y="533" width="23.4708%" height="15" fill="rgb(254,70,32)"/><text x="73.3652%" y="543.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (163 samples, 23.19%)</title><rect x="73.3997%" y="517" width="23.1863%" height="15" fill="rgb(229,75,37)"/><text x="73.6497%" y="527.50">tcp_sendmsg_locked</text></g><g><title>tcp_send_mss (3 samples, 0.43%)</title><rect x="96.1593%" y="501" width="0.4267%" height="15" fill="rgb(252,64,23)"/><text x="96.4093%" y="511.50"></text></g><g><title>tcp_current_mss (2 samples, 0.28%)</title><rect x="96.3016%" y="485" width="0.2845%" height="15" fill="rgb(232,162,48)"/><text x="96.5516%" y="495.50"></text></g><g><title>__fdget (1 samples, 0.14%)</title><rect x="96.8706%" y="533" width="0.1422%" height="15" fill="rgb(246,160,12)"/><text x="97.1206%" y="543.50"></text></g><g><title>__x64_sys_sendto (172 samples, 24.47%)</title><rect x="72.8307%" y="581" width="24.4666%" height="15" fill="rgb(247,166,0)"/><text x="73.0807%" y="591.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (172 samples, 24.47%)</title><rect x="72.8307%" y="565" width="24.4666%" height="15" fill="rgb(249,219,21)"/><text x="73.0807%" y="575.50">__sys_sendto</text></g><g><title>sockfd_lookup_light (5 samples, 0.71%)</title><rect x="96.5861%" y="549" width="0.7112%" height="15" fill="rgb(205,209,3)"/><text x="96.8361%" y="559.50"></text></g><g><title>__fget_light (2 samples, 0.28%)</title><rect x="97.0128%" y="533" width="0.2845%" height="15" fill="rgb(243,44,1)"/><text x="97.2628%" y="543.50"></text></g><g><title>do_syscall_64 (174 samples, 24.75%)</title><rect x="72.6885%" y="597" width="24.7511%" height="15" fill="rgb(206,159,16)"/><text x="72.9385%" y="607.50">do_syscall_64</text></g><g><title>syscall_trace_enter (1 samples, 0.14%)</title><rect x="97.2973%" y="581" width="0.1422%" height="15" fill="rgb(244,77,30)"/><text x="97.5473%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (181 samples, 25.75%)</title><rect x="72.4040%" y="613" width="25.7468%" height="15" fill="rgb(218,69,12)"/><text x="72.6540%" y="623.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (5 samples, 0.71%)</title><rect x="97.4395%" y="597" width="0.7112%" height="15" fill="rgb(212,87,7)"/><text x="97.6895%" y="607.50"></text></g><g><title>mysql::conn::Conn::_query (197 samples, 28.02%)</title><rect x="70.2703%" y="709" width="28.0228%" height="15" fill="rgb(245,114,25)"/><text x="70.5203%" y="719.50">mysql::conn::Conn::_query</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (192 samples, 27.31%)</title><rect x="70.9815%" y="693" width="27.3115%" height="15" fill="rgb(210,61,42)"/><text x="71.2315%" y="703.50">mysql_common::proto::sync_framed::MySyncFram..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (186 samples, 26.46%)</title><rect x="71.8350%" y="677" width="26.4580%" height="15" fill="rgb(211,52,33)"/><text x="72.0850%" y="687.50">std::io::buffered::BufWriter&lt;W&gt;::flush_buf</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (183 samples, 26.03%)</title><rect x="72.2617%" y="661" width="26.0313%" height="15" fill="rgb(234,58,33)"/><text x="72.5117%" y="671.50">&lt;std::net::tcp::TcpStream as std::io::Writ..</text></g><g><title>std::sys_common::net::TcpStream::write (183 samples, 26.03%)</title><rect x="72.2617%" y="645" width="26.0313%" height="15" fill="rgb(220,115,36)"/><text x="72.5117%" y="655.50">std::sys_common::net::TcpStream::write</text></g><g><title>__libc_send (183 samples, 26.03%)</title><rect x="72.2617%" y="629" width="26.0313%" height="15" fill="rgb(243,153,54)"/><text x="72.5117%" y="639.50">__libc_send</text></g><g><title>syscall_return_via_sysret (1 samples, 0.14%)</title><rect x="98.1508%" y="613" width="0.1422%" height="15" fill="rgb(251,47,18)"/><text x="98.4008%" y="623.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.14%)</title><rect x="98.2930%" y="709" width="0.1422%" height="15" fill="rgb(242,102,42)"/><text x="98.5430%" y="719.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.14%)</title><rect x="98.2930%" y="693" width="0.1422%" height="15" fill="rgb(234,31,38)"/><text x="98.5430%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.14%)</title><rect x="98.2930%" y="677" width="0.1422%" height="15" fill="rgb(221,117,51)"/><text x="98.5430%" y="687.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (1 samples, 0.14%)</title><rect x="98.2930%" y="661" width="0.1422%" height="15" fill="rgb(212,20,18)"/><text x="98.5430%" y="671.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.14%)</title><rect x="98.2930%" y="645" width="0.1422%" height="15" fill="rgb(245,133,36)"/><text x="98.5430%" y="655.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.14%)</title><rect x="98.2930%" y="629" width="0.1422%" height="15" fill="rgb(212,6,19)"/><text x="98.5430%" y="639.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.14%)</title><rect x="98.2930%" y="613" width="0.1422%" height="15" fill="rgb(218,1,36)"/><text x="98.5430%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.14%)</title><rect x="98.2930%" y="597" width="0.1422%" height="15" fill="rgb(246,84,54)"/><text x="98.5430%" y="607.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.14%)</title><rect x="98.2930%" y="581" width="0.1422%" height="15" fill="rgb(242,110,6)"/><text x="98.5430%" y="591.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.14%)</title><rect x="98.2930%" y="565" width="0.1422%" height="15" fill="rgb(214,47,5)"/><text x="98.5430%" y="575.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.14%)</title><rect x="98.2930%" y="549" width="0.1422%" height="15" fill="rgb(218,159,25)"/><text x="98.5430%" y="559.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.14%)</title><rect x="98.2930%" y="533" width="0.1422%" height="15" fill="rgb(215,211,28)"/><text x="98.5430%" y="543.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.14%)</title><rect x="98.2930%" y="517" width="0.1422%" height="15" fill="rgb(238,59,32)"/><text x="98.5430%" y="527.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.14%)</title><rect x="98.2930%" y="501" width="0.1422%" height="15" fill="rgb(226,82,3)"/><text x="98.5430%" y="511.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.14%)</title><rect x="98.2930%" y="485" width="0.1422%" height="15" fill="rgb(240,164,32)"/><text x="98.5430%" y="495.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.14%)</title><rect x="98.2930%" y="469" width="0.1422%" height="15" fill="rgb(232,46,7)"/><text x="98.5430%" y="479.50"></text></g><g><title>__libc_write (1 samples, 0.14%)</title><rect x="98.2930%" y="453" width="0.1422%" height="15" fill="rgb(229,129,53)"/><text x="98.5430%" y="463.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.14%)</title><rect x="98.2930%" y="437" width="0.1422%" height="15" fill="rgb(234,188,29)"/><text x="98.5430%" y="447.50"></text></g><g><title>do_syscall_64 (1 samples, 0.14%)</title><rect x="98.2930%" y="421" width="0.1422%" height="15" fill="rgb(246,141,4)"/><text x="98.5430%" y="431.50"></text></g><g><title>ksys_write (1 samples, 0.14%)</title><rect x="98.2930%" y="405" width="0.1422%" height="15" fill="rgb(229,23,39)"/><text x="98.5430%" y="415.50"></text></g><g><title>vfs_write (1 samples, 0.14%)</title><rect x="98.2930%" y="389" width="0.1422%" height="15" fill="rgb(206,12,3)"/><text x="98.5430%" y="399.50"></text></g><g><title>tty_write (1 samples, 0.14%)</title><rect x="98.2930%" y="373" width="0.1422%" height="15" fill="rgb(252,226,20)"/><text x="98.5430%" y="383.50"></text></g><g><title>n_tty_write (1 samples, 0.14%)</title><rect x="98.2930%" y="357" width="0.1422%" height="15" fill="rgb(216,123,35)"/><text x="98.5430%" y="367.50"></text></g><g><title>__libc_start_main (472 samples, 67.14%)</title><rect x="31.4367%" y="869" width="67.1408%" height="15" fill="rgb(212,68,40)"/><text x="31.6867%" y="879.50">__libc_start_main</text></g><g><title>main (472 samples, 67.14%)</title><rect x="31.4367%" y="853" width="67.1408%" height="15" fill="rgb(254,125,32)"/><text x="31.6867%" y="863.50">main</text></g><g><title>std::rt::lang_start_internal (472 samples, 67.14%)</title><rect x="31.4367%" y="837" width="67.1408%" height="15" fill="rgb(253,97,22)"/><text x="31.6867%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (472 samples, 67.14%)</title><rect x="31.4367%" y="821" width="67.1408%" height="15" fill="rgb(241,101,14)"/><text x="31.6867%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (472 samples, 67.14%)</title><rect x="31.4367%" y="805" width="67.1408%" height="15" fill="rgb(238,103,29)"/><text x="31.6867%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (472 samples, 67.14%)</title><rect x="31.4367%" y="789" width="67.1408%" height="15" fill="rgb(233,195,47)"/><text x="31.6867%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (472 samples, 67.14%)</title><rect x="31.4367%" y="773" width="67.1408%" height="15" fill="rgb(246,218,30)"/><text x="31.6867%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (472 samples, 67.14%)</title><rect x="31.4367%" y="757" width="67.1408%" height="15" fill="rgb(219,145,47)"/><text x="31.6867%" y="767.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (472 samples, 67.14%)</title><rect x="31.4367%" y="741" width="67.1408%" height="15" fill="rgb(243,12,26)"/><text x="31.6867%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters::main (472 samples, 67.14%)</title><rect x="31.4367%" y="725" width="67.1408%" height="15" fill="rgb(214,87,16)"/><text x="31.6867%" y="735.50">lobsters::main</text></g><g><title>std::net::each_addr (1 samples, 0.14%)</title><rect x="98.4353%" y="709" width="0.1422%" height="15" fill="rgb(208,99,42)"/><text x="98.6853%" y="719.50"></text></g><g><title>std::sys_common::net::TcpListener::bind (1 samples, 0.14%)</title><rect x="98.4353%" y="693" width="0.1422%" height="15" fill="rgb(253,99,2)"/><text x="98.6853%" y="703.50"></text></g><g><title>std::sys::unix::net::Socket::new (1 samples, 0.14%)</title><rect x="98.4353%" y="677" width="0.1422%" height="15" fill="rgb(220,168,23)"/><text x="98.6853%" y="687.50"></text></g><g><title>__GI___socket (1 samples, 0.14%)</title><rect x="98.4353%" y="661" width="0.1422%" height="15" fill="rgb(242,38,24)"/><text x="98.6853%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.14%)</title><rect x="98.4353%" y="645" width="0.1422%" height="15" fill="rgb(225,182,9)"/><text x="98.6853%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.14%)</title><rect x="98.4353%" y="629" width="0.1422%" height="15" fill="rgb(243,178,37)"/><text x="98.6853%" y="639.50"></text></g><g><title>__x64_sys_socket (1 samples, 0.14%)</title><rect x="98.4353%" y="613" width="0.1422%" height="15" fill="rgb(232,139,19)"/><text x="98.6853%" y="623.50"></text></g><g><title>__sys_socket (1 samples, 0.14%)</title><rect x="98.4353%" y="597" width="0.1422%" height="15" fill="rgb(225,201,24)"/><text x="98.6853%" y="607.50"></text></g><g><title>__sock_create (1 samples, 0.14%)</title><rect x="98.4353%" y="581" width="0.1422%" height="15" fill="rgb(221,47,46)"/><text x="98.6853%" y="591.50"></text></g><g><title>inet_create (1 samples, 0.14%)</title><rect x="98.4353%" y="565" width="0.1422%" height="15" fill="rgb(249,23,13)"/><text x="98.6853%" y="575.50"></text></g><g><title>sk_alloc (1 samples, 0.14%)</title><rect x="98.4353%" y="549" width="0.1422%" height="15" fill="rgb(219,9,5)"/><text x="98.6853%" y="559.50"></text></g><g><title>sk_prot_alloc (1 samples, 0.14%)</title><rect x="98.4353%" y="533" width="0.1422%" height="15" fill="rgb(254,171,16)"/><text x="98.6853%" y="543.50"></text></g><g><title>_start (473 samples, 67.28%)</title><rect x="31.4367%" y="885" width="67.2831%" height="15" fill="rgb(230,171,20)"/><text x="31.6867%" y="895.50">_start</text></g><g><title>_dl_start (1 samples, 0.14%)</title><rect x="98.5775%" y="869" width="0.1422%" height="15" fill="rgb(210,71,41)"/><text x="98.8275%" y="879.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.14%)</title><rect x="98.5775%" y="853" width="0.1422%" height="15" fill="rgb(206,173,20)"/><text x="98.8275%" y="863.50"></text></g><g><title>dl_main (1 samples, 0.14%)</title><rect x="98.5775%" y="837" width="0.1422%" height="15" fill="rgb(233,88,34)"/><text x="98.8275%" y="847.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.14%)</title><rect x="98.5775%" y="821" width="0.1422%" height="15" fill="rgb(223,209,46)"/><text x="98.8275%" y="831.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.14%)</title><rect x="98.5775%" y="805" width="0.1422%" height="15" fill="rgb(250,43,18)"/><text x="98.8275%" y="815.50"></text></g><g><title>openaux (1 samples, 0.14%)</title><rect x="98.5775%" y="789" width="0.1422%" height="15" fill="rgb(208,13,10)"/><text x="98.8275%" y="799.50"></text></g><g><title>_dl_map_object (1 samples, 0.14%)</title><rect x="98.5775%" y="773" width="0.1422%" height="15" fill="rgb(212,200,36)"/><text x="98.8275%" y="783.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.14%)</title><rect x="98.5775%" y="757" width="0.1422%" height="15" fill="rgb(225,90,30)"/><text x="98.8275%" y="767.50"></text></g><g><title>__mmap (1 samples, 0.14%)</title><rect x="98.5775%" y="741" width="0.1422%" height="15" fill="rgb(236,182,39)"/><text x="98.8275%" y="751.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.14%)</title><rect x="98.5775%" y="725" width="0.1422%" height="15" fill="rgb(212,144,35)"/><text x="98.8275%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.14%)</title><rect x="98.5775%" y="709" width="0.1422%" height="15" fill="rgb(228,63,44)"/><text x="98.8275%" y="719.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.14%)</title><rect x="98.5775%" y="693" width="0.1422%" height="15" fill="rgb(228,109,6)"/><text x="98.8275%" y="703.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.14%)</title><rect x="98.5775%" y="677" width="0.1422%" height="15" fill="rgb(238,117,24)"/><text x="98.8275%" y="687.50"></text></g><g><title>do_mmap (1 samples, 0.14%)</title><rect x="98.5775%" y="661" width="0.1422%" height="15" fill="rgb(242,26,26)"/><text x="98.8275%" y="671.50"></text></g><g><title>mmap_region (1 samples, 0.14%)</title><rect x="98.5775%" y="645" width="0.1422%" height="15" fill="rgb(221,92,48)"/><text x="98.8275%" y="655.50"></text></g><g><title>__do_munmap (1 samples, 0.14%)</title><rect x="98.5775%" y="629" width="0.1422%" height="15" fill="rgb(209,209,32)"/><text x="98.8275%" y="639.50"></text></g><g><title>__split_vma (1 samples, 0.14%)</title><rect x="98.5775%" y="613" width="0.1422%" height="15" fill="rgb(221,70,22)"/><text x="98.8275%" y="623.50"></text></g><g><title>__vma_adjust (1 samples, 0.14%)</title><rect x="98.5775%" y="597" width="0.1422%" height="15" fill="rgb(248,145,5)"/><text x="98.8275%" y="607.50"></text></g><g><title>vma_gap_callbacks_rotate (1 samples, 0.14%)</title><rect x="98.5775%" y="581" width="0.1422%" height="15" fill="rgb(226,116,26)"/><text x="98.8275%" y="591.50"></text></g><g><title>[vmlinux] (1 samples, 0.14%)</title><rect x="98.7198%" y="853" width="0.1422%" height="15" fill="rgb(244,5,17)"/><text x="98.9698%" y="863.50"></text></g><g><title>do_group_exit (1 samples, 0.14%)</title><rect x="98.7198%" y="837" width="0.1422%" height="15" fill="rgb(252,159,33)"/><text x="98.9698%" y="847.50"></text></g><g><title>do_exit (1 samples, 0.14%)</title><rect x="98.7198%" y="821" width="0.1422%" height="15" fill="rgb(206,71,0)"/><text x="98.9698%" y="831.50"></text></g><g><title>mmput (1 samples, 0.14%)</title><rect x="98.7198%" y="805" width="0.1422%" height="15" fill="rgb(233,118,54)"/><text x="98.9698%" y="815.50"></text></g><g><title>exit_mmap (1 samples, 0.14%)</title><rect x="98.7198%" y="789" width="0.1422%" height="15" fill="rgb(234,83,48)"/><text x="98.9698%" y="799.50"></text></g><g><title>free_pgtables (1 samples, 0.14%)</title><rect x="98.7198%" y="773" width="0.1422%" height="15" fill="rgb(228,3,54)"/><text x="98.9698%" y="783.50"></text></g><g><title>unlink_anon_vmas (1 samples, 0.14%)</title><rect x="98.7198%" y="757" width="0.1422%" height="15" fill="rgb(226,155,13)"/><text x="98.9698%" y="767.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.28%)</title><rect x="98.7198%" y="885" width="0.2845%" height="15" fill="rgb(241,28,37)"/><text x="98.9698%" y="895.50"></text></g><g><title>do_syscall_64 (2 samples, 0.28%)</title><rect x="98.7198%" y="869" width="0.2845%" height="15" fill="rgb(233,93,10)"/><text x="98.9698%" y="879.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.14%)</title><rect x="98.8620%" y="853" width="0.1422%" height="15" fill="rgb(225,113,19)"/><text x="99.1120%" y="863.50"></text></g><g><title>do_execve (1 samples, 0.14%)</title><rect x="98.8620%" y="837" width="0.1422%" height="15" fill="rgb(241,2,18)"/><text x="99.1120%" y="847.50"></text></g><g><title>__do_execve_file (1 samples, 0.14%)</title><rect x="98.8620%" y="821" width="0.1422%" height="15" fill="rgb(228,207,21)"/><text x="99.1120%" y="831.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.14%)</title><rect x="98.8620%" y="805" width="0.1422%" height="15" fill="rgb(213,211,35)"/><text x="99.1120%" y="815.50"></text></g><g><title>load_elf_binary (1 samples, 0.14%)</title><rect x="98.8620%" y="789" width="0.1422%" height="15" fill="rgb(209,83,10)"/><text x="99.1120%" y="799.50"></text></g><g><title>__clear_user (1 samples, 0.14%)</title><rect x="98.8620%" y="773" width="0.1422%" height="15" fill="rgb(209,164,1)"/><text x="99.1120%" y="783.50"></text></g><g><title>page_fault (1 samples, 0.14%)</title><rect x="98.8620%" y="757" width="0.1422%" height="15" fill="rgb(213,184,43)"/><text x="99.1120%" y="767.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.14%)</title><rect x="98.8620%" y="741" width="0.1422%" height="15" fill="rgb(231,61,34)"/><text x="99.1120%" y="751.50"></text></g><g><title>handle_mm_fault (1 samples, 0.14%)</title><rect x="98.8620%" y="725" width="0.1422%" height="15" fill="rgb(235,75,3)"/><text x="99.1120%" y="735.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.14%)</title><rect x="98.8620%" y="709" width="0.1422%" height="15" fill="rgb(220,106,47)"/><text x="99.1120%" y="719.50"></text></g><g><title>__pud_alloc (1 samples, 0.14%)</title><rect x="98.8620%" y="693" width="0.1422%" height="15" fill="rgb(210,196,33)"/><text x="99.1120%" y="703.50"></text></g><g><title>get_zeroed_page (1 samples, 0.14%)</title><rect x="98.8620%" y="677" width="0.1422%" height="15" fill="rgb(229,154,42)"/><text x="99.1120%" y="687.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.14%)</title><rect x="98.8620%" y="661" width="0.1422%" height="15" fill="rgb(228,114,26)"/><text x="99.1120%" y="671.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.14%)</title><rect x="98.8620%" y="645" width="0.1422%" height="15" fill="rgb(208,144,1)"/><text x="99.1120%" y="655.50"></text></g><g><title>prep_new_page (1 samples, 0.14%)</title><rect x="98.8620%" y="629" width="0.1422%" height="15" fill="rgb(239,112,37)"/><text x="99.1120%" y="639.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.14%)</title><rect x="98.8620%" y="613" width="0.1422%" height="15" fill="rgb(210,96,50)"/><text x="99.1120%" y="623.50"></text></g><g><title>clear_page_erms (1 samples, 0.14%)</title><rect x="98.8620%" y="597" width="0.1422%" height="15" fill="rgb(222,178,2)"/><text x="99.1120%" y="607.50"></text></g><g><title>lobsters (697 samples, 99.15%)</title><rect x="0.0000%" y="901" width="99.1465%" height="15" fill="rgb(226,74,18)"/><text x="0.2500%" y="911.50">lobsters</text></g><g><title>syscall_return_via_sysret (1 samples, 0.14%)</title><rect x="99.0043%" y="885" width="0.1422%" height="15" fill="rgb(225,67,54)"/><text x="99.2543%" y="895.50"></text></g><g><title>all (703 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(251,92,32)"/><text x="0.2500%" y="927.50"></text></g><g><title>perf (6 samples, 0.85%)</title><rect x="99.1465%" y="901" width="0.8535%" height="15" fill="rgb(228,149,22)"/><text x="99.3965%" y="911.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.85%)</title><rect x="99.1465%" y="885" width="0.8535%" height="15" fill="rgb(243,54,13)"/><text x="99.3965%" y="895.50"></text></g><g><title>do_syscall_64 (6 samples, 0.85%)</title><rect x="99.1465%" y="869" width="0.8535%" height="15" fill="rgb(243,180,28)"/><text x="99.3965%" y="879.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.85%)</title><rect x="99.1465%" y="853" width="0.8535%" height="15" fill="rgb(208,167,24)"/><text x="99.3965%" y="863.50"></text></g><g><title>do_execve (6 samples, 0.85%)</title><rect x="99.1465%" y="837" width="0.8535%" height="15" fill="rgb(245,73,45)"/><text x="99.3965%" y="847.50"></text></g><g><title>__do_execve_file (6 samples, 0.85%)</title><rect x="99.1465%" y="821" width="0.8535%" height="15" fill="rgb(237,203,48)"/><text x="99.3965%" y="831.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.85%)</title><rect x="99.1465%" y="805" width="0.8535%" height="15" fill="rgb(211,197,16)"/><text x="99.3965%" y="815.50"></text></g><g><title>load_elf_binary (6 samples, 0.85%)</title><rect x="99.1465%" y="789" width="0.8535%" height="15" fill="rgb(243,99,51)"/><text x="99.3965%" y="799.50"></text></g><g><title>setup_new_exec (6 samples, 0.85%)</title><rect x="99.1465%" y="773" width="0.8535%" height="15" fill="rgb(215,123,29)"/><text x="99.3965%" y="783.50"></text></g><g><title>perf_event_exec (6 samples, 0.85%)</title><rect x="99.1465%" y="757" width="0.8535%" height="15" fill="rgb(239,186,37)"/><text x="99.3965%" y="767.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.71%)</title><rect x="99.2888%" y="741" width="0.7112%" height="15" fill="rgb(252,136,39)"/><text x="99.5388%" y="751.50"></text></g><g><title>native_write_msr (5 samples, 0.71%)</title><rect x="99.2888%" y="725" width="0.7112%" height="15" fill="rgb(223,213,32)"/><text x="99.5388%" y="735.50"></text></g></svg></svg>