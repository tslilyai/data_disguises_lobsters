<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="933.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="933.00"> </text><svg id="frames" x="10" width="1180"><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.31%)</title><rect x="0.0000%" y="853" width="0.3077%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="863.50"></text></g><g><title>[[heap]] (2 samples, 0.62%)</title><rect x="0.0000%" y="869" width="0.6154%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="879.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.31%)</title><rect x="0.3077%" y="853" width="0.3077%" height="15" fill="rgb(221,193,54)"/><text x="0.5577%" y="863.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.31%)</title><rect x="0.6154%" y="853" width="0.3077%" height="15" fill="rgb(248,212,6)"/><text x="0.8654%" y="863.50"></text></g><g><title>[[stack]] (2 samples, 0.62%)</title><rect x="0.6154%" y="869" width="0.6154%" height="15" fill="rgb(208,68,35)"/><text x="0.8654%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.31%)</title><rect x="0.9231%" y="853" width="0.3077%" height="15" fill="rgb(232,128,0)"/><text x="1.1731%" y="863.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.31%)</title><rect x="1.2308%" y="693" width="0.3077%" height="15" fill="rgb(207,160,47)"/><text x="1.4808%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (1 samples, 0.31%)</title><rect x="1.2308%" y="677" width="0.3077%" height="15" fill="rgb(228,23,34)"/><text x="1.4808%" y="687.50"></text></g><g><title>mysql::conn::Conn::next_text (1 samples, 0.31%)</title><rect x="1.2308%" y="661" width="0.3077%" height="15" fill="rgb(218,30,26)"/><text x="1.4808%" y="671.50"></text></g><g><title>mysql_common::value::read_text_values (1 samples, 0.31%)</title><rect x="1.2308%" y="645" width="0.3077%" height="15" fill="rgb(220,122,19)"/><text x="1.4808%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.31%)</title><rect x="1.2308%" y="629" width="0.3077%" height="15" fill="rgb(250,228,42)"/><text x="1.4808%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.31%)</title><rect x="1.2308%" y="613" width="0.3077%" height="15" fill="rgb(240,193,28)"/><text x="1.4808%" y="623.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.31%)</title><rect x="1.5385%" y="693" width="0.3077%" height="15" fill="rgb(216,20,37)"/><text x="1.7885%" y="703.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.31%)</title><rect x="1.5385%" y="677" width="0.3077%" height="15" fill="rgb(206,188,39)"/><text x="1.7885%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="1.5385%" y="661" width="0.3077%" height="15" fill="rgb(217,207,13)"/><text x="1.7885%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="1.5385%" y="645" width="0.3077%" height="15" fill="rgb(231,73,38)"/><text x="1.7885%" y="655.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="1.5385%" y="629" width="0.3077%" height="15" fill="rgb(225,20,46)"/><text x="1.7885%" y="639.50"></text></g><g><title>__libc_read (1 samples, 0.31%)</title><rect x="1.5385%" y="613" width="0.3077%" height="15" fill="rgb(210,31,41)"/><text x="1.7885%" y="623.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.31%)</title><rect x="1.5385%" y="597" width="0.3077%" height="15" fill="rgb(221,200,47)"/><text x="1.7885%" y="607.50"></text></g><g><title>do_syscall_64 (1 samples, 0.31%)</title><rect x="1.5385%" y="581" width="0.3077%" height="15" fill="rgb(226,26,5)"/><text x="1.7885%" y="591.50"></text></g><g><title>ksys_read (1 samples, 0.31%)</title><rect x="1.5385%" y="565" width="0.3077%" height="15" fill="rgb(249,33,26)"/><text x="1.7885%" y="575.50"></text></g><g><title>vfs_read (1 samples, 0.31%)</title><rect x="1.5385%" y="549" width="0.3077%" height="15" fill="rgb(235,183,28)"/><text x="1.7885%" y="559.50"></text></g><g><title>seq_read (1 samples, 0.31%)</title><rect x="1.5385%" y="533" width="0.3077%" height="15" fill="rgb(221,5,38)"/><text x="1.7885%" y="543.50"></text></g><g><title>sysfs_kf_seq_show (1 samples, 0.31%)</title><rect x="1.5385%" y="517" width="0.3077%" height="15" fill="rgb(247,18,42)"/><text x="1.7885%" y="527.50"></text></g><g><title>__libc_start_main (3 samples, 0.92%)</title><rect x="1.2308%" y="853" width="0.9231%" height="15" fill="rgb(241,131,45)"/><text x="1.4808%" y="863.50"></text></g><g><title>main (3 samples, 0.92%)</title><rect x="1.2308%" y="837" width="0.9231%" height="15" fill="rgb(249,31,29)"/><text x="1.4808%" y="847.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.92%)</title><rect x="1.2308%" y="821" width="0.9231%" height="15" fill="rgb(225,111,53)"/><text x="1.4808%" y="831.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.92%)</title><rect x="1.2308%" y="805" width="0.9231%" height="15" fill="rgb(238,160,17)"/><text x="1.4808%" y="815.50"></text></g><g><title>std::panicking::try (3 samples, 0.92%)</title><rect x="1.2308%" y="789" width="0.9231%" height="15" fill="rgb(214,148,48)"/><text x="1.4808%" y="799.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.92%)</title><rect x="1.2308%" y="773" width="0.9231%" height="15" fill="rgb(232,36,49)"/><text x="1.4808%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.92%)</title><rect x="1.2308%" y="757" width="0.9231%" height="15" fill="rgb(209,103,24)"/><text x="1.4808%" y="767.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.92%)</title><rect x="1.2308%" y="741" width="0.9231%" height="15" fill="rgb(229,88,8)"/><text x="1.4808%" y="751.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.92%)</title><rect x="1.2308%" y="725" width="0.9231%" height="15" fill="rgb(213,181,19)"/><text x="1.4808%" y="735.50"></text></g><g><title>lobsters::main (3 samples, 0.92%)</title><rect x="1.2308%" y="709" width="0.9231%" height="15" fill="rgb(254,191,54)"/><text x="1.4808%" y="719.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.31%)</title><rect x="1.8462%" y="693" width="0.3077%" height="15" fill="rgb(241,83,37)"/><text x="2.0962%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.31%)</title><rect x="1.8462%" y="677" width="0.3077%" height="15" fill="rgb(233,36,39)"/><text x="2.0962%" y="687.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.31%)</title><rect x="1.8462%" y="661" width="0.3077%" height="15" fill="rgb(226,3,54)"/><text x="2.0962%" y="671.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.31%)</title><rect x="1.8462%" y="645" width="0.3077%" height="15" fill="rgb(245,192,40)"/><text x="2.0962%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.31%)</title><rect x="1.8462%" y="629" width="0.3077%" height="15" fill="rgb(238,167,29)"/><text x="2.0962%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.31%)</title><rect x="1.8462%" y="613" width="0.3077%" height="15" fill="rgb(232,182,51)"/><text x="2.0962%" y="623.50"></text></g><g><title>__libc_send (1 samples, 0.31%)</title><rect x="1.8462%" y="597" width="0.3077%" height="15" fill="rgb(231,60,39)"/><text x="2.0962%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.31%)</title><rect x="1.8462%" y="581" width="0.3077%" height="15" fill="rgb(208,69,12)"/><text x="2.0962%" y="591.50"></text></g><g><title>do_syscall_64 (1 samples, 0.31%)</title><rect x="1.8462%" y="565" width="0.3077%" height="15" fill="rgb(235,93,37)"/><text x="2.0962%" y="575.50"></text></g><g><title>__x64_sys_sendto (1 samples, 0.31%)</title><rect x="1.8462%" y="549" width="0.3077%" height="15" fill="rgb(213,116,39)"/><text x="2.0962%" y="559.50"></text></g><g><title>__sys_sendto (1 samples, 0.31%)</title><rect x="1.8462%" y="533" width="0.3077%" height="15" fill="rgb(222,207,29)"/><text x="2.0962%" y="543.50"></text></g><g><title>sock_sendmsg (1 samples, 0.31%)</title><rect x="1.8462%" y="517" width="0.3077%" height="15" fill="rgb(206,96,30)"/><text x="2.0962%" y="527.50"></text></g><g><title>tcp_sendmsg (1 samples, 0.31%)</title><rect x="1.8462%" y="501" width="0.3077%" height="15" fill="rgb(218,138,4)"/><text x="2.0962%" y="511.50"></text></g><g><title>tcp_sendmsg_locked (1 samples, 0.31%)</title><rect x="1.8462%" y="485" width="0.3077%" height="15" fill="rgb(250,191,14)"/><text x="2.0962%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (1 samples, 0.31%)</title><rect x="1.8462%" y="469" width="0.3077%" height="15" fill="rgb(239,60,40)"/><text x="2.0962%" y="479.50"></text></g><g><title>tcp_write_xmit (1 samples, 0.31%)</title><rect x="1.8462%" y="453" width="0.3077%" height="15" fill="rgb(206,27,48)"/><text x="2.0962%" y="463.50"></text></g><g><title>__tcp_transmit_skb (1 samples, 0.31%)</title><rect x="1.8462%" y="437" width="0.3077%" height="15" fill="rgb(225,35,8)"/><text x="2.0962%" y="447.50"></text></g><g><title>__ip_queue_xmit (1 samples, 0.31%)</title><rect x="1.8462%" y="421" width="0.3077%" height="15" fill="rgb(250,213,24)"/><text x="2.0962%" y="431.50"></text></g><g><title>ip_output (1 samples, 0.31%)</title><rect x="1.8462%" y="405" width="0.3077%" height="15" fill="rgb(247,123,22)"/><text x="2.0962%" y="415.50"></text></g><g><title>ip_finish_output2 (1 samples, 0.31%)</title><rect x="1.8462%" y="389" width="0.3077%" height="15" fill="rgb(231,138,38)"/><text x="2.0962%" y="399.50"></text></g><g><title>__dev_queue_xmit (1 samples, 0.31%)</title><rect x="1.8462%" y="373" width="0.3077%" height="15" fill="rgb(231,145,46)"/><text x="2.0962%" y="383.50"></text></g><g><title>validate_xmit_skb (1 samples, 0.31%)</title><rect x="1.8462%" y="357" width="0.3077%" height="15" fill="rgb(251,118,11)"/><text x="2.0962%" y="367.50"></text></g><g><title>skb_csum_hwoffload_help (1 samples, 0.31%)</title><rect x="1.8462%" y="341" width="0.3077%" height="15" fill="rgb(217,147,25)"/><text x="2.0962%" y="351.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="2.1538%" y="821" width="0.3077%" height="15" fill="rgb(247,81,37)"/><text x="2.4038%" y="831.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="2.1538%" y="805" width="0.3077%" height="15" fill="rgb(209,12,38)"/><text x="2.4038%" y="815.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="2.1538%" y="789" width="0.3077%" height="15" fill="rgb(227,1,9)"/><text x="2.4038%" y="799.50"></text></g><g><title>dlopen (1 samples, 0.31%)</title><rect x="2.1538%" y="773" width="0.3077%" height="15" fill="rgb(248,47,43)"/><text x="2.4038%" y="783.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.31%)</title><rect x="2.1538%" y="757" width="0.3077%" height="15" fill="rgb(221,10,30)"/><text x="2.4038%" y="767.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.31%)</title><rect x="2.1538%" y="741" width="0.3077%" height="15" fill="rgb(210,229,1)"/><text x="2.4038%" y="751.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.31%)</title><rect x="2.1538%" y="725" width="0.3077%" height="15" fill="rgb(222,148,37)"/><text x="2.4038%" y="735.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.31%)</title><rect x="2.1538%" y="709" width="0.3077%" height="15" fill="rgb(234,67,33)"/><text x="2.4038%" y="719.50"></text></g><g><title>_dl_open (1 samples, 0.31%)</title><rect x="2.1538%" y="693" width="0.3077%" height="15" fill="rgb(247,98,35)"/><text x="2.4038%" y="703.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.31%)</title><rect x="2.1538%" y="677" width="0.3077%" height="15" fill="rgb(247,138,52)"/><text x="2.4038%" y="687.50"></text></g><g><title>dl_open_worker (1 samples, 0.31%)</title><rect x="2.1538%" y="661" width="0.3077%" height="15" fill="rgb(213,79,30)"/><text x="2.4038%" y="671.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.31%)</title><rect x="2.1538%" y="645" width="0.3077%" height="15" fill="rgb(246,177,23)"/><text x="2.4038%" y="655.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.31%)</title><rect x="2.1538%" y="629" width="0.3077%" height="15" fill="rgb(230,62,27)"/><text x="2.4038%" y="639.50"></text></g><g><title>do_lookup_x (1 samples, 0.31%)</title><rect x="2.1538%" y="613" width="0.3077%" height="15" fill="rgb(216,154,8)"/><text x="2.4038%" y="623.50"></text></g><g><title>__calloc (1 samples, 0.31%)</title><rect x="2.1538%" y="597" width="0.3077%" height="15" fill="rgb(244,35,45)"/><text x="2.4038%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.31%)</title><rect x="2.1538%" y="581" width="0.3077%" height="15" fill="rgb(251,115,12)"/><text x="2.4038%" y="591.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.62%)</title><rect x="2.1538%" y="837" width="0.6154%" height="15" fill="rgb(240,54,50)"/><text x="2.4038%" y="847.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.31%)</title><rect x="2.4615%" y="821" width="0.3077%" height="15" fill="rgb(233,84,52)"/><text x="2.7115%" y="831.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="2.4615%" y="805" width="0.3077%" height="15" fill="rgb(207,117,47)"/><text x="2.7115%" y="815.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="2.4615%" y="789" width="0.3077%" height="15" fill="rgb(249,43,39)"/><text x="2.7115%" y="799.50"></text></g><g><title>__isoc99_fscanf (1 samples, 0.31%)</title><rect x="2.4615%" y="773" width="0.3077%" height="15" fill="rgb(209,38,44)"/><text x="2.7115%" y="783.50"></text></g><g><title>__vfscanf_internal (1 samples, 0.31%)</title><rect x="2.4615%" y="757" width="0.3077%" height="15" fill="rgb(236,212,23)"/><text x="2.7115%" y="767.50"></text></g><g><title>lobsters::main (3 samples, 0.92%)</title><rect x="2.1538%" y="853" width="0.9231%" height="15" fill="rgb(242,79,21)"/><text x="2.4038%" y="863.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.31%)</title><rect x="2.7692%" y="837" width="0.3077%" height="15" fill="rgb(211,96,35)"/><text x="3.0192%" y="847.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 0.31%)</title><rect x="2.7692%" y="821" width="0.3077%" height="15" fill="rgb(253,215,40)"/><text x="3.0192%" y="831.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.31%)</title><rect x="2.7692%" y="805" width="0.3077%" height="15" fill="rgb(211,81,21)"/><text x="3.0192%" y="815.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.31%)</title><rect x="2.7692%" y="789" width="0.3077%" height="15" fill="rgb(208,190,38)"/><text x="3.0192%" y="799.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.31%)</title><rect x="2.7692%" y="773" width="0.3077%" height="15" fill="rgb(235,213,38)"/><text x="3.0192%" y="783.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.31%)</title><rect x="2.7692%" y="757" width="0.3077%" height="15" fill="rgb(237,122,38)"/><text x="3.0192%" y="767.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.31%)</title><rect x="2.7692%" y="741" width="0.3077%" height="15" fill="rgb(244,218,35)"/><text x="3.0192%" y="751.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.31%)</title><rect x="2.7692%" y="725" width="0.3077%" height="15" fill="rgb(240,68,47)"/><text x="3.0192%" y="735.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.31%)</title><rect x="2.7692%" y="709" width="0.3077%" height="15" fill="rgb(210,16,53)"/><text x="3.0192%" y="719.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.31%)</title><rect x="2.7692%" y="693" width="0.3077%" height="15" fill="rgb(235,124,12)"/><text x="3.0192%" y="703.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.31%)</title><rect x="2.7692%" y="677" width="0.3077%" height="15" fill="rgb(224,169,11)"/><text x="3.0192%" y="687.50"></text></g><g><title>__libc_recv (1 samples, 0.31%)</title><rect x="2.7692%" y="661" width="0.3077%" height="15" fill="rgb(250,166,2)"/><text x="3.0192%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.31%)</title><rect x="2.7692%" y="645" width="0.3077%" height="15" fill="rgb(242,216,29)"/><text x="3.0192%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.31%)</title><rect x="2.7692%" y="629" width="0.3077%" height="15" fill="rgb(230,116,27)"/><text x="3.0192%" y="639.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 0.31%)</title><rect x="2.7692%" y="613" width="0.3077%" height="15" fill="rgb(228,99,48)"/><text x="3.0192%" y="623.50"></text></g><g><title>__sys_recvfrom (1 samples, 0.31%)</title><rect x="2.7692%" y="597" width="0.3077%" height="15" fill="rgb(253,11,6)"/><text x="3.0192%" y="607.50"></text></g><g><title>inet_recvmsg (1 samples, 0.31%)</title><rect x="2.7692%" y="581" width="0.3077%" height="15" fill="rgb(247,143,39)"/><text x="3.0192%" y="591.50"></text></g><g><title>tcp_recvmsg (1 samples, 0.31%)</title><rect x="2.7692%" y="565" width="0.3077%" height="15" fill="rgb(236,97,10)"/><text x="3.0192%" y="575.50"></text></g><g><title>sk_wait_data (1 samples, 0.31%)</title><rect x="2.7692%" y="549" width="0.3077%" height="15" fill="rgb(233,208,19)"/><text x="3.0192%" y="559.50"></text></g><g><title>wait_woken (1 samples, 0.31%)</title><rect x="2.7692%" y="533" width="0.3077%" height="15" fill="rgb(216,164,2)"/><text x="3.0192%" y="543.50"></text></g><g><title>schedule_timeout (1 samples, 0.31%)</title><rect x="2.7692%" y="517" width="0.3077%" height="15" fill="rgb(220,129,5)"/><text x="3.0192%" y="527.50"></text></g><g><title>schedule (1 samples, 0.31%)</title><rect x="2.7692%" y="501" width="0.3077%" height="15" fill="rgb(242,17,10)"/><text x="3.0192%" y="511.50"></text></g><g><title>__schedule (1 samples, 0.31%)</title><rect x="2.7692%" y="485" width="0.3077%" height="15" fill="rgb(242,107,0)"/><text x="3.0192%" y="495.50"></text></g><g><title>update_rq_clock (1 samples, 0.31%)</title><rect x="2.7692%" y="469" width="0.3077%" height="15" fill="rgb(251,28,31)"/><text x="3.0192%" y="479.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.31%)</title><rect x="2.7692%" y="453" width="0.3077%" height="15" fill="rgb(233,223,10)"/><text x="3.0192%" y="463.50"></text></g><g><title>sched_clock (1 samples, 0.31%)</title><rect x="2.7692%" y="437" width="0.3077%" height="15" fill="rgb(215,21,27)"/><text x="3.0192%" y="447.50"></text></g><g><title>native_sched_clock (1 samples, 0.31%)</title><rect x="2.7692%" y="421" width="0.3077%" height="15" fill="rgb(232,23,21)"/><text x="3.0192%" y="431.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.31%)</title><rect x="3.0769%" y="853" width="0.3077%" height="15" fill="rgb(244,5,23)"/><text x="3.3269%" y="863.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.31%)</title><rect x="3.0769%" y="837" width="0.3077%" height="15" fill="rgb(226,81,46)"/><text x="3.3269%" y="847.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.31%)</title><rect x="3.0769%" y="821" width="0.3077%" height="15" fill="rgb(247,70,30)"/><text x="3.3269%" y="831.50"></text></g><g><title>regex::compile::Compiler::c_repeat_range (1 samples, 0.31%)</title><rect x="3.0769%" y="805" width="0.3077%" height="15" fill="rgb(212,68,19)"/><text x="3.3269%" y="815.50"></text></g><g><title>regex::compile::Compiler::c_concat (1 samples, 0.31%)</title><rect x="3.0769%" y="789" width="0.3077%" height="15" fill="rgb(240,187,13)"/><text x="3.3269%" y="799.50"></text></g><g><title>regex::compile::Compiler::c_class (1 samples, 0.31%)</title><rect x="3.0769%" y="773" width="0.3077%" height="15" fill="rgb(223,113,26)"/><text x="3.3269%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.31%)</title><rect x="3.0769%" y="757" width="0.3077%" height="15" fill="rgb(206,192,2)"/><text x="3.3269%" y="767.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.31%)</title><rect x="3.0769%" y="741" width="0.3077%" height="15" fill="rgb(241,108,4)"/><text x="3.3269%" y="751.50"></text></g><g><title>_int_realloc (1 samples, 0.31%)</title><rect x="3.0769%" y="725" width="0.3077%" height="15" fill="rgb(247,173,49)"/><text x="3.3269%" y="735.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.31%)</title><rect x="3.0769%" y="709" width="0.3077%" height="15" fill="rgb(224,114,35)"/><text x="3.3269%" y="719.50"></text></g><g><title>page_fault (1 samples, 0.31%)</title><rect x="3.0769%" y="693" width="0.3077%" height="15" fill="rgb(245,159,27)"/><text x="3.3269%" y="703.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.31%)</title><rect x="3.0769%" y="677" width="0.3077%" height="15" fill="rgb(245,172,44)"/><text x="3.3269%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.31%)</title><rect x="3.3846%" y="661" width="0.3077%" height="15" fill="rgb(236,23,11)"/><text x="3.6346%" y="671.50"></text></g><g><title>__rdl_alloc (1 samples, 0.31%)</title><rect x="3.3846%" y="645" width="0.3077%" height="15" fill="rgb(205,117,38)"/><text x="3.6346%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.31%)</title><rect x="3.3846%" y="629" width="0.3077%" height="15" fill="rgb(237,72,25)"/><text x="3.6346%" y="639.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.92%)</title><rect x="3.3846%" y="725" width="0.9231%" height="15" fill="rgb(244,70,9)"/><text x="3.6346%" y="735.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (3 samples, 0.92%)</title><rect x="3.3846%" y="709" width="0.9231%" height="15" fill="rgb(217,125,39)"/><text x="3.6346%" y="719.50"></text></g><g><title>mysql::conn::Conn::next_text (3 samples, 0.92%)</title><rect x="3.3846%" y="693" width="0.9231%" height="15" fill="rgb(235,36,10)"/><text x="3.6346%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (3 samples, 0.92%)</title><rect x="3.3846%" y="677" width="0.9231%" height="15" fill="rgb(251,123,47)"/><text x="3.6346%" y="687.50"></text></g><g><title>std::io::error::Error::_new (2 samples, 0.62%)</title><rect x="3.6923%" y="661" width="0.6154%" height="15" fill="rgb(221,13,13)"/><text x="3.9423%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.62%)</title><rect x="3.6923%" y="645" width="0.6154%" height="15" fill="rgb(238,131,9)"/><text x="3.9423%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.62%)</title><rect x="3.6923%" y="629" width="0.6154%" height="15" fill="rgb(211,50,8)"/><text x="3.9423%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.62%)</title><rect x="3.6923%" y="613" width="0.6154%" height="15" fill="rgb(245,182,24)"/><text x="3.9423%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.62%)</title><rect x="3.6923%" y="597" width="0.6154%" height="15" fill="rgb(242,14,37)"/><text x="3.9423%" y="607.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.62%)</title><rect x="3.6923%" y="581" width="0.6154%" height="15" fill="rgb(246,228,12)"/><text x="3.9423%" y="591.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.62%)</title><rect x="3.6923%" y="565" width="0.6154%" height="15" fill="rgb(213,55,15)"/><text x="3.9423%" y="575.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.31%)</title><rect x="4.3077%" y="725" width="0.3077%" height="15" fill="rgb(209,9,3)"/><text x="4.5577%" y="735.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.31%)</title><rect x="4.3077%" y="709" width="0.3077%" height="15" fill="rgb(230,59,30)"/><text x="4.5577%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="4.3077%" y="693" width="0.3077%" height="15" fill="rgb(209,121,21)"/><text x="4.5577%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="4.3077%" y="677" width="0.3077%" height="15" fill="rgb(220,109,13)"/><text x="4.5577%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="4.3077%" y="661" width="0.3077%" height="15" fill="rgb(232,18,1)"/><text x="4.5577%" y="671.50"></text></g><g><title>__GI___openat (1 samples, 0.31%)</title><rect x="4.3077%" y="645" width="0.3077%" height="15" fill="rgb(215,41,42)"/><text x="4.5577%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.31%)</title><rect x="4.3077%" y="629" width="0.3077%" height="15" fill="rgb(224,123,36)"/><text x="4.5577%" y="639.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.31%)</title><rect x="4.3077%" y="613" width="0.3077%" height="15" fill="rgb(240,125,3)"/><text x="4.5577%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.31%)</title><rect x="4.6154%" y="677" width="0.3077%" height="15" fill="rgb(205,98,50)"/><text x="4.8654%" y="687.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.31%)</title><rect x="4.6154%" y="661" width="0.3077%" height="15" fill="rgb(205,185,37)"/><text x="4.8654%" y="671.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.31%)</title><rect x="6.1538%" y="453" width="0.3077%" height="15" fill="rgb(238,207,15)"/><text x="6.4038%" y="463.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.62%)</title><rect x="6.4615%" y="453" width="0.6154%" height="15" fill="rgb(213,199,42)"/><text x="6.7115%" y="463.50"></text></g><g><title>preempt_count_add (1 samples, 0.31%)</title><rect x="6.7692%" y="437" width="0.3077%" height="15" fill="rgb(235,201,11)"/><text x="7.0192%" y="447.50"></text></g><g><title>release_sock (1 samples, 0.31%)</title><rect x="7.0769%" y="453" width="0.3077%" height="15" fill="rgb(207,46,11)"/><text x="7.3269%" y="463.50"></text></g><g><title>update_cfs_group (1 samples, 0.31%)</title><rect x="7.6923%" y="357" width="0.3077%" height="15" fill="rgb(241,35,35)"/><text x="7.9423%" y="367.50"></text></g><g><title>update_curr (1 samples, 0.31%)</title><rect x="8.0000%" y="357" width="0.3077%" height="15" fill="rgb(243,32,47)"/><text x="8.2500%" y="367.50"></text></g><g><title>cpuacct_charge (1 samples, 0.31%)</title><rect x="8.0000%" y="341" width="0.3077%" height="15" fill="rgb(247,202,23)"/><text x="8.2500%" y="351.50"></text></g><g><title>dequeue_task_fair (3 samples, 0.92%)</title><rect x="7.6923%" y="389" width="0.9231%" height="15" fill="rgb(219,102,11)"/><text x="7.9423%" y="399.50"></text></g><g><title>dequeue_entity (3 samples, 0.92%)</title><rect x="7.6923%" y="373" width="0.9231%" height="15" fill="rgb(243,110,44)"/><text x="7.9423%" y="383.50"></text></g><g><title>update_load_avg (1 samples, 0.31%)</title><rect x="8.3077%" y="357" width="0.3077%" height="15" fill="rgb(222,74,54)"/><text x="8.5577%" y="367.50"></text></g><g><title>psi_task_change (1 samples, 0.31%)</title><rect x="8.6154%" y="389" width="0.3077%" height="15" fill="rgb(216,99,12)"/><text x="8.8654%" y="399.50"></text></g><g><title>psi_group_change (1 samples, 0.31%)</title><rect x="8.6154%" y="373" width="0.3077%" height="15" fill="rgb(226,22,26)"/><text x="8.8654%" y="383.50"></text></g><g><title>record_times (1 samples, 0.31%)</title><rect x="8.6154%" y="357" width="0.3077%" height="15" fill="rgb(217,163,10)"/><text x="8.8654%" y="367.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.31%)</title><rect x="8.6154%" y="341" width="0.3077%" height="15" fill="rgb(213,25,53)"/><text x="8.8654%" y="351.50"></text></g><g><title>sched_clock (1 samples, 0.31%)</title><rect x="8.6154%" y="325" width="0.3077%" height="15" fill="rgb(252,105,26)"/><text x="8.8654%" y="335.50"></text></g><g><title>native_sched_clock (1 samples, 0.31%)</title><rect x="8.6154%" y="309" width="0.3077%" height="15" fill="rgb(220,39,43)"/><text x="8.8654%" y="319.50"></text></g><g><title>put_prev_task_fair (1 samples, 0.31%)</title><rect x="8.9231%" y="389" width="0.3077%" height="15" fill="rgb(229,68,48)"/><text x="9.1731%" y="399.50"></text></g><g><title>put_prev_entity (1 samples, 0.31%)</title><rect x="8.9231%" y="373" width="0.3077%" height="15" fill="rgb(252,8,32)"/><text x="9.1731%" y="383.50"></text></g><g><title>check_cfs_rq_runtime (1 samples, 0.31%)</title><rect x="8.9231%" y="357" width="0.3077%" height="15" fill="rgb(223,20,43)"/><text x="9.1731%" y="367.50"></text></g><g><title>uclamp_rq_dec_id (1 samples, 0.31%)</title><rect x="9.2308%" y="389" width="0.3077%" height="15" fill="rgb(229,81,49)"/><text x="9.4808%" y="399.50"></text></g><g><title>__schedule (8 samples, 2.46%)</title><rect x="7.3846%" y="405" width="2.4615%" height="15" fill="rgb(236,28,36)"/><text x="7.6346%" y="415.50">__..</text></g><g><title>update_rq_clock (1 samples, 0.31%)</title><rect x="9.5385%" y="389" width="0.3077%" height="15" fill="rgb(249,185,26)"/><text x="9.7885%" y="399.50"></text></g><g><title>update_irq_load_avg (1 samples, 0.31%)</title><rect x="9.5385%" y="373" width="0.3077%" height="15" fill="rgb(249,174,33)"/><text x="9.7885%" y="383.50"></text></g><g><title>sk_wait_data (14 samples, 4.31%)</title><rect x="5.8462%" y="469" width="4.3077%" height="15" fill="rgb(233,201,37)"/><text x="6.0962%" y="479.50">sk_wa..</text></g><g><title>wait_woken (9 samples, 2.77%)</title><rect x="7.3846%" y="453" width="2.7692%" height="15" fill="rgb(221,78,26)"/><text x="7.6346%" y="463.50">wa..</text></g><g><title>schedule_timeout (9 samples, 2.77%)</title><rect x="7.3846%" y="437" width="2.7692%" height="15" fill="rgb(250,127,30)"/><text x="7.6346%" y="447.50">sc..</text></g><g><title>schedule (9 samples, 2.77%)</title><rect x="7.3846%" y="421" width="2.7692%" height="15" fill="rgb(230,49,44)"/><text x="7.6346%" y="431.50">sc..</text></g><g><title>preempt_count_add (1 samples, 0.31%)</title><rect x="9.8462%" y="405" width="0.3077%" height="15" fill="rgb(229,67,23)"/><text x="10.0962%" y="415.50"></text></g><g><title>[unknown] (30 samples, 9.23%)</title><rect x="1.2308%" y="869" width="9.2308%" height="15" fill="rgb(249,83,47)"/><text x="1.4808%" y="879.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (23 samples, 7.08%)</title><rect x="3.3846%" y="853" width="7.0769%" height="15" fill="rgb(215,43,3)"/><text x="3.6346%" y="863.50">std::rt::..</text></g><g><title>std::panic::catch_unwind (23 samples, 7.08%)</title><rect x="3.3846%" y="837" width="7.0769%" height="15" fill="rgb(238,154,13)"/><text x="3.6346%" y="847.50">std::pani..</text></g><g><title>std::panicking::try (23 samples, 7.08%)</title><rect x="3.3846%" y="821" width="7.0769%" height="15" fill="rgb(219,56,2)"/><text x="3.6346%" y="831.50">std::pani..</text></g><g><title>std::panicking::try::do_call (23 samples, 7.08%)</title><rect x="3.3846%" y="805" width="7.0769%" height="15" fill="rgb(233,0,4)"/><text x="3.6346%" y="815.50">std::pani..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (23 samples, 7.08%)</title><rect x="3.3846%" y="789" width="7.0769%" height="15" fill="rgb(235,30,7)"/><text x="3.6346%" y="799.50">core::ops..</text></g><g><title>std::rt::lang_start::_{{closure}} (23 samples, 7.08%)</title><rect x="3.3846%" y="773" width="7.0769%" height="15" fill="rgb(250,79,13)"/><text x="3.6346%" y="783.50">std::rt::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (23 samples, 7.08%)</title><rect x="3.3846%" y="757" width="7.0769%" height="15" fill="rgb(211,146,34)"/><text x="3.6346%" y="767.50">std::sys_..</text></g><g><title>lobsters::main (23 samples, 7.08%)</title><rect x="3.3846%" y="741" width="7.0769%" height="15" fill="rgb(228,22,38)"/><text x="3.6346%" y="751.50">lobsters:..</text></g><g><title>mysql::conn::Conn::_query (19 samples, 5.85%)</title><rect x="4.6154%" y="725" width="5.8462%" height="15" fill="rgb(235,168,5)"/><text x="4.8654%" y="735.50">mysql::..</text></g><g><title>mysql::conn::Conn::handle_result_set (19 samples, 5.85%)</title><rect x="4.6154%" y="709" width="5.8462%" height="15" fill="rgb(221,155,16)"/><text x="4.8654%" y="719.50">mysql::..</text></g><g><title>mysql::conn::Conn::read_packet (19 samples, 5.85%)</title><rect x="4.6154%" y="693" width="5.8462%" height="15" fill="rgb(215,215,53)"/><text x="4.8654%" y="703.50">mysql::..</text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 5.54%)</title><rect x="4.9231%" y="677" width="5.5385%" height="15" fill="rgb(223,4,10)"/><text x="5.1731%" y="687.50">&lt;mysql_..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (18 samples, 5.54%)</title><rect x="4.9231%" y="661" width="5.5385%" height="15" fill="rgb(234,103,6)"/><text x="5.1731%" y="671.50">&lt;std::i..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (18 samples, 5.54%)</title><rect x="4.9231%" y="645" width="5.5385%" height="15" fill="rgb(227,97,0)"/><text x="5.1731%" y="655.50">&lt;std::n..</text></g><g><title>std::sys_common::net::TcpStream::read (18 samples, 5.54%)</title><rect x="4.9231%" y="629" width="5.5385%" height="15" fill="rgb(234,150,53)"/><text x="5.1731%" y="639.50">std::sy..</text></g><g><title>std::sys::unix::net::Socket::read (18 samples, 5.54%)</title><rect x="4.9231%" y="613" width="5.5385%" height="15" fill="rgb(228,201,54)"/><text x="5.1731%" y="623.50">std::sy..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (18 samples, 5.54%)</title><rect x="4.9231%" y="597" width="5.5385%" height="15" fill="rgb(222,22,37)"/><text x="5.1731%" y="607.50">std::sy..</text></g><g><title>__libc_recv (18 samples, 5.54%)</title><rect x="4.9231%" y="581" width="5.5385%" height="15" fill="rgb(237,53,32)"/><text x="5.1731%" y="591.50">__libc_..</text></g><g><title>entry_SYSCALL_64 (18 samples, 5.54%)</title><rect x="4.9231%" y="565" width="5.5385%" height="15" fill="rgb(233,25,53)"/><text x="5.1731%" y="575.50">entry_S..</text></g><g><title>do_syscall_64 (18 samples, 5.54%)</title><rect x="4.9231%" y="549" width="5.5385%" height="15" fill="rgb(210,40,34)"/><text x="5.1731%" y="559.50">do_sysc..</text></g><g><title>__x64_sys_recvfrom (18 samples, 5.54%)</title><rect x="4.9231%" y="533" width="5.5385%" height="15" fill="rgb(241,220,44)"/><text x="5.1731%" y="543.50">__x64_s..</text></g><g><title>__sys_recvfrom (18 samples, 5.54%)</title><rect x="4.9231%" y="517" width="5.5385%" height="15" fill="rgb(235,28,35)"/><text x="5.1731%" y="527.50">__sys_r..</text></g><g><title>inet_recvmsg (18 samples, 5.54%)</title><rect x="4.9231%" y="501" width="5.5385%" height="15" fill="rgb(210,56,17)"/><text x="5.1731%" y="511.50">inet_re..</text></g><g><title>tcp_recvmsg (18 samples, 5.54%)</title><rect x="4.9231%" y="485" width="5.5385%" height="15" fill="rgb(224,130,29)"/><text x="5.1731%" y="495.50">tcp_rec..</text></g><g><title>skb_copy_datagram_iter (1 samples, 0.31%)</title><rect x="10.1538%" y="469" width="0.3077%" height="15" fill="rgb(235,212,8)"/><text x="10.4038%" y="479.50"></text></g><g><title>__skb_datagram_iter (1 samples, 0.31%)</title><rect x="10.1538%" y="453" width="0.3077%" height="15" fill="rgb(223,33,50)"/><text x="10.4038%" y="463.50"></text></g><g><title>_copy_to_iter (1 samples, 0.31%)</title><rect x="10.1538%" y="437" width="0.3077%" height="15" fill="rgb(219,149,13)"/><text x="10.4038%" y="447.50"></text></g><g><title>copy_user_enhanced_fast_string (1 samples, 0.31%)</title><rect x="10.1538%" y="421" width="0.3077%" height="15" fill="rgb(250,156,29)"/><text x="10.4038%" y="431.50"></text></g><g><title>page_fault (1 samples, 0.31%)</title><rect x="10.1538%" y="405" width="0.3077%" height="15" fill="rgb(216,193,19)"/><text x="10.4038%" y="415.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.31%)</title><rect x="10.1538%" y="389" width="0.3077%" height="15" fill="rgb(216,135,14)"/><text x="10.4038%" y="399.50"></text></g><g><title>handle_mm_fault (1 samples, 0.31%)</title><rect x="10.1538%" y="373" width="0.3077%" height="15" fill="rgb(241,47,5)"/><text x="10.4038%" y="383.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.31%)</title><rect x="10.1538%" y="357" width="0.3077%" height="15" fill="rgb(233,42,35)"/><text x="10.4038%" y="367.50"></text></g><g><title>__lru_cache_add (1 samples, 0.31%)</title><rect x="10.1538%" y="341" width="0.3077%" height="15" fill="rgb(231,13,6)"/><text x="10.4038%" y="351.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.31%)</title><rect x="10.1538%" y="325" width="0.3077%" height="15" fill="rgb(207,181,40)"/><text x="10.4038%" y="335.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.31%)</title><rect x="10.1538%" y="309" width="0.3077%" height="15" fill="rgb(254,173,49)"/><text x="10.4038%" y="319.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.62%)</title><rect x="10.4615%" y="693" width="0.6154%" height="15" fill="rgb(221,1,38)"/><text x="10.7115%" y="703.50"></text></g><g><title>mysql_common::row::new_row (1 samples, 0.31%)</title><rect x="10.7692%" y="677" width="0.3077%" height="15" fill="rgb(206,124,46)"/><text x="11.0192%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.31%)</title><rect x="10.7692%" y="661" width="0.3077%" height="15" fill="rgb(249,21,11)"/><text x="11.0192%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::SetIteratorState as core::convert::From&lt;mysql::conn::query_result::Or&lt;alloc::vec::Vec&lt;mysql_common::packets::Column&gt;,mysql_common::packets::OkPacket&gt;&gt;&gt;::from (1 samples, 0.31%)</title><rect x="11.0769%" y="693" width="0.3077%" height="15" fill="rgb(222,201,40)"/><text x="11.3269%" y="703.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.31%)</title><rect x="11.3846%" y="693" width="0.3077%" height="15" fill="rgb(235,61,29)"/><text x="11.6346%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.31%)</title><rect x="11.3846%" y="677" width="0.3077%" height="15" fill="rgb(219,207,3)"/><text x="11.6346%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.31%)</title><rect x="11.3846%" y="661" width="0.3077%" height="15" fill="rgb(222,56,46)"/><text x="11.6346%" y="671.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.31%)</title><rect x="11.3846%" y="645" width="0.3077%" height="15" fill="rgb(239,76,54)"/><text x="11.6346%" y="655.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.31%)</title><rect x="11.3846%" y="629" width="0.3077%" height="15" fill="rgb(231,124,27)"/><text x="11.6346%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.31%)</title><rect x="11.3846%" y="613" width="0.3077%" height="15" fill="rgb(249,195,6)"/><text x="11.6346%" y="623.50"></text></g><g><title>[libhwloc.so.15.2.0] (5 samples, 1.54%)</title><rect x="11.6923%" y="613" width="1.5385%" height="15" fill="rgb(237,174,47)"/><text x="11.9423%" y="623.50"></text></g><g><title>[libhwloc.so.15.2.0] (5 samples, 1.54%)</title><rect x="11.6923%" y="597" width="1.5385%" height="15" fill="rgb(206,201,31)"/><text x="11.9423%" y="607.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="12.9231%" y="581" width="0.3077%" height="15" fill="rgb(231,57,52)"/><text x="13.1731%" y="591.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="12.9231%" y="565" width="0.3077%" height="15" fill="rgb(248,177,22)"/><text x="13.1731%" y="575.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.31%)</title><rect x="12.9231%" y="549" width="0.3077%" height="15" fill="rgb(215,211,37)"/><text x="13.1731%" y="559.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.31%)</title><rect x="12.9231%" y="533" width="0.3077%" height="15" fill="rgb(241,128,51)"/><text x="13.1731%" y="543.50"></text></g><g><title>_int_malloc (1 samples, 0.31%)</title><rect x="12.9231%" y="517" width="0.3077%" height="15" fill="rgb(227,165,31)"/><text x="13.1731%" y="527.50"></text></g><g><title>page_fault (1 samples, 0.31%)</title><rect x="12.9231%" y="501" width="0.3077%" height="15" fill="rgb(228,167,24)"/><text x="13.1731%" y="511.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.31%)</title><rect x="12.9231%" y="485" width="0.3077%" height="15" fill="rgb(228,143,12)"/><text x="13.1731%" y="495.50"></text></g><g><title>handle_mm_fault (1 samples, 0.31%)</title><rect x="12.9231%" y="469" width="0.3077%" height="15" fill="rgb(249,149,8)"/><text x="13.1731%" y="479.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.31%)</title><rect x="12.9231%" y="453" width="0.3077%" height="15" fill="rgb(243,35,44)"/><text x="13.1731%" y="463.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.31%)</title><rect x="12.9231%" y="437" width="0.3077%" height="15" fill="rgb(246,89,9)"/><text x="13.1731%" y="447.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.31%)</title><rect x="12.9231%" y="421" width="0.3077%" height="15" fill="rgb(233,213,13)"/><text x="13.1731%" y="431.50"></text></g><g><title>hwloc_linux_get_tid_cpubind (1 samples, 0.31%)</title><rect x="13.2308%" y="613" width="0.3077%" height="15" fill="rgb(233,141,41)"/><text x="13.4808%" y="623.50"></text></g><g><title>__GI___sysconf (1 samples, 0.31%)</title><rect x="13.2308%" y="597" width="0.3077%" height="15" fill="rgb(239,167,4)"/><text x="13.4808%" y="607.50"></text></g><g><title>__bitmap_subset (1 samples, 0.31%)</title><rect x="13.5385%" y="517" width="0.3077%" height="15" fill="rgb(209,217,16)"/><text x="13.7885%" y="527.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (230 samples, 70.77%)</title><rect x="14.7692%" y="389" width="70.7692%" height="15" fill="rgb(219,88,35)"/><text x="15.0192%" y="399.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (230 samples, 70.77%)</title><rect x="14.7692%" y="373" width="70.7692%" height="15" fill="rgb(220,193,23)"/><text x="15.0192%" y="383.50">native_write_msr</text></g><g><title>cpu_stop_queue_work (234 samples, 72.00%)</title><rect x="13.8462%" y="485" width="72.0000%" height="15" fill="rgb(230,90,52)"/><text x="14.0962%" y="495.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (234 samples, 72.00%)</title><rect x="13.8462%" y="469" width="72.0000%" height="15" fill="rgb(252,106,19)"/><text x="14.0962%" y="479.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (234 samples, 72.00%)</title><rect x="13.8462%" y="453" width="72.0000%" height="15" fill="rgb(206,74,20)"/><text x="14.0962%" y="463.50">preempt_schedule_common</text></g><g><title>__schedule (234 samples, 72.00%)</title><rect x="13.8462%" y="437" width="72.0000%" height="15" fill="rgb(230,138,44)"/><text x="14.0962%" y="447.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 72.00%)</title><rect x="13.8462%" y="421" width="72.0000%" height="15" fill="rgb(235,182,43)"/><text x="14.0962%" y="431.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (232 samples, 71.38%)</title><rect x="14.4615%" y="405" width="71.3846%" height="15" fill="rgb(242,16,51)"/><text x="14.7115%" y="415.50">__perf_event_task_sched_in</text></g><g><title>__this_cpu_preempt_check (1 samples, 0.31%)</title><rect x="85.5385%" y="389" width="0.3077%" height="15" fill="rgb(248,9,4)"/><text x="85.7885%" y="399.50"></text></g><g><title>hwloc::Topology::new (242 samples, 74.46%)</title><rect x="11.6923%" y="693" width="74.4615%" height="15" fill="rgb(210,31,22)"/><text x="11.9423%" y="703.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (242 samples, 74.46%)</title><rect x="11.6923%" y="677" width="74.4615%" height="15" fill="rgb(239,54,39)"/><text x="11.9423%" y="687.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 74.46%)</title><rect x="11.6923%" y="661" width="74.4615%" height="15" fill="rgb(230,99,41)"/><text x="11.9423%" y="671.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 74.46%)</title><rect x="11.6923%" y="645" width="74.4615%" height="15" fill="rgb(253,106,12)"/><text x="11.9423%" y="655.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (242 samples, 74.46%)</title><rect x="11.6923%" y="629" width="74.4615%" height="15" fill="rgb(213,46,41)"/><text x="11.9423%" y="639.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (236 samples, 72.62%)</title><rect x="13.5385%" y="613" width="72.6154%" height="15" fill="rgb(215,133,35)"/><text x="13.7885%" y="623.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (236 samples, 72.62%)</title><rect x="13.5385%" y="597" width="72.6154%" height="15" fill="rgb(213,28,5)"/><text x="13.7885%" y="607.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (236 samples, 72.62%)</title><rect x="13.5385%" y="581" width="72.6154%" height="15" fill="rgb(215,77,49)"/><text x="13.7885%" y="591.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (236 samples, 72.62%)</title><rect x="13.5385%" y="565" width="72.6154%" height="15" fill="rgb(248,100,22)"/><text x="13.7885%" y="575.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (236 samples, 72.62%)</title><rect x="13.5385%" y="549" width="72.6154%" height="15" fill="rgb(208,67,9)"/><text x="13.7885%" y="559.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (236 samples, 72.62%)</title><rect x="13.5385%" y="533" width="72.6154%" height="15" fill="rgb(219,133,21)"/><text x="13.7885%" y="543.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 72.31%)</title><rect x="13.8462%" y="517" width="72.3077%" height="15" fill="rgb(246,46,29)"/><text x="14.0962%" y="527.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (235 samples, 72.31%)</title><rect x="13.8462%" y="501" width="72.3077%" height="15" fill="rgb(246,185,52)"/><text x="14.0962%" y="511.50">stop_one_cpu</text></g><g><title>wait_for_completion (1 samples, 0.31%)</title><rect x="85.8462%" y="485" width="0.3077%" height="15" fill="rgb(252,136,11)"/><text x="86.0962%" y="495.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.31%)</title><rect x="85.8462%" y="469" width="0.3077%" height="15" fill="rgb(219,138,53)"/><text x="86.0962%" y="479.50"></text></g><g><title>dev_hard_start_xmit (1 samples, 0.31%)</title><rect x="86.1538%" y="373" width="0.3077%" height="15" fill="rgb(211,51,23)"/><text x="86.4038%" y="383.50"></text></g><g><title>loopback_xmit (1 samples, 0.31%)</title><rect x="86.1538%" y="357" width="0.3077%" height="15" fill="rgb(247,221,28)"/><text x="86.4038%" y="367.50"></text></g><g><title>netif_rx (1 samples, 0.31%)</title><rect x="86.1538%" y="341" width="0.3077%" height="15" fill="rgb(251,222,45)"/><text x="86.4038%" y="351.50"></text></g><g><title>netif_rx_internal (1 samples, 0.31%)</title><rect x="86.1538%" y="325" width="0.3077%" height="15" fill="rgb(217,162,53)"/><text x="86.4038%" y="335.50"></text></g><g><title>ktime_get_with_offset (1 samples, 0.31%)</title><rect x="86.1538%" y="309" width="0.3077%" height="15" fill="rgb(229,93,14)"/><text x="86.4038%" y="319.50"></text></g><g><title>read_tsc (1 samples, 0.31%)</title><rect x="86.1538%" y="293" width="0.3077%" height="15" fill="rgb(209,67,49)"/><text x="86.4038%" y="303.50"></text></g><g><title>__dev_queue_xmit (4 samples, 1.23%)</title><rect x="86.1538%" y="389" width="1.2308%" height="15" fill="rgb(213,87,29)"/><text x="86.4038%" y="399.50"></text></g><g><title>validate_xmit_skb (3 samples, 0.92%)</title><rect x="86.4615%" y="373" width="0.9231%" height="15" fill="rgb(205,151,52)"/><text x="86.7115%" y="383.50"></text></g><g><title>skb_csum_hwoffload_help (1 samples, 0.31%)</title><rect x="87.0769%" y="357" width="0.3077%" height="15" fill="rgb(253,215,39)"/><text x="87.3269%" y="367.50"></text></g><g><title>irqtime_account_irq (1 samples, 0.31%)</title><rect x="87.3846%" y="325" width="0.3077%" height="15" fill="rgb(221,220,41)"/><text x="87.6346%" y="335.50"></text></g><g><title>__inet_lookup_established (1 samples, 0.31%)</title><rect x="88.3077%" y="197" width="0.3077%" height="15" fill="rgb(218,133,21)"/><text x="88.5577%" y="207.50"></text></g><g><title>enqueue_task (1 samples, 0.31%)</title><rect x="88.9231%" y="85" width="0.3077%" height="15" fill="rgb(221,193,43)"/><text x="89.1731%" y="95.50"></text></g><g><title>psi_task_change (1 samples, 0.31%)</title><rect x="88.9231%" y="69" width="0.3077%" height="15" fill="rgb(240,128,52)"/><text x="89.1731%" y="79.50"></text></g><g><title>psi_flags_change (1 samples, 0.31%)</title><rect x="88.9231%" y="53" width="0.3077%" height="15" fill="rgb(253,114,12)"/><text x="89.1731%" y="63.50"></text></g><g><title>enqueue_task_fair (2 samples, 0.62%)</title><rect x="89.2308%" y="85" width="0.6154%" height="15" fill="rgb(215,223,47)"/><text x="89.4808%" y="95.50"></text></g><g><title>enqueue_entity (2 samples, 0.62%)</title><rect x="89.2308%" y="69" width="0.6154%" height="15" fill="rgb(248,225,23)"/><text x="89.4808%" y="79.50"></text></g><g><title>update_load_avg (1 samples, 0.31%)</title><rect x="89.5385%" y="53" width="0.3077%" height="15" fill="rgb(250,108,0)"/><text x="89.7885%" y="63.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.31%)</title><rect x="89.5385%" y="37" width="0.3077%" height="15" fill="rgb(228,208,7)"/><text x="89.7885%" y="47.50"></text></g><g><title>ttwu_do_wakeup (1 samples, 0.31%)</title><rect x="89.8462%" y="85" width="0.3077%" height="15" fill="rgb(244,45,10)"/><text x="90.0962%" y="95.50"></text></g><g><title>check_preempt_curr (1 samples, 0.31%)</title><rect x="89.8462%" y="69" width="0.3077%" height="15" fill="rgb(207,125,25)"/><text x="90.0962%" y="79.50"></text></g><g><title>sock_def_readable (6 samples, 1.85%)</title><rect x="88.6154%" y="165" width="1.8462%" height="15" fill="rgb(210,195,18)"/><text x="88.8654%" y="175.50">s..</text></g><g><title>__wake_up_common_lock (6 samples, 1.85%)</title><rect x="88.6154%" y="149" width="1.8462%" height="15" fill="rgb(249,80,12)"/><text x="88.8654%" y="159.50">_..</text></g><g><title>__wake_up_common (6 samples, 1.85%)</title><rect x="88.6154%" y="133" width="1.8462%" height="15" fill="rgb(221,65,9)"/><text x="88.8654%" y="143.50">_..</text></g><g><title>pollwake (6 samples, 1.85%)</title><rect x="88.6154%" y="117" width="1.8462%" height="15" fill="rgb(235,49,36)"/><text x="88.8654%" y="127.50">p..</text></g><g><title>try_to_wake_up (6 samples, 1.85%)</title><rect x="88.6154%" y="101" width="1.8462%" height="15" fill="rgb(225,32,20)"/><text x="88.8654%" y="111.50">t..</text></g><g><title>update_rq_clock (1 samples, 0.31%)</title><rect x="90.1538%" y="85" width="0.3077%" height="15" fill="rgb(215,141,46)"/><text x="90.4038%" y="95.50"></text></g><g><title>tcp_schedule_loss_probe.part.0 (2 samples, 0.62%)</title><rect x="90.4615%" y="149" width="0.6154%" height="15" fill="rgb(250,160,47)"/><text x="90.7115%" y="159.50"></text></g><g><title>tcp_sync_mss (1 samples, 0.31%)</title><rect x="91.0769%" y="149" width="0.3077%" height="15" fill="rgb(216,222,40)"/><text x="91.3269%" y="159.50"></text></g><g><title>tcp_ack (4 samples, 1.23%)</title><rect x="90.4615%" y="165" width="1.2308%" height="15" fill="rgb(234,217,39)"/><text x="90.7115%" y="175.50"></text></g><g><title>tcp_update_pacing_rate (1 samples, 0.31%)</title><rect x="91.3846%" y="149" width="0.3077%" height="15" fill="rgb(207,178,40)"/><text x="91.6346%" y="159.50"></text></g><g><title>tcp_mstamp_refresh (1 samples, 0.31%)</title><rect x="91.6923%" y="165" width="0.3077%" height="15" fill="rgb(221,136,13)"/><text x="91.9423%" y="175.50"></text></g><g><title>__ip_queue_xmit (20 samples, 6.15%)</title><rect x="86.1538%" y="437" width="6.1538%" height="15" fill="rgb(249,199,10)"/><text x="86.4038%" y="447.50">__ip_que..</text></g><g><title>ip_output (20 samples, 6.15%)</title><rect x="86.1538%" y="421" width="6.1538%" height="15" fill="rgb(249,222,13)"/><text x="86.4038%" y="431.50">ip_output</text></g><g><title>ip_finish_output2 (20 samples, 6.15%)</title><rect x="86.1538%" y="405" width="6.1538%" height="15" fill="rgb(244,185,38)"/><text x="86.4038%" y="415.50">ip_finis..</text></g><g><title>__local_bh_enable_ip (16 samples, 4.92%)</title><rect x="87.3846%" y="389" width="4.9231%" height="15" fill="rgb(236,202,9)"/><text x="87.6346%" y="399.50">__loca..</text></g><g><title>do_softirq (16 samples, 4.92%)</title><rect x="87.3846%" y="373" width="4.9231%" height="15" fill="rgb(250,229,37)"/><text x="87.6346%" y="383.50">do_sof..</text></g><g><title>do_softirq_own_stack (16 samples, 4.92%)</title><rect x="87.3846%" y="357" width="4.9231%" height="15" fill="rgb(206,174,23)"/><text x="87.6346%" y="367.50">do_sof..</text></g><g><title>__do_softirq (16 samples, 4.92%)</title><rect x="87.3846%" y="341" width="4.9231%" height="15" fill="rgb(211,33,43)"/><text x="87.6346%" y="351.50">__do_s..</text></g><g><title>net_rx_action (15 samples, 4.62%)</title><rect x="87.6923%" y="325" width="4.6154%" height="15" fill="rgb(245,58,50)"/><text x="87.9423%" y="335.50">net_r..</text></g><g><title>process_backlog (14 samples, 4.31%)</title><rect x="88.0000%" y="309" width="4.3077%" height="15" fill="rgb(244,68,36)"/><text x="88.2500%" y="319.50">proce..</text></g><g><title>__netif_receive_skb_one_core (13 samples, 4.00%)</title><rect x="88.3077%" y="293" width="4.0000%" height="15" fill="rgb(232,229,15)"/><text x="88.5577%" y="303.50">__ne..</text></g><g><title>ip_rcv (13 samples, 4.00%)</title><rect x="88.3077%" y="277" width="4.0000%" height="15" fill="rgb(254,30,23)"/><text x="88.5577%" y="287.50">ip_r..</text></g><g><title>ip_local_deliver (13 samples, 4.00%)</title><rect x="88.3077%" y="261" width="4.0000%" height="15" fill="rgb(235,160,14)"/><text x="88.5577%" y="271.50">ip_l..</text></g><g><title>ip_local_deliver_finish (13 samples, 4.00%)</title><rect x="88.3077%" y="245" width="4.0000%" height="15" fill="rgb(212,155,44)"/><text x="88.5577%" y="255.50">ip_l..</text></g><g><title>ip_protocol_deliver_rcu (13 samples, 4.00%)</title><rect x="88.3077%" y="229" width="4.0000%" height="15" fill="rgb(226,2,50)"/><text x="88.5577%" y="239.50">ip_p..</text></g><g><title>tcp_v4_rcv (13 samples, 4.00%)</title><rect x="88.3077%" y="213" width="4.0000%" height="15" fill="rgb(234,177,6)"/><text x="88.5577%" y="223.50">tcp_..</text></g><g><title>tcp_v4_do_rcv (12 samples, 3.69%)</title><rect x="88.6154%" y="197" width="3.6923%" height="15" fill="rgb(217,24,9)"/><text x="88.8654%" y="207.50">tcp_..</text></g><g><title>tcp_rcv_established (12 samples, 3.69%)</title><rect x="88.6154%" y="181" width="3.6923%" height="15" fill="rgb(220,13,46)"/><text x="88.8654%" y="191.50">tcp_..</text></g><g><title>tcp_queue_rcv (1 samples, 0.31%)</title><rect x="92.0000%" y="165" width="0.3077%" height="15" fill="rgb(239,221,27)"/><text x="92.2500%" y="175.50"></text></g><g><title>__tcp_transmit_skb (21 samples, 6.46%)</title><rect x="86.1538%" y="453" width="6.4615%" height="15" fill="rgb(222,198,25)"/><text x="86.4038%" y="463.50">__tcp_tr..</text></g><g><title>tcp_rate_skb_sent (1 samples, 0.31%)</title><rect x="92.3077%" y="437" width="0.3077%" height="15" fill="rgb(211,99,13)"/><text x="92.5577%" y="447.50"></text></g><g><title>__tcp_push_pending_frames (22 samples, 6.77%)</title><rect x="86.1538%" y="485" width="6.7692%" height="15" fill="rgb(232,111,31)"/><text x="86.4038%" y="495.50">__tcp_pus..</text></g><g><title>tcp_write_xmit (22 samples, 6.77%)</title><rect x="86.1538%" y="469" width="6.7692%" height="15" fill="rgb(245,82,37)"/><text x="86.4038%" y="479.50">tcp_write..</text></g><g><title>tcp_event_new_data_sent (1 samples, 0.31%)</title><rect x="92.6154%" y="453" width="0.3077%" height="15" fill="rgb(227,149,46)"/><text x="92.8654%" y="463.50"></text></g><g><title>sk_reset_timer (1 samples, 0.31%)</title><rect x="92.6154%" y="437" width="0.3077%" height="15" fill="rgb(218,36,50)"/><text x="92.8654%" y="447.50"></text></g><g><title>__kmalloc_node_track_caller (2 samples, 0.62%)</title><rect x="92.9231%" y="453" width="0.6154%" height="15" fill="rgb(226,80,48)"/><text x="93.1731%" y="463.50"></text></g><g><title>__slab_alloc.constprop.0 (1 samples, 0.31%)</title><rect x="93.2308%" y="437" width="0.3077%" height="15" fill="rgb(238,224,15)"/><text x="93.4808%" y="447.50"></text></g><g><title>___slab_alloc (1 samples, 0.31%)</title><rect x="93.2308%" y="421" width="0.3077%" height="15" fill="rgb(241,136,10)"/><text x="93.4808%" y="431.50"></text></g><g><title>__ksize (1 samples, 0.31%)</title><rect x="93.5385%" y="453" width="0.3077%" height="15" fill="rgb(208,32,45)"/><text x="93.7885%" y="463.50"></text></g><g><title>sk_stream_alloc_skb (4 samples, 1.23%)</title><rect x="92.9231%" y="485" width="1.2308%" height="15" fill="rgb(207,135,9)"/><text x="93.1731%" y="495.50"></text></g><g><title>__alloc_skb (4 samples, 1.23%)</title><rect x="92.9231%" y="469" width="1.2308%" height="15" fill="rgb(206,86,44)"/><text x="93.1731%" y="479.50"></text></g><g><title>kmem_cache_alloc_node (1 samples, 0.31%)</title><rect x="93.8462%" y="453" width="0.3077%" height="15" fill="rgb(245,177,15)"/><text x="94.0962%" y="463.50"></text></g><g><title>memset_erms (1 samples, 0.31%)</title><rect x="93.8462%" y="437" width="0.3077%" height="15" fill="rgb(206,64,50)"/><text x="94.0962%" y="447.50"></text></g><g><title>__x64_sys_sendto (27 samples, 8.31%)</title><rect x="86.1538%" y="565" width="8.3077%" height="15" fill="rgb(234,36,40)"/><text x="86.4038%" y="575.50">__x64_sys_se..</text></g><g><title>__sys_sendto (27 samples, 8.31%)</title><rect x="86.1538%" y="549" width="8.3077%" height="15" fill="rgb(213,64,8)"/><text x="86.4038%" y="559.50">__sys_sendto</text></g><g><title>sock_sendmsg (27 samples, 8.31%)</title><rect x="86.1538%" y="533" width="8.3077%" height="15" fill="rgb(210,75,36)"/><text x="86.4038%" y="543.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (27 samples, 8.31%)</title><rect x="86.1538%" y="517" width="8.3077%" height="15" fill="rgb(229,88,21)"/><text x="86.4038%" y="527.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (27 samples, 8.31%)</title><rect x="86.1538%" y="501" width="8.3077%" height="15" fill="rgb(252,204,47)"/><text x="86.4038%" y="511.50">tcp_sendmsg_..</text></g><g><title>tcp_push (1 samples, 0.31%)</title><rect x="94.1538%" y="485" width="0.3077%" height="15" fill="rgb(208,77,27)"/><text x="94.4038%" y="495.50"></text></g><g><title>do_syscall_64 (29 samples, 8.92%)</title><rect x="86.1538%" y="581" width="8.9231%" height="15" fill="rgb(221,76,26)"/><text x="86.4038%" y="591.50">do_syscall_64</text></g><g><title>syscall_slow_exit_work (2 samples, 0.62%)</title><rect x="94.4615%" y="565" width="0.6154%" height="15" fill="rgb(225,139,18)"/><text x="94.7115%" y="575.50"></text></g><g><title>__audit_syscall_exit (2 samples, 0.62%)</title><rect x="94.4615%" y="549" width="0.6154%" height="15" fill="rgb(230,137,11)"/><text x="94.7115%" y="559.50"></text></g><g><title>__libc_send (31 samples, 9.54%)</title><rect x="86.1538%" y="613" width="9.5385%" height="15" fill="rgb(212,28,1)"/><text x="86.4038%" y="623.50">__libc_send</text></g><g><title>entry_SYSCALL_64 (31 samples, 9.54%)</title><rect x="86.1538%" y="597" width="9.5385%" height="15" fill="rgb(248,164,17)"/><text x="86.4038%" y="607.50">entry_SYSCALL_..</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.62%)</title><rect x="95.0769%" y="581" width="0.6154%" height="15" fill="rgb(222,171,42)"/><text x="95.3269%" y="591.50"></text></g><g><title>mysql::conn::Conn::_query (32 samples, 9.85%)</title><rect x="86.1538%" y="693" width="9.8462%" height="15" fill="rgb(243,84,45)"/><text x="86.4038%" y="703.50">mysql::conn::C..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (32 samples, 9.85%)</title><rect x="86.1538%" y="677" width="9.8462%" height="15" fill="rgb(252,49,23)"/><text x="86.4038%" y="687.50">mysql_common::..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (32 samples, 9.85%)</title><rect x="86.1538%" y="661" width="9.8462%" height="15" fill="rgb(215,19,7)"/><text x="86.4038%" y="671.50">std::io::buffe..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (32 samples, 9.85%)</title><rect x="86.1538%" y="645" width="9.8462%" height="15" fill="rgb(238,81,41)"/><text x="86.4038%" y="655.50">&lt;std::net::tcp..</text></g><g><title>std::sys_common::net::TcpStream::write (32 samples, 9.85%)</title><rect x="86.1538%" y="629" width="9.8462%" height="15" fill="rgb(210,199,37)"/><text x="86.4038%" y="639.50">std::sys_commo..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.31%)</title><rect x="95.6923%" y="613" width="0.3077%" height="15" fill="rgb(244,192,49)"/><text x="95.9423%" y="623.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.31%)</title><rect x="95.6923%" y="597" width="0.3077%" height="15" fill="rgb(226,211,11)"/><text x="95.9423%" y="607.50"></text></g><g><title>rand::rngs::thread::thread_rng (2 samples, 0.62%)</title><rect x="96.0000%" y="693" width="0.6154%" height="15" fill="rgb(236,162,54)"/><text x="96.2500%" y="703.50"></text></g><g><title>__libc_start_main (281 samples, 86.46%)</title><rect x="10.4615%" y="853" width="86.4615%" height="15" fill="rgb(220,229,9)"/><text x="10.7115%" y="863.50">__libc_start_main</text></g><g><title>main (281 samples, 86.46%)</title><rect x="10.4615%" y="837" width="86.4615%" height="15" fill="rgb(250,87,22)"/><text x="10.7115%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (281 samples, 86.46%)</title><rect x="10.4615%" y="821" width="86.4615%" height="15" fill="rgb(239,43,17)"/><text x="10.7115%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (281 samples, 86.46%)</title><rect x="10.4615%" y="805" width="86.4615%" height="15" fill="rgb(231,177,25)"/><text x="10.7115%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (281 samples, 86.46%)</title><rect x="10.4615%" y="789" width="86.4615%" height="15" fill="rgb(219,179,1)"/><text x="10.7115%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (281 samples, 86.46%)</title><rect x="10.4615%" y="773" width="86.4615%" height="15" fill="rgb(238,219,53)"/><text x="10.7115%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (281 samples, 86.46%)</title><rect x="10.4615%" y="757" width="86.4615%" height="15" fill="rgb(232,167,36)"/><text x="10.7115%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (281 samples, 86.46%)</title><rect x="10.4615%" y="741" width="86.4615%" height="15" fill="rgb(244,19,51)"/><text x="10.7115%" y="751.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (281 samples, 86.46%)</title><rect x="10.4615%" y="725" width="86.4615%" height="15" fill="rgb(224,6,22)"/><text x="10.7115%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters::main (281 samples, 86.46%)</title><rect x="10.4615%" y="709" width="86.4615%" height="15" fill="rgb(224,145,5)"/><text x="10.7115%" y="719.50">lobsters::main</text></g><g><title>std::net::each_addr (1 samples, 0.31%)</title><rect x="96.6154%" y="693" width="0.3077%" height="15" fill="rgb(234,130,49)"/><text x="96.8654%" y="703.50"></text></g><g><title>&lt;str as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.31%)</title><rect x="96.6154%" y="677" width="0.3077%" height="15" fill="rgb(254,6,2)"/><text x="96.8654%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.31%)</title><rect x="96.6154%" y="661" width="0.3077%" height="15" fill="rgb(208,96,46)"/><text x="96.8654%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.31%)</title><rect x="96.6154%" y="645" width="0.3077%" height="15" fill="rgb(239,3,39)"/><text x="96.8654%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.31%)</title><rect x="96.6154%" y="629" width="0.3077%" height="15" fill="rgb(233,210,1)"/><text x="96.8654%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.31%)</title><rect x="96.6154%" y="613" width="0.3077%" height="15" fill="rgb(244,137,37)"/><text x="96.8654%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.31%)</title><rect x="96.6154%" y="597" width="0.3077%" height="15" fill="rgb(240,136,2)"/><text x="96.8654%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.31%)</title><rect x="96.6154%" y="581" width="0.3077%" height="15" fill="rgb(239,18,37)"/><text x="96.8654%" y="591.50"></text></g><g><title>_start (282 samples, 86.77%)</title><rect x="10.4615%" y="869" width="86.7692%" height="15" fill="rgb(218,185,22)"/><text x="10.7115%" y="879.50">_start</text></g><g><title>_dl_start (1 samples, 0.31%)</title><rect x="96.9231%" y="853" width="0.3077%" height="15" fill="rgb(225,218,4)"/><text x="97.1731%" y="863.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.31%)</title><rect x="96.9231%" y="837" width="0.3077%" height="15" fill="rgb(230,182,32)"/><text x="97.1731%" y="847.50"></text></g><g><title>dl_main (1 samples, 0.31%)</title><rect x="96.9231%" y="821" width="0.3077%" height="15" fill="rgb(242,56,43)"/><text x="97.1731%" y="831.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.31%)</title><rect x="96.9231%" y="805" width="0.3077%" height="15" fill="rgb(233,99,24)"/><text x="97.1731%" y="815.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.31%)</title><rect x="96.9231%" y="789" width="0.3077%" height="15" fill="rgb(234,209,42)"/><text x="97.1731%" y="799.50"></text></g><g><title>openaux (1 samples, 0.31%)</title><rect x="96.9231%" y="773" width="0.3077%" height="15" fill="rgb(227,7,12)"/><text x="97.1731%" y="783.50"></text></g><g><title>_dl_map_object (1 samples, 0.31%)</title><rect x="96.9231%" y="757" width="0.3077%" height="15" fill="rgb(245,203,43)"/><text x="97.1731%" y="767.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.31%)</title><rect x="96.9231%" y="741" width="0.3077%" height="15" fill="rgb(238,205,33)"/><text x="97.1731%" y="751.50"></text></g><g><title>__GI___close_nocancel (1 samples, 0.31%)</title><rect x="96.9231%" y="725" width="0.3077%" height="15" fill="rgb(231,56,7)"/><text x="97.1731%" y="735.50"></text></g><g><title>error_entry (1 samples, 0.31%)</title><rect x="96.9231%" y="709" width="0.3077%" height="15" fill="rgb(244,186,29)"/><text x="97.1731%" y="719.50"></text></g><g><title>[vmlinux] (1 samples, 0.31%)</title><rect x="97.5385%" y="837" width="0.3077%" height="15" fill="rgb(234,111,31)"/><text x="97.7885%" y="847.50"></text></g><g><title>do_group_exit (1 samples, 0.31%)</title><rect x="97.5385%" y="821" width="0.3077%" height="15" fill="rgb(241,149,10)"/><text x="97.7885%" y="831.50"></text></g><g><title>do_exit (1 samples, 0.31%)</title><rect x="97.5385%" y="805" width="0.3077%" height="15" fill="rgb(249,206,44)"/><text x="97.7885%" y="815.50"></text></g><g><title>mmput (1 samples, 0.31%)</title><rect x="97.5385%" y="789" width="0.3077%" height="15" fill="rgb(251,153,30)"/><text x="97.7885%" y="799.50"></text></g><g><title>exit_mmap (1 samples, 0.31%)</title><rect x="97.5385%" y="773" width="0.3077%" height="15" fill="rgb(239,152,38)"/><text x="97.7885%" y="783.50"></text></g><g><title>unmap_vmas (1 samples, 0.31%)</title><rect x="97.5385%" y="757" width="0.3077%" height="15" fill="rgb(249,139,47)"/><text x="97.7885%" y="767.50"></text></g><g><title>unmap_page_range (1 samples, 0.31%)</title><rect x="97.5385%" y="741" width="0.3077%" height="15" fill="rgb(244,64,35)"/><text x="97.7885%" y="751.50"></text></g><g><title>lobsters (319 samples, 98.15%)</title><rect x="0.0000%" y="885" width="98.1538%" height="15" fill="rgb(216,46,15)"/><text x="0.2500%" y="895.50">lobsters</text></g><g><title>entry_SYSCALL_64 (3 samples, 0.92%)</title><rect x="97.2308%" y="869" width="0.9231%" height="15" fill="rgb(250,74,19)"/><text x="97.4808%" y="879.50"></text></g><g><title>do_syscall_64 (2 samples, 0.62%)</title><rect x="97.5385%" y="853" width="0.6154%" height="15" fill="rgb(249,42,33)"/><text x="97.7885%" y="863.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.31%)</title><rect x="97.8462%" y="837" width="0.3077%" height="15" fill="rgb(242,149,17)"/><text x="98.0962%" y="847.50"></text></g><g><title>do_execve (1 samples, 0.31%)</title><rect x="97.8462%" y="821" width="0.3077%" height="15" fill="rgb(244,29,21)"/><text x="98.0962%" y="831.50"></text></g><g><title>__do_execve_file (1 samples, 0.31%)</title><rect x="97.8462%" y="805" width="0.3077%" height="15" fill="rgb(220,130,37)"/><text x="98.0962%" y="815.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.31%)</title><rect x="97.8462%" y="789" width="0.3077%" height="15" fill="rgb(211,67,2)"/><text x="98.0962%" y="799.50"></text></g><g><title>load_elf_binary (1 samples, 0.31%)</title><rect x="97.8462%" y="773" width="0.3077%" height="15" fill="rgb(235,68,52)"/><text x="98.0962%" y="783.50"></text></g><g><title>elf_map (1 samples, 0.31%)</title><rect x="97.8462%" y="757" width="0.3077%" height="15" fill="rgb(246,142,3)"/><text x="98.0962%" y="767.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.31%)</title><rect x="97.8462%" y="741" width="0.3077%" height="15" fill="rgb(241,25,7)"/><text x="98.0962%" y="751.50"></text></g><g><title>do_mmap (1 samples, 0.31%)</title><rect x="97.8462%" y="725" width="0.3077%" height="15" fill="rgb(242,119,39)"/><text x="98.0962%" y="735.50"></text></g><g><title>mmap_region (1 samples, 0.31%)</title><rect x="97.8462%" y="709" width="0.3077%" height="15" fill="rgb(241,98,45)"/><text x="98.0962%" y="719.50"></text></g><g><title>vma_merge (1 samples, 0.31%)</title><rect x="97.8462%" y="693" width="0.3077%" height="15" fill="rgb(254,28,30)"/><text x="98.0962%" y="703.50"></text></g><g><title>all (325 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(241,142,54)"/><text x="0.2500%" y="911.50"></text></g><g><title>perf (6 samples, 1.85%)</title><rect x="98.1538%" y="885" width="1.8462%" height="15" fill="rgb(222,85,15)"/><text x="98.4038%" y="895.50">p..</text></g><g><title>entry_SYSCALL_64 (6 samples, 1.85%)</title><rect x="98.1538%" y="869" width="1.8462%" height="15" fill="rgb(210,85,47)"/><text x="98.4038%" y="879.50">e..</text></g><g><title>do_syscall_64 (6 samples, 1.85%)</title><rect x="98.1538%" y="853" width="1.8462%" height="15" fill="rgb(224,206,25)"/><text x="98.4038%" y="863.50">d..</text></g><g><title>__x64_sys_execve (6 samples, 1.85%)</title><rect x="98.1538%" y="837" width="1.8462%" height="15" fill="rgb(243,201,19)"/><text x="98.4038%" y="847.50">_..</text></g><g><title>do_execve (6 samples, 1.85%)</title><rect x="98.1538%" y="821" width="1.8462%" height="15" fill="rgb(236,59,4)"/><text x="98.4038%" y="831.50">d..</text></g><g><title>__do_execve_file (6 samples, 1.85%)</title><rect x="98.1538%" y="805" width="1.8462%" height="15" fill="rgb(254,179,45)"/><text x="98.4038%" y="815.50">_..</text></g><g><title>search_binary_handler.part.0 (6 samples, 1.85%)</title><rect x="98.1538%" y="789" width="1.8462%" height="15" fill="rgb(226,14,10)"/><text x="98.4038%" y="799.50">s..</text></g><g><title>load_elf_binary (6 samples, 1.85%)</title><rect x="98.1538%" y="773" width="1.8462%" height="15" fill="rgb(244,27,41)"/><text x="98.4038%" y="783.50">l..</text></g><g><title>setup_new_exec (6 samples, 1.85%)</title><rect x="98.1538%" y="757" width="1.8462%" height="15" fill="rgb(235,35,32)"/><text x="98.4038%" y="767.50">s..</text></g><g><title>perf_event_exec (6 samples, 1.85%)</title><rect x="98.1538%" y="741" width="1.8462%" height="15" fill="rgb(218,68,31)"/><text x="98.4038%" y="751.50">p..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (6 samples, 1.85%)</title><rect x="98.1538%" y="725" width="1.8462%" height="15" fill="rgb(207,120,37)"/><text x="98.4038%" y="735.50">_..</text></g><g><title>native_write_msr (6 samples, 1.85%)</title><rect x="98.1538%" y="709" width="1.8462%" height="15" fill="rgb(227,98,0)"/><text x="98.4038%" y="719.50">n..</text></g></svg></svg>