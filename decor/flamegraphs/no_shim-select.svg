<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="998" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="981.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="981.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="0.0000%" y="917" width="0.1497%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="927.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="0.1497%" y="901" width="0.1497%" height="15" fill="rgb(217,0,24)"/><text x="0.3997%" y="911.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.30%)</title><rect x="0.2994%" y="901" width="0.2994%" height="15" fill="rgb(221,193,54)"/><text x="0.5494%" y="911.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.15%)</title><rect x="0.5988%" y="901" width="0.1497%" height="15" fill="rgb(248,212,6)"/><text x="0.8488%" y="911.50"></text></g><g><title>[libm-2.31.so] (1 samples, 0.15%)</title><rect x="0.5988%" y="885" width="0.1497%" height="15" fill="rgb(208,68,35)"/><text x="0.8488%" y="895.50"></text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="0.5988%" y="869" width="0.1497%" height="15" fill="rgb(232,128,0)"/><text x="0.8488%" y="879.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="0.5988%" y="853" width="0.1497%" height="15" fill="rgb(207,160,47)"/><text x="0.8488%" y="863.50"></text></g><g><title>handle_mm_fault (1 samples, 0.15%)</title><rect x="0.5988%" y="837" width="0.1497%" height="15" fill="rgb(228,23,34)"/><text x="0.8488%" y="847.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="0.5988%" y="821" width="0.1497%" height="15" fill="rgb(218,30,26)"/><text x="0.8488%" y="831.50"></text></g><g><title>filemap_map_pages (1 samples, 0.15%)</title><rect x="0.5988%" y="805" width="0.1497%" height="15" fill="rgb(220,122,19)"/><text x="0.8488%" y="815.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="0.7485%" y="901" width="0.1497%" height="15" fill="rgb(250,228,42)"/><text x="0.9985%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="0.8982%" y="901" width="0.1497%" height="15" fill="rgb(240,193,28)"/><text x="1.1482%" y="911.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (1 samples, 0.15%)</title><rect x="1.0479%" y="901" width="0.1497%" height="15" fill="rgb(216,20,37)"/><text x="1.2979%" y="911.50"></text></g><g><title>[[heap]] (8 samples, 1.20%)</title><rect x="0.1497%" y="917" width="1.1976%" height="15" fill="rgb(206,188,39)"/><text x="0.3997%" y="927.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.15%)</title><rect x="1.1976%" y="901" width="0.1497%" height="15" fill="rgb(217,207,13)"/><text x="1.4476%" y="911.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.30%)</title><rect x="1.3473%" y="901" width="0.2994%" height="15" fill="rgb(231,73,38)"/><text x="1.5973%" y="911.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.15%)</title><rect x="1.6467%" y="901" width="0.1497%" height="15" fill="rgb(225,20,46)"/><text x="1.8967%" y="911.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.30%)</title><rect x="1.7964%" y="901" width="0.2994%" height="15" fill="rgb(210,31,41)"/><text x="2.0464%" y="911.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (1 samples, 0.15%)</title><rect x="2.0958%" y="901" width="0.1497%" height="15" fill="rgb(221,200,47)"/><text x="2.3458%" y="911.50"></text></g><g><title>__libc_send (1 samples, 0.15%)</title><rect x="2.2455%" y="901" width="0.1497%" height="15" fill="rgb(226,26,5)"/><text x="2.4955%" y="911.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.15%)</title><rect x="2.2455%" y="885" width="0.1497%" height="15" fill="rgb(249,33,26)"/><text x="2.4955%" y="895.50"></text></g><g><title>core::fmt::write (3 samples, 0.45%)</title><rect x="2.3952%" y="901" width="0.4491%" height="15" fill="rgb(235,183,28)"/><text x="2.6452%" y="911.50"></text></g><g><title>mysql::conn::Conn::next_text (1 samples, 0.15%)</title><rect x="2.8443%" y="901" width="0.1497%" height="15" fill="rgb(221,5,38)"/><text x="3.0943%" y="911.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (1 samples, 0.15%)</title><rect x="2.9940%" y="901" width="0.1497%" height="15" fill="rgb(247,18,42)"/><text x="3.2440%" y="911.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.15%)</title><rect x="3.1437%" y="901" width="0.1497%" height="15" fill="rgb(241,131,45)"/><text x="3.3937%" y="911.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.15%)</title><rect x="3.2934%" y="901" width="0.1497%" height="15" fill="rgb(249,31,29)"/><text x="3.5434%" y="911.50"></text></g><g><title>mysql_common::row::new_row (1 samples, 0.15%)</title><rect x="3.4431%" y="901" width="0.1497%" height="15" fill="rgb(225,111,53)"/><text x="3.6931%" y="911.50"></text></g><g><title>[[stack]] (16 samples, 2.40%)</title><rect x="1.3473%" y="917" width="2.3952%" height="15" fill="rgb(238,160,17)"/><text x="1.5973%" y="927.50">[[..</text></g><g><title>mysql_common::value::read_text_values (1 samples, 0.15%)</title><rect x="3.5928%" y="901" width="0.1497%" height="15" fill="rgb(214,148,48)"/><text x="3.8428%" y="911.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.45%)</title><rect x="3.7425%" y="901" width="0.4491%" height="15" fill="rgb(232,36,49)"/><text x="3.9925%" y="911.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.15%)</title><rect x="4.1916%" y="901" width="0.1497%" height="15" fill="rgb(209,103,24)"/><text x="4.4416%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="4.3413%" y="885" width="0.1497%" height="15" fill="rgb(229,88,8)"/><text x="4.5913%" y="895.50"></text></g><g><title>[lobsters] (2 samples, 0.30%)</title><rect x="4.3413%" y="901" width="0.2994%" height="15" fill="rgb(213,181,19)"/><text x="4.5913%" y="911.50"></text></g><g><title>mysql_common::value::read_text_value (1 samples, 0.15%)</title><rect x="4.4910%" y="885" width="0.1497%" height="15" fill="rgb(254,191,54)"/><text x="4.7410%" y="895.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="4.6407%" y="901" width="0.1497%" height="15" fill="rgb(241,83,37)"/><text x="4.8907%" y="911.50"></text></g><g><title>__GI___sched_setaffinity_new (1 samples, 0.15%)</title><rect x="4.7904%" y="901" width="0.1497%" height="15" fill="rgb(233,36,39)"/><text x="5.0404%" y="911.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="4.9401%" y="693" width="0.1497%" height="15" fill="rgb(226,3,54)"/><text x="5.1901%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.35%)</title><rect x="4.9401%" y="741" width="1.3473%" height="15" fill="rgb(245,192,40)"/><text x="5.1901%" y="751.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (9 samples, 1.35%)</title><rect x="4.9401%" y="725" width="1.3473%" height="15" fill="rgb(238,167,29)"/><text x="5.1901%" y="735.50"></text></g><g><title>mysql::conn::Conn::next_text (9 samples, 1.35%)</title><rect x="4.9401%" y="709" width="1.3473%" height="15" fill="rgb(232,182,51)"/><text x="5.1901%" y="719.50"></text></g><g><title>mysql_common::value::read_text_values (8 samples, 1.20%)</title><rect x="5.0898%" y="693" width="1.1976%" height="15" fill="rgb(231,60,39)"/><text x="5.3398%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.45%)</title><rect x="5.8383%" y="677" width="0.4491%" height="15" fill="rgb(208,69,12)"/><text x="6.0883%" y="687.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="6.1377%" y="661" width="0.1497%" height="15" fill="rgb(235,93,37)"/><text x="6.3877%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.15%)</title><rect x="6.2874%" y="741" width="0.1497%" height="15" fill="rgb(213,116,39)"/><text x="6.5374%" y="751.50"></text></g><g><title>hwloc_topology_destroy (1 samples, 0.15%)</title><rect x="6.2874%" y="725" width="0.1497%" height="15" fill="rgb(222,207,29)"/><text x="6.5374%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.15%)</title><rect x="6.2874%" y="709" width="0.1497%" height="15" fill="rgb(206,96,30)"/><text x="6.5374%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.15%)</title><rect x="6.2874%" y="693" width="0.1497%" height="15" fill="rgb(218,138,4)"/><text x="6.5374%" y="703.50"></text></g><g><title>dlclose (1 samples, 0.15%)</title><rect x="6.2874%" y="677" width="0.1497%" height="15" fill="rgb(250,191,14)"/><text x="6.5374%" y="687.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.15%)</title><rect x="6.2874%" y="661" width="0.1497%" height="15" fill="rgb(239,60,40)"/><text x="6.5374%" y="671.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.15%)</title><rect x="6.2874%" y="645" width="0.1497%" height="15" fill="rgb(206,27,48)"/><text x="6.5374%" y="655.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.15%)</title><rect x="6.2874%" y="629" width="0.1497%" height="15" fill="rgb(225,35,8)"/><text x="6.5374%" y="639.50"></text></g><g><title>_dl_close (1 samples, 0.15%)</title><rect x="6.2874%" y="613" width="0.1497%" height="15" fill="rgb(250,213,24)"/><text x="6.5374%" y="623.50"></text></g><g><title>_dl_close_worker (1 samples, 0.15%)</title><rect x="6.2874%" y="597" width="0.1497%" height="15" fill="rgb(247,123,22)"/><text x="6.5374%" y="607.50"></text></g><g><title>_dl_unmap (1 samples, 0.15%)</title><rect x="6.2874%" y="581" width="0.1497%" height="15" fill="rgb(231,138,38)"/><text x="6.5374%" y="591.50"></text></g><g><title>munmap (1 samples, 0.15%)</title><rect x="6.2874%" y="565" width="0.1497%" height="15" fill="rgb(231,145,46)"/><text x="6.5374%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.15%)</title><rect x="6.2874%" y="549" width="0.1497%" height="15" fill="rgb(251,118,11)"/><text x="6.5374%" y="559.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="6.2874%" y="533" width="0.1497%" height="15" fill="rgb(217,147,25)"/><text x="6.5374%" y="543.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.15%)</title><rect x="6.2874%" y="517" width="0.1497%" height="15" fill="rgb(247,81,37)"/><text x="6.5374%" y="527.50"></text></g><g><title>__vm_munmap (1 samples, 0.15%)</title><rect x="6.2874%" y="501" width="0.1497%" height="15" fill="rgb(209,12,38)"/><text x="6.5374%" y="511.50"></text></g><g><title>__do_munmap (1 samples, 0.15%)</title><rect x="6.2874%" y="485" width="0.1497%" height="15" fill="rgb(227,1,9)"/><text x="6.5374%" y="495.50"></text></g><g><title>unmap_region (1 samples, 0.15%)</title><rect x="6.2874%" y="469" width="0.1497%" height="15" fill="rgb(248,47,43)"/><text x="6.5374%" y="479.50"></text></g><g><title>unmap_vmas (1 samples, 0.15%)</title><rect x="6.2874%" y="453" width="0.1497%" height="15" fill="rgb(221,10,30)"/><text x="6.5374%" y="463.50"></text></g><g><title>unmap_page_range (1 samples, 0.15%)</title><rect x="6.2874%" y="437" width="0.1497%" height="15" fill="rgb(210,229,1)"/><text x="6.5374%" y="447.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.15%)</title><rect x="6.4371%" y="741" width="0.1497%" height="15" fill="rgb(222,148,37)"/><text x="6.6871%" y="751.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.15%)</title><rect x="6.4371%" y="725" width="0.1497%" height="15" fill="rgb(234,67,33)"/><text x="6.6871%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.15%)</title><rect x="6.4371%" y="709" width="0.1497%" height="15" fill="rgb(247,98,35)"/><text x="6.6871%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.15%)</title><rect x="6.4371%" y="693" width="0.1497%" height="15" fill="rgb(247,138,52)"/><text x="6.6871%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.15%)</title><rect x="6.4371%" y="677" width="0.1497%" height="15" fill="rgb(213,79,30)"/><text x="6.6871%" y="687.50"></text></g><g><title>__libc_close (1 samples, 0.15%)</title><rect x="6.4371%" y="661" width="0.1497%" height="15" fill="rgb(246,177,23)"/><text x="6.6871%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.15%)</title><rect x="6.4371%" y="645" width="0.1497%" height="15" fill="rgb(230,62,27)"/><text x="6.6871%" y="655.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="6.4371%" y="629" width="0.1497%" height="15" fill="rgb(216,154,8)"/><text x="6.6871%" y="639.50"></text></g><g><title>task_work_run (1 samples, 0.15%)</title><rect x="6.4371%" y="613" width="0.1497%" height="15" fill="rgb(244,35,45)"/><text x="6.6871%" y="623.50"></text></g><g><title>call_rcu (1 samples, 0.15%)</title><rect x="6.4371%" y="597" width="0.1497%" height="15" fill="rgb(251,115,12)"/><text x="6.6871%" y="607.50"></text></g><g><title>__rust_dealloc (1 samples, 0.15%)</title><rect x="6.7365%" y="693" width="0.1497%" height="15" fill="rgb(240,54,50)"/><text x="6.9865%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.15%)</title><rect x="6.8862%" y="693" width="0.1497%" height="15" fill="rgb(233,84,52)"/><text x="7.1362%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (4 samples, 0.60%)</title><rect x="6.5868%" y="709" width="0.5988%" height="15" fill="rgb(207,117,47)"/><text x="6.8368%" y="719.50"></text></g><g><title>std::io::error::Error::_new (1 samples, 0.15%)</title><rect x="7.0359%" y="693" width="0.1497%" height="15" fill="rgb(249,43,39)"/><text x="7.2859%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.15%)</title><rect x="7.0359%" y="677" width="0.1497%" height="15" fill="rgb(209,38,44)"/><text x="7.2859%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.15%)</title><rect x="7.0359%" y="661" width="0.1497%" height="15" fill="rgb(236,212,23)"/><text x="7.2859%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.15%)</title><rect x="7.0359%" y="645" width="0.1497%" height="15" fill="rgb(242,79,21)"/><text x="7.2859%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="7.0359%" y="629" width="0.1497%" height="15" fill="rgb(211,96,35)"/><text x="7.2859%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="7.0359%" y="613" width="0.1497%" height="15" fill="rgb(253,215,40)"/><text x="7.2859%" y="623.50"></text></g><g><title>__libc_start_main (18 samples, 2.69%)</title><rect x="4.9401%" y="901" width="2.6946%" height="15" fill="rgb(211,81,21)"/><text x="5.1901%" y="911.50">__..</text></g><g><title>main (18 samples, 2.69%)</title><rect x="4.9401%" y="885" width="2.6946%" height="15" fill="rgb(208,190,38)"/><text x="5.1901%" y="895.50">ma..</text></g><g><title>std::rt::lang_start_internal (18 samples, 2.69%)</title><rect x="4.9401%" y="869" width="2.6946%" height="15" fill="rgb(235,213,38)"/><text x="5.1901%" y="879.50">st..</text></g><g><title>std::panic::catch_unwind (18 samples, 2.69%)</title><rect x="4.9401%" y="853" width="2.6946%" height="15" fill="rgb(237,122,38)"/><text x="5.1901%" y="863.50">st..</text></g><g><title>std::panicking::try (18 samples, 2.69%)</title><rect x="4.9401%" y="837" width="2.6946%" height="15" fill="rgb(244,218,35)"/><text x="5.1901%" y="847.50">st..</text></g><g><title>std::panicking::try::do_call (18 samples, 2.69%)</title><rect x="4.9401%" y="821" width="2.6946%" height="15" fill="rgb(240,68,47)"/><text x="5.1901%" y="831.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (18 samples, 2.69%)</title><rect x="4.9401%" y="805" width="2.6946%" height="15" fill="rgb(210,16,53)"/><text x="5.1901%" y="815.50">co..</text></g><g><title>std::rt::lang_start::_{{closure}} (18 samples, 2.69%)</title><rect x="4.9401%" y="789" width="2.6946%" height="15" fill="rgb(235,124,12)"/><text x="5.1901%" y="799.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 2.69%)</title><rect x="4.9401%" y="773" width="2.6946%" height="15" fill="rgb(224,169,11)"/><text x="5.1901%" y="783.50">st..</text></g><g><title>lobsters::main (18 samples, 2.69%)</title><rect x="4.9401%" y="757" width="2.6946%" height="15" fill="rgb(250,166,2)"/><text x="5.1901%" y="767.50">lo..</text></g><g><title>mysql::conn::Conn::_query (7 samples, 1.05%)</title><rect x="6.5868%" y="741" width="1.0479%" height="15" fill="rgb(242,216,29)"/><text x="6.8368%" y="751.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (7 samples, 1.05%)</title><rect x="6.5868%" y="725" width="1.0479%" height="15" fill="rgb(230,116,27)"/><text x="6.8368%" y="735.50"></text></g><g><title>mysql_common::packets::column_from_payload (3 samples, 0.45%)</title><rect x="7.1856%" y="709" width="0.4491%" height="15" fill="rgb(228,99,48)"/><text x="7.4356%" y="719.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (1 samples, 0.15%)</title><rect x="7.4850%" y="693" width="0.1497%" height="15" fill="rgb(253,11,6)"/><text x="7.7350%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="7.6347%" y="901" width="0.1497%" height="15" fill="rgb(247,143,39)"/><text x="7.8847%" y="911.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.15%)</title><rect x="7.7844%" y="901" width="0.1497%" height="15" fill="rgb(236,97,10)"/><text x="8.0344%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="8.0838%" y="757" width="0.1497%" height="15" fill="rgb(233,208,19)"/><text x="8.3338%" y="767.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="8.0838%" y="741" width="0.1497%" height="15" fill="rgb(216,164,2)"/><text x="8.3338%" y="751.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="8.8323%" y="741" width="0.1497%" height="15" fill="rgb(220,129,5)"/><text x="9.0823%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 0.15%)</title><rect x="8.9820%" y="741" width="0.1497%" height="15" fill="rgb(242,17,10)"/><text x="9.2320%" y="751.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 1.35%)</title><rect x="8.0838%" y="885" width="1.3473%" height="15" fill="rgb(242,107,0)"/><text x="8.3338%" y="895.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (9 samples, 1.35%)</title><rect x="8.0838%" y="869" width="1.3473%" height="15" fill="rgb(251,28,31)"/><text x="8.3338%" y="879.50"></text></g><g><title>mysql::conn::Conn::next_text (9 samples, 1.35%)</title><rect x="8.0838%" y="853" width="1.3473%" height="15" fill="rgb(233,223,10)"/><text x="8.3338%" y="863.50"></text></g><g><title>mysql::conn::Conn::read_packet (9 samples, 1.35%)</title><rect x="8.0838%" y="837" width="1.3473%" height="15" fill="rgb(215,21,27)"/><text x="8.3338%" y="847.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.35%)</title><rect x="8.0838%" y="821" width="1.3473%" height="15" fill="rgb(232,23,21)"/><text x="8.3338%" y="831.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (9 samples, 1.35%)</title><rect x="8.0838%" y="805" width="1.3473%" height="15" fill="rgb(244,5,23)"/><text x="8.3338%" y="815.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (9 samples, 1.35%)</title><rect x="8.0838%" y="789" width="1.3473%" height="15" fill="rgb(226,81,46)"/><text x="8.3338%" y="799.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (9 samples, 1.35%)</title><rect x="8.0838%" y="773" width="1.3473%" height="15" fill="rgb(247,70,30)"/><text x="8.3338%" y="783.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (8 samples, 1.20%)</title><rect x="8.2335%" y="757" width="1.1976%" height="15" fill="rgb(212,68,19)"/><text x="8.4835%" y="767.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (2 samples, 0.30%)</title><rect x="9.1317%" y="741" width="0.2994%" height="15" fill="rgb(240,187,13)"/><text x="9.3817%" y="751.50"></text></g><g><title>lobsters::init_database (1 samples, 0.15%)</title><rect x="9.4311%" y="885" width="0.1497%" height="15" fill="rgb(223,113,26)"/><text x="9.6811%" y="895.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.15%)</title><rect x="9.4311%" y="869" width="0.1497%" height="15" fill="rgb(206,192,2)"/><text x="9.6811%" y="879.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.15%)</title><rect x="9.4311%" y="853" width="0.1497%" height="15" fill="rgb(241,108,4)"/><text x="9.6811%" y="863.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.15%)</title><rect x="9.4311%" y="837" width="0.1497%" height="15" fill="rgb(247,173,49)"/><text x="9.6811%" y="847.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::encode (1 samples, 0.15%)</title><rect x="9.4311%" y="821" width="0.1497%" height="15" fill="rgb(224,114,35)"/><text x="9.6811%" y="831.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::encode (1 samples, 0.15%)</title><rect x="9.4311%" y="805" width="0.1497%" height="15" fill="rgb(245,159,27)"/><text x="9.6811%" y="815.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (1 samples, 0.15%)</title><rect x="9.4311%" y="789" width="0.1497%" height="15" fill="rgb(245,172,44)"/><text x="9.6811%" y="799.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="9.4311%" y="773" width="0.1497%" height="15" fill="rgb(236,23,11)"/><text x="9.6811%" y="783.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.15%)</title><rect x="9.4311%" y="757" width="0.1497%" height="15" fill="rgb(205,117,38)"/><text x="9.6811%" y="767.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="9.4311%" y="741" width="0.1497%" height="15" fill="rgb(237,72,25)"/><text x="9.6811%" y="751.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="9.5808%" y="757" width="0.1497%" height="15" fill="rgb(244,70,9)"/><text x="9.8308%" y="767.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="9.7305%" y="757" width="0.1497%" height="15" fill="rgb(217,125,39)"/><text x="9.9805%" y="767.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.15%)</title><rect x="9.7305%" y="741" width="0.1497%" height="15" fill="rgb(235,36,10)"/><text x="9.9805%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.60%)</title><rect x="9.5808%" y="773" width="0.5988%" height="15" fill="rgb(251,123,47)"/><text x="9.8308%" y="783.50"></text></g><g><title>__rust_alloc (2 samples, 0.30%)</title><rect x="9.8802%" y="757" width="0.2994%" height="15" fill="rgb(221,13,13)"/><text x="10.1302%" y="767.50"></text></g><g><title>lobsters::main (19 samples, 2.84%)</title><rect x="7.9341%" y="901" width="2.8443%" height="15" fill="rgb(238,131,9)"/><text x="8.1841%" y="911.50">lo..</text></g><g><title>mysql::conn::Conn::_query (8 samples, 1.20%)</title><rect x="9.5808%" y="885" width="1.1976%" height="15" fill="rgb(211,50,8)"/><text x="9.8308%" y="895.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (8 samples, 1.20%)</title><rect x="9.5808%" y="869" width="1.1976%" height="15" fill="rgb(245,182,24)"/><text x="9.8308%" y="879.50"></text></g><g><title>mysql::conn::Conn::read_packet (8 samples, 1.20%)</title><rect x="9.5808%" y="853" width="1.1976%" height="15" fill="rgb(242,14,37)"/><text x="9.8308%" y="863.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.20%)</title><rect x="9.5808%" y="837" width="1.1976%" height="15" fill="rgb(246,228,12)"/><text x="9.8308%" y="847.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (8 samples, 1.20%)</title><rect x="9.5808%" y="821" width="1.1976%" height="15" fill="rgb(213,55,15)"/><text x="9.8308%" y="831.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (8 samples, 1.20%)</title><rect x="9.5808%" y="805" width="1.1976%" height="15" fill="rgb(209,9,3)"/><text x="9.8308%" y="815.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (8 samples, 1.20%)</title><rect x="9.5808%" y="789" width="1.1976%" height="15" fill="rgb(230,59,30)"/><text x="9.8308%" y="799.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (4 samples, 0.60%)</title><rect x="10.1796%" y="773" width="0.5988%" height="15" fill="rgb(209,121,21)"/><text x="10.4296%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.15%)</title><rect x="10.6287%" y="757" width="0.1497%" height="15" fill="rgb(220,109,13)"/><text x="10.8787%" y="767.50"></text></g><g><title>main (3 samples, 0.45%)</title><rect x="10.7784%" y="901" width="0.4491%" height="15" fill="rgb(232,18,1)"/><text x="11.0284%" y="911.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.45%)</title><rect x="10.7784%" y="885" width="0.4491%" height="15" fill="rgb(215,41,42)"/><text x="11.0284%" y="895.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.45%)</title><rect x="10.7784%" y="869" width="0.4491%" height="15" fill="rgb(224,123,36)"/><text x="11.0284%" y="879.50"></text></g><g><title>std::panicking::try (3 samples, 0.45%)</title><rect x="10.7784%" y="853" width="0.4491%" height="15" fill="rgb(240,125,3)"/><text x="11.0284%" y="863.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.45%)</title><rect x="10.7784%" y="837" width="0.4491%" height="15" fill="rgb(205,98,50)"/><text x="11.0284%" y="847.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.45%)</title><rect x="10.7784%" y="821" width="0.4491%" height="15" fill="rgb(205,185,37)"/><text x="11.0284%" y="831.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.45%)</title><rect x="10.7784%" y="805" width="0.4491%" height="15" fill="rgb(238,207,15)"/><text x="11.0284%" y="815.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.45%)</title><rect x="10.7784%" y="789" width="0.4491%" height="15" fill="rgb(213,199,42)"/><text x="11.0284%" y="799.50"></text></g><g><title>lobsters::main (3 samples, 0.45%)</title><rect x="10.7784%" y="773" width="0.4491%" height="15" fill="rgb(235,201,11)"/><text x="11.0284%" y="783.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.45%)</title><rect x="10.7784%" y="757" width="0.4491%" height="15" fill="rgb(207,46,11)"/><text x="11.0284%" y="767.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (3 samples, 0.45%)</title><rect x="10.7784%" y="741" width="0.4491%" height="15" fill="rgb(241,35,35)"/><text x="11.0284%" y="751.50"></text></g><g><title>mysql::conn::Conn::next_text (3 samples, 0.45%)</title><rect x="10.7784%" y="725" width="0.4491%" height="15" fill="rgb(243,32,47)"/><text x="11.0284%" y="735.50"></text></g><g><title>mysql::conn::Conn::read_packet (3 samples, 0.45%)</title><rect x="10.7784%" y="709" width="0.4491%" height="15" fill="rgb(247,202,23)"/><text x="11.0284%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_ok (2 samples, 0.30%)</title><rect x="11.2275%" y="901" width="0.2994%" height="15" fill="rgb(219,102,11)"/><text x="11.4775%" y="911.50"></text></g><g><title>mysql::conn::Conn::read_packet (2 samples, 0.30%)</title><rect x="11.5269%" y="901" width="0.2994%" height="15" fill="rgb(243,110,44)"/><text x="11.7769%" y="911.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.15%)</title><rect x="11.8263%" y="901" width="0.1497%" height="15" fill="rgb(222,74,54)"/><text x="12.0763%" y="911.50"></text></g><g><title>mysql_common::value::read_text_values (1 samples, 0.15%)</title><rect x="11.9760%" y="901" width="0.1497%" height="15" fill="rgb(216,99,12)"/><text x="12.2260%" y="911.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.15%)</title><rect x="12.1257%" y="901" width="0.1497%" height="15" fill="rgb(226,22,26)"/><text x="12.3757%" y="911.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.15%)</title><rect x="12.1257%" y="885" width="0.1497%" height="15" fill="rgb(217,163,10)"/><text x="12.3757%" y="895.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.15%)</title><rect x="12.1257%" y="869" width="0.1497%" height="15" fill="rgb(213,25,53)"/><text x="12.3757%" y="879.50"></text></g><g><title>regex::compile::Compiler::c_repeat_range (1 samples, 0.15%)</title><rect x="12.1257%" y="853" width="0.1497%" height="15" fill="rgb(252,105,26)"/><text x="12.3757%" y="863.50"></text></g><g><title>regex::compile::Compiler::c_concat (1 samples, 0.15%)</title><rect x="12.1257%" y="837" width="0.1497%" height="15" fill="rgb(220,39,43)"/><text x="12.3757%" y="847.50"></text></g><g><title>regex::compile::Compiler::c_class (1 samples, 0.15%)</title><rect x="12.1257%" y="821" width="0.1497%" height="15" fill="rgb(229,68,48)"/><text x="12.3757%" y="831.50"></text></g><g><title>regex::compile::CompileClass::c_utf8_seq (1 samples, 0.15%)</title><rect x="12.1257%" y="805" width="0.1497%" height="15" fill="rgb(252,8,32)"/><text x="12.3757%" y="815.50"></text></g><g><title>mysql::conn::Conn::handle_ok (1 samples, 0.15%)</title><rect x="12.2754%" y="725" width="0.1497%" height="15" fill="rgb(223,20,43)"/><text x="12.5254%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="12.7246%" y="693" width="0.1497%" height="15" fill="rgb(229,81,49)"/><text x="12.9746%" y="703.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="12.8743%" y="693" width="0.1497%" height="15" fill="rgb(236,28,36)"/><text x="13.1243%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (5 samples, 0.75%)</title><rect x="12.4251%" y="709" width="0.7485%" height="15" fill="rgb(249,185,26)"/><text x="12.6751%" y="719.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="13.0240%" y="693" width="0.1497%" height="15" fill="rgb(249,174,33)"/><text x="13.2740%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.15%)</title><rect x="13.0240%" y="677" width="0.1497%" height="15" fill="rgb(233,201,37)"/><text x="13.2740%" y="687.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.45%)</title><rect x="13.1737%" y="709" width="0.4491%" height="15" fill="rgb(221,78,26)"/><text x="13.4237%" y="719.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (2 samples, 0.30%)</title><rect x="13.3234%" y="693" width="0.2994%" height="15" fill="rgb(250,127,30)"/><text x="13.5734%" y="703.50"></text></g><g><title>_int_free (4 samples, 0.60%)</title><rect x="13.6228%" y="709" width="0.5988%" height="15" fill="rgb(230,49,44)"/><text x="13.8728%" y="719.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.30%)</title><rect x="14.3713%" y="613" width="0.2994%" height="15" fill="rgb(229,67,23)"/><text x="14.6213%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="14.6707%" y="613" width="0.1497%" height="15" fill="rgb(249,83,47)"/><text x="14.9207%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.15%)</title><rect x="14.6707%" y="597" width="0.1497%" height="15" fill="rgb(215,43,3)"/><text x="14.9207%" y="607.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 2.69%)</title><rect x="12.2754%" y="773" width="2.6946%" height="15" fill="rgb(238,154,13)"/><text x="12.5254%" y="783.50">&lt;m..</text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (18 samples, 2.69%)</title><rect x="12.2754%" y="757" width="2.6946%" height="15" fill="rgb(219,56,2)"/><text x="12.5254%" y="767.50">&lt;m..</text></g><g><title>mysql::conn::Conn::next_text (18 samples, 2.69%)</title><rect x="12.2754%" y="741" width="2.6946%" height="15" fill="rgb(233,0,4)"/><text x="12.5254%" y="751.50">my..</text></g><g><title>mysql::conn::Conn::read_packet (17 samples, 2.54%)</title><rect x="12.4251%" y="725" width="2.5449%" height="15" fill="rgb(235,30,7)"/><text x="12.6751%" y="735.50">my..</text></g><g><title>std::io::error::Error::_new (5 samples, 0.75%)</title><rect x="14.2216%" y="709" width="0.7485%" height="15" fill="rgb(250,79,13)"/><text x="14.4716%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.75%)</title><rect x="14.2216%" y="693" width="0.7485%" height="15" fill="rgb(211,146,34)"/><text x="14.4716%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.60%)</title><rect x="14.3713%" y="677" width="0.5988%" height="15" fill="rgb(228,22,38)"/><text x="14.6213%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.60%)</title><rect x="14.3713%" y="661" width="0.5988%" height="15" fill="rgb(235,168,5)"/><text x="14.6213%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.60%)</title><rect x="14.3713%" y="645" width="0.5988%" height="15" fill="rgb(221,155,16)"/><text x="14.6213%" y="655.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.60%)</title><rect x="14.3713%" y="629" width="0.5988%" height="15" fill="rgb(215,215,53)"/><text x="14.6213%" y="639.50"></text></g><g><title>__rust_alloc (1 samples, 0.15%)</title><rect x="14.8204%" y="613" width="0.1497%" height="15" fill="rgb(223,4,10)"/><text x="15.0704%" y="623.50"></text></g><g><title>do_dentry_open (1 samples, 0.15%)</title><rect x="14.9701%" y="581" width="0.1497%" height="15" fill="rgb(234,103,6)"/><text x="15.2201%" y="591.50"></text></g><g><title>kernfs_fop_open (1 samples, 0.15%)</title><rect x="14.9701%" y="565" width="0.1497%" height="15" fill="rgb(227,97,0)"/><text x="15.2201%" y="575.50"></text></g><g><title>seq_open (1 samples, 0.15%)</title><rect x="14.9701%" y="549" width="0.1497%" height="15" fill="rgb(234,150,53)"/><text x="15.2201%" y="559.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.15%)</title><rect x="14.9701%" y="533" width="0.1497%" height="15" fill="rgb(228,201,54)"/><text x="15.2201%" y="543.50"></text></g><g><title>memcg_kmem_get_cache (1 samples, 0.15%)</title><rect x="14.9701%" y="517" width="0.1497%" height="15" fill="rgb(222,22,37)"/><text x="15.2201%" y="527.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.15%)</title><rect x="14.9701%" y="501" width="0.1497%" height="15" fill="rgb(237,53,32)"/><text x="15.2201%" y="511.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.30%)</title><rect x="14.9701%" y="773" width="0.2994%" height="15" fill="rgb(233,25,53)"/><text x="15.2201%" y="783.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.30%)</title><rect x="14.9701%" y="757" width="0.2994%" height="15" fill="rgb(210,40,34)"/><text x="15.2201%" y="767.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.30%)</title><rect x="14.9701%" y="741" width="0.2994%" height="15" fill="rgb(241,220,44)"/><text x="15.2201%" y="751.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.30%)</title><rect x="14.9701%" y="725" width="0.2994%" height="15" fill="rgb(235,28,35)"/><text x="15.2201%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.30%)</title><rect x="14.9701%" y="709" width="0.2994%" height="15" fill="rgb(210,56,17)"/><text x="15.2201%" y="719.50"></text></g><g><title>__GI___openat (2 samples, 0.30%)</title><rect x="14.9701%" y="693" width="0.2994%" height="15" fill="rgb(224,130,29)"/><text x="15.2201%" y="703.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.30%)</title><rect x="14.9701%" y="677" width="0.2994%" height="15" fill="rgb(235,212,8)"/><text x="15.2201%" y="687.50"></text></g><g><title>do_syscall_64 (2 samples, 0.30%)</title><rect x="14.9701%" y="661" width="0.2994%" height="15" fill="rgb(223,33,50)"/><text x="15.2201%" y="671.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.30%)</title><rect x="14.9701%" y="645" width="0.2994%" height="15" fill="rgb(219,149,13)"/><text x="15.2201%" y="655.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.30%)</title><rect x="14.9701%" y="629" width="0.2994%" height="15" fill="rgb(250,156,29)"/><text x="15.2201%" y="639.50"></text></g><g><title>do_filp_open (2 samples, 0.30%)</title><rect x="14.9701%" y="613" width="0.2994%" height="15" fill="rgb(216,193,19)"/><text x="15.2201%" y="623.50"></text></g><g><title>path_openat (2 samples, 0.30%)</title><rect x="14.9701%" y="597" width="0.2994%" height="15" fill="rgb(216,135,14)"/><text x="15.2201%" y="607.50"></text></g><g><title>link_path_walk (1 samples, 0.15%)</title><rect x="15.1198%" y="581" width="0.1497%" height="15" fill="rgb(241,47,5)"/><text x="15.3698%" y="591.50"></text></g><g><title>walk_component (1 samples, 0.15%)</title><rect x="15.1198%" y="565" width="0.1497%" height="15" fill="rgb(233,42,35)"/><text x="15.3698%" y="575.50"></text></g><g><title>lookup_fast.constprop.0 (1 samples, 0.15%)</title><rect x="15.1198%" y="549" width="0.1497%" height="15" fill="rgb(231,13,6)"/><text x="15.3698%" y="559.50"></text></g><g><title>kernfs_dop_revalidate (1 samples, 0.15%)</title><rect x="15.1198%" y="533" width="0.1497%" height="15" fill="rgb(207,181,40)"/><text x="15.3698%" y="543.50"></text></g><g><title>mutex_lock (1 samples, 0.15%)</title><rect x="15.1198%" y="517" width="0.1497%" height="15" fill="rgb(254,173,49)"/><text x="15.3698%" y="527.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="15.2695%" y="709" width="0.1497%" height="15" fill="rgb(221,1,38)"/><text x="15.5195%" y="719.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="15.4192%" y="709" width="0.1497%" height="15" fill="rgb(206,124,46)"/><text x="15.6692%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.45%)</title><rect x="15.2695%" y="725" width="0.4491%" height="15" fill="rgb(249,21,11)"/><text x="15.5195%" y="735.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="15.5689%" y="709" width="0.1497%" height="15" fill="rgb(222,201,40)"/><text x="15.8189%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.15%)</title><rect x="15.5689%" y="693" width="0.1497%" height="15" fill="rgb(235,61,29)"/><text x="15.8189%" y="703.50"></text></g><g><title>import_single_range (1 samples, 0.15%)</title><rect x="16.1677%" y="549" width="0.1497%" height="15" fill="rgb(219,207,3)"/><text x="16.4177%" y="559.50"></text></g><g><title>skb_release_data (1 samples, 0.15%)</title><rect x="16.7665%" y="501" width="0.1497%" height="15" fill="rgb(222,56,46)"/><text x="17.0165%" y="511.50"></text></g><g><title>__kfree_skb (2 samples, 0.30%)</title><rect x="16.7665%" y="517" width="0.2994%" height="15" fill="rgb(239,76,54)"/><text x="17.0165%" y="527.50"></text></g><g><title>skb_release_head_state (1 samples, 0.15%)</title><rect x="16.9162%" y="501" width="0.1497%" height="15" fill="rgb(231,124,27)"/><text x="17.1662%" y="511.50"></text></g><g><title>sock_rfree (1 samples, 0.15%)</title><rect x="16.9162%" y="485" width="0.1497%" height="15" fill="rgb(249,195,6)"/><text x="17.1662%" y="495.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.15%)</title><rect x="17.0659%" y="517" width="0.1497%" height="15" fill="rgb(237,174,47)"/><text x="17.3159%" y="527.50"></text></g><g><title>preempt_count_sub (1 samples, 0.15%)</title><rect x="17.0659%" y="501" width="0.1497%" height="15" fill="rgb(206,201,31)"/><text x="17.3159%" y="511.50"></text></g><g><title>release_sock (1 samples, 0.15%)</title><rect x="17.2156%" y="517" width="0.1497%" height="15" fill="rgb(231,57,52)"/><text x="17.4656%" y="527.50"></text></g><g><title>_raw_spin_lock_bh (1 samples, 0.15%)</title><rect x="17.2156%" y="501" width="0.1497%" height="15" fill="rgb(248,177,22)"/><text x="17.4656%" y="511.50"></text></g><g><title>preempt_count_add (1 samples, 0.15%)</title><rect x="17.2156%" y="485" width="0.1497%" height="15" fill="rgb(215,211,37)"/><text x="17.4656%" y="495.50"></text></g><g><title>_raw_spin_lock_bh (5 samples, 0.75%)</title><rect x="17.6647%" y="501" width="0.7485%" height="15" fill="rgb(241,128,51)"/><text x="17.9147%" y="511.50"></text></g><g><title>preempt_count_add (1 samples, 0.15%)</title><rect x="18.2635%" y="485" width="0.1497%" height="15" fill="rgb(227,165,31)"/><text x="18.5135%" y="495.50"></text></g><g><title>in_lock_functions (1 samples, 0.15%)</title><rect x="18.2635%" y="469" width="0.1497%" height="15" fill="rgb(228,167,24)"/><text x="18.5135%" y="479.50"></text></g><g><title>release_sock (2 samples, 0.30%)</title><rect x="18.4132%" y="501" width="0.2994%" height="15" fill="rgb(228,143,12)"/><text x="18.6632%" y="511.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.30%)</title><rect x="18.4132%" y="485" width="0.2994%" height="15" fill="rgb(249,149,8)"/><text x="18.6632%" y="495.50"></text></g><g><title>preempt_count_add (1 samples, 0.15%)</title><rect x="18.5629%" y="469" width="0.1497%" height="15" fill="rgb(243,35,44)"/><text x="18.8129%" y="479.50"></text></g><g><title>__perf_event_task_sched_out (1 samples, 0.15%)</title><rect x="19.4611%" y="437" width="0.1497%" height="15" fill="rgb(246,89,9)"/><text x="19.7111%" y="447.50"></text></g><g><title>ctx_sched_out (1 samples, 0.15%)</title><rect x="19.4611%" y="421" width="0.1497%" height="15" fill="rgb(233,213,13)"/><text x="19.7111%" y="431.50"></text></g><g><title>intel_pmu_disable_all (1 samples, 0.15%)</title><rect x="19.4611%" y="405" width="0.1497%" height="15" fill="rgb(233,141,41)"/><text x="19.7111%" y="415.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.15%)</title><rect x="19.6108%" y="437" width="0.1497%" height="15" fill="rgb(239,167,4)"/><text x="19.8608%" y="447.50"></text></g><g><title>account_entity_dequeue (1 samples, 0.15%)</title><rect x="19.7605%" y="405" width="0.1497%" height="15" fill="rgb(209,217,16)"/><text x="20.0105%" y="415.50"></text></g><g><title>update_cfs_group (1 samples, 0.15%)</title><rect x="19.9102%" y="405" width="0.1497%" height="15" fill="rgb(219,88,35)"/><text x="20.1602%" y="415.50"></text></g><g><title>__calc_delta (1 samples, 0.15%)</title><rect x="20.3593%" y="389" width="0.1497%" height="15" fill="rgb(220,193,23)"/><text x="20.6093%" y="399.50"></text></g><g><title>__cgroup_account_cputime (1 samples, 0.15%)</title><rect x="20.5090%" y="389" width="0.1497%" height="15" fill="rgb(230,90,52)"/><text x="20.7590%" y="399.50"></text></g><g><title>update_curr (5 samples, 0.75%)</title><rect x="20.0599%" y="405" width="0.7485%" height="15" fill="rgb(252,106,19)"/><text x="20.3099%" y="415.50"></text></g><g><title>update_min_vruntime (1 samples, 0.15%)</title><rect x="20.6587%" y="389" width="0.1497%" height="15" fill="rgb(206,74,20)"/><text x="20.9087%" y="399.50"></text></g><g><title>dequeue_task_fair (10 samples, 1.50%)</title><rect x="19.7605%" y="437" width="1.4970%" height="15" fill="rgb(230,138,44)"/><text x="20.0105%" y="447.50"></text></g><g><title>dequeue_entity (10 samples, 1.50%)</title><rect x="19.7605%" y="421" width="1.4970%" height="15" fill="rgb(235,182,43)"/><text x="20.0105%" y="431.50"></text></g><g><title>update_load_avg (3 samples, 0.45%)</title><rect x="20.8084%" y="405" width="0.4491%" height="15" fill="rgb(242,16,51)"/><text x="21.0584%" y="415.50"></text></g><g><title>__update_load_avg_se (2 samples, 0.30%)</title><rect x="20.9581%" y="389" width="0.2994%" height="15" fill="rgb(248,9,4)"/><text x="21.2081%" y="399.50"></text></g><g><title>finish_task_switch (4 samples, 0.60%)</title><rect x="21.2575%" y="437" width="0.5988%" height="15" fill="rgb(210,31,22)"/><text x="21.5075%" y="447.50"></text></g><g><title>__perf_event_task_sched_in (1 samples, 0.15%)</title><rect x="21.7066%" y="421" width="0.1497%" height="15" fill="rgb(239,54,39)"/><text x="21.9566%" y="431.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (1 samples, 0.15%)</title><rect x="21.7066%" y="405" width="0.1497%" height="15" fill="rgb(230,99,41)"/><text x="21.9566%" y="415.50"></text></g><g><title>native_write_msr (1 samples, 0.15%)</title><rect x="21.7066%" y="389" width="0.1497%" height="15" fill="rgb(253,106,12)"/><text x="21.9566%" y="399.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.15%)</title><rect x="21.8563%" y="437" width="0.1497%" height="15" fill="rgb(213,46,41)"/><text x="22.1063%" y="447.50"></text></g><g><title>newidle_balance (1 samples, 0.15%)</title><rect x="21.8563%" y="421" width="0.1497%" height="15" fill="rgb(215,133,35)"/><text x="22.1063%" y="431.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.15%)</title><rect x="21.8563%" y="405" width="0.1497%" height="15" fill="rgb(213,28,5)"/><text x="22.1063%" y="415.50"></text></g><g><title>psi_task_change (9 samples, 1.35%)</title><rect x="22.0060%" y="437" width="1.3473%" height="15" fill="rgb(215,77,49)"/><text x="22.2560%" y="447.50"></text></g><g><title>psi_group_change (9 samples, 1.35%)</title><rect x="22.0060%" y="421" width="1.3473%" height="15" fill="rgb(248,100,22)"/><text x="22.2560%" y="431.50"></text></g><g><title>record_times (3 samples, 0.45%)</title><rect x="22.9042%" y="405" width="0.4491%" height="15" fill="rgb(208,67,9)"/><text x="23.1542%" y="415.50"></text></g><g><title>sched_clock_cpu (3 samples, 0.45%)</title><rect x="22.9042%" y="389" width="0.4491%" height="15" fill="rgb(219,133,21)"/><text x="23.1542%" y="399.50"></text></g><g><title>sched_clock (3 samples, 0.45%)</title><rect x="22.9042%" y="373" width="0.4491%" height="15" fill="rgb(246,46,29)"/><text x="23.1542%" y="383.50"></text></g><g><title>native_sched_clock (2 samples, 0.30%)</title><rect x="23.0539%" y="357" width="0.2994%" height="15" fill="rgb(246,185,52)"/><text x="23.3039%" y="367.50"></text></g><g><title>put_prev_task_fair (4 samples, 0.60%)</title><rect x="23.3533%" y="437" width="0.5988%" height="15" fill="rgb(252,136,11)"/><text x="23.6033%" y="447.50"></text></g><g><title>put_prev_entity (2 samples, 0.30%)</title><rect x="23.6527%" y="421" width="0.2994%" height="15" fill="rgb(219,138,53)"/><text x="23.9027%" y="431.50"></text></g><g><title>uclamp_rq_dec_id (5 samples, 0.75%)</title><rect x="23.9521%" y="437" width="0.7485%" height="15" fill="rgb(211,51,23)"/><text x="24.2021%" y="447.50"></text></g><g><title>sk_wait_data (51 samples, 7.63%)</title><rect x="17.3653%" y="517" width="7.6347%" height="15" fill="rgb(247,221,28)"/><text x="17.6153%" y="527.50">sk_wait_da..</text></g><g><title>wait_woken (42 samples, 6.29%)</title><rect x="18.7126%" y="501" width="6.2874%" height="15" fill="rgb(251,222,45)"/><text x="18.9626%" y="511.50">wait_wok..</text></g><g><title>schedule_timeout (41 samples, 6.14%)</title><rect x="18.8623%" y="485" width="6.1377%" height="15" fill="rgb(217,162,53)"/><text x="19.1123%" y="495.50">schedule..</text></g><g><title>schedule (40 samples, 5.99%)</title><rect x="19.0120%" y="469" width="5.9880%" height="15" fill="rgb(229,93,14)"/><text x="19.2620%" y="479.50">schedule</text></g><g><title>__schedule (40 samples, 5.99%)</title><rect x="19.0120%" y="453" width="5.9880%" height="15" fill="rgb(209,67,49)"/><text x="19.2620%" y="463.50">__schedu..</text></g><g><title>update_rq_clock (2 samples, 0.30%)</title><rect x="24.7006%" y="437" width="0.2994%" height="15" fill="rgb(213,87,29)"/><text x="24.9506%" y="447.50"></text></g><g><title>update_irq_load_avg (1 samples, 0.15%)</title><rect x="24.8503%" y="421" width="0.1497%" height="15" fill="rgb(205,151,52)"/><text x="25.1003%" y="431.50"></text></g><g><title>down_read_trylock (1 samples, 0.15%)</title><rect x="26.1976%" y="421" width="0.1497%" height="15" fill="rgb(253,215,39)"/><text x="26.4476%" y="431.50"></text></g><g><title>__lru_cache_add (1 samples, 0.15%)</title><rect x="26.3473%" y="389" width="0.1497%" height="15" fill="rgb(221,220,41)"/><text x="26.5973%" y="399.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.15%)</title><rect x="26.3473%" y="373" width="0.1497%" height="15" fill="rgb(218,133,21)"/><text x="26.5973%" y="383.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.15%)</title><rect x="26.3473%" y="357" width="0.1497%" height="15" fill="rgb(221,193,43)"/><text x="26.5973%" y="367.50"></text></g><g><title>page_mapping (1 samples, 0.15%)</title><rect x="26.3473%" y="341" width="0.1497%" height="15" fill="rgb(240,128,52)"/><text x="26.5973%" y="351.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.15%)</title><rect x="26.4970%" y="389" width="0.1497%" height="15" fill="rgb(253,114,12)"/><text x="26.7470%" y="399.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.15%)</title><rect x="26.4970%" y="373" width="0.1497%" height="15" fill="rgb(215,223,47)"/><text x="26.7470%" y="383.50"></text></g><g><title>_copy_to_iter (9 samples, 1.35%)</title><rect x="25.4491%" y="485" width="1.3473%" height="15" fill="rgb(248,225,23)"/><text x="25.6991%" y="495.50"></text></g><g><title>copy_user_enhanced_fast_string (8 samples, 1.20%)</title><rect x="25.5988%" y="469" width="1.1976%" height="15" fill="rgb(250,108,0)"/><text x="25.8488%" y="479.50"></text></g><g><title>page_fault (7 samples, 1.05%)</title><rect x="25.7485%" y="453" width="1.0479%" height="15" fill="rgb(228,208,7)"/><text x="25.9985%" y="463.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.75%)</title><rect x="26.0479%" y="437" width="0.7485%" height="15" fill="rgb(244,45,10)"/><text x="26.2979%" y="447.50"></text></g><g><title>handle_mm_fault (3 samples, 0.45%)</title><rect x="26.3473%" y="421" width="0.4491%" height="15" fill="rgb(207,125,25)"/><text x="26.5973%" y="431.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.45%)</title><rect x="26.3473%" y="405" width="0.4491%" height="15" fill="rgb(210,195,18)"/><text x="26.5973%" y="415.50"></text></g><g><title>mem_cgroup_try_charge_delay (1 samples, 0.15%)</title><rect x="26.6467%" y="389" width="0.1497%" height="15" fill="rgb(249,80,12)"/><text x="26.8967%" y="399.50"></text></g><g><title>mem_cgroup_try_charge (1 samples, 0.15%)</title><rect x="26.6467%" y="373" width="0.1497%" height="15" fill="rgb(221,65,9)"/><text x="26.8967%" y="383.50"></text></g><g><title>get_mem_cgroup_from_mm (1 samples, 0.15%)</title><rect x="26.6467%" y="357" width="0.1497%" height="15" fill="rgb(235,49,36)"/><text x="26.8967%" y="367.50"></text></g><g><title>skb_copy_datagram_iter (16 samples, 2.40%)</title><rect x="25.0000%" y="517" width="2.3952%" height="15" fill="rgb(225,32,20)"/><text x="25.2500%" y="527.50">sk..</text></g><g><title>__skb_datagram_iter (16 samples, 2.40%)</title><rect x="25.0000%" y="501" width="2.3952%" height="15" fill="rgb(215,141,46)"/><text x="25.2500%" y="511.50">__..</text></g><g><title>simple_copy_to_iter (4 samples, 0.60%)</title><rect x="26.7964%" y="485" width="0.5988%" height="15" fill="rgb(250,160,47)"/><text x="27.0464%" y="495.50"></text></g><g><title>__check_object_size (4 samples, 0.60%)</title><rect x="26.7964%" y="469" width="0.5988%" height="15" fill="rgb(216,222,40)"/><text x="27.0464%" y="479.50"></text></g><g><title>inet_recvmsg (75 samples, 11.23%)</title><rect x="16.3174%" y="549" width="11.2275%" height="15" fill="rgb(234,217,39)"/><text x="16.5674%" y="559.50">inet_recvmsg</text></g><g><title>tcp_recvmsg (75 samples, 11.23%)</title><rect x="16.3174%" y="533" width="11.2275%" height="15" fill="rgb(207,178,40)"/><text x="16.5674%" y="543.50">tcp_recvmsg</text></g><g><title>tcp_rcv_space_adjust (1 samples, 0.15%)</title><rect x="27.3952%" y="517" width="0.1497%" height="15" fill="rgb(221,136,13)"/><text x="27.6452%" y="527.50"></text></g><g><title>do_syscall_64 (80 samples, 11.98%)</title><rect x="15.7186%" y="597" width="11.9760%" height="15" fill="rgb(249,199,10)"/><text x="15.9686%" y="607.50">do_syscall_64</text></g><g><title>__x64_sys_recvfrom (80 samples, 11.98%)</title><rect x="15.7186%" y="581" width="11.9760%" height="15" fill="rgb(249,222,13)"/><text x="15.9686%" y="591.50">__x64_sys_recvfrom</text></g><g><title>__sys_recvfrom (78 samples, 11.68%)</title><rect x="16.0180%" y="565" width="11.6766%" height="15" fill="rgb(244,185,38)"/><text x="16.2680%" y="575.50">__sys_recvfrom</text></g><g><title>sock_recvmsg (1 samples, 0.15%)</title><rect x="27.5449%" y="549" width="0.1497%" height="15" fill="rgb(236,202,9)"/><text x="27.7949%" y="559.50"></text></g><g><title>security_socket_recvmsg (1 samples, 0.15%)</title><rect x="27.5449%" y="533" width="0.1497%" height="15" fill="rgb(250,229,37)"/><text x="27.7949%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (90 samples, 13.47%)</title><rect x="15.7186%" y="613" width="13.4731%" height="15" fill="rgb(206,174,23)"/><text x="15.9686%" y="623.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (10 samples, 1.50%)</title><rect x="27.6946%" y="597" width="1.4970%" height="15" fill="rgb(211,33,43)"/><text x="27.9446%" y="607.50"></text></g><g><title>__libc_recv (92 samples, 13.77%)</title><rect x="15.7186%" y="629" width="13.7725%" height="15" fill="rgb(245,58,50)"/><text x="15.9686%" y="639.50">__libc_recv</text></g><g><title>syscall_return_via_sysret (2 samples, 0.30%)</title><rect x="29.1916%" y="613" width="0.2994%" height="15" fill="rgb(244,68,36)"/><text x="29.4416%" y="623.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (93 samples, 13.92%)</title><rect x="15.7186%" y="709" width="13.9222%" height="15" fill="rgb(232,229,15)"/><text x="15.9686%" y="719.50">&lt;std::io::buffered::B..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (93 samples, 13.92%)</title><rect x="15.7186%" y="693" width="13.9222%" height="15" fill="rgb(254,30,23)"/><text x="15.9686%" y="703.50">&lt;std::net::tcp::TcpSt..</text></g><g><title>std::sys_common::net::TcpStream::read (93 samples, 13.92%)</title><rect x="15.7186%" y="677" width="13.9222%" height="15" fill="rgb(235,160,14)"/><text x="15.9686%" y="687.50">std::sys_common::net:..</text></g><g><title>std::sys::unix::net::Socket::read (93 samples, 13.92%)</title><rect x="15.7186%" y="661" width="13.9222%" height="15" fill="rgb(212,155,44)"/><text x="15.9686%" y="671.50">std::sys::unix::net::..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (93 samples, 13.92%)</title><rect x="15.7186%" y="645" width="13.9222%" height="15" fill="rgb(226,2,50)"/><text x="15.9686%" y="655.50">std::sys::unix::net::..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.15%)</title><rect x="29.4910%" y="629" width="0.1497%" height="15" fill="rgb(234,177,6)"/><text x="29.7410%" y="639.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.15%)</title><rect x="29.4910%" y="613" width="0.1497%" height="15" fill="rgb(217,24,9)"/><text x="29.7410%" y="623.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 14.07%)</title><rect x="15.7186%" y="725" width="14.0719%" height="15" fill="rgb(220,13,46)"/><text x="15.9686%" y="735.50">&lt;mysql_common::proto:..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.15%)</title><rect x="29.6407%" y="709" width="0.1497%" height="15" fill="rgb(239,221,27)"/><text x="29.8907%" y="719.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.15%)</title><rect x="29.6407%" y="693" width="0.1497%" height="15" fill="rgb(222,198,25)"/><text x="29.8907%" y="703.50"></text></g><g><title>mysql::conn::Conn::_query (101 samples, 15.12%)</title><rect x="15.2695%" y="773" width="15.1198%" height="15" fill="rgb(211,99,13)"/><text x="15.5195%" y="783.50">mysql::conn::Conn::_que..</text></g><g><title>mysql::conn::Conn::handle_result_set (101 samples, 15.12%)</title><rect x="15.2695%" y="757" width="15.1198%" height="15" fill="rgb(232,111,31)"/><text x="15.5195%" y="767.50">mysql::conn::Conn::hand..</text></g><g><title>mysql::conn::Conn::read_packet (101 samples, 15.12%)</title><rect x="15.2695%" y="741" width="15.1198%" height="15" fill="rgb(245,82,37)"/><text x="15.5195%" y="751.50">mysql::conn::Conn::read..</text></g><g><title>_int_free (4 samples, 0.60%)</title><rect x="29.7904%" y="725" width="0.5988%" height="15" fill="rgb(227,149,46)"/><text x="30.0404%" y="735.50"></text></g><g><title>[unknown] (179 samples, 26.80%)</title><rect x="3.7425%" y="917" width="26.7964%" height="15" fill="rgb(218,36,50)"/><text x="3.9925%" y="927.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (122 samples, 18.26%)</title><rect x="12.2754%" y="901" width="18.2635%" height="15" fill="rgb(226,80,48)"/><text x="12.5254%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (122 samples, 18.26%)</title><rect x="12.2754%" y="885" width="18.2635%" height="15" fill="rgb(238,224,15)"/><text x="12.5254%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (122 samples, 18.26%)</title><rect x="12.2754%" y="869" width="18.2635%" height="15" fill="rgb(241,136,10)"/><text x="12.5254%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (122 samples, 18.26%)</title><rect x="12.2754%" y="853" width="18.2635%" height="15" fill="rgb(208,32,45)"/><text x="12.5254%" y="863.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (122 samples, 18.26%)</title><rect x="12.2754%" y="837" width="18.2635%" height="15" fill="rgb(207,135,9)"/><text x="12.5254%" y="847.50">core::ops::function::impls::..</text></g><g><title>std::rt::lang_start::_{{closure}} (122 samples, 18.26%)</title><rect x="12.2754%" y="821" width="18.2635%" height="15" fill="rgb(206,86,44)"/><text x="12.5254%" y="831.50">std::rt::lang_start::_{{clos..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (122 samples, 18.26%)</title><rect x="12.2754%" y="805" width="18.2635%" height="15" fill="rgb(245,177,15)"/><text x="12.5254%" y="815.50">std::sys_common::backtrace::..</text></g><g><title>lobsters::main (122 samples, 18.26%)</title><rect x="12.2754%" y="789" width="18.2635%" height="15" fill="rgb(206,64,50)"/><text x="12.5254%" y="799.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.15%)</title><rect x="30.3892%" y="773" width="0.1497%" height="15" fill="rgb(234,36,40)"/><text x="30.6392%" y="783.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 0.15%)</title><rect x="30.3892%" y="757" width="0.1497%" height="15" fill="rgb(213,64,8)"/><text x="30.6392%" y="767.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.15%)</title><rect x="30.3892%" y="741" width="0.1497%" height="15" fill="rgb(210,75,36)"/><text x="30.6392%" y="751.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.15%)</title><rect x="30.3892%" y="725" width="0.1497%" height="15" fill="rgb(229,88,21)"/><text x="30.6392%" y="735.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.15%)</title><rect x="30.3892%" y="709" width="0.1497%" height="15" fill="rgb(252,204,47)"/><text x="30.6392%" y="719.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.15%)</title><rect x="30.3892%" y="693" width="0.1497%" height="15" fill="rgb(208,77,27)"/><text x="30.6392%" y="703.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.15%)</title><rect x="30.3892%" y="677" width="0.1497%" height="15" fill="rgb(221,76,26)"/><text x="30.6392%" y="687.50"></text></g><g><title>__libc_send (1 samples, 0.15%)</title><rect x="30.3892%" y="661" width="0.1497%" height="15" fill="rgb(225,139,18)"/><text x="30.6392%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.15%)</title><rect x="30.3892%" y="645" width="0.1497%" height="15" fill="rgb(230,137,11)"/><text x="30.6392%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="30.3892%" y="629" width="0.1497%" height="15" fill="rgb(212,28,1)"/><text x="30.6392%" y="639.50"></text></g><g><title>__x64_sys_sendto (1 samples, 0.15%)</title><rect x="30.3892%" y="613" width="0.1497%" height="15" fill="rgb(248,164,17)"/><text x="30.6392%" y="623.50"></text></g><g><title>__sys_sendto (1 samples, 0.15%)</title><rect x="30.3892%" y="597" width="0.1497%" height="15" fill="rgb(222,171,42)"/><text x="30.6392%" y="607.50"></text></g><g><title>sock_sendmsg (1 samples, 0.15%)</title><rect x="30.3892%" y="581" width="0.1497%" height="15" fill="rgb(243,84,45)"/><text x="30.6392%" y="591.50"></text></g><g><title>tcp_sendmsg (1 samples, 0.15%)</title><rect x="30.3892%" y="565" width="0.1497%" height="15" fill="rgb(252,49,23)"/><text x="30.6392%" y="575.50"></text></g><g><title>tcp_sendmsg_locked (1 samples, 0.15%)</title><rect x="30.3892%" y="549" width="0.1497%" height="15" fill="rgb(215,19,7)"/><text x="30.6392%" y="559.50"></text></g><g><title>skb_do_copy_data_nocache (1 samples, 0.15%)</title><rect x="30.3892%" y="533" width="0.1497%" height="15" fill="rgb(238,81,41)"/><text x="30.6392%" y="543.50"></text></g><g><title>_copy_from_iter_full (1 samples, 0.15%)</title><rect x="30.3892%" y="517" width="0.1497%" height="15" fill="rgb(210,199,37)"/><text x="30.6392%" y="527.50"></text></g><g><title>copy_user_generic_unrolled (1 samples, 0.15%)</title><rect x="30.3892%" y="501" width="0.1497%" height="15" fill="rgb(244,192,49)"/><text x="30.6392%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.15%)</title><rect x="30.5389%" y="917" width="0.1497%" height="15" fill="rgb(226,211,11)"/><text x="30.7889%" y="927.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (2 samples, 0.30%)</title><rect x="32.6347%" y="725" width="0.2994%" height="15" fill="rgb(236,162,54)"/><text x="32.8847%" y="735.50"></text></g><g><title>mysql::conn::Conn::next_text (2 samples, 0.30%)</title><rect x="32.6347%" y="709" width="0.2994%" height="15" fill="rgb(220,229,9)"/><text x="32.8847%" y="719.50"></text></g><g><title>__GI___libc_free (6 samples, 0.90%)</title><rect x="32.9341%" y="725" width="0.8982%" height="15" fill="rgb(250,87,22)"/><text x="33.1841%" y="735.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="33.8323%" y="725" width="0.1497%" height="15" fill="rgb(239,43,17)"/><text x="34.0823%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.15%)</title><rect x="33.9820%" y="725" width="0.1497%" height="15" fill="rgb(231,177,25)"/><text x="34.2320%" y="735.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="33.9820%" y="709" width="0.1497%" height="15" fill="rgb(219,179,1)"/><text x="34.2320%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 3.59%)</title><rect x="30.9880%" y="741" width="3.5928%" height="15" fill="rgb(238,219,53)"/><text x="31.2380%" y="751.50">&lt;mys..</text></g><g><title>mysql_common::row::new_row (3 samples, 0.45%)</title><rect x="34.1317%" y="725" width="0.4491%" height="15" fill="rgb(232,167,36)"/><text x="34.3817%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.45%)</title><rect x="34.1317%" y="709" width="0.4491%" height="15" fill="rgb(244,19,51)"/><text x="34.3817%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::SetIteratorState as core::convert::From&lt;mysql::conn::query_result::Or&lt;alloc::vec::Vec&lt;mysql_common::packets::Column&gt;,mysql_common::packets::OkPacket&gt;&gt;&gt;::from (1 samples, 0.15%)</title><rect x="34.5808%" y="741" width="0.1497%" height="15" fill="rgb(224,6,22)"/><text x="34.8308%" y="751.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="34.5808%" y="725" width="0.1497%" height="15" fill="rgb(224,145,5)"/><text x="34.8308%" y="735.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (3 samples, 0.45%)</title><rect x="34.7305%" y="741" width="0.4491%" height="15" fill="rgb(234,130,49)"/><text x="34.9805%" y="751.50"></text></g><g><title>&lt;rand_hc::hc128::Hc128Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.30%)</title><rect x="34.8802%" y="725" width="0.2994%" height="15" fill="rgb(254,6,2)"/><text x="35.1302%" y="735.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="35.1796%" y="741" width="0.1497%" height="15" fill="rgb(208,96,46)"/><text x="35.4296%" y="751.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="35.3293%" y="741" width="0.1497%" height="15" fill="rgb(239,3,39)"/><text x="35.5793%" y="751.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.15%)</title><rect x="35.4790%" y="725" width="0.1497%" height="15" fill="rgb(233,210,1)"/><text x="35.7290%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.15%)</title><rect x="35.4790%" y="709" width="0.1497%" height="15" fill="rgb(244,137,37)"/><text x="35.7290%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.15%)</title><rect x="35.4790%" y="693" width="0.1497%" height="15" fill="rgb(240,136,2)"/><text x="35.7290%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="35.4790%" y="677" width="0.1497%" height="15" fill="rgb(239,18,37)"/><text x="35.7290%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.15%)</title><rect x="35.4790%" y="661" width="0.1497%" height="15" fill="rgb(218,185,22)"/><text x="35.7290%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.15%)</title><rect x="35.4790%" y="645" width="0.1497%" height="15" fill="rgb(225,218,4)"/><text x="35.7290%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="35.4790%" y="629" width="0.1497%" height="15" fill="rgb(230,182,32)"/><text x="35.7290%" y="639.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.30%)</title><rect x="35.4790%" y="741" width="0.2994%" height="15" fill="rgb(242,56,43)"/><text x="35.7290%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.15%)</title><rect x="35.6287%" y="725" width="0.1497%" height="15" fill="rgb(233,99,24)"/><text x="35.8787%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.15%)</title><rect x="35.6287%" y="709" width="0.1497%" height="15" fill="rgb(234,209,42)"/><text x="35.8787%" y="719.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.15%)</title><rect x="35.6287%" y="693" width="0.1497%" height="15" fill="rgb(227,7,12)"/><text x="35.8787%" y="703.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (1 samples, 0.15%)</title><rect x="35.6287%" y="677" width="0.1497%" height="15" fill="rgb(245,203,43)"/><text x="35.8787%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (4 samples, 0.60%)</title><rect x="35.9281%" y="661" width="0.5988%" height="15" fill="rgb(238,205,33)"/><text x="36.1781%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (4 samples, 0.60%)</title><rect x="35.9281%" y="645" width="0.5988%" height="15" fill="rgb(231,56,7)"/><text x="36.1781%" y="655.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.15%)</title><rect x="36.3772%" y="629" width="0.1497%" height="15" fill="rgb(244,186,29)"/><text x="36.6272%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="36.3772%" y="613" width="0.1497%" height="15" fill="rgb(234,111,31)"/><text x="36.6272%" y="623.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="36.3772%" y="597" width="0.1497%" height="15" fill="rgb(241,149,10)"/><text x="36.6272%" y="607.50"></text></g><g><title>do_syscall_64 (235 samples, 35.18%)</title><rect x="36.5269%" y="613" width="35.1796%" height="15" fill="rgb(249,206,44)"/><text x="36.7769%" y="623.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 35.18%)</title><rect x="36.5269%" y="597" width="35.1796%" height="15" fill="rgb(251,153,30)"/><text x="36.7769%" y="607.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (235 samples, 35.18%)</title><rect x="36.5269%" y="581" width="35.1796%" height="15" fill="rgb(239,152,38)"/><text x="36.7769%" y="591.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 35.18%)</title><rect x="36.5269%" y="565" width="35.1796%" height="15" fill="rgb(249,139,47)"/><text x="36.7769%" y="575.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (235 samples, 35.18%)</title><rect x="36.5269%" y="549" width="35.1796%" height="15" fill="rgb(244,64,35)"/><text x="36.7769%" y="559.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (235 samples, 35.18%)</title><rect x="36.5269%" y="533" width="35.1796%" height="15" fill="rgb(216,46,15)"/><text x="36.7769%" y="543.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (234 samples, 35.03%)</title><rect x="36.6766%" y="517" width="35.0299%" height="15" fill="rgb(250,74,19)"/><text x="36.9266%" y="527.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (234 samples, 35.03%)</title><rect x="36.6766%" y="501" width="35.0299%" height="15" fill="rgb(249,42,33)"/><text x="36.9266%" y="511.50">preempt_schedule_common</text></g><g><title>__schedule (234 samples, 35.03%)</title><rect x="36.6766%" y="485" width="35.0299%" height="15" fill="rgb(242,149,17)"/><text x="36.9266%" y="495.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 35.03%)</title><rect x="36.6766%" y="469" width="35.0299%" height="15" fill="rgb(244,29,21)"/><text x="36.9266%" y="479.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (234 samples, 35.03%)</title><rect x="36.6766%" y="453" width="35.0299%" height="15" fill="rgb(220,130,37)"/><text x="36.9266%" y="463.50">__perf_event_task_sched_in</text></g><g><title>__intel_pmu_enable_all.constprop.0 (233 samples, 34.88%)</title><rect x="36.8263%" y="437" width="34.8802%" height="15" fill="rgb(211,67,2)"/><text x="37.0763%" y="447.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (233 samples, 34.88%)</title><rect x="36.8263%" y="421" width="34.8802%" height="15" fill="rgb(235,68,52)"/><text x="37.0763%" y="431.50">native_write_msr</text></g><g><title>__GI___sched_setaffinity_new (239 samples, 35.78%)</title><rect x="36.5269%" y="645" width="35.7784%" height="15" fill="rgb(246,142,3)"/><text x="36.7769%" y="655.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (239 samples, 35.78%)</title><rect x="36.5269%" y="629" width="35.7784%" height="15" fill="rgb(241,25,7)"/><text x="36.7769%" y="639.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (4 samples, 0.60%)</title><rect x="71.7066%" y="613" width="0.5988%" height="15" fill="rgb(242,119,39)"/><text x="71.9566%" y="623.50"></text></g><g><title>hwloc::Topology::new (245 samples, 36.68%)</title><rect x="35.7784%" y="741" width="36.6766%" height="15" fill="rgb(241,98,45)"/><text x="36.0284%" y="751.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (245 samples, 36.68%)</title><rect x="35.7784%" y="725" width="36.6766%" height="15" fill="rgb(254,28,30)"/><text x="36.0284%" y="735.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (245 samples, 36.68%)</title><rect x="35.7784%" y="709" width="36.6766%" height="15" fill="rgb(241,142,54)"/><text x="36.0284%" y="719.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (245 samples, 36.68%)</title><rect x="35.7784%" y="693" width="36.6766%" height="15" fill="rgb(222,85,15)"/><text x="36.0284%" y="703.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (245 samples, 36.68%)</title><rect x="35.7784%" y="677" width="36.6766%" height="15" fill="rgb(210,85,47)"/><text x="36.0284%" y="687.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (240 samples, 35.93%)</title><rect x="36.5269%" y="661" width="35.9281%" height="15" fill="rgb(224,206,25)"/><text x="36.7769%" y="671.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__sched_cpufree (1 samples, 0.15%)</title><rect x="72.3054%" y="645" width="0.1497%" height="15" fill="rgb(243,201,19)"/><text x="72.5554%" y="655.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (3 samples, 0.45%)</title><rect x="72.4551%" y="725" width="0.4491%" height="15" fill="rgb(236,59,4)"/><text x="72.7051%" y="735.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="72.7545%" y="709" width="0.1497%" height="15" fill="rgb(254,179,45)"/><text x="73.0045%" y="719.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::encode (2 samples, 0.30%)</title><rect x="73.0539%" y="709" width="0.2994%" height="15" fill="rgb(226,14,10)"/><text x="73.3039%" y="719.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::encode (2 samples, 0.30%)</title><rect x="73.0539%" y="693" width="0.2994%" height="15" fill="rgb(244,27,41)"/><text x="73.3039%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="73.2036%" y="677" width="0.1497%" height="15" fill="rgb(235,35,32)"/><text x="73.4536%" y="687.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.15%)</title><rect x="73.8024%" y="645" width="0.1497%" height="15" fill="rgb(218,68,31)"/><text x="74.0524%" y="655.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.15%)</title><rect x="74.4012%" y="549" width="0.1497%" height="15" fill="rgb(207,120,37)"/><text x="74.6512%" y="559.50"></text></g><g><title>lock_sock_nested (1 samples, 0.15%)</title><rect x="74.5509%" y="549" width="0.1497%" height="15" fill="rgb(227,98,0)"/><text x="74.8009%" y="559.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.15%)</title><rect x="74.5509%" y="533" width="0.1497%" height="15" fill="rgb(207,7,3)"/><text x="74.8009%" y="543.50"></text></g><g><title>preempt_count_sub (1 samples, 0.15%)</title><rect x="74.5509%" y="517" width="0.1497%" height="15" fill="rgb(206,98,19)"/><text x="74.8009%" y="527.50"></text></g><g><title>release_sock (2 samples, 0.30%)</title><rect x="74.7006%" y="549" width="0.2994%" height="15" fill="rgb(217,5,26)"/><text x="74.9506%" y="559.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.30%)</title><rect x="74.7006%" y="533" width="0.2994%" height="15" fill="rgb(235,190,38)"/><text x="74.9506%" y="543.50"></text></g><g><title>preempt_count_add (1 samples, 0.15%)</title><rect x="74.8503%" y="517" width="0.1497%" height="15" fill="rgb(247,86,24)"/><text x="75.1003%" y="527.50"></text></g><g><title>__ip_local_out (2 samples, 0.30%)</title><rect x="75.8982%" y="469" width="0.2994%" height="15" fill="rgb(205,101,16)"/><text x="76.1482%" y="479.50"></text></g><g><title>ip_send_check (2 samples, 0.30%)</title><rect x="75.8982%" y="453" width="0.2994%" height="15" fill="rgb(246,168,33)"/><text x="76.1482%" y="463.50"></text></g><g><title>__sk_dst_check (1 samples, 0.15%)</title><rect x="76.1976%" y="469" width="0.1497%" height="15" fill="rgb(231,114,1)"/><text x="76.4476%" y="479.50"></text></g><g><title>ipv4_dst_check (1 samples, 0.15%)</title><rect x="76.1976%" y="453" width="0.1497%" height="15" fill="rgb(207,184,53)"/><text x="76.4476%" y="463.50"></text></g><g><title>ip_finish_output (1 samples, 0.15%)</title><rect x="76.4970%" y="453" width="0.1497%" height="15" fill="rgb(224,95,51)"/><text x="76.7470%" y="463.50"></text></g><g><title>dev_hard_start_xmit (3 samples, 0.45%)</title><rect x="77.0958%" y="421" width="0.4491%" height="15" fill="rgb(212,188,45)"/><text x="77.3458%" y="431.50"></text></g><g><title>loopback_xmit (2 samples, 0.30%)</title><rect x="77.2455%" y="405" width="0.2994%" height="15" fill="rgb(223,154,38)"/><text x="77.4955%" y="415.50"></text></g><g><title>tcp_wfree (1 samples, 0.15%)</title><rect x="77.3952%" y="389" width="0.1497%" height="15" fill="rgb(251,22,52)"/><text x="77.6452%" y="399.50"></text></g><g><title>__dev_queue_xmit (4 samples, 0.60%)</title><rect x="77.0958%" y="437" width="0.5988%" height="15" fill="rgb(229,209,22)"/><text x="77.3458%" y="447.50"></text></g><g><title>validate_xmit_skb (1 samples, 0.15%)</title><rect x="77.5449%" y="421" width="0.1497%" height="15" fill="rgb(234,138,34)"/><text x="77.7949%" y="431.50"></text></g><g><title>__kfree_skb_flush (1 samples, 0.15%)</title><rect x="78.1437%" y="357" width="0.1497%" height="15" fill="rgb(212,95,11)"/><text x="78.3937%" y="367.50"></text></g><g><title>__netif_receive_skb_core (1 samples, 0.15%)</title><rect x="78.7425%" y="325" width="0.1497%" height="15" fill="rgb(240,179,47)"/><text x="78.9925%" y="335.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.15%)</title><rect x="79.0419%" y="277" width="0.1497%" height="15" fill="rgb(240,163,11)"/><text x="79.2919%" y="287.50"></text></g><g><title>__inet_lookup_established (5 samples, 0.75%)</title><rect x="79.4910%" y="245" width="0.7485%" height="15" fill="rgb(236,37,12)"/><text x="79.7410%" y="255.50"></text></g><g><title>inet_ehashfn (2 samples, 0.30%)</title><rect x="79.9401%" y="229" width="0.2994%" height="15" fill="rgb(232,164,16)"/><text x="80.1901%" y="239.50"></text></g><g><title>sock_put (1 samples, 0.15%)</title><rect x="80.2395%" y="245" width="0.1497%" height="15" fill="rgb(244,205,15)"/><text x="80.4895%" y="255.50"></text></g><g><title>sk_reset_timer (3 samples, 0.45%)</title><rect x="80.6886%" y="213" width="0.4491%" height="15" fill="rgb(223,117,47)"/><text x="80.9386%" y="223.50"></text></g><g><title>__mod_timer (1 samples, 0.15%)</title><rect x="80.9880%" y="197" width="0.1497%" height="15" fill="rgb(244,107,35)"/><text x="81.2380%" y="207.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.30%)</title><rect x="81.4371%" y="133" width="0.2994%" height="15" fill="rgb(205,140,8)"/><text x="81.6871%" y="143.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.15%)</title><rect x="81.7365%" y="133" width="0.1497%" height="15" fill="rgb(228,84,46)"/><text x="81.9865%" y="143.50"></text></g><g><title>preempt_count_sub (1 samples, 0.15%)</title><rect x="81.7365%" y="117" width="0.1497%" height="15" fill="rgb(254,188,9)"/><text x="81.9865%" y="127.50"></text></g><g><title>psi_flags_change (2 samples, 0.30%)</title><rect x="81.8862%" y="101" width="0.2994%" height="15" fill="rgb(206,112,54)"/><text x="82.1362%" y="111.50"></text></g><g><title>psi_task_change (9 samples, 1.35%)</title><rect x="81.8862%" y="117" width="1.3473%" height="15" fill="rgb(216,84,49)"/><text x="82.1362%" y="127.50"></text></g><g><title>psi_group_change (7 samples, 1.05%)</title><rect x="82.1856%" y="101" width="1.0479%" height="15" fill="rgb(214,194,35)"/><text x="82.4356%" y="111.50"></text></g><g><title>record_times (2 samples, 0.30%)</title><rect x="82.9341%" y="85" width="0.2994%" height="15" fill="rgb(249,28,3)"/><text x="83.1841%" y="95.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.30%)</title><rect x="82.9341%" y="69" width="0.2994%" height="15" fill="rgb(222,56,52)"/><text x="83.1841%" y="79.50"></text></g><g><title>sched_clock (2 samples, 0.30%)</title><rect x="82.9341%" y="53" width="0.2994%" height="15" fill="rgb(245,217,50)"/><text x="83.1841%" y="63.50"></text></g><g><title>native_sched_clock (2 samples, 0.30%)</title><rect x="82.9341%" y="37" width="0.2994%" height="15" fill="rgb(213,201,24)"/><text x="83.1841%" y="47.50"></text></g><g><title>enqueue_task (15 samples, 2.25%)</title><rect x="81.8862%" y="133" width="2.2455%" height="15" fill="rgb(248,116,28)"/><text x="82.1362%" y="143.50">e..</text></g><g><title>uclamp_rq_inc_id (6 samples, 0.90%)</title><rect x="83.2335%" y="117" width="0.8982%" height="15" fill="rgb(219,72,43)"/><text x="83.4835%" y="127.50"></text></g><g><title>reweight_entity (1 samples, 0.15%)</title><rect x="84.4311%" y="101" width="0.1497%" height="15" fill="rgb(209,138,14)"/><text x="84.6811%" y="111.50"></text></g><g><title>enqueue_task_fair (5 samples, 0.75%)</title><rect x="84.1317%" y="133" width="0.7485%" height="15" fill="rgb(222,18,33)"/><text x="84.3817%" y="143.50"></text></g><g><title>enqueue_entity (5 samples, 0.75%)</title><rect x="84.1317%" y="117" width="0.7485%" height="15" fill="rgb(213,199,7)"/><text x="84.3817%" y="127.50"></text></g><g><title>update_load_avg (2 samples, 0.30%)</title><rect x="84.5808%" y="101" width="0.2994%" height="15" fill="rgb(250,110,10)"/><text x="84.8308%" y="111.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.15%)</title><rect x="84.7305%" y="85" width="0.1497%" height="15" fill="rgb(248,123,6)"/><text x="84.9805%" y="95.50"></text></g><g><title>preempt_count_add (1 samples, 0.15%)</title><rect x="84.8802%" y="133" width="0.1497%" height="15" fill="rgb(206,91,31)"/><text x="85.1302%" y="143.50"></text></g><g><title>select_task_rq_fair (4 samples, 0.60%)</title><rect x="85.0299%" y="133" width="0.5988%" height="15" fill="rgb(211,154,13)"/><text x="85.2799%" y="143.50"></text></g><g><title>available_idle_cpu (2 samples, 0.30%)</title><rect x="85.3293%" y="117" width="0.2994%" height="15" fill="rgb(225,148,7)"/><text x="85.5793%" y="127.50"></text></g><g><title>ttwu_do_wakeup (5 samples, 0.75%)</title><rect x="85.6287%" y="133" width="0.7485%" height="15" fill="rgb(220,160,43)"/><text x="85.8787%" y="143.50"></text></g><g><title>check_preempt_curr (4 samples, 0.60%)</title><rect x="85.7784%" y="117" width="0.5988%" height="15" fill="rgb(213,52,39)"/><text x="86.0284%" y="127.50"></text></g><g><title>resched_curr (3 samples, 0.45%)</title><rect x="85.9281%" y="101" width="0.4491%" height="15" fill="rgb(243,137,7)"/><text x="86.1781%" y="111.50"></text></g><g><title>sock_def_readable (39 samples, 5.84%)</title><rect x="81.1377%" y="213" width="5.8383%" height="15" fill="rgb(230,79,13)"/><text x="81.3877%" y="223.50">sock_de..</text></g><g><title>__wake_up_common_lock (39 samples, 5.84%)</title><rect x="81.1377%" y="197" width="5.8383%" height="15" fill="rgb(247,105,23)"/><text x="81.3877%" y="207.50">__wake_..</text></g><g><title>__wake_up_common (39 samples, 5.84%)</title><rect x="81.1377%" y="181" width="5.8383%" height="15" fill="rgb(223,179,41)"/><text x="81.3877%" y="191.50">__wake_..</text></g><g><title>pollwake (39 samples, 5.84%)</title><rect x="81.1377%" y="165" width="5.8383%" height="15" fill="rgb(218,9,34)"/><text x="81.3877%" y="175.50">pollwake</text></g><g><title>try_to_wake_up (38 samples, 5.69%)</title><rect x="81.2874%" y="149" width="5.6886%" height="15" fill="rgb(222,106,8)"/><text x="81.5374%" y="159.50">try_to_..</text></g><g><title>update_rq_clock (4 samples, 0.60%)</title><rect x="86.3772%" y="133" width="0.5988%" height="15" fill="rgb(211,220,0)"/><text x="86.6272%" y="143.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.15%)</title><rect x="86.8263%" y="117" width="0.1497%" height="15" fill="rgb(229,52,16)"/><text x="87.0763%" y="127.50"></text></g><g><title>sched_clock (1 samples, 0.15%)</title><rect x="86.8263%" y="101" width="0.1497%" height="15" fill="rgb(212,155,18)"/><text x="87.0763%" y="111.50"></text></g><g><title>native_sched_clock (1 samples, 0.15%)</title><rect x="86.8263%" y="85" width="0.1497%" height="15" fill="rgb(242,21,14)"/><text x="87.0763%" y="95.50"></text></g><g><title>kfree (1 samples, 0.15%)</title><rect x="87.8743%" y="181" width="0.1497%" height="15" fill="rgb(222,19,48)"/><text x="88.1243%" y="191.50"></text></g><g><title>__slab_free (1 samples, 0.15%)</title><rect x="87.8743%" y="165" width="0.1497%" height="15" fill="rgb(232,45,27)"/><text x="88.1243%" y="175.50"></text></g><g><title>__kfree_skb (4 samples, 0.60%)</title><rect x="87.8743%" y="197" width="0.5988%" height="15" fill="rgb(249,103,42)"/><text x="88.1243%" y="207.50"></text></g><g><title>skb_release_data (3 samples, 0.45%)</title><rect x="88.0240%" y="181" width="0.4491%" height="15" fill="rgb(246,81,33)"/><text x="88.2740%" y="191.50"></text></g><g><title>bictcp_acked (3 samples, 0.45%)</title><rect x="88.4731%" y="197" width="0.4491%" height="15" fill="rgb(252,33,42)"/><text x="88.7231%" y="207.50"></text></g><g><title>kmem_cache_free (1 samples, 0.15%)</title><rect x="88.9222%" y="197" width="0.1497%" height="15" fill="rgb(209,212,41)"/><text x="89.1722%" y="207.50"></text></g><g><title>cache_from_obj (1 samples, 0.15%)</title><rect x="88.9222%" y="181" width="0.1497%" height="15" fill="rgb(207,154,6)"/><text x="89.1722%" y="191.50"></text></g><g><title>tcp_rate_gen (1 samples, 0.15%)</title><rect x="89.0719%" y="197" width="0.1497%" height="15" fill="rgb(223,64,47)"/><text x="89.3219%" y="207.50"></text></g><g><title>tcp_rearm_rto (1 samples, 0.15%)</title><rect x="89.2216%" y="197" width="0.1497%" height="15" fill="rgb(211,161,38)"/><text x="89.4716%" y="207.50"></text></g><g><title>tcp_schedule_loss_probe.part.0 (2 samples, 0.30%)</title><rect x="89.3713%" y="197" width="0.2994%" height="15" fill="rgb(219,138,40)"/><text x="89.6213%" y="207.50"></text></g><g><title>tcp_ack (20 samples, 2.99%)</title><rect x="86.9760%" y="213" width="2.9940%" height="15" fill="rgb(241,228,46)"/><text x="87.2260%" y="223.50">tcp..</text></g><g><title>tcp_update_pacing_rate (2 samples, 0.30%)</title><rect x="89.6707%" y="197" width="0.2994%" height="15" fill="rgb(223,209,38)"/><text x="89.9207%" y="207.50"></text></g><g><title>tcp_check_space (1 samples, 0.15%)</title><rect x="89.9701%" y="213" width="0.1497%" height="15" fill="rgb(236,164,45)"/><text x="90.2201%" y="223.50"></text></g><g><title>tcp_data_queue (2 samples, 0.30%)</title><rect x="90.1198%" y="213" width="0.2994%" height="15" fill="rgb(231,15,5)"/><text x="90.3698%" y="223.50"></text></g><g><title>sock_def_readable (2 samples, 0.30%)</title><rect x="90.1198%" y="197" width="0.2994%" height="15" fill="rgb(252,35,15)"/><text x="90.3698%" y="207.50"></text></g><g><title>__wake_up_common_lock (2 samples, 0.30%)</title><rect x="90.1198%" y="181" width="0.2994%" height="15" fill="rgb(248,181,18)"/><text x="90.3698%" y="191.50"></text></g><g><title>__wake_up_common (2 samples, 0.30%)</title><rect x="90.1198%" y="165" width="0.2994%" height="15" fill="rgb(233,39,42)"/><text x="90.3698%" y="175.50"></text></g><g><title>pollwake (2 samples, 0.30%)</title><rect x="90.1198%" y="149" width="0.2994%" height="15" fill="rgb(238,110,33)"/><text x="90.3698%" y="159.50"></text></g><g><title>try_to_wake_up (1 samples, 0.15%)</title><rect x="90.2695%" y="133" width="0.1497%" height="15" fill="rgb(233,195,10)"/><text x="90.5195%" y="143.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.15%)</title><rect x="90.2695%" y="117" width="0.1497%" height="15" fill="rgb(254,105,3)"/><text x="90.5195%" y="127.50"></text></g><g><title>enqueue_entity (1 samples, 0.15%)</title><rect x="90.2695%" y="101" width="0.1497%" height="15" fill="rgb(221,225,9)"/><text x="90.5195%" y="111.50"></text></g><g><title>reweight_entity (1 samples, 0.15%)</title><rect x="90.2695%" y="85" width="0.1497%" height="15" fill="rgb(224,227,45)"/><text x="90.5195%" y="95.50"></text></g><g><title>tcp_v4_do_rcv (71 samples, 10.63%)</title><rect x="80.3892%" y="245" width="10.6287%" height="15" fill="rgb(229,198,43)"/><text x="80.6392%" y="255.50">tcp_v4_do_rcv</text></g><g><title>tcp_rcv_established (70 samples, 10.48%)</title><rect x="80.5389%" y="229" width="10.4790%" height="15" fill="rgb(206,209,35)"/><text x="80.7889%" y="239.50">tcp_rcv_establi..</text></g><g><title>tcp_queue_rcv (4 samples, 0.60%)</title><rect x="90.4192%" y="213" width="0.5988%" height="15" fill="rgb(245,195,53)"/><text x="90.6692%" y="223.50"></text></g><g><title>tcp_v4_fill_cb (1 samples, 0.15%)</title><rect x="91.0180%" y="245" width="0.1497%" height="15" fill="rgb(240,92,26)"/><text x="91.2680%" y="255.50"></text></g><g><title>ip_local_deliver (83 samples, 12.43%)</title><rect x="78.8922%" y="309" width="12.4251%" height="15" fill="rgb(207,40,23)"/><text x="79.1422%" y="319.50">ip_local_deliver</text></g><g><title>ip_local_deliver_finish (83 samples, 12.43%)</title><rect x="78.8922%" y="293" width="12.4251%" height="15" fill="rgb(223,111,35)"/><text x="79.1422%" y="303.50">ip_local_deliver_fi..</text></g><g><title>ip_protocol_deliver_rcu (81 samples, 12.13%)</title><rect x="79.1916%" y="277" width="12.1257%" height="15" fill="rgb(229,147,28)"/><text x="79.4416%" y="287.50">ip_protocol_delive..</text></g><g><title>tcp_v4_rcv (79 samples, 11.83%)</title><rect x="79.4910%" y="261" width="11.8263%" height="15" fill="rgb(211,29,28)"/><text x="79.7410%" y="271.50">tcp_v4_rcv</text></g><g><title>tcp_v4_inbound_md5_hash (1 samples, 0.15%)</title><rect x="91.1677%" y="245" width="0.1497%" height="15" fill="rgb(228,72,33)"/><text x="91.4177%" y="255.50"></text></g><g><title>ip_rcv_core (1 samples, 0.15%)</title><rect x="91.3174%" y="309" width="0.1497%" height="15" fill="rgb(205,214,31)"/><text x="91.5674%" y="319.50"></text></g><g><title>__netif_receive_skb_one_core (87 samples, 13.02%)</title><rect x="78.5928%" y="341" width="13.0240%" height="15" fill="rgb(224,111,15)"/><text x="78.8428%" y="351.50">__netif_receive_skb_..</text></g><g><title>ip_rcv (85 samples, 12.72%)</title><rect x="78.8922%" y="325" width="12.7246%" height="15" fill="rgb(253,21,26)"/><text x="79.1422%" y="335.50">ip_rcv</text></g><g><title>ip_rcv_finish (1 samples, 0.15%)</title><rect x="91.4671%" y="309" width="0.1497%" height="15" fill="rgb(245,139,43)"/><text x="91.7171%" y="319.50"></text></g><g><title>ip_rcv_finish_core.constprop.0 (1 samples, 0.15%)</title><rect x="91.4671%" y="293" width="0.1497%" height="15" fill="rgb(252,170,7)"/><text x="91.7171%" y="303.50"></text></g><g><title>__rcu_read_unlock (2 samples, 0.30%)</title><rect x="91.6168%" y="341" width="0.2994%" height="15" fill="rgb(231,118,14)"/><text x="91.8668%" y="351.50"></text></g><g><title>net_rx_action (94 samples, 14.07%)</title><rect x="77.9940%" y="373" width="14.0719%" height="15" fill="rgb(238,83,0)"/><text x="78.2440%" y="383.50">net_rx_action</text></g><g><title>process_backlog (92 samples, 13.77%)</title><rect x="78.2934%" y="357" width="13.7725%" height="15" fill="rgb(221,39,39)"/><text x="78.5434%" y="367.50">process_backlog</text></g><g><title>_raw_spin_lock (1 samples, 0.15%)</title><rect x="91.9162%" y="341" width="0.1497%" height="15" fill="rgb(222,119,46)"/><text x="92.1662%" y="351.50"></text></g><g><title>preempt_count_add (1 samples, 0.15%)</title><rect x="91.9162%" y="325" width="0.1497%" height="15" fill="rgb(222,165,49)"/><text x="92.1662%" y="335.50"></text></g><g><title>ip_finish_output2 (104 samples, 15.57%)</title><rect x="76.6467%" y="453" width="15.5689%" height="15" fill="rgb(219,113,52)"/><text x="76.8967%" y="463.50">ip_finish_output2</text></g><g><title>__local_bh_enable_ip (97 samples, 14.52%)</title><rect x="77.6946%" y="437" width="14.5210%" height="15" fill="rgb(214,7,15)"/><text x="77.9446%" y="447.50">__local_bh_enable_ip</text></g><g><title>do_softirq (96 samples, 14.37%)</title><rect x="77.8443%" y="421" width="14.3713%" height="15" fill="rgb(235,32,4)"/><text x="78.0943%" y="431.50">do_softirq</text></g><g><title>do_softirq_own_stack (96 samples, 14.37%)</title><rect x="77.8443%" y="405" width="14.3713%" height="15" fill="rgb(238,90,54)"/><text x="78.0943%" y="415.50">do_softirq_own_stack</text></g><g><title>__do_softirq (96 samples, 14.37%)</title><rect x="77.8443%" y="389" width="14.3713%" height="15" fill="rgb(213,208,19)"/><text x="78.0943%" y="399.50">__do_softirq</text></g><g><title>preempt_count_add (1 samples, 0.15%)</title><rect x="92.0659%" y="373" width="0.1497%" height="15" fill="rgb(233,156,4)"/><text x="92.3159%" y="383.50"></text></g><g><title>__ip_queue_xmit (111 samples, 16.62%)</title><rect x="75.8982%" y="485" width="16.6168%" height="15" fill="rgb(207,194,5)"/><text x="76.1482%" y="495.50">__ip_queue_xmit</text></g><g><title>ip_output (108 samples, 16.17%)</title><rect x="76.3473%" y="469" width="16.1677%" height="15" fill="rgb(206,111,30)"/><text x="76.5973%" y="479.50">ip_output</text></g><g><title>ip_finish_output (2 samples, 0.30%)</title><rect x="92.2156%" y="453" width="0.2994%" height="15" fill="rgb(243,70,54)"/><text x="92.4656%" y="463.50"></text></g><g><title>__cgroup_bpf_run_filter_skb (2 samples, 0.30%)</title><rect x="92.2156%" y="437" width="0.2994%" height="15" fill="rgb(242,28,8)"/><text x="92.4656%" y="447.50"></text></g><g><title>__tcp_select_window (1 samples, 0.15%)</title><rect x="92.5150%" y="485" width="0.1497%" height="15" fill="rgb(219,106,18)"/><text x="92.7650%" y="495.50"></text></g><g><title>skb_clone (1 samples, 0.15%)</title><rect x="92.6647%" y="485" width="0.1497%" height="15" fill="rgb(244,222,10)"/><text x="92.9147%" y="495.50"></text></g><g><title>__tcp_transmit_skb (116 samples, 17.37%)</title><rect x="75.7485%" y="501" width="17.3653%" height="15" fill="rgb(236,179,52)"/><text x="75.9985%" y="511.50">__tcp_transmit_skb</text></g><g><title>tcp_v4_send_check (2 samples, 0.30%)</title><rect x="92.8144%" y="485" width="0.2994%" height="15" fill="rgb(213,23,39)"/><text x="93.0644%" y="495.50"></text></g><g><title>ktime_get (1 samples, 0.15%)</title><rect x="93.1138%" y="501" width="0.1497%" height="15" fill="rgb(238,48,10)"/><text x="93.3638%" y="511.50"></text></g><g><title>__tcp_push_pending_frames (122 samples, 18.26%)</title><rect x="75.2994%" y="533" width="18.2635%" height="15" fill="rgb(251,196,23)"/><text x="75.5494%" y="543.50">__tcp_push_pending_frames</text></g><g><title>tcp_write_xmit (121 samples, 18.11%)</title><rect x="75.4491%" y="517" width="18.1138%" height="15" fill="rgb(250,152,24)"/><text x="75.6991%" y="527.50">tcp_write_xmit</text></g><g><title>tcp_event_new_data_sent (2 samples, 0.30%)</title><rect x="93.2635%" y="501" width="0.2994%" height="15" fill="rgb(209,150,17)"/><text x="93.5135%" y="511.50"></text></g><g><title>tcp_rearm_rto (1 samples, 0.15%)</title><rect x="93.4132%" y="485" width="0.1497%" height="15" fill="rgb(234,202,34)"/><text x="93.6632%" y="495.50"></text></g><g><title>rb_first (1 samples, 0.15%)</title><rect x="93.4132%" y="469" width="0.1497%" height="15" fill="rgb(253,148,53)"/><text x="93.6632%" y="479.50"></text></g><g><title>sk_page_frag_refill (1 samples, 0.15%)</title><rect x="93.5629%" y="533" width="0.1497%" height="15" fill="rgb(218,129,16)"/><text x="93.8129%" y="543.50"></text></g><g><title>skb_page_frag_refill (1 samples, 0.15%)</title><rect x="93.5629%" y="517" width="0.1497%" height="15" fill="rgb(216,85,19)"/><text x="93.8129%" y="527.50"></text></g><g><title>__slab_alloc.constprop.0 (1 samples, 0.15%)</title><rect x="94.1617%" y="485" width="0.1497%" height="15" fill="rgb(235,228,7)"/><text x="94.4117%" y="495.50"></text></g><g><title>___slab_alloc (1 samples, 0.15%)</title><rect x="94.1617%" y="469" width="0.1497%" height="15" fill="rgb(245,175,0)"/><text x="94.4117%" y="479.50"></text></g><g><title>__kmalloc_node_track_caller (3 samples, 0.45%)</title><rect x="94.0120%" y="501" width="0.4491%" height="15" fill="rgb(208,168,36)"/><text x="94.2620%" y="511.50"></text></g><g><title>memset_erms (1 samples, 0.15%)</title><rect x="94.3114%" y="485" width="0.1497%" height="15" fill="rgb(246,171,24)"/><text x="94.5614%" y="495.50"></text></g><g><title>__ksize (1 samples, 0.15%)</title><rect x="94.4611%" y="501" width="0.1497%" height="15" fill="rgb(215,142,24)"/><text x="94.7111%" y="511.50"></text></g><g><title>sk_stream_alloc_skb (8 samples, 1.20%)</title><rect x="93.7126%" y="533" width="1.1976%" height="15" fill="rgb(250,187,7)"/><text x="93.9626%" y="543.50"></text></g><g><title>__alloc_skb (7 samples, 1.05%)</title><rect x="93.8623%" y="517" width="1.0479%" height="15" fill="rgb(228,66,33)"/><text x="94.1123%" y="527.50"></text></g><g><title>kmem_cache_alloc_node (2 samples, 0.30%)</title><rect x="94.6108%" y="501" width="0.2994%" height="15" fill="rgb(234,215,21)"/><text x="94.8608%" y="511.50"></text></g><g><title>should_failslab (1 samples, 0.15%)</title><rect x="94.7605%" y="485" width="0.1497%" height="15" fill="rgb(222,191,20)"/><text x="95.0105%" y="495.50"></text></g><g><title>skb_do_copy_data_nocache (1 samples, 0.15%)</title><rect x="94.9102%" y="533" width="0.1497%" height="15" fill="rgb(245,79,54)"/><text x="95.1602%" y="543.50"></text></g><g><title>_copy_from_iter_full (1 samples, 0.15%)</title><rect x="94.9102%" y="517" width="0.1497%" height="15" fill="rgb(240,10,37)"/><text x="95.1602%" y="527.50"></text></g><g><title>iov_iter_advance (1 samples, 0.15%)</title><rect x="94.9102%" y="501" width="0.1497%" height="15" fill="rgb(214,192,32)"/><text x="95.1602%" y="511.50"></text></g><g><title>skb_entail (3 samples, 0.45%)</title><rect x="95.0599%" y="533" width="0.4491%" height="15" fill="rgb(209,36,54)"/><text x="95.3099%" y="543.50"></text></g><g><title>__x64_sys_sendto (144 samples, 21.56%)</title><rect x="74.4012%" y="613" width="21.5569%" height="15" fill="rgb(220,10,11)"/><text x="74.6512%" y="623.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (144 samples, 21.56%)</title><rect x="74.4012%" y="597" width="21.5569%" height="15" fill="rgb(221,106,17)"/><text x="74.6512%" y="607.50">__sys_sendto</text></g><g><title>sock_sendmsg (144 samples, 21.56%)</title><rect x="74.4012%" y="581" width="21.5569%" height="15" fill="rgb(251,142,44)"/><text x="74.6512%" y="591.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (144 samples, 21.56%)</title><rect x="74.4012%" y="565" width="21.5569%" height="15" fill="rgb(238,13,15)"/><text x="74.6512%" y="575.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (140 samples, 20.96%)</title><rect x="75.0000%" y="549" width="20.9581%" height="15" fill="rgb(208,107,27)"/><text x="75.2500%" y="559.50">tcp_sendmsg_locked</text></g><g><title>tcp_send_mss (3 samples, 0.45%)</title><rect x="95.5090%" y="533" width="0.4491%" height="15" fill="rgb(205,136,37)"/><text x="95.7590%" y="543.50"></text></g><g><title>tcp_current_mss (3 samples, 0.45%)</title><rect x="95.5090%" y="517" width="0.4491%" height="15" fill="rgb(250,205,27)"/><text x="95.7590%" y="527.50"></text></g><g><title>ipv4_mtu (1 samples, 0.15%)</title><rect x="95.8084%" y="501" width="0.1497%" height="15" fill="rgb(210,80,43)"/><text x="96.0584%" y="511.50"></text></g><g><title>syscall_slow_exit_work (2 samples, 0.30%)</title><rect x="95.9581%" y="613" width="0.2994%" height="15" fill="rgb(247,160,36)"/><text x="96.2081%" y="623.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.15%)</title><rect x="96.1078%" y="597" width="0.1497%" height="15" fill="rgb(234,13,49)"/><text x="96.3578%" y="607.50"></text></g><g><title>do_syscall_64 (150 samples, 22.46%)</title><rect x="73.9521%" y="629" width="22.4551%" height="15" fill="rgb(234,122,0)"/><text x="74.2021%" y="639.50">do_syscall_64</text></g><g><title>syscall_trace_enter (1 samples, 0.15%)</title><rect x="96.2575%" y="613" width="0.1497%" height="15" fill="rgb(207,146,38)"/><text x="96.5075%" y="623.50"></text></g><g><title>ktime_get_coarse_real_ts64 (1 samples, 0.15%)</title><rect x="96.2575%" y="597" width="0.1497%" height="15" fill="rgb(207,177,25)"/><text x="96.5075%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (158 samples, 23.65%)</title><rect x="73.9521%" y="645" width="23.6527%" height="15" fill="rgb(211,178,42)"/><text x="74.2021%" y="655.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (8 samples, 1.20%)</title><rect x="96.4072%" y="629" width="1.1976%" height="15" fill="rgb(230,69,54)"/><text x="96.6572%" y="639.50"></text></g><g><title>mysql::conn::Conn::_query (170 samples, 25.45%)</title><rect x="72.4551%" y="741" width="25.4491%" height="15" fill="rgb(214,135,41)"/><text x="72.7051%" y="751.50">mysql::conn::Conn::_query</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (167 samples, 25.00%)</title><rect x="72.9042%" y="725" width="25.0000%" height="15" fill="rgb(237,67,25)"/><text x="73.1542%" y="735.50">mysql_common::proto::sync_framed::MySync..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (164 samples, 24.55%)</title><rect x="73.3533%" y="709" width="24.5509%" height="15" fill="rgb(222,189,50)"/><text x="73.6033%" y="719.50">std::io::buffered::BufWriter&lt;W&gt;::flush_..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (162 samples, 24.25%)</title><rect x="73.6527%" y="693" width="24.2515%" height="15" fill="rgb(245,148,34)"/><text x="73.9027%" y="703.50">&lt;std::net::tcp::TcpStream as std::io::W..</text></g><g><title>std::sys_common::net::TcpStream::write (162 samples, 24.25%)</title><rect x="73.6527%" y="677" width="24.2515%" height="15" fill="rgb(222,29,6)"/><text x="73.9027%" y="687.50">std::sys_common::net::TcpStream::write</text></g><g><title>__libc_send (162 samples, 24.25%)</title><rect x="73.6527%" y="661" width="24.2515%" height="15" fill="rgb(221,189,43)"/><text x="73.9027%" y="671.50">__libc_send</text></g><g><title>syscall_return_via_sysret (2 samples, 0.30%)</title><rect x="97.6048%" y="645" width="0.2994%" height="15" fill="rgb(207,36,27)"/><text x="97.8548%" y="655.50"></text></g><g><title>mysql::conn::Conn::select_db (1 samples, 0.15%)</title><rect x="97.9042%" y="741" width="0.1497%" height="15" fill="rgb(217,90,24)"/><text x="98.1542%" y="751.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.15%)</title><rect x="97.9042%" y="725" width="0.1497%" height="15" fill="rgb(224,66,35)"/><text x="98.1542%" y="735.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.15%)</title><rect x="97.9042%" y="709" width="0.1497%" height="15" fill="rgb(221,13,50)"/><text x="98.1542%" y="719.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.15%)</title><rect x="97.9042%" y="693" width="0.1497%" height="15" fill="rgb(236,68,49)"/><text x="98.1542%" y="703.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.15%)</title><rect x="97.9042%" y="677" width="0.1497%" height="15" fill="rgb(229,146,28)"/><text x="98.1542%" y="687.50"></text></g><g><title>__libc_send (1 samples, 0.15%)</title><rect x="97.9042%" y="661" width="0.1497%" height="15" fill="rgb(225,31,38)"/><text x="98.1542%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.15%)</title><rect x="97.9042%" y="645" width="0.1497%" height="15" fill="rgb(250,208,3)"/><text x="98.1542%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="97.9042%" y="629" width="0.1497%" height="15" fill="rgb(246,54,23)"/><text x="98.1542%" y="639.50"></text></g><g><title>__x64_sys_sendto (1 samples, 0.15%)</title><rect x="97.9042%" y="613" width="0.1497%" height="15" fill="rgb(243,76,11)"/><text x="98.1542%" y="623.50"></text></g><g><title>__sys_sendto (1 samples, 0.15%)</title><rect x="97.9042%" y="597" width="0.1497%" height="15" fill="rgb(245,21,50)"/><text x="98.1542%" y="607.50"></text></g><g><title>sock_sendmsg (1 samples, 0.15%)</title><rect x="97.9042%" y="581" width="0.1497%" height="15" fill="rgb(228,9,43)"/><text x="98.1542%" y="591.50"></text></g><g><title>tcp_sendmsg (1 samples, 0.15%)</title><rect x="97.9042%" y="565" width="0.1497%" height="15" fill="rgb(208,100,47)"/><text x="98.1542%" y="575.50"></text></g><g><title>release_sock (1 samples, 0.15%)</title><rect x="97.9042%" y="549" width="0.1497%" height="15" fill="rgb(232,26,8)"/><text x="98.1542%" y="559.50"></text></g><g><title>__release_sock (1 samples, 0.15%)</title><rect x="97.9042%" y="533" width="0.1497%" height="15" fill="rgb(216,166,38)"/><text x="98.1542%" y="543.50"></text></g><g><title>tcp_v4_do_rcv (1 samples, 0.15%)</title><rect x="97.9042%" y="517" width="0.1497%" height="15" fill="rgb(251,202,51)"/><text x="98.1542%" y="527.50"></text></g><g><title>tcp_rcv_established (1 samples, 0.15%)</title><rect x="97.9042%" y="501" width="0.1497%" height="15" fill="rgb(254,216,34)"/><text x="98.1542%" y="511.50"></text></g><g><title>tcp_ack (1 samples, 0.15%)</title><rect x="97.9042%" y="485" width="0.1497%" height="15" fill="rgb(251,32,27)"/><text x="98.1542%" y="495.50"></text></g><g><title>tcp_ack_update_rtt (1 samples, 0.15%)</title><rect x="97.9042%" y="469" width="0.1497%" height="15" fill="rgb(208,127,28)"/><text x="98.1542%" y="479.50"></text></g><g><title>apic_timer_interrupt (1 samples, 0.15%)</title><rect x="97.9042%" y="453" width="0.1497%" height="15" fill="rgb(224,137,22)"/><text x="98.1542%" y="463.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.15%)</title><rect x="97.9042%" y="437" width="0.1497%" height="15" fill="rgb(254,70,32)"/><text x="98.1542%" y="447.50"></text></g><g><title>irq_exit (1 samples, 0.15%)</title><rect x="97.9042%" y="421" width="0.1497%" height="15" fill="rgb(229,75,37)"/><text x="98.1542%" y="431.50"></text></g><g><title>__do_softirq (1 samples, 0.15%)</title><rect x="97.9042%" y="405" width="0.1497%" height="15" fill="rgb(252,64,23)"/><text x="98.1542%" y="415.50"></text></g><g><title>rebalance_domains (1 samples, 0.15%)</title><rect x="97.9042%" y="389" width="0.1497%" height="15" fill="rgb(232,162,48)"/><text x="98.1542%" y="399.50"></text></g><g><title>load_balance (1 samples, 0.15%)</title><rect x="97.9042%" y="373" width="0.1497%" height="15" fill="rgb(246,160,12)"/><text x="98.1542%" y="383.50"></text></g><g><title>__bitmap_and (1 samples, 0.15%)</title><rect x="97.9042%" y="357" width="0.1497%" height="15" fill="rgb(247,166,0)"/><text x="98.1542%" y="367.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.15%)</title><rect x="98.0539%" y="741" width="0.1497%" height="15" fill="rgb(249,219,21)"/><text x="98.3039%" y="751.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.15%)</title><rect x="98.0539%" y="725" width="0.1497%" height="15" fill="rgb(205,209,3)"/><text x="98.3039%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.15%)</title><rect x="98.0539%" y="709" width="0.1497%" height="15" fill="rgb(243,44,1)"/><text x="98.3039%" y="719.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (1 samples, 0.15%)</title><rect x="98.0539%" y="693" width="0.1497%" height="15" fill="rgb(206,159,16)"/><text x="98.3039%" y="703.50"></text></g><g><title>std::io::stdio::stdout (1 samples, 0.15%)</title><rect x="98.0539%" y="677" width="0.1497%" height="15" fill="rgb(244,77,30)"/><text x="98.3039%" y="687.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init (1 samples, 0.15%)</title><rect x="98.0539%" y="661" width="0.1497%" height="15" fill="rgb(218,69,12)"/><text x="98.3039%" y="671.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.15%)</title><rect x="98.0539%" y="645" width="0.1497%" height="15" fill="rgb(212,87,7)"/><text x="98.3039%" y="655.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::initialize (1 samples, 0.15%)</title><rect x="98.0539%" y="629" width="0.1497%" height="15" fill="rgb(245,114,25)"/><text x="98.3039%" y="639.50"></text></g><g><title>std::sync::once::Once::call_once_force (1 samples, 0.15%)</title><rect x="98.0539%" y="613" width="0.1497%" height="15" fill="rgb(210,61,42)"/><text x="98.3039%" y="623.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.15%)</title><rect x="98.0539%" y="597" width="0.1497%" height="15" fill="rgb(211,52,33)"/><text x="98.3039%" y="607.50"></text></g><g><title>std::sync::once::Once::call_once_force::{{closure}} (1 samples, 0.15%)</title><rect x="98.0539%" y="581" width="0.1497%" height="15" fill="rgb(234,58,33)"/><text x="98.3039%" y="591.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.15%)</title><rect x="98.0539%" y="565" width="0.1497%" height="15" fill="rgb(220,115,36)"/><text x="98.3039%" y="575.50"></text></g><g><title>std::lazy::SyncOnceCell&lt;T&gt;::get_or_init::{{closure}} (1 samples, 0.15%)</title><rect x="98.0539%" y="549" width="0.1497%" height="15" fill="rgb(243,153,54)"/><text x="98.3039%" y="559.50"></text></g><g><title>std::io::stdio::stdout::{{closure}} (1 samples, 0.15%)</title><rect x="98.0539%" y="533" width="0.1497%" height="15" fill="rgb(251,47,18)"/><text x="98.3039%" y="543.50"></text></g><g><title>std::sys_common::at_exit (1 samples, 0.15%)</title><rect x="98.0539%" y="517" width="0.1497%" height="15" fill="rgb(242,102,42)"/><text x="98.3039%" y="527.50"></text></g><g><title>std::sys_common::at_exit_imp::push (1 samples, 0.15%)</title><rect x="98.0539%" y="501" width="0.1497%" height="15" fill="rgb(234,31,38)"/><text x="98.3039%" y="511.50"></text></g><g><title>std::sys_common::mutex::StaticMutex::lock (1 samples, 0.15%)</title><rect x="98.0539%" y="485" width="0.1497%" height="15" fill="rgb(221,117,51)"/><text x="98.3039%" y="495.50"></text></g><g><title>std::sys::unix::mutex::Mutex::lock (1 samples, 0.15%)</title><rect x="98.0539%" y="469" width="0.1497%" height="15" fill="rgb(212,20,18)"/><text x="98.3039%" y="479.50"></text></g><g><title>__GI___pthread_mutex_lock (1 samples, 0.15%)</title><rect x="98.0539%" y="453" width="0.1497%" height="15" fill="rgb(245,133,36)"/><text x="98.3039%" y="463.50"></text></g><g><title>__libc_start_main (452 samples, 67.66%)</title><rect x="30.6886%" y="901" width="67.6647%" height="15" fill="rgb(212,6,19)"/><text x="30.9386%" y="911.50">__libc_start_main</text></g><g><title>main (452 samples, 67.66%)</title><rect x="30.6886%" y="885" width="67.6647%" height="15" fill="rgb(218,1,36)"/><text x="30.9386%" y="895.50">main</text></g><g><title>std::rt::lang_start_internal (452 samples, 67.66%)</title><rect x="30.6886%" y="869" width="67.6647%" height="15" fill="rgb(246,84,54)"/><text x="30.9386%" y="879.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (452 samples, 67.66%)</title><rect x="30.6886%" y="853" width="67.6647%" height="15" fill="rgb(242,110,6)"/><text x="30.9386%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (452 samples, 67.66%)</title><rect x="30.6886%" y="837" width="67.6647%" height="15" fill="rgb(214,47,5)"/><text x="30.9386%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (452 samples, 67.66%)</title><rect x="30.6886%" y="821" width="67.6647%" height="15" fill="rgb(218,159,25)"/><text x="30.9386%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (452 samples, 67.66%)</title><rect x="30.6886%" y="805" width="67.6647%" height="15" fill="rgb(215,211,28)"/><text x="30.9386%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (452 samples, 67.66%)</title><rect x="30.6886%" y="789" width="67.6647%" height="15" fill="rgb(238,59,32)"/><text x="30.9386%" y="799.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (452 samples, 67.66%)</title><rect x="30.6886%" y="773" width="67.6647%" height="15" fill="rgb(226,82,3)"/><text x="30.9386%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters::main (452 samples, 67.66%)</title><rect x="30.6886%" y="757" width="67.6647%" height="15" fill="rgb(240,164,32)"/><text x="30.9386%" y="767.50">lobsters::main</text></g><g><title>std::net::each_addr (1 samples, 0.15%)</title><rect x="98.2036%" y="741" width="0.1497%" height="15" fill="rgb(232,46,7)"/><text x="98.4536%" y="751.50"></text></g><g><title>&lt;str as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.15%)</title><rect x="98.2036%" y="725" width="0.1497%" height="15" fill="rgb(229,129,53)"/><text x="98.4536%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.15%)</title><rect x="98.2036%" y="709" width="0.1497%" height="15" fill="rgb(234,188,29)"/><text x="98.4536%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.15%)</title><rect x="98.2036%" y="693" width="0.1497%" height="15" fill="rgb(246,141,4)"/><text x="98.4536%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="98.2036%" y="677" width="0.1497%" height="15" fill="rgb(229,23,39)"/><text x="98.4536%" y="687.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="98.2036%" y="661" width="0.1497%" height="15" fill="rgb(206,12,3)"/><text x="98.4536%" y="671.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="98.2036%" y="645" width="0.1497%" height="15" fill="rgb(252,226,20)"/><text x="98.4536%" y="655.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="98.2036%" y="629" width="0.1497%" height="15" fill="rgb(216,123,35)"/><text x="98.4536%" y="639.50"></text></g><g><title>_start (453 samples, 67.81%)</title><rect x="30.6886%" y="917" width="67.8144%" height="15" fill="rgb(212,68,40)"/><text x="30.9386%" y="927.50">_start</text></g><g><title>_dl_start (1 samples, 0.15%)</title><rect x="98.3533%" y="901" width="0.1497%" height="15" fill="rgb(254,125,32)"/><text x="98.6033%" y="911.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="98.3533%" y="885" width="0.1497%" height="15" fill="rgb(253,97,22)"/><text x="98.6033%" y="895.50"></text></g><g><title>dl_main (1 samples, 0.15%)</title><rect x="98.3533%" y="869" width="0.1497%" height="15" fill="rgb(241,101,14)"/><text x="98.6033%" y="879.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.15%)</title><rect x="98.3533%" y="853" width="0.1497%" height="15" fill="rgb(238,103,29)"/><text x="98.6033%" y="863.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="98.3533%" y="837" width="0.1497%" height="15" fill="rgb(233,195,47)"/><text x="98.6033%" y="847.50"></text></g><g><title>openaux (1 samples, 0.15%)</title><rect x="98.3533%" y="821" width="0.1497%" height="15" fill="rgb(246,218,30)"/><text x="98.6033%" y="831.50"></text></g><g><title>_dl_map_object (1 samples, 0.15%)</title><rect x="98.3533%" y="805" width="0.1497%" height="15" fill="rgb(219,145,47)"/><text x="98.6033%" y="815.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.15%)</title><rect x="98.3533%" y="789" width="0.1497%" height="15" fill="rgb(243,12,26)"/><text x="98.6033%" y="799.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.15%)</title><rect x="98.3533%" y="773" width="0.1497%" height="15" fill="rgb(214,87,16)"/><text x="98.6033%" y="783.50"></text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="98.3533%" y="757" width="0.1497%" height="15" fill="rgb(208,99,42)"/><text x="98.6033%" y="767.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="98.3533%" y="741" width="0.1497%" height="15" fill="rgb(253,99,2)"/><text x="98.6033%" y="751.50"></text></g><g><title>[vmlinux] (1 samples, 0.15%)</title><rect x="98.5030%" y="885" width="0.1497%" height="15" fill="rgb(220,168,23)"/><text x="98.7530%" y="895.50"></text></g><g><title>do_group_exit (1 samples, 0.15%)</title><rect x="98.5030%" y="869" width="0.1497%" height="15" fill="rgb(242,38,24)"/><text x="98.7530%" y="879.50"></text></g><g><title>do_exit (1 samples, 0.15%)</title><rect x="98.5030%" y="853" width="0.1497%" height="15" fill="rgb(225,182,9)"/><text x="98.7530%" y="863.50"></text></g><g><title>mmput (1 samples, 0.15%)</title><rect x="98.5030%" y="837" width="0.1497%" height="15" fill="rgb(243,178,37)"/><text x="98.7530%" y="847.50"></text></g><g><title>exit_mmap (1 samples, 0.15%)</title><rect x="98.5030%" y="821" width="0.1497%" height="15" fill="rgb(232,139,19)"/><text x="98.7530%" y="831.50"></text></g><g><title>unmap_vmas (1 samples, 0.15%)</title><rect x="98.5030%" y="805" width="0.1497%" height="15" fill="rgb(225,201,24)"/><text x="98.7530%" y="815.50"></text></g><g><title>unmap_single_vma (1 samples, 0.15%)</title><rect x="98.5030%" y="789" width="0.1497%" height="15" fill="rgb(221,47,46)"/><text x="98.7530%" y="799.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.30%)</title><rect x="98.5030%" y="917" width="0.2994%" height="15" fill="rgb(249,23,13)"/><text x="98.7530%" y="927.50"></text></g><g><title>do_syscall_64 (2 samples, 0.30%)</title><rect x="98.5030%" y="901" width="0.2994%" height="15" fill="rgb(219,9,5)"/><text x="98.7530%" y="911.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.15%)</title><rect x="98.6527%" y="885" width="0.1497%" height="15" fill="rgb(254,171,16)"/><text x="98.9027%" y="895.50"></text></g><g><title>do_execve (1 samples, 0.15%)</title><rect x="98.6527%" y="869" width="0.1497%" height="15" fill="rgb(230,171,20)"/><text x="98.9027%" y="879.50"></text></g><g><title>__do_execve_file (1 samples, 0.15%)</title><rect x="98.6527%" y="853" width="0.1497%" height="15" fill="rgb(210,71,41)"/><text x="98.9027%" y="863.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.15%)</title><rect x="98.6527%" y="837" width="0.1497%" height="15" fill="rgb(206,173,20)"/><text x="98.9027%" y="847.50"></text></g><g><title>load_elf_binary (1 samples, 0.15%)</title><rect x="98.6527%" y="821" width="0.1497%" height="15" fill="rgb(233,88,34)"/><text x="98.9027%" y="831.50"></text></g><g><title>__clear_user (1 samples, 0.15%)</title><rect x="98.6527%" y="805" width="0.1497%" height="15" fill="rgb(223,209,46)"/><text x="98.9027%" y="815.50"></text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="98.6527%" y="789" width="0.1497%" height="15" fill="rgb(250,43,18)"/><text x="98.9027%" y="799.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.15%)</title><rect x="98.6527%" y="773" width="0.1497%" height="15" fill="rgb(208,13,10)"/><text x="98.9027%" y="783.50"></text></g><g><title>handle_mm_fault (1 samples, 0.15%)</title><rect x="98.6527%" y="757" width="0.1497%" height="15" fill="rgb(212,200,36)"/><text x="98.9027%" y="767.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="98.6527%" y="741" width="0.1497%" height="15" fill="rgb(225,90,30)"/><text x="98.9027%" y="751.50"></text></g><g><title>__do_fault (1 samples, 0.15%)</title><rect x="98.6527%" y="725" width="0.1497%" height="15" fill="rgb(236,182,39)"/><text x="98.9027%" y="735.50"></text></g><g><title>ext4_filemap_fault (1 samples, 0.15%)</title><rect x="98.6527%" y="709" width="0.1497%" height="15" fill="rgb(212,144,35)"/><text x="98.9027%" y="719.50"></text></g><g><title>mysql_common::packets::column_from_payload (1 samples, 0.15%)</title><rect x="98.8024%" y="917" width="0.1497%" height="15" fill="rgb(228,63,44)"/><text x="99.0524%" y="927.50"></text></g><g><title>lobsters (662 samples, 99.10%)</title><rect x="0.0000%" y="933" width="99.1018%" height="15" fill="rgb(228,109,6)"/><text x="0.2500%" y="943.50">lobsters</text></g><g><title>page_fault (1 samples, 0.15%)</title><rect x="98.9521%" y="917" width="0.1497%" height="15" fill="rgb(238,117,24)"/><text x="99.2021%" y="927.50"></text></g><g><title>all (668 samples, 100%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(242,26,26)"/><text x="0.2500%" y="959.50"></text></g><g><title>perf (6 samples, 0.90%)</title><rect x="99.1018%" y="933" width="0.8982%" height="15" fill="rgb(221,92,48)"/><text x="99.3518%" y="943.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.90%)</title><rect x="99.1018%" y="917" width="0.8982%" height="15" fill="rgb(209,209,32)"/><text x="99.3518%" y="927.50"></text></g><g><title>do_syscall_64 (6 samples, 0.90%)</title><rect x="99.1018%" y="901" width="0.8982%" height="15" fill="rgb(221,70,22)"/><text x="99.3518%" y="911.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.90%)</title><rect x="99.1018%" y="885" width="0.8982%" height="15" fill="rgb(248,145,5)"/><text x="99.3518%" y="895.50"></text></g><g><title>do_execve (6 samples, 0.90%)</title><rect x="99.1018%" y="869" width="0.8982%" height="15" fill="rgb(226,116,26)"/><text x="99.3518%" y="879.50"></text></g><g><title>__do_execve_file (6 samples, 0.90%)</title><rect x="99.1018%" y="853" width="0.8982%" height="15" fill="rgb(244,5,17)"/><text x="99.3518%" y="863.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.90%)</title><rect x="99.1018%" y="837" width="0.8982%" height="15" fill="rgb(252,159,33)"/><text x="99.3518%" y="847.50"></text></g><g><title>load_elf_binary (6 samples, 0.90%)</title><rect x="99.1018%" y="821" width="0.8982%" height="15" fill="rgb(206,71,0)"/><text x="99.3518%" y="831.50"></text></g><g><title>setup_new_exec (6 samples, 0.90%)</title><rect x="99.1018%" y="805" width="0.8982%" height="15" fill="rgb(233,118,54)"/><text x="99.3518%" y="815.50"></text></g><g><title>perf_event_exec (6 samples, 0.90%)</title><rect x="99.1018%" y="789" width="0.8982%" height="15" fill="rgb(234,83,48)"/><text x="99.3518%" y="799.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.75%)</title><rect x="99.2515%" y="773" width="0.7485%" height="15" fill="rgb(228,3,54)"/><text x="99.5015%" y="783.50"></text></g><g><title>native_write_msr (5 samples, 0.75%)</title><rect x="99.2515%" y="757" width="0.7485%" height="15" fill="rgb(226,155,13)"/><text x="99.5015%" y="767.50"></text></g></svg></svg>