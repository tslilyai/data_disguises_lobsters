<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="917.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="917.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (2 samples, 0.18%)</title><rect x="0.1835%" y="853" width="0.1835%" height="15" fill="rgb(227,0,7)"/><text x="0.4335%" y="863.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.18%)</title><rect x="0.3670%" y="837" width="0.1835%" height="15" fill="rgb(217,0,24)"/><text x="0.6170%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.28%)</title><rect x="0.5505%" y="837" width="0.2752%" height="15" fill="rgb(221,193,54)"/><text x="0.8005%" y="847.50"></text></g><g><title>__libc_send (2 samples, 0.18%)</title><rect x="1.5596%" y="837" width="0.1835%" height="15" fill="rgb(248,212,6)"/><text x="1.8096%" y="847.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.18%)</title><rect x="1.5596%" y="821" width="0.1835%" height="15" fill="rgb(208,68,35)"/><text x="1.8096%" y="831.50"></text></g><g><title>_int_free (4 samples, 0.37%)</title><rect x="1.8349%" y="837" width="0.3670%" height="15" fill="rgb(232,128,0)"/><text x="2.0849%" y="847.50"></text></g><g><title>_int_malloc (2 samples, 0.18%)</title><rect x="2.2018%" y="837" width="0.1835%" height="15" fill="rgb(207,160,47)"/><text x="2.4518%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.18%)</title><rect x="2.4771%" y="837" width="0.1835%" height="15" fill="rgb(228,23,34)"/><text x="2.7271%" y="847.50"></text></g><g><title>alloc::string::String::push (4 samples, 0.37%)</title><rect x="2.7523%" y="837" width="0.3670%" height="15" fill="rgb(218,30,26)"/><text x="3.0023%" y="847.50"></text></g><g><title>core::fmt::write (3 samples, 0.28%)</title><rect x="3.1193%" y="837" width="0.2752%" height="15" fill="rgb(220,122,19)"/><text x="3.3693%" y="847.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (2 samples, 0.18%)</title><rect x="3.9450%" y="837" width="0.1835%" height="15" fill="rgb(250,228,42)"/><text x="4.1950%" y="847.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.18%)</title><rect x="4.4037%" y="837" width="0.1835%" height="15" fill="rgb(240,193,28)"/><text x="4.6537%" y="847.50"></text></g><g><title>[anon] (53 samples, 4.86%)</title><rect x="0.3670%" y="853" width="4.8624%" height="15" fill="rgb(216,20,37)"/><text x="0.6170%" y="863.50">[anon]</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.18%)</title><rect x="5.3211%" y="837" width="0.1835%" height="15" fill="rgb(206,188,39)"/><text x="5.5711%" y="847.50"></text></g><g><title>[lobsters] (6 samples, 0.55%)</title><rect x="5.3211%" y="853" width="0.5505%" height="15" fill="rgb(217,207,13)"/><text x="5.5711%" y="863.50"></text></g><g><title>__memmove_avx_unaligned_erms (5 samples, 0.46%)</title><rect x="6.2385%" y="789" width="0.4587%" height="15" fill="rgb(231,73,38)"/><text x="6.4885%" y="799.50"></text></g><g><title>&lt;decor::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (9 samples, 0.83%)</title><rect x="5.9633%" y="837" width="0.8257%" height="15" fill="rgb(225,20,46)"/><text x="6.2133%" y="847.50"></text></g><g><title>sql_parser::parser::parse_statements (9 samples, 0.83%)</title><rect x="5.9633%" y="821" width="0.8257%" height="15" fill="rgb(210,31,41)"/><text x="6.2133%" y="831.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (9 samples, 0.83%)</title><rect x="5.9633%" y="805" width="0.8257%" height="15" fill="rgb(221,200,47)"/><text x="6.2133%" y="815.50"></text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (2 samples, 0.18%)</title><rect x="6.8807%" y="837" width="0.1835%" height="15" fill="rgb(226,26,5)"/><text x="7.1307%" y="847.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="7.4312%" y="837" width="0.1835%" height="15" fill="rgb(249,33,26)"/><text x="7.6812%" y="847.50"></text></g><g><title>__libc_start_main (3 samples, 0.28%)</title><rect x="7.7064%" y="837" width="0.2752%" height="15" fill="rgb(235,183,28)"/><text x="7.9564%" y="847.50"></text></g><g><title>main (3 samples, 0.28%)</title><rect x="7.7064%" y="821" width="0.2752%" height="15" fill="rgb(221,5,38)"/><text x="7.9564%" y="831.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.28%)</title><rect x="7.7064%" y="805" width="0.2752%" height="15" fill="rgb(247,18,42)"/><text x="7.9564%" y="815.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.28%)</title><rect x="7.7064%" y="789" width="0.2752%" height="15" fill="rgb(241,131,45)"/><text x="7.9564%" y="799.50"></text></g><g><title>std::panicking::try (3 samples, 0.28%)</title><rect x="7.7064%" y="773" width="0.2752%" height="15" fill="rgb(249,31,29)"/><text x="7.9564%" y="783.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.28%)</title><rect x="7.7064%" y="757" width="0.2752%" height="15" fill="rgb(225,111,53)"/><text x="7.9564%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.28%)</title><rect x="7.7064%" y="741" width="0.2752%" height="15" fill="rgb(238,160,17)"/><text x="7.9564%" y="751.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.28%)</title><rect x="7.7064%" y="725" width="0.2752%" height="15" fill="rgb(214,148,48)"/><text x="7.9564%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.28%)</title><rect x="7.7064%" y="709" width="0.2752%" height="15" fill="rgb(232,36,49)"/><text x="7.9564%" y="719.50"></text></g><g><title>lobsters::main (3 samples, 0.28%)</title><rect x="7.7064%" y="693" width="0.2752%" height="15" fill="rgb(209,103,24)"/><text x="7.9564%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.28%)</title><rect x="7.7064%" y="677" width="0.2752%" height="15" fill="rgb(229,88,8)"/><text x="7.9564%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (3 samples, 0.28%)</title><rect x="7.7064%" y="661" width="0.2752%" height="15" fill="rgb(213,181,19)"/><text x="7.9564%" y="671.50"></text></g><g><title>mysql::conn::Conn::next_text (3 samples, 0.28%)</title><rect x="7.7064%" y="645" width="0.2752%" height="15" fill="rgb(254,191,54)"/><text x="7.9564%" y="655.50"></text></g><g><title>mysql_common::value::read_text_values (3 samples, 0.28%)</title><rect x="7.7064%" y="629" width="0.2752%" height="15" fill="rgb(241,83,37)"/><text x="7.9564%" y="639.50"></text></g><g><title>__rdl_alloc (2 samples, 0.18%)</title><rect x="8.0734%" y="837" width="0.1835%" height="15" fill="rgb(233,36,39)"/><text x="8.3234%" y="847.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.18%)</title><rect x="8.0734%" y="821" width="0.1835%" height="15" fill="rgb(226,3,54)"/><text x="8.3234%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.37%)</title><rect x="8.4404%" y="837" width="0.3670%" height="15" fill="rgb(245,192,40)"/><text x="8.6904%" y="847.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.18%)</title><rect x="9.0826%" y="837" width="0.1835%" height="15" fill="rgb(238,167,29)"/><text x="9.3326%" y="847.50"></text></g><g><title>sql_parser::tokenizer::PeekableChars::next (2 samples, 0.18%)</title><rect x="9.7248%" y="709" width="0.1835%" height="15" fill="rgb(232,182,51)"/><text x="9.9748%" y="719.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (7 samples, 0.64%)</title><rect x="9.3578%" y="837" width="0.6422%" height="15" fill="rgb(231,60,39)"/><text x="9.6078%" y="847.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7 samples, 0.64%)</title><rect x="9.3578%" y="821" width="0.6422%" height="15" fill="rgb(208,69,12)"/><text x="9.6078%" y="831.50"></text></g><g><title>decor::Shim::run_on_tcp (7 samples, 0.64%)</title><rect x="9.3578%" y="805" width="0.6422%" height="15" fill="rgb(235,93,37)"/><text x="9.6078%" y="815.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (7 samples, 0.64%)</title><rect x="9.3578%" y="789" width="0.6422%" height="15" fill="rgb(213,116,39)"/><text x="9.6078%" y="799.50"></text></g><g><title>&lt;decor::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (7 samples, 0.64%)</title><rect x="9.3578%" y="773" width="0.6422%" height="15" fill="rgb(222,207,29)"/><text x="9.6078%" y="783.50"></text></g><g><title>sql_parser::parser::parse_statements (7 samples, 0.64%)</title><rect x="9.3578%" y="757" width="0.6422%" height="15" fill="rgb(206,96,30)"/><text x="9.6078%" y="767.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (7 samples, 0.64%)</title><rect x="9.3578%" y="741" width="0.6422%" height="15" fill="rgb(218,138,4)"/><text x="9.6078%" y="751.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (7 samples, 0.64%)</title><rect x="9.3578%" y="725" width="0.6422%" height="15" fill="rgb(250,191,14)"/><text x="9.6078%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.28%)</title><rect x="10.0000%" y="837" width="0.2752%" height="15" fill="rgb(239,60,40)"/><text x="10.2500%" y="847.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (2 samples, 0.18%)</title><rect x="10.5505%" y="837" width="0.1835%" height="15" fill="rgb(206,27,48)"/><text x="10.8005%" y="847.50"></text></g><g><title>&lt;decor::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_init (2 samples, 0.18%)</title><rect x="10.5505%" y="821" width="0.1835%" height="15" fill="rgb(225,35,8)"/><text x="10.8005%" y="831.50"></text></g><g><title>decor::Shim::create_schema (2 samples, 0.18%)</title><rect x="10.5505%" y="805" width="0.1835%" height="15" fill="rgb(250,213,24)"/><text x="10.8005%" y="815.50"></text></g><g><title>sql_parser::parser::parse_statements (2 samples, 0.18%)</title><rect x="10.5505%" y="789" width="0.1835%" height="15" fill="rgb(247,123,22)"/><text x="10.8005%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (4 samples, 0.37%)</title><rect x="11.0092%" y="821" width="0.3670%" height="15" fill="rgb(231,138,38)"/><text x="11.2592%" y="831.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (4 samples, 0.37%)</title><rect x="11.0092%" y="805" width="0.3670%" height="15" fill="rgb(231,145,46)"/><text x="11.2592%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (4 samples, 0.37%)</title><rect x="11.0092%" y="789" width="0.3670%" height="15" fill="rgb(251,118,11)"/><text x="11.2592%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (4 samples, 0.37%)</title><rect x="11.0092%" y="773" width="0.3670%" height="15" fill="rgb(217,147,25)"/><text x="11.2592%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::expected (3 samples, 0.28%)</title><rect x="11.1009%" y="757" width="0.2752%" height="15" fill="rgb(247,81,37)"/><text x="11.3509%" y="767.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.28%)</title><rect x="11.1009%" y="741" width="0.2752%" height="15" fill="rgb(209,12,38)"/><text x="11.3509%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.28%)</title><rect x="11.1009%" y="725" width="0.2752%" height="15" fill="rgb(227,1,9)"/><text x="11.3509%" y="735.50"></text></g><g><title>core::fmt::write (3 samples, 0.28%)</title><rect x="11.1009%" y="709" width="0.2752%" height="15" fill="rgb(248,47,43)"/><text x="11.3509%" y="719.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (16 samples, 1.47%)</title><rect x="11.3761%" y="805" width="1.4679%" height="15" fill="rgb(221,10,30)"/><text x="11.6261%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (16 samples, 1.47%)</title><rect x="11.3761%" y="789" width="1.4679%" height="15" fill="rgb(210,229,1)"/><text x="11.6261%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (16 samples, 1.47%)</title><rect x="11.3761%" y="773" width="1.4679%" height="15" fill="rgb(222,148,37)"/><text x="11.6261%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (15 samples, 1.38%)</title><rect x="11.4679%" y="757" width="1.3761%" height="15" fill="rgb(234,67,33)"/><text x="11.7179%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::expected (14 samples, 1.28%)</title><rect x="11.5596%" y="741" width="1.2844%" height="15" fill="rgb(247,98,35)"/><text x="11.8096%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 1.28%)</title><rect x="11.5596%" y="725" width="1.2844%" height="15" fill="rgb(247,138,52)"/><text x="11.8096%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (14 samples, 1.28%)</title><rect x="11.5596%" y="709" width="1.2844%" height="15" fill="rgb(213,79,30)"/><text x="11.8096%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 1.28%)</title><rect x="11.5596%" y="693" width="1.2844%" height="15" fill="rgb(246,177,23)"/><text x="11.8096%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 1.28%)</title><rect x="11.5596%" y="677" width="1.2844%" height="15" fill="rgb(230,62,27)"/><text x="11.8096%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (14 samples, 1.28%)</title><rect x="11.5596%" y="661" width="1.2844%" height="15" fill="rgb(216,154,8)"/><text x="11.8096%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (14 samples, 1.28%)</title><rect x="11.5596%" y="645" width="1.2844%" height="15" fill="rgb(244,35,45)"/><text x="11.8096%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (14 samples, 1.28%)</title><rect x="11.5596%" y="629" width="1.2844%" height="15" fill="rgb(251,115,12)"/><text x="11.8096%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 1.28%)</title><rect x="11.5596%" y="613" width="1.2844%" height="15" fill="rgb(240,54,50)"/><text x="11.8096%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 1.28%)</title><rect x="11.5596%" y="597" width="1.2844%" height="15" fill="rgb(233,84,52)"/><text x="11.8096%" y="607.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (5 samples, 0.46%)</title><rect x="12.8440%" y="773" width="0.4587%" height="15" fill="rgb(207,117,47)"/><text x="13.0940%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (4 samples, 0.37%)</title><rect x="12.9358%" y="757" width="0.3670%" height="15" fill="rgb(249,43,39)"/><text x="13.1858%" y="767.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.28%)</title><rect x="13.0275%" y="741" width="0.2752%" height="15" fill="rgb(209,38,44)"/><text x="13.2775%" y="751.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="14.2202%" y="613" width="0.1835%" height="15" fill="rgb(236,212,23)"/><text x="14.4702%" y="623.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.28%)</title><rect x="14.2202%" y="741" width="0.2752%" height="15" fill="rgb(242,79,21)"/><text x="14.4702%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.28%)</title><rect x="14.2202%" y="725" width="0.2752%" height="15" fill="rgb(211,96,35)"/><text x="14.4702%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.28%)</title><rect x="14.2202%" y="709" width="0.2752%" height="15" fill="rgb(253,215,40)"/><text x="14.4702%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.28%)</title><rect x="14.2202%" y="693" width="0.2752%" height="15" fill="rgb(211,81,21)"/><text x="14.4702%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.28%)</title><rect x="14.2202%" y="677" width="0.2752%" height="15" fill="rgb(208,190,38)"/><text x="14.4702%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.28%)</title><rect x="14.2202%" y="661" width="0.2752%" height="15" fill="rgb(235,213,38)"/><text x="14.4702%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.28%)</title><rect x="14.2202%" y="645" width="0.2752%" height="15" fill="rgb(237,122,38)"/><text x="14.4702%" y="655.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.28%)</title><rect x="14.2202%" y="629" width="0.2752%" height="15" fill="rgb(244,218,35)"/><text x="14.4702%" y="639.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (22 samples, 2.02%)</title><rect x="12.8440%" y="789" width="2.0183%" height="15" fill="rgb(240,68,47)"/><text x="13.0940%" y="799.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_prefix (17 samples, 1.56%)</title><rect x="13.3028%" y="773" width="1.5596%" height="15" fill="rgb(210,16,53)"/><text x="13.5528%" y="783.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (10 samples, 0.92%)</title><rect x="13.9450%" y="757" width="0.9174%" height="15" fill="rgb(235,124,12)"/><text x="14.1950%" y="767.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (4 samples, 0.37%)</title><rect x="14.4954%" y="741" width="0.3670%" height="15" fill="rgb(224,169,11)"/><text x="14.7454%" y="751.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (4 samples, 0.37%)</title><rect x="14.4954%" y="725" width="0.3670%" height="15" fill="rgb(250,166,2)"/><text x="14.7454%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (4 samples, 0.37%)</title><rect x="14.4954%" y="709" width="0.3670%" height="15" fill="rgb(242,216,29)"/><text x="14.7454%" y="719.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (2 samples, 0.18%)</title><rect x="14.6789%" y="693" width="0.1835%" height="15" fill="rgb(230,116,27)"/><text x="14.9289%" y="703.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.18%)</title><rect x="15.2294%" y="741" width="0.1835%" height="15" fill="rgb(228,99,48)"/><text x="15.4794%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (5 samples, 0.46%)</title><rect x="15.0459%" y="757" width="0.4587%" height="15" fill="rgb(253,11,6)"/><text x="15.2959%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_object_name (5 samples, 0.46%)</title><rect x="15.5046%" y="757" width="0.4587%" height="15" fill="rgb(247,143,39)"/><text x="15.7546%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_identifier (4 samples, 0.37%)</title><rect x="15.5963%" y="741" width="0.3670%" height="15" fill="rgb(236,97,10)"/><text x="15.8463%" y="751.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (3 samples, 0.28%)</title><rect x="15.6881%" y="725" width="0.2752%" height="15" fill="rgb(233,208,19)"/><text x="15.9381%" y="735.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_lower (3 samples, 0.28%)</title><rect x="15.6881%" y="709" width="0.2752%" height="15" fill="rgb(216,164,2)"/><text x="15.9381%" y="719.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (3 samples, 0.28%)</title><rect x="15.6881%" y="693" width="0.2752%" height="15" fill="rgb(220,129,5)"/><text x="15.9381%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (3 samples, 0.28%)</title><rect x="15.6881%" y="677" width="0.2752%" height="15" fill="rgb(242,17,10)"/><text x="15.9381%" y="687.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (2 samples, 0.18%)</title><rect x="15.7798%" y="661" width="0.1835%" height="15" fill="rgb(242,107,0)"/><text x="16.0298%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (60 samples, 5.50%)</title><rect x="11.0092%" y="837" width="5.5046%" height="15" fill="rgb(251,28,31)"/><text x="11.2592%" y="847.50">sql_par..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (56 samples, 5.14%)</title><rect x="11.3761%" y="821" width="5.1376%" height="15" fill="rgb(233,223,10)"/><text x="11.6261%" y="831.50">sql_pa..</text></g><g><title>sql_parser::parser::Parser::parse_select (40 samples, 3.67%)</title><rect x="12.8440%" y="805" width="3.6697%" height="15" fill="rgb(215,21,27)"/><text x="13.0940%" y="815.50">sql_..</text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (18 samples, 1.65%)</title><rect x="14.8624%" y="789" width="1.6514%" height="15" fill="rgb(232,23,21)"/><text x="15.1124%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_factor (17 samples, 1.56%)</title><rect x="14.9541%" y="773" width="1.5596%" height="15" fill="rgb(244,5,23)"/><text x="15.2041%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_optional_table_alias (6 samples, 0.55%)</title><rect x="15.9633%" y="757" width="0.5505%" height="15" fill="rgb(226,81,46)"/><text x="16.2133%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_optional_alias (6 samples, 0.55%)</title><rect x="15.9633%" y="741" width="0.5505%" height="15" fill="rgb(247,70,30)"/><text x="16.2133%" y="751.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (3 samples, 0.28%)</title><rect x="16.2385%" y="725" width="0.2752%" height="15" fill="rgb(212,68,19)"/><text x="16.4885%" y="735.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (2 samples, 0.18%)</title><rect x="16.6055%" y="821" width="0.1835%" height="15" fill="rgb(240,187,13)"/><text x="16.8555%" y="831.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (2 samples, 0.18%)</title><rect x="16.6055%" y="805" width="0.1835%" height="15" fill="rgb(223,113,26)"/><text x="16.8555%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (2 samples, 0.18%)</title><rect x="16.6055%" y="789" width="0.1835%" height="15" fill="rgb(206,192,2)"/><text x="16.8555%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (2 samples, 0.18%)</title><rect x="16.6055%" y="773" width="0.1835%" height="15" fill="rgb(241,108,4)"/><text x="16.8555%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::expected (2 samples, 0.18%)</title><rect x="16.6055%" y="757" width="0.1835%" height="15" fill="rgb(247,173,49)"/><text x="16.8555%" y="767.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (3 samples, 0.28%)</title><rect x="16.7890%" y="725" width="0.2752%" height="15" fill="rgb(224,114,35)"/><text x="17.0390%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.18%)</title><rect x="16.8807%" y="709" width="0.1835%" height="15" fill="rgb(245,159,27)"/><text x="17.1307%" y="719.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.18%)</title><rect x="16.8807%" y="693" width="0.1835%" height="15" fill="rgb(245,172,44)"/><text x="17.1307%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.18%)</title><rect x="16.8807%" y="677" width="0.1835%" height="15" fill="rgb(236,23,11)"/><text x="17.1307%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.18%)</title><rect x="16.8807%" y="661" width="0.1835%" height="15" fill="rgb(205,117,38)"/><text x="17.1307%" y="671.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (2 samples, 0.18%)</title><rect x="16.8807%" y="645" width="0.1835%" height="15" fill="rgb(237,72,25)"/><text x="17.1307%" y="655.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.18%)</title><rect x="16.8807%" y="629" width="0.1835%" height="15" fill="rgb(244,70,9)"/><text x="17.1307%" y="639.50"></text></g><g><title>&lt;usize as core::ops::arith::Add&gt;::add (2 samples, 0.18%)</title><rect x="16.8807%" y="613" width="0.1835%" height="15" fill="rgb(217,125,39)"/><text x="17.1307%" y="623.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.18%)</title><rect x="17.1560%" y="693" width="0.1835%" height="15" fill="rgb(235,36,10)"/><text x="17.4060%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.18%)</title><rect x="17.1560%" y="677" width="0.1835%" height="15" fill="rgb(251,123,47)"/><text x="17.4060%" y="687.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.18%)</title><rect x="17.1560%" y="661" width="0.1835%" height="15" fill="rgb(221,13,13)"/><text x="17.4060%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.18%)</title><rect x="17.1560%" y="645" width="0.1835%" height="15" fill="rgb(238,131,9)"/><text x="17.4060%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.18%)</title><rect x="17.1560%" y="629" width="0.1835%" height="15" fill="rgb(211,50,8)"/><text x="17.4060%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.18%)</title><rect x="17.1560%" y="613" width="0.1835%" height="15" fill="rgb(245,182,24)"/><text x="17.4060%" y="623.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (8 samples, 0.73%)</title><rect x="16.7890%" y="773" width="0.7339%" height="15" fill="rgb(242,14,37)"/><text x="17.0390%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::expected (8 samples, 0.73%)</title><rect x="16.7890%" y="757" width="0.7339%" height="15" fill="rgb(246,228,12)"/><text x="17.0390%" y="767.50"></text></g><g><title>alloc::fmt::format (8 samples, 0.73%)</title><rect x="16.7890%" y="741" width="0.7339%" height="15" fill="rgb(213,55,15)"/><text x="17.0390%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (5 samples, 0.46%)</title><rect x="17.0642%" y="725" width="0.4587%" height="15" fill="rgb(209,9,3)"/><text x="17.3142%" y="735.50"></text></g><g><title>core::fmt::write (5 samples, 0.46%)</title><rect x="17.0642%" y="709" width="0.4587%" height="15" fill="rgb(230,59,30)"/><text x="17.3142%" y="719.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::fmt::Display&gt;::fmt (2 samples, 0.18%)</title><rect x="17.3394%" y="693" width="0.1835%" height="15" fill="rgb(209,121,21)"/><text x="17.5894%" y="703.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.18%)</title><rect x="17.3394%" y="677" width="0.1835%" height="15" fill="rgb(220,109,13)"/><text x="17.5894%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.18%)</title><rect x="17.3394%" y="661" width="0.1835%" height="15" fill="rgb(232,18,1)"/><text x="17.5894%" y="671.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (9 samples, 0.83%)</title><rect x="16.7890%" y="805" width="0.8257%" height="15" fill="rgb(215,41,42)"/><text x="17.0390%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (9 samples, 0.83%)</title><rect x="16.7890%" y="789" width="0.8257%" height="15" fill="rgb(224,123,36)"/><text x="17.0390%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (3 samples, 0.28%)</title><rect x="17.6147%" y="773" width="0.2752%" height="15" fill="rgb(240,125,3)"/><text x="17.8647%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_one_of_keywords (2 samples, 0.18%)</title><rect x="17.7064%" y="757" width="0.1835%" height="15" fill="rgb(205,98,50)"/><text x="17.9564%" y="767.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.18%)</title><rect x="18.5321%" y="757" width="0.1835%" height="15" fill="rgb(205,185,37)"/><text x="18.7821%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_query_body (24 samples, 2.20%)</title><rect x="16.6055%" y="837" width="2.2018%" height="15" fill="rgb(238,207,15)"/><text x="16.8555%" y="847.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_select (22 samples, 2.02%)</title><rect x="16.7890%" y="821" width="2.0183%" height="15" fill="rgb(213,199,42)"/><text x="17.0390%" y="831.50">s..</text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (13 samples, 1.19%)</title><rect x="17.6147%" y="805" width="1.1927%" height="15" fill="rgb(235,201,11)"/><text x="17.8647%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (13 samples, 1.19%)</title><rect x="17.6147%" y="789" width="1.1927%" height="15" fill="rgb(207,46,11)"/><text x="17.8647%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (10 samples, 0.92%)</title><rect x="17.8899%" y="773" width="0.9174%" height="15" fill="rgb(241,35,35)"/><text x="18.1399%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_data_type (3 samples, 0.28%)</title><rect x="18.8073%" y="757" width="0.2752%" height="15" fill="rgb(243,32,47)"/><text x="19.0573%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (4 samples, 0.37%)</title><rect x="18.8073%" y="821" width="0.3670%" height="15" fill="rgb(247,202,23)"/><text x="19.0573%" y="831.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (4 samples, 0.37%)</title><rect x="18.8073%" y="805" width="0.3670%" height="15" fill="rgb(219,102,11)"/><text x="19.0573%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (4 samples, 0.37%)</title><rect x="18.8073%" y="789" width="0.3670%" height="15" fill="rgb(243,110,44)"/><text x="19.0573%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (4 samples, 0.37%)</title><rect x="18.8073%" y="773" width="0.3670%" height="15" fill="rgb(222,74,54)"/><text x="19.0573%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_select (5 samples, 0.46%)</title><rect x="18.8073%" y="837" width="0.4587%" height="15" fill="rgb(216,99,12)"/><text x="19.0573%" y="847.50"></text></g><g><title>sql_parser::parser::Parser::parse_comma_separated (3 samples, 0.28%)</title><rect x="19.4495%" y="789" width="0.2752%" height="15" fill="rgb(226,22,26)"/><text x="19.6995%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (2 samples, 0.18%)</title><rect x="19.5413%" y="773" width="0.1835%" height="15" fill="rgb(217,163,10)"/><text x="19.7913%" y="783.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.18%)</title><rect x="19.9083%" y="773" width="0.1835%" height="15" fill="rgb(213,25,53)"/><text x="20.1583%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (6 samples, 0.55%)</title><rect x="19.7248%" y="789" width="0.5505%" height="15" fill="rgb(252,105,26)"/><text x="19.9748%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (3 samples, 0.28%)</title><rect x="20.6422%" y="773" width="0.2752%" height="15" fill="rgb(220,39,43)"/><text x="20.8922%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::get_next_precedence (3 samples, 0.28%)</title><rect x="20.6422%" y="757" width="0.2752%" height="15" fill="rgb(229,68,48)"/><text x="20.8922%" y="767.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (2 samples, 0.18%)</title><rect x="21.9266%" y="757" width="0.1835%" height="15" fill="rgb(252,8,32)"/><text x="22.1766%" y="767.50"></text></g><g><title>__memcmp_avx2_movbe (7 samples, 0.64%)</title><rect x="22.1101%" y="757" width="0.6422%" height="15" fill="rgb(223,20,43)"/><text x="22.3601%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (22 samples, 2.02%)</title><rect x="20.9174%" y="773" width="2.0183%" height="15" fill="rgb(229,81,49)"/><text x="21.1674%" y="783.50">s..</text></g><g><title>core::ptr::drop_in_place (2 samples, 0.18%)</title><rect x="22.7523%" y="757" width="0.1835%" height="15" fill="rgb(236,28,36)"/><text x="23.0023%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_optional_alias (2 samples, 0.18%)</title><rect x="22.9358%" y="773" width="0.1835%" height="15" fill="rgb(249,185,26)"/><text x="23.1858%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (55 samples, 5.05%)</title><rect x="19.2661%" y="837" width="5.0459%" height="15" fill="rgb(249,174,33)"/><text x="19.5161%" y="847.50">sql_pa..</text></g><g><title>sql_parser::parser::Parser::check_descent (55 samples, 5.05%)</title><rect x="19.2661%" y="821" width="5.0459%" height="15" fill="rgb(233,201,37)"/><text x="19.5161%" y="831.50">sql_pa..</text></g><g><title>sql_parser::parser::Parser::parse_query_body (55 samples, 5.05%)</title><rect x="19.2661%" y="805" width="5.0459%" height="15" fill="rgb(221,78,26)"/><text x="19.5161%" y="815.50">sql_pa..</text></g><g><title>sql_parser::parser::Parser::parse_select (44 samples, 4.04%)</title><rect x="20.2752%" y="789" width="4.0367%" height="15" fill="rgb(250,127,30)"/><text x="20.5252%" y="799.50">sql_..</text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (13 samples, 1.19%)</title><rect x="23.1193%" y="773" width="1.1927%" height="15" fill="rgb(230,49,44)"/><text x="23.3693%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (8 samples, 0.73%)</title><rect x="23.5780%" y="757" width="0.7339%" height="15" fill="rgb(229,67,23)"/><text x="23.8280%" y="767.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.37%)</title><rect x="23.9450%" y="741" width="0.3670%" height="15" fill="rgb(249,83,47)"/><text x="24.1950%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.18%)</title><rect x="24.4954%" y="757" width="0.1835%" height="15" fill="rgb(215,43,3)"/><text x="24.7454%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.18%)</title><rect x="24.4954%" y="741" width="0.1835%" height="15" fill="rgb(238,154,13)"/><text x="24.7454%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.18%)</title><rect x="24.4954%" y="725" width="0.1835%" height="15" fill="rgb(219,56,2)"/><text x="24.7454%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.18%)</title><rect x="24.4954%" y="709" width="0.1835%" height="15" fill="rgb(233,0,4)"/><text x="24.7454%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.18%)</title><rect x="24.4954%" y="693" width="0.1835%" height="15" fill="rgb(235,30,7)"/><text x="24.7454%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.18%)</title><rect x="24.4954%" y="677" width="0.1835%" height="15" fill="rgb(250,79,13)"/><text x="24.7454%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.18%)</title><rect x="24.4954%" y="661" width="0.1835%" height="15" fill="rgb(211,146,34)"/><text x="24.7454%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.18%)</title><rect x="24.4954%" y="645" width="0.1835%" height="15" fill="rgb(228,22,38)"/><text x="24.7454%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.18%)</title><rect x="24.4954%" y="629" width="0.1835%" height="15" fill="rgb(235,168,5)"/><text x="24.7454%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.18%)</title><rect x="24.4954%" y="613" width="0.1835%" height="15" fill="rgb(221,155,16)"/><text x="24.7454%" y="623.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.18%)</title><rect x="24.4954%" y="597" width="0.1835%" height="15" fill="rgb(215,215,53)"/><text x="24.7454%" y="607.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="24.4954%" y="581" width="0.1835%" height="15" fill="rgb(223,4,10)"/><text x="24.7454%" y="591.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (2 samples, 0.18%)</title><rect x="24.6789%" y="757" width="0.1835%" height="15" fill="rgb(234,103,6)"/><text x="24.9289%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.18%)</title><rect x="24.6789%" y="741" width="0.1835%" height="15" fill="rgb(227,97,0)"/><text x="24.9289%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.18%)</title><rect x="24.6789%" y="725" width="0.1835%" height="15" fill="rgb(234,150,53)"/><text x="24.9289%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.18%)</title><rect x="24.6789%" y="709" width="0.1835%" height="15" fill="rgb(228,201,54)"/><text x="24.9289%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.18%)</title><rect x="24.6789%" y="693" width="0.1835%" height="15" fill="rgb(222,22,37)"/><text x="24.9289%" y="703.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (3 samples, 0.28%)</title><rect x="24.9541%" y="757" width="0.2752%" height="15" fill="rgb(237,53,32)"/><text x="25.2041%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::parse_table_and_joins (13 samples, 1.19%)</title><rect x="24.3119%" y="837" width="1.1927%" height="15" fill="rgb(233,25,53)"/><text x="24.5619%" y="847.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (13 samples, 1.19%)</title><rect x="24.3119%" y="821" width="1.1927%" height="15" fill="rgb(210,40,34)"/><text x="24.5619%" y="831.50"></text></g><g><title>sql_parser::parser::Parser::parse_infix (13 samples, 1.19%)</title><rect x="24.3119%" y="805" width="1.1927%" height="15" fill="rgb(241,220,44)"/><text x="24.5619%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (13 samples, 1.19%)</title><rect x="24.3119%" y="789" width="1.1927%" height="15" fill="rgb(235,28,35)"/><text x="24.5619%" y="799.50"></text></g><g><title>sql_parser::parser::Parser::parse_prefix (13 samples, 1.19%)</title><rect x="24.3119%" y="773" width="1.1927%" height="15" fill="rgb(210,56,17)"/><text x="24.5619%" y="783.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (2 samples, 0.18%)</title><rect x="25.3211%" y="757" width="0.1835%" height="15" fill="rgb(224,130,29)"/><text x="25.5711%" y="767.50"></text></g><g><title>sql_parser::parser::Parser::check_descent (16 samples, 1.47%)</title><rect x="25.5046%" y="805" width="1.4679%" height="15" fill="rgb(235,212,8)"/><text x="25.7546%" y="815.50"></text></g><g><title>sql_parser::parser::Parser::parse_keyword (13 samples, 1.19%)</title><rect x="25.7798%" y="789" width="1.1927%" height="15" fill="rgb(223,33,50)"/><text x="26.0298%" y="799.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.83%)</title><rect x="26.1468%" y="773" width="0.8257%" height="15" fill="rgb(219,149,13)"/><text x="26.3968%" y="783.50"></text></g><g><title>sql_parser::parser::parse_statements (17 samples, 1.56%)</title><rect x="25.5046%" y="837" width="1.5596%" height="15" fill="rgb(250,156,29)"/><text x="25.7546%" y="847.50"></text></g><g><title>sql_parser::parser::Parser::parse_statement (17 samples, 1.56%)</title><rect x="25.5046%" y="821" width="1.5596%" height="15" fill="rgb(216,193,19)"/><text x="25.7546%" y="831.50"></text></g><g><title>decor::answer_rows (2 samples, 0.18%)</title><rect x="27.1560%" y="693" width="0.1835%" height="15" fill="rgb(216,135,14)"/><text x="27.4060%" y="703.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="27.1560%" y="677" width="0.1835%" height="15" fill="rgb(241,47,5)"/><text x="27.4060%" y="687.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (2 samples, 0.18%)</title><rect x="27.1560%" y="661" width="0.1835%" height="15" fill="rgb(233,42,35)"/><text x="27.4060%" y="671.50"></text></g><g><title>mysql::conn::Conn::next_text (2 samples, 0.18%)</title><rect x="27.1560%" y="645" width="0.1835%" height="15" fill="rgb(231,13,6)"/><text x="27.4060%" y="655.50"></text></g><g><title>mysql::conn::Conn::read_packet (2 samples, 0.18%)</title><rect x="27.1560%" y="629" width="0.1835%" height="15" fill="rgb(207,181,40)"/><text x="27.4060%" y="639.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="27.1560%" y="613" width="0.1835%" height="15" fill="rgb(254,173,49)"/><text x="27.4060%" y="623.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (2 samples, 0.18%)</title><rect x="27.1560%" y="597" width="0.1835%" height="15" fill="rgb(221,1,38)"/><text x="27.4060%" y="607.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (2 samples, 0.18%)</title><rect x="27.1560%" y="581" width="0.1835%" height="15" fill="rgb(206,124,46)"/><text x="27.4060%" y="591.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (2 samples, 0.18%)</title><rect x="27.1560%" y="565" width="0.1835%" height="15" fill="rgb(249,21,11)"/><text x="27.4060%" y="575.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (2 samples, 0.18%)</title><rect x="27.1560%" y="549" width="0.1835%" height="15" fill="rgb(222,201,40)"/><text x="27.4060%" y="559.50"></text></g><g><title>start_thread (3 samples, 0.28%)</title><rect x="27.1560%" y="837" width="0.2752%" height="15" fill="rgb(235,61,29)"/><text x="27.4060%" y="847.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3 samples, 0.28%)</title><rect x="27.1560%" y="821" width="0.2752%" height="15" fill="rgb(219,207,3)"/><text x="27.4060%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3 samples, 0.28%)</title><rect x="27.1560%" y="805" width="0.2752%" height="15" fill="rgb(222,56,46)"/><text x="27.4060%" y="815.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3 samples, 0.28%)</title><rect x="27.1560%" y="789" width="0.2752%" height="15" fill="rgb(239,76,54)"/><text x="27.4060%" y="799.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (3 samples, 0.28%)</title><rect x="27.1560%" y="773" width="0.2752%" height="15" fill="rgb(231,124,27)"/><text x="27.4060%" y="783.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.28%)</title><rect x="27.1560%" y="757" width="0.2752%" height="15" fill="rgb(249,195,6)"/><text x="27.4060%" y="767.50"></text></g><g><title>decor::Shim::run_on_tcp (3 samples, 0.28%)</title><rect x="27.1560%" y="741" width="0.2752%" height="15" fill="rgb(237,174,47)"/><text x="27.4060%" y="751.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (3 samples, 0.28%)</title><rect x="27.1560%" y="725" width="0.2752%" height="15" fill="rgb(206,201,31)"/><text x="27.4060%" y="735.50"></text></g><g><title>&lt;decor::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (3 samples, 0.28%)</title><rect x="27.1560%" y="709" width="0.2752%" height="15" fill="rgb(231,57,52)"/><text x="27.4060%" y="719.50"></text></g><g><title>mysql::conn::Conn::read_packet (2 samples, 0.18%)</title><rect x="27.5229%" y="661" width="0.1835%" height="15" fill="rgb(248,177,22)"/><text x="27.7729%" y="671.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.28%)</title><rect x="27.5229%" y="709" width="0.2752%" height="15" fill="rgb(215,211,37)"/><text x="27.7729%" y="719.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (3 samples, 0.28%)</title><rect x="27.5229%" y="693" width="0.2752%" height="15" fill="rgb(241,128,51)"/><text x="27.7729%" y="703.50"></text></g><g><title>mysql::conn::Conn::next_text (3 samples, 0.28%)</title><rect x="27.5229%" y="677" width="0.2752%" height="15" fill="rgb(227,165,31)"/><text x="27.7729%" y="687.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.18%)</title><rect x="27.7982%" y="709" width="0.1835%" height="15" fill="rgb(228,167,24)"/><text x="28.0482%" y="719.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.18%)</title><rect x="27.7982%" y="693" width="0.1835%" height="15" fill="rgb(228,143,12)"/><text x="28.0482%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.18%)</title><rect x="27.7982%" y="677" width="0.1835%" height="15" fill="rgb(249,149,8)"/><text x="28.0482%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.18%)</title><rect x="27.7982%" y="661" width="0.1835%" height="15" fill="rgb(243,35,44)"/><text x="28.0482%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.18%)</title><rect x="27.7982%" y="645" width="0.1835%" height="15" fill="rgb(246,89,9)"/><text x="28.0482%" y="655.50"></text></g><g><title>__GI___openat (2 samples, 0.18%)</title><rect x="27.7982%" y="629" width="0.1835%" height="15" fill="rgb(233,213,13)"/><text x="28.0482%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.18%)</title><rect x="27.7982%" y="613" width="0.1835%" height="15" fill="rgb(233,141,41)"/><text x="28.0482%" y="623.50"></text></g><g><title>do_syscall_64 (2 samples, 0.18%)</title><rect x="27.7982%" y="597" width="0.1835%" height="15" fill="rgb(239,167,4)"/><text x="28.0482%" y="607.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.18%)</title><rect x="27.7982%" y="581" width="0.1835%" height="15" fill="rgb(209,217,16)"/><text x="28.0482%" y="591.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.18%)</title><rect x="27.7982%" y="565" width="0.1835%" height="15" fill="rgb(219,88,35)"/><text x="28.0482%" y="575.50"></text></g><g><title>do_filp_open (2 samples, 0.18%)</title><rect x="27.7982%" y="549" width="0.1835%" height="15" fill="rgb(220,193,23)"/><text x="28.0482%" y="559.50"></text></g><g><title>path_openat (2 samples, 0.18%)</title><rect x="27.7982%" y="533" width="0.1835%" height="15" fill="rgb(230,90,52)"/><text x="28.0482%" y="543.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.18%)</title><rect x="28.3486%" y="373" width="0.1835%" height="15" fill="rgb(252,106,19)"/><text x="28.5986%" y="383.50"></text></g><g><title>dequeue_entity (2 samples, 0.18%)</title><rect x="28.3486%" y="357" width="0.1835%" height="15" fill="rgb(206,74,20)"/><text x="28.5986%" y="367.50"></text></g><g><title>finish_task_switch (3 samples, 0.28%)</title><rect x="28.5321%" y="373" width="0.2752%" height="15" fill="rgb(230,138,44)"/><text x="28.7821%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (2 samples, 0.18%)</title><rect x="28.6239%" y="357" width="0.1835%" height="15" fill="rgb(235,182,43)"/><text x="28.8739%" y="367.50"></text></g><g><title>__schedule (9 samples, 0.83%)</title><rect x="28.2569%" y="389" width="0.8257%" height="15" fill="rgb(242,16,51)"/><text x="28.5069%" y="399.50"></text></g><g><title>sk_wait_data (10 samples, 0.92%)</title><rect x="28.2569%" y="453" width="0.9174%" height="15" fill="rgb(248,9,4)"/><text x="28.5069%" y="463.50"></text></g><g><title>wait_woken (10 samples, 0.92%)</title><rect x="28.2569%" y="437" width="0.9174%" height="15" fill="rgb(210,31,22)"/><text x="28.5069%" y="447.50"></text></g><g><title>schedule_timeout (10 samples, 0.92%)</title><rect x="28.2569%" y="421" width="0.9174%" height="15" fill="rgb(239,54,39)"/><text x="28.5069%" y="431.50"></text></g><g><title>schedule (10 samples, 0.92%)</title><rect x="28.2569%" y="405" width="0.9174%" height="15" fill="rgb(230,99,41)"/><text x="28.5069%" y="415.50"></text></g><g><title>inet_recvmsg (12 samples, 1.10%)</title><rect x="28.1651%" y="485" width="1.1009%" height="15" fill="rgb(253,106,12)"/><text x="28.4151%" y="495.50"></text></g><g><title>tcp_recvmsg (12 samples, 1.10%)</title><rect x="28.1651%" y="469" width="1.1009%" height="15" fill="rgb(213,46,41)"/><text x="28.4151%" y="479.50"></text></g><g><title>do_syscall_64 (13 samples, 1.19%)</title><rect x="28.1651%" y="533" width="1.1927%" height="15" fill="rgb(215,133,35)"/><text x="28.4151%" y="543.50"></text></g><g><title>__x64_sys_recvfrom (13 samples, 1.19%)</title><rect x="28.1651%" y="517" width="1.1927%" height="15" fill="rgb(213,28,5)"/><text x="28.4151%" y="527.50"></text></g><g><title>__sys_recvfrom (13 samples, 1.19%)</title><rect x="28.1651%" y="501" width="1.1927%" height="15" fill="rgb(215,77,49)"/><text x="28.4151%" y="511.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 1.56%)</title><rect x="28.0734%" y="661" width="1.5596%" height="15" fill="rgb(248,100,22)"/><text x="28.3234%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (17 samples, 1.56%)</title><rect x="28.0734%" y="645" width="1.5596%" height="15" fill="rgb(208,67,9)"/><text x="28.3234%" y="655.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (17 samples, 1.56%)</title><rect x="28.0734%" y="629" width="1.5596%" height="15" fill="rgb(219,133,21)"/><text x="28.3234%" y="639.50"></text></g><g><title>std::sys_common::net::TcpStream::read (17 samples, 1.56%)</title><rect x="28.0734%" y="613" width="1.5596%" height="15" fill="rgb(246,46,29)"/><text x="28.3234%" y="623.50"></text></g><g><title>std::sys::unix::net::Socket::read (17 samples, 1.56%)</title><rect x="28.0734%" y="597" width="1.5596%" height="15" fill="rgb(246,185,52)"/><text x="28.3234%" y="607.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (17 samples, 1.56%)</title><rect x="28.0734%" y="581" width="1.5596%" height="15" fill="rgb(252,136,11)"/><text x="28.3234%" y="591.50"></text></g><g><title>__libc_recv (17 samples, 1.56%)</title><rect x="28.0734%" y="565" width="1.5596%" height="15" fill="rgb(219,138,53)"/><text x="28.3234%" y="575.50"></text></g><g><title>entry_SYSCALL_64 (16 samples, 1.47%)</title><rect x="28.1651%" y="549" width="1.4679%" height="15" fill="rgb(211,51,23)"/><text x="28.4151%" y="559.50"></text></g><g><title>prepare_exit_to_usermode (3 samples, 0.28%)</title><rect x="29.3578%" y="533" width="0.2752%" height="15" fill="rgb(247,221,28)"/><text x="29.6078%" y="543.50"></text></g><g><title>std::rt::lang_start_internal (24 samples, 2.20%)</title><rect x="27.5229%" y="837" width="2.2018%" height="15" fill="rgb(251,222,45)"/><text x="27.7729%" y="847.50">s..</text></g><g><title>std::panic::catch_unwind (24 samples, 2.20%)</title><rect x="27.5229%" y="821" width="2.2018%" height="15" fill="rgb(217,162,53)"/><text x="27.7729%" y="831.50">s..</text></g><g><title>std::panicking::try (24 samples, 2.20%)</title><rect x="27.5229%" y="805" width="2.2018%" height="15" fill="rgb(229,93,14)"/><text x="27.7729%" y="815.50">s..</text></g><g><title>std::panicking::try::do_call (24 samples, 2.20%)</title><rect x="27.5229%" y="789" width="2.2018%" height="15" fill="rgb(209,67,49)"/><text x="27.7729%" y="799.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (24 samples, 2.20%)</title><rect x="27.5229%" y="773" width="2.2018%" height="15" fill="rgb(213,87,29)"/><text x="27.7729%" y="783.50">c..</text></g><g><title>std::rt::lang_start::_{{closure}} (24 samples, 2.20%)</title><rect x="27.5229%" y="757" width="2.2018%" height="15" fill="rgb(205,151,52)"/><text x="27.7729%" y="767.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 2.20%)</title><rect x="27.5229%" y="741" width="2.2018%" height="15" fill="rgb(253,215,39)"/><text x="27.7729%" y="751.50">s..</text></g><g><title>lobsters::main (24 samples, 2.20%)</title><rect x="27.5229%" y="725" width="2.2018%" height="15" fill="rgb(221,220,41)"/><text x="27.7729%" y="735.50">l..</text></g><g><title>mysql::conn::Conn::_query (19 samples, 1.74%)</title><rect x="27.9817%" y="709" width="1.7431%" height="15" fill="rgb(218,133,21)"/><text x="28.2317%" y="719.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (19 samples, 1.74%)</title><rect x="27.9817%" y="693" width="1.7431%" height="15" fill="rgb(221,193,43)"/><text x="28.2317%" y="703.50"></text></g><g><title>mysql::conn::Conn::read_packet (19 samples, 1.74%)</title><rect x="27.9817%" y="677" width="1.7431%" height="15" fill="rgb(240,128,52)"/><text x="28.2317%" y="687.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.18%)</title><rect x="29.7248%" y="837" width="0.1835%" height="15" fill="rgb(253,114,12)"/><text x="29.9748%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2 samples, 0.18%)</title><rect x="29.7248%" y="821" width="0.1835%" height="15" fill="rgb(215,223,47)"/><text x="29.9748%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (2 samples, 0.18%)</title><rect x="29.7248%" y="805" width="0.1835%" height="15" fill="rgb(248,225,23)"/><text x="29.9748%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (2 samples, 0.18%)</title><rect x="29.7248%" y="789" width="0.1835%" height="15" fill="rgb(250,108,0)"/><text x="29.9748%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.18%)</title><rect x="29.7248%" y="773" width="0.1835%" height="15" fill="rgb(228,208,7)"/><text x="29.9748%" y="783.50"></text></g><g><title>decor::Shim::run_on_tcp (2 samples, 0.18%)</title><rect x="29.7248%" y="757" width="0.1835%" height="15" fill="rgb(244,45,10)"/><text x="29.9748%" y="767.50"></text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (2 samples, 0.18%)</title><rect x="29.7248%" y="741" width="0.1835%" height="15" fill="rgb(207,125,25)"/><text x="29.9748%" y="751.50"></text></g><g><title>&lt;decor::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (2 samples, 0.18%)</title><rect x="29.7248%" y="725" width="0.1835%" height="15" fill="rgb(210,195,18)"/><text x="29.9748%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 1.28%)</title><rect x="29.9083%" y="741" width="1.2844%" height="15" fill="rgb(249,80,12)"/><text x="30.1583%" y="751.50"></text></g><g><title>__GI___libc_realloc (14 samples, 1.28%)</title><rect x="29.9083%" y="725" width="1.2844%" height="15" fill="rgb(221,65,9)"/><text x="30.1583%" y="735.50"></text></g><g><title>_int_realloc (14 samples, 1.28%)</title><rect x="29.9083%" y="709" width="1.2844%" height="15" fill="rgb(235,49,36)"/><text x="30.1583%" y="719.50"></text></g><g><title>_int_malloc (13 samples, 1.19%)</title><rect x="30.0000%" y="693" width="1.1927%" height="15" fill="rgb(225,32,20)"/><text x="30.2500%" y="703.50"></text></g><g><title>malloc_consolidate (8 samples, 0.73%)</title><rect x="30.4587%" y="677" width="0.7339%" height="15" fill="rgb(215,141,46)"/><text x="30.7087%" y="687.50"></text></g><g><title>__memcmp_avx2_movbe (25 samples, 2.29%)</title><rect x="34.2202%" y="709" width="2.2936%" height="15" fill="rgb(250,160,47)"/><text x="34.4702%" y="719.50">_..</text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="37.1560%" y="693" width="0.1835%" height="15" fill="rgb(216,222,40)"/><text x="37.4060%" y="703.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (2 samples, 0.18%)</title><rect x="37.1560%" y="677" width="0.1835%" height="15" fill="rgb(234,217,39)"/><text x="37.4060%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (9 samples, 0.83%)</title><rect x="37.3394%" y="677" width="0.8257%" height="15" fill="rgb(207,178,40)"/><text x="37.5894%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (4 samples, 0.37%)</title><rect x="37.7982%" y="661" width="0.3670%" height="15" fill="rgb(221,136,13)"/><text x="38.0482%" y="671.50"></text></g><g><title>alloc::string::String::push (10 samples, 0.92%)</title><rect x="37.3394%" y="693" width="0.9174%" height="15" fill="rgb(249,199,10)"/><text x="37.5894%" y="703.50"></text></g><g><title>alloc::string::String::with_capacity (3 samples, 0.28%)</title><rect x="38.2569%" y="693" width="0.2752%" height="15" fill="rgb(249,222,13)"/><text x="38.5069%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.28%)</title><rect x="38.2569%" y="677" width="0.2752%" height="15" fill="rgb(244,185,38)"/><text x="38.5069%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.28%)</title><rect x="38.2569%" y="661" width="0.2752%" height="15" fill="rgb(236,202,9)"/><text x="38.5069%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.28%)</title><rect x="38.2569%" y="645" width="0.2752%" height="15" fill="rgb(250,229,37)"/><text x="38.5069%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.28%)</title><rect x="38.2569%" y="629" width="0.2752%" height="15" fill="rgb(206,174,23)"/><text x="38.5069%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.28%)</title><rect x="38.2569%" y="613" width="0.2752%" height="15" fill="rgb(211,33,43)"/><text x="38.5069%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.28%)</title><rect x="38.2569%" y="597" width="0.2752%" height="15" fill="rgb(245,58,50)"/><text x="38.5069%" y="607.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.28%)</title><rect x="38.2569%" y="581" width="0.2752%" height="15" fill="rgb(244,68,36)"/><text x="38.5069%" y="591.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.28%)</title><rect x="38.2569%" y="565" width="0.2752%" height="15" fill="rgb(232,229,15)"/><text x="38.5069%" y="575.50"></text></g><g><title>sql_parser::tokenizer::Token::make_word (91 samples, 8.35%)</title><rect x="31.1927%" y="725" width="8.3486%" height="15" fill="rgb(254,30,23)"/><text x="31.4427%" y="735.50">sql_parser::..</text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (31 samples, 2.84%)</title><rect x="36.6972%" y="709" width="2.8440%" height="15" fill="rgb(235,160,14)"/><text x="36.9472%" y="719.50">al..</text></g><g><title>core::unicode::unicode_data::conversions::to_upper (11 samples, 1.01%)</title><rect x="38.5321%" y="693" width="1.0092%" height="15" fill="rgb(212,155,44)"/><text x="38.7821%" y="703.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (11 samples, 1.01%)</title><rect x="38.5321%" y="677" width="1.0092%" height="15" fill="rgb(226,2,50)"/><text x="38.7821%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (11 samples, 1.01%)</title><rect x="38.5321%" y="661" width="1.0092%" height="15" fill="rgb(234,177,6)"/><text x="38.7821%" y="671.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (6 samples, 0.55%)</title><rect x="38.9908%" y="645" width="0.5505%" height="15" fill="rgb(217,24,9)"/><text x="39.2408%" y="655.50"></text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_string (2 samples, 0.18%)</title><rect x="39.5413%" y="725" width="0.1835%" height="15" fill="rgb(220,13,46)"/><text x="39.7913%" y="735.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.28%)</title><rect x="40.1835%" y="693" width="0.2752%" height="15" fill="rgb(239,221,27)"/><text x="40.4335%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 0.64%)</title><rect x="40.0000%" y="709" width="0.6422%" height="15" fill="rgb(222,198,25)"/><text x="40.2500%" y="719.50"></text></g><g><title>[unknown] (380 samples, 34.86%)</title><rect x="5.8716%" y="853" width="34.8624%" height="15" fill="rgb(211,99,13)"/><text x="6.1216%" y="863.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (118 samples, 10.83%)</title><rect x="29.9083%" y="837" width="10.8257%" height="15" fill="rgb(232,111,31)"/><text x="30.1583%" y="847.50">std::sys_common:..</text></g><g><title>decor::Shim::run_on_tcp (118 samples, 10.83%)</title><rect x="29.9083%" y="821" width="10.8257%" height="15" fill="rgb(245,82,37)"/><text x="30.1583%" y="831.50">decor::Shim::run..</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (118 samples, 10.83%)</title><rect x="29.9083%" y="805" width="10.8257%" height="15" fill="rgb(227,149,46)"/><text x="30.1583%" y="815.50">msql_srv::MysqlI..</text></g><g><title>&lt;decor::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (118 samples, 10.83%)</title><rect x="29.9083%" y="789" width="10.8257%" height="15" fill="rgb(218,36,50)"/><text x="30.1583%" y="799.50">&lt;decor::Shim as ..</text></g><g><title>sql_parser::parser::parse_statements (118 samples, 10.83%)</title><rect x="29.9083%" y="773" width="10.8257%" height="15" fill="rgb(226,80,48)"/><text x="30.1583%" y="783.50">sql_parser::pars..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize (118 samples, 10.83%)</title><rect x="29.9083%" y="757" width="10.8257%" height="15" fill="rgb(238,224,15)"/><text x="30.1583%" y="767.50">sql_parser::toke..</text></g><g><title>sql_parser::tokenizer::Tokenizer::next_token (104 samples, 9.54%)</title><rect x="31.1927%" y="741" width="9.5413%" height="15" fill="rgb(241,136,10)"/><text x="31.4427%" y="751.50">sql_parser::to..</text></g><g><title>sql_parser::tokenizer::Tokenizer::tokenize_word (11 samples, 1.01%)</title><rect x="39.7248%" y="725" width="1.0092%" height="15" fill="rgb(208,32,45)"/><text x="39.9748%" y="735.50"></text></g><g><title>&lt;mysql::conn::query_result::SetIteratorState as core::convert::From&lt;mysql::conn::query_result::Or&lt;alloc::vec::Vec&lt;mysql_common::packets::Column&gt;,mysql_common::packets::OkPacket&gt;&gt;&gt;::from (2 samples, 0.18%)</title><rect x="41.4679%" y="677" width="0.1835%" height="15" fill="rgb(207,135,9)"/><text x="41.7179%" y="687.50"></text></g><g><title>__kfree_skb (2 samples, 0.18%)</title><rect x="42.5688%" y="421" width="0.1835%" height="15" fill="rgb(206,86,44)"/><text x="42.8188%" y="431.50"></text></g><g><title>skb_release_head_state (2 samples, 0.18%)</title><rect x="42.5688%" y="405" width="0.1835%" height="15" fill="rgb(245,177,15)"/><text x="42.8188%" y="415.50"></text></g><g><title>dst_release (2 samples, 0.18%)</title><rect x="42.5688%" y="389" width="0.1835%" height="15" fill="rgb(206,64,50)"/><text x="42.8188%" y="399.50"></text></g><g><title>update_curr (3 samples, 0.28%)</title><rect x="43.4862%" y="309" width="0.2752%" height="15" fill="rgb(234,36,40)"/><text x="43.7362%" y="319.50"></text></g><g><title>dequeue_task_fair (8 samples, 0.73%)</title><rect x="43.2110%" y="341" width="0.7339%" height="15" fill="rgb(213,64,8)"/><text x="43.4610%" y="351.50"></text></g><g><title>dequeue_entity (7 samples, 0.64%)</title><rect x="43.3028%" y="325" width="0.6422%" height="15" fill="rgb(210,75,36)"/><text x="43.5528%" y="335.50"></text></g><g><title>update_load_avg (2 samples, 0.18%)</title><rect x="43.7615%" y="309" width="0.1835%" height="15" fill="rgb(229,88,21)"/><text x="44.0115%" y="319.50"></text></g><g><title>finish_task_switch (2 samples, 0.18%)</title><rect x="43.9450%" y="341" width="0.1835%" height="15" fill="rgb(252,204,47)"/><text x="44.1950%" y="351.50"></text></g><g><title>__perf_event_task_sched_in (2 samples, 0.18%)</title><rect x="43.9450%" y="325" width="0.1835%" height="15" fill="rgb(208,77,27)"/><text x="44.1950%" y="335.50"></text></g><g><title>psi_task_change (3 samples, 0.28%)</title><rect x="44.2202%" y="341" width="0.2752%" height="15" fill="rgb(221,76,26)"/><text x="44.4702%" y="351.50"></text></g><g><title>psi_group_change (2 samples, 0.18%)</title><rect x="44.3119%" y="325" width="0.1835%" height="15" fill="rgb(225,139,18)"/><text x="44.5619%" y="335.50"></text></g><g><title>__schedule (17 samples, 1.56%)</title><rect x="43.1193%" y="357" width="1.5596%" height="15" fill="rgb(230,137,11)"/><text x="43.3693%" y="367.50"></text></g><g><title>sk_wait_data (22 samples, 2.02%)</title><rect x="42.7523%" y="421" width="2.0183%" height="15" fill="rgb(212,28,1)"/><text x="43.0023%" y="431.50">s..</text></g><g><title>wait_woken (20 samples, 1.83%)</title><rect x="42.9358%" y="405" width="1.8349%" height="15" fill="rgb(248,164,17)"/><text x="43.1858%" y="415.50">w..</text></g><g><title>schedule_timeout (19 samples, 1.74%)</title><rect x="43.0275%" y="389" width="1.7431%" height="15" fill="rgb(222,171,42)"/><text x="43.2775%" y="399.50"></text></g><g><title>schedule (18 samples, 1.65%)</title><rect x="43.1193%" y="373" width="1.6514%" height="15" fill="rgb(243,84,45)"/><text x="43.3693%" y="383.50"></text></g><g><title>skb_copy_datagram_iter (4 samples, 0.37%)</title><rect x="44.7706%" y="421" width="0.3670%" height="15" fill="rgb(252,49,23)"/><text x="45.0206%" y="431.50"></text></g><g><title>__skb_datagram_iter (4 samples, 0.37%)</title><rect x="44.7706%" y="405" width="0.3670%" height="15" fill="rgb(215,19,7)"/><text x="45.0206%" y="415.50"></text></g><g><title>_copy_to_iter (4 samples, 0.37%)</title><rect x="44.7706%" y="389" width="0.3670%" height="15" fill="rgb(238,81,41)"/><text x="45.0206%" y="399.50"></text></g><g><title>copy_user_enhanced_fast_string (4 samples, 0.37%)</title><rect x="44.7706%" y="373" width="0.3670%" height="15" fill="rgb(210,199,37)"/><text x="45.0206%" y="383.50"></text></g><g><title>page_fault (3 samples, 0.28%)</title><rect x="44.8624%" y="357" width="0.2752%" height="15" fill="rgb(244,192,49)"/><text x="45.1124%" y="367.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.18%)</title><rect x="44.9541%" y="341" width="0.1835%" height="15" fill="rgb(226,211,11)"/><text x="45.2041%" y="351.50"></text></g><g><title>handle_mm_fault (2 samples, 0.18%)</title><rect x="44.9541%" y="325" width="0.1835%" height="15" fill="rgb(236,162,54)"/><text x="45.2041%" y="335.50"></text></g><g><title>__handle_mm_fault (2 samples, 0.18%)</title><rect x="44.9541%" y="309" width="0.1835%" height="15" fill="rgb(220,229,9)"/><text x="45.2041%" y="319.50"></text></g><g><title>inet_recvmsg (33 samples, 3.03%)</title><rect x="42.2018%" y="453" width="3.0275%" height="15" fill="rgb(250,87,22)"/><text x="42.4518%" y="463.50">ine..</text></g><g><title>tcp_recvmsg (32 samples, 2.94%)</title><rect x="42.2936%" y="437" width="2.9358%" height="15" fill="rgb(239,43,17)"/><text x="42.5436%" y="447.50">tc..</text></g><g><title>__x64_sys_recvfrom (34 samples, 3.12%)</title><rect x="42.2018%" y="485" width="3.1193%" height="15" fill="rgb(231,177,25)"/><text x="42.4518%" y="495.50">__x..</text></g><g><title>__sys_recvfrom (34 samples, 3.12%)</title><rect x="42.2018%" y="469" width="3.1193%" height="15" fill="rgb(219,179,1)"/><text x="42.4518%" y="479.50">__s..</text></g><g><title>do_syscall_64 (35 samples, 3.21%)</title><rect x="42.2018%" y="501" width="3.2110%" height="15" fill="rgb(238,219,53)"/><text x="42.4518%" y="511.50">do_..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (42 samples, 3.85%)</title><rect x="41.9266%" y="613" width="3.8532%" height="15" fill="rgb(232,167,36)"/><text x="42.1766%" y="623.50">&lt;std..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (42 samples, 3.85%)</title><rect x="41.9266%" y="597" width="3.8532%" height="15" fill="rgb(244,19,51)"/><text x="42.1766%" y="607.50">&lt;std..</text></g><g><title>std::sys_common::net::TcpStream::read (42 samples, 3.85%)</title><rect x="41.9266%" y="581" width="3.8532%" height="15" fill="rgb(224,6,22)"/><text x="42.1766%" y="591.50">std:..</text></g><g><title>std::sys::unix::net::Socket::read (42 samples, 3.85%)</title><rect x="41.9266%" y="565" width="3.8532%" height="15" fill="rgb(224,145,5)"/><text x="42.1766%" y="575.50">std:..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (42 samples, 3.85%)</title><rect x="41.9266%" y="549" width="3.8532%" height="15" fill="rgb(234,130,49)"/><text x="42.1766%" y="559.50">std:..</text></g><g><title>__libc_recv (42 samples, 3.85%)</title><rect x="41.9266%" y="533" width="3.8532%" height="15" fill="rgb(254,6,2)"/><text x="42.1766%" y="543.50">__li..</text></g><g><title>entry_SYSCALL_64 (40 samples, 3.67%)</title><rect x="42.1101%" y="517" width="3.6697%" height="15" fill="rgb(208,96,46)"/><text x="42.3601%" y="527.50">entr..</text></g><g><title>prepare_exit_to_usermode (4 samples, 0.37%)</title><rect x="45.4128%" y="501" width="0.3670%" height="15" fill="rgb(239,3,39)"/><text x="45.6628%" y="511.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (45 samples, 4.13%)</title><rect x="41.7431%" y="661" width="4.1284%" height="15" fill="rgb(233,210,1)"/><text x="41.9931%" y="671.50">mysq..</text></g><g><title>mysql::conn::Conn::read_packet (44 samples, 4.04%)</title><rect x="41.8349%" y="645" width="4.0367%" height="15" fill="rgb(244,137,37)"/><text x="42.0849%" y="655.50">mysq..</text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 4.04%)</title><rect x="41.8349%" y="629" width="4.0367%" height="15" fill="rgb(240,136,2)"/><text x="42.0849%" y="639.50">&lt;mys..</text></g><g><title>dev_hard_start_xmit (3 samples, 0.28%)</title><rect x="47.5229%" y="357" width="0.2752%" height="15" fill="rgb(239,18,37)"/><text x="47.7729%" y="367.50"></text></g><g><title>loopback_xmit (2 samples, 0.18%)</title><rect x="47.6147%" y="341" width="0.1835%" height="15" fill="rgb(218,185,22)"/><text x="47.8647%" y="351.50"></text></g><g><title>netif_rx (2 samples, 0.18%)</title><rect x="47.6147%" y="325" width="0.1835%" height="15" fill="rgb(225,218,4)"/><text x="47.8647%" y="335.50"></text></g><g><title>netif_rx_internal (2 samples, 0.18%)</title><rect x="47.6147%" y="309" width="0.1835%" height="15" fill="rgb(230,182,32)"/><text x="47.8647%" y="319.50"></text></g><g><title>__dev_queue_xmit (7 samples, 0.64%)</title><rect x="47.4312%" y="373" width="0.6422%" height="15" fill="rgb(242,56,43)"/><text x="47.6812%" y="383.50"></text></g><g><title>validate_xmit_skb (2 samples, 0.18%)</title><rect x="47.8899%" y="357" width="0.1835%" height="15" fill="rgb(233,99,24)"/><text x="48.1399%" y="367.50"></text></g><g><title>enqueue_task_fair (5 samples, 0.46%)</title><rect x="48.8991%" y="69" width="0.4587%" height="15" fill="rgb(234,209,42)"/><text x="49.1491%" y="79.50"></text></g><g><title>enqueue_entity (5 samples, 0.46%)</title><rect x="48.8991%" y="53" width="0.4587%" height="15" fill="rgb(227,7,12)"/><text x="49.1491%" y="63.50"></text></g><g><title>update_load_avg (3 samples, 0.28%)</title><rect x="49.0826%" y="37" width="0.2752%" height="15" fill="rgb(245,203,43)"/><text x="49.3326%" y="47.50"></text></g><g><title>select_task_rq_fair (2 samples, 0.18%)</title><rect x="49.3578%" y="69" width="0.1835%" height="15" fill="rgb(238,205,33)"/><text x="49.6078%" y="79.50"></text></g><g><title>sock_def_readable (9 samples, 0.83%)</title><rect x="48.8073%" y="149" width="0.8257%" height="15" fill="rgb(231,56,7)"/><text x="49.0573%" y="159.50"></text></g><g><title>__wake_up_common_lock (9 samples, 0.83%)</title><rect x="48.8073%" y="133" width="0.8257%" height="15" fill="rgb(244,186,29)"/><text x="49.0573%" y="143.50"></text></g><g><title>__wake_up_common (9 samples, 0.83%)</title><rect x="48.8073%" y="117" width="0.8257%" height="15" fill="rgb(234,111,31)"/><text x="49.0573%" y="127.50"></text></g><g><title>pollwake (9 samples, 0.83%)</title><rect x="48.8073%" y="101" width="0.8257%" height="15" fill="rgb(241,149,10)"/><text x="49.0573%" y="111.50"></text></g><g><title>try_to_wake_up (9 samples, 0.83%)</title><rect x="48.8073%" y="85" width="0.8257%" height="15" fill="rgb(249,206,44)"/><text x="49.0573%" y="95.50"></text></g><g><title>__slab_free (2 samples, 0.18%)</title><rect x="49.9083%" y="101" width="0.1835%" height="15" fill="rgb(251,153,30)"/><text x="50.1583%" y="111.50"></text></g><g><title>kfree (3 samples, 0.28%)</title><rect x="49.9083%" y="117" width="0.2752%" height="15" fill="rgb(239,152,38)"/><text x="50.1583%" y="127.50"></text></g><g><title>__kfree_skb (4 samples, 0.37%)</title><rect x="49.9083%" y="133" width="0.3670%" height="15" fill="rgb(249,139,47)"/><text x="50.1583%" y="143.50"></text></g><g><title>bictcp_cong_avoid (2 samples, 0.18%)</title><rect x="50.2752%" y="133" width="0.1835%" height="15" fill="rgb(244,64,35)"/><text x="50.5252%" y="143.50"></text></g><g><title>tcp_ack_update_rtt (2 samples, 0.18%)</title><rect x="50.6422%" y="133" width="0.1835%" height="15" fill="rgb(216,46,15)"/><text x="50.8922%" y="143.50"></text></g><g><title>tcp_ack (15 samples, 1.38%)</title><rect x="49.6330%" y="149" width="1.3761%" height="15" fill="rgb(250,74,19)"/><text x="49.8830%" y="159.50"></text></g><g><title>tcp_rate_gen (2 samples, 0.18%)</title><rect x="50.8257%" y="133" width="0.1835%" height="15" fill="rgb(249,42,33)"/><text x="51.0757%" y="143.50"></text></g><g><title>do_softirq (35 samples, 3.21%)</title><rect x="48.0734%" y="357" width="3.2110%" height="15" fill="rgb(242,149,17)"/><text x="48.3234%" y="367.50">do_..</text></g><g><title>do_softirq_own_stack (35 samples, 3.21%)</title><rect x="48.0734%" y="341" width="3.2110%" height="15" fill="rgb(244,29,21)"/><text x="48.3234%" y="351.50">do_..</text></g><g><title>__do_softirq (35 samples, 3.21%)</title><rect x="48.0734%" y="325" width="3.2110%" height="15" fill="rgb(220,130,37)"/><text x="48.3234%" y="335.50">__d..</text></g><g><title>net_rx_action (35 samples, 3.21%)</title><rect x="48.0734%" y="309" width="3.2110%" height="15" fill="rgb(211,67,2)"/><text x="48.3234%" y="319.50">net..</text></g><g><title>process_backlog (34 samples, 3.12%)</title><rect x="48.1651%" y="293" width="3.1193%" height="15" fill="rgb(235,68,52)"/><text x="48.4151%" y="303.50">pro..</text></g><g><title>__netif_receive_skb_one_core (31 samples, 2.84%)</title><rect x="48.4404%" y="277" width="2.8440%" height="15" fill="rgb(246,142,3)"/><text x="48.6904%" y="287.50">__..</text></g><g><title>ip_rcv (30 samples, 2.75%)</title><rect x="48.5321%" y="261" width="2.7523%" height="15" fill="rgb(241,25,7)"/><text x="48.7821%" y="271.50">ip..</text></g><g><title>ip_local_deliver (30 samples, 2.75%)</title><rect x="48.5321%" y="245" width="2.7523%" height="15" fill="rgb(242,119,39)"/><text x="48.7821%" y="255.50">ip..</text></g><g><title>ip_local_deliver_finish (30 samples, 2.75%)</title><rect x="48.5321%" y="229" width="2.7523%" height="15" fill="rgb(241,98,45)"/><text x="48.7821%" y="239.50">ip..</text></g><g><title>ip_protocol_deliver_rcu (30 samples, 2.75%)</title><rect x="48.5321%" y="213" width="2.7523%" height="15" fill="rgb(254,28,30)"/><text x="48.7821%" y="223.50">ip..</text></g><g><title>tcp_v4_rcv (30 samples, 2.75%)</title><rect x="48.5321%" y="197" width="2.7523%" height="15" fill="rgb(241,142,54)"/><text x="48.7821%" y="207.50">tc..</text></g><g><title>tcp_v4_do_rcv (29 samples, 2.66%)</title><rect x="48.6239%" y="181" width="2.6606%" height="15" fill="rgb(222,85,15)"/><text x="48.8739%" y="191.50">tc..</text></g><g><title>tcp_rcv_established (29 samples, 2.66%)</title><rect x="48.6239%" y="165" width="2.6606%" height="15" fill="rgb(210,85,47)"/><text x="48.8739%" y="175.50">tc..</text></g><g><title>tcp_send_delayed_ack (2 samples, 0.18%)</title><rect x="51.1009%" y="149" width="0.1835%" height="15" fill="rgb(224,206,25)"/><text x="51.3509%" y="159.50"></text></g><g><title>ip_finish_output2 (44 samples, 4.04%)</title><rect x="47.3394%" y="389" width="4.0367%" height="15" fill="rgb(243,201,19)"/><text x="47.5894%" y="399.50">ip_f..</text></g><g><title>__local_bh_enable_ip (36 samples, 3.30%)</title><rect x="48.0734%" y="373" width="3.3028%" height="15" fill="rgb(236,59,4)"/><text x="48.3234%" y="383.50">__l..</text></g><g><title>__ip_queue_xmit (46 samples, 4.22%)</title><rect x="47.2477%" y="421" width="4.2202%" height="15" fill="rgb(254,179,45)"/><text x="47.4977%" y="431.50">__ip_..</text></g><g><title>ip_output (45 samples, 4.13%)</title><rect x="47.3394%" y="405" width="4.1284%" height="15" fill="rgb(226,14,10)"/><text x="47.5894%" y="415.50">ip_o..</text></g><g><title>__tcp_transmit_skb (49 samples, 4.50%)</title><rect x="47.0642%" y="437" width="4.4954%" height="15" fill="rgb(244,27,41)"/><text x="47.3142%" y="447.50">__tcp..</text></g><g><title>__tcp_push_pending_frames (51 samples, 4.68%)</title><rect x="46.9725%" y="469" width="4.6789%" height="15" fill="rgb(235,35,32)"/><text x="47.2225%" y="479.50">__tcp..</text></g><g><title>tcp_write_xmit (51 samples, 4.68%)</title><rect x="46.9725%" y="453" width="4.6789%" height="15" fill="rgb(218,68,31)"/><text x="47.2225%" y="463.50">tcp_w..</text></g><g><title>sk_stream_alloc_skb (2 samples, 0.18%)</title><rect x="51.7431%" y="469" width="0.1835%" height="15" fill="rgb(207,120,37)"/><text x="51.9931%" y="479.50"></text></g><g><title>__alloc_skb (2 samples, 0.18%)</title><rect x="51.7431%" y="453" width="0.1835%" height="15" fill="rgb(227,98,0)"/><text x="51.9931%" y="463.50"></text></g><g><title>skb_do_copy_data_nocache (2 samples, 0.18%)</title><rect x="51.9266%" y="469" width="0.1835%" height="15" fill="rgb(207,7,3)"/><text x="52.1766%" y="479.50"></text></g><g><title>ipv4_mtu (2 samples, 0.18%)</title><rect x="52.2018%" y="437" width="0.1835%" height="15" fill="rgb(206,98,19)"/><text x="52.4518%" y="447.50"></text></g><g><title>sock_sendmsg (67 samples, 6.15%)</title><rect x="46.3303%" y="517" width="6.1468%" height="15" fill="rgb(217,5,26)"/><text x="46.5803%" y="527.50">sock_sen..</text></g><g><title>tcp_sendmsg (66 samples, 6.06%)</title><rect x="46.4220%" y="501" width="6.0550%" height="15" fill="rgb(235,190,38)"/><text x="46.6720%" y="511.50">tcp_send..</text></g><g><title>tcp_sendmsg_locked (65 samples, 5.96%)</title><rect x="46.5138%" y="485" width="5.9633%" height="15" fill="rgb(247,86,24)"/><text x="46.7638%" y="495.50">tcp_send..</text></g><g><title>tcp_send_mss (4 samples, 0.37%)</title><rect x="52.1101%" y="469" width="0.3670%" height="15" fill="rgb(205,101,16)"/><text x="52.3601%" y="479.50"></text></g><g><title>tcp_current_mss (3 samples, 0.28%)</title><rect x="52.2018%" y="453" width="0.2752%" height="15" fill="rgb(246,168,33)"/><text x="52.4518%" y="463.50"></text></g><g><title>__x64_sys_sendto (73 samples, 6.70%)</title><rect x="46.0550%" y="549" width="6.6972%" height="15" fill="rgb(231,114,1)"/><text x="46.3050%" y="559.50">__x64_sys..</text></g><g><title>__sys_sendto (73 samples, 6.70%)</title><rect x="46.0550%" y="533" width="6.6972%" height="15" fill="rgb(207,184,53)"/><text x="46.3050%" y="543.50">__sys_sen..</text></g><g><title>sockfd_lookup_light (3 samples, 0.28%)</title><rect x="52.4771%" y="517" width="0.2752%" height="15" fill="rgb(224,95,51)"/><text x="52.7271%" y="527.50"></text></g><g><title>__fget_light (3 samples, 0.28%)</title><rect x="52.4771%" y="501" width="0.2752%" height="15" fill="rgb(212,188,45)"/><text x="52.7271%" y="511.50"></text></g><g><title>do_syscall_64 (74 samples, 6.79%)</title><rect x="46.0550%" y="565" width="6.7890%" height="15" fill="rgb(223,154,38)"/><text x="46.3050%" y="575.50">do_syscal..</text></g><g><title>entry_SYSCALL_64 (76 samples, 6.97%)</title><rect x="46.0550%" y="581" width="6.9725%" height="15" fill="rgb(251,22,52)"/><text x="46.3050%" y="591.50">entry_SYS..</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.18%)</title><rect x="52.8440%" y="565" width="0.1835%" height="15" fill="rgb(229,209,22)"/><text x="53.0940%" y="575.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (129 samples, 11.83%)</title><rect x="41.3761%" y="693" width="11.8349%" height="15" fill="rgb(234,138,34)"/><text x="41.6261%" y="703.50">&lt;mysql::conn::Conn..</text></g><g><title>mysql::conn::Conn::_query (126 samples, 11.56%)</title><rect x="41.6514%" y="677" width="11.5596%" height="15" fill="rgb(212,95,11)"/><text x="41.9014%" y="687.50">mysql::conn::Conn..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (80 samples, 7.34%)</title><rect x="45.8716%" y="661" width="7.3394%" height="15" fill="rgb(240,179,47)"/><text x="46.1216%" y="671.50">mysql_comm..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (79 samples, 7.25%)</title><rect x="45.9633%" y="645" width="7.2477%" height="15" fill="rgb(240,163,11)"/><text x="46.2133%" y="655.50">std::io::b..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (79 samples, 7.25%)</title><rect x="45.9633%" y="629" width="7.2477%" height="15" fill="rgb(236,37,12)"/><text x="46.2133%" y="639.50">&lt;std::net:..</text></g><g><title>std::sys_common::net::TcpStream::write (79 samples, 7.25%)</title><rect x="45.9633%" y="613" width="7.2477%" height="15" fill="rgb(232,164,16)"/><text x="46.2133%" y="623.50">std::sys_c..</text></g><g><title>__libc_send (79 samples, 7.25%)</title><rect x="45.9633%" y="597" width="7.2477%" height="15" fill="rgb(244,205,15)"/><text x="46.2133%" y="607.50">__libc_send</text></g><g><title>syscall_return_via_sysret (2 samples, 0.18%)</title><rect x="53.0275%" y="581" width="0.1835%" height="15" fill="rgb(223,117,47)"/><text x="53.2775%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.18%)</title><rect x="53.5780%" y="661" width="0.1835%" height="15" fill="rgb(244,107,35)"/><text x="53.8280%" y="671.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Values as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.18%)</title><rect x="53.5780%" y="645" width="0.1835%" height="15" fill="rgb(205,140,8)"/><text x="53.8280%" y="655.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (3 samples, 0.28%)</title><rect x="53.9450%" y="549" width="0.2752%" height="15" fill="rgb(228,84,46)"/><text x="54.1950%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.18%)</title><rect x="54.0367%" y="533" width="0.1835%" height="15" fill="rgb(254,188,9)"/><text x="54.2867%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (2 samples, 0.18%)</title><rect x="54.0367%" y="517" width="0.1835%" height="15" fill="rgb(206,112,54)"/><text x="54.2867%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (2 samples, 0.18%)</title><rect x="54.0367%" y="501" width="0.1835%" height="15" fill="rgb(216,84,49)"/><text x="54.2867%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.55%)</title><rect x="53.7615%" y="581" width="0.5505%" height="15" fill="rgb(214,194,35)"/><text x="54.0115%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (5 samples, 0.46%)</title><rect x="53.8532%" y="565" width="0.4587%" height="15" fill="rgb(249,28,3)"/><text x="54.1032%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (7 samples, 0.64%)</title><rect x="53.7615%" y="597" width="0.6422%" height="15" fill="rgb(222,56,52)"/><text x="54.0115%" y="607.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (3 samples, 0.28%)</title><rect x="54.4954%" y="565" width="0.2752%" height="15" fill="rgb(245,217,50)"/><text x="54.7454%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.18%)</title><rect x="54.5872%" y="549" width="0.1835%" height="15" fill="rgb(213,201,24)"/><text x="54.8372%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (2 samples, 0.18%)</title><rect x="54.5872%" y="533" width="0.1835%" height="15" fill="rgb(248,116,28)"/><text x="54.8372%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (2 samples, 0.18%)</title><rect x="54.5872%" y="517" width="0.1835%" height="15" fill="rgb(219,72,43)"/><text x="54.8372%" y="527.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.46%)</title><rect x="54.4037%" y="597" width="0.4587%" height="15" fill="rgb(209,138,14)"/><text x="54.6537%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (5 samples, 0.46%)</title><rect x="54.4037%" y="581" width="0.4587%" height="15" fill="rgb(222,18,33)"/><text x="54.6537%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (15 samples, 1.38%)</title><rect x="53.7615%" y="613" width="1.3761%" height="15" fill="rgb(213,199,7)"/><text x="54.0115%" y="623.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (3 samples, 0.28%)</title><rect x="54.8624%" y="597" width="0.2752%" height="15" fill="rgb(250,110,10)"/><text x="55.1124%" y="607.50"></text></g><g><title>core::fmt::write (2 samples, 0.18%)</title><rect x="54.9541%" y="581" width="0.1835%" height="15" fill="rgb(248,123,6)"/><text x="55.2041%" y="591.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (2 samples, 0.18%)</title><rect x="55.1376%" y="581" width="0.1835%" height="15" fill="rgb(206,91,31)"/><text x="55.3876%" y="591.50"></text></g><g><title>alloc::string::String::push (2 samples, 0.18%)</title><rect x="55.4128%" y="533" width="0.1835%" height="15" fill="rgb(211,154,13)"/><text x="55.6628%" y="543.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (4 samples, 0.37%)</title><rect x="55.3211%" y="581" width="0.3670%" height="15" fill="rgb(225,148,7)"/><text x="55.5711%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (4 samples, 0.37%)</title><rect x="55.3211%" y="565" width="0.3670%" height="15" fill="rgb(220,160,43)"/><text x="55.5711%" y="575.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (4 samples, 0.37%)</title><rect x="55.3211%" y="549" width="0.3670%" height="15" fill="rgb(213,52,39)"/><text x="55.5711%" y="559.50"></text></g><g><title>&lt;sql_parser::ast::defs::expr::Expr as sql_parser::ast::display::AstDisplay&gt;::fmt (8 samples, 0.73%)</title><rect x="55.1376%" y="597" width="0.7339%" height="15" fill="rgb(243,137,7)"/><text x="55.3876%" y="607.50"></text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (2 samples, 0.18%)</title><rect x="55.6881%" y="581" width="0.1835%" height="15" fill="rgb(230,79,13)"/><text x="55.9381%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (4 samples, 0.37%)</title><rect x="55.8716%" y="549" width="0.3670%" height="15" fill="rgb(247,105,23)"/><text x="56.1216%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (2 samples, 0.18%)</title><rect x="56.0550%" y="533" width="0.1835%" height="15" fill="rgb(223,179,41)"/><text x="56.3050%" y="543.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (2 samples, 0.18%)</title><rect x="56.0550%" y="517" width="0.1835%" height="15" fill="rgb(218,9,34)"/><text x="56.3050%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (2 samples, 0.18%)</title><rect x="56.0550%" y="501" width="0.1835%" height="15" fill="rgb(222,106,8)"/><text x="56.3050%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.46%)</title><rect x="55.8716%" y="581" width="0.4587%" height="15" fill="rgb(211,220,0)"/><text x="56.1216%" y="591.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (5 samples, 0.46%)</title><rect x="55.8716%" y="565" width="0.4587%" height="15" fill="rgb(229,52,16)"/><text x="56.1216%" y="575.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::TableFactor as sql_parser::ast::display::AstDisplay&gt;::fmt (6 samples, 0.55%)</title><rect x="55.8716%" y="597" width="0.5505%" height="15" fill="rgb(212,155,18)"/><text x="56.1216%" y="607.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::Join as sql_parser::ast::display::AstDisplay&gt;::fmt (15 samples, 1.38%)</title><rect x="55.1376%" y="613" width="1.3761%" height="15" fill="rgb(242,21,14)"/><text x="55.3876%" y="623.50"></text></g><g><title>&lt;sql_parser::ast::defs::name::Ident as sql_parser::ast::display::AstDisplay&gt;::fmt (3 samples, 0.28%)</title><rect x="56.6055%" y="597" width="0.2752%" height="15" fill="rgb(222,19,48)"/><text x="56.8555%" y="607.50"></text></g><g><title>sql_parser::ast::defs::name::Ident::can_be_printed_bare (3 samples, 0.28%)</title><rect x="56.6055%" y="581" width="0.2752%" height="15" fill="rgb(232,45,27)"/><text x="56.8555%" y="591.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (3 samples, 0.28%)</title><rect x="56.6055%" y="565" width="0.2752%" height="15" fill="rgb(249,103,42)"/><text x="56.8555%" y="575.50"></text></g><g><title>core::unicode::unicode_data::conversions::to_upper (3 samples, 0.28%)</title><rect x="56.6055%" y="549" width="0.2752%" height="15" fill="rgb(246,81,33)"/><text x="56.8555%" y="559.50"></text></g><g><title>core::unicode::unicode_data::conversions::bsearch_case_table (2 samples, 0.18%)</title><rect x="56.6972%" y="533" width="0.1835%" height="15" fill="rgb(252,33,42)"/><text x="56.9472%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (2 samples, 0.18%)</title><rect x="56.6972%" y="517" width="0.1835%" height="15" fill="rgb(209,212,41)"/><text x="56.9472%" y="527.50"></text></g><g><title>&lt;core::cmp::Ordering as core::cmp::PartialEq&gt;::eq (2 samples, 0.18%)</title><rect x="56.6972%" y="501" width="0.1835%" height="15" fill="rgb(207,154,6)"/><text x="56.9472%" y="511.50"></text></g><g><title>&lt;sql_parser::ast::defs::query::TableFactor as sql_parser::ast::display::AstDisplay&gt;::fmt (5 samples, 0.46%)</title><rect x="56.5138%" y="613" width="0.4587%" height="15" fill="rgb(223,64,47)"/><text x="56.7638%" y="623.50"></text></g><g><title>core::fmt::write (42 samples, 3.85%)</title><rect x="53.3945%" y="693" width="3.8532%" height="15" fill="rgb(211,161,38)"/><text x="53.6445%" y="703.50">core..</text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as core::fmt::Display&gt;::fmt (41 samples, 3.76%)</title><rect x="53.4862%" y="677" width="3.7615%" height="15" fill="rgb(219,138,40)"/><text x="53.7362%" y="687.50">&lt;sql..</text></g><g><title>&lt;sql_parser::ast::defs::statement::Statement as sql_parser::ast::display::AstDisplay&gt;::fmt (38 samples, 3.49%)</title><rect x="53.7615%" y="661" width="3.4862%" height="15" fill="rgb(241,228,46)"/><text x="54.0115%" y="671.50">&lt;sq..</text></g><g><title>&lt;sql_parser::ast::defs::query::Query as sql_parser::ast::display::AstDisplay&gt;::fmt (38 samples, 3.49%)</title><rect x="53.7615%" y="645" width="3.4862%" height="15" fill="rgb(223,209,38)"/><text x="54.0115%" y="655.50">&lt;sq..</text></g><g><title>&lt;sql_parser::ast::defs::query::Select as sql_parser::ast::display::AstDisplay&gt;::fmt (38 samples, 3.49%)</title><rect x="53.7615%" y="629" width="3.4862%" height="15" fill="rgb(236,164,45)"/><text x="54.0115%" y="639.50">&lt;sq..</text></g><g><title>sql_parser::ast::display::AstFormatter::write_str (3 samples, 0.28%)</title><rect x="56.9725%" y="613" width="0.2752%" height="15" fill="rgb(231,15,5)"/><text x="57.2225%" y="623.50"></text></g><g><title>_int_free (2 samples, 0.18%)</title><rect x="57.2477%" y="629" width="0.1835%" height="15" fill="rgb(252,35,15)"/><text x="57.4977%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.46%)</title><rect x="57.2477%" y="645" width="0.4587%" height="15" fill="rgb(248,181,18)"/><text x="57.4977%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.28%)</title><rect x="57.4312%" y="629" width="0.2752%" height="15" fill="rgb(233,39,42)"/><text x="57.6812%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.28%)</title><rect x="57.4312%" y="613" width="0.2752%" height="15" fill="rgb(238,110,33)"/><text x="57.6812%" y="623.50"></text></g><g><title>_int_free (2 samples, 0.18%)</title><rect x="57.5229%" y="597" width="0.1835%" height="15" fill="rgb(233,195,10)"/><text x="57.7729%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.92%)</title><rect x="57.2477%" y="693" width="0.9174%" height="15" fill="rgb(254,105,3)"/><text x="57.4977%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.92%)</title><rect x="57.2477%" y="677" width="0.9174%" height="15" fill="rgb(221,225,9)"/><text x="57.4977%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (10 samples, 0.92%)</title><rect x="57.2477%" y="661" width="0.9174%" height="15" fill="rgb(224,227,45)"/><text x="57.4977%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (5 samples, 0.46%)</title><rect x="57.7064%" y="645" width="0.4587%" height="15" fill="rgb(229,198,43)"/><text x="57.9564%" y="655.50"></text></g><g><title>_int_free (3 samples, 0.28%)</title><rect x="57.8899%" y="629" width="0.2752%" height="15" fill="rgb(206,209,35)"/><text x="58.1399%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.18%)</title><rect x="58.8073%" y="677" width="0.1835%" height="15" fill="rgb(245,195,53)"/><text x="59.0573%" y="687.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.18%)</title><rect x="59.6330%" y="597" width="0.1835%" height="15" fill="rgb(240,92,26)"/><text x="59.8830%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.28%)</title><rect x="59.6330%" y="613" width="0.2752%" height="15" fill="rgb(207,40,23)"/><text x="59.8830%" y="623.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="59.9083%" y="613" width="0.1835%" height="15" fill="rgb(223,111,35)"/><text x="60.1583%" y="623.50"></text></g><g><title>mysql::conn::Conn::read_packet (10 samples, 0.92%)</title><rect x="59.4495%" y="629" width="0.9174%" height="15" fill="rgb(229,147,28)"/><text x="59.6995%" y="639.50"></text></g><g><title>&lt;mysql::conn::query_result::Text as mysql::conn::query_result::Protocol&gt;::next (16 samples, 1.47%)</title><rect x="59.1743%" y="661" width="1.4679%" height="15" fill="rgb(211,29,28)"/><text x="59.4243%" y="671.50"></text></g><g><title>mysql::conn::Conn::next_text (16 samples, 1.47%)</title><rect x="59.1743%" y="645" width="1.4679%" height="15" fill="rgb(228,72,33)"/><text x="59.4243%" y="655.50"></text></g><g><title>mysql_common::value::read_text_values (3 samples, 0.28%)</title><rect x="60.3670%" y="629" width="0.2752%" height="15" fill="rgb(205,214,31)"/><text x="60.6170%" y="639.50"></text></g><g><title>mysql_common::value::read_text_value (2 samples, 0.18%)</title><rect x="60.4587%" y="613" width="0.1835%" height="15" fill="rgb(224,111,15)"/><text x="60.7087%" y="623.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 1.74%)</title><rect x="58.9908%" y="677" width="1.7431%" height="15" fill="rgb(253,21,26)"/><text x="59.2408%" y="687.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::end_row (3 samples, 0.28%)</title><rect x="61.0092%" y="677" width="0.2752%" height="15" fill="rgb(245,139,43)"/><text x="61.2592%" y="687.50"></text></g><g><title>msql_srv::packet::PacketWriter&lt;W&gt;::maybe_end_packet (3 samples, 0.28%)</title><rect x="61.0092%" y="661" width="0.2752%" height="15" fill="rgb(252,170,7)"/><text x="61.2592%" y="671.50"></text></g><g><title>&lt;mysql_common::value::Value as msql_srv::value::encode::ToMysqlValue&gt;::to_mysql_text (3 samples, 0.28%)</title><rect x="61.3761%" y="661" width="0.2752%" height="15" fill="rgb(231,118,14)"/><text x="61.6261%" y="671.50"></text></g><g><title>mysql_common::io::WriteMysqlExt::write_lenenc_int (3 samples, 0.28%)</title><rect x="61.3761%" y="645" width="0.2752%" height="15" fill="rgb(238,83,0)"/><text x="61.6261%" y="655.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.28%)</title><rect x="61.3761%" y="629" width="0.2752%" height="15" fill="rgb(221,39,39)"/><text x="61.6261%" y="639.50"></text></g><g><title>decor::answer_rows (39 samples, 3.58%)</title><rect x="58.1651%" y="693" width="3.5780%" height="15" fill="rgb(222,119,46)"/><text x="58.4151%" y="703.50">deco..</text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (4 samples, 0.37%)</title><rect x="61.3761%" y="677" width="0.3670%" height="15" fill="rgb(222,165,49)"/><text x="61.6261%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.18%)</title><rect x="61.7431%" y="597" width="0.1835%" height="15" fill="rgb(219,113,52)"/><text x="61.9931%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.18%)</title><rect x="61.7431%" y="581" width="0.1835%" height="15" fill="rgb(214,7,15)"/><text x="61.9931%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.18%)</title><rect x="61.7431%" y="565" width="0.1835%" height="15" fill="rgb(235,32,4)"/><text x="61.9931%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.18%)</title><rect x="61.7431%" y="549" width="0.1835%" height="15" fill="rgb(238,90,54)"/><text x="61.9931%" y="559.50"></text></g><g><title>&lt;sql_parser::tokenizer::Token as core::clone::Clone&gt;::clone (3 samples, 0.28%)</title><rect x="61.7431%" y="677" width="0.2752%" height="15" fill="rgb(213,208,19)"/><text x="61.9931%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.28%)</title><rect x="61.7431%" y="661" width="0.2752%" height="15" fill="rgb(233,156,4)"/><text x="61.9931%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.28%)</title><rect x="61.7431%" y="645" width="0.2752%" height="15" fill="rgb(207,194,5)"/><text x="61.9931%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.28%)</title><rect x="61.7431%" y="629" width="0.2752%" height="15" fill="rgb(206,111,30)"/><text x="61.9931%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.28%)</title><rect x="61.7431%" y="613" width="0.2752%" height="15" fill="rgb(243,70,54)"/><text x="61.9931%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.18%)</title><rect x="62.1101%" y="677" width="0.1835%" height="15" fill="rgb(242,28,8)"/><text x="62.3601%" y="687.50"></text></g><g><title>&lt;decor::Shim as msql_srv::MysqlShim&lt;W&gt;&gt;::on_query (234 samples, 21.47%)</title><rect x="41.1927%" y="709" width="21.4679%" height="15" fill="rgb(219,106,18)"/><text x="41.4427%" y="719.50">&lt;decor::Shim as msql_srv::MysqlShi..</text></g><g><title>sql_parser::parser::parse_statements (10 samples, 0.92%)</title><rect x="61.7431%" y="693" width="0.9174%" height="15" fill="rgb(244,222,10)"/><text x="61.9931%" y="703.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.18%)</title><rect x="62.4771%" y="677" width="0.1835%" height="15" fill="rgb(236,179,52)"/><text x="62.7271%" y="687.50"></text></g><g><title>skb_release_data (2 samples, 0.18%)</title><rect x="63.5780%" y="485" width="0.1835%" height="15" fill="rgb(213,23,39)"/><text x="63.8280%" y="495.50"></text></g><g><title>__kfree_skb (3 samples, 0.28%)</title><rect x="63.5780%" y="501" width="0.2752%" height="15" fill="rgb(238,48,10)"/><text x="63.8280%" y="511.50"></text></g><g><title>release_sock (2 samples, 0.18%)</title><rect x="63.9450%" y="501" width="0.1835%" height="15" fill="rgb(251,196,23)"/><text x="64.1950%" y="511.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.18%)</title><rect x="63.9450%" y="485" width="0.1835%" height="15" fill="rgb(250,152,24)"/><text x="64.1950%" y="495.50"></text></g><g><title>__perf_event_task_sched_out (2 samples, 0.18%)</title><rect x="64.6789%" y="421" width="0.1835%" height="15" fill="rgb(209,150,17)"/><text x="64.9289%" y="431.50"></text></g><g><title>ctx_sched_out (2 samples, 0.18%)</title><rect x="64.6789%" y="405" width="0.1835%" height="15" fill="rgb(234,202,34)"/><text x="64.9289%" y="415.50"></text></g><g><title>__cgroup_account_cputime (3 samples, 0.28%)</title><rect x="64.8624%" y="373" width="0.2752%" height="15" fill="rgb(253,148,53)"/><text x="65.1124%" y="383.50"></text></g><g><title>update_curr (4 samples, 0.37%)</title><rect x="64.8624%" y="389" width="0.3670%" height="15" fill="rgb(218,129,16)"/><text x="65.1124%" y="399.50"></text></g><g><title>dequeue_task_fair (6 samples, 0.55%)</title><rect x="64.8624%" y="421" width="0.5505%" height="15" fill="rgb(216,85,19)"/><text x="65.1124%" y="431.50"></text></g><g><title>dequeue_entity (6 samples, 0.55%)</title><rect x="64.8624%" y="405" width="0.5505%" height="15" fill="rgb(235,228,7)"/><text x="65.1124%" y="415.50"></text></g><g><title>update_load_avg (2 samples, 0.18%)</title><rect x="65.2294%" y="389" width="0.1835%" height="15" fill="rgb(245,175,0)"/><text x="65.4794%" y="399.50"></text></g><g><title>__update_load_avg_cfs_rq (2 samples, 0.18%)</title><rect x="65.2294%" y="373" width="0.1835%" height="15" fill="rgb(208,168,36)"/><text x="65.4794%" y="383.50"></text></g><g><title>psi_task_change (3 samples, 0.28%)</title><rect x="65.5046%" y="421" width="0.2752%" height="15" fill="rgb(246,171,24)"/><text x="65.7546%" y="431.50"></text></g><g><title>psi_group_change (2 samples, 0.18%)</title><rect x="65.5963%" y="405" width="0.1835%" height="15" fill="rgb(215,142,24)"/><text x="65.8463%" y="415.50"></text></g><g><title>sk_wait_data (20 samples, 1.83%)</title><rect x="64.1284%" y="501" width="1.8349%" height="15" fill="rgb(250,187,7)"/><text x="64.3784%" y="511.50">s..</text></g><g><title>wait_woken (17 samples, 1.56%)</title><rect x="64.4037%" y="485" width="1.5596%" height="15" fill="rgb(228,66,33)"/><text x="64.6537%" y="495.50"></text></g><g><title>schedule_timeout (17 samples, 1.56%)</title><rect x="64.4037%" y="469" width="1.5596%" height="15" fill="rgb(234,215,21)"/><text x="64.6537%" y="479.50"></text></g><g><title>schedule (15 samples, 1.38%)</title><rect x="64.5872%" y="453" width="1.3761%" height="15" fill="rgb(222,191,20)"/><text x="64.8372%" y="463.50"></text></g><g><title>__schedule (14 samples, 1.28%)</title><rect x="64.6789%" y="437" width="1.2844%" height="15" fill="rgb(245,79,54)"/><text x="64.9289%" y="447.50"></text></g><g><title>do_syscall_64 (32 samples, 2.94%)</title><rect x="63.1193%" y="581" width="2.9358%" height="15" fill="rgb(240,10,37)"/><text x="63.3693%" y="591.50">do..</text></g><g><title>__x64_sys_recvfrom (32 samples, 2.94%)</title><rect x="63.1193%" y="565" width="2.9358%" height="15" fill="rgb(214,192,32)"/><text x="63.3693%" y="575.50">__..</text></g><g><title>__sys_recvfrom (32 samples, 2.94%)</title><rect x="63.1193%" y="549" width="2.9358%" height="15" fill="rgb(209,36,54)"/><text x="63.3693%" y="559.50">__..</text></g><g><title>inet_recvmsg (30 samples, 2.75%)</title><rect x="63.3028%" y="533" width="2.7523%" height="15" fill="rgb(220,10,11)"/><text x="63.5528%" y="543.50">in..</text></g><g><title>tcp_recvmsg (30 samples, 2.75%)</title><rect x="63.3028%" y="517" width="2.7523%" height="15" fill="rgb(221,106,17)"/><text x="63.5528%" y="527.50">tc..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (37 samples, 3.39%)</title><rect x="62.9358%" y="677" width="3.3945%" height="15" fill="rgb(251,142,44)"/><text x="63.1858%" y="687.50">&lt;st..</text></g><g><title>std::sys_common::net::TcpStream::read (37 samples, 3.39%)</title><rect x="62.9358%" y="661" width="3.3945%" height="15" fill="rgb(238,13,15)"/><text x="63.1858%" y="671.50">std..</text></g><g><title>std::sys::unix::net::Socket::read (37 samples, 3.39%)</title><rect x="62.9358%" y="645" width="3.3945%" height="15" fill="rgb(208,107,27)"/><text x="63.1858%" y="655.50">std..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (37 samples, 3.39%)</title><rect x="62.9358%" y="629" width="3.3945%" height="15" fill="rgb(205,136,37)"/><text x="63.1858%" y="639.50">std..</text></g><g><title>__libc_recv (37 samples, 3.39%)</title><rect x="62.9358%" y="613" width="3.3945%" height="15" fill="rgb(250,205,27)"/><text x="63.1858%" y="623.50">__l..</text></g><g><title>entry_SYSCALL_64 (36 samples, 3.30%)</title><rect x="63.0275%" y="597" width="3.3028%" height="15" fill="rgb(210,80,43)"/><text x="63.2775%" y="607.50">ent..</text></g><g><title>prepare_exit_to_usermode (3 samples, 0.28%)</title><rect x="66.0550%" y="581" width="0.2752%" height="15" fill="rgb(247,160,36)"/><text x="66.3050%" y="591.50"></text></g><g><title>switch_fpu_return (2 samples, 0.18%)</title><rect x="66.1468%" y="565" width="0.1835%" height="15" fill="rgb(234,13,49)"/><text x="66.3968%" y="575.50"></text></g><g><title>msql_srv::packet::PacketReader&lt;R&gt;::next (39 samples, 3.58%)</title><rect x="62.8440%" y="709" width="3.5780%" height="15" fill="rgb(234,122,0)"/><text x="63.0940%" y="719.50">msql..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (38 samples, 3.49%)</title><rect x="62.9358%" y="693" width="3.4862%" height="15" fill="rgb(207,146,38)"/><text x="63.1858%" y="703.50">&lt;st..</text></g><g><title>preempt_count_add (2 samples, 0.18%)</title><rect x="68.1651%" y="421" width="0.1835%" height="15" fill="rgb(207,177,25)"/><text x="68.4151%" y="431.50"></text></g><g><title>__dev_queue_xmit (7 samples, 0.64%)</title><rect x="67.8899%" y="437" width="0.6422%" height="15" fill="rgb(211,178,42)"/><text x="68.1399%" y="447.50"></text></g><g><title>default_wake_function (2 samples, 0.18%)</title><rect x="69.7248%" y="165" width="0.1835%" height="15" fill="rgb(230,69,54)"/><text x="69.9748%" y="175.50"></text></g><g><title>psi_task_change (2 samples, 0.18%)</title><rect x="70.0917%" y="133" width="0.1835%" height="15" fill="rgb(214,135,41)"/><text x="70.3417%" y="143.50"></text></g><g><title>psi_group_change (2 samples, 0.18%)</title><rect x="70.0917%" y="117" width="0.1835%" height="15" fill="rgb(237,67,25)"/><text x="70.3417%" y="127.50"></text></g><g><title>enqueue_task (3 samples, 0.28%)</title><rect x="70.0917%" y="149" width="0.2752%" height="15" fill="rgb(222,189,50)"/><text x="70.3417%" y="159.50"></text></g><g><title>enqueue_task_fair (3 samples, 0.28%)</title><rect x="70.3670%" y="149" width="0.2752%" height="15" fill="rgb(245,148,34)"/><text x="70.6170%" y="159.50"></text></g><g><title>enqueue_entity (3 samples, 0.28%)</title><rect x="70.3670%" y="133" width="0.2752%" height="15" fill="rgb(222,29,6)"/><text x="70.6170%" y="143.50"></text></g><g><title>sock_def_readable (12 samples, 1.10%)</title><rect x="69.7248%" y="213" width="1.1009%" height="15" fill="rgb(221,189,43)"/><text x="69.9748%" y="223.50"></text></g><g><title>__wake_up_common_lock (12 samples, 1.10%)</title><rect x="69.7248%" y="197" width="1.1009%" height="15" fill="rgb(207,36,27)"/><text x="69.9748%" y="207.50"></text></g><g><title>__wake_up_common (12 samples, 1.10%)</title><rect x="69.7248%" y="181" width="1.1009%" height="15" fill="rgb(217,90,24)"/><text x="69.9748%" y="191.50"></text></g><g><title>try_to_wake_up (10 samples, 0.92%)</title><rect x="69.9083%" y="165" width="0.9174%" height="15" fill="rgb(224,66,35)"/><text x="70.1583%" y="175.50"></text></g><g><title>ttwu_do_wakeup (2 samples, 0.18%)</title><rect x="70.6422%" y="149" width="0.1835%" height="15" fill="rgb(221,13,50)"/><text x="70.8922%" y="159.50"></text></g><g><title>check_preempt_curr (2 samples, 0.18%)</title><rect x="70.6422%" y="133" width="0.1835%" height="15" fill="rgb(236,68,49)"/><text x="70.8922%" y="143.50"></text></g><g><title>kmem_cache_free (2 samples, 0.18%)</title><rect x="71.1009%" y="197" width="0.1835%" height="15" fill="rgb(229,146,28)"/><text x="71.3509%" y="207.50"></text></g><g><title>tcp_ack (6 samples, 0.55%)</title><rect x="70.8257%" y="213" width="0.5505%" height="15" fill="rgb(225,31,38)"/><text x="71.0757%" y="223.50"></text></g><g><title>ip_local_deliver (28 samples, 2.57%)</title><rect x="68.9908%" y="309" width="2.5688%" height="15" fill="rgb(250,208,3)"/><text x="69.2408%" y="319.50">ip..</text></g><g><title>ip_local_deliver_finish (28 samples, 2.57%)</title><rect x="68.9908%" y="293" width="2.5688%" height="15" fill="rgb(246,54,23)"/><text x="69.2408%" y="303.50">ip..</text></g><g><title>ip_protocol_deliver_rcu (27 samples, 2.48%)</title><rect x="69.0826%" y="277" width="2.4771%" height="15" fill="rgb(243,76,11)"/><text x="69.3326%" y="287.50">ip..</text></g><g><title>tcp_v4_rcv (25 samples, 2.29%)</title><rect x="69.2661%" y="261" width="2.2936%" height="15" fill="rgb(245,21,50)"/><text x="69.5161%" y="271.50">t..</text></g><g><title>tcp_v4_do_rcv (21 samples, 1.93%)</title><rect x="69.6330%" y="245" width="1.9266%" height="15" fill="rgb(228,9,43)"/><text x="69.8830%" y="255.50">t..</text></g><g><title>tcp_rcv_established (21 samples, 1.93%)</title><rect x="69.6330%" y="229" width="1.9266%" height="15" fill="rgb(208,100,47)"/><text x="69.8830%" y="239.50">t..</text></g><g><title>__netif_receive_skb_one_core (33 samples, 3.03%)</title><rect x="68.7156%" y="341" width="3.0275%" height="15" fill="rgb(232,26,8)"/><text x="68.9656%" y="351.50">__n..</text></g><g><title>ip_rcv (31 samples, 2.84%)</title><rect x="68.8991%" y="325" width="2.8440%" height="15" fill="rgb(216,166,38)"/><text x="69.1491%" y="335.50">ip..</text></g><g><title>__ip_queue_xmit (50 samples, 4.59%)</title><rect x="67.2477%" y="485" width="4.5872%" height="15" fill="rgb(251,202,51)"/><text x="67.4977%" y="495.50">__ip_..</text></g><g><title>ip_output (46 samples, 4.22%)</title><rect x="67.6147%" y="469" width="4.2202%" height="15" fill="rgb(254,216,34)"/><text x="67.8647%" y="479.50">ip_ou..</text></g><g><title>ip_finish_output2 (44 samples, 4.04%)</title><rect x="67.7982%" y="453" width="4.0367%" height="15" fill="rgb(251,32,27)"/><text x="68.0482%" y="463.50">ip_f..</text></g><g><title>__local_bh_enable_ip (36 samples, 3.30%)</title><rect x="68.5321%" y="437" width="3.3028%" height="15" fill="rgb(208,127,28)"/><text x="68.7821%" y="447.50">__l..</text></g><g><title>do_softirq (36 samples, 3.30%)</title><rect x="68.5321%" y="421" width="3.3028%" height="15" fill="rgb(224,137,22)"/><text x="68.7821%" y="431.50">do_..</text></g><g><title>do_softirq_own_stack (36 samples, 3.30%)</title><rect x="68.5321%" y="405" width="3.3028%" height="15" fill="rgb(254,70,32)"/><text x="68.7821%" y="415.50">do_..</text></g><g><title>__do_softirq (36 samples, 3.30%)</title><rect x="68.5321%" y="389" width="3.3028%" height="15" fill="rgb(229,75,37)"/><text x="68.7821%" y="399.50">__d..</text></g><g><title>net_rx_action (35 samples, 3.21%)</title><rect x="68.6239%" y="373" width="3.2110%" height="15" fill="rgb(252,64,23)"/><text x="68.8739%" y="383.50">net..</text></g><g><title>process_backlog (34 samples, 3.12%)</title><rect x="68.7156%" y="357" width="3.1193%" height="15" fill="rgb(232,162,48)"/><text x="68.9656%" y="367.50">pro..</text></g><g><title>__tcp_transmit_skb (52 samples, 4.77%)</title><rect x="67.1560%" y="501" width="4.7706%" height="15" fill="rgb(246,160,12)"/><text x="67.4060%" y="511.50">__tcp_..</text></g><g><title>__tcp_push_pending_frames (54 samples, 4.95%)</title><rect x="67.0642%" y="533" width="4.9541%" height="15" fill="rgb(247,166,0)"/><text x="67.3142%" y="543.50">__tcp_..</text></g><g><title>tcp_write_xmit (54 samples, 4.95%)</title><rect x="67.0642%" y="517" width="4.9541%" height="15" fill="rgb(249,219,21)"/><text x="67.3142%" y="527.50">tcp_wr..</text></g><g><title>sk_stream_alloc_skb (3 samples, 0.28%)</title><rect x="72.0183%" y="533" width="0.2752%" height="15" fill="rgb(205,209,3)"/><text x="72.2683%" y="543.50"></text></g><g><title>__alloc_skb (3 samples, 0.28%)</title><rect x="72.0183%" y="517" width="0.2752%" height="15" fill="rgb(243,44,1)"/><text x="72.2683%" y="527.50"></text></g><g><title>__ksize (2 samples, 0.18%)</title><rect x="72.1101%" y="501" width="0.1835%" height="15" fill="rgb(206,159,16)"/><text x="72.3601%" y="511.50"></text></g><g><title>do_syscall_64 (64 samples, 5.87%)</title><rect x="66.6055%" y="629" width="5.8716%" height="15" fill="rgb(244,77,30)"/><text x="66.8555%" y="639.50">do_sysc..</text></g><g><title>__x64_sys_sendto (64 samples, 5.87%)</title><rect x="66.6055%" y="613" width="5.8716%" height="15" fill="rgb(218,69,12)"/><text x="66.8555%" y="623.50">__x64_s..</text></g><g><title>__sys_sendto (64 samples, 5.87%)</title><rect x="66.6055%" y="597" width="5.8716%" height="15" fill="rgb(212,87,7)"/><text x="66.8555%" y="607.50">__sys_s..</text></g><g><title>sock_sendmsg (64 samples, 5.87%)</title><rect x="66.6055%" y="581" width="5.8716%" height="15" fill="rgb(245,114,25)"/><text x="66.8555%" y="591.50">sock_se..</text></g><g><title>tcp_sendmsg (62 samples, 5.69%)</title><rect x="66.7890%" y="565" width="5.6881%" height="15" fill="rgb(210,61,42)"/><text x="67.0390%" y="575.50">tcp_sen..</text></g><g><title>tcp_sendmsg_locked (62 samples, 5.69%)</title><rect x="66.7890%" y="549" width="5.6881%" height="15" fill="rgb(211,52,33)"/><text x="67.0390%" y="559.50">tcp_sen..</text></g><g><title>decor::Shim::run_on_tcp (347 samples, 31.83%)</title><rect x="40.7339%" y="741" width="31.8349%" height="15" fill="rgb(234,58,33)"/><text x="40.9839%" y="751.50">decor::Shim::run_on_tcp</text></g><g><title>msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on (347 samples, 31.83%)</title><rect x="40.7339%" y="725" width="31.8349%" height="15" fill="rgb(220,115,36)"/><text x="40.9839%" y="735.50">msql_srv::MysqlIntermediary&lt;B,R,W&gt;::run_on</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (67 samples, 6.15%)</title><rect x="66.4220%" y="709" width="6.1468%" height="15" fill="rgb(243,153,54)"/><text x="66.6720%" y="719.50">std::io:..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (67 samples, 6.15%)</title><rect x="66.4220%" y="693" width="6.1468%" height="15" fill="rgb(251,47,18)"/><text x="66.6720%" y="703.50">&lt;std::ne..</text></g><g><title>std::sys_common::net::TcpStream::write (67 samples, 6.15%)</title><rect x="66.4220%" y="677" width="6.1468%" height="15" fill="rgb(242,102,42)"/><text x="66.6720%" y="687.50">std::sys..</text></g><g><title>__libc_send (67 samples, 6.15%)</title><rect x="66.4220%" y="661" width="6.1468%" height="15" fill="rgb(234,31,38)"/><text x="66.6720%" y="671.50">__libc_s..</text></g><g><title>entry_SYSCALL_64 (65 samples, 5.96%)</title><rect x="66.6055%" y="645" width="5.9633%" height="15" fill="rgb(221,117,51)"/><text x="66.8555%" y="655.50">entry_SY..</text></g><g><title>__GI___clone (348 samples, 31.93%)</title><rect x="40.7339%" y="853" width="31.9266%" height="15" fill="rgb(212,20,18)"/><text x="40.9839%" y="863.50">__GI___clone</text></g><g><title>start_thread (348 samples, 31.93%)</title><rect x="40.7339%" y="837" width="31.9266%" height="15" fill="rgb(245,133,36)"/><text x="40.9839%" y="847.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (348 samples, 31.93%)</title><rect x="40.7339%" y="821" width="31.9266%" height="15" fill="rgb(212,6,19)"/><text x="40.9839%" y="831.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (348 samples, 31.93%)</title><rect x="40.7339%" y="805" width="31.9266%" height="15" fill="rgb(218,1,36)"/><text x="40.9839%" y="815.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce..</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (348 samples, 31.93%)</title><rect x="40.7339%" y="789" width="31.9266%" height="15" fill="rgb(246,84,54)"/><text x="40.9839%" y="799.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (348 samples, 31.93%)</title><rect x="40.7339%" y="773" width="31.9266%" height="15" fill="rgb(242,110,6)"/><text x="40.9839%" y="783.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (348 samples, 31.93%)</title><rect x="40.7339%" y="757" width="31.9266%" height="15" fill="rgb(214,47,5)"/><text x="40.9839%" y="767.50">std::sys_common::backtrace::__rust_begin_short_backt..</text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.37%)</title><rect x="72.7523%" y="677" width="0.3670%" height="15" fill="rgb(218,159,25)"/><text x="73.0023%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (3 samples, 0.28%)</title><rect x="73.3028%" y="581" width="0.2752%" height="15" fill="rgb(215,211,28)"/><text x="73.5528%" y="591.50"></text></g><g><title>[libhwloc.so.15.2.0] (4 samples, 0.37%)</title><rect x="73.3028%" y="597" width="0.3670%" height="15" fill="rgb(238,59,32)"/><text x="73.5528%" y="607.50"></text></g><g><title>do_syscall_64 (235 samples, 21.56%)</title><rect x="73.7615%" y="549" width="21.5596%" height="15" fill="rgb(226,82,3)"/><text x="74.0115%" y="559.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (235 samples, 21.56%)</title><rect x="73.7615%" y="533" width="21.5596%" height="15" fill="rgb(240,164,32)"/><text x="74.0115%" y="543.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (235 samples, 21.56%)</title><rect x="73.7615%" y="517" width="21.5596%" height="15" fill="rgb(232,46,7)"/><text x="74.0115%" y="527.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 21.56%)</title><rect x="73.7615%" y="501" width="21.5596%" height="15" fill="rgb(229,129,53)"/><text x="74.0115%" y="511.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (235 samples, 21.56%)</title><rect x="73.7615%" y="485" width="21.5596%" height="15" fill="rgb(234,188,29)"/><text x="74.0115%" y="495.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (235 samples, 21.56%)</title><rect x="73.7615%" y="469" width="21.5596%" height="15" fill="rgb(246,141,4)"/><text x="74.0115%" y="479.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (235 samples, 21.56%)</title><rect x="73.7615%" y="453" width="21.5596%" height="15" fill="rgb(229,23,39)"/><text x="74.0115%" y="463.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (235 samples, 21.56%)</title><rect x="73.7615%" y="437" width="21.5596%" height="15" fill="rgb(206,12,3)"/><text x="74.0115%" y="447.50">preempt_schedule_common</text></g><g><title>__schedule (235 samples, 21.56%)</title><rect x="73.7615%" y="421" width="21.5596%" height="15" fill="rgb(252,226,20)"/><text x="74.0115%" y="431.50">__schedule</text></g><g><title>finish_task_switch (235 samples, 21.56%)</title><rect x="73.7615%" y="405" width="21.5596%" height="15" fill="rgb(216,123,35)"/><text x="74.0115%" y="415.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (234 samples, 21.47%)</title><rect x="73.8532%" y="389" width="21.4679%" height="15" fill="rgb(212,68,40)"/><text x="74.1032%" y="399.50">__perf_event_task_sched_in</text></g><g><title>__intel_pmu_enable_all.constprop.0 (234 samples, 21.47%)</title><rect x="73.8532%" y="373" width="21.4679%" height="15" fill="rgb(254,125,32)"/><text x="74.1032%" y="383.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (233 samples, 21.38%)</title><rect x="73.9450%" y="357" width="21.3761%" height="15" fill="rgb(253,97,22)"/><text x="74.1950%" y="367.50">native_write_msr</text></g><g><title>hwloc::Topology::new (243 samples, 22.29%)</title><rect x="73.2110%" y="677" width="22.2936%" height="15" fill="rgb(241,101,14)"/><text x="73.4610%" y="687.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (243 samples, 22.29%)</title><rect x="73.2110%" y="661" width="22.2936%" height="15" fill="rgb(238,103,29)"/><text x="73.4610%" y="671.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (243 samples, 22.29%)</title><rect x="73.2110%" y="645" width="22.2936%" height="15" fill="rgb(233,195,47)"/><text x="73.4610%" y="655.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (243 samples, 22.29%)</title><rect x="73.2110%" y="629" width="22.2936%" height="15" fill="rgb(246,218,30)"/><text x="73.4610%" y="639.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (243 samples, 22.29%)</title><rect x="73.2110%" y="613" width="22.2936%" height="15" fill="rgb(219,145,47)"/><text x="73.4610%" y="623.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (238 samples, 21.83%)</title><rect x="73.6697%" y="597" width="21.8349%" height="15" fill="rgb(243,12,26)"/><text x="73.9197%" y="607.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (237 samples, 21.74%)</title><rect x="73.7615%" y="581" width="21.7431%" height="15" fill="rgb(214,87,16)"/><text x="74.0115%" y="591.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (237 samples, 21.74%)</title><rect x="73.7615%" y="565" width="21.7431%" height="15" fill="rgb(208,99,42)"/><text x="74.0115%" y="575.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.18%)</title><rect x="95.3211%" y="549" width="0.1835%" height="15" fill="rgb(253,99,2)"/><text x="95.5711%" y="559.50"></text></g><g><title>switch_fpu_return (2 samples, 0.18%)</title><rect x="95.3211%" y="533" width="0.1835%" height="15" fill="rgb(220,168,23)"/><text x="95.5711%" y="543.50"></text></g><g><title>enqueue_task (2 samples, 0.18%)</title><rect x="96.3303%" y="85" width="0.1835%" height="15" fill="rgb(242,38,24)"/><text x="96.5803%" y="95.50"></text></g><g><title>sock_def_readable (4 samples, 0.37%)</title><rect x="96.3303%" y="149" width="0.3670%" height="15" fill="rgb(225,182,9)"/><text x="96.5803%" y="159.50"></text></g><g><title>__wake_up_common_lock (4 samples, 0.37%)</title><rect x="96.3303%" y="133" width="0.3670%" height="15" fill="rgb(243,178,37)"/><text x="96.5803%" y="143.50"></text></g><g><title>__wake_up_common (4 samples, 0.37%)</title><rect x="96.3303%" y="117" width="0.3670%" height="15" fill="rgb(232,139,19)"/><text x="96.5803%" y="127.50"></text></g><g><title>try_to_wake_up (4 samples, 0.37%)</title><rect x="96.3303%" y="101" width="0.3670%" height="15" fill="rgb(225,201,24)"/><text x="96.5803%" y="111.50"></text></g><g><title>__kfree_skb (3 samples, 0.28%)</title><rect x="96.7890%" y="133" width="0.2752%" height="15" fill="rgb(221,47,46)"/><text x="97.0390%" y="143.50"></text></g><g><title>skb_release_data (2 samples, 0.18%)</title><rect x="96.8807%" y="117" width="0.1835%" height="15" fill="rgb(249,23,13)"/><text x="97.1307%" y="127.50"></text></g><g><title>ip_finish_output2 (17 samples, 1.56%)</title><rect x="95.6881%" y="389" width="1.5596%" height="15" fill="rgb(219,9,5)"/><text x="95.9381%" y="399.50"></text></g><g><title>__local_bh_enable_ip (16 samples, 1.47%)</title><rect x="95.7798%" y="373" width="1.4679%" height="15" fill="rgb(254,171,16)"/><text x="96.0298%" y="383.50"></text></g><g><title>do_softirq (16 samples, 1.47%)</title><rect x="95.7798%" y="357" width="1.4679%" height="15" fill="rgb(230,171,20)"/><text x="96.0298%" y="367.50"></text></g><g><title>do_softirq_own_stack (15 samples, 1.38%)</title><rect x="95.8716%" y="341" width="1.3761%" height="15" fill="rgb(210,71,41)"/><text x="96.1216%" y="351.50"></text></g><g><title>__do_softirq (15 samples, 1.38%)</title><rect x="95.8716%" y="325" width="1.3761%" height="15" fill="rgb(206,173,20)"/><text x="96.1216%" y="335.50"></text></g><g><title>net_rx_action (15 samples, 1.38%)</title><rect x="95.8716%" y="309" width="1.3761%" height="15" fill="rgb(233,88,34)"/><text x="96.1216%" y="319.50"></text></g><g><title>process_backlog (14 samples, 1.28%)</title><rect x="95.9633%" y="293" width="1.2844%" height="15" fill="rgb(223,209,46)"/><text x="96.2133%" y="303.50"></text></g><g><title>__netif_receive_skb_one_core (14 samples, 1.28%)</title><rect x="95.9633%" y="277" width="1.2844%" height="15" fill="rgb(250,43,18)"/><text x="96.2133%" y="287.50"></text></g><g><title>ip_rcv (13 samples, 1.19%)</title><rect x="96.0550%" y="261" width="1.1927%" height="15" fill="rgb(208,13,10)"/><text x="96.3050%" y="271.50"></text></g><g><title>ip_local_deliver (12 samples, 1.10%)</title><rect x="96.1468%" y="245" width="1.1009%" height="15" fill="rgb(212,200,36)"/><text x="96.3968%" y="255.50"></text></g><g><title>ip_local_deliver_finish (12 samples, 1.10%)</title><rect x="96.1468%" y="229" width="1.1009%" height="15" fill="rgb(225,90,30)"/><text x="96.3968%" y="239.50"></text></g><g><title>ip_protocol_deliver_rcu (12 samples, 1.10%)</title><rect x="96.1468%" y="213" width="1.1009%" height="15" fill="rgb(236,182,39)"/><text x="96.3968%" y="223.50"></text></g><g><title>tcp_v4_rcv (12 samples, 1.10%)</title><rect x="96.1468%" y="197" width="1.1009%" height="15" fill="rgb(212,144,35)"/><text x="96.3968%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (10 samples, 0.92%)</title><rect x="96.3303%" y="181" width="0.9174%" height="15" fill="rgb(228,63,44)"/><text x="96.5803%" y="191.50"></text></g><g><title>tcp_rcv_established (10 samples, 0.92%)</title><rect x="96.3303%" y="165" width="0.9174%" height="15" fill="rgb(228,109,6)"/><text x="96.5803%" y="175.50"></text></g><g><title>tcp_ack (6 samples, 0.55%)</title><rect x="96.6972%" y="149" width="0.5505%" height="15" fill="rgb(238,117,24)"/><text x="96.9472%" y="159.50"></text></g><g><title>__tcp_push_pending_frames (18 samples, 1.65%)</title><rect x="95.6881%" y="469" width="1.6514%" height="15" fill="rgb(242,26,26)"/><text x="95.9381%" y="479.50"></text></g><g><title>tcp_write_xmit (18 samples, 1.65%)</title><rect x="95.6881%" y="453" width="1.6514%" height="15" fill="rgb(221,92,48)"/><text x="95.9381%" y="463.50"></text></g><g><title>__tcp_transmit_skb (18 samples, 1.65%)</title><rect x="95.6881%" y="437" width="1.6514%" height="15" fill="rgb(209,209,32)"/><text x="95.9381%" y="447.50"></text></g><g><title>__ip_queue_xmit (18 samples, 1.65%)</title><rect x="95.6881%" y="421" width="1.6514%" height="15" fill="rgb(221,70,22)"/><text x="95.9381%" y="431.50"></text></g><g><title>ip_output (18 samples, 1.65%)</title><rect x="95.6881%" y="405" width="1.6514%" height="15" fill="rgb(248,145,5)"/><text x="95.9381%" y="415.50"></text></g><g><title>do_syscall_64 (24 samples, 2.20%)</title><rect x="95.5963%" y="565" width="2.2018%" height="15" fill="rgb(226,116,26)"/><text x="95.8463%" y="575.50">d..</text></g><g><title>__x64_sys_sendto (24 samples, 2.20%)</title><rect x="95.5963%" y="549" width="2.2018%" height="15" fill="rgb(244,5,17)"/><text x="95.8463%" y="559.50">_..</text></g><g><title>__sys_sendto (24 samples, 2.20%)</title><rect x="95.5963%" y="533" width="2.2018%" height="15" fill="rgb(252,159,33)"/><text x="95.8463%" y="543.50">_..</text></g><g><title>sock_sendmsg (24 samples, 2.20%)</title><rect x="95.5963%" y="517" width="2.2018%" height="15" fill="rgb(206,71,0)"/><text x="95.8463%" y="527.50">s..</text></g><g><title>tcp_sendmsg (24 samples, 2.20%)</title><rect x="95.5963%" y="501" width="2.2018%" height="15" fill="rgb(233,118,54)"/><text x="95.8463%" y="511.50">t..</text></g><g><title>tcp_sendmsg_locked (23 samples, 2.11%)</title><rect x="95.6881%" y="485" width="2.1101%" height="15" fill="rgb(234,83,48)"/><text x="95.9381%" y="495.50">t..</text></g><g><title>entry_SYSCALL_64 (27 samples, 2.48%)</title><rect x="95.5963%" y="581" width="2.4771%" height="15" fill="rgb(228,3,54)"/><text x="95.8463%" y="591.50">en..</text></g><g><title>prepare_exit_to_usermode (3 samples, 0.28%)</title><rect x="97.7982%" y="565" width="0.2752%" height="15" fill="rgb(226,155,13)"/><text x="98.0482%" y="575.50"></text></g><g><title>mysql::conn::Conn::_query (29 samples, 2.66%)</title><rect x="95.5046%" y="677" width="2.6606%" height="15" fill="rgb(241,28,37)"/><text x="95.7546%" y="687.50">my..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (29 samples, 2.66%)</title><rect x="95.5046%" y="661" width="2.6606%" height="15" fill="rgb(233,93,10)"/><text x="95.7546%" y="671.50">my..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (28 samples, 2.57%)</title><rect x="95.5963%" y="645" width="2.5688%" height="15" fill="rgb(225,113,19)"/><text x="95.8463%" y="655.50">st..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (28 samples, 2.57%)</title><rect x="95.5963%" y="629" width="2.5688%" height="15" fill="rgb(241,2,18)"/><text x="95.8463%" y="639.50">&lt;s..</text></g><g><title>std::sys_common::net::TcpStream::write (28 samples, 2.57%)</title><rect x="95.5963%" y="613" width="2.5688%" height="15" fill="rgb(228,207,21)"/><text x="95.8463%" y="623.50">st..</text></g><g><title>__libc_send (28 samples, 2.57%)</title><rect x="95.5963%" y="597" width="2.5688%" height="15" fill="rgb(213,211,35)"/><text x="95.8463%" y="607.50">__..</text></g><g><title>__libc_start_main (278 samples, 25.50%)</title><rect x="72.7523%" y="837" width="25.5046%" height="15" fill="rgb(209,83,10)"/><text x="73.0023%" y="847.50">__libc_start_main</text></g><g><title>main (278 samples, 25.50%)</title><rect x="72.7523%" y="821" width="25.5046%" height="15" fill="rgb(209,164,1)"/><text x="73.0023%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (278 samples, 25.50%)</title><rect x="72.7523%" y="805" width="25.5046%" height="15" fill="rgb(213,184,43)"/><text x="73.0023%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (278 samples, 25.50%)</title><rect x="72.7523%" y="789" width="25.5046%" height="15" fill="rgb(231,61,34)"/><text x="73.0023%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (278 samples, 25.50%)</title><rect x="72.7523%" y="773" width="25.5046%" height="15" fill="rgb(235,75,3)"/><text x="73.0023%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (278 samples, 25.50%)</title><rect x="72.7523%" y="757" width="25.5046%" height="15" fill="rgb(220,106,47)"/><text x="73.0023%" y="767.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (278 samples, 25.50%)</title><rect x="72.7523%" y="741" width="25.5046%" height="15" fill="rgb(210,196,33)"/><text x="73.0023%" y="751.50">core::ops::function::impls::&lt;impl core::o..</text></g><g><title>std::rt::lang_start::_{{closure}} (278 samples, 25.50%)</title><rect x="72.7523%" y="725" width="25.5046%" height="15" fill="rgb(229,154,42)"/><text x="73.0023%" y="735.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (278 samples, 25.50%)</title><rect x="72.7523%" y="709" width="25.5046%" height="15" fill="rgb(228,114,26)"/><text x="73.0023%" y="719.50">std::sys_common::backtrace::__rust_begin_..</text></g><g><title>lobsters::main (278 samples, 25.50%)</title><rect x="72.7523%" y="693" width="25.5046%" height="15" fill="rgb(208,144,1)"/><text x="73.0023%" y="703.50">lobsters::main</text></g><g><title>_start (279 samples, 25.60%)</title><rect x="72.7523%" y="853" width="25.5963%" height="15" fill="rgb(239,112,37)"/><text x="73.0023%" y="863.50">_start</text></g><g><title>entry_SYSCALL_64 (6 samples, 0.55%)</title><rect x="98.4404%" y="853" width="0.5505%" height="15" fill="rgb(210,96,50)"/><text x="98.6904%" y="863.50"></text></g><g><title>do_syscall_64 (2 samples, 0.18%)</title><rect x="98.8073%" y="837" width="0.1835%" height="15" fill="rgb(222,178,2)"/><text x="99.0573%" y="847.50"></text></g><g><title>msql_srv::resultset::RowWriter&lt;W&gt;::write_col (2 samples, 0.18%)</title><rect x="98.9908%" y="853" width="0.1835%" height="15" fill="rgb(226,74,18)"/><text x="99.2408%" y="863.50"></text></g><g><title>lobsters (1,084 samples, 99.45%)</title><rect x="0.0000%" y="869" width="99.4495%" height="15" fill="rgb(225,67,54)"/><text x="0.2500%" y="879.50">lobsters</text></g><g><title>page_fault (2 samples, 0.18%)</title><rect x="99.2661%" y="853" width="0.1835%" height="15" fill="rgb(251,92,32)"/><text x="99.5161%" y="863.50"></text></g><g><title>all (1,090 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(228,149,22)"/><text x="0.2500%" y="895.50"></text></g><g><title>perf (6 samples, 0.55%)</title><rect x="99.4495%" y="869" width="0.5505%" height="15" fill="rgb(243,54,13)"/><text x="99.6995%" y="879.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 0.55%)</title><rect x="99.4495%" y="853" width="0.5505%" height="15" fill="rgb(243,180,28)"/><text x="99.6995%" y="863.50"></text></g><g><title>do_syscall_64 (6 samples, 0.55%)</title><rect x="99.4495%" y="837" width="0.5505%" height="15" fill="rgb(208,167,24)"/><text x="99.6995%" y="847.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.55%)</title><rect x="99.4495%" y="821" width="0.5505%" height="15" fill="rgb(245,73,45)"/><text x="99.6995%" y="831.50"></text></g><g><title>do_execve (6 samples, 0.55%)</title><rect x="99.4495%" y="805" width="0.5505%" height="15" fill="rgb(237,203,48)"/><text x="99.6995%" y="815.50"></text></g><g><title>__do_execve_file (6 samples, 0.55%)</title><rect x="99.4495%" y="789" width="0.5505%" height="15" fill="rgb(211,197,16)"/><text x="99.6995%" y="799.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 0.55%)</title><rect x="99.4495%" y="773" width="0.5505%" height="15" fill="rgb(243,99,51)"/><text x="99.6995%" y="783.50"></text></g><g><title>load_elf_binary (6 samples, 0.55%)</title><rect x="99.4495%" y="757" width="0.5505%" height="15" fill="rgb(215,123,29)"/><text x="99.6995%" y="767.50"></text></g><g><title>setup_new_exec (6 samples, 0.55%)</title><rect x="99.4495%" y="741" width="0.5505%" height="15" fill="rgb(239,186,37)"/><text x="99.6995%" y="751.50"></text></g><g><title>perf_event_exec (6 samples, 0.55%)</title><rect x="99.4495%" y="725" width="0.5505%" height="15" fill="rgb(252,136,39)"/><text x="99.6995%" y="735.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.46%)</title><rect x="99.5413%" y="709" width="0.4587%" height="15" fill="rgb(223,213,32)"/><text x="99.7913%" y="719.50"></text></g><g><title>native_write_msr (5 samples, 0.46%)</title><rect x="99.5413%" y="693" width="0.4587%" height="15" fill="rgb(233,115,5)"/><text x="99.7913%" y="703.50"></text></g></svg></svg>