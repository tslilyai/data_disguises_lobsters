<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="997.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.46%)</title><rect x="0.0000%" y="917" width="0.4566%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="927.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.46%)</title><rect x="0.0000%" y="901" width="0.4566%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="911.50"></text></g><g><title>std::sys::unix::net::Socket::read (2 samples, 0.46%)</title><rect x="0.0000%" y="885" width="0.4566%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="895.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2 samples, 0.46%)</title><rect x="0.0000%" y="869" width="0.4566%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="879.50"></text></g><g><title>__libc_recv (2 samples, 0.46%)</title><rect x="0.0000%" y="853" width="0.4566%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="863.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="0.0000%" y="837" width="0.4566%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="847.50"></text></g><g><title>[[heap]] (3 samples, 0.68%)</title><rect x="0.0000%" y="933" width="0.6849%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="943.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.23%)</title><rect x="0.4566%" y="917" width="0.2283%" height="15" fill="rgb(228,23,34)"/><text x="0.7066%" y="927.50"></text></g><g><title>__libc_send (1 samples, 0.23%)</title><rect x="0.6849%" y="917" width="0.2283%" height="15" fill="rgb(218,30,26)"/><text x="0.9349%" y="927.50"></text></g><g><title>[[stack]] (2 samples, 0.46%)</title><rect x="0.6849%" y="933" width="0.4566%" height="15" fill="rgb(220,122,19)"/><text x="0.9349%" y="943.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="0.9132%" y="917" width="0.2283%" height="15" fill="rgb(250,228,42)"/><text x="1.1632%" y="927.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.23%)</title><rect x="1.1416%" y="917" width="0.2283%" height="15" fill="rgb(240,193,28)"/><text x="1.3916%" y="927.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.23%)</title><rect x="1.5982%" y="645" width="0.2283%" height="15" fill="rgb(216,20,37)"/><text x="1.8482%" y="655.50"></text></g><g><title>release_sock (3 samples, 0.68%)</title><rect x="2.2831%" y="549" width="0.6849%" height="15" fill="rgb(206,188,39)"/><text x="2.5331%" y="559.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.46%)</title><rect x="2.5114%" y="533" width="0.4566%" height="15" fill="rgb(217,207,13)"/><text x="2.7614%" y="543.50"></text></g><g><title>preempt_count_add (1 samples, 0.23%)</title><rect x="2.7397%" y="517" width="0.2283%" height="15" fill="rgb(231,73,38)"/><text x="2.9897%" y="527.50"></text></g><g><title>in_lock_functions (1 samples, 0.23%)</title><rect x="2.7397%" y="501" width="0.2283%" height="15" fill="rgb(225,20,46)"/><text x="2.9897%" y="511.50"></text></g><g><title>__rcu_read_unlock (2 samples, 0.46%)</title><rect x="3.6530%" y="469" width="0.4566%" height="15" fill="rgb(210,31,41)"/><text x="3.9030%" y="479.50"></text></g><g><title>__ip_finish_output (1 samples, 0.23%)</title><rect x="4.1096%" y="453" width="0.2283%" height="15" fill="rgb(221,200,47)"/><text x="4.3596%" y="463.50"></text></g><g><title>__this_cpu_preempt_check (1 samples, 0.23%)</title><rect x="5.4795%" y="421" width="0.2283%" height="15" fill="rgb(226,26,5)"/><text x="5.7295%" y="431.50"></text></g><g><title>eth_type_trans (1 samples, 0.23%)</title><rect x="5.7078%" y="389" width="0.2283%" height="15" fill="rgb(249,33,26)"/><text x="5.9578%" y="399.50"></text></g><g><title>netif_rx (2 samples, 0.46%)</title><rect x="5.9361%" y="389" width="0.4566%" height="15" fill="rgb(235,183,28)"/><text x="6.1861%" y="399.50"></text></g><g><title>netif_rx_internal (1 samples, 0.23%)</title><rect x="6.1644%" y="373" width="0.2283%" height="15" fill="rgb(221,5,38)"/><text x="6.4144%" y="383.50"></text></g><g><title>dev_hard_start_xmit (4 samples, 0.91%)</title><rect x="5.7078%" y="421" width="0.9132%" height="15" fill="rgb(247,18,42)"/><text x="5.9578%" y="431.50"></text></g><g><title>loopback_xmit (4 samples, 0.91%)</title><rect x="5.7078%" y="405" width="0.9132%" height="15" fill="rgb(241,131,45)"/><text x="5.9578%" y="415.50"></text></g><g><title>tcp_wfree (1 samples, 0.23%)</title><rect x="6.3927%" y="389" width="0.2283%" height="15" fill="rgb(249,31,29)"/><text x="6.6427%" y="399.50"></text></g><g><title>__dev_queue_xmit (7 samples, 1.60%)</title><rect x="5.2511%" y="437" width="1.5982%" height="15" fill="rgb(225,111,53)"/><text x="5.5011%" y="447.50"></text></g><g><title>validate_xmit_xfrm (1 samples, 0.23%)</title><rect x="6.6210%" y="421" width="0.2283%" height="15" fill="rgb(238,160,17)"/><text x="6.8710%" y="431.50"></text></g><g><title>apic_timer_interrupt (1 samples, 0.23%)</title><rect x="7.0776%" y="405" width="0.2283%" height="15" fill="rgb(214,148,48)"/><text x="7.3276%" y="415.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.23%)</title><rect x="7.0776%" y="389" width="0.2283%" height="15" fill="rgb(232,36,49)"/><text x="7.3276%" y="399.50"></text></g><g><title>irq_exit (1 samples, 0.23%)</title><rect x="7.0776%" y="373" width="0.2283%" height="15" fill="rgb(209,103,24)"/><text x="7.3276%" y="383.50"></text></g><g><title>__do_softirq (1 samples, 0.23%)</title><rect x="7.0776%" y="357" width="0.2283%" height="15" fill="rgb(229,88,8)"/><text x="7.3276%" y="367.50"></text></g><g><title>rebalance_domains (1 samples, 0.23%)</title><rect x="7.0776%" y="341" width="0.2283%" height="15" fill="rgb(213,181,19)"/><text x="7.3276%" y="351.50"></text></g><g><title>__msecs_to_jiffies (1 samples, 0.23%)</title><rect x="7.0776%" y="325" width="0.2283%" height="15" fill="rgb(254,191,54)"/><text x="7.3276%" y="335.50"></text></g><g><title>__kfree_skb_flush (1 samples, 0.23%)</title><rect x="7.5342%" y="357" width="0.2283%" height="15" fill="rgb(241,83,37)"/><text x="7.7842%" y="367.50"></text></g><g><title>__netif_receive_skb_core (3 samples, 0.68%)</title><rect x="8.9041%" y="325" width="0.6849%" height="15" fill="rgb(233,36,39)"/><text x="9.1541%" y="335.50"></text></g><g><title>__tcp_ack_snd_check (2 samples, 0.46%)</title><rect x="10.2740%" y="213" width="0.4566%" height="15" fill="rgb(226,3,54)"/><text x="10.5240%" y="223.50"></text></g><g><title>sk_reset_timer (2 samples, 0.46%)</title><rect x="10.7306%" y="213" width="0.4566%" height="15" fill="rgb(245,192,40)"/><text x="10.9806%" y="223.50"></text></g><g><title>__mod_timer (1 samples, 0.23%)</title><rect x="10.9589%" y="197" width="0.2283%" height="15" fill="rgb(238,167,29)"/><text x="11.2089%" y="207.50"></text></g><g><title>lock_timer_base.constprop.0 (1 samples, 0.23%)</title><rect x="10.9589%" y="181" width="0.2283%" height="15" fill="rgb(232,182,51)"/><text x="11.2089%" y="191.50"></text></g><g><title>_raw_spin_lock (2 samples, 0.46%)</title><rect x="11.6438%" y="133" width="0.4566%" height="15" fill="rgb(231,60,39)"/><text x="11.8938%" y="143.50"></text></g><g><title>psi_task_change (3 samples, 0.68%)</title><rect x="12.1005%" y="117" width="0.6849%" height="15" fill="rgb(208,69,12)"/><text x="12.3505%" y="127.50"></text></g><g><title>psi_group_change (2 samples, 0.46%)</title><rect x="12.3288%" y="101" width="0.4566%" height="15" fill="rgb(235,93,37)"/><text x="12.5788%" y="111.50"></text></g><g><title>record_times (2 samples, 0.46%)</title><rect x="12.3288%" y="85" width="0.4566%" height="15" fill="rgb(213,116,39)"/><text x="12.5788%" y="95.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.46%)</title><rect x="12.3288%" y="69" width="0.4566%" height="15" fill="rgb(222,207,29)"/><text x="12.5788%" y="79.50"></text></g><g><title>sched_clock (1 samples, 0.23%)</title><rect x="12.5571%" y="53" width="0.2283%" height="15" fill="rgb(206,96,30)"/><text x="12.8071%" y="63.50"></text></g><g><title>native_sched_clock (1 samples, 0.23%)</title><rect x="12.5571%" y="37" width="0.2283%" height="15" fill="rgb(218,138,4)"/><text x="12.8071%" y="47.50"></text></g><g><title>enqueue_task (4 samples, 0.91%)</title><rect x="12.1005%" y="133" width="0.9132%" height="15" fill="rgb(250,191,14)"/><text x="12.3505%" y="143.50"></text></g><g><title>uclamp_rq_inc_id (1 samples, 0.23%)</title><rect x="12.7854%" y="117" width="0.2283%" height="15" fill="rgb(239,60,40)"/><text x="13.0354%" y="127.50"></text></g><g><title>rb_insert_color (1 samples, 0.23%)</title><rect x="13.2420%" y="101" width="0.2283%" height="15" fill="rgb(206,27,48)"/><text x="13.4920%" y="111.50"></text></g><g><title>enqueue_task_fair (3 samples, 0.68%)</title><rect x="13.0137%" y="133" width="0.6849%" height="15" fill="rgb(225,35,8)"/><text x="13.2637%" y="143.50"></text></g><g><title>enqueue_entity (2 samples, 0.46%)</title><rect x="13.2420%" y="117" width="0.4566%" height="15" fill="rgb(250,213,24)"/><text x="13.4920%" y="127.50"></text></g><g><title>reweight_entity (1 samples, 0.23%)</title><rect x="13.4703%" y="101" width="0.2283%" height="15" fill="rgb(247,123,22)"/><text x="13.7203%" y="111.50"></text></g><g><title>select_task_rq_fair (2 samples, 0.46%)</title><rect x="13.6986%" y="133" width="0.4566%" height="15" fill="rgb(231,138,38)"/><text x="13.9486%" y="143.50"></text></g><g><title>available_idle_cpu (2 samples, 0.46%)</title><rect x="13.6986%" y="117" width="0.4566%" height="15" fill="rgb(231,145,46)"/><text x="13.9486%" y="127.50"></text></g><g><title>ttwu_do_wakeup (3 samples, 0.68%)</title><rect x="14.1553%" y="133" width="0.6849%" height="15" fill="rgb(251,118,11)"/><text x="14.4053%" y="143.50"></text></g><g><title>check_preempt_curr (2 samples, 0.46%)</title><rect x="14.3836%" y="117" width="0.4566%" height="15" fill="rgb(217,147,25)"/><text x="14.6336%" y="127.50"></text></g><g><title>resched_curr (1 samples, 0.23%)</title><rect x="14.6119%" y="101" width="0.2283%" height="15" fill="rgb(247,81,37)"/><text x="14.8619%" y="111.50"></text></g><g><title>__wake_up_common (17 samples, 3.88%)</title><rect x="11.1872%" y="181" width="3.8813%" height="15" fill="rgb(209,12,38)"/><text x="11.4372%" y="191.50">__wa..</text></g><g><title>pollwake (17 samples, 3.88%)</title><rect x="11.1872%" y="165" width="3.8813%" height="15" fill="rgb(227,1,9)"/><text x="11.4372%" y="175.50">poll..</text></g><g><title>try_to_wake_up (16 samples, 3.65%)</title><rect x="11.4155%" y="149" width="3.6530%" height="15" fill="rgb(248,47,43)"/><text x="11.6655%" y="159.50">try_..</text></g><g><title>update_rq_clock (1 samples, 0.23%)</title><rect x="14.8402%" y="133" width="0.2283%" height="15" fill="rgb(221,10,30)"/><text x="15.0902%" y="143.50"></text></g><g><title>__wake_up_common_lock (18 samples, 4.11%)</title><rect x="11.1872%" y="197" width="4.1096%" height="15" fill="rgb(210,229,1)"/><text x="11.4372%" y="207.50">__wa..</text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.23%)</title><rect x="15.0685%" y="181" width="0.2283%" height="15" fill="rgb(222,148,37)"/><text x="15.3185%" y="191.50"></text></g><g><title>sock_def_readable (19 samples, 4.34%)</title><rect x="11.1872%" y="213" width="4.3379%" height="15" fill="rgb(234,67,33)"/><text x="11.4372%" y="223.50">sock_..</text></g><g><title>apic_timer_interrupt (1 samples, 0.23%)</title><rect x="15.2968%" y="197" width="0.2283%" height="15" fill="rgb(247,98,35)"/><text x="15.5468%" y="207.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.23%)</title><rect x="15.2968%" y="181" width="0.2283%" height="15" fill="rgb(247,138,52)"/><text x="15.5468%" y="191.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.23%)</title><rect x="15.2968%" y="165" width="0.2283%" height="15" fill="rgb(213,79,30)"/><text x="15.5468%" y="175.50"></text></g><g><title>clockevents_program_event (1 samples, 0.23%)</title><rect x="15.2968%" y="149" width="0.2283%" height="15" fill="rgb(246,177,23)"/><text x="15.5468%" y="159.50"></text></g><g><title>lapic_next_deadline (1 samples, 0.23%)</title><rect x="15.2968%" y="133" width="0.2283%" height="15" fill="rgb(230,62,27)"/><text x="15.5468%" y="143.50"></text></g><g><title>native_write_msr (1 samples, 0.23%)</title><rect x="15.2968%" y="117" width="0.2283%" height="15" fill="rgb(216,154,8)"/><text x="15.5468%" y="127.50"></text></g><g><title>__kfree_skb (1 samples, 0.23%)</title><rect x="16.4384%" y="197" width="0.2283%" height="15" fill="rgb(244,35,45)"/><text x="16.6884%" y="207.50"></text></g><g><title>skb_release_data (1 samples, 0.23%)</title><rect x="16.4384%" y="181" width="0.2283%" height="15" fill="rgb(251,115,12)"/><text x="16.6884%" y="191.50"></text></g><g><title>bictcp_acked (1 samples, 0.23%)</title><rect x="16.6667%" y="197" width="0.2283%" height="15" fill="rgb(240,54,50)"/><text x="16.9167%" y="207.50"></text></g><g><title>tcp_ack_update_rtt (3 samples, 0.68%)</title><rect x="16.8950%" y="197" width="0.6849%" height="15" fill="rgb(233,84,52)"/><text x="17.1450%" y="207.50"></text></g><g><title>tcp_rate_gen (1 samples, 0.23%)</title><rect x="17.5799%" y="197" width="0.2283%" height="15" fill="rgb(207,117,47)"/><text x="17.8299%" y="207.50"></text></g><g><title>tcp_ack (11 samples, 2.51%)</title><rect x="15.5251%" y="213" width="2.5114%" height="15" fill="rgb(249,43,39)"/><text x="15.7751%" y="223.50">tc..</text></g><g><title>tcp_schedule_loss_probe.part.0 (1 samples, 0.23%)</title><rect x="17.8082%" y="197" width="0.2283%" height="15" fill="rgb(209,38,44)"/><text x="18.0582%" y="207.50"></text></g><g><title>tcp_event_data_recv (1 samples, 0.23%)</title><rect x="18.0365%" y="213" width="0.2283%" height="15" fill="rgb(236,212,23)"/><text x="18.2865%" y="223.50"></text></g><g><title>tcp_mstamp_refresh (1 samples, 0.23%)</title><rect x="18.2648%" y="213" width="0.2283%" height="15" fill="rgb(242,79,21)"/><text x="18.5148%" y="223.50"></text></g><g><title>ktime_get (1 samples, 0.23%)</title><rect x="18.2648%" y="197" width="0.2283%" height="15" fill="rgb(211,96,35)"/><text x="18.5148%" y="207.50"></text></g><g><title>read_tsc (1 samples, 0.23%)</title><rect x="18.2648%" y="181" width="0.2283%" height="15" fill="rgb(253,215,40)"/><text x="18.5148%" y="191.50"></text></g><g><title>tcp_v4_do_rcv (38 samples, 8.68%)</title><rect x="10.2740%" y="245" width="8.6758%" height="15" fill="rgb(211,81,21)"/><text x="10.5240%" y="255.50">tcp_v4_do_rcv</text></g><g><title>tcp_rcv_established (38 samples, 8.68%)</title><rect x="10.2740%" y="229" width="8.6758%" height="15" fill="rgb(208,190,38)"/><text x="10.5240%" y="239.50">tcp_rcv_esta..</text></g><g><title>tcp_queue_rcv (2 samples, 0.46%)</title><rect x="18.4932%" y="213" width="0.4566%" height="15" fill="rgb(235,213,38)"/><text x="18.7432%" y="223.50"></text></g><g><title>ip_local_deliver (42 samples, 9.59%)</title><rect x="9.5890%" y="309" width="9.5890%" height="15" fill="rgb(237,122,38)"/><text x="9.8390%" y="319.50">ip_local_deliv..</text></g><g><title>ip_local_deliver_finish (42 samples, 9.59%)</title><rect x="9.5890%" y="293" width="9.5890%" height="15" fill="rgb(244,218,35)"/><text x="9.8390%" y="303.50">ip_local_deliv..</text></g><g><title>ip_protocol_deliver_rcu (42 samples, 9.59%)</title><rect x="9.5890%" y="277" width="9.5890%" height="15" fill="rgb(240,68,47)"/><text x="9.8390%" y="287.50">ip_protocol_de..</text></g><g><title>tcp_v4_rcv (41 samples, 9.36%)</title><rect x="9.8174%" y="261" width="9.3607%" height="15" fill="rgb(210,16,53)"/><text x="10.0674%" y="271.50">tcp_v4_rcv</text></g><g><title>tcp_v4_fill_cb (1 samples, 0.23%)</title><rect x="18.9498%" y="245" width="0.2283%" height="15" fill="rgb(235,124,12)"/><text x="19.1998%" y="255.50"></text></g><g><title>ip_rcv_core (1 samples, 0.23%)</title><rect x="19.1781%" y="309" width="0.2283%" height="15" fill="rgb(224,169,11)"/><text x="19.4281%" y="319.50"></text></g><g><title>__ip_queue_xmit (72 samples, 16.44%)</title><rect x="3.6530%" y="485" width="16.4384%" height="15" fill="rgb(250,166,2)"/><text x="3.9030%" y="495.50">__ip_queue_xmit</text></g><g><title>ip_output (70 samples, 15.98%)</title><rect x="4.1096%" y="469" width="15.9817%" height="15" fill="rgb(242,216,29)"/><text x="4.3596%" y="479.50">ip_output</text></g><g><title>ip_finish_output2 (69 samples, 15.75%)</title><rect x="4.3379%" y="453" width="15.7534%" height="15" fill="rgb(230,116,27)"/><text x="4.5879%" y="463.50">ip_finish_output2</text></g><g><title>__local_bh_enable_ip (58 samples, 13.24%)</title><rect x="6.8493%" y="437" width="13.2420%" height="15" fill="rgb(228,99,48)"/><text x="7.0993%" y="447.50">__local_bh_enable_ip</text></g><g><title>do_softirq (58 samples, 13.24%)</title><rect x="6.8493%" y="421" width="13.2420%" height="15" fill="rgb(253,11,6)"/><text x="7.0993%" y="431.50">do_softirq</text></g><g><title>do_softirq_own_stack (56 samples, 12.79%)</title><rect x="7.3059%" y="405" width="12.7854%" height="15" fill="rgb(247,143,39)"/><text x="7.5559%" y="415.50">do_softirq_own_stack</text></g><g><title>__do_softirq (56 samples, 12.79%)</title><rect x="7.3059%" y="389" width="12.7854%" height="15" fill="rgb(236,97,10)"/><text x="7.5559%" y="399.50">__do_softirq</text></g><g><title>net_rx_action (56 samples, 12.79%)</title><rect x="7.3059%" y="373" width="12.7854%" height="15" fill="rgb(233,208,19)"/><text x="7.5559%" y="383.50">net_rx_action</text></g><g><title>process_backlog (54 samples, 12.33%)</title><rect x="7.7626%" y="357" width="12.3288%" height="15" fill="rgb(216,164,2)"/><text x="8.0126%" y="367.50">process_backlog</text></g><g><title>__netif_receive_skb_one_core (50 samples, 11.42%)</title><rect x="8.6758%" y="341" width="11.4155%" height="15" fill="rgb(220,129,5)"/><text x="8.9258%" y="351.50">__netif_receive_s..</text></g><g><title>ip_rcv (46 samples, 10.50%)</title><rect x="9.5890%" y="325" width="10.5023%" height="15" fill="rgb(242,17,10)"/><text x="9.8390%" y="335.50">ip_rcv</text></g><g><title>ip_rcv_finish (3 samples, 0.68%)</title><rect x="19.4064%" y="309" width="0.6849%" height="15" fill="rgb(242,107,0)"/><text x="19.6564%" y="319.50"></text></g><g><title>ip_rcv_finish_core.constprop.0 (2 samples, 0.46%)</title><rect x="19.6347%" y="293" width="0.4566%" height="15" fill="rgb(251,28,31)"/><text x="19.8847%" y="303.50"></text></g><g><title>skb_clone (1 samples, 0.23%)</title><rect x="20.0913%" y="485" width="0.2283%" height="15" fill="rgb(233,223,10)"/><text x="20.3413%" y="495.50"></text></g><g><title>__copy_skb_header (1 samples, 0.23%)</title><rect x="20.0913%" y="469" width="0.2283%" height="15" fill="rgb(215,21,27)"/><text x="20.3413%" y="479.50"></text></g><g><title>__tcp_transmit_skb (75 samples, 17.12%)</title><rect x="3.4247%" y="501" width="17.1233%" height="15" fill="rgb(232,23,21)"/><text x="3.6747%" y="511.50">__tcp_transmit_skb</text></g><g><title>tcp_v4_send_check (1 samples, 0.23%)</title><rect x="20.3196%" y="485" width="0.2283%" height="15" fill="rgb(244,5,23)"/><text x="20.5696%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (77 samples, 17.58%)</title><rect x="3.4247%" y="533" width="17.5799%" height="15" fill="rgb(226,81,46)"/><text x="3.6747%" y="543.50">__tcp_push_pending_frames</text></g><g><title>tcp_write_xmit (77 samples, 17.58%)</title><rect x="3.4247%" y="517" width="17.5799%" height="15" fill="rgb(247,70,30)"/><text x="3.6747%" y="527.50">tcp_write_xmit</text></g><g><title>tcp_schedule_loss_probe.part.0 (2 samples, 0.46%)</title><rect x="20.5479%" y="501" width="0.4566%" height="15" fill="rgb(212,68,19)"/><text x="20.7979%" y="511.50"></text></g><g><title>sk_reset_timer (2 samples, 0.46%)</title><rect x="20.5479%" y="485" width="0.4566%" height="15" fill="rgb(240,187,13)"/><text x="20.7979%" y="495.50"></text></g><g><title>__mod_timer (1 samples, 0.23%)</title><rect x="20.7763%" y="469" width="0.2283%" height="15" fill="rgb(223,113,26)"/><text x="21.0263%" y="479.50"></text></g><g><title>sk_page_frag_refill (1 samples, 0.23%)</title><rect x="21.0046%" y="533" width="0.2283%" height="15" fill="rgb(206,192,2)"/><text x="21.2546%" y="543.50"></text></g><g><title>memcg_kmem_put_cache (1 samples, 0.23%)</title><rect x="21.2329%" y="485" width="0.2283%" height="15" fill="rgb(241,108,4)"/><text x="21.4829%" y="495.50"></text></g><g><title>__kmalloc_node_track_caller (2 samples, 0.46%)</title><rect x="21.2329%" y="501" width="0.4566%" height="15" fill="rgb(247,173,49)"/><text x="21.4829%" y="511.50"></text></g><g><title>memset_erms (1 samples, 0.23%)</title><rect x="21.4612%" y="485" width="0.2283%" height="15" fill="rgb(224,114,35)"/><text x="21.7112%" y="495.50"></text></g><g><title>sk_stream_alloc_skb (3 samples, 0.68%)</title><rect x="21.2329%" y="533" width="0.6849%" height="15" fill="rgb(245,159,27)"/><text x="21.4829%" y="543.50"></text></g><g><title>__alloc_skb (3 samples, 0.68%)</title><rect x="21.2329%" y="517" width="0.6849%" height="15" fill="rgb(245,172,44)"/><text x="21.4829%" y="527.50"></text></g><g><title>__ksize (1 samples, 0.23%)</title><rect x="21.6895%" y="501" width="0.2283%" height="15" fill="rgb(236,23,11)"/><text x="21.9395%" y="511.50"></text></g><g><title>skb_do_copy_data_nocache (1 samples, 0.23%)</title><rect x="21.9178%" y="533" width="0.2283%" height="15" fill="rgb(205,117,38)"/><text x="22.1678%" y="543.50"></text></g><g><title>__check_object_size (1 samples, 0.23%)</title><rect x="21.9178%" y="517" width="0.2283%" height="15" fill="rgb(237,72,25)"/><text x="22.1678%" y="527.50"></text></g><g><title>skb_entail (1 samples, 0.23%)</title><rect x="22.1461%" y="533" width="0.2283%" height="15" fill="rgb(244,70,9)"/><text x="22.3961%" y="543.50"></text></g><g><title>sock_sendmsg (91 samples, 20.78%)</title><rect x="1.8265%" y="581" width="20.7763%" height="15" fill="rgb(217,125,39)"/><text x="2.0765%" y="591.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (89 samples, 20.32%)</title><rect x="2.2831%" y="565" width="20.3196%" height="15" fill="rgb(235,36,10)"/><text x="2.5331%" y="575.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (86 samples, 19.63%)</title><rect x="2.9680%" y="549" width="19.6347%" height="15" fill="rgb(251,123,47)"/><text x="3.2180%" y="559.50">tcp_sendmsg_locked</text></g><g><title>tcp_send_mss (1 samples, 0.23%)</title><rect x="22.3744%" y="533" width="0.2283%" height="15" fill="rgb(221,13,13)"/><text x="22.6244%" y="543.50"></text></g><g><title>tcp_current_mss (1 samples, 0.23%)</title><rect x="22.3744%" y="517" width="0.2283%" height="15" fill="rgb(238,131,9)"/><text x="22.6244%" y="527.50"></text></g><g><title>ipv4_mtu (1 samples, 0.23%)</title><rect x="22.3744%" y="501" width="0.2283%" height="15" fill="rgb(211,50,8)"/><text x="22.6244%" y="511.50"></text></g><g><title>__x64_sys_sendto (93 samples, 21.23%)</title><rect x="1.8265%" y="613" width="21.2329%" height="15" fill="rgb(245,182,24)"/><text x="2.0765%" y="623.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (93 samples, 21.23%)</title><rect x="1.8265%" y="597" width="21.2329%" height="15" fill="rgb(242,14,37)"/><text x="2.0765%" y="607.50">__sys_sendto</text></g><g><title>sockfd_lookup_light (2 samples, 0.46%)</title><rect x="22.6027%" y="581" width="0.4566%" height="15" fill="rgb(246,228,12)"/><text x="22.8527%" y="591.50"></text></g><g><title>__fget_light (2 samples, 0.46%)</title><rect x="22.6027%" y="565" width="0.4566%" height="15" fill="rgb(213,55,15)"/><text x="22.8527%" y="575.50"></text></g><g><title>syscall_slow_exit_work (1 samples, 0.23%)</title><rect x="23.0594%" y="613" width="0.2283%" height="15" fill="rgb(209,9,3)"/><text x="23.3094%" y="623.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.23%)</title><rect x="23.0594%" y="597" width="0.2283%" height="15" fill="rgb(230,59,30)"/><text x="23.3094%" y="607.50"></text></g><g><title>do_syscall_64 (95 samples, 21.69%)</title><rect x="1.8265%" y="629" width="21.6895%" height="15" fill="rgb(209,121,21)"/><text x="2.0765%" y="639.50">do_syscall_64</text></g><g><title>syscall_trace_enter (1 samples, 0.23%)</title><rect x="23.2877%" y="613" width="0.2283%" height="15" fill="rgb(220,109,13)"/><text x="23.5377%" y="623.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.23%)</title><rect x="23.2877%" y="597" width="0.2283%" height="15" fill="rgb(232,18,1)"/><text x="23.5377%" y="607.50"></text></g><g><title>entry_SYSCALL_64 (97 samples, 22.15%)</title><rect x="1.8265%" y="645" width="22.1461%" height="15" fill="rgb(215,41,42)"/><text x="2.0765%" y="655.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.46%)</title><rect x="23.5160%" y="629" width="0.4566%" height="15" fill="rgb(224,123,36)"/><text x="23.7660%" y="639.50"></text></g><g><title>__libc_start_main (100 samples, 22.83%)</title><rect x="1.3699%" y="917" width="22.8311%" height="15" fill="rgb(240,125,3)"/><text x="1.6199%" y="927.50">__libc_start_main</text></g><g><title>main (100 samples, 22.83%)</title><rect x="1.3699%" y="901" width="22.8311%" height="15" fill="rgb(205,98,50)"/><text x="1.6199%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (100 samples, 22.83%)</title><rect x="1.3699%" y="885" width="22.8311%" height="15" fill="rgb(205,185,37)"/><text x="1.6199%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (100 samples, 22.83%)</title><rect x="1.3699%" y="869" width="22.8311%" height="15" fill="rgb(238,207,15)"/><text x="1.6199%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (100 samples, 22.83%)</title><rect x="1.3699%" y="853" width="22.8311%" height="15" fill="rgb(213,199,42)"/><text x="1.6199%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (100 samples, 22.83%)</title><rect x="1.3699%" y="837" width="22.8311%" height="15" fill="rgb(235,201,11)"/><text x="1.6199%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (100 samples, 22.83%)</title><rect x="1.3699%" y="821" width="22.8311%" height="15" fill="rgb(207,46,11)"/><text x="1.6199%" y="831.50">core::ops::function::impls::&lt;impl co..</text></g><g><title>std::rt::lang_start::_{{closure}} (100 samples, 22.83%)</title><rect x="1.3699%" y="805" width="22.8311%" height="15" fill="rgb(241,35,35)"/><text x="1.6199%" y="815.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (100 samples, 22.83%)</title><rect x="1.3699%" y="789" width="22.8311%" height="15" fill="rgb(243,32,47)"/><text x="1.6199%" y="799.50">std::sys_common::backtrace::__rust_b..</text></g><g><title>lobsters::main (100 samples, 22.83%)</title><rect x="1.3699%" y="773" width="22.8311%" height="15" fill="rgb(247,202,23)"/><text x="1.6199%" y="783.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (100 samples, 22.83%)</title><rect x="1.3699%" y="757" width="22.8311%" height="15" fill="rgb(219,102,11)"/><text x="1.6199%" y="767.50">mysql::conn::queryable::Queryable::q..</text></g><g><title>mysql::conn::Conn::_query (100 samples, 22.83%)</title><rect x="1.3699%" y="741" width="22.8311%" height="15" fill="rgb(243,110,44)"/><text x="1.6199%" y="751.50">mysql::conn::Conn::_query</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (100 samples, 22.83%)</title><rect x="1.3699%" y="725" width="22.8311%" height="15" fill="rgb(222,74,54)"/><text x="1.6199%" y="735.50">mysql_common::proto::sync_framed::My..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (100 samples, 22.83%)</title><rect x="1.3699%" y="709" width="22.8311%" height="15" fill="rgb(216,99,12)"/><text x="1.6199%" y="719.50">std::io::buffered::BufWriter&lt;W&gt;::flu..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (100 samples, 22.83%)</title><rect x="1.3699%" y="693" width="22.8311%" height="15" fill="rgb(226,22,26)"/><text x="1.6199%" y="703.50">&lt;std::net::tcp::TcpStream as std::io..</text></g><g><title>std::sys_common::net::TcpStream::write (100 samples, 22.83%)</title><rect x="1.3699%" y="677" width="22.8311%" height="15" fill="rgb(217,163,10)"/><text x="1.6199%" y="687.50">std::sys_common::net::TcpStream::wri..</text></g><g><title>__libc_send (100 samples, 22.83%)</title><rect x="1.3699%" y="661" width="22.8311%" height="15" fill="rgb(213,25,53)"/><text x="1.6199%" y="671.50">__libc_send</text></g><g><title>syscall_return_via_sysret (1 samples, 0.23%)</title><rect x="23.9726%" y="645" width="0.2283%" height="15" fill="rgb(252,105,26)"/><text x="24.2226%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="24.2009%" y="917" width="0.2283%" height="15" fill="rgb(220,39,43)"/><text x="24.4509%" y="927.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="24.4292%" y="885" width="0.2283%" height="15" fill="rgb(229,68,48)"/><text x="24.6792%" y="895.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="24.4292%" y="869" width="0.2283%" height="15" fill="rgb(252,8,32)"/><text x="24.6792%" y="879.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="24.4292%" y="853" width="0.2283%" height="15" fill="rgb(223,20,43)"/><text x="24.6792%" y="863.50"></text></g><g><title>dlopen (1 samples, 0.23%)</title><rect x="24.4292%" y="837" width="0.2283%" height="15" fill="rgb(229,81,49)"/><text x="24.6792%" y="847.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.23%)</title><rect x="24.4292%" y="821" width="0.2283%" height="15" fill="rgb(236,28,36)"/><text x="24.6792%" y="831.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.23%)</title><rect x="24.4292%" y="805" width="0.2283%" height="15" fill="rgb(249,185,26)"/><text x="24.6792%" y="815.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.23%)</title><rect x="24.4292%" y="789" width="0.2283%" height="15" fill="rgb(249,174,33)"/><text x="24.6792%" y="799.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.23%)</title><rect x="24.4292%" y="773" width="0.2283%" height="15" fill="rgb(233,201,37)"/><text x="24.6792%" y="783.50"></text></g><g><title>_dl_open (1 samples, 0.23%)</title><rect x="24.4292%" y="757" width="0.2283%" height="15" fill="rgb(221,78,26)"/><text x="24.6792%" y="767.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.23%)</title><rect x="24.4292%" y="741" width="0.2283%" height="15" fill="rgb(250,127,30)"/><text x="24.6792%" y="751.50"></text></g><g><title>dl_open_worker (1 samples, 0.23%)</title><rect x="24.4292%" y="725" width="0.2283%" height="15" fill="rgb(230,49,44)"/><text x="24.6792%" y="735.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.23%)</title><rect x="24.4292%" y="709" width="0.2283%" height="15" fill="rgb(229,67,23)"/><text x="24.6792%" y="719.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.46%)</title><rect x="24.4292%" y="901" width="0.4566%" height="15" fill="rgb(249,83,47)"/><text x="24.6792%" y="911.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.23%)</title><rect x="24.6575%" y="885" width="0.2283%" height="15" fill="rgb(215,43,3)"/><text x="24.9075%" y="895.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="24.6575%" y="869" width="0.2283%" height="15" fill="rgb(238,154,13)"/><text x="24.9075%" y="879.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="24.6575%" y="853" width="0.2283%" height="15" fill="rgb(219,56,2)"/><text x="24.9075%" y="863.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="24.6575%" y="837" width="0.2283%" height="15" fill="rgb(233,0,4)"/><text x="24.9075%" y="847.50"></text></g><g><title>__GI___isoc99_sscanf (1 samples, 0.23%)</title><rect x="24.6575%" y="821" width="0.2283%" height="15" fill="rgb(235,30,7)"/><text x="24.9075%" y="831.50"></text></g><g><title>__vfscanf_internal (1 samples, 0.23%)</title><rect x="24.6575%" y="805" width="0.2283%" height="15" fill="rgb(250,79,13)"/><text x="24.9075%" y="815.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 0.23%)</title><rect x="24.8858%" y="885" width="0.2283%" height="15" fill="rgb(211,146,34)"/><text x="25.1358%" y="895.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.23%)</title><rect x="24.8858%" y="869" width="0.2283%" height="15" fill="rgb(228,22,38)"/><text x="25.1358%" y="879.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.23%)</title><rect x="24.8858%" y="853" width="0.2283%" height="15" fill="rgb(235,168,5)"/><text x="25.1358%" y="863.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.23%)</title><rect x="24.8858%" y="837" width="0.2283%" height="15" fill="rgb(221,155,16)"/><text x="25.1358%" y="847.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="24.8858%" y="821" width="0.2283%" height="15" fill="rgb(215,215,53)"/><text x="25.1358%" y="831.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.23%)</title><rect x="24.8858%" y="805" width="0.2283%" height="15" fill="rgb(223,4,10)"/><text x="25.1358%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.46%)</title><rect x="25.1142%" y="837" width="0.4566%" height="15" fill="rgb(234,103,6)"/><text x="25.3642%" y="847.50"></text></g><g><title>__rdl_alloc (2 samples, 0.46%)</title><rect x="25.1142%" y="821" width="0.4566%" height="15" fill="rgb(227,97,0)"/><text x="25.3642%" y="831.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.46%)</title><rect x="25.1142%" y="805" width="0.4566%" height="15" fill="rgb(234,150,53)"/><text x="25.3642%" y="815.50"></text></g><g><title>dst_release (1 samples, 0.23%)</title><rect x="26.9406%" y="597" width="0.2283%" height="15" fill="rgb(228,201,54)"/><text x="27.1906%" y="607.50"></text></g><g><title>__kfree_skb (2 samples, 0.46%)</title><rect x="26.9406%" y="629" width="0.4566%" height="15" fill="rgb(222,22,37)"/><text x="27.1906%" y="639.50"></text></g><g><title>skb_release_head_state (2 samples, 0.46%)</title><rect x="26.9406%" y="613" width="0.4566%" height="15" fill="rgb(237,53,32)"/><text x="27.1906%" y="623.50"></text></g><g><title>sock_rfree (1 samples, 0.23%)</title><rect x="27.1689%" y="597" width="0.2283%" height="15" fill="rgb(233,25,53)"/><text x="27.4189%" y="607.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.23%)</title><rect x="27.3973%" y="629" width="0.2283%" height="15" fill="rgb(210,40,34)"/><text x="27.6473%" y="639.50"></text></g><g><title>ns_to_timespec64 (1 samples, 0.23%)</title><rect x="27.6256%" y="629" width="0.2283%" height="15" fill="rgb(241,220,44)"/><text x="27.8756%" y="639.50"></text></g><g><title>release_sock (2 samples, 0.46%)</title><rect x="27.8539%" y="629" width="0.4566%" height="15" fill="rgb(235,28,35)"/><text x="28.1039%" y="639.50"></text></g><g><title>tcp_release_cb (2 samples, 0.46%)</title><rect x="27.8539%" y="613" width="0.4566%" height="15" fill="rgb(210,56,17)"/><text x="28.1039%" y="623.50"></text></g><g><title>_raw_spin_lock_bh (1 samples, 0.23%)</title><rect x="28.7671%" y="613" width="0.2283%" height="15" fill="rgb(224,130,29)"/><text x="29.0171%" y="623.50"></text></g><g><title>preempt_count_add (1 samples, 0.23%)</title><rect x="28.7671%" y="597" width="0.2283%" height="15" fill="rgb(235,212,8)"/><text x="29.0171%" y="607.50"></text></g><g><title>in_lock_functions (1 samples, 0.23%)</title><rect x="28.7671%" y="581" width="0.2283%" height="15" fill="rgb(223,33,50)"/><text x="29.0171%" y="591.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.23%)</title><rect x="28.9954%" y="613" width="0.2283%" height="15" fill="rgb(219,149,13)"/><text x="29.2454%" y="623.50"></text></g><g><title>preempt_count_sub (1 samples, 0.23%)</title><rect x="28.9954%" y="597" width="0.2283%" height="15" fill="rgb(250,156,29)"/><text x="29.2454%" y="607.50"></text></g><g><title>debug_smp_processor_id (1 samples, 0.23%)</title><rect x="30.8219%" y="517" width="0.2283%" height="15" fill="rgb(216,193,19)"/><text x="31.0719%" y="527.50"></text></g><g><title>__perf_event_task_sched_out (3 samples, 0.68%)</title><rect x="30.5936%" y="549" width="0.6849%" height="15" fill="rgb(216,135,14)"/><text x="30.8436%" y="559.50"></text></g><g><title>ctx_sched_out (3 samples, 0.68%)</title><rect x="30.5936%" y="533" width="0.6849%" height="15" fill="rgb(241,47,5)"/><text x="30.8436%" y="543.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.23%)</title><rect x="31.0502%" y="517" width="0.2283%" height="15" fill="rgb(233,42,35)"/><text x="31.3002%" y="527.50"></text></g><g><title>sched_clock (1 samples, 0.23%)</title><rect x="31.0502%" y="501" width="0.2283%" height="15" fill="rgb(231,13,6)"/><text x="31.3002%" y="511.50"></text></g><g><title>native_sched_clock (1 samples, 0.23%)</title><rect x="31.0502%" y="485" width="0.2283%" height="15" fill="rgb(207,181,40)"/><text x="31.3002%" y="495.50"></text></g><g><title>update_curr (2 samples, 0.46%)</title><rect x="31.2785%" y="517" width="0.4566%" height="15" fill="rgb(254,173,49)"/><text x="31.5285%" y="527.50"></text></g><g><title>__calc_delta (2 samples, 0.46%)</title><rect x="31.2785%" y="501" width="0.4566%" height="15" fill="rgb(221,1,38)"/><text x="31.5285%" y="511.50"></text></g><g><title>dequeue_task_fair (3 samples, 0.68%)</title><rect x="31.2785%" y="549" width="0.6849%" height="15" fill="rgb(206,124,46)"/><text x="31.5285%" y="559.50"></text></g><g><title>dequeue_entity (3 samples, 0.68%)</title><rect x="31.2785%" y="533" width="0.6849%" height="15" fill="rgb(249,21,11)"/><text x="31.5285%" y="543.50"></text></g><g><title>update_load_avg (1 samples, 0.23%)</title><rect x="31.7352%" y="517" width="0.2283%" height="15" fill="rgb(222,201,40)"/><text x="31.9852%" y="527.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.23%)</title><rect x="31.7352%" y="501" width="0.2283%" height="15" fill="rgb(235,61,29)"/><text x="31.9852%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (3 samples, 0.68%)</title><rect x="31.9635%" y="533" width="0.6849%" height="15" fill="rgb(219,207,3)"/><text x="32.2135%" y="543.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (2 samples, 0.46%)</title><rect x="32.1918%" y="517" width="0.4566%" height="15" fill="rgb(222,56,46)"/><text x="32.4418%" y="527.50"></text></g><g><title>native_write_msr (2 samples, 0.46%)</title><rect x="32.1918%" y="501" width="0.4566%" height="15" fill="rgb(239,76,54)"/><text x="32.4418%" y="511.50"></text></g><g><title>finish_task_switch (4 samples, 0.91%)</title><rect x="31.9635%" y="549" width="0.9132%" height="15" fill="rgb(231,124,27)"/><text x="32.2135%" y="559.50"></text></g><g><title>_raw_spin_unlock_irq (1 samples, 0.23%)</title><rect x="32.6484%" y="533" width="0.2283%" height="15" fill="rgb(249,195,6)"/><text x="32.8984%" y="543.50"></text></g><g><title>psi_task_change (4 samples, 0.91%)</title><rect x="32.8767%" y="549" width="0.9132%" height="15" fill="rgb(237,174,47)"/><text x="33.1267%" y="559.50"></text></g><g><title>psi_group_change (4 samples, 0.91%)</title><rect x="32.8767%" y="533" width="0.9132%" height="15" fill="rgb(206,201,31)"/><text x="33.1267%" y="543.50"></text></g><g><title>record_times (4 samples, 0.91%)</title><rect x="32.8767%" y="517" width="0.9132%" height="15" fill="rgb(231,57,52)"/><text x="33.1267%" y="527.50"></text></g><g><title>sched_clock_cpu (2 samples, 0.46%)</title><rect x="33.3333%" y="501" width="0.4566%" height="15" fill="rgb(248,177,22)"/><text x="33.5833%" y="511.50"></text></g><g><title>sched_clock (2 samples, 0.46%)</title><rect x="33.3333%" y="485" width="0.4566%" height="15" fill="rgb(215,211,37)"/><text x="33.5833%" y="495.50"></text></g><g><title>native_sched_clock (1 samples, 0.23%)</title><rect x="33.5616%" y="469" width="0.2283%" height="15" fill="rgb(241,128,51)"/><text x="33.8116%" y="479.50"></text></g><g><title>put_prev_task_fair (1 samples, 0.23%)</title><rect x="33.7900%" y="549" width="0.2283%" height="15" fill="rgb(227,165,31)"/><text x="34.0400%" y="559.50"></text></g><g><title>put_prev_entity (1 samples, 0.23%)</title><rect x="33.7900%" y="533" width="0.2283%" height="15" fill="rgb(228,167,24)"/><text x="34.0400%" y="543.50"></text></g><g><title>uclamp_rq_dec_id (5 samples, 1.14%)</title><rect x="34.0183%" y="549" width="1.1416%" height="15" fill="rgb(228,143,12)"/><text x="34.2683%" y="559.50"></text></g><g><title>sk_wait_data (32 samples, 7.31%)</title><rect x="28.3105%" y="629" width="7.3059%" height="15" fill="rgb(249,149,8)"/><text x="28.5605%" y="639.50">sk_wait_da..</text></g><g><title>wait_woken (28 samples, 6.39%)</title><rect x="29.2237%" y="613" width="6.3927%" height="15" fill="rgb(243,35,44)"/><text x="29.4737%" y="623.50">wait_wok..</text></g><g><title>schedule_timeout (25 samples, 5.71%)</title><rect x="29.9087%" y="597" width="5.7078%" height="15" fill="rgb(246,89,9)"/><text x="30.1587%" y="607.50">schedul..</text></g><g><title>schedule (25 samples, 5.71%)</title><rect x="29.9087%" y="581" width="5.7078%" height="15" fill="rgb(233,213,13)"/><text x="30.1587%" y="591.50">schedule</text></g><g><title>__schedule (24 samples, 5.48%)</title><rect x="30.1370%" y="565" width="5.4795%" height="15" fill="rgb(233,141,41)"/><text x="30.3870%" y="575.50">__sched..</text></g><g><title>update_rq_clock (2 samples, 0.46%)</title><rect x="35.1598%" y="549" width="0.4566%" height="15" fill="rgb(239,167,4)"/><text x="35.4098%" y="559.50"></text></g><g><title>update_irq_load_avg (2 samples, 0.46%)</title><rect x="35.1598%" y="533" width="0.4566%" height="15" fill="rgb(209,217,16)"/><text x="35.4098%" y="543.50"></text></g><g><title>skb_copy_datagram_iter (1 samples, 0.23%)</title><rect x="35.6164%" y="629" width="0.2283%" height="15" fill="rgb(219,88,35)"/><text x="35.8664%" y="639.50"></text></g><g><title>__skb_datagram_iter (1 samples, 0.23%)</title><rect x="35.6164%" y="613" width="0.2283%" height="15" fill="rgb(220,193,23)"/><text x="35.8664%" y="623.50"></text></g><g><title>_copy_to_iter (1 samples, 0.23%)</title><rect x="35.6164%" y="597" width="0.2283%" height="15" fill="rgb(230,90,52)"/><text x="35.8664%" y="607.50"></text></g><g><title>copy_user_generic_unrolled (1 samples, 0.23%)</title><rect x="35.6164%" y="581" width="0.2283%" height="15" fill="rgb(252,106,19)"/><text x="35.8664%" y="591.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="35.6164%" y="565" width="0.2283%" height="15" fill="rgb(206,74,20)"/><text x="35.8664%" y="575.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="35.6164%" y="549" width="0.2283%" height="15" fill="rgb(230,138,44)"/><text x="35.8664%" y="559.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="35.6164%" y="533" width="0.2283%" height="15" fill="rgb(235,182,43)"/><text x="35.8664%" y="543.50"></text></g><g><title>__x64_sys_recvfrom (44 samples, 10.05%)</title><rect x="26.0274%" y="693" width="10.0457%" height="15" fill="rgb(242,16,51)"/><text x="26.2774%" y="703.50">__x64_sys_recvf..</text></g><g><title>__sys_recvfrom (44 samples, 10.05%)</title><rect x="26.0274%" y="677" width="10.0457%" height="15" fill="rgb(248,9,4)"/><text x="26.2774%" y="687.50">__sys_recvfrom</text></g><g><title>inet_recvmsg (43 samples, 9.82%)</title><rect x="26.2557%" y="661" width="9.8174%" height="15" fill="rgb(210,31,22)"/><text x="26.5057%" y="671.50">inet_recvmsg</text></g><g><title>tcp_recvmsg (43 samples, 9.82%)</title><rect x="26.2557%" y="645" width="9.8174%" height="15" fill="rgb(239,54,39)"/><text x="26.5057%" y="655.50">tcp_recvmsg</text></g><g><title>tcp_rcv_space_adjust (1 samples, 0.23%)</title><rect x="35.8447%" y="629" width="0.2283%" height="15" fill="rgb(230,99,41)"/><text x="36.0947%" y="639.50"></text></g><g><title>tcp_mstamp_refresh (1 samples, 0.23%)</title><rect x="35.8447%" y="613" width="0.2283%" height="15" fill="rgb(253,106,12)"/><text x="36.0947%" y="623.50"></text></g><g><title>ktime_get (1 samples, 0.23%)</title><rect x="35.8447%" y="597" width="0.2283%" height="15" fill="rgb(213,46,41)"/><text x="36.0947%" y="607.50"></text></g><g><title>read_tsc (1 samples, 0.23%)</title><rect x="35.8447%" y="581" width="0.2283%" height="15" fill="rgb(215,133,35)"/><text x="36.0947%" y="591.50"></text></g><g><title>do_syscall_64 (48 samples, 10.96%)</title><rect x="26.0274%" y="709" width="10.9589%" height="15" fill="rgb(213,28,5)"/><text x="26.2774%" y="719.50">do_syscall_64</text></g><g><title>syscall_trace_enter (4 samples, 0.91%)</title><rect x="36.0731%" y="693" width="0.9132%" height="15" fill="rgb(215,77,49)"/><text x="36.3231%" y="703.50"></text></g><g><title>__audit_syscall_entry (2 samples, 0.46%)</title><rect x="36.5297%" y="677" width="0.4566%" height="15" fill="rgb(248,100,22)"/><text x="36.7797%" y="687.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (52 samples, 11.87%)</title><rect x="25.5708%" y="821" width="11.8721%" height="15" fill="rgb(208,67,9)"/><text x="25.8208%" y="831.50">&lt;std::io::buffered..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (52 samples, 11.87%)</title><rect x="25.5708%" y="805" width="11.8721%" height="15" fill="rgb(219,133,21)"/><text x="25.8208%" y="815.50">&lt;std::net::tcp::Tc..</text></g><g><title>std::sys_common::net::TcpStream::read (52 samples, 11.87%)</title><rect x="25.5708%" y="789" width="11.8721%" height="15" fill="rgb(246,46,29)"/><text x="25.8208%" y="799.50">std::sys_common::n..</text></g><g><title>std::sys::unix::net::Socket::read (52 samples, 11.87%)</title><rect x="25.5708%" y="773" width="11.8721%" height="15" fill="rgb(246,185,52)"/><text x="25.8208%" y="783.50">std::sys::unix::ne..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (52 samples, 11.87%)</title><rect x="25.5708%" y="757" width="11.8721%" height="15" fill="rgb(252,136,11)"/><text x="25.8208%" y="767.50">std::sys::unix::ne..</text></g><g><title>__libc_recv (52 samples, 11.87%)</title><rect x="25.5708%" y="741" width="11.8721%" height="15" fill="rgb(219,138,53)"/><text x="25.8208%" y="751.50">__libc_recv</text></g><g><title>entry_SYSCALL_64 (51 samples, 11.64%)</title><rect x="25.7991%" y="725" width="11.6438%" height="15" fill="rgb(211,51,23)"/><text x="26.0491%" y="735.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.46%)</title><rect x="36.9863%" y="709" width="0.4566%" height="15" fill="rgb(247,221,28)"/><text x="37.2363%" y="719.50"></text></g><g><title>lobsters::main (58 samples, 13.24%)</title><rect x="24.4292%" y="917" width="13.2420%" height="15" fill="rgb(251,222,45)"/><text x="24.6792%" y="927.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (56 samples, 12.79%)</title><rect x="24.8858%" y="901" width="12.7854%" height="15" fill="rgb(217,162,53)"/><text x="25.1358%" y="911.50">mysql::conn::querya..</text></g><g><title>mysql::conn::Conn::_query (55 samples, 12.56%)</title><rect x="25.1142%" y="885" width="12.5571%" height="15" fill="rgb(229,93,14)"/><text x="25.3642%" y="895.50">mysql::conn::Conn::..</text></g><g><title>mysql::conn::Conn::handle_result_set (55 samples, 12.56%)</title><rect x="25.1142%" y="869" width="12.5571%" height="15" fill="rgb(209,67,49)"/><text x="25.3642%" y="879.50">mysql::conn::Conn::..</text></g><g><title>mysql::conn::Conn::read_packet (55 samples, 12.56%)</title><rect x="25.1142%" y="853" width="12.5571%" height="15" fill="rgb(213,87,29)"/><text x="25.3642%" y="863.50">mysql::conn::Conn::..</text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 12.10%)</title><rect x="25.5708%" y="837" width="12.1005%" height="15" fill="rgb(205,151,52)"/><text x="25.8208%" y="847.50">&lt;mysql_common::pro..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.23%)</title><rect x="37.4429%" y="821" width="0.2283%" height="15" fill="rgb(253,215,39)"/><text x="37.6929%" y="831.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.23%)</title><rect x="37.4429%" y="805" width="0.2283%" height="15" fill="rgb(221,220,41)"/><text x="37.6929%" y="815.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.23%)</title><rect x="37.4429%" y="789" width="0.2283%" height="15" fill="rgb(218,133,21)"/><text x="37.6929%" y="799.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.23%)</title><rect x="37.6712%" y="917" width="0.2283%" height="15" fill="rgb(221,193,43)"/><text x="37.9212%" y="927.50"></text></g><g><title>mysql_common::packets::parse_ok_packet (1 samples, 0.23%)</title><rect x="37.8995%" y="917" width="0.2283%" height="15" fill="rgb(240,128,52)"/><text x="38.1495%" y="927.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.23%)</title><rect x="38.1279%" y="917" width="0.2283%" height="15" fill="rgb(253,114,12)"/><text x="38.3779%" y="927.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.23%)</title><rect x="38.1279%" y="901" width="0.2283%" height="15" fill="rgb(215,223,47)"/><text x="38.3779%" y="911.50"></text></g><g><title>regex::compile::Compiler::c (1 samples, 0.23%)</title><rect x="38.1279%" y="885" width="0.2283%" height="15" fill="rgb(248,225,23)"/><text x="38.3779%" y="895.50"></text></g><g><title>regex::compile::Compiler::c_repeat_range (1 samples, 0.23%)</title><rect x="38.1279%" y="869" width="0.2283%" height="15" fill="rgb(250,108,0)"/><text x="38.3779%" y="879.50"></text></g><g><title>regex::compile::Compiler::c_concat (1 samples, 0.23%)</title><rect x="38.1279%" y="853" width="0.2283%" height="15" fill="rgb(228,208,7)"/><text x="38.3779%" y="863.50"></text></g><g><title>regex::compile::Compiler::c_class (1 samples, 0.23%)</title><rect x="38.1279%" y="837" width="0.2283%" height="15" fill="rgb(244,45,10)"/><text x="38.3779%" y="847.50"></text></g><g><title>regex::compile::Compiler::fill_split (1 samples, 0.23%)</title><rect x="38.1279%" y="821" width="0.2283%" height="15" fill="rgb(207,125,25)"/><text x="38.3779%" y="831.50"></text></g><g><title>handle_dots (1 samples, 0.23%)</title><rect x="38.3562%" y="565" width="0.2283%" height="15" fill="rgb(210,195,18)"/><text x="38.6062%" y="575.50"></text></g><g><title>step_into (1 samples, 0.23%)</title><rect x="38.3562%" y="549" width="0.2283%" height="15" fill="rgb(249,80,12)"/><text x="38.6062%" y="559.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.46%)</title><rect x="38.3562%" y="789" width="0.4566%" height="15" fill="rgb(221,65,9)"/><text x="38.6062%" y="799.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.46%)</title><rect x="38.3562%" y="773" width="0.4566%" height="15" fill="rgb(235,49,36)"/><text x="38.6062%" y="783.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="38.3562%" y="757" width="0.4566%" height="15" fill="rgb(225,32,20)"/><text x="38.6062%" y="767.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="38.3562%" y="741" width="0.4566%" height="15" fill="rgb(215,141,46)"/><text x="38.6062%" y="751.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="38.3562%" y="725" width="0.4566%" height="15" fill="rgb(250,160,47)"/><text x="38.6062%" y="735.50"></text></g><g><title>__GI___openat (2 samples, 0.46%)</title><rect x="38.3562%" y="709" width="0.4566%" height="15" fill="rgb(216,222,40)"/><text x="38.6062%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="38.3562%" y="693" width="0.4566%" height="15" fill="rgb(234,217,39)"/><text x="38.6062%" y="703.50"></text></g><g><title>do_syscall_64 (2 samples, 0.46%)</title><rect x="38.3562%" y="677" width="0.4566%" height="15" fill="rgb(207,178,40)"/><text x="38.6062%" y="687.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.46%)</title><rect x="38.3562%" y="661" width="0.4566%" height="15" fill="rgb(221,136,13)"/><text x="38.6062%" y="671.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.46%)</title><rect x="38.3562%" y="645" width="0.4566%" height="15" fill="rgb(249,199,10)"/><text x="38.6062%" y="655.50"></text></g><g><title>do_filp_open (2 samples, 0.46%)</title><rect x="38.3562%" y="629" width="0.4566%" height="15" fill="rgb(249,222,13)"/><text x="38.6062%" y="639.50"></text></g><g><title>path_openat (2 samples, 0.46%)</title><rect x="38.3562%" y="613" width="0.4566%" height="15" fill="rgb(244,185,38)"/><text x="38.6062%" y="623.50"></text></g><g><title>link_path_walk (2 samples, 0.46%)</title><rect x="38.3562%" y="597" width="0.4566%" height="15" fill="rgb(236,202,9)"/><text x="38.6062%" y="607.50"></text></g><g><title>walk_component (2 samples, 0.46%)</title><rect x="38.3562%" y="581" width="0.4566%" height="15" fill="rgb(250,229,37)"/><text x="38.6062%" y="591.50"></text></g><g><title>step_into (1 samples, 0.23%)</title><rect x="38.5845%" y="565" width="0.2283%" height="15" fill="rgb(206,174,23)"/><text x="38.8345%" y="575.50"></text></g><g><title>kernfs_iop_get_link (1 samples, 0.23%)</title><rect x="38.5845%" y="549" width="0.2283%" height="15" fill="rgb(211,33,43)"/><text x="38.8345%" y="559.50"></text></g><g><title>memcpy_erms (1 samples, 0.23%)</title><rect x="38.5845%" y="533" width="0.2283%" height="15" fill="rgb(245,58,50)"/><text x="38.8345%" y="543.50"></text></g><g><title>[unknown] (166 samples, 37.90%)</title><rect x="1.1416%" y="933" width="37.8995%" height="15" fill="rgb(244,68,36)"/><text x="1.3916%" y="943.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (3 samples, 0.68%)</title><rect x="38.3562%" y="917" width="0.6849%" height="15" fill="rgb(232,229,15)"/><text x="38.6062%" y="927.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.68%)</title><rect x="38.3562%" y="901" width="0.6849%" height="15" fill="rgb(254,30,23)"/><text x="38.6062%" y="911.50"></text></g><g><title>std::panicking::try (3 samples, 0.68%)</title><rect x="38.3562%" y="885" width="0.6849%" height="15" fill="rgb(235,160,14)"/><text x="38.6062%" y="895.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.68%)</title><rect x="38.3562%" y="869" width="0.6849%" height="15" fill="rgb(212,155,44)"/><text x="38.6062%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.68%)</title><rect x="38.3562%" y="853" width="0.6849%" height="15" fill="rgb(226,2,50)"/><text x="38.6062%" y="863.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.68%)</title><rect x="38.3562%" y="837" width="0.6849%" height="15" fill="rgb(234,177,6)"/><text x="38.6062%" y="847.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.68%)</title><rect x="38.3562%" y="821" width="0.6849%" height="15" fill="rgb(217,24,9)"/><text x="38.6062%" y="831.50"></text></g><g><title>lobsters::main (3 samples, 0.68%)</title><rect x="38.3562%" y="805" width="0.6849%" height="15" fill="rgb(220,13,46)"/><text x="38.6062%" y="815.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.23%)</title><rect x="38.8128%" y="789" width="0.2283%" height="15" fill="rgb(239,221,27)"/><text x="39.0628%" y="799.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.23%)</title><rect x="38.8128%" y="773" width="0.2283%" height="15" fill="rgb(222,198,25)"/><text x="39.0628%" y="783.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="38.8128%" y="757" width="0.2283%" height="15" fill="rgb(211,99,13)"/><text x="39.0628%" y="767.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="38.8128%" y="741" width="0.2283%" height="15" fill="rgb(232,111,31)"/><text x="39.0628%" y="751.50"></text></g><g><title>__GI___libc_free (1 samples, 0.23%)</title><rect x="39.2694%" y="757" width="0.2283%" height="15" fill="rgb(245,82,37)"/><text x="39.5194%" y="767.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.23%)</title><rect x="39.4977%" y="757" width="0.2283%" height="15" fill="rgb(227,149,46)"/><text x="39.7477%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.23%)</title><rect x="39.4977%" y="741" width="0.2283%" height="15" fill="rgb(218,36,50)"/><text x="39.7477%" y="751.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="39.4977%" y="725" width="0.2283%" height="15" fill="rgb(226,80,48)"/><text x="39.7477%" y="735.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.23%)</title><rect x="39.4977%" y="709" width="0.2283%" height="15" fill="rgb(238,224,15)"/><text x="39.7477%" y="719.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.23%)</title><rect x="39.4977%" y="693" width="0.2283%" height="15" fill="rgb(241,136,10)"/><text x="39.7477%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.23%)</title><rect x="39.7260%" y="757" width="0.2283%" height="15" fill="rgb(208,32,45)"/><text x="39.9760%" y="767.50"></text></g><g><title>hwloc_topology_destroy (1 samples, 0.23%)</title><rect x="39.7260%" y="741" width="0.2283%" height="15" fill="rgb(207,135,9)"/><text x="39.9760%" y="751.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="39.7260%" y="725" width="0.2283%" height="15" fill="rgb(206,86,44)"/><text x="39.9760%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="39.7260%" y="709" width="0.2283%" height="15" fill="rgb(245,177,15)"/><text x="39.9760%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="39.7260%" y="693" width="0.2283%" height="15" fill="rgb(206,64,50)"/><text x="39.9760%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="39.7260%" y="677" width="0.2283%" height="15" fill="rgb(234,36,40)"/><text x="39.9760%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="39.7260%" y="661" width="0.2283%" height="15" fill="rgb(213,64,8)"/><text x="39.9760%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="39.7260%" y="645" width="0.2283%" height="15" fill="rgb(210,75,36)"/><text x="39.9760%" y="655.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="39.7260%" y="629" width="0.2283%" height="15" fill="rgb(229,88,21)"/><text x="39.9760%" y="639.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="39.7260%" y="613" width="0.2283%" height="15" fill="rgb(252,204,47)"/><text x="39.9760%" y="623.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="39.9543%" y="677" width="0.4566%" height="15" fill="rgb(208,77,27)"/><text x="40.2043%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="39.9543%" y="661" width="0.4566%" height="15" fill="rgb(221,76,26)"/><text x="40.2043%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="40.1826%" y="645" width="0.2283%" height="15" fill="rgb(225,139,18)"/><text x="40.4326%" y="655.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="40.1826%" y="629" width="0.2283%" height="15" fill="rgb(230,137,11)"/><text x="40.4326%" y="639.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="40.1826%" y="613" width="0.2283%" height="15" fill="rgb(212,28,1)"/><text x="40.4326%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="40.1826%" y="597" width="0.2283%" height="15" fill="rgb(248,164,17)"/><text x="40.4326%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.23%)</title><rect x="40.1826%" y="581" width="0.2283%" height="15" fill="rgb(222,171,42)"/><text x="40.4326%" y="591.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="40.1826%" y="565" width="0.2283%" height="15" fill="rgb(243,84,45)"/><text x="40.4326%" y="575.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="40.1826%" y="549" width="0.2283%" height="15" fill="rgb(252,49,23)"/><text x="40.4326%" y="559.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="40.1826%" y="533" width="0.2283%" height="15" fill="rgb(215,19,7)"/><text x="40.4326%" y="543.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="40.1826%" y="517" width="0.2283%" height="15" fill="rgb(238,81,41)"/><text x="40.4326%" y="527.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.23%)</title><rect x="40.1826%" y="501" width="0.2283%" height="15" fill="rgb(210,199,37)"/><text x="40.4326%" y="511.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.23%)</title><rect x="40.1826%" y="485" width="0.2283%" height="15" fill="rgb(244,192,49)"/><text x="40.4326%" y="495.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.23%)</title><rect x="40.1826%" y="469" width="0.2283%" height="15" fill="rgb(226,211,11)"/><text x="40.4326%" y="479.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.23%)</title><rect x="40.4110%" y="661" width="0.2283%" height="15" fill="rgb(236,162,54)"/><text x="40.6610%" y="671.50"></text></g><g><title>__GI___libc_free (2 samples, 0.46%)</title><rect x="40.6393%" y="661" width="0.4566%" height="15" fill="rgb(220,229,9)"/><text x="40.8893%" y="671.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (229 samples, 52.28%)</title><rect x="42.2374%" y="453" width="52.2831%" height="15" fill="rgb(250,87,22)"/><text x="42.4874%" y="463.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (228 samples, 52.05%)</title><rect x="42.4658%" y="437" width="52.0548%" height="15" fill="rgb(239,43,17)"/><text x="42.7158%" y="447.50">native_write_msr</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 53.42%)</title><rect x="41.5525%" y="613" width="53.4247%" height="15" fill="rgb(231,177,25)"/><text x="41.8025%" y="623.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (234 samples, 53.42%)</title><rect x="41.5525%" y="597" width="53.4247%" height="15" fill="rgb(219,179,1)"/><text x="41.8025%" y="607.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 53.42%)</title><rect x="41.5525%" y="581" width="53.4247%" height="15" fill="rgb(238,219,53)"/><text x="41.8025%" y="591.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (234 samples, 53.42%)</title><rect x="41.5525%" y="565" width="53.4247%" height="15" fill="rgb(232,167,36)"/><text x="41.8025%" y="575.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (233 samples, 53.20%)</title><rect x="41.7808%" y="549" width="53.1963%" height="15" fill="rgb(244,19,51)"/><text x="42.0308%" y="559.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (233 samples, 53.20%)</title><rect x="41.7808%" y="533" width="53.1963%" height="15" fill="rgb(224,6,22)"/><text x="42.0308%" y="543.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (233 samples, 53.20%)</title><rect x="41.7808%" y="517" width="53.1963%" height="15" fill="rgb(224,145,5)"/><text x="42.0308%" y="527.50">preempt_schedule_common</text></g><g><title>__schedule (233 samples, 53.20%)</title><rect x="41.7808%" y="501" width="53.1963%" height="15" fill="rgb(234,130,49)"/><text x="42.0308%" y="511.50">__schedule</text></g><g><title>finish_task_switch (233 samples, 53.20%)</title><rect x="41.7808%" y="485" width="53.1963%" height="15" fill="rgb(254,6,2)"/><text x="42.0308%" y="495.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (233 samples, 53.20%)</title><rect x="41.7808%" y="469" width="53.1963%" height="15" fill="rgb(208,96,46)"/><text x="42.0308%" y="479.50">__perf_event_task_sched_in</text></g><g><title>_raw_spin_unlock (2 samples, 0.46%)</title><rect x="94.5205%" y="453" width="0.4566%" height="15" fill="rgb(239,3,39)"/><text x="94.7705%" y="463.50"></text></g><g><title>preempt_count_sub (1 samples, 0.23%)</title><rect x="94.7489%" y="437" width="0.2283%" height="15" fill="rgb(233,210,1)"/><text x="94.9989%" y="447.50"></text></g><g><title>entry_SYSCALL_64 (235 samples, 53.65%)</title><rect x="41.5525%" y="645" width="53.6530%" height="15" fill="rgb(244,137,37)"/><text x="41.8025%" y="655.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (235 samples, 53.65%)</title><rect x="41.5525%" y="629" width="53.6530%" height="15" fill="rgb(240,136,2)"/><text x="41.8025%" y="639.50">do_syscall_64</text></g><g><title>syscall_slow_exit_work (1 samples, 0.23%)</title><rect x="94.9772%" y="613" width="0.2283%" height="15" fill="rgb(239,18,37)"/><text x="95.2272%" y="623.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.23%)</title><rect x="94.9772%" y="597" width="0.2283%" height="15" fill="rgb(218,185,22)"/><text x="95.2272%" y="607.50"></text></g><g><title>mntput (1 samples, 0.23%)</title><rect x="94.9772%" y="581" width="0.2283%" height="15" fill="rgb(225,218,4)"/><text x="95.2272%" y="591.50"></text></g><g><title>[libhwloc.so.15.2.0] (243 samples, 55.48%)</title><rect x="39.9543%" y="693" width="55.4795%" height="15" fill="rgb(230,182,32)"/><text x="40.2043%" y="703.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (241 samples, 55.02%)</title><rect x="40.4110%" y="677" width="55.0228%" height="15" fill="rgb(242,56,43)"/><text x="40.6610%" y="687.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (238 samples, 54.34%)</title><rect x="41.0959%" y="661" width="54.3379%" height="15" fill="rgb(233,99,24)"/><text x="41.3459%" y="671.50">__GI___sched_setaffinity_new</text></g><g><title>syscall_return_via_sysret (1 samples, 0.23%)</title><rect x="95.2055%" y="645" width="0.2283%" height="15" fill="rgb(234,209,42)"/><text x="95.4555%" y="655.50"></text></g><g><title>hwloc::Topology::new (244 samples, 55.71%)</title><rect x="39.9543%" y="757" width="55.7078%" height="15" fill="rgb(227,7,12)"/><text x="40.2043%" y="767.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (244 samples, 55.71%)</title><rect x="39.9543%" y="741" width="55.7078%" height="15" fill="rgb(245,203,43)"/><text x="40.2043%" y="751.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (244 samples, 55.71%)</title><rect x="39.9543%" y="725" width="55.7078%" height="15" fill="rgb(238,205,33)"/><text x="40.2043%" y="735.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (244 samples, 55.71%)</title><rect x="39.9543%" y="709" width="55.7078%" height="15" fill="rgb(231,56,7)"/><text x="40.2043%" y="719.50">[libhwloc.so.15.2.0]</text></g><g><title>fgets (1 samples, 0.23%)</title><rect x="95.4338%" y="693" width="0.2283%" height="15" fill="rgb(244,186,29)"/><text x="95.6838%" y="703.50"></text></g><g><title>__GI__IO_getline_info (1 samples, 0.23%)</title><rect x="95.4338%" y="677" width="0.2283%" height="15" fill="rgb(234,111,31)"/><text x="95.6838%" y="687.50"></text></g><g><title>__GI__IO_default_uflow (1 samples, 0.23%)</title><rect x="95.4338%" y="661" width="0.2283%" height="15" fill="rgb(241,149,10)"/><text x="95.6838%" y="671.50"></text></g><g><title>__GI__IO_file_underflow (1 samples, 0.23%)</title><rect x="95.4338%" y="645" width="0.2283%" height="15" fill="rgb(249,206,44)"/><text x="95.6838%" y="655.50"></text></g><g><title>__GI___read (1 samples, 0.23%)</title><rect x="95.4338%" y="629" width="0.2283%" height="15" fill="rgb(251,153,30)"/><text x="95.6838%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="95.4338%" y="613" width="0.2283%" height="15" fill="rgb(239,152,38)"/><text x="95.6838%" y="623.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="95.4338%" y="597" width="0.2283%" height="15" fill="rgb(249,139,47)"/><text x="95.6838%" y="607.50"></text></g><g><title>ksys_read (1 samples, 0.23%)</title><rect x="95.4338%" y="581" width="0.2283%" height="15" fill="rgb(244,64,35)"/><text x="95.6838%" y="591.50"></text></g><g><title>vfs_read (1 samples, 0.23%)</title><rect x="95.4338%" y="565" width="0.2283%" height="15" fill="rgb(216,46,15)"/><text x="95.6838%" y="575.50"></text></g><g><title>seq_read (1 samples, 0.23%)</title><rect x="95.4338%" y="549" width="0.2283%" height="15" fill="rgb(250,74,19)"/><text x="95.6838%" y="559.50"></text></g><g><title>show_cpuinfo (1 samples, 0.23%)</title><rect x="95.4338%" y="533" width="0.2283%" height="15" fill="rgb(249,42,33)"/><text x="95.6838%" y="543.50"></text></g><g><title>seq_printf (1 samples, 0.23%)</title><rect x="95.4338%" y="517" width="0.2283%" height="15" fill="rgb(242,149,17)"/><text x="95.6838%" y="527.50"></text></g><g><title>vsnprintf (1 samples, 0.23%)</title><rect x="95.4338%" y="501" width="0.2283%" height="15" fill="rgb(244,29,21)"/><text x="95.6838%" y="511.50"></text></g><g><title>format_decode (1 samples, 0.23%)</title><rect x="95.4338%" y="485" width="0.2283%" height="15" fill="rgb(220,130,37)"/><text x="95.6838%" y="495.50"></text></g><g><title>lobsters::init_database (1 samples, 0.23%)</title><rect x="95.6621%" y="757" width="0.2283%" height="15" fill="rgb(211,67,2)"/><text x="95.9121%" y="767.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.23%)</title><rect x="95.6621%" y="741" width="0.2283%" height="15" fill="rgb(235,68,52)"/><text x="95.9121%" y="751.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.23%)</title><rect x="95.6621%" y="725" width="0.2283%" height="15" fill="rgb(246,142,3)"/><text x="95.9121%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="95.6621%" y="709" width="0.2283%" height="15" fill="rgb(241,25,7)"/><text x="95.9121%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.23%)</title><rect x="95.6621%" y="693" width="0.2283%" height="15" fill="rgb(242,119,39)"/><text x="95.9121%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.23%)</title><rect x="95.6621%" y="677" width="0.2283%" height="15" fill="rgb(241,98,45)"/><text x="95.9121%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.23%)</title><rect x="95.6621%" y="661" width="0.2283%" height="15" fill="rgb(254,28,30)"/><text x="95.9121%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.23%)</title><rect x="95.6621%" y="645" width="0.2283%" height="15" fill="rgb(241,142,54)"/><text x="95.9121%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.23%)</title><rect x="95.6621%" y="629" width="0.2283%" height="15" fill="rgb(222,85,15)"/><text x="95.9121%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.23%)</title><rect x="95.6621%" y="613" width="0.2283%" height="15" fill="rgb(210,85,47)"/><text x="95.9121%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="95.6621%" y="597" width="0.2283%" height="15" fill="rgb(224,206,25)"/><text x="95.9121%" y="607.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="96.3470%" y="725" width="0.2283%" height="15" fill="rgb(243,201,19)"/><text x="96.5970%" y="735.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (5 samples, 1.14%)</title><rect x="95.8904%" y="757" width="1.1416%" height="15" fill="rgb(236,59,4)"/><text x="96.1404%" y="767.50"></text></g><g><title>mysql::conn::Conn::_query (4 samples, 0.91%)</title><rect x="96.1187%" y="741" width="0.9132%" height="15" fill="rgb(254,179,45)"/><text x="96.3687%" y="751.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (2 samples, 0.46%)</title><rect x="96.5753%" y="725" width="0.4566%" height="15" fill="rgb(226,14,10)"/><text x="96.8253%" y="735.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::flush (1 samples, 0.23%)</title><rect x="96.8037%" y="709" width="0.2283%" height="15" fill="rgb(244,27,41)"/><text x="97.0537%" y="719.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.23%)</title><rect x="97.0320%" y="757" width="0.2283%" height="15" fill="rgb(235,35,32)"/><text x="97.2820%" y="767.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.23%)</title><rect x="97.0320%" y="741" width="0.2283%" height="15" fill="rgb(218,68,31)"/><text x="97.2820%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.23%)</title><rect x="97.0320%" y="725" width="0.2283%" height="15" fill="rgb(207,120,37)"/><text x="97.2820%" y="735.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (1 samples, 0.23%)</title><rect x="97.0320%" y="709" width="0.2283%" height="15" fill="rgb(227,98,0)"/><text x="97.2820%" y="719.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.23%)</title><rect x="97.0320%" y="693" width="0.2283%" height="15" fill="rgb(207,7,3)"/><text x="97.2820%" y="703.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.23%)</title><rect x="97.0320%" y="677" width="0.2283%" height="15" fill="rgb(206,98,19)"/><text x="97.2820%" y="687.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.23%)</title><rect x="97.0320%" y="661" width="0.2283%" height="15" fill="rgb(217,5,26)"/><text x="97.2820%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="97.0320%" y="645" width="0.2283%" height="15" fill="rgb(235,190,38)"/><text x="97.2820%" y="655.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="97.0320%" y="629" width="0.2283%" height="15" fill="rgb(247,86,24)"/><text x="97.2820%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.23%)</title><rect x="97.0320%" y="613" width="0.2283%" height="15" fill="rgb(205,101,16)"/><text x="97.2820%" y="623.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.23%)</title><rect x="97.0320%" y="597" width="0.2283%" height="15" fill="rgb(246,168,33)"/><text x="97.2820%" y="607.50"></text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.23%)</title><rect x="97.0320%" y="581" width="0.2283%" height="15" fill="rgb(231,114,1)"/><text x="97.2820%" y="591.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.23%)</title><rect x="97.0320%" y="565" width="0.2283%" height="15" fill="rgb(207,184,53)"/><text x="97.2820%" y="575.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.23%)</title><rect x="97.0320%" y="549" width="0.2283%" height="15" fill="rgb(224,95,51)"/><text x="97.2820%" y="559.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.23%)</title><rect x="97.0320%" y="533" width="0.2283%" height="15" fill="rgb(212,188,45)"/><text x="97.2820%" y="543.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.23%)</title><rect x="97.0320%" y="517" width="0.2283%" height="15" fill="rgb(223,154,38)"/><text x="97.2820%" y="527.50"></text></g><g><title>__libc_write (1 samples, 0.23%)</title><rect x="97.0320%" y="501" width="0.2283%" height="15" fill="rgb(251,22,52)"/><text x="97.2820%" y="511.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="97.0320%" y="485" width="0.2283%" height="15" fill="rgb(229,209,22)"/><text x="97.2820%" y="495.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="97.0320%" y="469" width="0.2283%" height="15" fill="rgb(234,138,34)"/><text x="97.2820%" y="479.50"></text></g><g><title>ksys_write (1 samples, 0.23%)</title><rect x="97.0320%" y="453" width="0.2283%" height="15" fill="rgb(212,95,11)"/><text x="97.2820%" y="463.50"></text></g><g><title>vfs_write (1 samples, 0.23%)</title><rect x="97.0320%" y="437" width="0.2283%" height="15" fill="rgb(240,179,47)"/><text x="97.2820%" y="447.50"></text></g><g><title>tty_write (1 samples, 0.23%)</title><rect x="97.0320%" y="421" width="0.2283%" height="15" fill="rgb(240,163,11)"/><text x="97.2820%" y="431.50"></text></g><g><title>n_tty_write (1 samples, 0.23%)</title><rect x="97.0320%" y="405" width="0.2283%" height="15" fill="rgb(236,37,12)"/><text x="97.2820%" y="415.50"></text></g><g><title>pty_write (1 samples, 0.23%)</title><rect x="97.0320%" y="389" width="0.2283%" height="15" fill="rgb(232,164,16)"/><text x="97.2820%" y="399.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.23%)</title><rect x="97.0320%" y="373" width="0.2283%" height="15" fill="rgb(244,205,15)"/><text x="97.2820%" y="383.50"></text></g><g><title>__libc_start_main (256 samples, 58.45%)</title><rect x="39.0411%" y="917" width="58.4475%" height="15" fill="rgb(223,117,47)"/><text x="39.2911%" y="927.50">__libc_start_main</text></g><g><title>main (256 samples, 58.45%)</title><rect x="39.0411%" y="901" width="58.4475%" height="15" fill="rgb(244,107,35)"/><text x="39.2911%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (256 samples, 58.45%)</title><rect x="39.0411%" y="885" width="58.4475%" height="15" fill="rgb(205,140,8)"/><text x="39.2911%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (256 samples, 58.45%)</title><rect x="39.0411%" y="869" width="58.4475%" height="15" fill="rgb(228,84,46)"/><text x="39.2911%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (256 samples, 58.45%)</title><rect x="39.0411%" y="853" width="58.4475%" height="15" fill="rgb(254,188,9)"/><text x="39.2911%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (256 samples, 58.45%)</title><rect x="39.0411%" y="837" width="58.4475%" height="15" fill="rgb(206,112,54)"/><text x="39.2911%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (256 samples, 58.45%)</title><rect x="39.0411%" y="821" width="58.4475%" height="15" fill="rgb(216,84,49)"/><text x="39.2911%" y="831.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (256 samples, 58.45%)</title><rect x="39.0411%" y="805" width="58.4475%" height="15" fill="rgb(214,194,35)"/><text x="39.2911%" y="815.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (256 samples, 58.45%)</title><rect x="39.0411%" y="789" width="58.4475%" height="15" fill="rgb(249,28,3)"/><text x="39.2911%" y="799.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters::main (256 samples, 58.45%)</title><rect x="39.0411%" y="773" width="58.4475%" height="15" fill="rgb(222,56,52)"/><text x="39.2911%" y="783.50">lobsters::main</text></g><g><title>std::net::each_addr (1 samples, 0.23%)</title><rect x="97.2603%" y="757" width="0.2283%" height="15" fill="rgb(245,217,50)"/><text x="97.5103%" y="767.50"></text></g><g><title>std::sys_common::net::TcpListener::bind (1 samples, 0.23%)</title><rect x="97.2603%" y="741" width="0.2283%" height="15" fill="rgb(213,201,24)"/><text x="97.5103%" y="751.50"></text></g><g><title>std::sys::unix::net::Socket::new (1 samples, 0.23%)</title><rect x="97.2603%" y="725" width="0.2283%" height="15" fill="rgb(248,116,28)"/><text x="97.5103%" y="735.50"></text></g><g><title>__GI___socket (1 samples, 0.23%)</title><rect x="97.2603%" y="709" width="0.2283%" height="15" fill="rgb(219,72,43)"/><text x="97.5103%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="97.2603%" y="693" width="0.2283%" height="15" fill="rgb(209,138,14)"/><text x="97.5103%" y="703.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="97.2603%" y="677" width="0.2283%" height="15" fill="rgb(222,18,33)"/><text x="97.5103%" y="687.50"></text></g><g><title>__x64_sys_socket (1 samples, 0.23%)</title><rect x="97.2603%" y="661" width="0.2283%" height="15" fill="rgb(213,199,7)"/><text x="97.5103%" y="671.50"></text></g><g><title>__sys_socket (1 samples, 0.23%)</title><rect x="97.2603%" y="645" width="0.2283%" height="15" fill="rgb(250,110,10)"/><text x="97.5103%" y="655.50"></text></g><g><title>__sock_create (1 samples, 0.23%)</title><rect x="97.2603%" y="629" width="0.2283%" height="15" fill="rgb(248,123,6)"/><text x="97.5103%" y="639.50"></text></g><g><title>inet_create (1 samples, 0.23%)</title><rect x="97.2603%" y="613" width="0.2283%" height="15" fill="rgb(206,91,31)"/><text x="97.5103%" y="623.50"></text></g><g><title>__cgroup_bpf_run_filter_sk (1 samples, 0.23%)</title><rect x="97.2603%" y="597" width="0.2283%" height="15" fill="rgb(211,154,13)"/><text x="97.5103%" y="607.50"></text></g><g><title>_start (257 samples, 58.68%)</title><rect x="39.0411%" y="933" width="58.6758%" height="15" fill="rgb(225,148,7)"/><text x="39.2911%" y="943.50">_start</text></g><g><title>_dl_start (1 samples, 0.23%)</title><rect x="97.4886%" y="917" width="0.2283%" height="15" fill="rgb(220,160,43)"/><text x="97.7386%" y="927.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.23%)</title><rect x="97.4886%" y="901" width="0.2283%" height="15" fill="rgb(213,52,39)"/><text x="97.7386%" y="911.50"></text></g><g><title>dl_main (1 samples, 0.23%)</title><rect x="97.4886%" y="885" width="0.2283%" height="15" fill="rgb(243,137,7)"/><text x="97.7386%" y="895.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.23%)</title><rect x="97.4886%" y="869" width="0.2283%" height="15" fill="rgb(230,79,13)"/><text x="97.7386%" y="879.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.23%)</title><rect x="97.4886%" y="853" width="0.2283%" height="15" fill="rgb(247,105,23)"/><text x="97.7386%" y="863.50"></text></g><g><title>openaux (1 samples, 0.23%)</title><rect x="97.4886%" y="837" width="0.2283%" height="15" fill="rgb(223,179,41)"/><text x="97.7386%" y="847.50"></text></g><g><title>_dl_map_object (1 samples, 0.23%)</title><rect x="97.4886%" y="821" width="0.2283%" height="15" fill="rgb(218,9,34)"/><text x="97.7386%" y="831.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.23%)</title><rect x="97.4886%" y="805" width="0.2283%" height="15" fill="rgb(222,106,8)"/><text x="97.7386%" y="815.50"></text></g><g><title>__mmap (1 samples, 0.23%)</title><rect x="97.4886%" y="789" width="0.2283%" height="15" fill="rgb(211,220,0)"/><text x="97.7386%" y="799.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="97.4886%" y="773" width="0.2283%" height="15" fill="rgb(229,52,16)"/><text x="97.7386%" y="783.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="97.4886%" y="757" width="0.2283%" height="15" fill="rgb(212,155,18)"/><text x="97.7386%" y="767.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.23%)</title><rect x="97.4886%" y="741" width="0.2283%" height="15" fill="rgb(242,21,14)"/><text x="97.7386%" y="751.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.23%)</title><rect x="97.4886%" y="725" width="0.2283%" height="15" fill="rgb(222,19,48)"/><text x="97.7386%" y="735.50"></text></g><g><title>do_mmap (1 samples, 0.23%)</title><rect x="97.4886%" y="709" width="0.2283%" height="15" fill="rgb(232,45,27)"/><text x="97.7386%" y="719.50"></text></g><g><title>mmap_region (1 samples, 0.23%)</title><rect x="97.4886%" y="693" width="0.2283%" height="15" fill="rgb(249,103,42)"/><text x="97.7386%" y="703.50"></text></g><g><title>__do_munmap (1 samples, 0.23%)</title><rect x="97.4886%" y="677" width="0.2283%" height="15" fill="rgb(246,81,33)"/><text x="97.7386%" y="687.50"></text></g><g><title>__split_vma (1 samples, 0.23%)</title><rect x="97.4886%" y="661" width="0.2283%" height="15" fill="rgb(252,33,42)"/><text x="97.7386%" y="671.50"></text></g><g><title>__vma_adjust (1 samples, 0.23%)</title><rect x="97.4886%" y="645" width="0.2283%" height="15" fill="rgb(209,212,41)"/><text x="97.7386%" y="655.50"></text></g><g><title>__rb_insert_augmented (1 samples, 0.23%)</title><rect x="97.4886%" y="629" width="0.2283%" height="15" fill="rgb(207,154,6)"/><text x="97.7386%" y="639.50"></text></g><g><title>[vmlinux] (1 samples, 0.23%)</title><rect x="97.7169%" y="901" width="0.2283%" height="15" fill="rgb(223,64,47)"/><text x="97.9669%" y="911.50"></text></g><g><title>do_group_exit (1 samples, 0.23%)</title><rect x="97.7169%" y="885" width="0.2283%" height="15" fill="rgb(211,161,38)"/><text x="97.9669%" y="895.50"></text></g><g><title>do_exit (1 samples, 0.23%)</title><rect x="97.7169%" y="869" width="0.2283%" height="15" fill="rgb(219,138,40)"/><text x="97.9669%" y="879.50"></text></g><g><title>mmput (1 samples, 0.23%)</title><rect x="97.7169%" y="853" width="0.2283%" height="15" fill="rgb(241,228,46)"/><text x="97.9669%" y="863.50"></text></g><g><title>exit_mmap (1 samples, 0.23%)</title><rect x="97.7169%" y="837" width="0.2283%" height="15" fill="rgb(223,209,38)"/><text x="97.9669%" y="847.50"></text></g><g><title>unmap_vmas (1 samples, 0.23%)</title><rect x="97.7169%" y="821" width="0.2283%" height="15" fill="rgb(236,164,45)"/><text x="97.9669%" y="831.50"></text></g><g><title>unmap_page_range (1 samples, 0.23%)</title><rect x="97.7169%" y="805" width="0.2283%" height="15" fill="rgb(231,15,5)"/><text x="97.9669%" y="815.50"></text></g><g><title>page_remove_rmap.part.0 (1 samples, 0.23%)</title><rect x="97.7169%" y="789" width="0.2283%" height="15" fill="rgb(252,35,15)"/><text x="97.9669%" y="799.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="97.7169%" y="933" width="0.4566%" height="15" fill="rgb(248,181,18)"/><text x="97.9669%" y="943.50"></text></g><g><title>do_syscall_64 (2 samples, 0.46%)</title><rect x="97.7169%" y="917" width="0.4566%" height="15" fill="rgb(233,39,42)"/><text x="97.9669%" y="927.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.23%)</title><rect x="97.9452%" y="901" width="0.2283%" height="15" fill="rgb(238,110,33)"/><text x="98.1952%" y="911.50"></text></g><g><title>do_execve (1 samples, 0.23%)</title><rect x="97.9452%" y="885" width="0.2283%" height="15" fill="rgb(233,195,10)"/><text x="98.1952%" y="895.50"></text></g><g><title>__do_execve_file (1 samples, 0.23%)</title><rect x="97.9452%" y="869" width="0.2283%" height="15" fill="rgb(254,105,3)"/><text x="98.1952%" y="879.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.23%)</title><rect x="97.9452%" y="853" width="0.2283%" height="15" fill="rgb(221,225,9)"/><text x="98.1952%" y="863.50"></text></g><g><title>load_elf_binary (1 samples, 0.23%)</title><rect x="97.9452%" y="837" width="0.2283%" height="15" fill="rgb(224,227,45)"/><text x="98.1952%" y="847.50"></text></g><g><title>elf_map (1 samples, 0.23%)</title><rect x="97.9452%" y="821" width="0.2283%" height="15" fill="rgb(229,198,43)"/><text x="98.1952%" y="831.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.23%)</title><rect x="97.9452%" y="805" width="0.2283%" height="15" fill="rgb(206,209,35)"/><text x="98.1952%" y="815.50"></text></g><g><title>do_mmap (1 samples, 0.23%)</title><rect x="97.9452%" y="789" width="0.2283%" height="15" fill="rgb(245,195,53)"/><text x="98.1952%" y="799.50"></text></g><g><title>mmap_region (1 samples, 0.23%)</title><rect x="97.9452%" y="773" width="0.2283%" height="15" fill="rgb(240,92,26)"/><text x="98.1952%" y="783.50"></text></g><g><title>perf_event_mmap (1 samples, 0.23%)</title><rect x="97.9452%" y="757" width="0.2283%" height="15" fill="rgb(207,40,23)"/><text x="98.1952%" y="767.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.23%)</title><rect x="97.9452%" y="741" width="0.2283%" height="15" fill="rgb(223,111,35)"/><text x="98.1952%" y="751.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.23%)</title><rect x="97.9452%" y="725" width="0.2283%" height="15" fill="rgb(229,147,28)"/><text x="98.1952%" y="735.50"></text></g><g><title>perf_event_mmap_output (1 samples, 0.23%)</title><rect x="97.9452%" y="709" width="0.2283%" height="15" fill="rgb(211,29,28)"/><text x="98.1952%" y="719.50"></text></g><g><title>perf_output_copy (1 samples, 0.23%)</title><rect x="97.9452%" y="693" width="0.2283%" height="15" fill="rgb(228,72,33)"/><text x="98.1952%" y="703.50"></text></g><g><title>memcpy_erms (1 samples, 0.23%)</title><rect x="97.9452%" y="677" width="0.2283%" height="15" fill="rgb(205,214,31)"/><text x="98.1952%" y="687.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.23%)</title><rect x="98.1735%" y="933" width="0.2283%" height="15" fill="rgb(224,111,15)"/><text x="98.4235%" y="943.50"></text></g><g><title>lobsters (432 samples, 98.63%)</title><rect x="0.0000%" y="949" width="98.6301%" height="15" fill="rgb(253,21,26)"/><text x="0.2500%" y="959.50">lobsters</text></g><g><title>syscall_return_via_sysret (1 samples, 0.23%)</title><rect x="98.4018%" y="933" width="0.2283%" height="15" fill="rgb(245,139,43)"/><text x="98.6518%" y="943.50"></text></g><g><title>all (438 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(252,170,7)"/><text x="0.2500%" y="975.50"></text></g><g><title>perf (6 samples, 1.37%)</title><rect x="98.6301%" y="949" width="1.3699%" height="15" fill="rgb(231,118,14)"/><text x="98.8801%" y="959.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 1.37%)</title><rect x="98.6301%" y="933" width="1.3699%" height="15" fill="rgb(238,83,0)"/><text x="98.8801%" y="943.50"></text></g><g><title>do_syscall_64 (6 samples, 1.37%)</title><rect x="98.6301%" y="917" width="1.3699%" height="15" fill="rgb(221,39,39)"/><text x="98.8801%" y="927.50"></text></g><g><title>__x64_sys_execve (6 samples, 1.37%)</title><rect x="98.6301%" y="901" width="1.3699%" height="15" fill="rgb(222,119,46)"/><text x="98.8801%" y="911.50"></text></g><g><title>do_execve (6 samples, 1.37%)</title><rect x="98.6301%" y="885" width="1.3699%" height="15" fill="rgb(222,165,49)"/><text x="98.8801%" y="895.50"></text></g><g><title>__do_execve_file (6 samples, 1.37%)</title><rect x="98.6301%" y="869" width="1.3699%" height="15" fill="rgb(219,113,52)"/><text x="98.8801%" y="879.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 1.37%)</title><rect x="98.6301%" y="853" width="1.3699%" height="15" fill="rgb(214,7,15)"/><text x="98.8801%" y="863.50"></text></g><g><title>load_elf_binary (6 samples, 1.37%)</title><rect x="98.6301%" y="837" width="1.3699%" height="15" fill="rgb(235,32,4)"/><text x="98.8801%" y="847.50"></text></g><g><title>setup_new_exec (6 samples, 1.37%)</title><rect x="98.6301%" y="821" width="1.3699%" height="15" fill="rgb(238,90,54)"/><text x="98.8801%" y="831.50"></text></g><g><title>perf_event_exec (6 samples, 1.37%)</title><rect x="98.6301%" y="805" width="1.3699%" height="15" fill="rgb(213,208,19)"/><text x="98.8801%" y="815.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 1.14%)</title><rect x="98.8584%" y="789" width="1.1416%" height="15" fill="rgb(233,156,4)"/><text x="99.1084%" y="799.50"></text></g><g><title>native_write_msr (5 samples, 1.14%)</title><rect x="98.8584%" y="773" width="1.1416%" height="15" fill="rgb(207,194,5)"/><text x="99.1084%" y="783.50"></text></g></svg></svg>