<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="949.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="949.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (1 samples, 0.23%)</title><rect x="0.0000%" y="885" width="0.2304%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="895.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::encode (1 samples, 0.23%)</title><rect x="0.0000%" y="869" width="0.2304%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="0.2304%" y="869" width="0.2304%" height="15" fill="rgb(221,193,54)"/><text x="0.4804%" y="879.50"></text></g><g><title>__libc_send (2 samples, 0.46%)</title><rect x="0.4608%" y="869" width="0.4608%" height="15" fill="rgb(248,212,6)"/><text x="0.7108%" y="879.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="0.4608%" y="853" width="0.4608%" height="15" fill="rgb(208,68,35)"/><text x="0.7108%" y="863.50"></text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="0.9217%" y="869" width="0.2304%" height="15" fill="rgb(232,128,0)"/><text x="1.1717%" y="879.50"></text></g><g><title>[[stack]] (6 samples, 1.38%)</title><rect x="0.2304%" y="885" width="1.3825%" height="15" fill="rgb(207,160,47)"/><text x="0.4804%" y="895.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (2 samples, 0.46%)</title><rect x="1.1521%" y="869" width="0.4608%" height="15" fill="rgb(228,23,34)"/><text x="1.4021%" y="879.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.23%)</title><rect x="1.6129%" y="869" width="0.2304%" height="15" fill="rgb(218,30,26)"/><text x="1.8629%" y="879.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.23%)</title><rect x="1.8433%" y="709" width="0.2304%" height="15" fill="rgb(220,122,19)"/><text x="2.0933%" y="719.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.23%)</title><rect x="1.8433%" y="693" width="0.2304%" height="15" fill="rgb(250,228,42)"/><text x="2.0933%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="1.8433%" y="677" width="0.2304%" height="15" fill="rgb(240,193,28)"/><text x="2.0933%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="1.8433%" y="661" width="0.2304%" height="15" fill="rgb(216,20,37)"/><text x="2.0933%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="1.8433%" y="645" width="0.2304%" height="15" fill="rgb(206,188,39)"/><text x="2.0933%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.23%)</title><rect x="2.0737%" y="661" width="0.2304%" height="15" fill="rgb(217,207,13)"/><text x="2.3237%" y="671.50"></text></g><g><title>apic_timer_interrupt (1 samples, 0.23%)</title><rect x="4.6083%" y="421" width="0.2304%" height="15" fill="rgb(231,73,38)"/><text x="4.8583%" y="431.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.23%)</title><rect x="4.6083%" y="405" width="0.2304%" height="15" fill="rgb(225,20,46)"/><text x="4.8583%" y="415.50"></text></g><g><title>irq_exit (1 samples, 0.23%)</title><rect x="4.6083%" y="389" width="0.2304%" height="15" fill="rgb(210,31,41)"/><text x="4.8583%" y="399.50"></text></g><g><title>__do_softirq (1 samples, 0.23%)</title><rect x="4.6083%" y="373" width="0.2304%" height="15" fill="rgb(221,200,47)"/><text x="4.8583%" y="383.50"></text></g><g><title>irqtime_account_irq (1 samples, 0.23%)</title><rect x="4.6083%" y="357" width="0.2304%" height="15" fill="rgb(226,26,5)"/><text x="4.8583%" y="367.50"></text></g><g><title>ip_finish_output (1 samples, 0.23%)</title><rect x="5.0691%" y="405" width="0.2304%" height="15" fill="rgb(249,33,26)"/><text x="5.3191%" y="415.50"></text></g><g><title>__local_bh_enable_ip (4 samples, 0.92%)</title><rect x="6.6820%" y="373" width="0.9217%" height="15" fill="rgb(235,183,28)"/><text x="6.9320%" y="383.50"></text></g><g><title>preempt_count_sub (3 samples, 0.69%)</title><rect x="6.9124%" y="357" width="0.6912%" height="15" fill="rgb(221,5,38)"/><text x="7.1624%" y="367.50"></text></g><g><title>dev_hard_start_xmit (3 samples, 0.69%)</title><rect x="7.6037%" y="373" width="0.6912%" height="15" fill="rgb(247,18,42)"/><text x="7.8537%" y="383.50"></text></g><g><title>loopback_xmit (2 samples, 0.46%)</title><rect x="7.8341%" y="357" width="0.4608%" height="15" fill="rgb(241,131,45)"/><text x="8.0841%" y="367.50"></text></g><g><title>validate_xmit_skb (2 samples, 0.46%)</title><rect x="8.2949%" y="373" width="0.4608%" height="15" fill="rgb(249,31,29)"/><text x="8.5449%" y="383.50"></text></g><g><title>netif_skb_features (2 samples, 0.46%)</title><rect x="8.2949%" y="357" width="0.4608%" height="15" fill="rgb(225,111,53)"/><text x="8.5449%" y="367.50"></text></g><g><title>__dev_queue_xmit (11 samples, 2.53%)</title><rect x="6.4516%" y="389" width="2.5346%" height="15" fill="rgb(238,160,17)"/><text x="6.7016%" y="399.50">__..</text></g><g><title>validate_xmit_xfrm (1 samples, 0.23%)</title><rect x="8.7558%" y="373" width="0.2304%" height="15" fill="rgb(214,148,48)"/><text x="9.0058%" y="383.50"></text></g><g><title>irqtime_account_irq (2 samples, 0.46%)</title><rect x="9.6774%" y="325" width="0.4608%" height="15" fill="rgb(232,36,49)"/><text x="9.9274%" y="335.50"></text></g><g><title>debug_smp_processor_id (1 samples, 0.23%)</title><rect x="9.9078%" y="309" width="0.2304%" height="15" fill="rgb(209,103,24)"/><text x="10.1578%" y="319.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.23%)</title><rect x="10.1382%" y="309" width="0.2304%" height="15" fill="rgb(229,88,8)"/><text x="10.3882%" y="319.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.23%)</title><rect x="10.5991%" y="229" width="0.2304%" height="15" fill="rgb(213,181,19)"/><text x="10.8491%" y="239.50"></text></g><g><title>raw_local_deliver (2 samples, 0.46%)</title><rect x="10.8295%" y="213" width="0.4608%" height="15" fill="rgb(254,191,54)"/><text x="11.0795%" y="223.50"></text></g><g><title>sk_reset_timer (1 samples, 0.23%)</title><rect x="11.7512%" y="165" width="0.2304%" height="15" fill="rgb(241,83,37)"/><text x="12.0012%" y="175.50"></text></g><g><title>__mod_timer (1 samples, 0.23%)</title><rect x="11.7512%" y="149" width="0.2304%" height="15" fill="rgb(233,36,39)"/><text x="12.0012%" y="159.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.23%)</title><rect x="12.4424%" y="85" width="0.2304%" height="15" fill="rgb(226,3,54)"/><text x="12.6924%" y="95.50"></text></g><g><title>psi_task_change (2 samples, 0.46%)</title><rect x="12.6728%" y="69" width="0.4608%" height="15" fill="rgb(245,192,40)"/><text x="12.9228%" y="79.50"></text></g><g><title>psi_group_change (2 samples, 0.46%)</title><rect x="12.6728%" y="53" width="0.4608%" height="15" fill="rgb(238,167,29)"/><text x="12.9228%" y="63.50"></text></g><g><title>enqueue_task (4 samples, 0.92%)</title><rect x="12.6728%" y="85" width="0.9217%" height="15" fill="rgb(232,182,51)"/><text x="12.9228%" y="95.50"></text></g><g><title>uclamp_rq_inc_id (2 samples, 0.46%)</title><rect x="13.1336%" y="69" width="0.4608%" height="15" fill="rgb(231,60,39)"/><text x="13.3836%" y="79.50"></text></g><g><title>reweight_entity (1 samples, 0.23%)</title><rect x="14.2857%" y="53" width="0.2304%" height="15" fill="rgb(208,69,12)"/><text x="14.5357%" y="63.50"></text></g><g><title>update_curr (1 samples, 0.23%)</title><rect x="14.5161%" y="53" width="0.2304%" height="15" fill="rgb(235,93,37)"/><text x="14.7661%" y="63.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.23%)</title><rect x="14.7465%" y="37" width="0.2304%" height="15" fill="rgb(213,116,39)"/><text x="14.9965%" y="47.50"></text></g><g><title>enqueue_task_fair (7 samples, 1.61%)</title><rect x="13.5945%" y="85" width="1.6129%" height="15" fill="rgb(222,207,29)"/><text x="13.8445%" y="95.50"></text></g><g><title>enqueue_entity (7 samples, 1.61%)</title><rect x="13.5945%" y="69" width="1.6129%" height="15" fill="rgb(206,96,30)"/><text x="13.8445%" y="79.50"></text></g><g><title>update_load_avg (2 samples, 0.46%)</title><rect x="14.7465%" y="53" width="0.4608%" height="15" fill="rgb(218,138,4)"/><text x="14.9965%" y="63.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.23%)</title><rect x="14.9770%" y="37" width="0.2304%" height="15" fill="rgb(250,191,14)"/><text x="15.2270%" y="47.50"></text></g><g><title>select_task_rq_fair (4 samples, 0.92%)</title><rect x="15.2074%" y="85" width="0.9217%" height="15" fill="rgb(239,60,40)"/><text x="15.4574%" y="95.50"></text></g><g><title>available_idle_cpu (1 samples, 0.23%)</title><rect x="15.8986%" y="69" width="0.2304%" height="15" fill="rgb(206,27,48)"/><text x="16.1486%" y="79.50"></text></g><g><title>ttwu_do_wakeup (3 samples, 0.69%)</title><rect x="16.1290%" y="85" width="0.6912%" height="15" fill="rgb(225,35,8)"/><text x="16.3790%" y="95.50"></text></g><g><title>check_preempt_curr (3 samples, 0.69%)</title><rect x="16.1290%" y="69" width="0.6912%" height="15" fill="rgb(250,213,24)"/><text x="16.3790%" y="79.50"></text></g><g><title>resched_curr (1 samples, 0.23%)</title><rect x="16.5899%" y="53" width="0.2304%" height="15" fill="rgb(247,123,22)"/><text x="16.8399%" y="63.50"></text></g><g><title>__wake_up_common (24 samples, 5.53%)</title><rect x="11.9816%" y="133" width="5.5300%" height="15" fill="rgb(231,138,38)"/><text x="12.2316%" y="143.50">__wake_..</text></g><g><title>pollwake (24 samples, 5.53%)</title><rect x="11.9816%" y="117" width="5.5300%" height="15" fill="rgb(231,145,46)"/><text x="12.2316%" y="127.50">pollwake</text></g><g><title>try_to_wake_up (23 samples, 5.30%)</title><rect x="12.2120%" y="101" width="5.2995%" height="15" fill="rgb(251,118,11)"/><text x="12.4620%" y="111.50">try_to..</text></g><g><title>update_rq_clock (3 samples, 0.69%)</title><rect x="16.8203%" y="85" width="0.6912%" height="15" fill="rgb(217,147,25)"/><text x="17.0703%" y="95.50"></text></g><g><title>sock_def_readable (26 samples, 5.99%)</title><rect x="11.9816%" y="165" width="5.9908%" height="15" fill="rgb(247,81,37)"/><text x="12.2316%" y="175.50">sock_def..</text></g><g><title>__wake_up_common_lock (26 samples, 5.99%)</title><rect x="11.9816%" y="149" width="5.9908%" height="15" fill="rgb(209,12,38)"/><text x="12.2316%" y="159.50">__wake_u..</text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.46%)</title><rect x="17.5115%" y="133" width="0.4608%" height="15" fill="rgb(227,1,9)"/><text x="17.7615%" y="143.50"></text></g><g><title>kfree (1 samples, 0.23%)</title><rect x="18.2028%" y="133" width="0.2304%" height="15" fill="rgb(248,47,43)"/><text x="18.4528%" y="143.50"></text></g><g><title>__slab_free (1 samples, 0.23%)</title><rect x="18.2028%" y="117" width="0.2304%" height="15" fill="rgb(221,10,30)"/><text x="18.4528%" y="127.50"></text></g><g><title>__kfree_skb (2 samples, 0.46%)</title><rect x="18.2028%" y="149" width="0.4608%" height="15" fill="rgb(210,229,1)"/><text x="18.4528%" y="159.50"></text></g><g><title>skb_release_data (1 samples, 0.23%)</title><rect x="18.4332%" y="133" width="0.2304%" height="15" fill="rgb(222,148,37)"/><text x="18.6832%" y="143.50"></text></g><g><title>bictcp_cong_avoid (1 samples, 0.23%)</title><rect x="18.6636%" y="149" width="0.2304%" height="15" fill="rgb(234,67,33)"/><text x="18.9136%" y="159.50"></text></g><g><title>rb_first (1 samples, 0.23%)</title><rect x="18.8940%" y="149" width="0.2304%" height="15" fill="rgb(247,98,35)"/><text x="19.1440%" y="159.50"></text></g><g><title>tcp_rate_gen (1 samples, 0.23%)</title><rect x="19.1244%" y="149" width="0.2304%" height="15" fill="rgb(247,138,52)"/><text x="19.3744%" y="159.50"></text></g><g><title>tcp_schedule_loss_probe.part.0 (1 samples, 0.23%)</title><rect x="19.3548%" y="149" width="0.2304%" height="15" fill="rgb(213,79,30)"/><text x="19.6048%" y="159.50"></text></g><g><title>tcp_ack (8 samples, 1.84%)</title><rect x="17.9724%" y="165" width="1.8433%" height="15" fill="rgb(246,177,23)"/><text x="18.2224%" y="175.50">t..</text></g><g><title>tcp_update_pacing_rate (1 samples, 0.23%)</title><rect x="19.5853%" y="149" width="0.2304%" height="15" fill="rgb(230,62,27)"/><text x="19.8353%" y="159.50"></text></g><g><title>tcp_check_space (1 samples, 0.23%)</title><rect x="19.8157%" y="165" width="0.2304%" height="15" fill="rgb(216,154,8)"/><text x="20.0657%" y="175.50"></text></g><g><title>tcp_v4_do_rcv (41 samples, 9.45%)</title><rect x="11.5207%" y="197" width="9.4470%" height="15" fill="rgb(244,35,45)"/><text x="11.7707%" y="207.50">tcp_v4_do_rcv</text></g><g><title>tcp_rcv_established (41 samples, 9.45%)</title><rect x="11.5207%" y="181" width="9.4470%" height="15" fill="rgb(251,115,12)"/><text x="11.7707%" y="191.50">tcp_rcv_establ..</text></g><g><title>tcp_queue_rcv (4 samples, 0.92%)</title><rect x="20.0461%" y="165" width="0.9217%" height="15" fill="rgb(240,54,50)"/><text x="20.2961%" y="175.50"></text></g><g><title>__netif_receive_skb_one_core (47 samples, 10.83%)</title><rect x="10.3687%" y="293" width="10.8295%" height="15" fill="rgb(233,84,52)"/><text x="10.6187%" y="303.50">__netif_receive_..</text></g><g><title>ip_rcv (47 samples, 10.83%)</title><rect x="10.3687%" y="277" width="10.8295%" height="15" fill="rgb(207,117,47)"/><text x="10.6187%" y="287.50">ip_rcv</text></g><g><title>ip_local_deliver (47 samples, 10.83%)</title><rect x="10.3687%" y="261" width="10.8295%" height="15" fill="rgb(249,43,39)"/><text x="10.6187%" y="271.50">ip_local_deliver</text></g><g><title>ip_local_deliver_finish (46 samples, 10.60%)</title><rect x="10.5991%" y="245" width="10.5991%" height="15" fill="rgb(209,38,44)"/><text x="10.8491%" y="255.50">ip_local_delive..</text></g><g><title>ip_protocol_deliver_rcu (45 samples, 10.37%)</title><rect x="10.8295%" y="229" width="10.3687%" height="15" fill="rgb(236,212,23)"/><text x="11.0795%" y="239.50">ip_protocol_del..</text></g><g><title>tcp_v4_rcv (43 samples, 9.91%)</title><rect x="11.2903%" y="213" width="9.9078%" height="15" fill="rgb(242,79,21)"/><text x="11.5403%" y="223.50">tcp_v4_rcv</text></g><g><title>tcp_v4_fill_cb (1 samples, 0.23%)</title><rect x="20.9677%" y="197" width="0.2304%" height="15" fill="rgb(211,96,35)"/><text x="21.2177%" y="207.50"></text></g><g><title>do_softirq (54 samples, 12.44%)</title><rect x="8.9862%" y="373" width="12.4424%" height="15" fill="rgb(253,215,40)"/><text x="9.2362%" y="383.50">do_softirq</text></g><g><title>do_softirq_own_stack (52 samples, 11.98%)</title><rect x="9.4470%" y="357" width="11.9816%" height="15" fill="rgb(211,81,21)"/><text x="9.6970%" y="367.50">do_softirq_own_sta..</text></g><g><title>__do_softirq (52 samples, 11.98%)</title><rect x="9.4470%" y="341" width="11.9816%" height="15" fill="rgb(208,190,38)"/><text x="9.6970%" y="351.50">__do_softirq</text></g><g><title>net_rx_action (49 samples, 11.29%)</title><rect x="10.1382%" y="325" width="11.2903%" height="15" fill="rgb(235,213,38)"/><text x="10.3882%" y="335.50">net_rx_action</text></g><g><title>process_backlog (48 samples, 11.06%)</title><rect x="10.3687%" y="309" width="11.0599%" height="15" fill="rgb(237,122,38)"/><text x="10.6187%" y="319.50">process_backlog</text></g><g><title>_raw_spin_lock (1 samples, 0.23%)</title><rect x="21.1982%" y="293" width="0.2304%" height="15" fill="rgb(244,218,35)"/><text x="21.4482%" y="303.50"></text></g><g><title>__ip_queue_xmit (78 samples, 17.97%)</title><rect x="3.6866%" y="437" width="17.9724%" height="15" fill="rgb(240,68,47)"/><text x="3.9366%" y="447.50">__ip_queue_xmit</text></g><g><title>ip_output (73 samples, 16.82%)</title><rect x="4.8387%" y="421" width="16.8203%" height="15" fill="rgb(210,16,53)"/><text x="5.0887%" y="431.50">ip_output</text></g><g><title>ip_finish_output2 (71 samples, 16.36%)</title><rect x="5.2995%" y="405" width="16.3594%" height="15" fill="rgb(235,124,12)"/><text x="5.5495%" y="415.50">ip_finish_output2</text></g><g><title>__local_bh_enable_ip (55 samples, 12.67%)</title><rect x="8.9862%" y="389" width="12.6728%" height="15" fill="rgb(224,169,11)"/><text x="9.2362%" y="399.50">__local_bh_enable_ip</text></g><g><title>preempt_schedule_thunk (1 samples, 0.23%)</title><rect x="21.4286%" y="373" width="0.2304%" height="15" fill="rgb(250,166,2)"/><text x="21.6786%" y="383.50"></text></g><g><title>preempt_schedule_common (1 samples, 0.23%)</title><rect x="21.4286%" y="357" width="0.2304%" height="15" fill="rgb(242,216,29)"/><text x="21.6786%" y="367.50"></text></g><g><title>__schedule (1 samples, 0.23%)</title><rect x="21.4286%" y="341" width="0.2304%" height="15" fill="rgb(230,116,27)"/><text x="21.6786%" y="351.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.23%)</title><rect x="21.4286%" y="325" width="0.2304%" height="15" fill="rgb(228,99,48)"/><text x="21.6786%" y="335.50"></text></g><g><title>tcp_update_skb_after_send (1 samples, 0.23%)</title><rect x="21.6590%" y="437" width="0.2304%" height="15" fill="rgb(253,11,6)"/><text x="21.9090%" y="447.50"></text></g><g><title>__tcp_transmit_skb (82 samples, 18.89%)</title><rect x="3.2258%" y="453" width="18.8940%" height="15" fill="rgb(247,143,39)"/><text x="3.4758%" y="463.50">__tcp_transmit_skb</text></g><g><title>tcp_v4_send_check (1 samples, 0.23%)</title><rect x="21.8894%" y="437" width="0.2304%" height="15" fill="rgb(236,97,10)"/><text x="22.1394%" y="447.50"></text></g><g><title>tcp_event_new_data_sent (1 samples, 0.23%)</title><rect x="22.1198%" y="453" width="0.2304%" height="15" fill="rgb(233,208,19)"/><text x="22.3698%" y="463.50"></text></g><g><title>__tcp_push_pending_frames (85 samples, 19.59%)</title><rect x="2.9954%" y="485" width="19.5853%" height="15" fill="rgb(216,164,2)"/><text x="3.2454%" y="495.50">__tcp_push_pending_frames</text></g><g><title>tcp_write_xmit (84 samples, 19.35%)</title><rect x="3.2258%" y="469" width="19.3548%" height="15" fill="rgb(220,129,5)"/><text x="3.4758%" y="479.50">tcp_write_xmit</text></g><g><title>tcp_schedule_loss_probe.part.0 (1 samples, 0.23%)</title><rect x="22.3502%" y="453" width="0.2304%" height="15" fill="rgb(242,17,10)"/><text x="22.6002%" y="463.50"></text></g><g><title>sk_reset_timer (1 samples, 0.23%)</title><rect x="22.3502%" y="437" width="0.2304%" height="15" fill="rgb(242,107,0)"/><text x="22.6002%" y="447.50"></text></g><g><title>sk_page_frag_refill (1 samples, 0.23%)</title><rect x="22.5806%" y="485" width="0.2304%" height="15" fill="rgb(251,28,31)"/><text x="22.8306%" y="495.50"></text></g><g><title>__slab_alloc.constprop.0 (1 samples, 0.23%)</title><rect x="23.5023%" y="437" width="0.2304%" height="15" fill="rgb(233,223,10)"/><text x="23.7523%" y="447.50"></text></g><g><title>___slab_alloc (1 samples, 0.23%)</title><rect x="23.5023%" y="421" width="0.2304%" height="15" fill="rgb(215,21,27)"/><text x="23.7523%" y="431.50"></text></g><g><title>__kmalloc_node_track_caller (3 samples, 0.69%)</title><rect x="23.2719%" y="453" width="0.6912%" height="15" fill="rgb(232,23,21)"/><text x="23.5219%" y="463.50"></text></g><g><title>memset_erms (1 samples, 0.23%)</title><rect x="23.7327%" y="437" width="0.2304%" height="15" fill="rgb(244,5,23)"/><text x="23.9827%" y="447.50"></text></g><g><title>sk_stream_alloc_skb (6 samples, 1.38%)</title><rect x="22.8111%" y="485" width="1.3825%" height="15" fill="rgb(226,81,46)"/><text x="23.0611%" y="495.50"></text></g><g><title>__alloc_skb (5 samples, 1.15%)</title><rect x="23.0415%" y="469" width="1.1521%" height="15" fill="rgb(247,70,30)"/><text x="23.2915%" y="479.50"></text></g><g><title>kmem_cache_alloc_node (1 samples, 0.23%)</title><rect x="23.9631%" y="453" width="0.2304%" height="15" fill="rgb(212,68,19)"/><text x="24.2131%" y="463.50"></text></g><g><title>memset_erms (1 samples, 0.23%)</title><rect x="23.9631%" y="437" width="0.2304%" height="15" fill="rgb(240,187,13)"/><text x="24.2131%" y="447.50"></text></g><g><title>skb_do_copy_data_nocache (1 samples, 0.23%)</title><rect x="24.1935%" y="485" width="0.2304%" height="15" fill="rgb(223,113,26)"/><text x="24.4435%" y="495.50"></text></g><g><title>_copy_from_iter_full (1 samples, 0.23%)</title><rect x="24.1935%" y="469" width="0.2304%" height="15" fill="rgb(206,192,2)"/><text x="24.4435%" y="479.50"></text></g><g><title>sock_sendmsg (95 samples, 21.89%)</title><rect x="2.7650%" y="533" width="21.8894%" height="15" fill="rgb(241,108,4)"/><text x="3.0150%" y="543.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (95 samples, 21.89%)</title><rect x="2.7650%" y="517" width="21.8894%" height="15" fill="rgb(247,173,49)"/><text x="3.0150%" y="527.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (95 samples, 21.89%)</title><rect x="2.7650%" y="501" width="21.8894%" height="15" fill="rgb(224,114,35)"/><text x="3.0150%" y="511.50">tcp_sendmsg_locked</text></g><g><title>tcp_send_mss (1 samples, 0.23%)</title><rect x="24.4240%" y="485" width="0.2304%" height="15" fill="rgb(245,159,27)"/><text x="24.6740%" y="495.50"></text></g><g><title>tcp_current_mss (1 samples, 0.23%)</title><rect x="24.4240%" y="469" width="0.2304%" height="15" fill="rgb(245,172,44)"/><text x="24.6740%" y="479.50"></text></g><g><title>__x64_sys_sendto (96 samples, 22.12%)</title><rect x="2.7650%" y="565" width="22.1198%" height="15" fill="rgb(236,23,11)"/><text x="3.0150%" y="575.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (96 samples, 22.12%)</title><rect x="2.7650%" y="549" width="22.1198%" height="15" fill="rgb(205,117,38)"/><text x="3.0150%" y="559.50">__sys_sendto</text></g><g><title>sockfd_lookup_light (1 samples, 0.23%)</title><rect x="24.6544%" y="533" width="0.2304%" height="15" fill="rgb(237,72,25)"/><text x="24.9044%" y="543.50"></text></g><g><title>__fdget (1 samples, 0.23%)</title><rect x="24.6544%" y="517" width="0.2304%" height="15" fill="rgb(244,70,9)"/><text x="24.9044%" y="527.50"></text></g><g><title>do_syscall_64 (97 samples, 22.35%)</title><rect x="2.7650%" y="581" width="22.3502%" height="15" fill="rgb(217,125,39)"/><text x="3.0150%" y="591.50">do_syscall_64</text></g><g><title>syscall_trace_enter (1 samples, 0.23%)</title><rect x="24.8848%" y="565" width="0.2304%" height="15" fill="rgb(235,36,10)"/><text x="25.1348%" y="575.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.23%)</title><rect x="24.8848%" y="549" width="0.2304%" height="15" fill="rgb(251,123,47)"/><text x="25.1348%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (100 samples, 23.04%)</title><rect x="2.5346%" y="597" width="23.0415%" height="15" fill="rgb(221,13,13)"/><text x="2.7846%" y="607.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.46%)</title><rect x="25.1152%" y="581" width="0.4608%" height="15" fill="rgb(238,131,9)"/><text x="25.3652%" y="591.50"></text></g><g><title>__libc_start_main (105 samples, 24.19%)</title><rect x="1.8433%" y="869" width="24.1935%" height="15" fill="rgb(211,50,8)"/><text x="2.0933%" y="879.50">__libc_start_main</text></g><g><title>main (105 samples, 24.19%)</title><rect x="1.8433%" y="853" width="24.1935%" height="15" fill="rgb(245,182,24)"/><text x="2.0933%" y="863.50">main</text></g><g><title>std::rt::lang_start_internal (105 samples, 24.19%)</title><rect x="1.8433%" y="837" width="24.1935%" height="15" fill="rgb(242,14,37)"/><text x="2.0933%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (105 samples, 24.19%)</title><rect x="1.8433%" y="821" width="24.1935%" height="15" fill="rgb(246,228,12)"/><text x="2.0933%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (105 samples, 24.19%)</title><rect x="1.8433%" y="805" width="24.1935%" height="15" fill="rgb(213,55,15)"/><text x="2.0933%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (105 samples, 24.19%)</title><rect x="1.8433%" y="789" width="24.1935%" height="15" fill="rgb(209,9,3)"/><text x="2.0933%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (105 samples, 24.19%)</title><rect x="1.8433%" y="773" width="24.1935%" height="15" fill="rgb(230,59,30)"/><text x="2.0933%" y="783.50">core::ops::function::impls::&lt;impl core:..</text></g><g><title>std::rt::lang_start::_{{closure}} (105 samples, 24.19%)</title><rect x="1.8433%" y="757" width="24.1935%" height="15" fill="rgb(209,121,21)"/><text x="2.0933%" y="767.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (105 samples, 24.19%)</title><rect x="1.8433%" y="741" width="24.1935%" height="15" fill="rgb(220,109,13)"/><text x="2.0933%" y="751.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>lobsters::main (105 samples, 24.19%)</title><rect x="1.8433%" y="725" width="24.1935%" height="15" fill="rgb(232,18,1)"/><text x="2.0933%" y="735.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (104 samples, 23.96%)</title><rect x="2.0737%" y="709" width="23.9631%" height="15" fill="rgb(215,41,42)"/><text x="2.3237%" y="719.50">mysql::conn::queryable::Queryable::que..</text></g><g><title>mysql::conn::Conn::_query (104 samples, 23.96%)</title><rect x="2.0737%" y="693" width="23.9631%" height="15" fill="rgb(224,123,36)"/><text x="2.3237%" y="703.50">mysql::conn::Conn::_query</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (104 samples, 23.96%)</title><rect x="2.0737%" y="677" width="23.9631%" height="15" fill="rgb(240,125,3)"/><text x="2.3237%" y="687.50">mysql_common::proto::sync_framed::MySy..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (103 samples, 23.73%)</title><rect x="2.3041%" y="661" width="23.7327%" height="15" fill="rgb(205,98,50)"/><text x="2.5541%" y="671.50">std::io::buffered::BufWriter&lt;W&gt;::flush..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (103 samples, 23.73%)</title><rect x="2.3041%" y="645" width="23.7327%" height="15" fill="rgb(205,185,37)"/><text x="2.5541%" y="655.50">&lt;std::net::tcp::TcpStream as std::io::..</text></g><g><title>std::sys_common::net::TcpStream::write (103 samples, 23.73%)</title><rect x="2.3041%" y="629" width="23.7327%" height="15" fill="rgb(238,207,15)"/><text x="2.5541%" y="639.50">std::sys_common::net::TcpStream::write</text></g><g><title>__libc_send (103 samples, 23.73%)</title><rect x="2.3041%" y="613" width="23.7327%" height="15" fill="rgb(213,199,42)"/><text x="2.5541%" y="623.50">__libc_send</text></g><g><title>syscall_return_via_sysret (2 samples, 0.46%)</title><rect x="25.5760%" y="597" width="0.4608%" height="15" fill="rgb(235,201,11)"/><text x="25.8260%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.23%)</title><rect x="26.0369%" y="869" width="0.2304%" height="15" fill="rgb(207,46,11)"/><text x="26.2869%" y="879.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (1 samples, 0.23%)</title><rect x="26.2673%" y="869" width="0.2304%" height="15" fill="rgb(241,35,35)"/><text x="26.5173%" y="879.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.23%)</title><rect x="26.4977%" y="853" width="0.2304%" height="15" fill="rgb(243,32,47)"/><text x="26.7477%" y="863.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="26.4977%" y="837" width="0.2304%" height="15" fill="rgb(247,202,23)"/><text x="26.7477%" y="847.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="26.4977%" y="821" width="0.2304%" height="15" fill="rgb(219,102,11)"/><text x="26.7477%" y="831.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="26.4977%" y="805" width="0.2304%" height="15" fill="rgb(243,110,44)"/><text x="26.7477%" y="815.50"></text></g><g><title>dlopen (1 samples, 0.23%)</title><rect x="26.4977%" y="789" width="0.2304%" height="15" fill="rgb(222,74,54)"/><text x="26.7477%" y="799.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.23%)</title><rect x="26.4977%" y="773" width="0.2304%" height="15" fill="rgb(216,99,12)"/><text x="26.7477%" y="783.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.23%)</title><rect x="26.4977%" y="757" width="0.2304%" height="15" fill="rgb(226,22,26)"/><text x="26.7477%" y="767.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.23%)</title><rect x="26.4977%" y="741" width="0.2304%" height="15" fill="rgb(217,163,10)"/><text x="26.7477%" y="751.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.23%)</title><rect x="26.4977%" y="725" width="0.2304%" height="15" fill="rgb(213,25,53)"/><text x="26.7477%" y="735.50"></text></g><g><title>_dl_open (1 samples, 0.23%)</title><rect x="26.4977%" y="709" width="0.2304%" height="15" fill="rgb(252,105,26)"/><text x="26.7477%" y="719.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.23%)</title><rect x="26.4977%" y="693" width="0.2304%" height="15" fill="rgb(220,39,43)"/><text x="26.7477%" y="703.50"></text></g><g><title>dl_open_worker (1 samples, 0.23%)</title><rect x="26.4977%" y="677" width="0.2304%" height="15" fill="rgb(229,68,48)"/><text x="26.7477%" y="687.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.23%)</title><rect x="26.4977%" y="661" width="0.2304%" height="15" fill="rgb(252,8,32)"/><text x="26.7477%" y="671.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.23%)</title><rect x="26.4977%" y="645" width="0.2304%" height="15" fill="rgb(223,20,43)"/><text x="26.7477%" y="655.50"></text></g><g><title>do_lookup_x (1 samples, 0.23%)</title><rect x="26.4977%" y="629" width="0.2304%" height="15" fill="rgb(229,81,49)"/><text x="26.7477%" y="639.50"></text></g><g><title>mysql::conn::Conn::handle_ok (1 samples, 0.23%)</title><rect x="26.7281%" y="805" width="0.2304%" height="15" fill="rgb(236,28,36)"/><text x="26.9781%" y="815.50"></text></g><g><title>mysql_common::packets::OkPacket::into_owned (1 samples, 0.23%)</title><rect x="26.7281%" y="789" width="0.2304%" height="15" fill="rgb(249,185,26)"/><text x="26.9781%" y="799.50"></text></g><g><title>__kfree_skb (1 samples, 0.23%)</title><rect x="29.2627%" y="581" width="0.2304%" height="15" fill="rgb(249,174,33)"/><text x="29.5127%" y="591.50"></text></g><g><title>skb_release_head_state (1 samples, 0.23%)</title><rect x="29.2627%" y="565" width="0.2304%" height="15" fill="rgb(233,201,37)"/><text x="29.5127%" y="575.50"></text></g><g><title>dst_release (1 samples, 0.23%)</title><rect x="29.2627%" y="549" width="0.2304%" height="15" fill="rgb(221,78,26)"/><text x="29.5127%" y="559.50"></text></g><g><title>_raw_spin_lock_bh (1 samples, 0.23%)</title><rect x="29.4931%" y="565" width="0.2304%" height="15" fill="rgb(250,127,30)"/><text x="29.7431%" y="575.50"></text></g><g><title>release_sock (2 samples, 0.46%)</title><rect x="29.4931%" y="581" width="0.4608%" height="15" fill="rgb(230,49,44)"/><text x="29.7431%" y="591.50"></text></g><g><title>tcp_release_cb (1 samples, 0.23%)</title><rect x="29.7235%" y="565" width="0.2304%" height="15" fill="rgb(229,67,23)"/><text x="29.9735%" y="575.50"></text></g><g><title>__local_bh_enable_ip (2 samples, 0.46%)</title><rect x="30.1843%" y="565" width="0.4608%" height="15" fill="rgb(249,83,47)"/><text x="30.4343%" y="575.50"></text></g><g><title>preempt_count_sub (2 samples, 0.46%)</title><rect x="30.1843%" y="549" width="0.4608%" height="15" fill="rgb(215,43,3)"/><text x="30.4343%" y="559.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.46%)</title><rect x="30.6452%" y="565" width="0.4608%" height="15" fill="rgb(238,154,13)"/><text x="30.8952%" y="575.50"></text></g><g><title>preempt_count_add (1 samples, 0.23%)</title><rect x="30.8756%" y="549" width="0.2304%" height="15" fill="rgb(219,56,2)"/><text x="31.1256%" y="559.50"></text></g><g><title>in_lock_functions (1 samples, 0.23%)</title><rect x="30.8756%" y="533" width="0.2304%" height="15" fill="rgb(233,0,4)"/><text x="31.1256%" y="543.50"></text></g><g><title>_raw_spin_unlock_irqrestore (1 samples, 0.23%)</title><rect x="31.1060%" y="565" width="0.2304%" height="15" fill="rgb(235,30,7)"/><text x="31.3560%" y="575.50"></text></g><g><title>preempt_count_sub (1 samples, 0.23%)</title><rect x="31.1060%" y="549" width="0.2304%" height="15" fill="rgb(250,79,13)"/><text x="31.3560%" y="559.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.46%)</title><rect x="32.7189%" y="501" width="0.4608%" height="15" fill="rgb(211,146,34)"/><text x="32.9689%" y="511.50"></text></g><g><title>dequeue_entity (1 samples, 0.23%)</title><rect x="32.9493%" y="485" width="0.2304%" height="15" fill="rgb(228,22,38)"/><text x="33.1993%" y="495.50"></text></g><g><title>finish_task_switch (2 samples, 0.46%)</title><rect x="33.1797%" y="501" width="0.4608%" height="15" fill="rgb(235,168,5)"/><text x="33.4297%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (2 samples, 0.46%)</title><rect x="33.1797%" y="485" width="0.4608%" height="15" fill="rgb(221,155,16)"/><text x="33.4297%" y="495.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (2 samples, 0.46%)</title><rect x="33.1797%" y="469" width="0.4608%" height="15" fill="rgb(215,215,53)"/><text x="33.4297%" y="479.50"></text></g><g><title>native_write_msr (2 samples, 0.46%)</title><rect x="33.1797%" y="453" width="0.4608%" height="15" fill="rgb(223,4,10)"/><text x="33.4297%" y="463.50"></text></g><g><title>pick_next_task_fair (2 samples, 0.46%)</title><rect x="33.6406%" y="501" width="0.4608%" height="15" fill="rgb(234,103,6)"/><text x="33.8906%" y="511.50"></text></g><g><title>newidle_balance (2 samples, 0.46%)</title><rect x="33.6406%" y="485" width="0.4608%" height="15" fill="rgb(227,97,0)"/><text x="33.8906%" y="495.50"></text></g><g><title>pick_next_task_idle (1 samples, 0.23%)</title><rect x="34.1014%" y="501" width="0.2304%" height="15" fill="rgb(234,150,53)"/><text x="34.3514%" y="511.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.23%)</title><rect x="34.1014%" y="485" width="0.2304%" height="15" fill="rgb(228,201,54)"/><text x="34.3514%" y="495.50"></text></g><g><title>psi_task_change (4 samples, 0.92%)</title><rect x="34.3318%" y="501" width="0.9217%" height="15" fill="rgb(222,22,37)"/><text x="34.5818%" y="511.50"></text></g><g><title>psi_group_change (4 samples, 0.92%)</title><rect x="34.3318%" y="485" width="0.9217%" height="15" fill="rgb(237,53,32)"/><text x="34.5818%" y="495.50"></text></g><g><title>record_times (2 samples, 0.46%)</title><rect x="34.7926%" y="469" width="0.4608%" height="15" fill="rgb(233,25,53)"/><text x="35.0426%" y="479.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.23%)</title><rect x="35.0230%" y="453" width="0.2304%" height="15" fill="rgb(210,40,34)"/><text x="35.2730%" y="463.50"></text></g><g><title>sched_clock (1 samples, 0.23%)</title><rect x="35.0230%" y="437" width="0.2304%" height="15" fill="rgb(241,220,44)"/><text x="35.2730%" y="447.50"></text></g><g><title>native_sched_clock (1 samples, 0.23%)</title><rect x="35.0230%" y="421" width="0.2304%" height="15" fill="rgb(235,28,35)"/><text x="35.2730%" y="431.50"></text></g><g><title>rcu_note_context_switch (2 samples, 0.46%)</title><rect x="35.2535%" y="501" width="0.4608%" height="15" fill="rgb(210,56,17)"/><text x="35.5035%" y="511.50"></text></g><g><title>rcu_preempt_deferred_qs (1 samples, 0.23%)</title><rect x="35.4839%" y="485" width="0.2304%" height="15" fill="rgb(224,130,29)"/><text x="35.7339%" y="495.50"></text></g><g><title>sk_wait_data (28 samples, 6.45%)</title><rect x="29.9539%" y="581" width="6.4516%" height="15" fill="rgb(235,212,8)"/><text x="30.2039%" y="591.50">sk_wait_..</text></g><g><title>wait_woken (22 samples, 5.07%)</title><rect x="31.3364%" y="565" width="5.0691%" height="15" fill="rgb(223,33,50)"/><text x="31.5864%" y="575.50">wait_w..</text></g><g><title>schedule_timeout (19 samples, 4.38%)</title><rect x="32.0276%" y="549" width="4.3779%" height="15" fill="rgb(219,149,13)"/><text x="32.2776%" y="559.50">sched..</text></g><g><title>schedule (18 samples, 4.15%)</title><rect x="32.2581%" y="533" width="4.1475%" height="15" fill="rgb(250,156,29)"/><text x="32.5081%" y="543.50">sched..</text></g><g><title>__schedule (18 samples, 4.15%)</title><rect x="32.2581%" y="517" width="4.1475%" height="15" fill="rgb(216,193,19)"/><text x="32.5081%" y="527.50">__sch..</text></g><g><title>uclamp_rq_dec_id (3 samples, 0.69%)</title><rect x="35.7143%" y="501" width="0.6912%" height="15" fill="rgb(216,135,14)"/><text x="35.9643%" y="511.50"></text></g><g><title>skb_copy_datagram_iter (3 samples, 0.69%)</title><rect x="36.4055%" y="581" width="0.6912%" height="15" fill="rgb(241,47,5)"/><text x="36.6555%" y="591.50"></text></g><g><title>__skb_datagram_iter (3 samples, 0.69%)</title><rect x="36.4055%" y="565" width="0.6912%" height="15" fill="rgb(233,42,35)"/><text x="36.6555%" y="575.50"></text></g><g><title>_copy_to_iter (2 samples, 0.46%)</title><rect x="36.6359%" y="549" width="0.4608%" height="15" fill="rgb(231,13,6)"/><text x="36.8859%" y="559.50"></text></g><g><title>copy_user_generic_unrolled (1 samples, 0.23%)</title><rect x="36.8664%" y="533" width="0.2304%" height="15" fill="rgb(207,181,40)"/><text x="37.1164%" y="543.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="36.8664%" y="517" width="0.2304%" height="15" fill="rgb(254,173,49)"/><text x="37.1164%" y="527.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="36.8664%" y="501" width="0.2304%" height="15" fill="rgb(221,1,38)"/><text x="37.1164%" y="511.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="36.8664%" y="485" width="0.2304%" height="15" fill="rgb(206,124,46)"/><text x="37.1164%" y="495.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="36.8664%" y="469" width="0.2304%" height="15" fill="rgb(249,21,11)"/><text x="37.1164%" y="479.50"></text></g><g><title>__lru_cache_add (1 samples, 0.23%)</title><rect x="36.8664%" y="453" width="0.2304%" height="15" fill="rgb(222,201,40)"/><text x="37.1164%" y="463.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.23%)</title><rect x="36.8664%" y="437" width="0.2304%" height="15" fill="rgb(235,61,29)"/><text x="37.1164%" y="447.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.23%)</title><rect x="36.8664%" y="421" width="0.2304%" height="15" fill="rgb(219,207,3)"/><text x="37.1164%" y="431.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.23%)</title><rect x="36.8664%" y="405" width="0.2304%" height="15" fill="rgb(222,56,46)"/><text x="37.1164%" y="415.50"></text></g><g><title>do_syscall_64 (42 samples, 9.68%)</title><rect x="27.6498%" y="661" width="9.6774%" height="15" fill="rgb(239,76,54)"/><text x="27.8998%" y="671.50">do_syscall_64</text></g><g><title>__x64_sys_recvfrom (40 samples, 9.22%)</title><rect x="28.1106%" y="645" width="9.2166%" height="15" fill="rgb(231,124,27)"/><text x="28.3606%" y="655.50">__x64_sys_rec..</text></g><g><title>__sys_recvfrom (40 samples, 9.22%)</title><rect x="28.1106%" y="629" width="9.2166%" height="15" fill="rgb(249,195,6)"/><text x="28.3606%" y="639.50">__sys_recvfrom</text></g><g><title>inet_recvmsg (40 samples, 9.22%)</title><rect x="28.1106%" y="613" width="9.2166%" height="15" fill="rgb(237,174,47)"/><text x="28.3606%" y="623.50">inet_recvmsg</text></g><g><title>tcp_recvmsg (39 samples, 8.99%)</title><rect x="28.3410%" y="597" width="8.9862%" height="15" fill="rgb(206,201,31)"/><text x="28.5910%" y="607.50">tcp_recvmsg</text></g><g><title>tcp_recv_timestamp (1 samples, 0.23%)</title><rect x="37.0968%" y="581" width="0.2304%" height="15" fill="rgb(231,57,52)"/><text x="37.3468%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (50 samples, 11.52%)</title><rect x="27.4194%" y="677" width="11.5207%" height="15" fill="rgb(248,177,22)"/><text x="27.6694%" y="687.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (7 samples, 1.61%)</title><rect x="37.3272%" y="661" width="1.6129%" height="15" fill="rgb(215,211,37)"/><text x="37.5772%" y="671.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (53 samples, 12.21%)</title><rect x="27.4194%" y="773" width="12.2120%" height="15" fill="rgb(241,128,51)"/><text x="27.6694%" y="783.50">&lt;std::io::buffered..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (53 samples, 12.21%)</title><rect x="27.4194%" y="757" width="12.2120%" height="15" fill="rgb(227,165,31)"/><text x="27.6694%" y="767.50">&lt;std::net::tcp::Tc..</text></g><g><title>std::sys_common::net::TcpStream::read (53 samples, 12.21%)</title><rect x="27.4194%" y="741" width="12.2120%" height="15" fill="rgb(228,167,24)"/><text x="27.6694%" y="751.50">std::sys_common::n..</text></g><g><title>std::sys::unix::net::Socket::read (53 samples, 12.21%)</title><rect x="27.4194%" y="725" width="12.2120%" height="15" fill="rgb(228,143,12)"/><text x="27.6694%" y="735.50">std::sys::unix::ne..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (53 samples, 12.21%)</title><rect x="27.4194%" y="709" width="12.2120%" height="15" fill="rgb(249,149,8)"/><text x="27.6694%" y="719.50">std::sys::unix::ne..</text></g><g><title>__libc_recv (53 samples, 12.21%)</title><rect x="27.4194%" y="693" width="12.2120%" height="15" fill="rgb(243,35,44)"/><text x="27.6694%" y="703.50">__libc_recv</text></g><g><title>syscall_return_via_sysret (3 samples, 0.69%)</title><rect x="38.9401%" y="677" width="0.6912%" height="15" fill="rgb(246,89,9)"/><text x="39.1901%" y="687.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 13.13%)</title><rect x="26.9585%" y="789" width="13.1336%" height="15" fill="rgb(233,213,13)"/><text x="27.2085%" y="799.50">&lt;mysql_common::proto..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (2 samples, 0.46%)</title><rect x="39.6313%" y="773" width="0.4608%" height="15" fill="rgb(233,141,41)"/><text x="39.8813%" y="783.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (2 samples, 0.46%)</title><rect x="39.6313%" y="757" width="0.4608%" height="15" fill="rgb(239,167,4)"/><text x="39.8813%" y="767.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (2 samples, 0.46%)</title><rect x="39.6313%" y="741" width="0.4608%" height="15" fill="rgb(209,217,16)"/><text x="39.8813%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.46%)</title><rect x="39.6313%" y="725" width="0.4608%" height="15" fill="rgb(219,88,35)"/><text x="39.8813%" y="735.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.23%)</title><rect x="39.8618%" y="709" width="0.2304%" height="15" fill="rgb(220,193,23)"/><text x="40.1118%" y="719.50"></text></g><g><title>mysql::conn::Conn::read_packet (58 samples, 13.36%)</title><rect x="26.9585%" y="805" width="13.3641%" height="15" fill="rgb(230,90,52)"/><text x="27.2085%" y="815.50">mysql::conn::Conn::r..</text></g><g><title>_int_free (1 samples, 0.23%)</title><rect x="40.0922%" y="789" width="0.2304%" height="15" fill="rgb(252,106,19)"/><text x="40.3422%" y="799.50"></text></g><g><title>mysql_common::packets::OkPacket::into_owned (1 samples, 0.23%)</title><rect x="40.3226%" y="805" width="0.2304%" height="15" fill="rgb(206,74,20)"/><text x="40.5726%" y="815.50"></text></g><g><title>__rust_alloc (1 samples, 0.23%)</title><rect x="40.3226%" y="789" width="0.2304%" height="15" fill="rgb(230,138,44)"/><text x="40.5726%" y="799.50"></text></g><g><title>lobsters::main (62 samples, 14.29%)</title><rect x="26.4977%" y="869" width="14.2857%" height="15" fill="rgb(235,182,43)"/><text x="26.7477%" y="879.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (61 samples, 14.06%)</title><rect x="26.7281%" y="853" width="14.0553%" height="15" fill="rgb(242,16,51)"/><text x="26.9781%" y="863.50">mysql::conn::queryabl..</text></g><g><title>mysql::conn::Conn::_query (61 samples, 14.06%)</title><rect x="26.7281%" y="837" width="14.0553%" height="15" fill="rgb(248,9,4)"/><text x="26.9781%" y="847.50">mysql::conn::Conn::_q..</text></g><g><title>mysql::conn::Conn::handle_result_set (61 samples, 14.06%)</title><rect x="26.7281%" y="821" width="14.0553%" height="15" fill="rgb(210,31,22)"/><text x="26.9781%" y="831.50">mysql::conn::Conn::ha..</text></g><g><title>mysql_common::packets::parse_ok_packet (1 samples, 0.23%)</title><rect x="40.5530%" y="805" width="0.2304%" height="15" fill="rgb(239,54,39)"/><text x="40.8030%" y="815.50"></text></g><g><title>regex::exec::ExecBuilder::build (1 samples, 0.23%)</title><rect x="40.7834%" y="869" width="0.2304%" height="15" fill="rgb(230,99,41)"/><text x="41.0334%" y="879.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.23%)</title><rect x="40.7834%" y="853" width="0.2304%" height="15" fill="rgb(253,106,12)"/><text x="41.0334%" y="863.50"></text></g><g><title>regex::compile::Compiler::compile_finish (1 samples, 0.23%)</title><rect x="40.7834%" y="837" width="0.2304%" height="15" fill="rgb(213,46,41)"/><text x="41.0334%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.23%)</title><rect x="40.7834%" y="821" width="0.2304%" height="15" fill="rgb(215,133,35)"/><text x="41.0334%" y="831.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="40.7834%" y="805" width="0.2304%" height="15" fill="rgb(213,28,5)"/><text x="41.0334%" y="815.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="40.7834%" y="789" width="0.2304%" height="15" fill="rgb(215,77,49)"/><text x="41.0334%" y="799.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="40.7834%" y="773" width="0.2304%" height="15" fill="rgb(248,100,22)"/><text x="41.0334%" y="783.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="40.7834%" y="757" width="0.2304%" height="15" fill="rgb(208,67,9)"/><text x="41.0334%" y="767.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.23%)</title><rect x="40.7834%" y="741" width="0.2304%" height="15" fill="rgb(219,133,21)"/><text x="41.0334%" y="751.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.23%)</title><rect x="40.7834%" y="725" width="0.2304%" height="15" fill="rgb(246,46,29)"/><text x="41.0334%" y="735.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.23%)</title><rect x="40.7834%" y="709" width="0.2304%" height="15" fill="rgb(246,185,52)"/><text x="41.0334%" y="719.50"></text></g><g><title>alloc_empty_file (1 samples, 0.23%)</title><rect x="41.0138%" y="549" width="0.2304%" height="15" fill="rgb(252,136,11)"/><text x="41.2638%" y="559.50"></text></g><g><title>__alloc_file (1 samples, 0.23%)</title><rect x="41.0138%" y="533" width="0.2304%" height="15" fill="rgb(219,138,53)"/><text x="41.2638%" y="543.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.23%)</title><rect x="41.0138%" y="517" width="0.2304%" height="15" fill="rgb(211,51,23)"/><text x="41.2638%" y="527.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.46%)</title><rect x="41.0138%" y="741" width="0.4608%" height="15" fill="rgb(247,221,28)"/><text x="41.2638%" y="751.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.46%)</title><rect x="41.0138%" y="725" width="0.4608%" height="15" fill="rgb(251,222,45)"/><text x="41.2638%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="41.0138%" y="709" width="0.4608%" height="15" fill="rgb(217,162,53)"/><text x="41.2638%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="41.0138%" y="693" width="0.4608%" height="15" fill="rgb(229,93,14)"/><text x="41.2638%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.46%)</title><rect x="41.0138%" y="677" width="0.4608%" height="15" fill="rgb(209,67,49)"/><text x="41.2638%" y="687.50"></text></g><g><title>__GI___openat (2 samples, 0.46%)</title><rect x="41.0138%" y="661" width="0.4608%" height="15" fill="rgb(213,87,29)"/><text x="41.2638%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="41.0138%" y="645" width="0.4608%" height="15" fill="rgb(205,151,52)"/><text x="41.2638%" y="655.50"></text></g><g><title>do_syscall_64 (2 samples, 0.46%)</title><rect x="41.0138%" y="629" width="0.4608%" height="15" fill="rgb(253,215,39)"/><text x="41.2638%" y="639.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.46%)</title><rect x="41.0138%" y="613" width="0.4608%" height="15" fill="rgb(221,220,41)"/><text x="41.2638%" y="623.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.46%)</title><rect x="41.0138%" y="597" width="0.4608%" height="15" fill="rgb(218,133,21)"/><text x="41.2638%" y="607.50"></text></g><g><title>do_filp_open (2 samples, 0.46%)</title><rect x="41.0138%" y="581" width="0.4608%" height="15" fill="rgb(221,193,43)"/><text x="41.2638%" y="591.50"></text></g><g><title>path_openat (2 samples, 0.46%)</title><rect x="41.0138%" y="565" width="0.4608%" height="15" fill="rgb(240,128,52)"/><text x="41.2638%" y="575.50"></text></g><g><title>link_path_walk (1 samples, 0.23%)</title><rect x="41.2442%" y="549" width="0.2304%" height="15" fill="rgb(253,114,12)"/><text x="41.4942%" y="559.50"></text></g><g><title>walk_component (1 samples, 0.23%)</title><rect x="41.2442%" y="533" width="0.2304%" height="15" fill="rgb(215,223,47)"/><text x="41.4942%" y="543.50"></text></g><g><title>step_into (1 samples, 0.23%)</title><rect x="41.2442%" y="517" width="0.2304%" height="15" fill="rgb(248,225,23)"/><text x="41.4942%" y="527.50"></text></g><g><title>[unknown] (174 samples, 40.09%)</title><rect x="1.6129%" y="885" width="40.0922%" height="15" fill="rgb(250,108,0)"/><text x="1.8629%" y="895.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (3 samples, 0.69%)</title><rect x="41.0138%" y="869" width="0.6912%" height="15" fill="rgb(228,208,7)"/><text x="41.2638%" y="879.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.69%)</title><rect x="41.0138%" y="853" width="0.6912%" height="15" fill="rgb(244,45,10)"/><text x="41.2638%" y="863.50"></text></g><g><title>std::panicking::try (3 samples, 0.69%)</title><rect x="41.0138%" y="837" width="0.6912%" height="15" fill="rgb(207,125,25)"/><text x="41.2638%" y="847.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.69%)</title><rect x="41.0138%" y="821" width="0.6912%" height="15" fill="rgb(210,195,18)"/><text x="41.2638%" y="831.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.69%)</title><rect x="41.0138%" y="805" width="0.6912%" height="15" fill="rgb(249,80,12)"/><text x="41.2638%" y="815.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.69%)</title><rect x="41.0138%" y="789" width="0.6912%" height="15" fill="rgb(221,65,9)"/><text x="41.2638%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.69%)</title><rect x="41.0138%" y="773" width="0.6912%" height="15" fill="rgb(235,49,36)"/><text x="41.2638%" y="783.50"></text></g><g><title>lobsters::main (3 samples, 0.69%)</title><rect x="41.0138%" y="757" width="0.6912%" height="15" fill="rgb(225,32,20)"/><text x="41.2638%" y="767.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.23%)</title><rect x="41.4747%" y="741" width="0.2304%" height="15" fill="rgb(215,141,46)"/><text x="41.7247%" y="751.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 0.23%)</title><rect x="41.4747%" y="725" width="0.2304%" height="15" fill="rgb(250,160,47)"/><text x="41.7247%" y="735.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.23%)</title><rect x="41.4747%" y="709" width="0.2304%" height="15" fill="rgb(216,222,40)"/><text x="41.7247%" y="719.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.23%)</title><rect x="41.4747%" y="693" width="0.2304%" height="15" fill="rgb(234,217,39)"/><text x="41.7247%" y="703.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.23%)</title><rect x="41.4747%" y="677" width="0.2304%" height="15" fill="rgb(207,178,40)"/><text x="41.7247%" y="687.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.23%)</title><rect x="41.4747%" y="661" width="0.2304%" height="15" fill="rgb(221,136,13)"/><text x="41.7247%" y="671.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.23%)</title><rect x="41.4747%" y="645" width="0.2304%" height="15" fill="rgb(249,199,10)"/><text x="41.7247%" y="655.50"></text></g><g><title>__libc_send (1 samples, 0.23%)</title><rect x="41.4747%" y="629" width="0.2304%" height="15" fill="rgb(249,222,13)"/><text x="41.7247%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="41.4747%" y="613" width="0.2304%" height="15" fill="rgb(244,185,38)"/><text x="41.7247%" y="623.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="41.4747%" y="597" width="0.2304%" height="15" fill="rgb(236,202,9)"/><text x="41.7247%" y="607.50"></text></g><g><title>__x64_sys_sendto (1 samples, 0.23%)</title><rect x="41.4747%" y="581" width="0.2304%" height="15" fill="rgb(250,229,37)"/><text x="41.7247%" y="591.50"></text></g><g><title>__sys_sendto (1 samples, 0.23%)</title><rect x="41.4747%" y="565" width="0.2304%" height="15" fill="rgb(206,174,23)"/><text x="41.7247%" y="575.50"></text></g><g><title>sock_sendmsg (1 samples, 0.23%)</title><rect x="41.4747%" y="549" width="0.2304%" height="15" fill="rgb(211,33,43)"/><text x="41.7247%" y="559.50"></text></g><g><title>tcp_sendmsg (1 samples, 0.23%)</title><rect x="41.4747%" y="533" width="0.2304%" height="15" fill="rgb(245,58,50)"/><text x="41.7247%" y="543.50"></text></g><g><title>tcp_sendmsg_locked (1 samples, 0.23%)</title><rect x="41.4747%" y="517" width="0.2304%" height="15" fill="rgb(244,68,36)"/><text x="41.7247%" y="527.50"></text></g><g><title>__tcp_push_pending_frames (1 samples, 0.23%)</title><rect x="41.4747%" y="501" width="0.2304%" height="15" fill="rgb(232,229,15)"/><text x="41.7247%" y="511.50"></text></g><g><title>tcp_write_xmit (1 samples, 0.23%)</title><rect x="41.4747%" y="485" width="0.2304%" height="15" fill="rgb(254,30,23)"/><text x="41.7247%" y="495.50"></text></g><g><title>__tcp_transmit_skb (1 samples, 0.23%)</title><rect x="41.4747%" y="469" width="0.2304%" height="15" fill="rgb(235,160,14)"/><text x="41.7247%" y="479.50"></text></g><g><title>__ip_queue_xmit (1 samples, 0.23%)</title><rect x="41.4747%" y="453" width="0.2304%" height="15" fill="rgb(212,155,44)"/><text x="41.7247%" y="463.50"></text></g><g><title>ip_output (1 samples, 0.23%)</title><rect x="41.4747%" y="437" width="0.2304%" height="15" fill="rgb(226,2,50)"/><text x="41.7247%" y="447.50"></text></g><g><title>ip_finish_output2 (1 samples, 0.23%)</title><rect x="41.4747%" y="421" width="0.2304%" height="15" fill="rgb(234,177,6)"/><text x="41.7247%" y="431.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.23%)</title><rect x="41.4747%" y="405" width="0.2304%" height="15" fill="rgb(217,24,9)"/><text x="41.7247%" y="415.50"></text></g><g><title>do_softirq (1 samples, 0.23%)</title><rect x="41.4747%" y="389" width="0.2304%" height="15" fill="rgb(220,13,46)"/><text x="41.7247%" y="399.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.23%)</title><rect x="41.4747%" y="373" width="0.2304%" height="15" fill="rgb(239,221,27)"/><text x="41.7247%" y="383.50"></text></g><g><title>__do_softirq (1 samples, 0.23%)</title><rect x="41.4747%" y="357" width="0.2304%" height="15" fill="rgb(222,198,25)"/><text x="41.7247%" y="367.50"></text></g><g><title>net_rx_action (1 samples, 0.23%)</title><rect x="41.4747%" y="341" width="0.2304%" height="15" fill="rgb(211,99,13)"/><text x="41.7247%" y="351.50"></text></g><g><title>process_backlog (1 samples, 0.23%)</title><rect x="41.4747%" y="325" width="0.2304%" height="15" fill="rgb(232,111,31)"/><text x="41.7247%" y="335.50"></text></g><g><title>__netif_receive_skb_one_core (1 samples, 0.23%)</title><rect x="41.4747%" y="309" width="0.2304%" height="15" fill="rgb(245,82,37)"/><text x="41.7247%" y="319.50"></text></g><g><title>ip_rcv (1 samples, 0.23%)</title><rect x="41.4747%" y="293" width="0.2304%" height="15" fill="rgb(227,149,46)"/><text x="41.7247%" y="303.50"></text></g><g><title>ip_local_deliver (1 samples, 0.23%)</title><rect x="41.4747%" y="277" width="0.2304%" height="15" fill="rgb(218,36,50)"/><text x="41.7247%" y="287.50"></text></g><g><title>ip_local_deliver_finish (1 samples, 0.23%)</title><rect x="41.4747%" y="261" width="0.2304%" height="15" fill="rgb(226,80,48)"/><text x="41.7247%" y="271.50"></text></g><g><title>ip_protocol_deliver_rcu (1 samples, 0.23%)</title><rect x="41.4747%" y="245" width="0.2304%" height="15" fill="rgb(238,224,15)"/><text x="41.7247%" y="255.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.23%)</title><rect x="41.7051%" y="709" width="0.2304%" height="15" fill="rgb(241,136,10)"/><text x="41.9551%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.23%)</title><rect x="41.7051%" y="693" width="0.2304%" height="15" fill="rgb(208,32,45)"/><text x="41.9551%" y="703.50"></text></g><g><title>core::fmt::write (1 samples, 0.23%)</title><rect x="41.7051%" y="677" width="0.2304%" height="15" fill="rgb(207,135,9)"/><text x="41.9551%" y="687.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="41.7051%" y="661" width="0.2304%" height="15" fill="rgb(206,86,44)"/><text x="41.9551%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.23%)</title><rect x="41.7051%" y="645" width="0.2304%" height="15" fill="rgb(245,177,15)"/><text x="41.9551%" y="655.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.23%)</title><rect x="41.7051%" y="629" width="0.2304%" height="15" fill="rgb(206,64,50)"/><text x="41.9551%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.23%)</title><rect x="41.7051%" y="613" width="0.2304%" height="15" fill="rgb(234,36,40)"/><text x="41.9551%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.23%)</title><rect x="41.7051%" y="597" width="0.2304%" height="15" fill="rgb(213,64,8)"/><text x="41.9551%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.23%)</title><rect x="41.7051%" y="581" width="0.2304%" height="15" fill="rgb(210,75,36)"/><text x="41.9551%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.23%)</title><rect x="41.7051%" y="565" width="0.2304%" height="15" fill="rgb(229,88,21)"/><text x="41.9551%" y="575.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="41.9355%" y="709" width="0.2304%" height="15" fill="rgb(252,204,47)"/><text x="42.1855%" y="719.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.23%)</title><rect x="41.9355%" y="693" width="0.2304%" height="15" fill="rgb(208,77,27)"/><text x="42.1855%" y="703.50"></text></g><g><title>__libc_close (1 samples, 0.23%)</title><rect x="41.9355%" y="677" width="0.2304%" height="15" fill="rgb(221,76,26)"/><text x="42.1855%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="41.9355%" y="661" width="0.2304%" height="15" fill="rgb(225,139,18)"/><text x="42.1855%" y="671.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.23%)</title><rect x="41.9355%" y="645" width="0.2304%" height="15" fill="rgb(230,137,11)"/><text x="42.1855%" y="655.50"></text></g><g><title>task_work_run (1 samples, 0.23%)</title><rect x="41.9355%" y="629" width="0.2304%" height="15" fill="rgb(212,28,1)"/><text x="42.1855%" y="639.50"></text></g><g><title>__fput (1 samples, 0.23%)</title><rect x="41.9355%" y="613" width="0.2304%" height="15" fill="rgb(248,164,17)"/><text x="42.1855%" y="623.50"></text></g><g><title>sock_close (1 samples, 0.23%)</title><rect x="41.9355%" y="597" width="0.2304%" height="15" fill="rgb(222,171,42)"/><text x="42.1855%" y="607.50"></text></g><g><title>__sock_release (1 samples, 0.23%)</title><rect x="41.9355%" y="581" width="0.2304%" height="15" fill="rgb(243,84,45)"/><text x="42.1855%" y="591.50"></text></g><g><title>inet_release (1 samples, 0.23%)</title><rect x="41.9355%" y="565" width="0.2304%" height="15" fill="rgb(252,49,23)"/><text x="42.1855%" y="575.50"></text></g><g><title>tcp_close (1 samples, 0.23%)</title><rect x="41.9355%" y="549" width="0.2304%" height="15" fill="rgb(215,19,7)"/><text x="42.1855%" y="559.50"></text></g><g><title>__tcp_push_pending_frames (1 samples, 0.23%)</title><rect x="41.9355%" y="533" width="0.2304%" height="15" fill="rgb(238,81,41)"/><text x="42.1855%" y="543.50"></text></g><g><title>tcp_write_xmit (1 samples, 0.23%)</title><rect x="41.9355%" y="517" width="0.2304%" height="15" fill="rgb(210,199,37)"/><text x="42.1855%" y="527.50"></text></g><g><title>__tcp_transmit_skb (1 samples, 0.23%)</title><rect x="41.9355%" y="501" width="0.2304%" height="15" fill="rgb(244,192,49)"/><text x="42.1855%" y="511.50"></text></g><g><title>__ip_queue_xmit (1 samples, 0.23%)</title><rect x="41.9355%" y="485" width="0.2304%" height="15" fill="rgb(226,211,11)"/><text x="42.1855%" y="495.50"></text></g><g><title>ip_output (1 samples, 0.23%)</title><rect x="41.9355%" y="469" width="0.2304%" height="15" fill="rgb(236,162,54)"/><text x="42.1855%" y="479.50"></text></g><g><title>ip_finish_output2 (1 samples, 0.23%)</title><rect x="41.9355%" y="453" width="0.2304%" height="15" fill="rgb(220,229,9)"/><text x="42.1855%" y="463.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.23%)</title><rect x="41.9355%" y="437" width="0.2304%" height="15" fill="rgb(250,87,22)"/><text x="42.1855%" y="447.50"></text></g><g><title>do_softirq (1 samples, 0.23%)</title><rect x="41.9355%" y="421" width="0.2304%" height="15" fill="rgb(239,43,17)"/><text x="42.1855%" y="431.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.23%)</title><rect x="41.9355%" y="405" width="0.2304%" height="15" fill="rgb(231,177,25)"/><text x="42.1855%" y="415.50"></text></g><g><title>__do_softirq (1 samples, 0.23%)</title><rect x="41.9355%" y="389" width="0.2304%" height="15" fill="rgb(219,179,1)"/><text x="42.1855%" y="399.50"></text></g><g><title>net_rx_action (1 samples, 0.23%)</title><rect x="41.9355%" y="373" width="0.2304%" height="15" fill="rgb(238,219,53)"/><text x="42.1855%" y="383.50"></text></g><g><title>process_backlog (1 samples, 0.23%)</title><rect x="41.9355%" y="357" width="0.2304%" height="15" fill="rgb(232,167,36)"/><text x="42.1855%" y="367.50"></text></g><g><title>__netif_receive_skb_one_core (1 samples, 0.23%)</title><rect x="41.9355%" y="341" width="0.2304%" height="15" fill="rgb(244,19,51)"/><text x="42.1855%" y="351.50"></text></g><g><title>ip_rcv (1 samples, 0.23%)</title><rect x="41.9355%" y="325" width="0.2304%" height="15" fill="rgb(224,6,22)"/><text x="42.1855%" y="335.50"></text></g><g><title>ip_local_deliver (1 samples, 0.23%)</title><rect x="41.9355%" y="309" width="0.2304%" height="15" fill="rgb(224,145,5)"/><text x="42.1855%" y="319.50"></text></g><g><title>ip_local_deliver_finish (1 samples, 0.23%)</title><rect x="41.9355%" y="293" width="0.2304%" height="15" fill="rgb(234,130,49)"/><text x="42.1855%" y="303.50"></text></g><g><title>ip_protocol_deliver_rcu (1 samples, 0.23%)</title><rect x="41.9355%" y="277" width="0.2304%" height="15" fill="rgb(254,6,2)"/><text x="42.1855%" y="287.50"></text></g><g><title>tcp_v4_rcv (1 samples, 0.23%)</title><rect x="41.9355%" y="261" width="0.2304%" height="15" fill="rgb(208,96,46)"/><text x="42.1855%" y="271.50"></text></g><g><title>tcp_v4_do_rcv (1 samples, 0.23%)</title><rect x="41.9355%" y="245" width="0.2304%" height="15" fill="rgb(239,3,39)"/><text x="42.1855%" y="255.50"></text></g><g><title>tcp_rcv_state_process (1 samples, 0.23%)</title><rect x="41.9355%" y="229" width="0.2304%" height="15" fill="rgb(233,210,1)"/><text x="42.1855%" y="239.50"></text></g><g><title>tcp_ack (1 samples, 0.23%)</title><rect x="41.9355%" y="213" width="0.2304%" height="15" fill="rgb(244,137,37)"/><text x="42.1855%" y="223.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="42.3963%" y="629" width="0.2304%" height="15" fill="rgb(240,136,2)"/><text x="42.6463%" y="639.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="42.3963%" y="613" width="0.2304%" height="15" fill="rgb(239,18,37)"/><text x="42.6463%" y="623.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="42.3963%" y="597" width="0.2304%" height="15" fill="rgb(218,185,22)"/><text x="42.6463%" y="607.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.23%)</title><rect x="42.3963%" y="581" width="0.2304%" height="15" fill="rgb(225,218,4)"/><text x="42.6463%" y="591.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (231 samples, 53.23%)</title><rect x="42.6267%" y="405" width="53.2258%" height="15" fill="rgb(230,182,32)"/><text x="42.8767%" y="415.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (229 samples, 52.76%)</title><rect x="43.0876%" y="389" width="52.7650%" height="15" fill="rgb(242,56,43)"/><text x="43.3376%" y="399.50">native_write_msr</text></g><g><title>__perf_event_task_sched_in (233 samples, 53.69%)</title><rect x="42.6267%" y="421" width="53.6866%" height="15" fill="rgb(233,99,24)"/><text x="42.8767%" y="431.50">__perf_event_task_sched_in</text></g><g><title>_raw_spin_unlock (2 samples, 0.46%)</title><rect x="95.8525%" y="405" width="0.4608%" height="15" fill="rgb(234,209,42)"/><text x="96.1025%" y="415.50"></text></g><g><title>do_syscall_64 (234 samples, 53.92%)</title><rect x="42.6267%" y="581" width="53.9171%" height="15" fill="rgb(227,7,12)"/><text x="42.8767%" y="591.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 53.92%)</title><rect x="42.6267%" y="565" width="53.9171%" height="15" fill="rgb(245,203,43)"/><text x="42.8767%" y="575.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (234 samples, 53.92%)</title><rect x="42.6267%" y="549" width="53.9171%" height="15" fill="rgb(238,205,33)"/><text x="42.8767%" y="559.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 53.92%)</title><rect x="42.6267%" y="533" width="53.9171%" height="15" fill="rgb(231,56,7)"/><text x="42.8767%" y="543.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (234 samples, 53.92%)</title><rect x="42.6267%" y="517" width="53.9171%" height="15" fill="rgb(244,186,29)"/><text x="42.8767%" y="527.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (234 samples, 53.92%)</title><rect x="42.6267%" y="501" width="53.9171%" height="15" fill="rgb(234,111,31)"/><text x="42.8767%" y="511.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (234 samples, 53.92%)</title><rect x="42.6267%" y="485" width="53.9171%" height="15" fill="rgb(241,149,10)"/><text x="42.8767%" y="495.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (234 samples, 53.92%)</title><rect x="42.6267%" y="469" width="53.9171%" height="15" fill="rgb(249,206,44)"/><text x="42.8767%" y="479.50">preempt_schedule_common</text></g><g><title>__schedule (234 samples, 53.92%)</title><rect x="42.6267%" y="453" width="53.9171%" height="15" fill="rgb(251,153,30)"/><text x="42.8767%" y="463.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 53.92%)</title><rect x="42.6267%" y="437" width="53.9171%" height="15" fill="rgb(239,152,38)"/><text x="42.8767%" y="447.50">finish_task_switch</text></g><g><title>_raw_spin_unlock_irq (1 samples, 0.23%)</title><rect x="96.3134%" y="421" width="0.2304%" height="15" fill="rgb(249,139,47)"/><text x="96.5634%" y="431.50"></text></g><g><title>hwloc::Topology::new (237 samples, 54.61%)</title><rect x="42.1659%" y="709" width="54.6083%" height="15" fill="rgb(244,64,35)"/><text x="42.4159%" y="719.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (237 samples, 54.61%)</title><rect x="42.1659%" y="693" width="54.6083%" height="15" fill="rgb(216,46,15)"/><text x="42.4159%" y="703.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 54.61%)</title><rect x="42.1659%" y="677" width="54.6083%" height="15" fill="rgb(250,74,19)"/><text x="42.4159%" y="687.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 54.61%)</title><rect x="42.1659%" y="661" width="54.6083%" height="15" fill="rgb(249,42,33)"/><text x="42.4159%" y="671.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 54.61%)</title><rect x="42.1659%" y="645" width="54.6083%" height="15" fill="rgb(242,149,17)"/><text x="42.4159%" y="655.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (235 samples, 54.15%)</title><rect x="42.6267%" y="629" width="54.1475%" height="15" fill="rgb(244,29,21)"/><text x="42.8767%" y="639.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (235 samples, 54.15%)</title><rect x="42.6267%" y="613" width="54.1475%" height="15" fill="rgb(220,130,37)"/><text x="42.8767%" y="623.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (235 samples, 54.15%)</title><rect x="42.6267%" y="597" width="54.1475%" height="15" fill="rgb(211,67,2)"/><text x="42.8767%" y="607.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (1 samples, 0.23%)</title><rect x="96.5438%" y="581" width="0.2304%" height="15" fill="rgb(235,68,52)"/><text x="96.7938%" y="591.50"></text></g><g><title>switch_fpu_return (1 samples, 0.23%)</title><rect x="96.5438%" y="565" width="0.2304%" height="15" fill="rgb(246,142,3)"/><text x="96.7938%" y="575.50"></text></g><g><title>copy_kernel_to_fpregs (1 samples, 0.23%)</title><rect x="96.5438%" y="549" width="0.2304%" height="15" fill="rgb(241,25,7)"/><text x="96.7938%" y="559.50"></text></g><g><title>&lt;mysql::conn::query_result::SetIteratorState as core::convert::From&lt;mysql::conn::query_result::Or&lt;alloc::vec::Vec&lt;mysql_common::packets::Column&gt;,mysql_common::packets::OkPacket&gt;&gt;&gt;::from (1 samples, 0.23%)</title><rect x="97.2350%" y="693" width="0.2304%" height="15" fill="rgb(242,119,39)"/><text x="97.4850%" y="703.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (4 samples, 0.92%)</title><rect x="96.7742%" y="709" width="0.9217%" height="15" fill="rgb(241,98,45)"/><text x="97.0242%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.23%)</title><rect x="97.4654%" y="693" width="0.2304%" height="15" fill="rgb(254,28,30)"/><text x="97.7154%" y="703.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.23%)</title><rect x="97.4654%" y="677" width="0.2304%" height="15" fill="rgb(241,142,54)"/><text x="97.7154%" y="687.50"></text></g><g><title>__libc_start_main (244 samples, 56.22%)</title><rect x="41.7051%" y="869" width="56.2212%" height="15" fill="rgb(222,85,15)"/><text x="41.9551%" y="879.50">__libc_start_main</text></g><g><title>main (244 samples, 56.22%)</title><rect x="41.7051%" y="853" width="56.2212%" height="15" fill="rgb(210,85,47)"/><text x="41.9551%" y="863.50">main</text></g><g><title>std::rt::lang_start_internal (244 samples, 56.22%)</title><rect x="41.7051%" y="837" width="56.2212%" height="15" fill="rgb(224,206,25)"/><text x="41.9551%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (244 samples, 56.22%)</title><rect x="41.7051%" y="821" width="56.2212%" height="15" fill="rgb(243,201,19)"/><text x="41.9551%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (244 samples, 56.22%)</title><rect x="41.7051%" y="805" width="56.2212%" height="15" fill="rgb(236,59,4)"/><text x="41.9551%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (244 samples, 56.22%)</title><rect x="41.7051%" y="789" width="56.2212%" height="15" fill="rgb(254,179,45)"/><text x="41.9551%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (244 samples, 56.22%)</title><rect x="41.7051%" y="773" width="56.2212%" height="15" fill="rgb(226,14,10)"/><text x="41.9551%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (244 samples, 56.22%)</title><rect x="41.7051%" y="757" width="56.2212%" height="15" fill="rgb(244,27,41)"/><text x="41.9551%" y="767.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (244 samples, 56.22%)</title><rect x="41.7051%" y="741" width="56.2212%" height="15" fill="rgb(235,35,32)"/><text x="41.9551%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters::main (244 samples, 56.22%)</title><rect x="41.7051%" y="725" width="56.2212%" height="15" fill="rgb(218,68,31)"/><text x="41.9551%" y="735.50">lobsters::main</text></g><g><title>std::net::each_addr (1 samples, 0.23%)</title><rect x="97.6959%" y="709" width="0.2304%" height="15" fill="rgb(207,120,37)"/><text x="97.9459%" y="719.50"></text></g><g><title>std::sys_common::net::TcpListener::bind (1 samples, 0.23%)</title><rect x="97.6959%" y="693" width="0.2304%" height="15" fill="rgb(227,98,0)"/><text x="97.9459%" y="703.50"></text></g><g><title>std::sys::unix::net::Socket::new (1 samples, 0.23%)</title><rect x="97.6959%" y="677" width="0.2304%" height="15" fill="rgb(207,7,3)"/><text x="97.9459%" y="687.50"></text></g><g><title>__GI___socket (1 samples, 0.23%)</title><rect x="97.6959%" y="661" width="0.2304%" height="15" fill="rgb(206,98,19)"/><text x="97.9459%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="97.6959%" y="645" width="0.2304%" height="15" fill="rgb(217,5,26)"/><text x="97.9459%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="97.6959%" y="629" width="0.2304%" height="15" fill="rgb(235,190,38)"/><text x="97.9459%" y="639.50"></text></g><g><title>__x64_sys_socket (1 samples, 0.23%)</title><rect x="97.6959%" y="613" width="0.2304%" height="15" fill="rgb(247,86,24)"/><text x="97.9459%" y="623.50"></text></g><g><title>__sys_socket (1 samples, 0.23%)</title><rect x="97.6959%" y="597" width="0.2304%" height="15" fill="rgb(205,101,16)"/><text x="97.9459%" y="607.50"></text></g><g><title>sock_alloc_file (1 samples, 0.23%)</title><rect x="97.6959%" y="581" width="0.2304%" height="15" fill="rgb(246,168,33)"/><text x="97.9459%" y="591.50"></text></g><g><title>alloc_file_pseudo (1 samples, 0.23%)</title><rect x="97.6959%" y="565" width="0.2304%" height="15" fill="rgb(231,114,1)"/><text x="97.9459%" y="575.50"></text></g><g><title>alloc_file (1 samples, 0.23%)</title><rect x="97.6959%" y="549" width="0.2304%" height="15" fill="rgb(207,184,53)"/><text x="97.9459%" y="559.50"></text></g><g><title>alloc_empty_file (1 samples, 0.23%)</title><rect x="97.6959%" y="533" width="0.2304%" height="15" fill="rgb(224,95,51)"/><text x="97.9459%" y="543.50"></text></g><g><title>__alloc_file (1 samples, 0.23%)</title><rect x="97.6959%" y="517" width="0.2304%" height="15" fill="rgb(212,188,45)"/><text x="97.9459%" y="527.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.23%)</title><rect x="97.6959%" y="501" width="0.2304%" height="15" fill="rgb(223,154,38)"/><text x="97.9459%" y="511.50"></text></g><g><title>memcg_kmem_get_cache (1 samples, 0.23%)</title><rect x="97.6959%" y="485" width="0.2304%" height="15" fill="rgb(251,22,52)"/><text x="97.9459%" y="495.50"></text></g><g><title>_start (245 samples, 56.45%)</title><rect x="41.7051%" y="885" width="56.4516%" height="15" fill="rgb(229,209,22)"/><text x="41.9551%" y="895.50">_start</text></g><g><title>_dl_start (1 samples, 0.23%)</title><rect x="97.9263%" y="869" width="0.2304%" height="15" fill="rgb(234,138,34)"/><text x="98.1763%" y="879.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.23%)</title><rect x="97.9263%" y="853" width="0.2304%" height="15" fill="rgb(212,95,11)"/><text x="98.1763%" y="863.50"></text></g><g><title>dl_main (1 samples, 0.23%)</title><rect x="97.9263%" y="837" width="0.2304%" height="15" fill="rgb(240,179,47)"/><text x="98.1763%" y="847.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.23%)</title><rect x="97.9263%" y="821" width="0.2304%" height="15" fill="rgb(240,163,11)"/><text x="98.1763%" y="831.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.23%)</title><rect x="97.9263%" y="805" width="0.2304%" height="15" fill="rgb(236,37,12)"/><text x="98.1763%" y="815.50"></text></g><g><title>openaux (1 samples, 0.23%)</title><rect x="97.9263%" y="789" width="0.2304%" height="15" fill="rgb(232,164,16)"/><text x="98.1763%" y="799.50"></text></g><g><title>_dl_map_object (1 samples, 0.23%)</title><rect x="97.9263%" y="773" width="0.2304%" height="15" fill="rgb(244,205,15)"/><text x="98.1763%" y="783.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.23%)</title><rect x="97.9263%" y="757" width="0.2304%" height="15" fill="rgb(223,117,47)"/><text x="98.1763%" y="767.50"></text></g><g><title>__mprotect (1 samples, 0.23%)</title><rect x="97.9263%" y="741" width="0.2304%" height="15" fill="rgb(244,107,35)"/><text x="98.1763%" y="751.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.23%)</title><rect x="97.9263%" y="725" width="0.2304%" height="15" fill="rgb(205,140,8)"/><text x="98.1763%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.23%)</title><rect x="97.9263%" y="709" width="0.2304%" height="15" fill="rgb(228,84,46)"/><text x="98.1763%" y="719.50"></text></g><g><title>__x64_sys_mprotect (1 samples, 0.23%)</title><rect x="97.9263%" y="693" width="0.2304%" height="15" fill="rgb(254,188,9)"/><text x="98.1763%" y="703.50"></text></g><g><title>do_mprotect_pkey (1 samples, 0.23%)</title><rect x="97.9263%" y="677" width="0.2304%" height="15" fill="rgb(206,112,54)"/><text x="98.1763%" y="687.50"></text></g><g><title>mprotect_fixup (1 samples, 0.23%)</title><rect x="97.9263%" y="661" width="0.2304%" height="15" fill="rgb(216,84,49)"/><text x="98.1763%" y="671.50"></text></g><g><title>change_protection (1 samples, 0.23%)</title><rect x="97.9263%" y="645" width="0.2304%" height="15" fill="rgb(214,194,35)"/><text x="98.1763%" y="655.50"></text></g><g><title>[vmlinux] (1 samples, 0.23%)</title><rect x="98.1567%" y="853" width="0.2304%" height="15" fill="rgb(249,28,3)"/><text x="98.4067%" y="863.50"></text></g><g><title>do_group_exit (1 samples, 0.23%)</title><rect x="98.1567%" y="837" width="0.2304%" height="15" fill="rgb(222,56,52)"/><text x="98.4067%" y="847.50"></text></g><g><title>do_exit (1 samples, 0.23%)</title><rect x="98.1567%" y="821" width="0.2304%" height="15" fill="rgb(245,217,50)"/><text x="98.4067%" y="831.50"></text></g><g><title>mmput (1 samples, 0.23%)</title><rect x="98.1567%" y="805" width="0.2304%" height="15" fill="rgb(213,201,24)"/><text x="98.4067%" y="815.50"></text></g><g><title>exit_mmap (1 samples, 0.23%)</title><rect x="98.1567%" y="789" width="0.2304%" height="15" fill="rgb(248,116,28)"/><text x="98.4067%" y="799.50"></text></g><g><title>unmap_vmas (1 samples, 0.23%)</title><rect x="98.1567%" y="773" width="0.2304%" height="15" fill="rgb(219,72,43)"/><text x="98.4067%" y="783.50"></text></g><g><title>unmap_page_range (1 samples, 0.23%)</title><rect x="98.1567%" y="757" width="0.2304%" height="15" fill="rgb(209,138,14)"/><text x="98.4067%" y="767.50"></text></g><g><title>lobsters (428 samples, 98.62%)</title><rect x="0.0000%" y="901" width="98.6175%" height="15" fill="rgb(222,18,33)"/><text x="0.2500%" y="911.50">lobsters</text></g><g><title>entry_SYSCALL_64 (2 samples, 0.46%)</title><rect x="98.1567%" y="885" width="0.4608%" height="15" fill="rgb(213,199,7)"/><text x="98.4067%" y="895.50"></text></g><g><title>do_syscall_64 (2 samples, 0.46%)</title><rect x="98.1567%" y="869" width="0.4608%" height="15" fill="rgb(250,110,10)"/><text x="98.4067%" y="879.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.23%)</title><rect x="98.3871%" y="853" width="0.2304%" height="15" fill="rgb(248,123,6)"/><text x="98.6371%" y="863.50"></text></g><g><title>do_execve (1 samples, 0.23%)</title><rect x="98.3871%" y="837" width="0.2304%" height="15" fill="rgb(206,91,31)"/><text x="98.6371%" y="847.50"></text></g><g><title>__do_execve_file (1 samples, 0.23%)</title><rect x="98.3871%" y="821" width="0.2304%" height="15" fill="rgb(211,154,13)"/><text x="98.6371%" y="831.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.23%)</title><rect x="98.3871%" y="805" width="0.2304%" height="15" fill="rgb(225,148,7)"/><text x="98.6371%" y="815.50"></text></g><g><title>load_elf_binary (1 samples, 0.23%)</title><rect x="98.3871%" y="789" width="0.2304%" height="15" fill="rgb(220,160,43)"/><text x="98.6371%" y="799.50"></text></g><g><title>__clear_user (1 samples, 0.23%)</title><rect x="98.3871%" y="773" width="0.2304%" height="15" fill="rgb(213,52,39)"/><text x="98.6371%" y="783.50"></text></g><g><title>page_fault (1 samples, 0.23%)</title><rect x="98.3871%" y="757" width="0.2304%" height="15" fill="rgb(243,137,7)"/><text x="98.6371%" y="767.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.23%)</title><rect x="98.3871%" y="741" width="0.2304%" height="15" fill="rgb(230,79,13)"/><text x="98.6371%" y="751.50"></text></g><g><title>handle_mm_fault (1 samples, 0.23%)</title><rect x="98.3871%" y="725" width="0.2304%" height="15" fill="rgb(247,105,23)"/><text x="98.6371%" y="735.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.23%)</title><rect x="98.3871%" y="709" width="0.2304%" height="15" fill="rgb(223,179,41)"/><text x="98.6371%" y="719.50"></text></g><g><title>__pmd_alloc (1 samples, 0.23%)</title><rect x="98.3871%" y="693" width="0.2304%" height="15" fill="rgb(218,9,34)"/><text x="98.6371%" y="703.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.23%)</title><rect x="98.3871%" y="677" width="0.2304%" height="15" fill="rgb(222,106,8)"/><text x="98.6371%" y="687.50"></text></g><g><title>__memcg_kmem_charge_page (1 samples, 0.23%)</title><rect x="98.3871%" y="661" width="0.2304%" height="15" fill="rgb(211,220,0)"/><text x="98.6371%" y="671.50"></text></g><g><title>__memcg_kmem_charge (1 samples, 0.23%)</title><rect x="98.3871%" y="645" width="0.2304%" height="15" fill="rgb(229,52,16)"/><text x="98.6371%" y="655.50"></text></g><g><title>try_charge (1 samples, 0.23%)</title><rect x="98.3871%" y="629" width="0.2304%" height="15" fill="rgb(212,155,18)"/><text x="98.6371%" y="639.50"></text></g><g><title>all (434 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(242,21,14)"/><text x="0.2500%" y="927.50"></text></g><g><title>perf (6 samples, 1.38%)</title><rect x="98.6175%" y="901" width="1.3825%" height="15" fill="rgb(222,19,48)"/><text x="98.8675%" y="911.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 1.38%)</title><rect x="98.6175%" y="885" width="1.3825%" height="15" fill="rgb(232,45,27)"/><text x="98.8675%" y="895.50"></text></g><g><title>do_syscall_64 (6 samples, 1.38%)</title><rect x="98.6175%" y="869" width="1.3825%" height="15" fill="rgb(249,103,42)"/><text x="98.8675%" y="879.50"></text></g><g><title>__x64_sys_execve (6 samples, 1.38%)</title><rect x="98.6175%" y="853" width="1.3825%" height="15" fill="rgb(246,81,33)"/><text x="98.8675%" y="863.50"></text></g><g><title>do_execve (6 samples, 1.38%)</title><rect x="98.6175%" y="837" width="1.3825%" height="15" fill="rgb(252,33,42)"/><text x="98.8675%" y="847.50"></text></g><g><title>__do_execve_file (6 samples, 1.38%)</title><rect x="98.6175%" y="821" width="1.3825%" height="15" fill="rgb(209,212,41)"/><text x="98.8675%" y="831.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 1.38%)</title><rect x="98.6175%" y="805" width="1.3825%" height="15" fill="rgb(207,154,6)"/><text x="98.8675%" y="815.50"></text></g><g><title>load_elf_binary (6 samples, 1.38%)</title><rect x="98.6175%" y="789" width="1.3825%" height="15" fill="rgb(223,64,47)"/><text x="98.8675%" y="799.50"></text></g><g><title>setup_new_exec (6 samples, 1.38%)</title><rect x="98.6175%" y="773" width="1.3825%" height="15" fill="rgb(211,161,38)"/><text x="98.8675%" y="783.50"></text></g><g><title>perf_event_exec (6 samples, 1.38%)</title><rect x="98.6175%" y="757" width="1.3825%" height="15" fill="rgb(219,138,40)"/><text x="98.8675%" y="767.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 1.15%)</title><rect x="98.8479%" y="741" width="1.1521%" height="15" fill="rgb(241,228,46)"/><text x="99.0979%" y="751.50"></text></g><g><title>native_write_msr (5 samples, 1.15%)</title><rect x="98.8479%" y="725" width="1.1521%" height="15" fill="rgb(223,209,38)"/><text x="99.0979%" y="735.50"></text></g></svg></svg>