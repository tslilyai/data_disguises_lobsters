<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="949.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="949.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.26%)</title><rect x="0.0000%" y="869" width="0.2591%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="879.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.26%)</title><rect x="0.0000%" y="853" width="0.2591%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="863.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.26%)</title><rect x="0.0000%" y="837" width="0.2591%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="847.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.26%)</title><rect x="0.0000%" y="821" width="0.2591%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="831.50"></text></g><g><title>__libc_recv (1 samples, 0.26%)</title><rect x="0.0000%" y="805" width="0.2591%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="815.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.26%)</title><rect x="0.0000%" y="789" width="0.2591%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="799.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.26%)</title><rect x="0.2591%" y="869" width="0.2591%" height="15" fill="rgb(207,160,47)"/><text x="0.5091%" y="879.50"></text></g><g><title>[[heap]] (3 samples, 0.78%)</title><rect x="0.0000%" y="885" width="0.7772%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="895.50"></text></g><g><title>_int_free (1 samples, 0.26%)</title><rect x="0.5181%" y="869" width="0.2591%" height="15" fill="rgb(218,30,26)"/><text x="0.7681%" y="879.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="0.7772%" y="869" width="0.2591%" height="15" fill="rgb(220,122,19)"/><text x="1.0272%" y="879.50"></text></g><g><title>__libc_send (1 samples, 0.26%)</title><rect x="1.0363%" y="869" width="0.2591%" height="15" fill="rgb(250,228,42)"/><text x="1.2863%" y="879.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.26%)</title><rect x="1.0363%" y="853" width="0.2591%" height="15" fill="rgb(240,193,28)"/><text x="1.2863%" y="863.50"></text></g><g><title>mysql::conn::query_result::QueryResult&lt;T&gt;::handle_next (1 samples, 0.26%)</title><rect x="1.2953%" y="869" width="0.2591%" height="15" fill="rgb(216,20,37)"/><text x="1.5453%" y="879.50"></text></g><g><title>mysql_common::packets::parse_ok_packet (1 samples, 0.26%)</title><rect x="1.5544%" y="869" width="0.2591%" height="15" fill="rgb(206,188,39)"/><text x="1.8044%" y="879.50"></text></g><g><title>[[stack]] (5 samples, 1.30%)</title><rect x="0.7772%" y="885" width="1.2953%" height="15" fill="rgb(217,207,13)"/><text x="1.0272%" y="895.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.26%)</title><rect x="1.8135%" y="869" width="0.2591%" height="15" fill="rgb(231,73,38)"/><text x="2.0635%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.26%)</title><rect x="2.0725%" y="709" width="0.2591%" height="15" fill="rgb(225,20,46)"/><text x="2.3225%" y="719.50"></text></g><g><title>hwloc_topology_destroy (1 samples, 0.26%)</title><rect x="2.0725%" y="693" width="0.2591%" height="15" fill="rgb(210,31,41)"/><text x="2.3225%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.26%)</title><rect x="2.0725%" y="677" width="0.2591%" height="15" fill="rgb(221,200,47)"/><text x="2.3225%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.26%)</title><rect x="2.0725%" y="661" width="0.2591%" height="15" fill="rgb(226,26,5)"/><text x="2.3225%" y="671.50"></text></g><g><title>dlclose (1 samples, 0.26%)</title><rect x="2.0725%" y="645" width="0.2591%" height="15" fill="rgb(249,33,26)"/><text x="2.3225%" y="655.50"></text></g><g><title>[libdl-2.31.so] (1 samples, 0.26%)</title><rect x="2.0725%" y="629" width="0.2591%" height="15" fill="rgb(235,183,28)"/><text x="2.3225%" y="639.50"></text></g><g><title>__GI__dl_catch_error (1 samples, 0.26%)</title><rect x="2.0725%" y="613" width="0.2591%" height="15" fill="rgb(221,5,38)"/><text x="2.3225%" y="623.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.26%)</title><rect x="2.0725%" y="597" width="0.2591%" height="15" fill="rgb(247,18,42)"/><text x="2.3225%" y="607.50"></text></g><g><title>_dl_close (1 samples, 0.26%)</title><rect x="2.0725%" y="581" width="0.2591%" height="15" fill="rgb(241,131,45)"/><text x="2.3225%" y="591.50"></text></g><g><title>_dl_close_worker (1 samples, 0.26%)</title><rect x="2.0725%" y="565" width="0.2591%" height="15" fill="rgb(249,31,29)"/><text x="2.3225%" y="575.50"></text></g><g><title>_dl_unmap (1 samples, 0.26%)</title><rect x="2.0725%" y="549" width="0.2591%" height="15" fill="rgb(225,111,53)"/><text x="2.3225%" y="559.50"></text></g><g><title>munmap (1 samples, 0.26%)</title><rect x="2.0725%" y="533" width="0.2591%" height="15" fill="rgb(238,160,17)"/><text x="2.3225%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.26%)</title><rect x="2.0725%" y="517" width="0.2591%" height="15" fill="rgb(214,148,48)"/><text x="2.3225%" y="527.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="2.0725%" y="501" width="0.2591%" height="15" fill="rgb(232,36,49)"/><text x="2.3225%" y="511.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.26%)</title><rect x="2.0725%" y="485" width="0.2591%" height="15" fill="rgb(209,103,24)"/><text x="2.3225%" y="495.50"></text></g><g><title>__vm_munmap (1 samples, 0.26%)</title><rect x="2.0725%" y="469" width="0.2591%" height="15" fill="rgb(229,88,8)"/><text x="2.3225%" y="479.50"></text></g><g><title>__do_munmap (1 samples, 0.26%)</title><rect x="2.0725%" y="453" width="0.2591%" height="15" fill="rgb(213,181,19)"/><text x="2.3225%" y="463.50"></text></g><g><title>remove_vma (1 samples, 0.26%)</title><rect x="2.0725%" y="437" width="0.2591%" height="15" fill="rgb(254,191,54)"/><text x="2.3225%" y="447.50"></text></g><g><title>fput_many (1 samples, 0.26%)</title><rect x="2.0725%" y="421" width="0.2591%" height="15" fill="rgb(241,83,37)"/><text x="2.3225%" y="431.50"></text></g><g><title>task_work_add (1 samples, 0.26%)</title><rect x="2.0725%" y="405" width="0.2591%" height="15" fill="rgb(233,36,39)"/><text x="2.3225%" y="415.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.26%)</title><rect x="2.3316%" y="709" width="0.2591%" height="15" fill="rgb(226,3,54)"/><text x="2.5816%" y="719.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.26%)</title><rect x="2.3316%" y="693" width="0.2591%" height="15" fill="rgb(245,192,40)"/><text x="2.5816%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.26%)</title><rect x="2.3316%" y="677" width="0.2591%" height="15" fill="rgb(238,167,29)"/><text x="2.5816%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.26%)</title><rect x="2.3316%" y="661" width="0.2591%" height="15" fill="rgb(232,182,51)"/><text x="2.5816%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.26%)</title><rect x="2.3316%" y="645" width="0.2591%" height="15" fill="rgb(231,60,39)"/><text x="2.5816%" y="655.50"></text></g><g><title>__libc_read (1 samples, 0.26%)</title><rect x="2.3316%" y="629" width="0.2591%" height="15" fill="rgb(208,69,12)"/><text x="2.5816%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.26%)</title><rect x="2.3316%" y="613" width="0.2591%" height="15" fill="rgb(235,93,37)"/><text x="2.5816%" y="623.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="2.3316%" y="597" width="0.2591%" height="15" fill="rgb(213,116,39)"/><text x="2.5816%" y="607.50"></text></g><g><title>ksys_read (1 samples, 0.26%)</title><rect x="2.3316%" y="581" width="0.2591%" height="15" fill="rgb(222,207,29)"/><text x="2.5816%" y="591.50"></text></g><g><title>vfs_read (1 samples, 0.26%)</title><rect x="2.3316%" y="565" width="0.2591%" height="15" fill="rgb(206,96,30)"/><text x="2.5816%" y="575.50"></text></g><g><title>seq_read (1 samples, 0.26%)</title><rect x="2.3316%" y="549" width="0.2591%" height="15" fill="rgb(218,138,4)"/><text x="2.5816%" y="559.50"></text></g><g><title>__kmalloc_node (1 samples, 0.26%)</title><rect x="2.3316%" y="533" width="0.2591%" height="15" fill="rgb(250,191,14)"/><text x="2.5816%" y="543.50"></text></g><g><title>memset_erms (1 samples, 0.26%)</title><rect x="2.3316%" y="517" width="0.2591%" height="15" fill="rgb(239,60,40)"/><text x="2.5816%" y="527.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="2.5907%" y="693" width="0.2591%" height="15" fill="rgb(206,27,48)"/><text x="2.8407%" y="703.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.26%)</title><rect x="2.8497%" y="597" width="0.2591%" height="15" fill="rgb(225,35,8)"/><text x="3.0997%" y="607.50"></text></g><g><title>release_sock (1 samples, 0.26%)</title><rect x="3.3679%" y="501" width="0.2591%" height="15" fill="rgb(250,213,24)"/><text x="3.6179%" y="511.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.26%)</title><rect x="4.6632%" y="421" width="0.2591%" height="15" fill="rgb(247,123,22)"/><text x="4.9132%" y="431.50"></text></g><g><title>__ip_finish_output (1 samples, 0.26%)</title><rect x="4.9223%" y="405" width="0.2591%" height="15" fill="rgb(231,138,38)"/><text x="5.1723%" y="415.50"></text></g><g><title>eth_type_trans (1 samples, 0.26%)</title><rect x="5.4404%" y="341" width="0.2591%" height="15" fill="rgb(231,145,46)"/><text x="5.6904%" y="351.50"></text></g><g><title>enqueue_to_backlog (1 samples, 0.26%)</title><rect x="5.6995%" y="309" width="0.2591%" height="15" fill="rgb(251,118,11)"/><text x="5.9495%" y="319.50"></text></g><g><title>netif_rx (2 samples, 0.52%)</title><rect x="5.6995%" y="341" width="0.5181%" height="15" fill="rgb(217,147,25)"/><text x="5.9495%" y="351.50"></text></g><g><title>netif_rx_internal (2 samples, 0.52%)</title><rect x="5.6995%" y="325" width="0.5181%" height="15" fill="rgb(247,81,37)"/><text x="5.9495%" y="335.50"></text></g><g><title>ktime_get_with_offset (1 samples, 0.26%)</title><rect x="5.9585%" y="309" width="0.2591%" height="15" fill="rgb(209,12,38)"/><text x="6.2085%" y="319.50"></text></g><g><title>dev_hard_start_xmit (4 samples, 1.04%)</title><rect x="5.4404%" y="373" width="1.0363%" height="15" fill="rgb(227,1,9)"/><text x="5.6904%" y="383.50"></text></g><g><title>loopback_xmit (4 samples, 1.04%)</title><rect x="5.4404%" y="357" width="1.0363%" height="15" fill="rgb(248,47,43)"/><text x="5.6904%" y="367.50"></text></g><g><title>skb_clone_tx_timestamp (1 samples, 0.26%)</title><rect x="6.2176%" y="341" width="0.2591%" height="15" fill="rgb(221,10,30)"/><text x="6.4676%" y="351.50"></text></g><g><title>__dev_queue_xmit (7 samples, 1.81%)</title><rect x="5.1813%" y="389" width="1.8135%" height="15" fill="rgb(210,229,1)"/><text x="5.4313%" y="399.50">_..</text></g><g><title>validate_xmit_skb (2 samples, 0.52%)</title><rect x="6.4767%" y="373" width="0.5181%" height="15" fill="rgb(222,148,37)"/><text x="6.7267%" y="383.50"></text></g><g><title>irqtime_account_irq (1 samples, 0.26%)</title><rect x="7.5130%" y="325" width="0.2591%" height="15" fill="rgb(234,67,33)"/><text x="7.7630%" y="335.50"></text></g><g><title>ixgbe_poll (1 samples, 0.26%)</title><rect x="8.5492%" y="309" width="0.2591%" height="15" fill="rgb(247,98,35)"/><text x="8.7992%" y="319.50"></text></g><g><title>__netif_receive_skb_core (1 samples, 0.26%)</title><rect x="8.8083%" y="277" width="0.2591%" height="15" fill="rgb(247,138,52)"/><text x="9.0583%" y="287.50"></text></g><g><title>__inet_lookup_established (3 samples, 0.78%)</title><rect x="9.3264%" y="197" width="0.7772%" height="15" fill="rgb(213,79,30)"/><text x="9.5764%" y="207.50"></text></g><g><title>sk_filter_trim_cap (1 samples, 0.26%)</title><rect x="10.1036%" y="197" width="0.2591%" height="15" fill="rgb(246,177,23)"/><text x="10.3536%" y="207.50"></text></g><g><title>__cgroup_bpf_run_filter_skb (1 samples, 0.26%)</title><rect x="10.1036%" y="181" width="0.2591%" height="15" fill="rgb(230,62,27)"/><text x="10.3536%" y="191.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.26%)</title><rect x="10.1036%" y="165" width="0.2591%" height="15" fill="rgb(216,154,8)"/><text x="10.3536%" y="175.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.26%)</title><rect x="11.9171%" y="85" width="0.2591%" height="15" fill="rgb(244,35,45)"/><text x="12.1671%" y="95.50"></text></g><g><title>_raw_spin_unlock (2 samples, 0.52%)</title><rect x="12.1762%" y="85" width="0.5181%" height="15" fill="rgb(251,115,12)"/><text x="12.4262%" y="95.50"></text></g><g><title>psi_task_change (2 samples, 0.52%)</title><rect x="12.9534%" y="69" width="0.5181%" height="15" fill="rgb(240,54,50)"/><text x="13.2034%" y="79.50"></text></g><g><title>psi_group_change (2 samples, 0.52%)</title><rect x="12.9534%" y="53" width="0.5181%" height="15" fill="rgb(233,84,52)"/><text x="13.2034%" y="63.50"></text></g><g><title>enqueue_task (4 samples, 1.04%)</title><rect x="12.6943%" y="85" width="1.0363%" height="15" fill="rgb(207,117,47)"/><text x="12.9443%" y="95.50"></text></g><g><title>uclamp_rq_inc_id (1 samples, 0.26%)</title><rect x="13.4715%" y="69" width="0.2591%" height="15" fill="rgb(249,43,39)"/><text x="13.7215%" y="79.50"></text></g><g><title>reweight_entity (2 samples, 0.52%)</title><rect x="13.7306%" y="53" width="0.5181%" height="15" fill="rgb(209,38,44)"/><text x="13.9806%" y="63.50"></text></g><g><title>enqueue_task_fair (5 samples, 1.30%)</title><rect x="13.7306%" y="85" width="1.2953%" height="15" fill="rgb(236,212,23)"/><text x="13.9806%" y="95.50"></text></g><g><title>enqueue_entity (5 samples, 1.30%)</title><rect x="13.7306%" y="69" width="1.2953%" height="15" fill="rgb(242,79,21)"/><text x="13.9806%" y="79.50"></text></g><g><title>update_load_avg (3 samples, 0.78%)</title><rect x="14.2487%" y="53" width="0.7772%" height="15" fill="rgb(211,96,35)"/><text x="14.4987%" y="63.50"></text></g><g><title>__update_load_avg_cfs_rq (2 samples, 0.52%)</title><rect x="14.5078%" y="37" width="0.5181%" height="15" fill="rgb(253,215,40)"/><text x="14.7578%" y="47.50"></text></g><g><title>select_task_rq_fair (1 samples, 0.26%)</title><rect x="15.0259%" y="85" width="0.2591%" height="15" fill="rgb(211,81,21)"/><text x="15.2759%" y="95.50"></text></g><g><title>debug_smp_processor_id (1 samples, 0.26%)</title><rect x="15.0259%" y="69" width="0.2591%" height="15" fill="rgb(208,190,38)"/><text x="15.2759%" y="79.50"></text></g><g><title>ttwu_do_wakeup (1 samples, 0.26%)</title><rect x="15.2850%" y="85" width="0.2591%" height="15" fill="rgb(235,213,38)"/><text x="15.5350%" y="95.50"></text></g><g><title>check_preempt_curr (1 samples, 0.26%)</title><rect x="15.2850%" y="69" width="0.2591%" height="15" fill="rgb(237,122,38)"/><text x="15.5350%" y="79.50"></text></g><g><title>resched_curr (1 samples, 0.26%)</title><rect x="15.2850%" y="53" width="0.2591%" height="15" fill="rgb(244,218,35)"/><text x="15.5350%" y="63.50"></text></g><g><title>sock_def_readable (22 samples, 5.70%)</title><rect x="10.6218%" y="165" width="5.6995%" height="15" fill="rgb(240,68,47)"/><text x="10.8718%" y="175.50">sock_de..</text></g><g><title>__wake_up_common_lock (21 samples, 5.44%)</title><rect x="10.8808%" y="149" width="5.4404%" height="15" fill="rgb(210,16,53)"/><text x="11.1308%" y="159.50">__wake_..</text></g><g><title>__wake_up_common (21 samples, 5.44%)</title><rect x="10.8808%" y="133" width="5.4404%" height="15" fill="rgb(235,124,12)"/><text x="11.1308%" y="143.50">__wake_..</text></g><g><title>pollwake (20 samples, 5.18%)</title><rect x="11.1399%" y="117" width="5.1813%" height="15" fill="rgb(224,169,11)"/><text x="11.3899%" y="127.50">pollwa..</text></g><g><title>try_to_wake_up (19 samples, 4.92%)</title><rect x="11.3990%" y="101" width="4.9223%" height="15" fill="rgb(250,166,2)"/><text x="11.6490%" y="111.50">try_to..</text></g><g><title>update_rq_clock (3 samples, 0.78%)</title><rect x="15.5440%" y="85" width="0.7772%" height="15" fill="rgb(242,216,29)"/><text x="15.7940%" y="95.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.26%)</title><rect x="16.0622%" y="69" width="0.2591%" height="15" fill="rgb(230,116,27)"/><text x="16.3122%" y="79.50"></text></g><g><title>sched_clock (1 samples, 0.26%)</title><rect x="16.0622%" y="53" width="0.2591%" height="15" fill="rgb(228,99,48)"/><text x="16.3122%" y="63.50"></text></g><g><title>native_sched_clock (1 samples, 0.26%)</title><rect x="16.0622%" y="37" width="0.2591%" height="15" fill="rgb(253,11,6)"/><text x="16.3122%" y="47.50"></text></g><g><title>__kfree_skb (1 samples, 0.26%)</title><rect x="16.8394%" y="149" width="0.2591%" height="15" fill="rgb(247,143,39)"/><text x="17.0894%" y="159.50"></text></g><g><title>skb_release_data (1 samples, 0.26%)</title><rect x="16.8394%" y="133" width="0.2591%" height="15" fill="rgb(236,97,10)"/><text x="17.0894%" y="143.50"></text></g><g><title>bictcp_cong_avoid (1 samples, 0.26%)</title><rect x="17.0984%" y="149" width="0.2591%" height="15" fill="rgb(233,208,19)"/><text x="17.3484%" y="159.50"></text></g><g><title>kmem_cache_free (1 samples, 0.26%)</title><rect x="17.3575%" y="149" width="0.2591%" height="15" fill="rgb(216,164,2)"/><text x="17.6075%" y="159.50"></text></g><g><title>tcp_ack_update_rtt (2 samples, 0.52%)</title><rect x="17.6166%" y="149" width="0.5181%" height="15" fill="rgb(220,129,5)"/><text x="17.8666%" y="159.50"></text></g><g><title>jiffies_to_usecs (1 samples, 0.26%)</title><rect x="17.8756%" y="133" width="0.2591%" height="15" fill="rgb(242,17,10)"/><text x="18.1256%" y="143.50"></text></g><g><title>tcp_ack (8 samples, 2.07%)</title><rect x="16.3212%" y="165" width="2.0725%" height="15" fill="rgb(242,107,0)"/><text x="16.5712%" y="175.50">t..</text></g><g><title>tcp_chrono_stop (1 samples, 0.26%)</title><rect x="18.1347%" y="149" width="0.2591%" height="15" fill="rgb(251,28,31)"/><text x="18.3847%" y="159.50"></text></g><g><title>tcp_mstamp_refresh (2 samples, 0.52%)</title><rect x="18.3938%" y="165" width="0.5181%" height="15" fill="rgb(233,223,10)"/><text x="18.6438%" y="175.50"></text></g><g><title>ktime_get (1 samples, 0.26%)</title><rect x="18.6528%" y="149" width="0.2591%" height="15" fill="rgb(215,21,27)"/><text x="18.9028%" y="159.50"></text></g><g><title>tcp_queue_rcv (2 samples, 0.52%)</title><rect x="18.9119%" y="165" width="0.5181%" height="15" fill="rgb(232,23,21)"/><text x="19.1619%" y="175.50"></text></g><g><title>ip_local_deliver (41 samples, 10.62%)</title><rect x="9.0674%" y="261" width="10.6218%" height="15" fill="rgb(244,5,23)"/><text x="9.3174%" y="271.50">ip_local_deliver</text></g><g><title>ip_local_deliver_finish (41 samples, 10.62%)</title><rect x="9.0674%" y="245" width="10.6218%" height="15" fill="rgb(226,81,46)"/><text x="9.3174%" y="255.50">ip_local_deliver..</text></g><g><title>ip_protocol_deliver_rcu (41 samples, 10.62%)</title><rect x="9.0674%" y="229" width="10.6218%" height="15" fill="rgb(247,70,30)"/><text x="9.3174%" y="239.50">ip_protocol_deli..</text></g><g><title>tcp_v4_rcv (40 samples, 10.36%)</title><rect x="9.3264%" y="213" width="10.3627%" height="15" fill="rgb(212,68,19)"/><text x="9.5764%" y="223.50">tcp_v4_rcv</text></g><g><title>tcp_v4_do_rcv (36 samples, 9.33%)</title><rect x="10.3627%" y="197" width="9.3264%" height="15" fill="rgb(240,187,13)"/><text x="10.6127%" y="207.50">tcp_v4_do_rcv</text></g><g><title>tcp_rcv_established (36 samples, 9.33%)</title><rect x="10.3627%" y="181" width="9.3264%" height="15" fill="rgb(223,113,26)"/><text x="10.6127%" y="191.50">tcp_rcv_estab..</text></g><g><title>tcp_send_delayed_ack (1 samples, 0.26%)</title><rect x="19.4301%" y="165" width="0.2591%" height="15" fill="rgb(206,192,2)"/><text x="19.6801%" y="175.50"></text></g><g><title>ip_rcv_core (1 samples, 0.26%)</title><rect x="19.6891%" y="261" width="0.2591%" height="15" fill="rgb(241,108,4)"/><text x="19.9391%" y="271.50"></text></g><g><title>__tcp_transmit_skb (60 samples, 15.54%)</title><rect x="4.6632%" y="453" width="15.5440%" height="15" fill="rgb(247,173,49)"/><text x="4.9132%" y="463.50">__tcp_transmit_skb</text></g><g><title>__ip_queue_xmit (60 samples, 15.54%)</title><rect x="4.6632%" y="437" width="15.5440%" height="15" fill="rgb(224,114,35)"/><text x="4.9132%" y="447.50">__ip_queue_xmit</text></g><g><title>ip_output (59 samples, 15.28%)</title><rect x="4.9223%" y="421" width="15.2850%" height="15" fill="rgb(245,159,27)"/><text x="5.1723%" y="431.50">ip_output</text></g><g><title>ip_finish_output2 (58 samples, 15.03%)</title><rect x="5.1813%" y="405" width="15.0259%" height="15" fill="rgb(245,172,44)"/><text x="5.4313%" y="415.50">ip_finish_output2</text></g><g><title>__local_bh_enable_ip (51 samples, 13.21%)</title><rect x="6.9948%" y="389" width="13.2124%" height="15" fill="rgb(236,23,11)"/><text x="7.2448%" y="399.50">__local_bh_enable_ip</text></g><g><title>do_softirq (51 samples, 13.21%)</title><rect x="6.9948%" y="373" width="13.2124%" height="15" fill="rgb(205,117,38)"/><text x="7.2448%" y="383.50">do_softirq</text></g><g><title>do_softirq_own_stack (50 samples, 12.95%)</title><rect x="7.2539%" y="357" width="12.9534%" height="15" fill="rgb(237,72,25)"/><text x="7.5039%" y="367.50">do_softirq_own_stack</text></g><g><title>__do_softirq (50 samples, 12.95%)</title><rect x="7.2539%" y="341" width="12.9534%" height="15" fill="rgb(244,70,9)"/><text x="7.5039%" y="351.50">__do_softirq</text></g><g><title>net_rx_action (48 samples, 12.44%)</title><rect x="7.7720%" y="325" width="12.4352%" height="15" fill="rgb(217,125,39)"/><text x="8.0220%" y="335.50">net_rx_action</text></g><g><title>process_backlog (44 samples, 11.40%)</title><rect x="8.8083%" y="309" width="11.3990%" height="15" fill="rgb(235,36,10)"/><text x="9.0583%" y="319.50">process_backlog</text></g><g><title>__netif_receive_skb_one_core (44 samples, 11.40%)</title><rect x="8.8083%" y="293" width="11.3990%" height="15" fill="rgb(251,123,47)"/><text x="9.0583%" y="303.50">__netif_receive_s..</text></g><g><title>ip_rcv (43 samples, 11.14%)</title><rect x="9.0674%" y="277" width="11.1399%" height="15" fill="rgb(221,13,13)"/><text x="9.3174%" y="287.50">ip_rcv</text></g><g><title>ip_rcv_finish (1 samples, 0.26%)</title><rect x="19.9482%" y="261" width="0.2591%" height="15" fill="rgb(238,131,9)"/><text x="20.1982%" y="271.50"></text></g><g><title>__tcp_push_pending_frames (65 samples, 16.84%)</title><rect x="4.1451%" y="485" width="16.8394%" height="15" fill="rgb(211,50,8)"/><text x="4.3951%" y="495.50">__tcp_push_pending_frames</text></g><g><title>tcp_write_xmit (65 samples, 16.84%)</title><rect x="4.1451%" y="469" width="16.8394%" height="15" fill="rgb(245,182,24)"/><text x="4.3951%" y="479.50">tcp_write_xmit</text></g><g><title>tcp_schedule_loss_probe.part.0 (3 samples, 0.78%)</title><rect x="20.2073%" y="453" width="0.7772%" height="15" fill="rgb(242,14,37)"/><text x="20.4573%" y="463.50"></text></g><g><title>sk_stream_alloc_skb (2 samples, 0.52%)</title><rect x="20.9845%" y="485" width="0.5181%" height="15" fill="rgb(246,228,12)"/><text x="21.2345%" y="495.50"></text></g><g><title>__alloc_skb (2 samples, 0.52%)</title><rect x="20.9845%" y="469" width="0.5181%" height="15" fill="rgb(213,55,15)"/><text x="21.2345%" y="479.50"></text></g><g><title>__ksize (1 samples, 0.26%)</title><rect x="21.2435%" y="453" width="0.2591%" height="15" fill="rgb(209,9,3)"/><text x="21.4935%" y="463.50"></text></g><g><title>do_syscall_64 (72 samples, 18.65%)</title><rect x="3.1088%" y="581" width="18.6528%" height="15" fill="rgb(230,59,30)"/><text x="3.3588%" y="591.50">do_syscall_64</text></g><g><title>__x64_sys_sendto (72 samples, 18.65%)</title><rect x="3.1088%" y="565" width="18.6528%" height="15" fill="rgb(209,121,21)"/><text x="3.3588%" y="575.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (72 samples, 18.65%)</title><rect x="3.1088%" y="549" width="18.6528%" height="15" fill="rgb(220,109,13)"/><text x="3.3588%" y="559.50">__sys_sendto</text></g><g><title>sock_sendmsg (71 samples, 18.39%)</title><rect x="3.3679%" y="533" width="18.3938%" height="15" fill="rgb(232,18,1)"/><text x="3.6179%" y="543.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (71 samples, 18.39%)</title><rect x="3.3679%" y="517" width="18.3938%" height="15" fill="rgb(215,41,42)"/><text x="3.6179%" y="527.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (70 samples, 18.13%)</title><rect x="3.6269%" y="501" width="18.1347%" height="15" fill="rgb(224,123,36)"/><text x="3.8769%" y="511.50">tcp_sendmsg_locked</text></g><g><title>tcp_send_mss (1 samples, 0.26%)</title><rect x="21.5026%" y="485" width="0.2591%" height="15" fill="rgb(240,125,3)"/><text x="21.7526%" y="495.50"></text></g><g><title>entry_SYSCALL_64 (75 samples, 19.43%)</title><rect x="3.1088%" y="597" width="19.4301%" height="15" fill="rgb(205,98,50)"/><text x="3.3588%" y="607.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (3 samples, 0.78%)</title><rect x="21.7617%" y="581" width="0.7772%" height="15" fill="rgb(205,185,37)"/><text x="22.0117%" y="591.50"></text></g><g><title>__libc_start_main (82 samples, 21.24%)</title><rect x="2.0725%" y="869" width="21.2435%" height="15" fill="rgb(238,207,15)"/><text x="2.3225%" y="879.50">__libc_start_main</text></g><g><title>main (82 samples, 21.24%)</title><rect x="2.0725%" y="853" width="21.2435%" height="15" fill="rgb(213,199,42)"/><text x="2.3225%" y="863.50">main</text></g><g><title>std::rt::lang_start_internal (82 samples, 21.24%)</title><rect x="2.0725%" y="837" width="21.2435%" height="15" fill="rgb(235,201,11)"/><text x="2.3225%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (82 samples, 21.24%)</title><rect x="2.0725%" y="821" width="21.2435%" height="15" fill="rgb(207,46,11)"/><text x="2.3225%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (82 samples, 21.24%)</title><rect x="2.0725%" y="805" width="21.2435%" height="15" fill="rgb(241,35,35)"/><text x="2.3225%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (82 samples, 21.24%)</title><rect x="2.0725%" y="789" width="21.2435%" height="15" fill="rgb(243,32,47)"/><text x="2.3225%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (82 samples, 21.24%)</title><rect x="2.0725%" y="773" width="21.2435%" height="15" fill="rgb(247,202,23)"/><text x="2.3225%" y="783.50">core::ops::function::impls::&lt;impl ..</text></g><g><title>std::rt::lang_start::_{{closure}} (82 samples, 21.24%)</title><rect x="2.0725%" y="757" width="21.2435%" height="15" fill="rgb(219,102,11)"/><text x="2.3225%" y="767.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (82 samples, 21.24%)</title><rect x="2.0725%" y="741" width="21.2435%" height="15" fill="rgb(243,110,44)"/><text x="2.3225%" y="751.50">std::sys_common::backtrace::__rust..</text></g><g><title>lobsters::main (82 samples, 21.24%)</title><rect x="2.0725%" y="725" width="21.2435%" height="15" fill="rgb(222,74,54)"/><text x="2.3225%" y="735.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (80 samples, 20.73%)</title><rect x="2.5907%" y="709" width="20.7254%" height="15" fill="rgb(216,99,12)"/><text x="2.8407%" y="719.50">mysql::conn::queryable::Queryable..</text></g><g><title>mysql::conn::Conn::_query (79 samples, 20.47%)</title><rect x="2.8497%" y="693" width="20.4663%" height="15" fill="rgb(226,22,26)"/><text x="3.0997%" y="703.50">mysql::conn::Conn::_query</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (79 samples, 20.47%)</title><rect x="2.8497%" y="677" width="20.4663%" height="15" fill="rgb(217,163,10)"/><text x="3.0997%" y="687.50">mysql_common::proto::sync_framed..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (79 samples, 20.47%)</title><rect x="2.8497%" y="661" width="20.4663%" height="15" fill="rgb(213,25,53)"/><text x="3.0997%" y="671.50">std::io::buffered::BufWriter&lt;W&gt;:..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (79 samples, 20.47%)</title><rect x="2.8497%" y="645" width="20.4663%" height="15" fill="rgb(252,105,26)"/><text x="3.0997%" y="655.50">&lt;std::net::tcp::TcpStream as std..</text></g><g><title>std::sys_common::net::TcpStream::write (79 samples, 20.47%)</title><rect x="2.8497%" y="629" width="20.4663%" height="15" fill="rgb(220,39,43)"/><text x="3.0997%" y="639.50">std::sys_common::net::TcpStream:..</text></g><g><title>__libc_send (79 samples, 20.47%)</title><rect x="2.8497%" y="613" width="20.4663%" height="15" fill="rgb(229,68,48)"/><text x="3.0997%" y="623.50">__libc_send</text></g><g><title>syscall_return_via_sysret (3 samples, 0.78%)</title><rect x="22.5389%" y="597" width="0.7772%" height="15" fill="rgb(252,8,32)"/><text x="22.7889%" y="607.50"></text></g><g><title>lobsters::init_database (1 samples, 0.26%)</title><rect x="23.3161%" y="853" width="0.2591%" height="15" fill="rgb(223,20,43)"/><text x="23.5661%" y="863.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.26%)</title><rect x="23.3161%" y="837" width="0.2591%" height="15" fill="rgb(229,81,49)"/><text x="23.5661%" y="847.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.26%)</title><rect x="23.3161%" y="821" width="0.2591%" height="15" fill="rgb(236,28,36)"/><text x="23.5661%" y="831.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.26%)</title><rect x="23.3161%" y="805" width="0.2591%" height="15" fill="rgb(249,185,26)"/><text x="23.5661%" y="815.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.26%)</title><rect x="23.3161%" y="789" width="0.2591%" height="15" fill="rgb(249,174,33)"/><text x="23.5661%" y="799.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.26%)</title><rect x="23.3161%" y="773" width="0.2591%" height="15" fill="rgb(233,201,37)"/><text x="23.5661%" y="783.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.26%)</title><rect x="23.3161%" y="757" width="0.2591%" height="15" fill="rgb(221,78,26)"/><text x="23.5661%" y="767.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (1 samples, 0.26%)</title><rect x="23.3161%" y="741" width="0.2591%" height="15" fill="rgb(250,127,30)"/><text x="23.5661%" y="751.50"></text></g><g><title>std::sys_common::net::TcpStream::read (1 samples, 0.26%)</title><rect x="23.3161%" y="725" width="0.2591%" height="15" fill="rgb(230,49,44)"/><text x="23.5661%" y="735.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.26%)</title><rect x="23.3161%" y="709" width="0.2591%" height="15" fill="rgb(229,67,23)"/><text x="23.5661%" y="719.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.26%)</title><rect x="23.3161%" y="693" width="0.2591%" height="15" fill="rgb(249,83,47)"/><text x="23.5661%" y="703.50"></text></g><g><title>__libc_recv (1 samples, 0.26%)</title><rect x="23.3161%" y="677" width="0.2591%" height="15" fill="rgb(215,43,3)"/><text x="23.5661%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.26%)</title><rect x="23.3161%" y="661" width="0.2591%" height="15" fill="rgb(238,154,13)"/><text x="23.5661%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="23.3161%" y="645" width="0.2591%" height="15" fill="rgb(219,56,2)"/><text x="23.5661%" y="655.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 0.26%)</title><rect x="23.3161%" y="629" width="0.2591%" height="15" fill="rgb(233,0,4)"/><text x="23.5661%" y="639.50"></text></g><g><title>__sys_recvfrom (1 samples, 0.26%)</title><rect x="23.3161%" y="613" width="0.2591%" height="15" fill="rgb(235,30,7)"/><text x="23.5661%" y="623.50"></text></g><g><title>inet_recvmsg (1 samples, 0.26%)</title><rect x="23.3161%" y="597" width="0.2591%" height="15" fill="rgb(250,79,13)"/><text x="23.5661%" y="607.50"></text></g><g><title>tcp_recvmsg (1 samples, 0.26%)</title><rect x="23.3161%" y="581" width="0.2591%" height="15" fill="rgb(211,146,34)"/><text x="23.5661%" y="591.50"></text></g><g><title>sk_wait_data (1 samples, 0.26%)</title><rect x="23.3161%" y="565" width="0.2591%" height="15" fill="rgb(228,22,38)"/><text x="23.5661%" y="575.50"></text></g><g><title>_raw_spin_unlock_bh (1 samples, 0.26%)</title><rect x="23.3161%" y="549" width="0.2591%" height="15" fill="rgb(235,168,5)"/><text x="23.5661%" y="559.50"></text></g><g><title>mysql::conn::Conn::connect (1 samples, 0.26%)</title><rect x="23.5751%" y="837" width="0.2591%" height="15" fill="rgb(221,155,16)"/><text x="23.8251%" y="847.50"></text></g><g><title>mysql_common::packets::HandshakePacket::server_version_parsed (1 samples, 0.26%)</title><rect x="23.5751%" y="821" width="0.2591%" height="15" fill="rgb(215,215,53)"/><text x="23.8251%" y="831.50"></text></g><g><title>regex::re_bytes::Regex::captures (1 samples, 0.26%)</title><rect x="23.5751%" y="805" width="0.2591%" height="15" fill="rgb(223,4,10)"/><text x="23.8251%" y="815.50"></text></g><g><title>thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (1 samples, 0.26%)</title><rect x="23.5751%" y="789" width="0.2591%" height="15" fill="rgb(234,103,6)"/><text x="23.8251%" y="799.50"></text></g><g><title>regex::exec::ProgramCacheInner::new (1 samples, 0.26%)</title><rect x="23.5751%" y="773" width="0.2591%" height="15" fill="rgb(227,97,0)"/><text x="23.8251%" y="783.50"></text></g><g><title>regex::dfa::Cache::new (1 samples, 0.26%)</title><rect x="23.5751%" y="757" width="0.2591%" height="15" fill="rgb(234,150,53)"/><text x="23.8251%" y="767.50"></text></g><g><title>regex::sparse::SparseSet::new (1 samples, 0.26%)</title><rect x="23.5751%" y="741" width="0.2591%" height="15" fill="rgb(228,201,54)"/><text x="23.8251%" y="751.50"></text></g><g><title>__memset_avx2_erms (1 samples, 0.26%)</title><rect x="23.5751%" y="725" width="0.2591%" height="15" fill="rgb(222,22,37)"/><text x="23.8251%" y="735.50"></text></g><g><title>mysql::conn::Conn::new (2 samples, 0.52%)</title><rect x="23.5751%" y="853" width="0.5181%" height="15" fill="rgb(237,53,32)"/><text x="23.8251%" y="863.50"></text></g><g><title>mysql::conn::Conn::connect_stream (1 samples, 0.26%)</title><rect x="23.8342%" y="837" width="0.2591%" height="15" fill="rgb(233,25,53)"/><text x="24.0842%" y="847.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::new (1 samples, 0.26%)</title><rect x="23.8342%" y="821" width="0.2591%" height="15" fill="rgb(210,40,34)"/><text x="24.0842%" y="831.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="23.8342%" y="805" width="0.2591%" height="15" fill="rgb(241,220,44)"/><text x="24.0842%" y="815.50"></text></g><g><title>_int_malloc (1 samples, 0.26%)</title><rect x="23.8342%" y="789" width="0.2591%" height="15" fill="rgb(235,28,35)"/><text x="24.0842%" y="799.50"></text></g><g><title>sysmalloc (1 samples, 0.26%)</title><rect x="23.8342%" y="773" width="0.2591%" height="15" fill="rgb(210,56,17)"/><text x="24.0842%" y="783.50"></text></g><g><title>page_fault (1 samples, 0.26%)</title><rect x="23.8342%" y="757" width="0.2591%" height="15" fill="rgb(224,130,29)"/><text x="24.0842%" y="767.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="23.8342%" y="741" width="0.2591%" height="15" fill="rgb(235,212,8)"/><text x="24.0842%" y="751.50"></text></g><g><title>handle_mm_fault (1 samples, 0.26%)</title><rect x="23.8342%" y="725" width="0.2591%" height="15" fill="rgb(223,33,50)"/><text x="24.0842%" y="735.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="23.8342%" y="709" width="0.2591%" height="15" fill="rgb(219,149,13)"/><text x="24.0842%" y="719.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.26%)</title><rect x="23.8342%" y="693" width="0.2591%" height="15" fill="rgb(250,156,29)"/><text x="24.0842%" y="703.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.26%)</title><rect x="23.8342%" y="677" width="0.2591%" height="15" fill="rgb(216,193,19)"/><text x="24.0842%" y="687.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.26%)</title><rect x="23.8342%" y="661" width="0.2591%" height="15" fill="rgb(216,135,14)"/><text x="24.0842%" y="671.50"></text></g><g><title>prep_new_page (1 samples, 0.26%)</title><rect x="23.8342%" y="645" width="0.2591%" height="15" fill="rgb(241,47,5)"/><text x="24.0842%" y="655.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.26%)</title><rect x="23.8342%" y="629" width="0.2591%" height="15" fill="rgb(233,42,35)"/><text x="24.0842%" y="639.50"></text></g><g><title>clear_page_erms (1 samples, 0.26%)</title><rect x="23.8342%" y="613" width="0.2591%" height="15" fill="rgb(231,13,6)"/><text x="24.0842%" y="623.50"></text></g><g><title>mysql::conn::Conn::handle_ok (1 samples, 0.26%)</title><rect x="24.0933%" y="805" width="0.2591%" height="15" fill="rgb(207,181,40)"/><text x="24.3433%" y="815.50"></text></g><g><title>__kfree_skb (1 samples, 0.26%)</title><rect x="26.1658%" y="581" width="0.2591%" height="15" fill="rgb(254,173,49)"/><text x="26.4158%" y="591.50"></text></g><g><title>skb_release_head_state (1 samples, 0.26%)</title><rect x="26.1658%" y="565" width="0.2591%" height="15" fill="rgb(221,1,38)"/><text x="26.4158%" y="575.50"></text></g><g><title>dst_release (1 samples, 0.26%)</title><rect x="26.1658%" y="549" width="0.2591%" height="15" fill="rgb(206,124,46)"/><text x="26.4158%" y="559.50"></text></g><g><title>_raw_spin_lock_bh (2 samples, 0.52%)</title><rect x="26.4249%" y="565" width="0.5181%" height="15" fill="rgb(249,21,11)"/><text x="26.6749%" y="575.50"></text></g><g><title>add_wait_queue (1 samples, 0.26%)</title><rect x="26.9430%" y="565" width="0.2591%" height="15" fill="rgb(222,201,40)"/><text x="27.1930%" y="575.50"></text></g><g><title>remove_wait_queue (3 samples, 0.78%)</title><rect x="27.2021%" y="565" width="0.7772%" height="15" fill="rgb(235,61,29)"/><text x="27.4521%" y="575.50"></text></g><g><title>_raw_spin_lock_irqsave (3 samples, 0.78%)</title><rect x="27.2021%" y="549" width="0.7772%" height="15" fill="rgb(219,207,3)"/><text x="27.4521%" y="559.50"></text></g><g><title>preempt_count_add (2 samples, 0.52%)</title><rect x="27.4611%" y="533" width="0.5181%" height="15" fill="rgb(222,56,46)"/><text x="27.7111%" y="543.50"></text></g><g><title>in_lock_functions (1 samples, 0.26%)</title><rect x="27.7202%" y="517" width="0.2591%" height="15" fill="rgb(239,76,54)"/><text x="27.9702%" y="527.50"></text></g><g><title>dequeue_task_fair (1 samples, 0.26%)</title><rect x="28.4974%" y="501" width="0.2591%" height="15" fill="rgb(231,124,27)"/><text x="28.7474%" y="511.50"></text></g><g><title>dequeue_entity (1 samples, 0.26%)</title><rect x="28.4974%" y="485" width="0.2591%" height="15" fill="rgb(249,195,6)"/><text x="28.7474%" y="495.50"></text></g><g><title>update_load_avg (1 samples, 0.26%)</title><rect x="28.4974%" y="469" width="0.2591%" height="15" fill="rgb(237,174,47)"/><text x="28.7474%" y="479.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.26%)</title><rect x="28.4974%" y="453" width="0.2591%" height="15" fill="rgb(206,201,31)"/><text x="28.7474%" y="463.50"></text></g><g><title>psi_task_change (3 samples, 0.78%)</title><rect x="28.7565%" y="501" width="0.7772%" height="15" fill="rgb(231,57,52)"/><text x="29.0065%" y="511.50"></text></g><g><title>psi_group_change (3 samples, 0.78%)</title><rect x="28.7565%" y="485" width="0.7772%" height="15" fill="rgb(248,177,22)"/><text x="29.0065%" y="495.50"></text></g><g><title>record_times (1 samples, 0.26%)</title><rect x="29.2746%" y="469" width="0.2591%" height="15" fill="rgb(215,211,37)"/><text x="29.5246%" y="479.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.26%)</title><rect x="29.2746%" y="453" width="0.2591%" height="15" fill="rgb(241,128,51)"/><text x="29.5246%" y="463.50"></text></g><g><title>uclamp_rq_dec_id (1 samples, 0.26%)</title><rect x="29.5337%" y="501" width="0.2591%" height="15" fill="rgb(227,165,31)"/><text x="29.7837%" y="511.50"></text></g><g><title>sk_wait_data (14 samples, 3.63%)</title><rect x="26.4249%" y="581" width="3.6269%" height="15" fill="rgb(228,167,24)"/><text x="26.6749%" y="591.50">sk_w..</text></g><g><title>wait_woken (8 samples, 2.07%)</title><rect x="27.9793%" y="565" width="2.0725%" height="15" fill="rgb(228,143,12)"/><text x="28.2293%" y="575.50">w..</text></g><g><title>schedule_timeout (7 samples, 1.81%)</title><rect x="28.2383%" y="549" width="1.8135%" height="15" fill="rgb(249,149,8)"/><text x="28.4883%" y="559.50">s..</text></g><g><title>schedule (7 samples, 1.81%)</title><rect x="28.2383%" y="533" width="1.8135%" height="15" fill="rgb(243,35,44)"/><text x="28.4883%" y="543.50">s..</text></g><g><title>__schedule (6 samples, 1.55%)</title><rect x="28.4974%" y="517" width="1.5544%" height="15" fill="rgb(246,89,9)"/><text x="28.7474%" y="527.50"></text></g><g><title>update_rq_clock (1 samples, 0.26%)</title><rect x="29.7927%" y="501" width="0.2591%" height="15" fill="rgb(233,213,13)"/><text x="30.0427%" y="511.50"></text></g><g><title>update_irq_load_avg (1 samples, 0.26%)</title><rect x="29.7927%" y="485" width="0.2591%" height="15" fill="rgb(233,141,41)"/><text x="30.0427%" y="495.50"></text></g><g><title>inet_recvmsg (20 samples, 5.18%)</title><rect x="25.1295%" y="613" width="5.1813%" height="15" fill="rgb(239,167,4)"/><text x="25.3795%" y="623.50">inet_r..</text></g><g><title>tcp_recvmsg (20 samples, 5.18%)</title><rect x="25.1295%" y="597" width="5.1813%" height="15" fill="rgb(209,217,16)"/><text x="25.3795%" y="607.50">tcp_re..</text></g><g><title>skb_copy_datagram_iter (1 samples, 0.26%)</title><rect x="30.0518%" y="581" width="0.2591%" height="15" fill="rgb(219,88,35)"/><text x="30.3018%" y="591.50"></text></g><g><title>__skb_datagram_iter (1 samples, 0.26%)</title><rect x="30.0518%" y="565" width="0.2591%" height="15" fill="rgb(220,193,23)"/><text x="30.3018%" y="575.50"></text></g><g><title>_copy_to_iter (1 samples, 0.26%)</title><rect x="30.0518%" y="549" width="0.2591%" height="15" fill="rgb(230,90,52)"/><text x="30.3018%" y="559.50"></text></g><g><title>copy_user_generic_unrolled (1 samples, 0.26%)</title><rect x="30.0518%" y="533" width="0.2591%" height="15" fill="rgb(252,106,19)"/><text x="30.3018%" y="543.50"></text></g><g><title>page_fault (1 samples, 0.26%)</title><rect x="30.0518%" y="517" width="0.2591%" height="15" fill="rgb(206,74,20)"/><text x="30.3018%" y="527.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="30.0518%" y="501" width="0.2591%" height="15" fill="rgb(230,138,44)"/><text x="30.3018%" y="511.50"></text></g><g><title>handle_mm_fault (1 samples, 0.26%)</title><rect x="30.0518%" y="485" width="0.2591%" height="15" fill="rgb(235,182,43)"/><text x="30.3018%" y="495.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="30.0518%" y="469" width="0.2591%" height="15" fill="rgb(242,16,51)"/><text x="30.3018%" y="479.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.26%)</title><rect x="30.0518%" y="453" width="0.2591%" height="15" fill="rgb(248,9,4)"/><text x="30.3018%" y="463.50"></text></g><g><title>__x64_sys_recvfrom (21 samples, 5.44%)</title><rect x="25.1295%" y="645" width="5.4404%" height="15" fill="rgb(210,31,22)"/><text x="25.3795%" y="655.50">__x64_s..</text></g><g><title>__sys_recvfrom (21 samples, 5.44%)</title><rect x="25.1295%" y="629" width="5.4404%" height="15" fill="rgb(239,54,39)"/><text x="25.3795%" y="639.50">__sys_r..</text></g><g><title>sock_recvmsg (1 samples, 0.26%)</title><rect x="30.3109%" y="613" width="0.2591%" height="15" fill="rgb(230,99,41)"/><text x="30.5609%" y="623.50"></text></g><g><title>syscall_slow_exit_work (1 samples, 0.26%)</title><rect x="30.5699%" y="645" width="0.2591%" height="15" fill="rgb(253,106,12)"/><text x="30.8199%" y="655.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.26%)</title><rect x="30.5699%" y="629" width="0.2591%" height="15" fill="rgb(213,46,41)"/><text x="30.8199%" y="639.50"></text></g><g><title>kfree (1 samples, 0.26%)</title><rect x="30.5699%" y="613" width="0.2591%" height="15" fill="rgb(215,133,35)"/><text x="30.8199%" y="623.50"></text></g><g><title>do_syscall_64 (23 samples, 5.96%)</title><rect x="25.1295%" y="661" width="5.9585%" height="15" fill="rgb(213,28,5)"/><text x="25.3795%" y="671.50">do_sysca..</text></g><g><title>syscall_trace_enter (1 samples, 0.26%)</title><rect x="30.8290%" y="645" width="0.2591%" height="15" fill="rgb(215,77,49)"/><text x="31.0790%" y="655.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.26%)</title><rect x="30.8290%" y="629" width="0.2591%" height="15" fill="rgb(248,100,22)"/><text x="31.0790%" y="639.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (28 samples, 7.25%)</title><rect x="24.8705%" y="773" width="7.2539%" height="15" fill="rgb(208,67,9)"/><text x="25.1205%" y="783.50">&lt;std::io::..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (28 samples, 7.25%)</title><rect x="24.8705%" y="757" width="7.2539%" height="15" fill="rgb(219,133,21)"/><text x="25.1205%" y="767.50">&lt;std::net:..</text></g><g><title>std::sys_common::net::TcpStream::read (28 samples, 7.25%)</title><rect x="24.8705%" y="741" width="7.2539%" height="15" fill="rgb(246,46,29)"/><text x="25.1205%" y="751.50">std::sys_c..</text></g><g><title>std::sys::unix::net::Socket::read (28 samples, 7.25%)</title><rect x="24.8705%" y="725" width="7.2539%" height="15" fill="rgb(246,185,52)"/><text x="25.1205%" y="735.50">std::sys::..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (28 samples, 7.25%)</title><rect x="24.8705%" y="709" width="7.2539%" height="15" fill="rgb(252,136,11)"/><text x="25.1205%" y="719.50">std::sys::..</text></g><g><title>__libc_recv (28 samples, 7.25%)</title><rect x="24.8705%" y="693" width="7.2539%" height="15" fill="rgb(219,138,53)"/><text x="25.1205%" y="703.50">__libc_recv</text></g><g><title>entry_SYSCALL_64 (28 samples, 7.25%)</title><rect x="24.8705%" y="677" width="7.2539%" height="15" fill="rgb(211,51,23)"/><text x="25.1205%" y="687.50">entry_SYSC..</text></g><g><title>prepare_exit_to_usermode (4 samples, 1.04%)</title><rect x="31.0881%" y="661" width="1.0363%" height="15" fill="rgb(247,221,28)"/><text x="31.3381%" y="671.50"></text></g><g><title>mysql::conn::Conn::read_packet (31 samples, 8.03%)</title><rect x="24.3523%" y="805" width="8.0311%" height="15" fill="rgb(251,222,45)"/><text x="24.6023%" y="815.50">mysql::conn..</text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 8.03%)</title><rect x="24.3523%" y="789" width="8.0311%" height="15" fill="rgb(217,162,53)"/><text x="24.6023%" y="799.50">&lt;mysql_comm..</text></g><g><title>mysql_common::proto::codec::PacketCodec::decode (1 samples, 0.26%)</title><rect x="32.1244%" y="773" width="0.2591%" height="15" fill="rgb(229,93,14)"/><text x="32.3744%" y="783.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::decode (1 samples, 0.26%)</title><rect x="32.1244%" y="757" width="0.2591%" height="15" fill="rgb(209,67,49)"/><text x="32.3744%" y="767.50"></text></g><g><title>mysql_common::proto::codec::ChunkDecoder::decode (1 samples, 0.26%)</title><rect x="32.1244%" y="741" width="0.2591%" height="15" fill="rgb(213,87,29)"/><text x="32.3744%" y="751.50"></text></g><g><title>lobsters::main (36 samples, 9.33%)</title><rect x="23.3161%" y="869" width="9.3264%" height="15" fill="rgb(205,151,52)"/><text x="23.5661%" y="879.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (33 samples, 8.55%)</title><rect x="24.0933%" y="853" width="8.5492%" height="15" fill="rgb(253,215,39)"/><text x="24.3433%" y="863.50">mysql::conn:..</text></g><g><title>mysql::conn::Conn::_query (33 samples, 8.55%)</title><rect x="24.0933%" y="837" width="8.5492%" height="15" fill="rgb(221,220,41)"/><text x="24.3433%" y="847.50">mysql::conn:..</text></g><g><title>mysql::conn::Conn::handle_result_set (33 samples, 8.55%)</title><rect x="24.0933%" y="821" width="8.5492%" height="15" fill="rgb(218,133,21)"/><text x="24.3433%" y="831.50">mysql::conn:..</text></g><g><title>mysql_common::packets::parse_ok_packet (1 samples, 0.26%)</title><rect x="32.3834%" y="805" width="0.2591%" height="15" fill="rgb(221,193,43)"/><text x="32.6334%" y="815.50"></text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (1 samples, 0.26%)</title><rect x="32.3834%" y="789" width="0.2591%" height="15" fill="rgb(240,128,52)"/><text x="32.6334%" y="799.50"></text></g><g><title>mysql_common::packets::OkPacket::into_owned (1 samples, 0.26%)</title><rect x="32.6425%" y="869" width="0.2591%" height="15" fill="rgb(253,114,12)"/><text x="32.8925%" y="879.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.26%)</title><rect x="32.9016%" y="869" width="0.2591%" height="15" fill="rgb(215,223,47)"/><text x="33.1516%" y="879.50"></text></g><g><title>std::io::error::Error::_new (1 samples, 0.26%)</title><rect x="33.1606%" y="869" width="0.2591%" height="15" fill="rgb(248,225,23)"/><text x="33.4106%" y="879.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 0.26%)</title><rect x="33.4197%" y="869" width="0.2591%" height="15" fill="rgb(250,108,0)"/><text x="33.6697%" y="879.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.26%)</title><rect x="33.4197%" y="853" width="0.2591%" height="15" fill="rgb(228,208,7)"/><text x="33.6697%" y="863.50"></text></g><g><title>lobsters::main (1 samples, 0.26%)</title><rect x="33.4197%" y="837" width="0.2591%" height="15" fill="rgb(244,45,10)"/><text x="33.6697%" y="847.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.26%)</title><rect x="33.4197%" y="821" width="0.2591%" height="15" fill="rgb(207,125,25)"/><text x="33.6697%" y="831.50"></text></g><g><title>&lt;mysql::conn::query_result::QueryResult&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.26%)</title><rect x="33.4197%" y="805" width="0.2591%" height="15" fill="rgb(210,195,18)"/><text x="33.6697%" y="815.50"></text></g><g><title>mysql::conn::query_result::QueryResult&lt;T&gt;::handle_next (1 samples, 0.26%)</title><rect x="33.4197%" y="789" width="0.2591%" height="15" fill="rgb(249,80,12)"/><text x="33.6697%" y="799.50"></text></g><g><title>link_path_walk (1 samples, 0.26%)</title><rect x="33.6788%" y="549" width="0.2591%" height="15" fill="rgb(221,65,9)"/><text x="33.9288%" y="559.50"></text></g><g><title>inode_permission.part.0 (1 samples, 0.26%)</title><rect x="33.6788%" y="533" width="0.2591%" height="15" fill="rgb(235,49,36)"/><text x="33.9288%" y="543.50"></text></g><g><title>generic_permission (1 samples, 0.26%)</title><rect x="33.6788%" y="517" width="0.2591%" height="15" fill="rgb(225,32,20)"/><text x="33.9288%" y="527.50"></text></g><g><title>in_group_p (1 samples, 0.26%)</title><rect x="33.6788%" y="501" width="0.2591%" height="15" fill="rgb(215,141,46)"/><text x="33.9288%" y="511.50"></text></g><g><title>[unknown] (124 samples, 32.12%)</title><rect x="2.0725%" y="885" width="32.1244%" height="15" fill="rgb(250,160,47)"/><text x="2.3225%" y="895.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (2 samples, 0.52%)</title><rect x="33.6788%" y="869" width="0.5181%" height="15" fill="rgb(216,222,40)"/><text x="33.9288%" y="879.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.52%)</title><rect x="33.6788%" y="853" width="0.5181%" height="15" fill="rgb(234,217,39)"/><text x="33.9288%" y="863.50"></text></g><g><title>std::panicking::try (2 samples, 0.52%)</title><rect x="33.6788%" y="837" width="0.5181%" height="15" fill="rgb(207,178,40)"/><text x="33.9288%" y="847.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.52%)</title><rect x="33.6788%" y="821" width="0.5181%" height="15" fill="rgb(221,136,13)"/><text x="33.9288%" y="831.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 0.52%)</title><rect x="33.6788%" y="805" width="0.5181%" height="15" fill="rgb(249,199,10)"/><text x="33.9288%" y="815.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (2 samples, 0.52%)</title><rect x="33.6788%" y="789" width="0.5181%" height="15" fill="rgb(249,222,13)"/><text x="33.9288%" y="799.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.52%)</title><rect x="33.6788%" y="773" width="0.5181%" height="15" fill="rgb(244,185,38)"/><text x="33.9288%" y="783.50"></text></g><g><title>lobsters::main (2 samples, 0.52%)</title><rect x="33.6788%" y="757" width="0.5181%" height="15" fill="rgb(236,202,9)"/><text x="33.9288%" y="767.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.52%)</title><rect x="33.6788%" y="741" width="0.5181%" height="15" fill="rgb(250,229,37)"/><text x="33.9288%" y="751.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.52%)</title><rect x="33.6788%" y="725" width="0.5181%" height="15" fill="rgb(206,174,23)"/><text x="33.9288%" y="735.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.52%)</title><rect x="33.6788%" y="709" width="0.5181%" height="15" fill="rgb(211,33,43)"/><text x="33.9288%" y="719.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.52%)</title><rect x="33.6788%" y="693" width="0.5181%" height="15" fill="rgb(245,58,50)"/><text x="33.9288%" y="703.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.52%)</title><rect x="33.6788%" y="677" width="0.5181%" height="15" fill="rgb(244,68,36)"/><text x="33.9288%" y="687.50"></text></g><g><title>__GI___openat (2 samples, 0.52%)</title><rect x="33.6788%" y="661" width="0.5181%" height="15" fill="rgb(232,229,15)"/><text x="33.9288%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.52%)</title><rect x="33.6788%" y="645" width="0.5181%" height="15" fill="rgb(254,30,23)"/><text x="33.9288%" y="655.50"></text></g><g><title>do_syscall_64 (2 samples, 0.52%)</title><rect x="33.6788%" y="629" width="0.5181%" height="15" fill="rgb(235,160,14)"/><text x="33.9288%" y="639.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.52%)</title><rect x="33.6788%" y="613" width="0.5181%" height="15" fill="rgb(212,155,44)"/><text x="33.9288%" y="623.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.52%)</title><rect x="33.6788%" y="597" width="0.5181%" height="15" fill="rgb(226,2,50)"/><text x="33.9288%" y="607.50"></text></g><g><title>do_filp_open (2 samples, 0.52%)</title><rect x="33.6788%" y="581" width="0.5181%" height="15" fill="rgb(234,177,6)"/><text x="33.9288%" y="591.50"></text></g><g><title>path_openat (2 samples, 0.52%)</title><rect x="33.6788%" y="565" width="0.5181%" height="15" fill="rgb(217,24,9)"/><text x="33.9288%" y="575.50"></text></g><g><title>lookup_fast.constprop.0 (1 samples, 0.26%)</title><rect x="33.9378%" y="549" width="0.2591%" height="15" fill="rgb(220,13,46)"/><text x="34.1878%" y="559.50"></text></g><g><title>kernfs_dop_revalidate (1 samples, 0.26%)</title><rect x="33.9378%" y="533" width="0.2591%" height="15" fill="rgb(239,221,27)"/><text x="34.1878%" y="543.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.26%)</title><rect x="34.4560%" y="709" width="0.2591%" height="15" fill="rgb(222,198,25)"/><text x="34.7060%" y="719.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.26%)</title><rect x="34.7150%" y="693" width="0.2591%" height="15" fill="rgb(211,99,13)"/><text x="34.9650%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.26%)</title><rect x="34.7150%" y="677" width="0.2591%" height="15" fill="rgb(232,111,31)"/><text x="34.9650%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.26%)</title><rect x="34.7150%" y="661" width="0.2591%" height="15" fill="rgb(245,82,37)"/><text x="34.9650%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.26%)</title><rect x="34.7150%" y="645" width="0.2591%" height="15" fill="rgb(227,149,46)"/><text x="34.9650%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.26%)</title><rect x="34.7150%" y="629" width="0.2591%" height="15" fill="rgb(218,36,50)"/><text x="34.9650%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (1 samples, 0.26%)</title><rect x="34.7150%" y="613" width="0.2591%" height="15" fill="rgb(226,80,48)"/><text x="34.9650%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.26%)</title><rect x="34.7150%" y="597" width="0.2591%" height="15" fill="rgb(238,224,15)"/><text x="34.9650%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.26%)</title><rect x="34.7150%" y="581" width="0.2591%" height="15" fill="rgb(241,136,10)"/><text x="34.9650%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.26%)</title><rect x="34.7150%" y="565" width="0.2591%" height="15" fill="rgb(208,32,45)"/><text x="34.9650%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.26%)</title><rect x="34.9741%" y="565" width="0.2591%" height="15" fill="rgb(207,135,9)"/><text x="35.2241%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.26%)</title><rect x="34.9741%" y="549" width="0.2591%" height="15" fill="rgb(206,86,44)"/><text x="35.2241%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.26%)</title><rect x="34.9741%" y="533" width="0.2591%" height="15" fill="rgb(245,177,15)"/><text x="35.2241%" y="543.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.78%)</title><rect x="34.7150%" y="709" width="0.7772%" height="15" fill="rgb(206,64,50)"/><text x="34.9650%" y="719.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.52%)</title><rect x="34.9741%" y="693" width="0.5181%" height="15" fill="rgb(234,36,40)"/><text x="35.2241%" y="703.50"></text></g><g><title>core::fmt::write (2 samples, 0.52%)</title><rect x="34.9741%" y="677" width="0.5181%" height="15" fill="rgb(213,64,8)"/><text x="35.2241%" y="687.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.52%)</title><rect x="34.9741%" y="661" width="0.5181%" height="15" fill="rgb(210,75,36)"/><text x="35.2241%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.52%)</title><rect x="34.9741%" y="645" width="0.5181%" height="15" fill="rgb(229,88,21)"/><text x="35.2241%" y="655.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.52%)</title><rect x="34.9741%" y="629" width="0.5181%" height="15" fill="rgb(252,204,47)"/><text x="35.2241%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.52%)</title><rect x="34.9741%" y="613" width="0.5181%" height="15" fill="rgb(208,77,27)"/><text x="35.2241%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.52%)</title><rect x="34.9741%" y="597" width="0.5181%" height="15" fill="rgb(221,76,26)"/><text x="35.2241%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.52%)</title><rect x="34.9741%" y="581" width="0.5181%" height="15" fill="rgb(225,139,18)"/><text x="35.2241%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.26%)</title><rect x="35.2332%" y="565" width="0.2591%" height="15" fill="rgb(230,137,11)"/><text x="35.4832%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.26%)</title><rect x="35.2332%" y="549" width="0.2591%" height="15" fill="rgb(212,28,1)"/><text x="35.4832%" y="559.50"></text></g><g><title>decor::helpers::process_schema_stmt (1 samples, 0.26%)</title><rect x="35.4922%" y="709" width="0.2591%" height="15" fill="rgb(248,164,17)"/><text x="35.7422%" y="719.50"></text></g><g><title>&lt;core::str::pattern::StrSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.26%)</title><rect x="35.4922%" y="693" width="0.2591%" height="15" fill="rgb(222,171,42)"/><text x="35.7422%" y="703.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (1 samples, 0.26%)</title><rect x="35.4922%" y="677" width="0.2591%" height="15" fill="rgb(243,84,45)"/><text x="35.7422%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.52%)</title><rect x="36.0104%" y="629" width="0.5181%" height="15" fill="rgb(252,49,23)"/><text x="36.2604%" y="639.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.52%)</title><rect x="36.0104%" y="613" width="0.5181%" height="15" fill="rgb(215,19,7)"/><text x="36.2604%" y="623.50"></text></g><g><title>[libhwloc.so.15.2.0] (237 samples, 61.40%)</title><rect x="35.7513%" y="645" width="61.3990%" height="15" fill="rgb(238,81,41)"/><text x="36.0013%" y="655.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (234 samples, 60.62%)</title><rect x="36.5285%" y="629" width="60.6218%" height="15" fill="rgb(210,199,37)"/><text x="36.7785%" y="639.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__GI___sched_setaffinity_new (234 samples, 60.62%)</title><rect x="36.5285%" y="613" width="60.6218%" height="15" fill="rgb(244,192,49)"/><text x="36.7785%" y="623.50">__GI___sched_setaffinity_new</text></g><g><title>entry_SYSCALL_64 (234 samples, 60.62%)</title><rect x="36.5285%" y="597" width="60.6218%" height="15" fill="rgb(226,211,11)"/><text x="36.7785%" y="607.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (234 samples, 60.62%)</title><rect x="36.5285%" y="581" width="60.6218%" height="15" fill="rgb(236,162,54)"/><text x="36.7785%" y="591.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (234 samples, 60.62%)</title><rect x="36.5285%" y="565" width="60.6218%" height="15" fill="rgb(220,229,9)"/><text x="36.7785%" y="575.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (234 samples, 60.62%)</title><rect x="36.5285%" y="549" width="60.6218%" height="15" fill="rgb(250,87,22)"/><text x="36.7785%" y="559.50">sched_setaffinity</text></g><g><title>__set_cpus_allowed_ptr (234 samples, 60.62%)</title><rect x="36.5285%" y="533" width="60.6218%" height="15" fill="rgb(239,43,17)"/><text x="36.7785%" y="543.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (234 samples, 60.62%)</title><rect x="36.5285%" y="517" width="60.6218%" height="15" fill="rgb(231,177,25)"/><text x="36.7785%" y="527.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (234 samples, 60.62%)</title><rect x="36.5285%" y="501" width="60.6218%" height="15" fill="rgb(219,179,1)"/><text x="36.7785%" y="511.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (234 samples, 60.62%)</title><rect x="36.5285%" y="485" width="60.6218%" height="15" fill="rgb(238,219,53)"/><text x="36.7785%" y="495.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (234 samples, 60.62%)</title><rect x="36.5285%" y="469" width="60.6218%" height="15" fill="rgb(232,167,36)"/><text x="36.7785%" y="479.50">preempt_schedule_common</text></g><g><title>__schedule (234 samples, 60.62%)</title><rect x="36.5285%" y="453" width="60.6218%" height="15" fill="rgb(244,19,51)"/><text x="36.7785%" y="463.50">__schedule</text></g><g><title>finish_task_switch (234 samples, 60.62%)</title><rect x="36.5285%" y="437" width="60.6218%" height="15" fill="rgb(224,6,22)"/><text x="36.7785%" y="447.50">finish_task_switch</text></g><g><title>__perf_event_task_sched_in (234 samples, 60.62%)</title><rect x="36.5285%" y="421" width="60.6218%" height="15" fill="rgb(224,145,5)"/><text x="36.7785%" y="431.50">__perf_event_task_sched_in</text></g><g><title>__intel_pmu_enable_all.constprop.0 (234 samples, 60.62%)</title><rect x="36.5285%" y="405" width="60.6218%" height="15" fill="rgb(234,130,49)"/><text x="36.7785%" y="415.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (234 samples, 60.62%)</title><rect x="36.5285%" y="389" width="60.6218%" height="15" fill="rgb(254,6,2)"/><text x="36.7785%" y="399.50">native_write_msr</text></g><g><title>hwloc::Topology::new (238 samples, 61.66%)</title><rect x="35.7513%" y="709" width="61.6580%" height="15" fill="rgb(208,96,46)"/><text x="36.0013%" y="719.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (238 samples, 61.66%)</title><rect x="35.7513%" y="693" width="61.6580%" height="15" fill="rgb(239,3,39)"/><text x="36.0013%" y="703.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 61.66%)</title><rect x="35.7513%" y="677" width="61.6580%" height="15" fill="rgb(233,210,1)"/><text x="36.0013%" y="687.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (238 samples, 61.66%)</title><rect x="35.7513%" y="661" width="61.6580%" height="15" fill="rgb(244,137,37)"/><text x="36.0013%" y="671.50">[libhwloc.so.15.2.0]</text></g><g><title>fgets (1 samples, 0.26%)</title><rect x="97.1503%" y="645" width="0.2591%" height="15" fill="rgb(240,136,2)"/><text x="97.4003%" y="655.50"></text></g><g><title>__GI__IO_getline_info (1 samples, 0.26%)</title><rect x="97.1503%" y="629" width="0.2591%" height="15" fill="rgb(239,18,37)"/><text x="97.4003%" y="639.50"></text></g><g><title>__GI__IO_default_uflow (1 samples, 0.26%)</title><rect x="97.1503%" y="613" width="0.2591%" height="15" fill="rgb(218,185,22)"/><text x="97.4003%" y="623.50"></text></g><g><title>__GI__IO_file_underflow (1 samples, 0.26%)</title><rect x="97.1503%" y="597" width="0.2591%" height="15" fill="rgb(225,218,4)"/><text x="97.4003%" y="607.50"></text></g><g><title>__GI___read (1 samples, 0.26%)</title><rect x="97.1503%" y="581" width="0.2591%" height="15" fill="rgb(230,182,32)"/><text x="97.4003%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.26%)</title><rect x="97.1503%" y="565" width="0.2591%" height="15" fill="rgb(242,56,43)"/><text x="97.4003%" y="575.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="97.1503%" y="549" width="0.2591%" height="15" fill="rgb(233,99,24)"/><text x="97.4003%" y="559.50"></text></g><g><title>ksys_read (1 samples, 0.26%)</title><rect x="97.1503%" y="533" width="0.2591%" height="15" fill="rgb(234,209,42)"/><text x="97.4003%" y="543.50"></text></g><g><title>vfs_read (1 samples, 0.26%)</title><rect x="97.1503%" y="517" width="0.2591%" height="15" fill="rgb(227,7,12)"/><text x="97.4003%" y="527.50"></text></g><g><title>seq_read (1 samples, 0.26%)</title><rect x="97.1503%" y="501" width="0.2591%" height="15" fill="rgb(245,203,43)"/><text x="97.4003%" y="511.50"></text></g><g><title>show_cpuinfo (1 samples, 0.26%)</title><rect x="97.1503%" y="485" width="0.2591%" height="15" fill="rgb(238,205,33)"/><text x="97.4003%" y="495.50"></text></g><g><title>__libc_start_main (245 samples, 63.47%)</title><rect x="34.1969%" y="869" width="63.4715%" height="15" fill="rgb(231,56,7)"/><text x="34.4469%" y="879.50">__libc_start_main</text></g><g><title>main (245 samples, 63.47%)</title><rect x="34.1969%" y="853" width="63.4715%" height="15" fill="rgb(244,186,29)"/><text x="34.4469%" y="863.50">main</text></g><g><title>std::rt::lang_start_internal (245 samples, 63.47%)</title><rect x="34.1969%" y="837" width="63.4715%" height="15" fill="rgb(234,111,31)"/><text x="34.4469%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (245 samples, 63.47%)</title><rect x="34.1969%" y="821" width="63.4715%" height="15" fill="rgb(241,149,10)"/><text x="34.4469%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (245 samples, 63.47%)</title><rect x="34.1969%" y="805" width="63.4715%" height="15" fill="rgb(249,206,44)"/><text x="34.4469%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (245 samples, 63.47%)</title><rect x="34.1969%" y="789" width="63.4715%" height="15" fill="rgb(251,153,30)"/><text x="34.4469%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (245 samples, 63.47%)</title><rect x="34.1969%" y="773" width="63.4715%" height="15" fill="rgb(239,152,38)"/><text x="34.4469%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (245 samples, 63.47%)</title><rect x="34.1969%" y="757" width="63.4715%" height="15" fill="rgb(249,139,47)"/><text x="34.4469%" y="767.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (245 samples, 63.47%)</title><rect x="34.1969%" y="741" width="63.4715%" height="15" fill="rgb(244,64,35)"/><text x="34.4469%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters::main (245 samples, 63.47%)</title><rect x="34.1969%" y="725" width="63.4715%" height="15" fill="rgb(216,46,15)"/><text x="34.4469%" y="735.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.26%)</title><rect x="97.4093%" y="709" width="0.2591%" height="15" fill="rgb(250,74,19)"/><text x="97.6593%" y="719.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.26%)</title><rect x="97.4093%" y="693" width="0.2591%" height="15" fill="rgb(249,42,33)"/><text x="97.6593%" y="703.50"></text></g><g><title>_start (246 samples, 63.73%)</title><rect x="34.1969%" y="885" width="63.7306%" height="15" fill="rgb(242,149,17)"/><text x="34.4469%" y="895.50">_start</text></g><g><title>_dl_start (1 samples, 0.26%)</title><rect x="97.6684%" y="869" width="0.2591%" height="15" fill="rgb(244,29,21)"/><text x="97.9184%" y="879.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.26%)</title><rect x="97.6684%" y="853" width="0.2591%" height="15" fill="rgb(220,130,37)"/><text x="97.9184%" y="863.50"></text></g><g><title>dl_main (1 samples, 0.26%)</title><rect x="97.6684%" y="837" width="0.2591%" height="15" fill="rgb(211,67,2)"/><text x="97.9184%" y="847.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.26%)</title><rect x="97.6684%" y="821" width="0.2591%" height="15" fill="rgb(235,68,52)"/><text x="97.9184%" y="831.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.26%)</title><rect x="97.6684%" y="805" width="0.2591%" height="15" fill="rgb(246,142,3)"/><text x="97.9184%" y="815.50"></text></g><g><title>openaux (1 samples, 0.26%)</title><rect x="97.6684%" y="789" width="0.2591%" height="15" fill="rgb(241,25,7)"/><text x="97.9184%" y="799.50"></text></g><g><title>_dl_map_object (1 samples, 0.26%)</title><rect x="97.6684%" y="773" width="0.2591%" height="15" fill="rgb(242,119,39)"/><text x="97.9184%" y="783.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.26%)</title><rect x="97.6684%" y="757" width="0.2591%" height="15" fill="rgb(241,98,45)"/><text x="97.9184%" y="767.50"></text></g><g><title>__mmap (1 samples, 0.26%)</title><rect x="97.6684%" y="741" width="0.2591%" height="15" fill="rgb(254,28,30)"/><text x="97.9184%" y="751.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.26%)</title><rect x="97.6684%" y="725" width="0.2591%" height="15" fill="rgb(241,142,54)"/><text x="97.9184%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.26%)</title><rect x="97.6684%" y="709" width="0.2591%" height="15" fill="rgb(222,85,15)"/><text x="97.9184%" y="719.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.26%)</title><rect x="97.6684%" y="693" width="0.2591%" height="15" fill="rgb(210,85,47)"/><text x="97.9184%" y="703.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.26%)</title><rect x="97.6684%" y="677" width="0.2591%" height="15" fill="rgb(224,206,25)"/><text x="97.9184%" y="687.50"></text></g><g><title>do_mmap (1 samples, 0.26%)</title><rect x="97.6684%" y="661" width="0.2591%" height="15" fill="rgb(243,201,19)"/><text x="97.9184%" y="671.50"></text></g><g><title>mmap_region (1 samples, 0.26%)</title><rect x="97.6684%" y="645" width="0.2591%" height="15" fill="rgb(236,59,4)"/><text x="97.9184%" y="655.50"></text></g><g><title>perf_event_mmap (1 samples, 0.26%)</title><rect x="97.6684%" y="629" width="0.2591%" height="15" fill="rgb(254,179,45)"/><text x="97.9184%" y="639.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.26%)</title><rect x="97.6684%" y="613" width="0.2591%" height="15" fill="rgb(226,14,10)"/><text x="97.9184%" y="623.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.26%)</title><rect x="97.6684%" y="597" width="0.2591%" height="15" fill="rgb(244,27,41)"/><text x="97.9184%" y="607.50"></text></g><g><title>[vmlinux] (1 samples, 0.26%)</title><rect x="97.9275%" y="853" width="0.2591%" height="15" fill="rgb(235,35,32)"/><text x="98.1775%" y="863.50"></text></g><g><title>do_group_exit (1 samples, 0.26%)</title><rect x="97.9275%" y="837" width="0.2591%" height="15" fill="rgb(218,68,31)"/><text x="98.1775%" y="847.50"></text></g><g><title>do_exit (1 samples, 0.26%)</title><rect x="97.9275%" y="821" width="0.2591%" height="15" fill="rgb(207,120,37)"/><text x="98.1775%" y="831.50"></text></g><g><title>mmput (1 samples, 0.26%)</title><rect x="97.9275%" y="805" width="0.2591%" height="15" fill="rgb(227,98,0)"/><text x="98.1775%" y="815.50"></text></g><g><title>exit_mmap (1 samples, 0.26%)</title><rect x="97.9275%" y="789" width="0.2591%" height="15" fill="rgb(207,7,3)"/><text x="98.1775%" y="799.50"></text></g><g><title>unmap_vmas (1 samples, 0.26%)</title><rect x="97.9275%" y="773" width="0.2591%" height="15" fill="rgb(206,98,19)"/><text x="98.1775%" y="783.50"></text></g><g><title>unmap_page_range (1 samples, 0.26%)</title><rect x="97.9275%" y="757" width="0.2591%" height="15" fill="rgb(217,5,26)"/><text x="98.1775%" y="767.50"></text></g><g><title>__tlb_remove_page_size (1 samples, 0.26%)</title><rect x="97.9275%" y="741" width="0.2591%" height="15" fill="rgb(235,190,38)"/><text x="98.1775%" y="751.50"></text></g><g><title>__get_free_pages (1 samples, 0.26%)</title><rect x="97.9275%" y="725" width="0.2591%" height="15" fill="rgb(247,86,24)"/><text x="98.1775%" y="735.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.26%)</title><rect x="97.9275%" y="709" width="0.2591%" height="15" fill="rgb(205,101,16)"/><text x="98.1775%" y="719.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.26%)</title><rect x="97.9275%" y="693" width="0.2591%" height="15" fill="rgb(246,168,33)"/><text x="98.1775%" y="703.50"></text></g><g><title>lobsters (380 samples, 98.45%)</title><rect x="0.0000%" y="901" width="98.4456%" height="15" fill="rgb(231,114,1)"/><text x="0.2500%" y="911.50">lobsters</text></g><g><title>entry_SYSCALL_64 (2 samples, 0.52%)</title><rect x="97.9275%" y="885" width="0.5181%" height="15" fill="rgb(207,184,53)"/><text x="98.1775%" y="895.50"></text></g><g><title>do_syscall_64 (2 samples, 0.52%)</title><rect x="97.9275%" y="869" width="0.5181%" height="15" fill="rgb(224,95,51)"/><text x="98.1775%" y="879.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.26%)</title><rect x="98.1865%" y="853" width="0.2591%" height="15" fill="rgb(212,188,45)"/><text x="98.4365%" y="863.50"></text></g><g><title>do_execve (1 samples, 0.26%)</title><rect x="98.1865%" y="837" width="0.2591%" height="15" fill="rgb(223,154,38)"/><text x="98.4365%" y="847.50"></text></g><g><title>__do_execve_file (1 samples, 0.26%)</title><rect x="98.1865%" y="821" width="0.2591%" height="15" fill="rgb(251,22,52)"/><text x="98.4365%" y="831.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.26%)</title><rect x="98.1865%" y="805" width="0.2591%" height="15" fill="rgb(229,209,22)"/><text x="98.4365%" y="815.50"></text></g><g><title>load_elf_binary (1 samples, 0.26%)</title><rect x="98.1865%" y="789" width="0.2591%" height="15" fill="rgb(234,138,34)"/><text x="98.4365%" y="799.50"></text></g><g><title>__clear_user (1 samples, 0.26%)</title><rect x="98.1865%" y="773" width="0.2591%" height="15" fill="rgb(212,95,11)"/><text x="98.4365%" y="783.50"></text></g><g><title>page_fault (1 samples, 0.26%)</title><rect x="98.1865%" y="757" width="0.2591%" height="15" fill="rgb(240,179,47)"/><text x="98.4365%" y="767.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.26%)</title><rect x="98.1865%" y="741" width="0.2591%" height="15" fill="rgb(240,163,11)"/><text x="98.4365%" y="751.50"></text></g><g><title>handle_mm_fault (1 samples, 0.26%)</title><rect x="98.1865%" y="725" width="0.2591%" height="15" fill="rgb(236,37,12)"/><text x="98.4365%" y="735.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.26%)</title><rect x="98.1865%" y="709" width="0.2591%" height="15" fill="rgb(232,164,16)"/><text x="98.4365%" y="719.50"></text></g><g><title>__do_fault (1 samples, 0.26%)</title><rect x="98.1865%" y="693" width="0.2591%" height="15" fill="rgb(244,205,15)"/><text x="98.4365%" y="703.50"></text></g><g><title>[[ext4]] (1 samples, 0.26%)</title><rect x="98.1865%" y="677" width="0.2591%" height="15" fill="rgb(223,117,47)"/><text x="98.4365%" y="687.50"></text></g><g><title>filemap_fault (1 samples, 0.26%)</title><rect x="98.1865%" y="661" width="0.2591%" height="15" fill="rgb(244,107,35)"/><text x="98.4365%" y="671.50"></text></g><g><title>pagecache_get_page (1 samples, 0.26%)</title><rect x="98.1865%" y="645" width="0.2591%" height="15" fill="rgb(205,140,8)"/><text x="98.4365%" y="655.50"></text></g><g><title>find_get_entry (1 samples, 0.26%)</title><rect x="98.1865%" y="629" width="0.2591%" height="15" fill="rgb(228,84,46)"/><text x="98.4365%" y="639.50"></text></g><g><title>xas_load (1 samples, 0.26%)</title><rect x="98.1865%" y="613" width="0.2591%" height="15" fill="rgb(254,188,9)"/><text x="98.4365%" y="623.50"></text></g><g><title>all (386 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(206,112,54)"/><text x="0.2500%" y="927.50"></text></g><g><title>perf (6 samples, 1.55%)</title><rect x="98.4456%" y="901" width="1.5544%" height="15" fill="rgb(216,84,49)"/><text x="98.6956%" y="911.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 1.55%)</title><rect x="98.4456%" y="885" width="1.5544%" height="15" fill="rgb(214,194,35)"/><text x="98.6956%" y="895.50"></text></g><g><title>do_syscall_64 (6 samples, 1.55%)</title><rect x="98.4456%" y="869" width="1.5544%" height="15" fill="rgb(249,28,3)"/><text x="98.6956%" y="879.50"></text></g><g><title>__x64_sys_execve (6 samples, 1.55%)</title><rect x="98.4456%" y="853" width="1.5544%" height="15" fill="rgb(222,56,52)"/><text x="98.6956%" y="863.50"></text></g><g><title>do_execve (6 samples, 1.55%)</title><rect x="98.4456%" y="837" width="1.5544%" height="15" fill="rgb(245,217,50)"/><text x="98.6956%" y="847.50"></text></g><g><title>__do_execve_file (6 samples, 1.55%)</title><rect x="98.4456%" y="821" width="1.5544%" height="15" fill="rgb(213,201,24)"/><text x="98.6956%" y="831.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 1.55%)</title><rect x="98.4456%" y="805" width="1.5544%" height="15" fill="rgb(248,116,28)"/><text x="98.6956%" y="815.50"></text></g><g><title>load_elf_binary (6 samples, 1.55%)</title><rect x="98.4456%" y="789" width="1.5544%" height="15" fill="rgb(219,72,43)"/><text x="98.6956%" y="799.50"></text></g><g><title>setup_new_exec (6 samples, 1.55%)</title><rect x="98.4456%" y="773" width="1.5544%" height="15" fill="rgb(209,138,14)"/><text x="98.6956%" y="783.50"></text></g><g><title>perf_event_exec (6 samples, 1.55%)</title><rect x="98.4456%" y="757" width="1.5544%" height="15" fill="rgb(222,18,33)"/><text x="98.6956%" y="767.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 1.30%)</title><rect x="98.7047%" y="741" width="1.2953%" height="15" fill="rgb(213,199,7)"/><text x="98.9547%" y="751.50"></text></g><g><title>native_write_msr (5 samples, 1.30%)</title><rect x="98.7047%" y="725" width="1.2953%" height="15" fill="rgb(250,110,10)"/><text x="98.9547%" y="735.50"></text></g></svg></svg>