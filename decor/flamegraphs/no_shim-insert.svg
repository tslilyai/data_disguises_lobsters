<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1014" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="997.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="997.00"> </text><svg id="frames" x="10" width="1180"><g><title>entry_SYSCALL_64 (1 samples, 0.25%)</title><rect x="0.0000%" y="837" width="0.2475%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="847.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (2 samples, 0.50%)</title><rect x="0.0000%" y="917" width="0.4950%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="927.50"></text></g><g><title>std::sys_common::net::TcpStream::read (2 samples, 0.50%)</title><rect x="0.0000%" y="901" width="0.4950%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="911.50"></text></g><g><title>std::sys::unix::net::Socket::read (2 samples, 0.50%)</title><rect x="0.0000%" y="885" width="0.4950%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="895.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (2 samples, 0.50%)</title><rect x="0.0000%" y="869" width="0.4950%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="879.50"></text></g><g><title>__libc_recv (2 samples, 0.50%)</title><rect x="0.0000%" y="853" width="0.4950%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="863.50"></text></g><g><title>interrupt_entry (1 samples, 0.25%)</title><rect x="0.2475%" y="837" width="0.2475%" height="15" fill="rgb(207,160,47)"/><text x="0.4975%" y="847.50"></text></g><g><title>[[heap]] (3 samples, 0.74%)</title><rect x="0.0000%" y="933" width="0.7426%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="943.50"></text></g><g><title>hwloc_linux_set_tid_cpubind (1 samples, 0.25%)</title><rect x="0.4950%" y="917" width="0.2475%" height="15" fill="rgb(218,30,26)"/><text x="0.7450%" y="927.50"></text></g><g><title>[[stack]] (2 samples, 0.50%)</title><rect x="0.7426%" y="933" width="0.4950%" height="15" fill="rgb(220,122,19)"/><text x="0.9926%" y="943.50"></text></g><g><title>__libc_send (2 samples, 0.50%)</title><rect x="0.7426%" y="917" width="0.4950%" height="15" fill="rgb(250,228,42)"/><text x="0.9926%" y="927.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.50%)</title><rect x="0.7426%" y="901" width="0.4950%" height="15" fill="rgb(240,193,28)"/><text x="0.9926%" y="911.50"></text></g><g><title>lobsters::init_database (1 samples, 0.25%)</title><rect x="1.2376%" y="757" width="0.2475%" height="15" fill="rgb(216,20,37)"/><text x="1.4876%" y="767.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.25%)</title><rect x="1.2376%" y="741" width="0.2475%" height="15" fill="rgb(206,188,39)"/><text x="1.4876%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.25%)</title><rect x="1.2376%" y="725" width="0.2475%" height="15" fill="rgb(217,207,13)"/><text x="1.4876%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.25%)</title><rect x="1.2376%" y="709" width="0.2475%" height="15" fill="rgb(231,73,38)"/><text x="1.4876%" y="719.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.25%)</title><rect x="1.2376%" y="693" width="0.2475%" height="15" fill="rgb(225,20,46)"/><text x="1.4876%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.25%)</title><rect x="1.2376%" y="677" width="0.2475%" height="15" fill="rgb(210,31,41)"/><text x="1.4876%" y="687.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.25%)</title><rect x="1.2376%" y="661" width="0.2475%" height="15" fill="rgb(221,200,47)"/><text x="1.4876%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.25%)</title><rect x="1.2376%" y="645" width="0.2475%" height="15" fill="rgb(226,26,5)"/><text x="1.4876%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.25%)</title><rect x="1.2376%" y="629" width="0.2475%" height="15" fill="rgb(249,33,26)"/><text x="1.4876%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.25%)</title><rect x="1.2376%" y="613" width="0.2475%" height="15" fill="rgb(235,183,28)"/><text x="1.4876%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.25%)</title><rect x="1.2376%" y="597" width="0.2475%" height="15" fill="rgb(221,5,38)"/><text x="1.4876%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.25%)</title><rect x="1.2376%" y="581" width="0.2475%" height="15" fill="rgb(247,18,42)"/><text x="1.4876%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.25%)</title><rect x="1.2376%" y="565" width="0.2475%" height="15" fill="rgb(241,131,45)"/><text x="1.4876%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.25%)</title><rect x="1.2376%" y="549" width="0.2475%" height="15" fill="rgb(249,31,29)"/><text x="1.4876%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="1.2376%" y="533" width="0.2475%" height="15" fill="rgb(225,111,53)"/><text x="1.4876%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.25%)</title><rect x="1.2376%" y="517" width="0.2475%" height="15" fill="rgb(238,160,17)"/><text x="1.4876%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.25%)</title><rect x="1.2376%" y="501" width="0.2475%" height="15" fill="rgb(214,148,48)"/><text x="1.4876%" y="511.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.25%)</title><rect x="1.2376%" y="485" width="0.2475%" height="15" fill="rgb(232,36,49)"/><text x="1.4876%" y="495.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.25%)</title><rect x="1.2376%" y="469" width="0.2475%" height="15" fill="rgb(209,103,24)"/><text x="1.4876%" y="479.50"></text></g><g><title>_int_realloc (1 samples, 0.25%)</title><rect x="1.2376%" y="453" width="0.2475%" height="15" fill="rgb(229,88,8)"/><text x="1.4876%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.25%)</title><rect x="1.2376%" y="437" width="0.2475%" height="15" fill="rgb(213,181,19)"/><text x="1.4876%" y="447.50"></text></g><g><title>mysql_common::proto::codec::PacketCodec::encode (1 samples, 0.25%)</title><rect x="1.4851%" y="709" width="0.2475%" height="15" fill="rgb(254,191,54)"/><text x="1.7351%" y="719.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::encode (1 samples, 0.25%)</title><rect x="1.4851%" y="693" width="0.2475%" height="15" fill="rgb(241,83,37)"/><text x="1.7351%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.25%)</title><rect x="1.7327%" y="709" width="0.2475%" height="15" fill="rgb(233,36,39)"/><text x="1.9827%" y="719.50"></text></g><g><title>__x86_indirect_thunk_rax (1 samples, 0.25%)</title><rect x="1.9802%" y="645" width="0.2475%" height="15" fill="rgb(226,3,54)"/><text x="2.2302%" y="655.50"></text></g><g><title>inet_sendmsg (1 samples, 0.25%)</title><rect x="2.7228%" y="565" width="0.2475%" height="15" fill="rgb(245,192,40)"/><text x="2.9728%" y="575.50"></text></g><g><title>release_sock (1 samples, 0.25%)</title><rect x="2.9703%" y="549" width="0.2475%" height="15" fill="rgb(238,167,29)"/><text x="3.2203%" y="559.50"></text></g><g><title>_raw_spin_lock_bh (1 samples, 0.25%)</title><rect x="2.9703%" y="533" width="0.2475%" height="15" fill="rgb(232,182,51)"/><text x="3.2203%" y="543.50"></text></g><g><title>__ip_local_out (1 samples, 0.25%)</title><rect x="4.2079%" y="469" width="0.2475%" height="15" fill="rgb(231,60,39)"/><text x="4.4579%" y="479.50"></text></g><g><title>ip_send_check (1 samples, 0.25%)</title><rect x="4.2079%" y="453" width="0.2475%" height="15" fill="rgb(208,69,12)"/><text x="4.4579%" y="463.50"></text></g><g><title>__ip_finish_output (1 samples, 0.25%)</title><rect x="4.4554%" y="453" width="0.2475%" height="15" fill="rgb(235,93,37)"/><text x="4.7054%" y="463.50"></text></g><g><title>__local_bh_enable_ip (1 samples, 0.25%)</title><rect x="4.9505%" y="421" width="0.2475%" height="15" fill="rgb(213,116,39)"/><text x="5.2005%" y="431.50"></text></g><g><title>__dev_queue_xmit (3 samples, 0.74%)</title><rect x="4.9505%" y="437" width="0.7426%" height="15" fill="rgb(222,207,29)"/><text x="5.2005%" y="447.50"></text></g><g><title>dev_hard_start_xmit (2 samples, 0.50%)</title><rect x="5.1980%" y="421" width="0.4950%" height="15" fill="rgb(206,96,30)"/><text x="5.4480%" y="431.50"></text></g><g><title>loopback_xmit (1 samples, 0.25%)</title><rect x="5.4455%" y="405" width="0.2475%" height="15" fill="rgb(218,138,4)"/><text x="5.6955%" y="415.50"></text></g><g><title>netif_rx (1 samples, 0.25%)</title><rect x="5.4455%" y="389" width="0.2475%" height="15" fill="rgb(250,191,14)"/><text x="5.6955%" y="399.50"></text></g><g><title>netif_rx_internal (1 samples, 0.25%)</title><rect x="5.4455%" y="373" width="0.2475%" height="15" fill="rgb(239,60,40)"/><text x="5.6955%" y="383.50"></text></g><g><title>enqueue_to_backlog (1 samples, 0.25%)</title><rect x="5.4455%" y="357" width="0.2475%" height="15" fill="rgb(206,27,48)"/><text x="5.6955%" y="367.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.25%)</title><rect x="5.4455%" y="341" width="0.2475%" height="15" fill="rgb(225,35,8)"/><text x="5.6955%" y="351.50"></text></g><g><title>preempt_count_sub (1 samples, 0.25%)</title><rect x="5.4455%" y="325" width="0.2475%" height="15" fill="rgb(250,213,24)"/><text x="5.6955%" y="335.50"></text></g><g><title>irqtime_account_irq (3 samples, 0.74%)</title><rect x="6.1881%" y="373" width="0.7426%" height="15" fill="rgb(247,123,22)"/><text x="6.4381%" y="383.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.25%)</title><rect x="6.6832%" y="357" width="0.2475%" height="15" fill="rgb(231,138,38)"/><text x="6.9332%" y="367.50"></text></g><g><title>sched_clock (1 samples, 0.25%)</title><rect x="6.6832%" y="341" width="0.2475%" height="15" fill="rgb(231,145,46)"/><text x="6.9332%" y="351.50"></text></g><g><title>native_sched_clock (1 samples, 0.25%)</title><rect x="6.6832%" y="325" width="0.2475%" height="15" fill="rgb(251,118,11)"/><text x="6.9332%" y="335.50"></text></g><g><title>__netif_receive_skb_core (1 samples, 0.25%)</title><rect x="7.6733%" y="325" width="0.2475%" height="15" fill="rgb(217,147,25)"/><text x="7.9233%" y="335.50"></text></g><g><title>__inet_lookup_established (3 samples, 0.74%)</title><rect x="8.6634%" y="245" width="0.7426%" height="15" fill="rgb(247,81,37)"/><text x="8.9134%" y="255.50"></text></g><g><title>inet_ehashfn (1 samples, 0.25%)</title><rect x="9.1584%" y="229" width="0.2475%" height="15" fill="rgb(209,12,38)"/><text x="9.4084%" y="239.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.25%)</title><rect x="9.4059%" y="245" width="0.2475%" height="15" fill="rgb(227,1,9)"/><text x="9.6559%" y="255.50"></text></g><g><title>preempt_count_add (1 samples, 0.25%)</title><rect x="9.4059%" y="229" width="0.2475%" height="15" fill="rgb(248,47,43)"/><text x="9.6559%" y="239.50"></text></g><g><title>sk_filter_trim_cap (1 samples, 0.25%)</title><rect x="9.6535%" y="245" width="0.2475%" height="15" fill="rgb(221,10,30)"/><text x="9.9035%" y="255.50"></text></g><g><title>security_sock_rcv_skb (1 samples, 0.25%)</title><rect x="9.6535%" y="229" width="0.2475%" height="15" fill="rgb(210,229,1)"/><text x="9.9035%" y="239.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.25%)</title><rect x="10.1485%" y="133" width="0.2475%" height="15" fill="rgb(222,148,37)"/><text x="10.3985%" y="143.50"></text></g><g><title>preempt_count_sub (1 samples, 0.25%)</title><rect x="10.1485%" y="117" width="0.2475%" height="15" fill="rgb(234,67,33)"/><text x="10.3985%" y="127.50"></text></g><g><title>psi_task_change (2 samples, 0.50%)</title><rect x="10.3960%" y="117" width="0.4950%" height="15" fill="rgb(247,98,35)"/><text x="10.6460%" y="127.50"></text></g><g><title>psi_group_change (2 samples, 0.50%)</title><rect x="10.3960%" y="101" width="0.4950%" height="15" fill="rgb(247,138,52)"/><text x="10.6460%" y="111.50"></text></g><g><title>record_times (1 samples, 0.25%)</title><rect x="10.6436%" y="85" width="0.2475%" height="15" fill="rgb(213,79,30)"/><text x="10.8936%" y="95.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.25%)</title><rect x="10.6436%" y="69" width="0.2475%" height="15" fill="rgb(246,177,23)"/><text x="10.8936%" y="79.50"></text></g><g><title>sched_clock (1 samples, 0.25%)</title><rect x="10.6436%" y="53" width="0.2475%" height="15" fill="rgb(230,62,27)"/><text x="10.8936%" y="63.50"></text></g><g><title>native_sched_clock (1 samples, 0.25%)</title><rect x="10.6436%" y="37" width="0.2475%" height="15" fill="rgb(216,154,8)"/><text x="10.8936%" y="47.50"></text></g><g><title>enqueue_task (4 samples, 0.99%)</title><rect x="10.3960%" y="133" width="0.9901%" height="15" fill="rgb(244,35,45)"/><text x="10.6460%" y="143.50"></text></g><g><title>uclamp_rq_inc_id (2 samples, 0.50%)</title><rect x="10.8911%" y="117" width="0.4950%" height="15" fill="rgb(251,115,12)"/><text x="11.1411%" y="127.50"></text></g><g><title>account_entity_enqueue (2 samples, 0.50%)</title><rect x="11.6337%" y="101" width="0.4950%" height="15" fill="rgb(240,54,50)"/><text x="11.8837%" y="111.50"></text></g><g><title>enqueue_task_fair (5 samples, 1.24%)</title><rect x="11.3861%" y="133" width="1.2376%" height="15" fill="rgb(233,84,52)"/><text x="11.6361%" y="143.50"></text></g><g><title>enqueue_entity (4 samples, 0.99%)</title><rect x="11.6337%" y="117" width="0.9901%" height="15" fill="rgb(207,117,47)"/><text x="11.8837%" y="127.50"></text></g><g><title>update_load_avg (2 samples, 0.50%)</title><rect x="12.1287%" y="101" width="0.4950%" height="15" fill="rgb(249,43,39)"/><text x="12.3787%" y="111.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.25%)</title><rect x="12.3762%" y="85" width="0.2475%" height="15" fill="rgb(209,38,44)"/><text x="12.6262%" y="95.50"></text></g><g><title>ttwu_do_wakeup (4 samples, 0.99%)</title><rect x="12.6238%" y="133" width="0.9901%" height="15" fill="rgb(236,212,23)"/><text x="12.8738%" y="143.50"></text></g><g><title>check_preempt_curr (4 samples, 0.99%)</title><rect x="12.6238%" y="117" width="0.9901%" height="15" fill="rgb(242,79,21)"/><text x="12.8738%" y="127.50"></text></g><g><title>resched_curr (4 samples, 0.99%)</title><rect x="12.6238%" y="101" width="0.9901%" height="15" fill="rgb(211,96,35)"/><text x="12.8738%" y="111.50"></text></g><g><title>sock_def_readable (18 samples, 4.46%)</title><rect x="9.9010%" y="213" width="4.4554%" height="15" fill="rgb(253,215,40)"/><text x="10.1510%" y="223.50">sock_..</text></g><g><title>__wake_up_common_lock (18 samples, 4.46%)</title><rect x="9.9010%" y="197" width="4.4554%" height="15" fill="rgb(211,81,21)"/><text x="10.1510%" y="207.50">__wak..</text></g><g><title>__wake_up_common (18 samples, 4.46%)</title><rect x="9.9010%" y="181" width="4.4554%" height="15" fill="rgb(208,190,38)"/><text x="10.1510%" y="191.50">__wak..</text></g><g><title>pollwake (18 samples, 4.46%)</title><rect x="9.9010%" y="165" width="4.4554%" height="15" fill="rgb(235,213,38)"/><text x="10.1510%" y="175.50">pollw..</text></g><g><title>try_to_wake_up (17 samples, 4.21%)</title><rect x="10.1485%" y="149" width="4.2079%" height="15" fill="rgb(237,122,38)"/><text x="10.3985%" y="159.50">try_t..</text></g><g><title>update_rq_clock (3 samples, 0.74%)</title><rect x="13.6139%" y="133" width="0.7426%" height="15" fill="rgb(244,218,35)"/><text x="13.8639%" y="143.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.25%)</title><rect x="14.1089%" y="117" width="0.2475%" height="15" fill="rgb(240,68,47)"/><text x="14.3589%" y="127.50"></text></g><g><title>kfree (1 samples, 0.25%)</title><rect x="15.0990%" y="181" width="0.2475%" height="15" fill="rgb(210,16,53)"/><text x="15.3490%" y="191.50"></text></g><g><title>slab_free_freelist_hook (1 samples, 0.25%)</title><rect x="15.0990%" y="165" width="0.2475%" height="15" fill="rgb(235,124,12)"/><text x="15.3490%" y="175.50"></text></g><g><title>__kfree_skb (3 samples, 0.74%)</title><rect x="15.0990%" y="197" width="0.7426%" height="15" fill="rgb(224,169,11)"/><text x="15.3490%" y="207.50"></text></g><g><title>skb_release_data (2 samples, 0.50%)</title><rect x="15.3465%" y="181" width="0.4950%" height="15" fill="rgb(250,166,2)"/><text x="15.5965%" y="191.50"></text></g><g><title>kmem_cache_free (1 samples, 0.25%)</title><rect x="15.8416%" y="197" width="0.2475%" height="15" fill="rgb(242,216,29)"/><text x="16.0916%" y="207.50"></text></g><g><title>slab_free_freelist_hook (1 samples, 0.25%)</title><rect x="15.8416%" y="181" width="0.2475%" height="15" fill="rgb(230,116,27)"/><text x="16.0916%" y="191.50"></text></g><g><title>tcp_ack (8 samples, 1.98%)</title><rect x="14.3564%" y="213" width="1.9802%" height="15" fill="rgb(228,99,48)"/><text x="14.6064%" y="223.50">t..</text></g><g><title>tcp_update_pacing_rate (1 samples, 0.25%)</title><rect x="16.0891%" y="197" width="0.2475%" height="15" fill="rgb(253,11,6)"/><text x="16.3391%" y="207.50"></text></g><g><title>tcp_v4_do_rcv (28 samples, 6.93%)</title><rect x="9.9010%" y="245" width="6.9307%" height="15" fill="rgb(247,143,39)"/><text x="10.1510%" y="255.50">tcp_v4_do..</text></g><g><title>tcp_rcv_established (28 samples, 6.93%)</title><rect x="9.9010%" y="229" width="6.9307%" height="15" fill="rgb(236,97,10)"/><text x="10.1510%" y="239.50">tcp_rcv_e..</text></g><g><title>tcp_queue_rcv (2 samples, 0.50%)</title><rect x="16.3366%" y="213" width="0.4950%" height="15" fill="rgb(233,208,19)"/><text x="16.5866%" y="223.50"></text></g><g><title>ip_local_deliver (37 samples, 9.16%)</title><rect x="7.9208%" y="309" width="9.1584%" height="15" fill="rgb(216,164,2)"/><text x="8.1708%" y="319.50">ip_local_deli..</text></g><g><title>ip_local_deliver_finish (37 samples, 9.16%)</title><rect x="7.9208%" y="293" width="9.1584%" height="15" fill="rgb(220,129,5)"/><text x="8.1708%" y="303.50">ip_local_deli..</text></g><g><title>ip_protocol_deliver_rcu (37 samples, 9.16%)</title><rect x="7.9208%" y="277" width="9.1584%" height="15" fill="rgb(242,17,10)"/><text x="8.1708%" y="287.50">ip_protocol_d..</text></g><g><title>tcp_v4_rcv (36 samples, 8.91%)</title><rect x="8.1683%" y="261" width="8.9109%" height="15" fill="rgb(242,107,0)"/><text x="8.4183%" y="271.50">tcp_v4_rcv</text></g><g><title>tcp_v4_fill_cb (1 samples, 0.25%)</title><rect x="16.8317%" y="245" width="0.2475%" height="15" fill="rgb(251,28,31)"/><text x="17.0817%" y="255.50"></text></g><g><title>ip_rcv_core (1 samples, 0.25%)</title><rect x="17.0792%" y="309" width="0.2475%" height="15" fill="rgb(233,223,10)"/><text x="17.3292%" y="319.50"></text></g><g><title>ip_finish_output2 (52 samples, 12.87%)</title><rect x="4.7030%" y="453" width="12.8713%" height="15" fill="rgb(215,21,27)"/><text x="4.9530%" y="463.50">ip_finish_output2</text></g><g><title>__local_bh_enable_ip (48 samples, 11.88%)</title><rect x="5.6931%" y="437" width="11.8812%" height="15" fill="rgb(232,23,21)"/><text x="5.9431%" y="447.50">__local_bh_enable_..</text></g><g><title>do_softirq (48 samples, 11.88%)</title><rect x="5.6931%" y="421" width="11.8812%" height="15" fill="rgb(244,5,23)"/><text x="5.9431%" y="431.50">do_softirq</text></g><g><title>do_softirq_own_stack (48 samples, 11.88%)</title><rect x="5.6931%" y="405" width="11.8812%" height="15" fill="rgb(226,81,46)"/><text x="5.9431%" y="415.50">do_softirq_own_sta..</text></g><g><title>__do_softirq (47 samples, 11.63%)</title><rect x="5.9406%" y="389" width="11.6337%" height="15" fill="rgb(247,70,30)"/><text x="6.1906%" y="399.50">__do_softirq</text></g><g><title>net_rx_action (43 samples, 10.64%)</title><rect x="6.9307%" y="373" width="10.6436%" height="15" fill="rgb(212,68,19)"/><text x="7.1807%" y="383.50">net_rx_action</text></g><g><title>process_backlog (42 samples, 10.40%)</title><rect x="7.1782%" y="357" width="10.3960%" height="15" fill="rgb(240,187,13)"/><text x="7.4282%" y="367.50">process_backlog</text></g><g><title>__netif_receive_skb_one_core (41 samples, 10.15%)</title><rect x="7.4257%" y="341" width="10.1485%" height="15" fill="rgb(223,113,26)"/><text x="7.6757%" y="351.50">__netif_receive..</text></g><g><title>ip_rcv (39 samples, 9.65%)</title><rect x="7.9208%" y="325" width="9.6535%" height="15" fill="rgb(206,192,2)"/><text x="8.1708%" y="335.50">ip_rcv</text></g><g><title>ip_rcv_finish (1 samples, 0.25%)</title><rect x="17.3267%" y="309" width="0.2475%" height="15" fill="rgb(241,108,4)"/><text x="17.5767%" y="319.50"></text></g><g><title>__ip_queue_xmit (57 samples, 14.11%)</title><rect x="3.9604%" y="485" width="14.1089%" height="15" fill="rgb(247,173,49)"/><text x="4.2104%" y="495.50">__ip_queue_xmit</text></g><g><title>ip_output (55 samples, 13.61%)</title><rect x="4.4554%" y="469" width="13.6139%" height="15" fill="rgb(224,114,35)"/><text x="4.7054%" y="479.50">ip_output</text></g><g><title>ip_finish_output (2 samples, 0.50%)</title><rect x="17.5743%" y="453" width="0.4950%" height="15" fill="rgb(245,159,27)"/><text x="17.8243%" y="463.50"></text></g><g><title>__cgroup_bpf_run_filter_skb (2 samples, 0.50%)</title><rect x="17.5743%" y="437" width="0.4950%" height="15" fill="rgb(245,172,44)"/><text x="17.8243%" y="447.50"></text></g><g><title>tcp_established_options (2 samples, 0.50%)</title><rect x="18.0693%" y="485" width="0.4950%" height="15" fill="rgb(236,23,11)"/><text x="18.3193%" y="495.50"></text></g><g><title>__tcp_transmit_skb (61 samples, 15.10%)</title><rect x="3.7129%" y="501" width="15.0990%" height="15" fill="rgb(205,117,38)"/><text x="3.9629%" y="511.50">__tcp_transmit_skb</text></g><g><title>tcp_rate_skb_sent (1 samples, 0.25%)</title><rect x="18.5644%" y="485" width="0.2475%" height="15" fill="rgb(237,72,25)"/><text x="18.8144%" y="495.50"></text></g><g><title>__tcp_push_pending_frames (62 samples, 15.35%)</title><rect x="3.7129%" y="533" width="15.3465%" height="15" fill="rgb(244,70,9)"/><text x="3.9629%" y="543.50">__tcp_push_pending_frames</text></g><g><title>tcp_write_xmit (62 samples, 15.35%)</title><rect x="3.7129%" y="517" width="15.3465%" height="15" fill="rgb(217,125,39)"/><text x="3.9629%" y="527.50">tcp_write_xmit</text></g><g><title>tcp_event_new_data_sent (1 samples, 0.25%)</title><rect x="18.8119%" y="501" width="0.2475%" height="15" fill="rgb(235,36,10)"/><text x="19.0619%" y="511.50"></text></g><g><title>tcp_rearm_rto (1 samples, 0.25%)</title><rect x="18.8119%" y="485" width="0.2475%" height="15" fill="rgb(251,123,47)"/><text x="19.0619%" y="495.50"></text></g><g><title>sk_page_frag_refill (1 samples, 0.25%)</title><rect x="19.0594%" y="533" width="0.2475%" height="15" fill="rgb(221,13,13)"/><text x="19.3094%" y="543.50"></text></g><g><title>skb_page_frag_refill (1 samples, 0.25%)</title><rect x="19.0594%" y="517" width="0.2475%" height="15" fill="rgb(238,131,9)"/><text x="19.3094%" y="527.50"></text></g><g><title>__kmalloc_node_track_caller (1 samples, 0.25%)</title><rect x="19.5545%" y="501" width="0.2475%" height="15" fill="rgb(211,50,8)"/><text x="19.8045%" y="511.50"></text></g><g><title>kmalloc_slab (1 samples, 0.25%)</title><rect x="19.5545%" y="485" width="0.2475%" height="15" fill="rgb(245,182,24)"/><text x="19.8045%" y="495.50"></text></g><g><title>sk_stream_alloc_skb (3 samples, 0.74%)</title><rect x="19.3069%" y="533" width="0.7426%" height="15" fill="rgb(242,14,37)"/><text x="19.5569%" y="543.50"></text></g><g><title>__alloc_skb (2 samples, 0.50%)</title><rect x="19.5545%" y="517" width="0.4950%" height="15" fill="rgb(246,228,12)"/><text x="19.8045%" y="527.50"></text></g><g><title>kmem_cache_alloc_node (1 samples, 0.25%)</title><rect x="19.8020%" y="501" width="0.2475%" height="15" fill="rgb(213,55,15)"/><text x="20.0520%" y="511.50"></text></g><g><title>skb_do_copy_data_nocache (1 samples, 0.25%)</title><rect x="20.0495%" y="533" width="0.2475%" height="15" fill="rgb(209,9,3)"/><text x="20.2995%" y="543.50"></text></g><g><title>__check_object_size (1 samples, 0.25%)</title><rect x="20.0495%" y="517" width="0.2475%" height="15" fill="rgb(230,59,30)"/><text x="20.2995%" y="527.50"></text></g><g><title>sock_sendmsg (72 samples, 17.82%)</title><rect x="2.7228%" y="581" width="17.8218%" height="15" fill="rgb(209,121,21)"/><text x="2.9728%" y="591.50">sock_sendmsg</text></g><g><title>tcp_sendmsg (71 samples, 17.57%)</title><rect x="2.9703%" y="565" width="17.5743%" height="15" fill="rgb(220,109,13)"/><text x="3.2203%" y="575.50">tcp_sendmsg</text></g><g><title>tcp_sendmsg_locked (70 samples, 17.33%)</title><rect x="3.2178%" y="549" width="17.3267%" height="15" fill="rgb(232,18,1)"/><text x="3.4678%" y="559.50">tcp_sendmsg_locked</text></g><g><title>tcp_send_mss (1 samples, 0.25%)</title><rect x="20.2970%" y="533" width="0.2475%" height="15" fill="rgb(215,41,42)"/><text x="20.5470%" y="543.50"></text></g><g><title>tcp_current_mss (1 samples, 0.25%)</title><rect x="20.2970%" y="517" width="0.2475%" height="15" fill="rgb(224,123,36)"/><text x="20.5470%" y="527.50"></text></g><g><title>__x64_sys_sendto (74 samples, 18.32%)</title><rect x="2.4752%" y="613" width="18.3168%" height="15" fill="rgb(240,125,3)"/><text x="2.7252%" y="623.50">__x64_sys_sendto</text></g><g><title>__sys_sendto (74 samples, 18.32%)</title><rect x="2.4752%" y="597" width="18.3168%" height="15" fill="rgb(205,98,50)"/><text x="2.7252%" y="607.50">__sys_sendto</text></g><g><title>sockfd_lookup_light (1 samples, 0.25%)</title><rect x="20.5446%" y="581" width="0.2475%" height="15" fill="rgb(205,185,37)"/><text x="20.7946%" y="591.50"></text></g><g><title>__fget_light (1 samples, 0.25%)</title><rect x="20.5446%" y="565" width="0.2475%" height="15" fill="rgb(238,207,15)"/><text x="20.7946%" y="575.50"></text></g><g><title>syscall_slow_exit_work (2 samples, 0.50%)</title><rect x="20.7921%" y="613" width="0.4950%" height="15" fill="rgb(213,199,42)"/><text x="21.0421%" y="623.50"></text></g><g><title>__audit_syscall_exit (2 samples, 0.50%)</title><rect x="20.7921%" y="597" width="0.4950%" height="15" fill="rgb(235,201,11)"/><text x="21.0421%" y="607.50"></text></g><g><title>unroll_tree_refs (1 samples, 0.25%)</title><rect x="21.0396%" y="581" width="0.2475%" height="15" fill="rgb(207,46,11)"/><text x="21.2896%" y="591.50"></text></g><g><title>do_syscall_64 (77 samples, 19.06%)</title><rect x="2.4752%" y="629" width="19.0594%" height="15" fill="rgb(241,35,35)"/><text x="2.7252%" y="639.50">do_syscall_64</text></g><g><title>syscall_trace_enter (1 samples, 0.25%)</title><rect x="21.2871%" y="613" width="0.2475%" height="15" fill="rgb(243,32,47)"/><text x="21.5371%" y="623.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.25%)</title><rect x="21.2871%" y="597" width="0.2475%" height="15" fill="rgb(247,202,23)"/><text x="21.5371%" y="607.50"></text></g><g><title>__libc_start_main (84 samples, 20.79%)</title><rect x="1.2376%" y="917" width="20.7921%" height="15" fill="rgb(219,102,11)"/><text x="1.4876%" y="927.50">__libc_start_main</text></g><g><title>main (84 samples, 20.79%)</title><rect x="1.2376%" y="901" width="20.7921%" height="15" fill="rgb(243,110,44)"/><text x="1.4876%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (84 samples, 20.79%)</title><rect x="1.2376%" y="885" width="20.7921%" height="15" fill="rgb(222,74,54)"/><text x="1.4876%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (84 samples, 20.79%)</title><rect x="1.2376%" y="869" width="20.7921%" height="15" fill="rgb(216,99,12)"/><text x="1.4876%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (84 samples, 20.79%)</title><rect x="1.2376%" y="853" width="20.7921%" height="15" fill="rgb(226,22,26)"/><text x="1.4876%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (84 samples, 20.79%)</title><rect x="1.2376%" y="837" width="20.7921%" height="15" fill="rgb(217,163,10)"/><text x="1.4876%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (84 samples, 20.79%)</title><rect x="1.2376%" y="821" width="20.7921%" height="15" fill="rgb(213,25,53)"/><text x="1.4876%" y="831.50">core::ops::function::impls::&lt;impl..</text></g><g><title>std::rt::lang_start::_{{closure}} (84 samples, 20.79%)</title><rect x="1.2376%" y="805" width="20.7921%" height="15" fill="rgb(252,105,26)"/><text x="1.4876%" y="815.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (84 samples, 20.79%)</title><rect x="1.2376%" y="789" width="20.7921%" height="15" fill="rgb(220,39,43)"/><text x="1.4876%" y="799.50">std::sys_common::backtrace::__rus..</text></g><g><title>lobsters::main (84 samples, 20.79%)</title><rect x="1.2376%" y="773" width="20.7921%" height="15" fill="rgb(229,68,48)"/><text x="1.4876%" y="783.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (83 samples, 20.54%)</title><rect x="1.4851%" y="757" width="20.5446%" height="15" fill="rgb(252,8,32)"/><text x="1.7351%" y="767.50">mysql::conn::queryable::Queryabl..</text></g><g><title>mysql::conn::Conn::_query (83 samples, 20.54%)</title><rect x="1.4851%" y="741" width="20.5446%" height="15" fill="rgb(223,20,43)"/><text x="1.7351%" y="751.50">mysql::conn::Conn::_query</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (83 samples, 20.54%)</title><rect x="1.4851%" y="725" width="20.5446%" height="15" fill="rgb(229,81,49)"/><text x="1.7351%" y="735.50">mysql_common::proto::sync_framed..</text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (81 samples, 20.05%)</title><rect x="1.9802%" y="709" width="20.0495%" height="15" fill="rgb(236,28,36)"/><text x="2.2302%" y="719.50">std::io::buffered::BufWriter&lt;W&gt;..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (81 samples, 20.05%)</title><rect x="1.9802%" y="693" width="20.0495%" height="15" fill="rgb(249,185,26)"/><text x="2.2302%" y="703.50">&lt;std::net::tcp::TcpStream as st..</text></g><g><title>std::sys_common::net::TcpStream::write (81 samples, 20.05%)</title><rect x="1.9802%" y="677" width="20.0495%" height="15" fill="rgb(249,174,33)"/><text x="2.2302%" y="687.50">std::sys_common::net::TcpStream..</text></g><g><title>__libc_send (81 samples, 20.05%)</title><rect x="1.9802%" y="661" width="20.0495%" height="15" fill="rgb(233,201,37)"/><text x="2.2302%" y="671.50">__libc_send</text></g><g><title>entry_SYSCALL_64 (80 samples, 19.80%)</title><rect x="2.2277%" y="645" width="19.8020%" height="15" fill="rgb(221,78,26)"/><text x="2.4777%" y="655.50">entry_SYSCALL_64</text></g><g><title>prepare_exit_to_usermode (2 samples, 0.50%)</title><rect x="21.5347%" y="629" width="0.4950%" height="15" fill="rgb(250,127,30)"/><text x="21.7847%" y="639.50"></text></g><g><title>check_match (1 samples, 0.25%)</title><rect x="22.0297%" y="917" width="0.2475%" height="15" fill="rgb(230,49,44)"/><text x="22.2797%" y="927.50"></text></g><g><title>hwloc::Topology::new (1 samples, 0.25%)</title><rect x="22.2772%" y="901" width="0.2475%" height="15" fill="rgb(229,67,23)"/><text x="22.5272%" y="911.50"></text></g><g><title>hwloc_topology_load (1 samples, 0.25%)</title><rect x="22.2772%" y="885" width="0.2475%" height="15" fill="rgb(249,83,47)"/><text x="22.5272%" y="895.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.25%)</title><rect x="22.2772%" y="869" width="0.2475%" height="15" fill="rgb(215,43,3)"/><text x="22.5272%" y="879.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.25%)</title><rect x="22.2772%" y="853" width="0.2475%" height="15" fill="rgb(238,154,13)"/><text x="22.5272%" y="863.50"></text></g><g><title>__isoc99_fscanf (1 samples, 0.25%)</title><rect x="22.2772%" y="837" width="0.2475%" height="15" fill="rgb(219,56,2)"/><text x="22.5272%" y="847.50"></text></g><g><title>__vfscanf_internal (1 samples, 0.25%)</title><rect x="22.2772%" y="821" width="0.2475%" height="15" fill="rgb(233,0,4)"/><text x="22.5272%" y="831.50"></text></g><g><title>__GI__IO_default_uflow (1 samples, 0.25%)</title><rect x="22.2772%" y="805" width="0.2475%" height="15" fill="rgb(235,30,7)"/><text x="22.5272%" y="815.50"></text></g><g><title>__GI__IO_file_underflow (1 samples, 0.25%)</title><rect x="22.2772%" y="789" width="0.2475%" height="15" fill="rgb(250,79,13)"/><text x="22.5272%" y="799.50"></text></g><g><title>__GI___read (1 samples, 0.25%)</title><rect x="22.2772%" y="773" width="0.2475%" height="15" fill="rgb(211,146,34)"/><text x="22.5272%" y="783.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.25%)</title><rect x="22.2772%" y="757" width="0.2475%" height="15" fill="rgb(228,22,38)"/><text x="22.5272%" y="767.50"></text></g><g><title>do_syscall_64 (1 samples, 0.25%)</title><rect x="22.2772%" y="741" width="0.2475%" height="15" fill="rgb(235,168,5)"/><text x="22.5272%" y="751.50"></text></g><g><title>ksys_read (1 samples, 0.25%)</title><rect x="22.2772%" y="725" width="0.2475%" height="15" fill="rgb(221,155,16)"/><text x="22.5272%" y="735.50"></text></g><g><title>vfs_read (1 samples, 0.25%)</title><rect x="22.2772%" y="709" width="0.2475%" height="15" fill="rgb(215,215,53)"/><text x="22.5272%" y="719.50"></text></g><g><title>seq_read (1 samples, 0.25%)</title><rect x="22.2772%" y="693" width="0.2475%" height="15" fill="rgb(223,4,10)"/><text x="22.5272%" y="703.50"></text></g><g><title>show_cpuinfo (1 samples, 0.25%)</title><rect x="22.2772%" y="677" width="0.2475%" height="15" fill="rgb(234,103,6)"/><text x="22.5272%" y="687.50"></text></g><g><title>seq_printf (1 samples, 0.25%)</title><rect x="22.2772%" y="661" width="0.2475%" height="15" fill="rgb(227,97,0)"/><text x="22.5272%" y="671.50"></text></g><g><title>vsnprintf (1 samples, 0.25%)</title><rect x="22.2772%" y="645" width="0.2475%" height="15" fill="rgb(234,150,53)"/><text x="22.5272%" y="655.50"></text></g><g><title>format_decode (1 samples, 0.25%)</title><rect x="22.2772%" y="629" width="0.2475%" height="15" fill="rgb(228,201,54)"/><text x="22.5272%" y="639.50"></text></g><g><title>mysql::conn::Conn::new (1 samples, 0.25%)</title><rect x="22.5248%" y="901" width="0.2475%" height="15" fill="rgb(222,22,37)"/><text x="22.7748%" y="911.50"></text></g><g><title>mysql::conn::Conn::connect (1 samples, 0.25%)</title><rect x="22.5248%" y="885" width="0.2475%" height="15" fill="rgb(237,53,32)"/><text x="22.7748%" y="895.50"></text></g><g><title>mysql::conn::Conn::continue_auth (1 samples, 0.25%)</title><rect x="22.5248%" y="869" width="0.2475%" height="15" fill="rgb(233,25,53)"/><text x="22.7748%" y="879.50"></text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 0.25%)</title><rect x="22.5248%" y="853" width="0.2475%" height="15" fill="rgb(210,40,34)"/><text x="22.7748%" y="863.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="22.5248%" y="837" width="0.2475%" height="15" fill="rgb(241,220,44)"/><text x="22.7748%" y="847.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.25%)</title><rect x="22.5248%" y="821" width="0.2475%" height="15" fill="rgb(235,28,35)"/><text x="22.7748%" y="831.50"></text></g><g><title>&lt;std::sys::unix::ext::net::UnixStream as std::io::Read&gt;::read (1 samples, 0.25%)</title><rect x="22.5248%" y="805" width="0.2475%" height="15" fill="rgb(210,56,17)"/><text x="22.7748%" y="815.50"></text></g><g><title>&lt;&amp;std::sys::unix::ext::net::UnixStream as std::io::Read&gt;::read (1 samples, 0.25%)</title><rect x="22.5248%" y="789" width="0.2475%" height="15" fill="rgb(224,130,29)"/><text x="22.7748%" y="799.50"></text></g><g><title>std::sys::unix::net::Socket::read (1 samples, 0.25%)</title><rect x="22.5248%" y="773" width="0.2475%" height="15" fill="rgb(235,212,8)"/><text x="22.7748%" y="783.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (1 samples, 0.25%)</title><rect x="22.5248%" y="757" width="0.2475%" height="15" fill="rgb(223,33,50)"/><text x="22.7748%" y="767.50"></text></g><g><title>__libc_recv (1 samples, 0.25%)</title><rect x="22.5248%" y="741" width="0.2475%" height="15" fill="rgb(219,149,13)"/><text x="22.7748%" y="751.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.25%)</title><rect x="22.5248%" y="725" width="0.2475%" height="15" fill="rgb(250,156,29)"/><text x="22.7748%" y="735.50"></text></g><g><title>do_syscall_64 (1 samples, 0.25%)</title><rect x="22.5248%" y="709" width="0.2475%" height="15" fill="rgb(216,193,19)"/><text x="22.7748%" y="719.50"></text></g><g><title>__x64_sys_recvfrom (1 samples, 0.25%)</title><rect x="22.5248%" y="693" width="0.2475%" height="15" fill="rgb(216,135,14)"/><text x="22.7748%" y="703.50"></text></g><g><title>__sys_recvfrom (1 samples, 0.25%)</title><rect x="22.5248%" y="677" width="0.2475%" height="15" fill="rgb(241,47,5)"/><text x="22.7748%" y="687.50"></text></g><g><title>unix_stream_recvmsg (1 samples, 0.25%)</title><rect x="22.5248%" y="661" width="0.2475%" height="15" fill="rgb(233,42,35)"/><text x="22.7748%" y="671.50"></text></g><g><title>unix_stream_read_generic (1 samples, 0.25%)</title><rect x="22.5248%" y="645" width="0.2475%" height="15" fill="rgb(231,13,6)"/><text x="22.7748%" y="655.50"></text></g><g><title>schedule_timeout (1 samples, 0.25%)</title><rect x="22.5248%" y="629" width="0.2475%" height="15" fill="rgb(207,181,40)"/><text x="22.7748%" y="639.50"></text></g><g><title>schedule (1 samples, 0.25%)</title><rect x="22.5248%" y="613" width="0.2475%" height="15" fill="rgb(254,173,49)"/><text x="22.7748%" y="623.50"></text></g><g><title>__schedule (1 samples, 0.25%)</title><rect x="22.5248%" y="597" width="0.2475%" height="15" fill="rgb(221,1,38)"/><text x="22.7748%" y="607.50"></text></g><g><title>psi_task_change (1 samples, 0.25%)</title><rect x="22.5248%" y="581" width="0.2475%" height="15" fill="rgb(206,124,46)"/><text x="22.7748%" y="591.50"></text></g><g><title>psi_group_change (1 samples, 0.25%)</title><rect x="22.5248%" y="565" width="0.2475%" height="15" fill="rgb(249,21,11)"/><text x="22.7748%" y="575.50"></text></g><g><title>record_times (1 samples, 0.25%)</title><rect x="22.5248%" y="549" width="0.2475%" height="15" fill="rgb(222,201,40)"/><text x="22.7748%" y="559.50"></text></g><g><title>sched_clock_cpu (1 samples, 0.25%)</title><rect x="22.5248%" y="533" width="0.2475%" height="15" fill="rgb(235,61,29)"/><text x="22.7748%" y="543.50"></text></g><g><title>sched_clock (1 samples, 0.25%)</title><rect x="22.5248%" y="517" width="0.2475%" height="15" fill="rgb(219,207,3)"/><text x="22.7748%" y="527.50"></text></g><g><title>native_sched_clock (1 samples, 0.25%)</title><rect x="22.5248%" y="501" width="0.2475%" height="15" fill="rgb(222,56,46)"/><text x="22.7748%" y="511.50"></text></g><g><title>dst_release (1 samples, 0.25%)</title><rect x="24.2574%" y="597" width="0.2475%" height="15" fill="rgb(239,76,54)"/><text x="24.5074%" y="607.50"></text></g><g><title>__kfree_skb (3 samples, 0.74%)</title><rect x="24.0099%" y="629" width="0.7426%" height="15" fill="rgb(231,124,27)"/><text x="24.2599%" y="639.50"></text></g><g><title>skb_release_head_state (3 samples, 0.74%)</title><rect x="24.0099%" y="613" width="0.7426%" height="15" fill="rgb(249,195,6)"/><text x="24.2599%" y="623.50"></text></g><g><title>sock_rfree (1 samples, 0.25%)</title><rect x="24.5050%" y="597" width="0.2475%" height="15" fill="rgb(237,174,47)"/><text x="24.7550%" y="607.50"></text></g><g><title>_raw_spin_lock_bh (3 samples, 0.74%)</title><rect x="24.7525%" y="613" width="0.7426%" height="15" fill="rgb(206,201,31)"/><text x="25.0025%" y="623.50"></text></g><g><title>preempt_count_add (1 samples, 0.25%)</title><rect x="25.2475%" y="597" width="0.2475%" height="15" fill="rgb(231,57,52)"/><text x="25.4975%" y="607.50"></text></g><g><title>add_wait_queue (1 samples, 0.25%)</title><rect x="25.4950%" y="613" width="0.2475%" height="15" fill="rgb(248,177,22)"/><text x="25.7450%" y="623.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.25%)</title><rect x="25.4950%" y="597" width="0.2475%" height="15" fill="rgb(215,211,37)"/><text x="25.7450%" y="607.50"></text></g><g><title>preempt_count_add (1 samples, 0.25%)</title><rect x="25.4950%" y="581" width="0.2475%" height="15" fill="rgb(241,128,51)"/><text x="25.7450%" y="591.50"></text></g><g><title>release_sock (1 samples, 0.25%)</title><rect x="25.7426%" y="613" width="0.2475%" height="15" fill="rgb(227,165,31)"/><text x="25.9926%" y="623.50"></text></g><g><title>tcp_release_cb (1 samples, 0.25%)</title><rect x="25.7426%" y="597" width="0.2475%" height="15" fill="rgb(228,167,24)"/><text x="25.9926%" y="607.50"></text></g><g><title>dequeue_task_fair (4 samples, 0.99%)</title><rect x="26.2376%" y="549" width="0.9901%" height="15" fill="rgb(228,143,12)"/><text x="26.4876%" y="559.50"></text></g><g><title>dequeue_entity (4 samples, 0.99%)</title><rect x="26.2376%" y="533" width="0.9901%" height="15" fill="rgb(249,149,8)"/><text x="26.4876%" y="543.50"></text></g><g><title>update_load_avg (3 samples, 0.74%)</title><rect x="26.4851%" y="517" width="0.7426%" height="15" fill="rgb(243,35,44)"/><text x="26.7351%" y="527.50"></text></g><g><title>__update_load_avg_se (2 samples, 0.50%)</title><rect x="26.7327%" y="501" width="0.4950%" height="15" fill="rgb(246,89,9)"/><text x="26.9827%" y="511.50"></text></g><g><title>finish_task_switch (2 samples, 0.50%)</title><rect x="27.2277%" y="549" width="0.4950%" height="15" fill="rgb(233,213,13)"/><text x="27.4777%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (2 samples, 0.50%)</title><rect x="27.2277%" y="533" width="0.4950%" height="15" fill="rgb(233,141,41)"/><text x="27.4777%" y="543.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (2 samples, 0.50%)</title><rect x="27.2277%" y="517" width="0.4950%" height="15" fill="rgb(239,167,4)"/><text x="27.4777%" y="527.50"></text></g><g><title>native_write_msr (2 samples, 0.50%)</title><rect x="27.2277%" y="501" width="0.4950%" height="15" fill="rgb(209,217,16)"/><text x="27.4777%" y="511.50"></text></g><g><title>pick_next_task_idle (1 samples, 0.25%)</title><rect x="27.7228%" y="549" width="0.2475%" height="15" fill="rgb(219,88,35)"/><text x="27.9728%" y="559.50"></text></g><g><title>__update_idle_core (1 samples, 0.25%)</title><rect x="27.7228%" y="533" width="0.2475%" height="15" fill="rgb(220,193,23)"/><text x="27.9728%" y="543.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.25%)</title><rect x="27.7228%" y="517" width="0.2475%" height="15" fill="rgb(230,90,52)"/><text x="27.9728%" y="527.50"></text></g><g><title>psi_task_change (2 samples, 0.50%)</title><rect x="27.9703%" y="549" width="0.4950%" height="15" fill="rgb(252,106,19)"/><text x="28.2203%" y="559.50"></text></g><g><title>psi_group_change (1 samples, 0.25%)</title><rect x="28.2178%" y="533" width="0.2475%" height="15" fill="rgb(206,74,20)"/><text x="28.4678%" y="543.50"></text></g><g><title>rcu_note_context_switch (1 samples, 0.25%)</title><rect x="28.4653%" y="549" width="0.2475%" height="15" fill="rgb(230,138,44)"/><text x="28.7153%" y="559.50"></text></g><g><title>uclamp_rq_dec_id (2 samples, 0.50%)</title><rect x="28.7129%" y="549" width="0.4950%" height="15" fill="rgb(235,182,43)"/><text x="28.9629%" y="559.50"></text></g><g><title>sk_wait_data (19 samples, 4.70%)</title><rect x="24.7525%" y="629" width="4.7030%" height="15" fill="rgb(242,16,51)"/><text x="25.0025%" y="639.50">sk_wa..</text></g><g><title>wait_woken (14 samples, 3.47%)</title><rect x="25.9901%" y="613" width="3.4653%" height="15" fill="rgb(248,9,4)"/><text x="26.2401%" y="623.50">wai..</text></g><g><title>schedule_timeout (14 samples, 3.47%)</title><rect x="25.9901%" y="597" width="3.4653%" height="15" fill="rgb(210,31,22)"/><text x="26.2401%" y="607.50">sch..</text></g><g><title>schedule (14 samples, 3.47%)</title><rect x="25.9901%" y="581" width="3.4653%" height="15" fill="rgb(239,54,39)"/><text x="26.2401%" y="591.50">sch..</text></g><g><title>__schedule (14 samples, 3.47%)</title><rect x="25.9901%" y="565" width="3.4653%" height="15" fill="rgb(230,99,41)"/><text x="26.2401%" y="575.50">__s..</text></g><g><title>update_rq_clock (1 samples, 0.25%)</title><rect x="29.2079%" y="549" width="0.2475%" height="15" fill="rgb(253,106,12)"/><text x="29.4579%" y="559.50"></text></g><g><title>tcp_cleanup_rbuf (1 samples, 0.25%)</title><rect x="29.4554%" y="629" width="0.2475%" height="15" fill="rgb(213,46,41)"/><text x="29.7054%" y="639.50"></text></g><g><title>tcp_rcv_space_adjust (2 samples, 0.50%)</title><rect x="29.7030%" y="629" width="0.4950%" height="15" fill="rgb(215,133,35)"/><text x="29.9530%" y="639.50"></text></g><g><title>inet_recvmsg (27 samples, 6.68%)</title><rect x="23.7624%" y="661" width="6.6832%" height="15" fill="rgb(213,28,5)"/><text x="24.0124%" y="671.50">inet_recv..</text></g><g><title>tcp_recvmsg (26 samples, 6.44%)</title><rect x="24.0099%" y="645" width="6.4356%" height="15" fill="rgb(215,77,49)"/><text x="24.2599%" y="655.50">tcp_recv..</text></g><g><title>tcp_recv_timestamp (1 samples, 0.25%)</title><rect x="30.1980%" y="629" width="0.2475%" height="15" fill="rgb(248,100,22)"/><text x="30.4480%" y="639.50"></text></g><g><title>__x64_sys_recvfrom (30 samples, 7.43%)</title><rect x="23.5149%" y="693" width="7.4257%" height="15" fill="rgb(208,67,9)"/><text x="23.7649%" y="703.50">__x64_sys_..</text></g><g><title>__sys_recvfrom (30 samples, 7.43%)</title><rect x="23.5149%" y="677" width="7.4257%" height="15" fill="rgb(219,133,21)"/><text x="23.7649%" y="687.50">__sys_recv..</text></g><g><title>sockfd_lookup_light (2 samples, 0.50%)</title><rect x="30.4455%" y="661" width="0.4950%" height="15" fill="rgb(246,46,29)"/><text x="30.6955%" y="671.50"></text></g><g><title>__fget_light (2 samples, 0.50%)</title><rect x="30.4455%" y="645" width="0.4950%" height="15" fill="rgb(246,185,52)"/><text x="30.6955%" y="655.50"></text></g><g><title>do_syscall_64 (31 samples, 7.67%)</title><rect x="23.5149%" y="709" width="7.6733%" height="15" fill="rgb(252,136,11)"/><text x="23.7649%" y="719.50">do_syscall_..</text></g><g><title>syscall_slow_exit_work (1 samples, 0.25%)</title><rect x="30.9406%" y="693" width="0.2475%" height="15" fill="rgb(219,138,53)"/><text x="31.1906%" y="703.50"></text></g><g><title>__audit_syscall_exit (1 samples, 0.25%)</title><rect x="30.9406%" y="677" width="0.2475%" height="15" fill="rgb(211,51,23)"/><text x="31.1906%" y="687.50"></text></g><g><title>unroll_tree_refs (1 samples, 0.25%)</title><rect x="30.9406%" y="661" width="0.2475%" height="15" fill="rgb(247,221,28)"/><text x="31.1906%" y="671.50"></text></g><g><title>entry_SYSCALL_64 (33 samples, 8.17%)</title><rect x="23.2673%" y="725" width="8.1683%" height="15" fill="rgb(251,222,45)"/><text x="23.5173%" y="735.50">entry_SYSCA..</text></g><g><title>prepare_exit_to_usermode (1 samples, 0.25%)</title><rect x="31.1881%" y="709" width="0.2475%" height="15" fill="rgb(217,162,53)"/><text x="31.4381%" y="719.50"></text></g><g><title>switch_fpu_return (1 samples, 0.25%)</title><rect x="31.1881%" y="693" width="0.2475%" height="15" fill="rgb(229,93,14)"/><text x="31.4381%" y="703.50"></text></g><g><title>&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 8.66%)</title><rect x="23.0198%" y="837" width="8.6634%" height="15" fill="rgb(209,67,49)"/><text x="23.2698%" y="847.50">&lt;mysql_commo..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (34 samples, 8.42%)</title><rect x="23.2673%" y="821" width="8.4158%" height="15" fill="rgb(213,87,29)"/><text x="23.5173%" y="831.50">&lt;std::io::bu..</text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read (34 samples, 8.42%)</title><rect x="23.2673%" y="805" width="8.4158%" height="15" fill="rgb(205,151,52)"/><text x="23.5173%" y="815.50">&lt;std::net::t..</text></g><g><title>std::sys_common::net::TcpStream::read (34 samples, 8.42%)</title><rect x="23.2673%" y="789" width="8.4158%" height="15" fill="rgb(253,215,39)"/><text x="23.5173%" y="799.50">std::sys_com..</text></g><g><title>std::sys::unix::net::Socket::read (34 samples, 8.42%)</title><rect x="23.2673%" y="773" width="8.4158%" height="15" fill="rgb(221,220,41)"/><text x="23.5173%" y="783.50">std::sys::un..</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (34 samples, 8.42%)</title><rect x="23.2673%" y="757" width="8.4158%" height="15" fill="rgb(218,133,21)"/><text x="23.5173%" y="767.50">std::sys::un..</text></g><g><title>__libc_recv (34 samples, 8.42%)</title><rect x="23.2673%" y="741" width="8.4158%" height="15" fill="rgb(221,193,43)"/><text x="23.5173%" y="751.50">__libc_recv</text></g><g><title>syscall_return_via_sysret (1 samples, 0.25%)</title><rect x="31.4356%" y="725" width="0.2475%" height="15" fill="rgb(240,128,52)"/><text x="31.6856%" y="735.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.25%)</title><rect x="31.6832%" y="837" width="0.2475%" height="15" fill="rgb(253,114,12)"/><text x="31.9332%" y="847.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.25%)</title><rect x="31.6832%" y="821" width="0.2475%" height="15" fill="rgb(215,223,47)"/><text x="31.9332%" y="831.50"></text></g><g><title>mysql::conn::Conn::read_packet (38 samples, 9.41%)</title><rect x="22.7723%" y="853" width="9.4059%" height="15" fill="rgb(248,225,23)"/><text x="23.0223%" y="863.50">mysql::conn::..</text></g><g><title>_int_free (1 samples, 0.25%)</title><rect x="31.9307%" y="837" width="0.2475%" height="15" fill="rgb(250,108,0)"/><text x="32.1807%" y="847.50"></text></g><g><title>lobsters::main (42 samples, 10.40%)</title><rect x="22.2772%" y="917" width="10.3960%" height="15" fill="rgb(228,208,7)"/><text x="22.5272%" y="927.50">lobsters::main</text></g><g><title>mysql::conn::queryable::Queryable::query_drop (40 samples, 9.90%)</title><rect x="22.7723%" y="901" width="9.9010%" height="15" fill="rgb(244,45,10)"/><text x="23.0223%" y="911.50">mysql::conn::q..</text></g><g><title>mysql::conn::Conn::_query (40 samples, 9.90%)</title><rect x="22.7723%" y="885" width="9.9010%" height="15" fill="rgb(207,125,25)"/><text x="23.0223%" y="895.50">mysql::conn::C..</text></g><g><title>mysql::conn::Conn::handle_result_set (40 samples, 9.90%)</title><rect x="22.7723%" y="869" width="9.9010%" height="15" fill="rgb(210,195,18)"/><text x="23.0223%" y="879.50">mysql::conn::C..</text></g><g><title>mysql_common::packets::parse_ok_packet (2 samples, 0.50%)</title><rect x="32.1782%" y="853" width="0.4950%" height="15" fill="rgb(249,80,12)"/><text x="32.4282%" y="863.50"></text></g><g><title>mysql_common::proto::codec::PlainPacketCodec::encode (1 samples, 0.25%)</title><rect x="32.6733%" y="917" width="0.2475%" height="15" fill="rgb(221,65,9)"/><text x="32.9233%" y="927.50"></text></g><g><title>page_fault (1 samples, 0.25%)</title><rect x="32.9208%" y="821" width="0.2475%" height="15" fill="rgb(235,49,36)"/><text x="33.1708%" y="831.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.25%)</title><rect x="32.9208%" y="805" width="0.2475%" height="15" fill="rgb(225,32,20)"/><text x="33.1708%" y="815.50"></text></g><g><title>regex::exec::ExecBuilder::build (2 samples, 0.50%)</title><rect x="32.9208%" y="917" width="0.4950%" height="15" fill="rgb(215,141,46)"/><text x="33.1708%" y="927.50"></text></g><g><title>regex::compile::Compiler::compile (2 samples, 0.50%)</title><rect x="32.9208%" y="901" width="0.4950%" height="15" fill="rgb(250,160,47)"/><text x="33.1708%" y="911.50"></text></g><g><title>regex::compile::Compiler::compile_finish (2 samples, 0.50%)</title><rect x="32.9208%" y="885" width="0.4950%" height="15" fill="rgb(216,222,40)"/><text x="33.1708%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.50%)</title><rect x="32.9208%" y="869" width="0.4950%" height="15" fill="rgb(234,217,39)"/><text x="33.1708%" y="879.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.50%)</title><rect x="32.9208%" y="853" width="0.4950%" height="15" fill="rgb(207,178,40)"/><text x="33.1708%" y="863.50"></text></g><g><title>_int_malloc (2 samples, 0.50%)</title><rect x="32.9208%" y="837" width="0.4950%" height="15" fill="rgb(221,136,13)"/><text x="33.1708%" y="847.50"></text></g><g><title>sysmalloc (1 samples, 0.25%)</title><rect x="33.1683%" y="821" width="0.2475%" height="15" fill="rgb(249,199,10)"/><text x="33.4183%" y="831.50"></text></g><g><title>page_fault (1 samples, 0.25%)</title><rect x="33.1683%" y="805" width="0.2475%" height="15" fill="rgb(249,222,13)"/><text x="33.4183%" y="815.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.25%)</title><rect x="33.1683%" y="789" width="0.2475%" height="15" fill="rgb(244,185,38)"/><text x="33.4183%" y="799.50"></text></g><g><title>handle_mm_fault (1 samples, 0.25%)</title><rect x="33.1683%" y="773" width="0.2475%" height="15" fill="rgb(236,202,9)"/><text x="33.4183%" y="783.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.25%)</title><rect x="33.1683%" y="757" width="0.2475%" height="15" fill="rgb(250,229,37)"/><text x="33.4183%" y="767.50"></text></g><g><title>mem_cgroup_try_charge_delay (1 samples, 0.25%)</title><rect x="33.1683%" y="741" width="0.2475%" height="15" fill="rgb(206,174,23)"/><text x="33.4183%" y="751.50"></text></g><g><title>mem_cgroup_try_charge (1 samples, 0.25%)</title><rect x="33.1683%" y="725" width="0.2475%" height="15" fill="rgb(211,33,43)"/><text x="33.4183%" y="735.50"></text></g><g><title>try_charge (1 samples, 0.25%)</title><rect x="33.1683%" y="709" width="0.2475%" height="15" fill="rgb(245,58,50)"/><text x="33.4183%" y="719.50"></text></g><g><title>page_counter_try_charge (1 samples, 0.25%)</title><rect x="33.1683%" y="693" width="0.2475%" height="15" fill="rgb(244,68,36)"/><text x="33.4183%" y="703.50"></text></g><g><title>alloc_empty_file (1 samples, 0.25%)</title><rect x="33.4158%" y="597" width="0.2475%" height="15" fill="rgb(232,229,15)"/><text x="33.6658%" y="607.50"></text></g><g><title>__alloc_file (1 samples, 0.25%)</title><rect x="33.4158%" y="581" width="0.2475%" height="15" fill="rgb(254,30,23)"/><text x="33.6658%" y="591.50"></text></g><g><title>hwloc::Topology::new (2 samples, 0.50%)</title><rect x="33.4158%" y="789" width="0.4950%" height="15" fill="rgb(235,160,14)"/><text x="33.6658%" y="799.50"></text></g><g><title>hwloc_topology_load (2 samples, 0.50%)</title><rect x="33.4158%" y="773" width="0.4950%" height="15" fill="rgb(212,155,44)"/><text x="33.6658%" y="783.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.50%)</title><rect x="33.4158%" y="757" width="0.4950%" height="15" fill="rgb(226,2,50)"/><text x="33.6658%" y="767.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.50%)</title><rect x="33.4158%" y="741" width="0.4950%" height="15" fill="rgb(234,177,6)"/><text x="33.6658%" y="751.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.50%)</title><rect x="33.4158%" y="725" width="0.4950%" height="15" fill="rgb(217,24,9)"/><text x="33.6658%" y="735.50"></text></g><g><title>__GI___openat (2 samples, 0.50%)</title><rect x="33.4158%" y="709" width="0.4950%" height="15" fill="rgb(220,13,46)"/><text x="33.6658%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (2 samples, 0.50%)</title><rect x="33.4158%" y="693" width="0.4950%" height="15" fill="rgb(239,221,27)"/><text x="33.6658%" y="703.50"></text></g><g><title>do_syscall_64 (2 samples, 0.50%)</title><rect x="33.4158%" y="677" width="0.4950%" height="15" fill="rgb(222,198,25)"/><text x="33.6658%" y="687.50"></text></g><g><title>__x64_sys_openat (2 samples, 0.50%)</title><rect x="33.4158%" y="661" width="0.4950%" height="15" fill="rgb(211,99,13)"/><text x="33.6658%" y="671.50"></text></g><g><title>do_sys_openat2 (2 samples, 0.50%)</title><rect x="33.4158%" y="645" width="0.4950%" height="15" fill="rgb(232,111,31)"/><text x="33.6658%" y="655.50"></text></g><g><title>do_filp_open (2 samples, 0.50%)</title><rect x="33.4158%" y="629" width="0.4950%" height="15" fill="rgb(245,82,37)"/><text x="33.6658%" y="639.50"></text></g><g><title>path_openat (2 samples, 0.50%)</title><rect x="33.4158%" y="613" width="0.4950%" height="15" fill="rgb(227,149,46)"/><text x="33.6658%" y="623.50"></text></g><g><title>link_path_walk (1 samples, 0.25%)</title><rect x="33.6634%" y="597" width="0.2475%" height="15" fill="rgb(218,36,50)"/><text x="33.9134%" y="607.50"></text></g><g><title>walk_component (1 samples, 0.25%)</title><rect x="33.6634%" y="581" width="0.2475%" height="15" fill="rgb(226,80,48)"/><text x="33.9134%" y="591.50"></text></g><g><title>step_into (1 samples, 0.25%)</title><rect x="33.6634%" y="565" width="0.2475%" height="15" fill="rgb(238,224,15)"/><text x="33.9134%" y="575.50"></text></g><g><title>dput (1 samples, 0.25%)</title><rect x="33.6634%" y="549" width="0.2475%" height="15" fill="rgb(241,136,10)"/><text x="33.9134%" y="559.50"></text></g><g><title>lockref_put_return (1 samples, 0.25%)</title><rect x="33.6634%" y="533" width="0.2475%" height="15" fill="rgb(208,32,45)"/><text x="33.9134%" y="543.50"></text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 0.25%)</title><rect x="33.9109%" y="773" width="0.2475%" height="15" fill="rgb(207,135,9)"/><text x="34.1609%" y="783.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.25%)</title><rect x="33.9109%" y="757" width="0.2475%" height="15" fill="rgb(206,86,44)"/><text x="34.1609%" y="767.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.25%)</title><rect x="33.9109%" y="741" width="0.2475%" height="15" fill="rgb(245,177,15)"/><text x="34.1609%" y="751.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.25%)</title><rect x="33.9109%" y="725" width="0.2475%" height="15" fill="rgb(206,64,50)"/><text x="34.1609%" y="735.50"></text></g><g><title>&lt;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.25%)</title><rect x="33.9109%" y="709" width="0.2475%" height="15" fill="rgb(234,36,40)"/><text x="34.1609%" y="719.50"></text></g><g><title>std::sys_common::net::TcpStream::write (1 samples, 0.25%)</title><rect x="33.9109%" y="693" width="0.2475%" height="15" fill="rgb(213,64,8)"/><text x="34.1609%" y="703.50"></text></g><g><title>__libc_send (1 samples, 0.25%)</title><rect x="33.9109%" y="677" width="0.2475%" height="15" fill="rgb(210,75,36)"/><text x="34.1609%" y="687.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.25%)</title><rect x="33.9109%" y="661" width="0.2475%" height="15" fill="rgb(229,88,21)"/><text x="34.1609%" y="671.50"></text></g><g><title>prepare_exit_to_usermode (1 samples, 0.25%)</title><rect x="33.9109%" y="645" width="0.2475%" height="15" fill="rgb(252,204,47)"/><text x="34.1609%" y="655.50"></text></g><g><title>[unknown] (134 samples, 33.17%)</title><rect x="1.2376%" y="933" width="33.1683%" height="15" fill="rgb(208,77,27)"/><text x="1.4876%" y="943.50">[unknown]</text></g><g><title>std::rt::lang_start_internal (4 samples, 0.99%)</title><rect x="33.4158%" y="917" width="0.9901%" height="15" fill="rgb(221,76,26)"/><text x="33.6658%" y="927.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.99%)</title><rect x="33.4158%" y="901" width="0.9901%" height="15" fill="rgb(225,139,18)"/><text x="33.6658%" y="911.50"></text></g><g><title>std::panicking::try (4 samples, 0.99%)</title><rect x="33.4158%" y="885" width="0.9901%" height="15" fill="rgb(230,137,11)"/><text x="33.6658%" y="895.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.99%)</title><rect x="33.4158%" y="869" width="0.9901%" height="15" fill="rgb(212,28,1)"/><text x="33.6658%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 0.99%)</title><rect x="33.4158%" y="853" width="0.9901%" height="15" fill="rgb(248,164,17)"/><text x="33.6658%" y="863.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (4 samples, 0.99%)</title><rect x="33.4158%" y="837" width="0.9901%" height="15" fill="rgb(222,171,42)"/><text x="33.6658%" y="847.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.99%)</title><rect x="33.4158%" y="821" width="0.9901%" height="15" fill="rgb(243,84,45)"/><text x="33.6658%" y="831.50"></text></g><g><title>lobsters::main (4 samples, 0.99%)</title><rect x="33.4158%" y="805" width="0.9901%" height="15" fill="rgb(252,49,23)"/><text x="33.6658%" y="815.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (2 samples, 0.50%)</title><rect x="33.9109%" y="789" width="0.4950%" height="15" fill="rgb(215,19,7)"/><text x="34.1609%" y="799.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.25%)</title><rect x="34.1584%" y="773" width="0.2475%" height="15" fill="rgb(238,81,41)"/><text x="34.4084%" y="783.50"></text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 0.25%)</title><rect x="34.1584%" y="757" width="0.2475%" height="15" fill="rgb(210,199,37)"/><text x="34.4084%" y="767.50"></text></g><g><title>ret_from_intr (1 samples, 0.25%)</title><rect x="34.1584%" y="741" width="0.2475%" height="15" fill="rgb(244,192,49)"/><text x="34.4084%" y="751.50"></text></g><g><title>do_IRQ (1 samples, 0.25%)</title><rect x="34.1584%" y="725" width="0.2475%" height="15" fill="rgb(226,211,11)"/><text x="34.4084%" y="735.50"></text></g><g><title>irq_exit (1 samples, 0.25%)</title><rect x="34.1584%" y="709" width="0.2475%" height="15" fill="rgb(236,162,54)"/><text x="34.4084%" y="719.50"></text></g><g><title>__do_softirq (1 samples, 0.25%)</title><rect x="34.1584%" y="693" width="0.2475%" height="15" fill="rgb(220,229,9)"/><text x="34.4084%" y="703.50"></text></g><g><title>net_rx_action (1 samples, 0.25%)</title><rect x="34.1584%" y="677" width="0.2475%" height="15" fill="rgb(250,87,22)"/><text x="34.4084%" y="687.50"></text></g><g><title>ixgbe_poll (1 samples, 0.25%)</title><rect x="34.1584%" y="661" width="0.2475%" height="15" fill="rgb(239,43,17)"/><text x="34.4084%" y="671.50"></text></g><g><title>__GI_exit (1 samples, 0.25%)</title><rect x="34.4059%" y="901" width="0.2475%" height="15" fill="rgb(231,177,25)"/><text x="34.6559%" y="911.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.25%)</title><rect x="34.4059%" y="885" width="0.2475%" height="15" fill="rgb(219,179,1)"/><text x="34.6559%" y="895.50"></text></g><g><title>__GI__exit (1 samples, 0.25%)</title><rect x="34.4059%" y="869" width="0.2475%" height="15" fill="rgb(238,219,53)"/><text x="34.6559%" y="879.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.25%)</title><rect x="34.4059%" y="853" width="0.2475%" height="15" fill="rgb(232,167,36)"/><text x="34.6559%" y="863.50"></text></g><g><title>do_syscall_64 (1 samples, 0.25%)</title><rect x="34.4059%" y="837" width="0.2475%" height="15" fill="rgb(244,19,51)"/><text x="34.6559%" y="847.50"></text></g><g><title>[vmlinux] (1 samples, 0.25%)</title><rect x="34.4059%" y="821" width="0.2475%" height="15" fill="rgb(224,6,22)"/><text x="34.6559%" y="831.50"></text></g><g><title>do_group_exit (1 samples, 0.25%)</title><rect x="34.4059%" y="805" width="0.2475%" height="15" fill="rgb(224,145,5)"/><text x="34.6559%" y="815.50"></text></g><g><title>do_exit (1 samples, 0.25%)</title><rect x="34.4059%" y="789" width="0.2475%" height="15" fill="rgb(234,130,49)"/><text x="34.6559%" y="799.50"></text></g><g><title>profile_task_exit (1 samples, 0.25%)</title><rect x="34.4059%" y="773" width="0.2475%" height="15" fill="rgb(254,6,2)"/><text x="34.6559%" y="783.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.50%)</title><rect x="34.9010%" y="709" width="0.4950%" height="15" fill="rgb(208,96,46)"/><text x="35.1510%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.50%)</title><rect x="34.9010%" y="693" width="0.4950%" height="15" fill="rgb(239,3,39)"/><text x="35.1510%" y="703.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.50%)</title><rect x="34.9010%" y="677" width="0.4950%" height="15" fill="rgb(233,210,1)"/><text x="35.1510%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.50%)</title><rect x="34.9010%" y="661" width="0.4950%" height="15" fill="rgb(244,137,37)"/><text x="35.1510%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.50%)</title><rect x="34.9010%" y="645" width="0.4950%" height="15" fill="rgb(240,136,2)"/><text x="35.1510%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (2 samples, 0.50%)</title><rect x="34.9010%" y="629" width="0.4950%" height="15" fill="rgb(239,18,37)"/><text x="35.1510%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.50%)</title><rect x="34.9010%" y="613" width="0.4950%" height="15" fill="rgb(218,185,22)"/><text x="35.1510%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.50%)</title><rect x="34.9010%" y="597" width="0.4950%" height="15" fill="rgb(225,218,4)"/><text x="35.1510%" y="607.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.74%)</title><rect x="34.9010%" y="757" width="0.7426%" height="15" fill="rgb(230,182,32)"/><text x="35.1510%" y="767.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.74%)</title><rect x="34.9010%" y="741" width="0.7426%" height="15" fill="rgb(242,56,43)"/><text x="35.1510%" y="751.50"></text></g><g><title>core::fmt::write (3 samples, 0.74%)</title><rect x="34.9010%" y="725" width="0.7426%" height="15" fill="rgb(233,99,24)"/><text x="35.1510%" y="735.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.25%)</title><rect x="35.3960%" y="709" width="0.2475%" height="15" fill="rgb(234,209,42)"/><text x="35.6460%" y="719.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.25%)</title><rect x="35.3960%" y="693" width="0.2475%" height="15" fill="rgb(227,7,12)"/><text x="35.6460%" y="703.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.25%)</title><rect x="35.3960%" y="677" width="0.2475%" height="15" fill="rgb(245,203,43)"/><text x="35.6460%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.25%)</title><rect x="35.3960%" y="661" width="0.2475%" height="15" fill="rgb(238,205,33)"/><text x="35.6460%" y="671.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.25%)</title><rect x="35.3960%" y="645" width="0.2475%" height="15" fill="rgb(231,56,7)"/><text x="35.6460%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (1 samples, 0.25%)</title><rect x="35.3960%" y="629" width="0.2475%" height="15" fill="rgb(244,186,29)"/><text x="35.6460%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.25%)</title><rect x="35.3960%" y="613" width="0.2475%" height="15" fill="rgb(234,111,31)"/><text x="35.6460%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (1 samples, 0.25%)</title><rect x="35.3960%" y="597" width="0.2475%" height="15" fill="rgb(241,149,10)"/><text x="35.6460%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.25%)</title><rect x="35.3960%" y="581" width="0.2475%" height="15" fill="rgb(249,206,44)"/><text x="35.6460%" y="591.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.50%)</title><rect x="35.6436%" y="677" width="0.4950%" height="15" fill="rgb(251,153,30)"/><text x="35.8936%" y="687.50"></text></g><g><title>[libhwloc.so.15.2.0] (2 samples, 0.50%)</title><rect x="35.6436%" y="661" width="0.4950%" height="15" fill="rgb(239,152,38)"/><text x="35.8936%" y="671.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.25%)</title><rect x="35.8911%" y="645" width="0.2475%" height="15" fill="rgb(249,139,47)"/><text x="36.1411%" y="655.50"></text></g><g><title>[libhwloc.so.15.2.0] (1 samples, 0.25%)</title><rect x="35.8911%" y="629" width="0.2475%" height="15" fill="rgb(244,64,35)"/><text x="36.1411%" y="639.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.25%)</title><rect x="35.8911%" y="613" width="0.2475%" height="15" fill="rgb(216,46,15)"/><text x="36.1411%" y="623.50"></text></g><g><title>_int_malloc (1 samples, 0.25%)</title><rect x="35.8911%" y="597" width="0.2475%" height="15" fill="rgb(250,74,19)"/><text x="36.1411%" y="607.50"></text></g><g><title>page_fault (1 samples, 0.25%)</title><rect x="35.8911%" y="581" width="0.2475%" height="15" fill="rgb(249,42,33)"/><text x="36.1411%" y="591.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.25%)</title><rect x="35.8911%" y="565" width="0.2475%" height="15" fill="rgb(242,149,17)"/><text x="36.1411%" y="575.50"></text></g><g><title>handle_mm_fault (1 samples, 0.25%)</title><rect x="35.8911%" y="549" width="0.2475%" height="15" fill="rgb(244,29,21)"/><text x="36.1411%" y="559.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.25%)</title><rect x="35.8911%" y="533" width="0.2475%" height="15" fill="rgb(220,130,37)"/><text x="36.1411%" y="543.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.25%)</title><rect x="35.8911%" y="517" width="0.2475%" height="15" fill="rgb(211,67,2)"/><text x="36.1411%" y="527.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.25%)</title><rect x="35.8911%" y="501" width="0.2475%" height="15" fill="rgb(235,68,52)"/><text x="36.1411%" y="511.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.25%)</title><rect x="36.3861%" y="661" width="0.2475%" height="15" fill="rgb(246,142,3)"/><text x="36.6361%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.25%)</title><rect x="36.6337%" y="661" width="0.2475%" height="15" fill="rgb(241,25,7)"/><text x="36.8837%" y="671.50"></text></g><g><title>__perf_event_task_sched_in (231 samples, 57.18%)</title><rect x="37.8713%" y="469" width="57.1782%" height="15" fill="rgb(242,119,39)"/><text x="38.1213%" y="479.50">__perf_event_task_sched_in</text></g><g><title>__intel_pmu_enable_all.constprop.0 (231 samples, 57.18%)</title><rect x="37.8713%" y="453" width="57.1782%" height="15" fill="rgb(241,98,45)"/><text x="38.1213%" y="463.50">__intel_pmu_enable_all.constprop.0</text></g><g><title>native_write_msr (231 samples, 57.18%)</title><rect x="37.8713%" y="437" width="57.1782%" height="15" fill="rgb(254,28,30)"/><text x="38.1213%" y="447.50">native_write_msr</text></g><g><title>__set_cpus_allowed_ptr (235 samples, 58.17%)</title><rect x="37.1287%" y="581" width="58.1683%" height="15" fill="rgb(241,142,54)"/><text x="37.3787%" y="591.50">__set_cpus_allowed_ptr</text></g><g><title>stop_one_cpu (235 samples, 58.17%)</title><rect x="37.1287%" y="565" width="58.1683%" height="15" fill="rgb(222,85,15)"/><text x="37.3787%" y="575.50">stop_one_cpu</text></g><g><title>cpu_stop_queue_work (235 samples, 58.17%)</title><rect x="37.1287%" y="549" width="58.1683%" height="15" fill="rgb(210,85,47)"/><text x="37.3787%" y="559.50">cpu_stop_queue_work</text></g><g><title>preempt_schedule_thunk (235 samples, 58.17%)</title><rect x="37.1287%" y="533" width="58.1683%" height="15" fill="rgb(224,206,25)"/><text x="37.3787%" y="543.50">preempt_schedule_thunk</text></g><g><title>preempt_schedule_common (235 samples, 58.17%)</title><rect x="37.1287%" y="517" width="58.1683%" height="15" fill="rgb(243,201,19)"/><text x="37.3787%" y="527.50">preempt_schedule_common</text></g><g><title>__schedule (235 samples, 58.17%)</title><rect x="37.1287%" y="501" width="58.1683%" height="15" fill="rgb(236,59,4)"/><text x="37.3787%" y="511.50">__schedule</text></g><g><title>finish_task_switch (235 samples, 58.17%)</title><rect x="37.1287%" y="485" width="58.1683%" height="15" fill="rgb(254,179,45)"/><text x="37.3787%" y="495.50">finish_task_switch</text></g><g><title>_raw_spin_unlock_irq (1 samples, 0.25%)</title><rect x="95.0495%" y="469" width="0.2475%" height="15" fill="rgb(226,14,10)"/><text x="95.2995%" y="479.50"></text></g><g><title>apic_timer_interrupt (1 samples, 0.25%)</title><rect x="95.0495%" y="453" width="0.2475%" height="15" fill="rgb(244,27,41)"/><text x="95.2995%" y="463.50"></text></g><g><title>smp_apic_timer_interrupt (1 samples, 0.25%)</title><rect x="95.0495%" y="437" width="0.2475%" height="15" fill="rgb(235,35,32)"/><text x="95.2995%" y="447.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.25%)</title><rect x="95.0495%" y="421" width="0.2475%" height="15" fill="rgb(218,68,31)"/><text x="95.2995%" y="431.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.25%)</title><rect x="95.0495%" y="405" width="0.2475%" height="15" fill="rgb(207,120,37)"/><text x="95.2995%" y="415.50"></text></g><g><title>tick_sched_timer (1 samples, 0.25%)</title><rect x="95.0495%" y="389" width="0.2475%" height="15" fill="rgb(227,98,0)"/><text x="95.2995%" y="399.50"></text></g><g><title>tick_sched_handle (1 samples, 0.25%)</title><rect x="95.0495%" y="373" width="0.2475%" height="15" fill="rgb(207,7,3)"/><text x="95.2995%" y="383.50"></text></g><g><title>update_process_times (1 samples, 0.25%)</title><rect x="95.0495%" y="357" width="0.2475%" height="15" fill="rgb(206,98,19)"/><text x="95.2995%" y="367.50"></text></g><g><title>scheduler_tick (1 samples, 0.25%)</title><rect x="95.0495%" y="341" width="0.2475%" height="15" fill="rgb(217,5,26)"/><text x="95.2995%" y="351.50"></text></g><g><title>task_tick_fair (1 samples, 0.25%)</title><rect x="95.0495%" y="325" width="0.2475%" height="15" fill="rgb(235,190,38)"/><text x="95.2995%" y="335.50"></text></g><g><title>update_load_avg (1 samples, 0.25%)</title><rect x="95.0495%" y="309" width="0.2475%" height="15" fill="rgb(247,86,24)"/><text x="95.2995%" y="319.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.25%)</title><rect x="95.0495%" y="293" width="0.2475%" height="15" fill="rgb(205,101,16)"/><text x="95.2995%" y="303.50"></text></g><g><title>entry_SYSCALL_64 (237 samples, 58.66%)</title><rect x="37.1287%" y="645" width="58.6634%" height="15" fill="rgb(246,168,33)"/><text x="37.3787%" y="655.50">entry_SYSCALL_64</text></g><g><title>do_syscall_64 (237 samples, 58.66%)</title><rect x="37.1287%" y="629" width="58.6634%" height="15" fill="rgb(231,114,1)"/><text x="37.3787%" y="639.50">do_syscall_64</text></g><g><title>__x64_sys_sched_setaffinity (237 samples, 58.66%)</title><rect x="37.1287%" y="613" width="58.6634%" height="15" fill="rgb(207,184,53)"/><text x="37.3787%" y="623.50">__x64_sys_sched_setaffinity</text></g><g><title>sched_setaffinity (237 samples, 58.66%)</title><rect x="37.1287%" y="597" width="58.6634%" height="15" fill="rgb(224,95,51)"/><text x="37.3787%" y="607.50">sched_setaffinity</text></g><g><title>cpuset_cpus_allowed (2 samples, 0.50%)</title><rect x="95.2970%" y="581" width="0.4950%" height="15" fill="rgb(212,188,45)"/><text x="95.5470%" y="591.50"></text></g><g><title>_raw_spin_lock_irqsave (2 samples, 0.50%)</title><rect x="95.2970%" y="565" width="0.4950%" height="15" fill="rgb(223,154,38)"/><text x="95.5470%" y="575.50"></text></g><g><title>__GI___sched_setaffinity_new (239 samples, 59.16%)</title><rect x="36.8812%" y="661" width="59.1584%" height="15" fill="rgb(251,22,52)"/><text x="37.1312%" y="671.50">__GI___sched_setaffinity_new</text></g><g><title>syscall_return_via_sysret (1 samples, 0.25%)</title><rect x="95.7921%" y="645" width="0.2475%" height="15" fill="rgb(229,209,22)"/><text x="96.0421%" y="655.50"></text></g><g><title>hwloc::Topology::new (246 samples, 60.89%)</title><rect x="35.6436%" y="757" width="60.8911%" height="15" fill="rgb(234,138,34)"/><text x="35.8936%" y="767.50">hwloc::Topology::new</text></g><g><title>hwloc_topology_load (246 samples, 60.89%)</title><rect x="35.6436%" y="741" width="60.8911%" height="15" fill="rgb(212,95,11)"/><text x="35.8936%" y="751.50">hwloc_topology_load</text></g><g><title>[libhwloc.so.15.2.0] (246 samples, 60.89%)</title><rect x="35.6436%" y="725" width="60.8911%" height="15" fill="rgb(240,179,47)"/><text x="35.8936%" y="735.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (246 samples, 60.89%)</title><rect x="35.6436%" y="709" width="60.8911%" height="15" fill="rgb(240,163,11)"/><text x="35.8936%" y="719.50">[libhwloc.so.15.2.0]</text></g><g><title>[libhwloc.so.15.2.0] (246 samples, 60.89%)</title><rect x="35.6436%" y="693" width="60.8911%" height="15" fill="rgb(236,37,12)"/><text x="35.8936%" y="703.50">[libhwloc.so.15.2.0]</text></g><g><title>hwloc_linux_set_tid_cpubind (244 samples, 60.40%)</title><rect x="36.1386%" y="677" width="60.3960%" height="15" fill="rgb(232,164,16)"/><text x="36.3886%" y="687.50">hwloc_linux_set_tid_cpubind</text></g><g><title>__sched_cpufree (2 samples, 0.50%)</title><rect x="96.0396%" y="661" width="0.4950%" height="15" fill="rgb(244,205,15)"/><text x="96.2896%" y="671.50"></text></g><g><title>mysql::conn::queryable::Queryable::query_drop (1 samples, 0.25%)</title><rect x="96.5347%" y="757" width="0.2475%" height="15" fill="rgb(223,117,47)"/><text x="96.7847%" y="767.50"></text></g><g><title>mysql::conn::Conn::_query (1 samples, 0.25%)</title><rect x="96.5347%" y="741" width="0.2475%" height="15" fill="rgb(244,107,35)"/><text x="96.7847%" y="751.50"></text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 0.25%)</title><rect x="96.5347%" y="725" width="0.2475%" height="15" fill="rgb(205,140,8)"/><text x="96.7847%" y="735.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.25%)</title><rect x="96.7822%" y="757" width="0.2475%" height="15" fill="rgb(228,84,46)"/><text x="97.0322%" y="767.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.25%)</title><rect x="96.7822%" y="741" width="0.2475%" height="15" fill="rgb(254,188,9)"/><text x="97.0322%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.25%)</title><rect x="96.7822%" y="725" width="0.2475%" height="15" fill="rgb(206,112,54)"/><text x="97.0322%" y="735.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (1 samples, 0.25%)</title><rect x="96.7822%" y="709" width="0.2475%" height="15" fill="rgb(216,84,49)"/><text x="97.0322%" y="719.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.25%)</title><rect x="96.7822%" y="693" width="0.2475%" height="15" fill="rgb(214,194,35)"/><text x="97.0322%" y="703.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.25%)</title><rect x="96.7822%" y="677" width="0.2475%" height="15" fill="rgb(249,28,3)"/><text x="97.0322%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.25%)</title><rect x="96.7822%" y="661" width="0.2475%" height="15" fill="rgb(222,56,52)"/><text x="97.0322%" y="671.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.25%)</title><rect x="96.7822%" y="645" width="0.2475%" height="15" fill="rgb(245,217,50)"/><text x="97.0322%" y="655.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="96.7822%" y="629" width="0.2475%" height="15" fill="rgb(213,201,24)"/><text x="97.0322%" y="639.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (1 samples, 0.25%)</title><rect x="96.7822%" y="613" width="0.2475%" height="15" fill="rgb(248,116,28)"/><text x="97.0322%" y="623.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.25%)</title><rect x="96.7822%" y="597" width="0.2475%" height="15" fill="rgb(219,72,43)"/><text x="97.0322%" y="607.50"></text></g><g><title>__libc_start_main (254 samples, 62.87%)</title><rect x="34.4059%" y="917" width="62.8713%" height="15" fill="rgb(209,138,14)"/><text x="34.6559%" y="927.50">__libc_start_main</text></g><g><title>main (253 samples, 62.62%)</title><rect x="34.6535%" y="901" width="62.6238%" height="15" fill="rgb(222,18,33)"/><text x="34.9035%" y="911.50">main</text></g><g><title>std::rt::lang_start_internal (253 samples, 62.62%)</title><rect x="34.6535%" y="885" width="62.6238%" height="15" fill="rgb(213,199,7)"/><text x="34.9035%" y="895.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (253 samples, 62.62%)</title><rect x="34.6535%" y="869" width="62.6238%" height="15" fill="rgb(250,110,10)"/><text x="34.9035%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (253 samples, 62.62%)</title><rect x="34.6535%" y="853" width="62.6238%" height="15" fill="rgb(248,123,6)"/><text x="34.9035%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (253 samples, 62.62%)</title><rect x="34.6535%" y="837" width="62.6238%" height="15" fill="rgb(206,91,31)"/><text x="34.9035%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (253 samples, 62.62%)</title><rect x="34.6535%" y="821" width="62.6238%" height="15" fill="rgb(211,154,13)"/><text x="34.9035%" y="831.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (253 samples, 62.62%)</title><rect x="34.6535%" y="805" width="62.6238%" height="15" fill="rgb(225,148,7)"/><text x="34.9035%" y="815.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (253 samples, 62.62%)</title><rect x="34.6535%" y="789" width="62.6238%" height="15" fill="rgb(220,160,43)"/><text x="34.9035%" y="799.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lobsters::main (253 samples, 62.62%)</title><rect x="34.6535%" y="773" width="62.6238%" height="15" fill="rgb(213,52,39)"/><text x="34.9035%" y="783.50">lobsters::main</text></g><g><title>std::net::each_addr (1 samples, 0.25%)</title><rect x="97.0297%" y="757" width="0.2475%" height="15" fill="rgb(243,137,7)"/><text x="97.2797%" y="767.50"></text></g><g><title>std::sys_common::net::TcpListener::bind (1 samples, 0.25%)</title><rect x="97.0297%" y="741" width="0.2475%" height="15" fill="rgb(230,79,13)"/><text x="97.2797%" y="751.50"></text></g><g><title>std::sys_common::net::setsockopt (1 samples, 0.25%)</title><rect x="97.0297%" y="725" width="0.2475%" height="15" fill="rgb(247,105,23)"/><text x="97.2797%" y="735.50"></text></g><g><title>__setsockopt (1 samples, 0.25%)</title><rect x="97.0297%" y="709" width="0.2475%" height="15" fill="rgb(223,179,41)"/><text x="97.2797%" y="719.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.25%)</title><rect x="97.0297%" y="693" width="0.2475%" height="15" fill="rgb(218,9,34)"/><text x="97.2797%" y="703.50"></text></g><g><title>do_syscall_64 (1 samples, 0.25%)</title><rect x="97.0297%" y="677" width="0.2475%" height="15" fill="rgb(222,106,8)"/><text x="97.2797%" y="687.50"></text></g><g><title>__x64_sys_setsockopt (1 samples, 0.25%)</title><rect x="97.0297%" y="661" width="0.2475%" height="15" fill="rgb(211,220,0)"/><text x="97.2797%" y="671.50"></text></g><g><title>__sys_setsockopt (1 samples, 0.25%)</title><rect x="97.0297%" y="645" width="0.2475%" height="15" fill="rgb(229,52,16)"/><text x="97.2797%" y="655.50"></text></g><g><title>sock_setsockopt (1 samples, 0.25%)</title><rect x="97.0297%" y="629" width="0.2475%" height="15" fill="rgb(212,155,18)"/><text x="97.2797%" y="639.50"></text></g><g><title>_start (255 samples, 63.12%)</title><rect x="34.4059%" y="933" width="63.1188%" height="15" fill="rgb(242,21,14)"/><text x="34.6559%" y="943.50">_start</text></g><g><title>_dl_start (1 samples, 0.25%)</title><rect x="97.2772%" y="917" width="0.2475%" height="15" fill="rgb(222,19,48)"/><text x="97.5272%" y="927.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.25%)</title><rect x="97.2772%" y="901" width="0.2475%" height="15" fill="rgb(232,45,27)"/><text x="97.5272%" y="911.50"></text></g><g><title>dl_main (1 samples, 0.25%)</title><rect x="97.2772%" y="885" width="0.2475%" height="15" fill="rgb(249,103,42)"/><text x="97.5272%" y="895.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.25%)</title><rect x="97.2772%" y="869" width="0.2475%" height="15" fill="rgb(246,81,33)"/><text x="97.5272%" y="879.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.25%)</title><rect x="97.2772%" y="853" width="0.2475%" height="15" fill="rgb(252,33,42)"/><text x="97.5272%" y="863.50"></text></g><g><title>openaux (1 samples, 0.25%)</title><rect x="97.2772%" y="837" width="0.2475%" height="15" fill="rgb(209,212,41)"/><text x="97.5272%" y="847.50"></text></g><g><title>_dl_map_object (1 samples, 0.25%)</title><rect x="97.2772%" y="821" width="0.2475%" height="15" fill="rgb(207,154,6)"/><text x="97.5272%" y="831.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.25%)</title><rect x="97.2772%" y="805" width="0.2475%" height="15" fill="rgb(223,64,47)"/><text x="97.5272%" y="815.50"></text></g><g><title>__mmap (1 samples, 0.25%)</title><rect x="97.2772%" y="789" width="0.2475%" height="15" fill="rgb(211,161,38)"/><text x="97.5272%" y="799.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.25%)</title><rect x="97.2772%" y="773" width="0.2475%" height="15" fill="rgb(219,138,40)"/><text x="97.5272%" y="783.50"></text></g><g><title>do_syscall_64 (1 samples, 0.25%)</title><rect x="97.2772%" y="757" width="0.2475%" height="15" fill="rgb(241,228,46)"/><text x="97.5272%" y="767.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.25%)</title><rect x="97.2772%" y="741" width="0.2475%" height="15" fill="rgb(223,209,38)"/><text x="97.5272%" y="751.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.25%)</title><rect x="97.2772%" y="725" width="0.2475%" height="15" fill="rgb(236,164,45)"/><text x="97.5272%" y="735.50"></text></g><g><title>do_mmap (1 samples, 0.25%)</title><rect x="97.2772%" y="709" width="0.2475%" height="15" fill="rgb(231,15,5)"/><text x="97.5272%" y="719.50"></text></g><g><title>mmap_region (1 samples, 0.25%)</title><rect x="97.2772%" y="693" width="0.2475%" height="15" fill="rgb(252,35,15)"/><text x="97.5272%" y="703.50"></text></g><g><title>perf_event_mmap (1 samples, 0.25%)</title><rect x="97.2772%" y="677" width="0.2475%" height="15" fill="rgb(248,181,18)"/><text x="97.5272%" y="687.50"></text></g><g><title>perf_iterate_sb (1 samples, 0.25%)</title><rect x="97.2772%" y="661" width="0.2475%" height="15" fill="rgb(233,39,42)"/><text x="97.5272%" y="671.50"></text></g><g><title>perf_iterate_ctx (1 samples, 0.25%)</title><rect x="97.2772%" y="645" width="0.2475%" height="15" fill="rgb(238,110,33)"/><text x="97.5272%" y="655.50"></text></g><g><title>[vmlinux] (1 samples, 0.25%)</title><rect x="97.7723%" y="901" width="0.2475%" height="15" fill="rgb(233,195,10)"/><text x="98.0223%" y="911.50"></text></g><g><title>do_group_exit (1 samples, 0.25%)</title><rect x="97.7723%" y="885" width="0.2475%" height="15" fill="rgb(254,105,3)"/><text x="98.0223%" y="895.50"></text></g><g><title>do_exit (1 samples, 0.25%)</title><rect x="97.7723%" y="869" width="0.2475%" height="15" fill="rgb(221,225,9)"/><text x="98.0223%" y="879.50"></text></g><g><title>mmput (1 samples, 0.25%)</title><rect x="97.7723%" y="853" width="0.2475%" height="15" fill="rgb(224,227,45)"/><text x="98.0223%" y="863.50"></text></g><g><title>exit_mmap (1 samples, 0.25%)</title><rect x="97.7723%" y="837" width="0.2475%" height="15" fill="rgb(229,198,43)"/><text x="98.0223%" y="847.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.25%)</title><rect x="97.7723%" y="821" width="0.2475%" height="15" fill="rgb(206,209,35)"/><text x="98.0223%" y="831.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.25%)</title><rect x="97.7723%" y="805" width="0.2475%" height="15" fill="rgb(245,195,53)"/><text x="98.0223%" y="815.50"></text></g><g><title>lru_add_drain (1 samples, 0.25%)</title><rect x="97.7723%" y="789" width="0.2475%" height="15" fill="rgb(240,92,26)"/><text x="98.0223%" y="799.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.25%)</title><rect x="97.7723%" y="773" width="0.2475%" height="15" fill="rgb(207,40,23)"/><text x="98.0223%" y="783.50"></text></g><g><title>__activate_page (1 samples, 0.25%)</title><rect x="97.7723%" y="757" width="0.2475%" height="15" fill="rgb(223,111,35)"/><text x="98.0223%" y="767.50"></text></g><g><title>entry_SYSCALL_64 (3 samples, 0.74%)</title><rect x="97.5248%" y="933" width="0.7426%" height="15" fill="rgb(229,147,28)"/><text x="97.7748%" y="943.50"></text></g><g><title>do_syscall_64 (2 samples, 0.50%)</title><rect x="97.7723%" y="917" width="0.4950%" height="15" fill="rgb(211,29,28)"/><text x="98.0223%" y="927.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.25%)</title><rect x="98.0198%" y="901" width="0.2475%" height="15" fill="rgb(228,72,33)"/><text x="98.2698%" y="911.50"></text></g><g><title>do_execve (1 samples, 0.25%)</title><rect x="98.0198%" y="885" width="0.2475%" height="15" fill="rgb(205,214,31)"/><text x="98.2698%" y="895.50"></text></g><g><title>__do_execve_file (1 samples, 0.25%)</title><rect x="98.0198%" y="869" width="0.2475%" height="15" fill="rgb(224,111,15)"/><text x="98.2698%" y="879.50"></text></g><g><title>search_binary_handler.part.0 (1 samples, 0.25%)</title><rect x="98.0198%" y="853" width="0.2475%" height="15" fill="rgb(253,21,26)"/><text x="98.2698%" y="863.50"></text></g><g><title>load_elf_binary (1 samples, 0.25%)</title><rect x="98.0198%" y="837" width="0.2475%" height="15" fill="rgb(245,139,43)"/><text x="98.2698%" y="847.50"></text></g><g><title>elf_map (1 samples, 0.25%)</title><rect x="98.0198%" y="821" width="0.2475%" height="15" fill="rgb(252,170,7)"/><text x="98.2698%" y="831.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.25%)</title><rect x="98.0198%" y="805" width="0.2475%" height="15" fill="rgb(231,118,14)"/><text x="98.2698%" y="815.50"></text></g><g><title>do_mmap (1 samples, 0.25%)</title><rect x="98.0198%" y="789" width="0.2475%" height="15" fill="rgb(238,83,0)"/><text x="98.2698%" y="799.50"></text></g><g><title>mmap_region (1 samples, 0.25%)</title><rect x="98.0198%" y="773" width="0.2475%" height="15" fill="rgb(221,39,39)"/><text x="98.2698%" y="783.50"></text></g><g><title>perf_event_mmap (1 samples, 0.25%)</title><rect x="98.0198%" y="757" width="0.2475%" height="15" fill="rgb(222,119,46)"/><text x="98.2698%" y="767.50"></text></g><g><title>lobsters (398 samples, 98.51%)</title><rect x="0.0000%" y="949" width="98.5149%" height="15" fill="rgb(222,165,49)"/><text x="0.2500%" y="959.50">lobsters</text></g><g><title>mysql_common::io::ReadMysqlExt::read_lenenc_int (1 samples, 0.25%)</title><rect x="98.2673%" y="933" width="0.2475%" height="15" fill="rgb(219,113,52)"/><text x="98.5173%" y="943.50"></text></g><g><title>all (404 samples, 100%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(214,7,15)"/><text x="0.2500%" y="975.50"></text></g><g><title>perf (6 samples, 1.49%)</title><rect x="98.5149%" y="949" width="1.4851%" height="15" fill="rgb(235,32,4)"/><text x="98.7649%" y="959.50"></text></g><g><title>entry_SYSCALL_64 (6 samples, 1.49%)</title><rect x="98.5149%" y="933" width="1.4851%" height="15" fill="rgb(238,90,54)"/><text x="98.7649%" y="943.50"></text></g><g><title>do_syscall_64 (6 samples, 1.49%)</title><rect x="98.5149%" y="917" width="1.4851%" height="15" fill="rgb(213,208,19)"/><text x="98.7649%" y="927.50"></text></g><g><title>__x64_sys_execve (6 samples, 1.49%)</title><rect x="98.5149%" y="901" width="1.4851%" height="15" fill="rgb(233,156,4)"/><text x="98.7649%" y="911.50"></text></g><g><title>do_execve (6 samples, 1.49%)</title><rect x="98.5149%" y="885" width="1.4851%" height="15" fill="rgb(207,194,5)"/><text x="98.7649%" y="895.50"></text></g><g><title>__do_execve_file (6 samples, 1.49%)</title><rect x="98.5149%" y="869" width="1.4851%" height="15" fill="rgb(206,111,30)"/><text x="98.7649%" y="879.50"></text></g><g><title>search_binary_handler.part.0 (6 samples, 1.49%)</title><rect x="98.5149%" y="853" width="1.4851%" height="15" fill="rgb(243,70,54)"/><text x="98.7649%" y="863.50"></text></g><g><title>load_elf_binary (6 samples, 1.49%)</title><rect x="98.5149%" y="837" width="1.4851%" height="15" fill="rgb(242,28,8)"/><text x="98.7649%" y="847.50"></text></g><g><title>setup_new_exec (6 samples, 1.49%)</title><rect x="98.5149%" y="821" width="1.4851%" height="15" fill="rgb(219,106,18)"/><text x="98.7649%" y="831.50"></text></g><g><title>perf_event_exec (6 samples, 1.49%)</title><rect x="98.5149%" y="805" width="1.4851%" height="15" fill="rgb(244,222,10)"/><text x="98.7649%" y="815.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 1.24%)</title><rect x="98.7624%" y="789" width="1.2376%" height="15" fill="rgb(236,179,52)"/><text x="99.0124%" y="799.50"></text></g><g><title>native_write_msr (5 samples, 1.24%)</title><rect x="98.7624%" y="773" width="1.2376%" height="15" fill="rgb(213,23,39)"/><text x="99.0124%" y="783.50"></text></g></svg></svg>