<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="45.4" y="341" width="5.9" height="15.0" fill="rgb(227,53,51)" rx="2" ry="2" />
<text  x="48.40" y="351.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (160 samples, 80.00%)</title><rect x="116.2" y="149" width="944.0" height="15.0" fill="rgb(237,63,7)" rx="2" ry="2" />
<text  x="119.20" y="159.5" >perf_event_for_each_child</text>
</g>
<g >
<title>migration/6 (1 samples, 0.50%)</title><rect x="98.5" y="373" width="5.9" height="15.0" fill="rgb(243,79,4)" rx="2" ry="2" />
<text  x="101.50" y="383.5" ></text>
</g>
<g >
<title>do_syscall_64 (160 samples, 80.00%)</title><rect x="116.2" y="229" width="944.0" height="15.0" fill="rgb(251,222,10)" rx="2" ry="2" />
<text  x="119.20" y="239.5" >do_syscall_64</text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="51.3" y="325" width="5.9" height="15.0" fill="rgb(229,94,0)" rx="2" ry="2" />
<text  x="54.30" y="335.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="27.7" y="293" width="5.9" height="15.0" fill="rgb(217,172,53)" rx="2" ry="2" />
<text  x="30.70" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1 samples, 0.50%)</title><rect x="1066.1" y="245" width="5.9" height="15.0" fill="rgb(223,5,32)" rx="2" ry="2" />
<text  x="1069.10" y="255.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="92.6" y="357" width="5.9" height="15.0" fill="rgb(253,98,36)" rx="2" ry="2" />
<text  x="95.60" y="367.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="33.6" y="309" width="5.9" height="15.0" fill="rgb(219,141,1)" rx="2" ry="2" />
<text  x="36.60" y="319.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="86.7" y="229" width="5.9" height="15.0" fill="rgb(205,63,40)" rx="2" ry="2" />
<text  x="89.70" y="239.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="39.5" y="357" width="5.9" height="15.0" fill="rgb(220,9,30)" rx="2" ry="2" />
<text  x="42.50" y="367.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="63.1" y="245" width="5.9" height="15.0" fill="rgb(205,211,3)" rx="2" ry="2" />
<text  x="66.10" y="255.5" ></text>
</g>
<g >
<title>move_queued_task (1 samples, 0.50%)</title><rect x="45.4" y="277" width="5.9" height="15.0" fill="rgb(237,22,23)" rx="2" ry="2" />
<text  x="48.40" y="287.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="86.7" y="341" width="5.9" height="15.0" fill="rgb(254,174,46)" rx="2" ry="2" />
<text  x="89.70" y="351.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="21.8" y="325" width="5.9" height="15.0" fill="rgb(228,93,32)" rx="2" ry="2" />
<text  x="24.80" y="335.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="98.5" y="293" width="5.9" height="15.0" fill="rgb(211,66,6)" rx="2" ry="2" />
<text  x="101.50" y="303.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="110.3" y="341" width="5.9" height="15.0" fill="rgb(229,200,10)" rx="2" ry="2" />
<text  x="113.30" y="351.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="74.9" y="261" width="5.9" height="15.0" fill="rgb(238,171,29)" rx="2" ry="2" />
<text  x="77.90" y="271.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="92.6" y="293" width="5.9" height="15.0" fill="rgb(212,168,12)" rx="2" ry="2" />
<text  x="95.60" y="303.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="86.7" y="261" width="5.9" height="15.0" fill="rgb(232,21,32)" rx="2" ry="2" />
<text  x="89.70" y="271.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="39.5" y="293" width="5.9" height="15.0" fill="rgb(220,80,14)" rx="2" ry="2" />
<text  x="42.50" y="303.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="69.0" y="245" width="5.9" height="15.0" fill="rgb(239,106,11)" rx="2" ry="2" />
<text  x="72.00" y="255.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="21.8" y="229" width="5.9" height="15.0" fill="rgb(210,43,3)" rx="2" ry="2" />
<text  x="24.80" y="239.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="86.7" y="293" width="5.9" height="15.0" fill="rgb(247,104,13)" rx="2" ry="2" />
<text  x="89.70" y="303.5" ></text>
</g>
<g >
<title>evlist__enable (161 samples, 80.50%)</title><rect x="116.2" y="277" width="949.9" height="15.0" fill="rgb(251,50,49)" rx="2" ry="2" />
<text  x="119.20" y="287.5" >evlist__enable</text>
</g>
<g >
<title>migration/12 (1 samples, 0.50%)</title><rect x="21.8" y="373" width="5.9" height="15.0" fill="rgb(205,153,10)" rx="2" ry="2" />
<text  x="24.80" y="383.5" ></text>
</g>
<g >
<title>event_function (160 samples, 80.00%)</title><rect x="116.2" y="69" width="944.0" height="15.0" fill="rgb(212,216,23)" rx="2" ry="2" />
<text  x="119.20" y="79.5" >event_function</text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="98.5" y="357" width="5.9" height="15.0" fill="rgb(211,192,16)" rx="2" ry="2" />
<text  x="101.50" y="367.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="86.7" y="277" width="5.9" height="15.0" fill="rgb(223,167,29)" rx="2" ry="2" />
<text  x="89.70" y="287.5" ></text>
</g>
<g >
<title>perf_event__synthesize_comm (1 samples, 0.50%)</title><rect x="1066.1" y="277" width="5.9" height="15.0" fill="rgb(226,34,4)" rx="2" ry="2" />
<text  x="1069.10" y="287.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="10.0" y="341" width="5.9" height="15.0" fill="rgb(249,50,12)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="98.5" y="229" width="5.9" height="15.0" fill="rgb(242,213,17)" rx="2" ry="2" />
<text  x="101.50" y="239.5" ></text>
</g>
<g >
<title>swapper (20 samples, 10.00%)</title><rect x="1072.0" y="373" width="118.0" height="15.0" fill="rgb(215,192,52)" rx="2" ry="2" />
<text  x="1075.00" y="383.5" >swapper</text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="51.3" y="277" width="5.9" height="15.0" fill="rgb(234,154,26)" rx="2" ry="2" />
<text  x="54.30" y="287.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="86.7" y="357" width="5.9" height="15.0" fill="rgb(211,164,19)" rx="2" ry="2" />
<text  x="89.70" y="367.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="51.3" y="293" width="5.9" height="15.0" fill="rgb(241,172,34)" rx="2" ry="2" />
<text  x="54.30" y="303.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (17 samples, 8.50%)</title><rect x="1072.0" y="245" width="100.3" height="15.0" fill="rgb(211,110,31)" rx="2" ry="2" />
<text  x="1075.00" y="255.5" >mwait_idle_w..</text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="57.2" y="293" width="5.9" height="15.0" fill="rgb(236,88,6)" rx="2" ry="2" />
<text  x="60.20" y="303.5" ></text>
</g>
<g >
<title>ksys_ioctl (160 samples, 80.00%)</title><rect x="116.2" y="197" width="944.0" height="15.0" fill="rgb(214,37,20)" rx="2" ry="2" />
<text  x="119.20" y="207.5" >ksys_ioctl</text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="80.8" y="277" width="5.9" height="15.0" fill="rgb(223,96,54)" rx="2" ry="2" />
<text  x="83.80" y="287.5" ></text>
</g>
<g >
<title>start_secondary (20 samples, 10.00%)</title><rect x="1072.0" y="341" width="118.0" height="15.0" fill="rgb(251,224,15)" rx="2" ry="2" />
<text  x="1075.00" y="351.5" >start_secondary</text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="80.8" y="261" width="5.9" height="15.0" fill="rgb(214,167,42)" rx="2" ry="2" />
<text  x="83.80" y="271.5" ></text>
</g>
<g >
<title>idle_cpu (1 samples, 0.50%)</title><rect x="21.8" y="197" width="5.9" height="15.0" fill="rgb(220,33,32)" rx="2" ry="2" />
<text  x="24.80" y="207.5" ></text>
</g>
<g >
<title>move_queued_task (1 samples, 0.50%)</title><rect x="104.4" y="277" width="5.9" height="15.0" fill="rgb(207,113,31)" rx="2" ry="2" />
<text  x="107.40" y="287.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="51.3" y="341" width="5.9" height="15.0" fill="rgb(205,132,9)" rx="2" ry="2" />
<text  x="54.30" y="351.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.50%)</title><rect x="1066.1" y="261" width="5.9" height="15.0" fill="rgb(225,34,0)" rx="2" ry="2" />
<text  x="1069.10" y="271.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="27.7" y="341" width="5.9" height="15.0" fill="rgb(225,214,23)" rx="2" ry="2" />
<text  x="30.70" y="351.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="86.7" y="213" width="5.9" height="15.0" fill="rgb(239,44,38)" rx="2" ry="2" />
<text  x="89.70" y="223.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="15.9" y="341" width="5.9" height="15.0" fill="rgb(239,72,54)" rx="2" ry="2" />
<text  x="18.90" y="351.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="80.8" y="309" width="5.9" height="15.0" fill="rgb(229,216,52)" rx="2" ry="2" />
<text  x="83.80" y="319.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="21.8" y="261" width="5.9" height="15.0" fill="rgb(253,44,39)" rx="2" ry="2" />
<text  x="24.80" y="271.5" ></text>
</g>
<g >
<title>pick_next_task_idle (1 samples, 0.50%)</title><rect x="92.6" y="277" width="5.9" height="15.0" fill="rgb(215,43,36)" rx="2" ry="2" />
<text  x="95.60" y="287.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="45.4" y="357" width="5.9" height="15.0" fill="rgb(218,103,0)" rx="2" ry="2" />
<text  x="48.40" y="367.5" ></text>
</g>
<g >
<title>migration/16 (1 samples, 0.50%)</title><rect x="39.5" y="373" width="5.9" height="15.0" fill="rgb(225,17,46)" rx="2" ry="2" />
<text  x="42.50" y="383.5" ></text>
</g>
<g >
<title>cpumask_next_and (1 samples, 0.50%)</title><rect x="63.1" y="197" width="5.9" height="15.0" fill="rgb(251,63,27)" rx="2" ry="2" />
<text  x="66.10" y="207.5" ></text>
</g>
<g >
<title>cpu_startup_entry (20 samples, 10.00%)</title><rect x="1072.0" y="325" width="118.0" height="15.0" fill="rgb(243,81,1)" rx="2" ry="2" />
<text  x="1075.00" y="335.5" >cpu_startup_en..</text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="21.8" y="245" width="5.9" height="15.0" fill="rgb(205,22,49)" rx="2" ry="2" />
<text  x="24.80" y="255.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="39.5" y="245" width="5.9" height="15.0" fill="rgb(239,15,53)" rx="2" ry="2" />
<text  x="42.50" y="255.5" ></text>
</g>
<g >
<title>migration/5 (1 samples, 0.50%)</title><rect x="92.6" y="373" width="5.9" height="15.0" fill="rgb(254,208,25)" rx="2" ry="2" />
<text  x="95.60" y="383.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="63.1" y="261" width="5.9" height="15.0" fill="rgb(246,194,0)" rx="2" ry="2" />
<text  x="66.10" y="271.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="74.9" y="213" width="5.9" height="15.0" fill="rgb(226,33,1)" rx="2" ry="2" />
<text  x="77.90" y="223.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="27.7" y="277" width="5.9" height="15.0" fill="rgb(219,79,39)" rx="2" ry="2" />
<text  x="30.70" y="287.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="10.0" y="325" width="5.9" height="15.0" fill="rgb(212,27,38)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.50%)</title><rect x="33.6" y="213" width="5.9" height="15.0" fill="rgb(254,95,10)" rx="2" ry="2" />
<text  x="36.60" y="223.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="57.2" y="325" width="5.9" height="15.0" fill="rgb(220,120,2)" rx="2" ry="2" />
<text  x="60.20" y="335.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.50%)</title><rect x="57.2" y="213" width="5.9" height="15.0" fill="rgb(226,136,24)" rx="2" ry="2" />
<text  x="60.20" y="223.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="69.0" y="357" width="5.9" height="15.0" fill="rgb(216,185,2)" rx="2" ry="2" />
<text  x="72.00" y="367.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="110.3" y="261" width="5.9" height="15.0" fill="rgb(230,108,31)" rx="2" ry="2" />
<text  x="113.30" y="271.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="92.6" y="309" width="5.9" height="15.0" fill="rgb(207,145,31)" rx="2" ry="2" />
<text  x="95.60" y="319.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="21.8" y="341" width="5.9" height="15.0" fill="rgb(219,165,35)" rx="2" ry="2" />
<text  x="24.80" y="351.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="63.1" y="309" width="5.9" height="15.0" fill="rgb(239,111,36)" rx="2" ry="2" />
<text  x="66.10" y="319.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="63.1" y="277" width="5.9" height="15.0" fill="rgb(252,181,17)" rx="2" ry="2" />
<text  x="66.10" y="287.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="57.2" y="277" width="5.9" height="15.0" fill="rgb(217,202,33)" rx="2" ry="2" />
<text  x="60.20" y="287.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="74.9" y="229" width="5.9" height="15.0" fill="rgb(217,224,37)" rx="2" ry="2" />
<text  x="77.90" y="239.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="51.3" y="357" width="5.9" height="15.0" fill="rgb(213,180,52)" rx="2" ry="2" />
<text  x="54.30" y="367.5" ></text>
</g>
<g >
<title>__switch_to (1 samples, 0.50%)</title><rect x="1060.2" y="245" width="5.9" height="15.0" fill="rgb(222,119,19)" rx="2" ry="2" />
<text  x="1063.20" y="255.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="33.6" y="277" width="5.9" height="15.0" fill="rgb(239,52,24)" rx="2" ry="2" />
<text  x="36.60" y="287.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="74.9" y="357" width="5.9" height="15.0" fill="rgb(223,2,41)" rx="2" ry="2" />
<text  x="77.90" y="367.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="69.0" y="277" width="5.9" height="15.0" fill="rgb(249,116,2)" rx="2" ry="2" />
<text  x="72.00" y="287.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="57.2" y="261" width="5.9" height="15.0" fill="rgb(212,95,47)" rx="2" ry="2" />
<text  x="60.20" y="271.5" ></text>
</g>
<g >
<title>menu_select (2 samples, 1.00%)</title><rect x="1172.3" y="293" width="11.8" height="15.0" fill="rgb(205,12,48)" rx="2" ry="2" />
<text  x="1175.30" y="303.5" ></text>
</g>
<g >
<title>debug_smp_processor_id (1 samples, 0.50%)</title><rect x="1184.1" y="277" width="5.9" height="15.0" fill="rgb(211,184,44)" rx="2" ry="2" />
<text  x="1187.10" y="287.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="110.3" y="309" width="5.9" height="15.0" fill="rgb(249,94,35)" rx="2" ry="2" />
<text  x="113.30" y="319.5" ></text>
</g>
<g >
<title>migration/15 (1 samples, 0.50%)</title><rect x="33.6" y="373" width="5.9" height="15.0" fill="rgb(231,53,41)" rx="2" ry="2" />
<text  x="36.60" y="383.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="80.8" y="325" width="5.9" height="15.0" fill="rgb(230,151,34)" rx="2" ry="2" />
<text  x="83.80" y="335.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="110.3" y="293" width="5.9" height="15.0" fill="rgb(248,57,7)" rx="2" ry="2" />
<text  x="113.30" y="303.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="39.5" y="309" width="5.9" height="15.0" fill="rgb(222,36,32)" rx="2" ry="2" />
<text  x="42.50" y="319.5" ></text>
</g>
<g >
<title>__update_idle_core (1 samples, 0.50%)</title><rect x="92.6" y="261" width="5.9" height="15.0" fill="rgb(246,222,17)" rx="2" ry="2" />
<text  x="95.60" y="271.5" ></text>
</g>
<g >
<title>migration/0 (1 samples, 0.50%)</title><rect x="10.0" y="373" width="5.9" height="15.0" fill="rgb(250,144,29)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="86.7" y="245" width="5.9" height="15.0" fill="rgb(233,156,43)" rx="2" ry="2" />
<text  x="89.70" y="255.5" ></text>
</g>
<g >
<title>rcu_idle_enter (1 samples, 0.50%)</title><rect x="1184.1" y="293" width="5.9" height="15.0" fill="rgb(221,39,2)" rx="2" ry="2" />
<text  x="1187.10" y="303.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="15.9" y="357" width="5.9" height="15.0" fill="rgb(212,5,15)" rx="2" ry="2" />
<text  x="18.90" y="367.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="80.8" y="245" width="5.9" height="15.0" fill="rgb(247,191,18)" rx="2" ry="2" />
<text  x="83.80" y="255.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="45.4" y="325" width="5.9" height="15.0" fill="rgb(238,204,12)" rx="2" ry="2" />
<text  x="48.40" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (160 samples, 80.00%)</title><rect x="116.2" y="245" width="944.0" height="15.0" fill="rgb(240,50,16)" rx="2" ry="2" />
<text  x="119.20" y="255.5" >entry_SYSCALL_64</text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="92.6" y="325" width="5.9" height="15.0" fill="rgb(243,159,7)" rx="2" ry="2" />
<text  x="95.60" y="335.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="80.8" y="357" width="5.9" height="15.0" fill="rgb(227,87,44)" rx="2" ry="2" />
<text  x="83.80" y="367.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="51.3" y="261" width="5.9" height="15.0" fill="rgb(207,17,17)" rx="2" ry="2" />
<text  x="54.30" y="271.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="33.6" y="261" width="5.9" height="15.0" fill="rgb(235,126,46)" rx="2" ry="2" />
<text  x="36.60" y="271.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="80.8" y="341" width="5.9" height="15.0" fill="rgb(220,185,7)" rx="2" ry="2" />
<text  x="83.80" y="351.5" ></text>
</g>
<g >
<title>migration/17 (1 samples, 0.50%)</title><rect x="45.4" y="373" width="5.9" height="15.0" fill="rgb(221,104,15)" rx="2" ry="2" />
<text  x="48.40" y="383.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="69.0" y="341" width="5.9" height="15.0" fill="rgb(208,151,28)" rx="2" ry="2" />
<text  x="72.00" y="351.5" ></text>
</g>
<g >
<title>irq_work_needs_cpu (1 samples, 0.50%)</title><rect x="1178.2" y="245" width="5.9" height="15.0" fill="rgb(248,166,43)" rx="2" ry="2" />
<text  x="1181.20" y="255.5" ></text>
</g>
<g >
<title>[vmlinux] (20 samples, 10.00%)</title><rect x="1072.0" y="357" width="118.0" height="15.0" fill="rgb(252,132,20)" rx="2" ry="2" />
<text  x="1075.00" y="367.5" >[vmlinux]</text>
</g>
<g >
<title>sched_setaffinity@@GLIBC_2.3.4 (1 samples, 0.50%)</title><rect x="1060.2" y="261" width="5.9" height="15.0" fill="rgb(238,207,4)" rx="2" ry="2" />
<text  x="1063.20" y="271.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="80.8" y="293" width="5.9" height="15.0" fill="rgb(222,90,3)" rx="2" ry="2" />
<text  x="83.80" y="303.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="98.5" y="309" width="5.9" height="15.0" fill="rgb(210,111,46)" rx="2" ry="2" />
<text  x="101.50" y="319.5" ></text>
</g>
<g >
<title>__GI___ioctl (160 samples, 80.00%)</title><rect x="116.2" y="261" width="944.0" height="15.0" fill="rgb(251,58,22)" rx="2" ry="2" />
<text  x="119.20" y="271.5" >__GI___ioctl</text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="98.5" y="325" width="5.9" height="15.0" fill="rgb(210,151,18)" rx="2" ry="2" />
<text  x="101.50" y="335.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="80.8" y="229" width="5.9" height="15.0" fill="rgb(212,159,38)" rx="2" ry="2" />
<text  x="83.80" y="239.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="27.7" y="245" width="5.9" height="15.0" fill="rgb(225,46,14)" rx="2" ry="2" />
<text  x="30.70" y="255.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="69.0" y="309" width="5.9" height="15.0" fill="rgb(224,199,46)" rx="2" ry="2" />
<text  x="72.00" y="319.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="15.9" y="309" width="5.9" height="15.0" fill="rgb(224,47,20)" rx="2" ry="2" />
<text  x="18.90" y="319.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="21.8" y="277" width="5.9" height="15.0" fill="rgb(212,82,46)" rx="2" ry="2" />
<text  x="24.80" y="287.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="39.5" y="277" width="5.9" height="15.0" fill="rgb(235,14,33)" rx="2" ry="2" />
<text  x="42.50" y="287.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="98.5" y="261" width="5.9" height="15.0" fill="rgb(237,136,30)" rx="2" ry="2" />
<text  x="101.50" y="271.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="15.9" y="213" width="5.9" height="15.0" fill="rgb(234,45,6)" rx="2" ry="2" />
<text  x="18.90" y="223.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="21.8" y="293" width="5.9" height="15.0" fill="rgb(215,53,50)" rx="2" ry="2" />
<text  x="24.80" y="303.5" ></text>
</g>
<g >
<title>cpu_stopper_thread (1 samples, 0.50%)</title><rect x="104.4" y="309" width="5.9" height="15.0" fill="rgb(250,146,51)" rx="2" ry="2" />
<text  x="107.40" y="319.5" ></text>
</g>
<g >
<title>__libc_start_main (162 samples, 81.00%)</title><rect x="116.2" y="341" width="955.8" height="15.0" fill="rgb(233,121,16)" rx="2" ry="2" />
<text  x="119.20" y="351.5" >__libc_start_main</text>
</g>
<g >
<title>migration/18 (1 samples, 0.50%)</title><rect x="51.3" y="373" width="5.9" height="15.0" fill="rgb(209,105,20)" rx="2" ry="2" />
<text  x="54.30" y="383.5" ></text>
</g>
<g >
<title>[unknown] (162 samples, 81.00%)</title><rect x="116.2" y="357" width="955.8" height="15.0" fill="rgb(231,216,3)" rx="2" ry="2" />
<text  x="119.20" y="367.5" >[unknown]</text>
</g>
<g >
<title>ksys_read (1 samples, 0.50%)</title><rect x="1066.1" y="213" width="5.9" height="15.0" fill="rgb(235,188,39)" rx="2" ry="2" />
<text  x="1069.10" y="223.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="15.9" y="293" width="5.9" height="15.0" fill="rgb(217,56,22)" rx="2" ry="2" />
<text  x="18.90" y="303.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="10.0" y="357" width="5.9" height="15.0" fill="rgb(240,64,17)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>migration/4 (1 samples, 0.50%)</title><rect x="86.7" y="373" width="5.9" height="15.0" fill="rgb(231,76,52)" rx="2" ry="2" />
<text  x="89.70" y="383.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="63.1" y="341" width="5.9" height="15.0" fill="rgb(246,218,16)" rx="2" ry="2" />
<text  x="66.10" y="351.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.50%)</title><rect x="33.6" y="229" width="5.9" height="15.0" fill="rgb(242,211,52)" rx="2" ry="2" />
<text  x="36.60" y="239.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="104.4" y="357" width="5.9" height="15.0" fill="rgb(243,139,34)" rx="2" ry="2" />
<text  x="107.40" y="367.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="104.4" y="341" width="5.9" height="15.0" fill="rgb(244,227,47)" rx="2" ry="2" />
<text  x="107.40" y="351.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.50%)</title><rect x="57.2" y="229" width="5.9" height="15.0" fill="rgb(250,76,29)" rx="2" ry="2" />
<text  x="60.20" y="239.5" ></text>
</g>
<g >
<title>cpu_stopper_thread (1 samples, 0.50%)</title><rect x="45.4" y="309" width="5.9" height="15.0" fill="rgb(232,186,33)" rx="2" ry="2" />
<text  x="48.40" y="319.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="51.3" y="309" width="5.9" height="15.0" fill="rgb(232,8,12)" rx="2" ry="2" />
<text  x="54.30" y="319.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="69.0" y="261" width="5.9" height="15.0" fill="rgb(242,180,42)" rx="2" ry="2" />
<text  x="72.00" y="271.5" ></text>
</g>
<g >
<title>all (200 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(228,119,30)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>cpu_stopper_thread (1 samples, 0.50%)</title><rect x="10.0" y="309" width="5.9" height="15.0" fill="rgb(234,94,42)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>intel_idle (17 samples, 8.50%)</title><rect x="1072.0" y="261" width="100.3" height="15.0" fill="rgb(235,87,42)" rx="2" ry="2" />
<text  x="1075.00" y="271.5" >intel_idle</text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="110.3" y="213" width="5.9" height="15.0" fill="rgb(212,37,54)" rx="2" ry="2" />
<text  x="113.30" y="223.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="74.9" y="309" width="5.9" height="15.0" fill="rgb(216,48,11)" rx="2" ry="2" />
<text  x="77.90" y="319.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="27.7" y="229" width="5.9" height="15.0" fill="rgb(225,118,28)" rx="2" ry="2" />
<text  x="30.70" y="239.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="63.1" y="213" width="5.9" height="15.0" fill="rgb(242,84,34)" rx="2" ry="2" />
<text  x="66.10" y="223.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="110.3" y="229" width="5.9" height="15.0" fill="rgb(236,225,6)" rx="2" ry="2" />
<text  x="113.30" y="239.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="92.6" y="341" width="5.9" height="15.0" fill="rgb(226,3,3)" rx="2" ry="2" />
<text  x="95.60" y="351.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="27.7" y="309" width="5.9" height="15.0" fill="rgb(243,20,48)" rx="2" ry="2" />
<text  x="30.70" y="319.5" ></text>
</g>
<g >
<title>tick_nohz_next_event (1 samples, 0.50%)</title><rect x="1178.2" y="261" width="5.9" height="15.0" fill="rgb(213,32,16)" rx="2" ry="2" />
<text  x="1181.20" y="271.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="33.6" y="357" width="5.9" height="15.0" fill="rgb(233,194,28)" rx="2" ry="2" />
<text  x="36.60" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (160 samples, 80.00%)</title><rect x="116.2" y="213" width="944.0" height="15.0" fill="rgb(217,200,45)" rx="2" ry="2" />
<text  x="119.20" y="223.5" >__x64_sys_ioctl</text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="63.1" y="293" width="5.9" height="15.0" fill="rgb(216,223,51)" rx="2" ry="2" />
<text  x="66.10" y="303.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="98.5" y="213" width="5.9" height="15.0" fill="rgb(243,114,31)" rx="2" ry="2" />
<text  x="101.50" y="223.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="98.5" y="245" width="5.9" height="15.0" fill="rgb(208,37,54)" rx="2" ry="2" />
<text  x="101.50" y="255.5" ></text>
</g>
<g >
<title>migration/23 (1 samples, 0.50%)</title><rect x="63.1" y="373" width="5.9" height="15.0" fill="rgb(210,96,28)" rx="2" ry="2" />
<text  x="66.10" y="383.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="110.3" y="277" width="5.9" height="15.0" fill="rgb(209,136,28)" rx="2" ry="2" />
<text  x="113.30" y="287.5" ></text>
</g>
<g >
<title>find_next_and_bit (1 samples, 0.50%)</title><rect x="63.1" y="181" width="5.9" height="15.0" fill="rgb(214,65,54)" rx="2" ry="2" />
<text  x="66.10" y="191.5" ></text>
</g>
<g >
<title>event_function_call (160 samples, 80.00%)</title><rect x="116.2" y="133" width="944.0" height="15.0" fill="rgb(248,84,3)" rx="2" ry="2" />
<text  x="119.20" y="143.5" >event_function_call</text>
</g>
<g >
<title>do_idle (20 samples, 10.00%)</title><rect x="1072.0" y="309" width="118.0" height="15.0" fill="rgb(220,184,54)" rx="2" ry="2" />
<text  x="1075.00" y="319.5" >do_idle</text>
</g>
<g >
<title>enqueue_task_fair (1 samples, 0.50%)</title><rect x="104.4" y="261" width="5.9" height="15.0" fill="rgb(238,87,32)" rx="2" ry="2" />
<text  x="107.40" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.50%)</title><rect x="1066.1" y="229" width="5.9" height="15.0" fill="rgb(210,134,38)" rx="2" ry="2" />
<text  x="1069.10" y="239.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="39.5" y="261" width="5.9" height="15.0" fill="rgb(251,95,28)" rx="2" ry="2" />
<text  x="42.50" y="271.5" ></text>
</g>
<g >
<title>migration/8 (1 samples, 0.50%)</title><rect x="110.3" y="373" width="5.9" height="15.0" fill="rgb(219,201,41)" rx="2" ry="2" />
<text  x="113.30" y="383.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="15.9" y="245" width="5.9" height="15.0" fill="rgb(235,115,2)" rx="2" ry="2" />
<text  x="18.90" y="255.5" ></text>
</g>
<g >
<title>enqueue_entity (1 samples, 0.50%)</title><rect x="104.4" y="245" width="5.9" height="15.0" fill="rgb(250,80,3)" rx="2" ry="2" />
<text  x="107.40" y="255.5" ></text>
</g>
<g >
<title>perf (162 samples, 81.00%)</title><rect x="116.2" y="373" width="955.8" height="15.0" fill="rgb(238,9,3)" rx="2" ry="2" />
<text  x="119.20" y="383.5" >perf</text>
</g>
<g >
<title>migration/3 (1 samples, 0.50%)</title><rect x="80.8" y="373" width="5.9" height="15.0" fill="rgb(240,55,32)" rx="2" ry="2" />
<text  x="83.80" y="383.5" ></text>
</g>
<g >
<title>migrate_task_rq_fair (1 samples, 0.50%)</title><rect x="45.4" y="245" width="5.9" height="15.0" fill="rgb(228,187,36)" rx="2" ry="2" />
<text  x="48.40" y="255.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="15.9" y="325" width="5.9" height="15.0" fill="rgb(247,192,0)" rx="2" ry="2" />
<text  x="18.90" y="335.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="74.9" y="277" width="5.9" height="15.0" fill="rgb(246,131,13)" rx="2" ry="2" />
<text  x="77.90" y="287.5" ></text>
</g>
<g >
<title>move_queued_task (1 samples, 0.50%)</title><rect x="10.0" y="277" width="5.9" height="15.0" fill="rgb(210,118,51)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="80.8" y="213" width="5.9" height="15.0" fill="rgb(218,37,37)" rx="2" ry="2" />
<text  x="83.80" y="223.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="27.7" y="213" width="5.9" height="15.0" fill="rgb(243,126,43)" rx="2" ry="2" />
<text  x="30.70" y="223.5" ></text>
</g>
<g >
<title>_perf_ioctl (160 samples, 80.00%)</title><rect x="116.2" y="165" width="944.0" height="15.0" fill="rgb(249,110,24)" rx="2" ry="2" />
<text  x="119.20" y="175.5" >_perf_ioctl</text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="104.4" y="325" width="5.9" height="15.0" fill="rgb(249,122,39)" rx="2" ry="2" />
<text  x="107.40" y="335.5" ></text>
</g>
<g >
<title>migration/14 (1 samples, 0.50%)</title><rect x="27.7" y="373" width="5.9" height="15.0" fill="rgb(241,39,15)" rx="2" ry="2" />
<text  x="30.70" y="383.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.0 (160 samples, 80.00%)</title><rect x="116.2" y="53" width="944.0" height="15.0" fill="rgb(247,8,17)" rx="2" ry="2" />
<text  x="119.20" y="63.5" >__intel_pmu_enable_all.constprop.0</text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="57.2" y="309" width="5.9" height="15.0" fill="rgb(231,66,7)" rx="2" ry="2" />
<text  x="60.20" y="319.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="69.0" y="325" width="5.9" height="15.0" fill="rgb(238,23,0)" rx="2" ry="2" />
<text  x="72.00" y="335.5" ></text>
</g>
<g >
<title>migration_cpu_stop (1 samples, 0.50%)</title><rect x="104.4" y="293" width="5.9" height="15.0" fill="rgb(211,187,35)" rx="2" ry="2" />
<text  x="107.40" y="303.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.50%)</title><rect x="57.2" y="245" width="5.9" height="15.0" fill="rgb(249,86,14)" rx="2" ry="2" />
<text  x="60.20" y="255.5" ></text>
</g>
<g >
<title>vfs_read (1 samples, 0.50%)</title><rect x="1066.1" y="197" width="5.9" height="15.0" fill="rgb(231,221,16)" rx="2" ry="2" />
<text  x="1069.10" y="207.5" ></text>
</g>
<g >
<title>idle_cpu (1 samples, 0.50%)</title><rect x="74.9" y="197" width="5.9" height="15.0" fill="rgb(238,105,34)" rx="2" ry="2" />
<text  x="77.90" y="207.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="98.5" y="341" width="5.9" height="15.0" fill="rgb(237,114,1)" rx="2" ry="2" />
<text  x="101.50" y="351.5" ></text>
</g>
<g >
<title>migration_cpu_stop (1 samples, 0.50%)</title><rect x="45.4" y="293" width="5.9" height="15.0" fill="rgb(229,200,31)" rx="2" ry="2" />
<text  x="48.40" y="303.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="63.1" y="229" width="5.9" height="15.0" fill="rgb(238,129,31)" rx="2" ry="2" />
<text  x="66.10" y="239.5" ></text>
</g>
<g >
<title>account_entity_enqueue (1 samples, 0.50%)</title><rect x="104.4" y="229" width="5.9" height="15.0" fill="rgb(240,182,43)" rx="2" ry="2" />
<text  x="107.40" y="239.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="69.0" y="293" width="5.9" height="15.0" fill="rgb(211,48,30)" rx="2" ry="2" />
<text  x="72.00" y="303.5" ></text>
</g>
<g >
<title>cmd_record (162 samples, 81.00%)</title><rect x="116.2" y="293" width="955.8" height="15.0" fill="rgb(240,2,14)" rx="2" ry="2" />
<text  x="119.20" y="303.5" >cmd_record</text>
</g>
<g >
<title>cpuidle_enter (17 samples, 8.50%)</title><rect x="1072.0" y="293" width="100.3" height="15.0" fill="rgb(207,169,46)" rx="2" ry="2" />
<text  x="1075.00" y="303.5" >cpuidle_enter</text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="27.7" y="357" width="5.9" height="15.0" fill="rgb(229,40,47)" rx="2" ry="2" />
<text  x="30.70" y="367.5" ></text>
</g>
<g >
<title>migration_cpu_stop (1 samples, 0.50%)</title><rect x="10.0" y="293" width="5.9" height="15.0" fill="rgb(226,43,6)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>generic_exec_single (160 samples, 80.00%)</title><rect x="116.2" y="101" width="944.0" height="15.0" fill="rgb(248,93,10)" rx="2" ry="2" />
<text  x="119.20" y="111.5" >generic_exec_single</text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="39.5" y="325" width="5.9" height="15.0" fill="rgb(250,66,42)" rx="2" ry="2" />
<text  x="42.50" y="335.5" ></text>
</g>
<g >
<title>smp_call_function_single (160 samples, 80.00%)</title><rect x="116.2" y="117" width="944.0" height="15.0" fill="rgb(241,223,5)" rx="2" ry="2" />
<text  x="119.20" y="127.5" >smp_call_function_single</text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="39.5" y="213" width="5.9" height="15.0" fill="rgb(240,112,29)" rx="2" ry="2" />
<text  x="42.50" y="223.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="15.9" y="229" width="5.9" height="15.0" fill="rgb(238,125,1)" rx="2" ry="2" />
<text  x="18.90" y="239.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="86.7" y="309" width="5.9" height="15.0" fill="rgb(239,153,47)" rx="2" ry="2" />
<text  x="89.70" y="319.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="74.9" y="325" width="5.9" height="15.0" fill="rgb(210,97,47)" rx="2" ry="2" />
<text  x="77.90" y="335.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="27.7" y="325" width="5.9" height="15.0" fill="rgb(222,41,5)" rx="2" ry="2" />
<text  x="30.70" y="335.5" ></text>
</g>
<g >
<title>idle_cpu (1 samples, 0.50%)</title><rect x="27.7" y="197" width="5.9" height="15.0" fill="rgb(227,225,41)" rx="2" ry="2" />
<text  x="30.70" y="207.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="15.9" y="261" width="5.9" height="15.0" fill="rgb(214,141,22)" rx="2" ry="2" />
<text  x="18.90" y="271.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="110.3" y="245" width="5.9" height="15.0" fill="rgb(226,101,53)" rx="2" ry="2" />
<text  x="113.30" y="255.5" ></text>
</g>
<g >
<title>find_busiest_group (1 samples, 0.50%)</title><rect x="39.5" y="229" width="5.9" height="15.0" fill="rgb(206,11,37)" rx="2" ry="2" />
<text  x="42.50" y="239.5" ></text>
</g>
<g >
<title>sched_clock (1 samples, 0.50%)</title><rect x="51.3" y="229" width="5.9" height="15.0" fill="rgb(215,126,15)" rx="2" ry="2" />
<text  x="54.30" y="239.5" ></text>
</g>
<g >
<title>set_task_cpu (1 samples, 0.50%)</title><rect x="45.4" y="261" width="5.9" height="15.0" fill="rgb(212,4,34)" rx="2" ry="2" />
<text  x="48.40" y="271.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="98.5" y="277" width="5.9" height="15.0" fill="rgb(229,186,51)" rx="2" ry="2" />
<text  x="101.50" y="287.5" ></text>
</g>
<g >
<title>native_write_msr (160 samples, 80.00%)</title><rect x="116.2" y="37" width="944.0" height="15.0" fill="rgb(227,187,25)" rx="2" ry="2" />
<text  x="119.20" y="47.5" >native_write_msr</text>
</g>
<g >
<title>migration/19 (1 samples, 0.50%)</title><rect x="57.2" y="373" width="5.9" height="15.0" fill="rgb(248,22,46)" rx="2" ry="2" />
<text  x="60.20" y="383.5" ></text>
</g>
<g >
<title>native_sched_clock (1 samples, 0.50%)</title><rect x="51.3" y="213" width="5.9" height="15.0" fill="rgb(211,66,6)" rx="2" ry="2" />
<text  x="54.30" y="223.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="33.6" y="325" width="5.9" height="15.0" fill="rgb(211,212,20)" rx="2" ry="2" />
<text  x="36.60" y="335.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="74.9" y="341" width="5.9" height="15.0" fill="rgb(227,116,40)" rx="2" ry="2" />
<text  x="77.90" y="351.5" ></text>
</g>
<g >
<title>migration/30 (1 samples, 0.50%)</title><rect x="74.9" y="373" width="5.9" height="15.0" fill="rgb(244,52,40)" rx="2" ry="2" />
<text  x="77.90" y="383.5" ></text>
</g>
<g >
<title>migration/10 (1 samples, 0.50%)</title><rect x="15.9" y="373" width="5.9" height="15.0" fill="rgb(250,171,30)" rx="2" ry="2" />
<text  x="18.90" y="383.5" ></text>
</g>
<g >
<title>main (162 samples, 81.00%)</title><rect x="116.2" y="325" width="955.8" height="15.0" fill="rgb(205,9,34)" rx="2" ry="2" />
<text  x="119.20" y="335.5" >main</text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="63.1" y="357" width="5.9" height="15.0" fill="rgb(247,110,22)" rx="2" ry="2" />
<text  x="66.10" y="367.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="33.6" y="341" width="5.9" height="15.0" fill="rgb(207,75,50)" rx="2" ry="2" />
<text  x="36.60" y="351.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="57.2" y="357" width="5.9" height="15.0" fill="rgb(234,165,25)" rx="2" ry="2" />
<text  x="60.20" y="367.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="110.3" y="357" width="5.9" height="15.0" fill="rgb(239,8,41)" rx="2" ry="2" />
<text  x="113.30" y="367.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="57.2" y="341" width="5.9" height="15.0" fill="rgb(214,96,1)" rx="2" ry="2" />
<text  x="60.20" y="351.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="33.6" y="293" width="5.9" height="15.0" fill="rgb(215,112,26)" rx="2" ry="2" />
<text  x="36.60" y="303.5" ></text>
</g>
<g >
<title>remote_function (160 samples, 80.00%)</title><rect x="116.2" y="85" width="944.0" height="15.0" fill="rgb(249,50,37)" rx="2" ry="2" />
<text  x="119.20" y="95.5" >remote_function</text>
</g>
<g >
<title>__bitmap_and (1 samples, 0.50%)</title><rect x="69.0" y="229" width="5.9" height="15.0" fill="rgb(240,15,11)" rx="2" ry="2" />
<text  x="72.00" y="239.5" ></text>
</g>
<g >
<title>balance_fair (1 samples, 0.50%)</title><rect x="15.9" y="277" width="5.9" height="15.0" fill="rgb(234,40,37)" rx="2" ry="2" />
<text  x="18.90" y="287.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.50%)</title><rect x="39.5" y="341" width="5.9" height="15.0" fill="rgb(232,11,6)" rx="2" ry="2" />
<text  x="42.50" y="351.5" ></text>
</g>
<g >
<title>run_builtin (162 samples, 81.00%)</title><rect x="116.2" y="309" width="955.8" height="15.0" fill="rgb(223,219,25)" rx="2" ry="2" />
<text  x="119.20" y="319.5" >run_builtin</text>
</g>
<g >
<title>newidle_balance (1 samples, 0.50%)</title><rect x="27.7" y="261" width="5.9" height="15.0" fill="rgb(226,120,50)" rx="2" ry="2" />
<text  x="30.70" y="271.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.50%)</title><rect x="21.8" y="309" width="5.9" height="15.0" fill="rgb(254,133,7)" rx="2" ry="2" />
<text  x="24.80" y="319.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.50%)</title><rect x="21.8" y="357" width="5.9" height="15.0" fill="rgb(206,56,2)" rx="2" ry="2" />
<text  x="24.80" y="367.5" ></text>
</g>
<g >
<title>load_balance (1 samples, 0.50%)</title><rect x="74.9" y="245" width="5.9" height="15.0" fill="rgb(216,67,1)" rx="2" ry="2" />
<text  x="77.90" y="255.5" ></text>
</g>
<g >
<title>set_task_cpu (1 samples, 0.50%)</title><rect x="10.0" y="261" width="5.9" height="15.0" fill="rgb(222,0,39)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="86.7" y="325" width="5.9" height="15.0" fill="rgb(224,79,21)" rx="2" ry="2" />
<text  x="89.70" y="335.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (17 samples, 8.50%)</title><rect x="1072.0" y="277" width="100.3" height="15.0" fill="rgb(233,114,18)" rx="2" ry="2" />
<text  x="1075.00" y="287.5" >cpuidle_ente..</text>
</g>
<g >
<title>tick_nohz_get_sleep_length (1 samples, 0.50%)</title><rect x="1178.2" y="277" width="5.9" height="15.0" fill="rgb(219,106,3)" rx="2" ry="2" />
<text  x="1181.20" y="287.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="63.1" y="325" width="5.9" height="15.0" fill="rgb(245,171,8)" rx="2" ry="2" />
<text  x="66.10" y="335.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (1 samples, 0.50%)</title><rect x="21.8" y="213" width="5.9" height="15.0" fill="rgb(239,189,31)" rx="2" ry="2" />
<text  x="24.80" y="223.5" ></text>
</g>
<g >
<title>migration/2 (1 samples, 0.50%)</title><rect x="69.0" y="373" width="5.9" height="15.0" fill="rgb(225,182,1)" rx="2" ry="2" />
<text  x="72.00" y="383.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.50%)</title><rect x="74.9" y="293" width="5.9" height="15.0" fill="rgb(245,36,26)" rx="2" ry="2" />
<text  x="77.90" y="303.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.50%)</title><rect x="33.6" y="245" width="5.9" height="15.0" fill="rgb(219,180,24)" rx="2" ry="2" />
<text  x="36.60" y="255.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.50%)</title><rect x="110.3" y="325" width="5.9" height="15.0" fill="rgb(239,41,3)" rx="2" ry="2" />
<text  x="113.30" y="335.5" ></text>
</g>
<g >
<title>sched_clock_cpu (1 samples, 0.50%)</title><rect x="51.3" y="245" width="5.9" height="15.0" fill="rgb(251,24,25)" rx="2" ry="2" />
<text  x="54.30" y="255.5" ></text>
</g>
<g >
<title>perf_ioctl (160 samples, 80.00%)</title><rect x="116.2" y="181" width="944.0" height="15.0" fill="rgb(246,110,36)" rx="2" ry="2" />
<text  x="119.20" y="191.5" >perf_ioctl</text>
</g>
<g >
<title>migration/7 (1 samples, 0.50%)</title><rect x="104.4" y="373" width="5.9" height="15.0" fill="rgb(236,185,54)" rx="2" ry="2" />
<text  x="107.40" y="383.5" ></text>
</g>
</g>
</svg>
